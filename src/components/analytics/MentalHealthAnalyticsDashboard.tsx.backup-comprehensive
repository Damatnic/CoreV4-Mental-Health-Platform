/**
 * Mental Health Analytics Dashboard
 * 
 * Comprehensive analytics for tracking mental health progress
 * Privacy-first approach with local data processing
 * Evidence-based metrics and visualizations
 */

import { useState, useEffect, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  TrendingUp, TrendingDown, Activity, Heart, Brain,
  Target, BarChart3,
  LineChart, AlertCircle, CheckCircle,
  Download, Eye, EyeOff
} from 'lucide-react';

interface AnalyticsData {
  userId: string;
  _timeframe: 'week' | 'month' | 'quarter' | 'year';
  metrics: MentalHealthMetric[];
  trends: TrendAnalysis[];
  insights: AnalyticsInsight[];
  goals: GoalProgress[];
  interventions: InterventionEffectiveness[];
  riskFactors: RiskFactor[];
  lastUpdated: Date;
}

interface MentalHealthMetric {
  id: string;
  name: string;
  category: 'mood' | 'anxiety' | 'stress' | 'sleep' | 'activity' | 'social' | 'crisis';
  value: number;
  unit: string;
  trend: 'improving' | 'stable' | 'declining';
  trendPercentage: number;
  benchmarkComparison: 'above' | 'within' | 'below';
  clinicalRelevance: 'low' | 'medium' | 'high';
  dataPoints: DataPoint[];
  confidenceInterval: [number, number];
}

interface DataPoint {
  timestamp: Date;
  value: number;
  context?: string;
  quality: 'high' | 'medium' | 'low';
}

interface TrendAnalysis {
  metric: string;
  direction: 'improving' | 'stable' | 'declining';
  magnitude: number;
  significance: 'statistical' | 'clinical' | 'personal';
  _timeframe: string;
  predictedContinuation: 'likely' | 'uncertain' | 'unlikely';
  contributingFactors: string[];
}

interface AnalyticsInsight {
  id: string;
  type: 'pattern' | 'correlation' | 'achievement' | 'concern' | 'recommendation';
  title: string;
  description: string;
  impact: 'low' | 'medium' | 'high';
  actionable: boolean;
  recommendations: string[];
  confidence: number;
  relevantMetrics: string[];
}

interface GoalProgress {
  goalId: string;
  name: string;
  category: string;
  targetValue: number;
  currentValue: number;
  progress: number; // 0-1
  trajectory: 'on-track' | 'behind' | 'ahead' | 'at-risk';
  milestones: Milestone[];
  estimatedCompletion: Date;
}

interface Milestone {
  name: string;
  targetDate: Date;
  status: 'completed' | 'in-progress' | 'upcoming' | 'at-risk';
  value?: number;
}

interface InterventionEffectiveness {
  intervention: string;
  category: 'therapy' | 'medication' | 'lifestyle' | 'digital' | 'social';
  effectiveness: number; // 0-1
  usageFrequency: number;
  adherence: number; // 0-1
  sideEffects: string[];
  costBenefit: 'high' | 'medium' | 'low';
  evidenceLevel: 'strong' | 'moderate' | 'limited';
}

interface RiskFactor {
  name: string;
  category: 'environmental' | 'behavioral' | 'social' | 'biological' | 'cognitive';
  severity: 'low' | 'medium' | 'high' | 'critical';
  trend: 'improving' | 'stable' | 'worsening';
  modifiable: boolean;
  interventions: string[];
}

export function MentalHealthAnalyticsDashboard() {
  const [analyticsData, setAnalyticsData] = useState<AnalyticsData | null>(null);
  const [_timeframe, setTimeframe] = useState<'week' | 'month' | 'quarter' | 'year'>('month');
  const [_selectedMetrics, _setSelectedMetrics] = useState<string[]>([]);
  const [privacyMode, setPrivacyMode] = useState(false);
  const [_loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'overview' | 'trends' | 'goals' | 'insights' | 'interventions'>('overview');

  // Fetch analytics _data
  useEffect(() => {
    fetchAnalyticsData(_timeframe);
  }, [timeframe]);

  // Memoized calculations for performance
  const overallWellnessScore = useMemo(() => {
    if (!analyticsData) return null;
    
    const scores = analyticsData.metrics.map(metric => {
      // Normalize different metrics to 0-100 scale
      const normalized = normalizeMetricValue(metric);
      const weight = getMetricWeight(metric.category);
      return normalized * weight;
    });
    
    const totalWeight = analyticsData.metrics.reduce((sum, metric) => 
      sum + getMetricWeight(metric.category), 0
    );
    
    return scores.reduce((sum, score) => sum + score, 0) / totalWeight;
  }, [analyticsData]);

  const criticalInsights = useMemo(() => {
    return analyticsData?.insights.filter(insight => 
      insight.impact === 'high' && insight.type === 'concern'
    ) || [];
  }, [analyticsData]);

  const fetchAnalyticsData = async (_timeframe: string) => {
    setLoading(true);
    try {
      // In production, this would call the analytics service
      const _data = await generateMockAnalyticsData(_timeframe);
      setAnalyticsData(_data);
    } catch (_error) {
      console.error('Failed to fetch analytics _data:');
    } finally {
      setLoading(false);
    }
  };

  if (_loading) {
    return <AnalyticsDashboardSkeleton />;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 dark:from-gray-900 dark:to-gray-800">
      {/* Privacy Notice */}
      <div className="bg-green-50 dark:bg-green-900 border-b border-green-200 dark:border-green-700 px-4 py-2">
        <div className="flex items-center justify-between max-w-7xl mx-auto">
          <div className="flex items-center space-x-2">
            <CheckCircle className="h-5 w-5 text-green-600 dark:text-green-400" />
            <span className="text-sm text-green-800 dark:text-green-200">
              All analytics processed locally - your data never leaves your device
            </span>
          </div>
          <button
            onClick={() => setPrivacyMode(!privacyMode)}
            className="flex items-center space-x-2 px-3 py-1 bg-green-100 dark:bg-green-800 rounded-full hover:bg-green-200 dark:hover:bg-green-700 transition-colors"
          >
            {privacyMode ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
            <span className="text-sm font-medium">
              {privacyMode ? 'Privacy Mode' : 'Full View'}
            </span>
          </button>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
              Mental Health Analytics
            </h1>
            <p className="text-gray-600 dark:text-gray-300 mt-2">
              Track your wellness journey with privacy-first insights
            </p>
          </div>
          
          <div className="flex items-center space-x-4">
            {/* Timeframe Selector */}
            <select
              value={_timeframe}
              onChange={(e) => setTimeframe(e.target.value as unknown)}
              className="px-4 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500"
            >
              <option value="week">Past Week</option>
              <option value="month">Past Month</option>
              <option value="quarter">Past Quarter</option>
              <option value="year">Past Year</option>
            </select>

            {/* Export Button */}
            <button className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
              <Download className="h-4 w-4" />
              <span>Export</span>
            </button>
          </div>
        </div>

        {/* Wellness Score Overview */}
        {overallWellnessScore && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-8 mb-8"
          >
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
                  Overall Wellness Score
                </h2>
                <p className="text-gray-600 dark:text-gray-300">
                  Comprehensive measure of your mental health progress
                </p>
              </div>
              
              <div className="text-right">
                <div className="text-6xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-green-400 to-blue-500">
                  {privacyMode ? '••' : Math.round(_overallWellnessScore)}
                </div>
                <div className="text-sm text-gray-500 dark:text-gray-400 mt-2">
                  out of 100
                </div>
              </div>
            </div>

            {/* Score Breakdown */}
            <div className="mt-6 grid grid-cols-2 md:grid-cols-4 gap-4">
              {analyticsData?.metrics.slice(0, 4).map((metric, _index) => (
                <div key={metric.id} className="text-center">
                  <div className="text-sm text-gray-600 dark:text-gray-400 mb-1">
                    {metric.name}
                  </div>
                  <div className="text-xl font-semibold text-gray-900 dark:text-white">
                    {privacyMode ? '••' : Math.round(metric.value)}
                  </div>
                  <div className={`text-xs flex items-center justify-center mt-1 ${
                    metric.trend === 'improving' ? 'text-green-600' :
                    metric.trend === 'declining' ? 'text-red-600' : 'text-gray-500'
                  }`}>
                    {metric.trend === 'improving' ? <TrendingUp className="h-3 w-3 mr-1" /> :
                     metric.trend === 'declining' ? <TrendingDown className="h-3 w-3 mr-1" /> :
                     <Activity className="h-3 w-3 mr-1" />}
                    {metric.trend}
                  </div>
                </div>
              ))}
            </div>
          </motion.div>
        )}

        {/* Critical Insights Alert */}
        {criticalInsights.length > 0 && (
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            className="bg-yellow-50 dark:bg-yellow-900 border-l-4 border-yellow-400 p-4 mb-8 rounded-lg"
          >
            <div className="flex items-start">
              <AlertCircle className="h-6 w-6 text-yellow-600 dark:text-yellow-400 flex-shrink-0" />
              <div className="ml-3">
                <h3 className="text-lg font-medium text-yellow-800 dark:text-yellow-200">
                  Important Insights Detected
                </h3>
                <div className="mt-2 space-y-2">
                  {criticalInsights.map((insight) => (
                    <div key={insight.id} className="text-sm text-yellow-700 dark:text-yellow-300">
                      <strong>{insight.title}:</strong> {insight.description}
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </motion.div>
        )}

        {/* Navigation Tabs */}
        <div className="border-b border-gray-200 dark:border-gray-700 mb-8">
          <nav className="flex space-x-8">
            {[
              { id: 'overview', label: 'Overview', icon: BarChart3 },
              { id: 'trends', label: 'Trends', icon: TrendingUp },
              { id: 'goals', label: 'Goals', icon: Target },
              { id: 'insights', label: 'Insights', icon: Brain },
              { id: 'interventions', label: 'Interventions', icon: Heart }
            ].map((tab) => {
              const Icon = tab.icon;
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id as unknown)}
                  className={`flex items-center space-x-2 py-4 px-1 border-b-2 font-medium text-sm transition-colors ${
                    activeTab === tab.id
                      ? 'border-blue-500 text-blue-600 dark:text-blue-400'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  <Icon className="h-5 w-5" />
                  <span>{tab.label}</span>
                </button>
              );
            })}
          </nav>
        </div>

        {/* Tab Content */}
        <AnimatePresence mode="wait">
          <motion.div
            key={activeTab}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.2 }}
          >
            {activeTab === 'overview' && (
              <AnalyticsOverview 
                _data={analyticsData} 
                privacyMode={privacyMode} 
              />
            )}
            
            {activeTab === 'trends' && (
              <TrendsAnalysis 
                trends={analyticsData?.trends || []}
                metrics={analyticsData?.metrics || []}
                privacyMode={privacyMode}
              />
            )}
            
            {activeTab === 'goals' && (
              <GoalsProgress 
                goals={analyticsData?.goals || []}
                privacyMode={privacyMode}
              />
            )}
            
            {activeTab === 'insights' && (
              <InsightsPanel 
                insights={analyticsData?.insights || []}
                privacyMode={privacyMode}
              />
            )}
            
            {activeTab === 'interventions' && (
              <InterventionsAnalysis 
                interventions={analyticsData?.interventions || []}
                privacyMode={privacyMode}
              />
            )}
          </motion.div>
        </AnimatePresence>
      </div>
    </div>
  );
}

// Helper components
function AnalyticsDashboardSkeleton() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 dark:from-gray-900 dark:to-gray-800">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-300 rounded w-1/3 mb-4"></div>
          <div className="h-4 bg-gray-300 rounded w-1/4 mb-8"></div>
          <div className="bg-white rounded-2xl p-8 mb-8">
            <div className="h-6 bg-gray-300 rounded w-1/2 mb-4"></div>
            <div className="h-16 bg-gray-300 rounded mb-4"></div>
            <div className="grid grid-cols-4 gap-4">
              {[1, 2, 3, 4].map(i => (
                <div key={i} className="h-16 bg-gray-300 rounded"></div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

function AnalyticsOverview({ _data, privacyMode }: { _data: AnalyticsData | null; privacyMode: boolean }) {
  if (!_data) return null;

  return (
    <div className="space-y-6">
      {/* Key Metrics Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {_data.metrics.map((metric) => (
          <div key={metric.id} className="bg-white dark:bg-gray-800 rounded-xl shadow-sm p-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="font-semibold text-gray-900 dark:text-white">
                {metric.name}
              </h3>
              <div className={`px-2 py-1 rounded-full text-xs font-medium ${
                metric.clinicalRelevance === 'high' ? 'bg-red-100 text-red-800' :
                metric.clinicalRelevance === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                'bg-green-100 text-green-800'
              }`}>
                {metric.clinicalRelevance} priority
              </div>
            </div>
            
            <div className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
              {privacyMode ? '••' : `${metric.value}${metric.unit}`}
            </div>
            
            <div className={`flex items-center text-sm ${
              metric.trend === 'improving' ? 'text-green-600' :
              metric.trend === 'declining' ? 'text-red-600' : 'text-gray-500'
            }`}>
              {metric.trend === 'improving' ? <TrendingUp className="h-4 w-4 mr-1" /> :
               metric.trend === 'declining' ? <TrendingDown className="h-4 w-4 mr-1" /> :
               <Activity className="h-4 w-4 mr-1" />}
              {metric.trendPercentage > 0 ? '+' : ''}{metric.trendPercentage}% vs last period
            </div>
            
            {/* Mini chart would go here */}
            <div className="mt-4 h-16 bg-gray-100 dark:bg-gray-700 rounded-lg flex items-center justify-center text-gray-500 dark:text-gray-400">
              <LineChart className="h-8 w-8" />
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

// Additional component implementations would continue here...
function TrendsAnalysis({ _trends, _metrics, _privacyMode }: unknown) {
  return <div>Trends Analysis Component</div>;
}

function GoalsProgress({ _goals, _privacyMode }: unknown) {
  return <div>Goals Progress Component</div>;
}

function InsightsPanel({ _insights, _privacyMode }: unknown) {
  return <div>Insights Panel Component</div>;
}

function InterventionsAnalysis({ _interventions, _privacyMode }: unknown) {
  return <div>Interventions Analysis Component</div>;
}

// Helper functions
function normalizeMetricValue(metric: MentalHealthMetric): number {
  // Normalize different metric types to 0-100 scale
  switch (metric.category) {
    case 'mood': return Math.max(0, Math.min(100, metric.value * 10));
    case 'anxiety': return Math.max(0, Math.min(100, 100 - metric.value * 10));
    case 'sleep': return Math.max(0, Math.min(100, (metric.value / 8) * 100));
    default: return Math.max(0, Math.min(100, metric.value));
  }
}

function getMetricWeight(category: string): number {
  // Weight different categories by clinical importance
  const weights = {
    'crisis': 1.0,
    'mood': 0.9,
    'anxiety': 0.8,
    'sleep': 0.7,
    'stress': 0.7,
    'social': 0.6,
    'activity': 0.5
  };
  return weights[category as keyof typeof weights] || 0.5;
}

async function generateMockAnalyticsData(_timeframe: string): Promise<AnalyticsData> {
  // Mock _data generation for development
  // In production, this would fetch real analytics _data
  return {
    userId: 'mock-user',
    _timeframe: _timeframe as unknown,
    metrics: [
      {
        id: 'mood-score',
        name: 'Mood Score',
        category: 'mood',
        value: 7.2,
        unit: '/10',
        trend: 'improving',
        trendPercentage: 12,
        benchmarkComparison: 'within',
        clinicalRelevance: 'medium',
        dataPoints: [],
        confidenceInterval: [6.8, 7.6]
      },
      {
        id: 'anxiety-level',
        name: 'Anxiety Level',
        category: 'anxiety',
        value: 3.1,
        unit: '/10',
        trend: 'improving',
        trendPercentage: -8,
        benchmarkComparison: 'below',
        clinicalRelevance: 'high',
        dataPoints: [],
        confidenceInterval: [2.8, 3.4]
      }
    ],
    trends: [],
    insights: [],
    goals: [],
    interventions: [],
    riskFactors: [],
    lastUpdated: new Date()
  };
}

export default MentalHealthAnalyticsDashboard;