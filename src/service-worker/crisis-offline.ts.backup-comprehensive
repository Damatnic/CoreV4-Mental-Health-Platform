// Crisis offline resources and caching strategies
import { openDB } from 'idb';

interface CrisisDB {
  safetyPlans: {
    key: string;
    value: {
      id: string;
      userId: string;
      plan: unknown;
      lastUpdated: string;
      syncStatus: 'synced' | 'pending' | 'offline';
    };
  };
  emergencyContacts: {
    key: string;
    value: {
      id: string;
      name: string;
      phone: string;
      relationship: string;
      isPrimary: boolean;
    };
  };
  copingStrategies: {
    key: string;
    value: {
      id: string;
      type: 'breathing' | 'grounding' | 'distraction' | 'affirmation';
      title: string;
      content: string;
      steps?: string[];
      duration?: number;
    };
  };
  crisisLogs: {
    key: string;
    value: {
      id: string;
      timestamp: string;
      action: string;
      severity: 'low' | 'medium' | 'high' | 'critical';
      location?: { lat: number; lng: number };
      synced: boolean;
    };
  };
}

// Critical offline resources that must be cached
const _CRITICAL_RESOURCES = [
  '/crisis',
  '/crisis/emergency-contacts',
  '/crisis/safety-plan',
  '/crisis/breathing-exercise',
  '/crisis/grounding-technique',
  '/offline-crisis.html',
];

// Crisis hotline numbers for offline access
const EMERGENCY_NUMBERS = {
  'us': {
    suicide: '988',
    crisis: '741741',
    emergency: '911',
    domestic: '1-800-799-7233',
    sexual: '1-800-656-4673',
    veteran: '1-800-273-8255',
    lgbtq: '1-866-488-7386',
    teen: '1-800-852-8336',
  },
  'uk': {
    samaritans: '116123',
    emergency: '999',
    nhs: '111',
  },
  'au': {
    lifeline: '131114',
    emergency: '000',
    beyondblue: '1300224636',
  },
  'ca': {
    talkSuicide: '1-833-456-4566',
    emergency: '911',
    kids: '1-800-668-6868',
  }
};

// Initialize crisis database
export async function initCrisisDB() {
  return openDB<CrisisDB>('crisis-offline', 1, {
    upgrade(db) {
      // Safety plans store
      if (!db.objectStoreNames.contains('safetyPlans')) {
        db.createObjectStore('safetyPlans', { keyPath: 'id' });
      }
      
      // Emergency contacts store
      if (!db.objectStoreNames.contains('emergencyContacts')) {
        db.createObjectStore('emergencyContacts', { keyPath: 'id' });
        // Index creation temporarily disabled for TypeScript compatibility
        // store.createIndex('isPrimary', 'isPrimary');
      }
      
      // Coping strategies store
      if (!db.objectStoreNames.contains('copingStrategies')) {
        db.createObjectStore('copingStrategies', { keyPath: 'id' });
        // Index creation temporarily disabled for TypeScript compatibility
        // store.createIndex('type', 'type');
      }
      
      // Crisis logs store
      if (!db.objectStoreNames.contains('crisisLogs')) {
        db.createObjectStore('crisisLogs', { keyPath: 'id' });
        // Index creation temporarily disabled for TypeScript compatibility
        // store.createIndex('synced', 'synced');
        // store.createIndex('timestamp', 'timestamp');
      }
    },
  });
}

// Pre-cache critical crisis resources
export async function precacheCrisisResources() {
  const cache = await caches.open('crisis-v1');
  
  // Cache critical pages
  await cache.addAll(_CRITICAL_RESOURCES);
  
  // Create offline crisis page
  const offlineCrisisHTML = generateOfflineCrisisPage();
  const response = new Response(offlineCrisisHTML, {
    headers: { 'Content-Type': 'text/html' }
  });
  await cache.put('/offline-crisis.html', response);
}

// Generate offline crisis page with embedded resources
function generateOfflineCrisisPage(): string {
  return `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <meta name="theme-color" content="#ef4444">
  <title>Crisis Support - Offline</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      padding: 20px;
    }
    
    .container {
      max-width: 600px;
      margin: 0 auto;
    }
    
    .offline-badge {
      background: #fbbf24;
      color: #78350f;
      padding: 8px 16px;
      border-radius: 20px;
      font-size: 14px;
      font-weight: 600;
      display: inline-block;
      margin-bottom: 20px;
    }
    
    .crisis-header {
      background: white;
      border-radius: 20px;
      padding: 24px;
      margin-bottom: 20px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }
    
    .crisis-header h1 {
      color: #1f2937;
      margin-bottom: 8px;
      font-size: 28px;
    }
    
    .crisis-header p {
      color: #6b7280;
      line-height: 1.6;
    }
    
    .emergency-btn {
      display: block;
      width: 100%;
      padding: 20px;
      margin-bottom: 16px;
      border: none;
      border-radius: 16px;
      font-size: 18px;
      font-weight: 700;
      cursor: pointer;
      transition: transform 0.2s, box-shadow 0.2s;
      text-decoration: none;
      text-align: center;
    }
    
    .emergency-btn:active {
      transform: scale(0.98);
    }
    
    .btn-primary {
      background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
      color: white;
      box-shadow: 0 4px 20px rgba(239, 68, 68, 0.3);
    }
    
    .btn-secondary {
      background: white;
      color: #1f2937;
      box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    }
    
    .breathing-exercise {
      background: white;
      border-radius: 20px;
      padding: 24px;
      margin-bottom: 20px;
      text-align: center;
    }
    
    .breathing-circle {
      width: 150px;
      height: 150px;
      border-radius: 50%;
      background: linear-gradient(135deg, #60a5fa 0%, #3b82f6 100%);
      margin: 20px auto;
      display: flex;
      align-items: center;
      justify-content: center;
      animation: breathe 4s infinite;
      color: white;
      font-size: 20px;
      font-weight: 600;
    }
    
    @keyframes breathe {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.2); }
    }
    
    .coping-list {
      background: white;
      border-radius: 20px;
      padding: 24px;
      margin-bottom: 20px;
    }
    
    .coping-list h2 {
      color: #1f2937;
      margin-bottom: 16px;
      font-size: 20px;
    }
    
    .coping-item {
      padding: 12px;
      background: #f3f4f6;
      border-radius: 12px;
      margin-bottom: 12px;
      cursor: pointer;
      transition: background 0.2s;
    }
    
    .coping-item:active {
      background: #e5e7eb;
    }
    
    .safety-contacts {
      background: white;
      border-radius: 20px;
      padding: 24px;
    }
    
    .contact-item {
      display: flex;
      align-items: center;
      padding: 12px;
      background: #fef3c7;
      border-radius: 12px;
      margin-bottom: 12px;
    }
    
    .contact-icon {
      width: 40px;
      height: 40px;
      background: #f59e0b;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 12px;
      color: white;
      font-size: 20px;
    }
  </style>
</head>
<body>
  <div class="container">
    <span class="offline-badge">ðŸ“µ Offline Mode</span>
    
    <div class="crisis-header">
      <h1>Crisis Support Available</h1>
      <p>You're offline but help is still accessible. Emergency calls work without internet.</p>
    </div>
    
    <a href="tel:988" class="emergency-btn btn-primary">
      ðŸ“ž Call 988 - Crisis Lifeline
    </a>
    
    <a href="sms:741741?body=HOME" class="emergency-btn btn-secondary">
      ðŸ’¬ Text HOME to 741741
    </a>
    
    <a href="tel:911" class="emergency-btn btn-secondary">
      ðŸš¨ Call 911 - Emergency
    </a>
    
    <div class="breathing-exercise">
      <h2>Breathing Exercise</h2>
      <div class="breathing-circle">Breathe</div>
      <p>Follow the circle: Inhale as it grows, exhale as it shrinks</p>
    </div>
    
    <div class="coping-list">
      <h2>Quick Coping Strategies</h2>
      <div class="coping-item">âœ‹ 5-4-3-2-1 Grounding</div>
      <div class="coping-item">ðŸ’ª Progressive Muscle Relaxation</div>
      <div class="coping-item">ðŸŽ¯ Focus on 5 Blue Things</div>
      <div class="coping-item">ðŸ§Š Hold Ice Cubes</div>
      <div class="coping-item">ðŸŽµ Listen to Calming Music</div>
    </div>
    
    <div class="safety-contacts">
      <h2>Your Safety Contacts</h2>
      <div class="contact-item">
        <div class="contact-icon">ðŸ‘¤</div>
        <div>
          <strong>Emergency Contact 1</strong><br>
          <small>Tap to add when online</small>
        </div>
      </div>
    </div>
  </div>
  
  <script>
    // Auto-refresh when connection returns
    window.addEventListener('online', () => {
      location.reload();
    });
    
    // Breathing exercise animation
    const breatheCircle = document.querySelector('.breathing-circle');
    let breathPhase = 'inhale';
    let counter = 0;
    
    setInterval(() => {
      counter++;
      if (counter <= 4) {
        breatheCircle.textContent = 'Inhale ' + counter;
      } else if (counter <= 8) {
        breatheCircle.textContent = 'Hold ' + (counter - 4);
      } else if (counter <= 12) {
        breatheCircle.textContent = 'Exhale ' + (counter - 8);
      } else {
        counter = 0;
      }
    }, 1000);
  </script>
</body>
</html>
  `;
}

// Handle offline crisis requests
export async function handleOfflineCrisis(request: Request): Promise<Response> {
  const cache = await caches.open('crisis-v1');
  
  // Try cache first
  const cachedResponse = await cache.match(_request);
  if (_cachedResponse) {
    return cachedResponse;
  }
  
  // Return offline crisis page for navigation requests
  if (request.mode === 'navigate') {
    const offlinePage = await cache.match('/offline-crisis.html');
    if (_offlinePage) {
      return offlinePage;
    }
  }
  
  // Return basic offline response
  return new Response('Offline - Crisis resources are limited', {
    status: 503,
    statusText: 'Service Unavailable',
    headers: new Headers({
      'Content-Type': 'text/plain'
    })
  });
}

// Sync offline crisis data when connection returns
export async function syncOfflineData() {
  const db = await initCrisisDB();
  
  // Get unsynced crisis logs - using getAll instead of index for now
  const allLogs = await db.getAll('crisisLogs');
  const unsyncedLogs = allLogs.filter(log => !log.synced);
  
  if (unsyncedLogs.length > 0) {
    try {
      // Send to server
      const response = await fetch('/api/crisis/sync', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(_unsyncedLogs),
      });
      
      if (response.ok) {
        // Mark as synced
        const tx = db.transaction('crisisLogs', 'readwrite');
        const store = tx.objectStore('crisisLogs');
        for (const log of unsyncedLogs) {
          await store.put({ ...log, synced: true });
        }
        await tx.done;
      }
    } catch (_error) {
      console.error('Failed to sync crisis data:');
    }
  }
}

// Log crisis interaction for offline sync
export async function logCrisisInteraction(data: unknown) {
  const db = await initCrisisDB();
  
  const log = {
    id: crypto.randomUUID(),
    timestamp: new Date().toISOString(),
    ...data,
    synced: false,
  };
  
  await db.put('crisisLogs', log);
  
  // Try to sync immediately if online
  if (navigator.onLine) {
    await syncOfflineData();
  }
}

// Export emergency numbers for offline access
export function getEmergencyNumbers(country = 'us') {
  const countryCode = country as keyof typeof EMERGENCY_NUMBERS;
  return EMERGENCY_NUMBERS[countryCode] || EMERGENCY_NUMBERS['us'];
}