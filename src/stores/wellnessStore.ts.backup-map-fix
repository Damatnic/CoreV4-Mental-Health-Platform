import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';
import { immer } from 'zustand/middleware/immer';

// Interfaces for wellness data
export interface MoodEntry {
  id: string;
  timestamp: Date;
  moodScore: number;
  emotions: string[];
  activities: string[];
  triggers: string[];
  notes: string;
  weather?: string;
  sleep?: number;
  exercise?: boolean;
  medication?: boolean;
  socialInteraction?: number;
  location?: string;
  energyLevel?: number;
  stressLevel?: number;
  anxietyLevel?: number;
}

export interface WellnessMetrics {
  date: Date;
  moodAverage: number;
  stressAverage: number;
  sleepHours: number;
  exerciseMinutes: number;
  waterIntake: number;
  meditationMinutes: number;
  journalEntries: number;
  socialInteractions: number;
  outdoorTime: number;
  screenTime: number;
  nutritionScore: number;
  medicationAdherence: boolean;
  customMetrics: Record<string, number>;
}

export interface WellnessGoal {
  id: string;
  category: 'physical' | 'mental' | 'emotional' | 'social' | 'spiritual';
  title: string;
  description: string;
  targetValue: number;
  currentValue: number;
  unit: string;
  frequency: 'daily' | 'weekly' | 'monthly';
  startDate: Date;
  endDate?: Date;
  milestones: {
    value: number;
    date: Date;
    achieved: boolean;
  }[];
  reminders: {
    time: string;
    days: string[];
    enabled: boolean;
  }[];
  progress: number;
  status: 'active' | 'completed' | 'paused' | 'abandoned';
  insights: string[];
}

export interface MoodPattern {
  pattern: string;
  frequency: number;
  impact: 'positive' | 'negative' | 'neutral';
  confidence: number;
  recommendation: string;
  relatedFactors: string[];
  timeRange: { start: Date; end: Date };
}

export interface WellnessInsight {
  id: string;
  type: 'trend' | 'correlation' | 'achievement' | 'warning' | 'recommendation';
  title: string;
  description: string;
  priority: 'high' | 'medium' | 'low';
  category: string;
  createdAt: Date;
  expiresAt?: Date;
  actionable: boolean;
  actions?: {
    label: string;
    type: string;
    data: unknown;
  }[];
  relatedMetrics: string[];
  confidence: number;
}

export interface CrisisEvent {
  id: string;
  timestamp: Date;
  severity: 'low' | 'medium' | 'high' | 'critical';
  triggers: string[];
  copingStrategiesUsed: string[];
  supportContactsReached: string[];
  outcome: string;
  duration: number;
  location?: string;
  followUpNeeded: boolean;
  notes: string;
}

export interface TherapeuticContent {
  id: string;
  type: 'cbt' | 'dbt' | 'act' | 'mindfulness' | 'positive-psychology';
  category: string;
  title: string;
  content: string;
  exercises: {
    name: string;
    description: string;
    duration: number;
    difficulty: 'beginner' | 'intermediate' | 'advanced';
  }[];
  relatedMoodStates: string[];
  effectiveness: number;
  lastUsed?: Date;
  timesUsed: number;
  userRating?: number;
}

interface WellnessState {
  // Core data
  moodEntries: MoodEntry[];
  wellnessMetrics: WellnessMetrics[];
  wellnessGoals: WellnessGoal[];
  crisisEvents: CrisisEvent[];
  
  // Analytics
  moodPatterns: MoodPattern[];
  wellnessInsights: WellnessInsight[];
  insights: WellnessInsight[]; // Alias for wellnessInsights (used by dashboard components)
  weeklyScore: number;
  monthlyScore: number;
  yearlyScore: number;
  
  // User preferences
  preferences: {
    reminderSettings: {
      moodCheck: { enabled: boolean; times: string[] };
      medication: { enabled: boolean; times: string[] };
      exercise: { enabled: boolean; time: string };
      hydration: { enabled: boolean; interval: number };
      journaling: { enabled: boolean; time: string };
    };
    privacySettings: {
      shareAnalytics: boolean;
      allowNotifications: boolean;
      dataRetentionDays: number;
    };
    displaySettings: {
      theme: 'light' | 'dark' | 'auto';
      chartType: 'line' | 'bar' | 'area';
      metricsView: 'detailed' | 'summary';
    };
  };
  
  // Therapeutic content
  therapeuticContent: TherapeuticContent[];
  favoriteExercises: string[];
  
  // Actions
  addMoodEntry: (entry: Omit<MoodEntry, 'id' | 'timestamp'>) => void;
  updateMoodEntry: (id: string, updates: Partial<MoodEntry>) => void;
  deleteMoodEntry: (id: string) => void;
  
  addWellnessMetric: (metric: Omit<WellnessMetrics, 'date'>) => void;
  updateWellnessMetric: (date: Date, updates: Partial<WellnessMetrics>) => void;
  
  addWellnessGoal: (goal: Omit<WellnessGoal, 'id' | 'progress' | 'status'>) => void;
  updateWellnessGoal: (id: string, updates: Partial<WellnessGoal>) => void;
  updateGoalProgress: (id: string, value: number) => void;
  completeGoal: (id: string) => void;
  
  recordCrisisEvent: (event: Omit<CrisisEvent, 'id' | 'timestamp'>) => void;
  
  analyzeMoodPatterns: () => void;
  generateInsights: () => void;
  calculateWellnessScores: () => void;
  
  updatePreferences: (updates: Partial<WellnessState['preferences']>) => void;
  
  clearAllData: () => void;
  exportData: () => string;
  importData: (data: string) => void;
}

// Utility functions for analytics
const calculateMoodAverage = (_entries: MoodEntry[], days: number = 7): number => {
  const cutoff = new Date();
  cutoff.setDate(cutoff.getDate() - days);
  
  const recentEntries = _entries.filter(e => new Date(e.timestamp) >= cutoff);
  if (recentEntries.length === 0) return 0;
  
  return recentEntries.reduce((sum, e) => sum + e.moodScore, 0) / recentEntries.length;
};

const detectPatterns = (_entries: MoodEntry[]): MoodPattern[] => {
  const patterns: MoodPattern[] = [];
  
  // Sleep-mood correlation
  const sleepEntries = _entries.filter(e => e.sleep !== undefined);
  if (sleepEntries.length > 5) {
    const lowSleepEntries = sleepEntries.filter(e => (e.sleep || 0) < 6);
    const avgMoodLowSleep = lowSleepEntries.reduce((sum, e) => sum + e.moodScore, 0) / (lowSleepEntries.length || 1);
    const goodSleepEntries = sleepEntries.filter(e => (e.sleep || 0) >= 7);
    const avgMoodGoodSleep = goodSleepEntries.reduce((sum, e) => sum + e.moodScore, 0) / (goodSleepEntries.length || 1);
    
    if (avgMoodGoodSleep - avgMoodLowSleep > 1.5) {
      patterns.push({
        pattern: 'Sleep Quality Impact',
        frequency: sleepEntries.length,
        impact: 'positive',
        confidence: 0.85,
        recommendation: 'Your mood is significantly better with 7+ hours of sleep. Prioritize consistent sleep schedule.',
        relatedFactors: ['sleep', 'mood', 'energy'],
        timeRange: {
          start: new Date(Math.min(...sleepEntries.map(e => new Date(e.timestamp).getTime()))),
          end: new Date()
        }
      });
    }
  }
  
  // Exercise impact
  const exerciseEntries = entries.filter(e => e.exercise === true);
  const noExerciseEntries = entries.filter(e => e.exercise === false);
  if (exerciseEntries.length > 3 && noExerciseEntries.length > 3) {
    const avgMoodWithExercise = exerciseEntries.reduce((sum, e) => sum + e.moodScore, 0) / exerciseEntries.length;
    const avgMoodWithoutExercise = noExerciseEntries.reduce((sum, e) => sum + e.moodScore, 0) / noExerciseEntries.length;
    
    if (avgMoodWithExercise - avgMoodWithoutExercise > 1) {
      patterns.push({
        pattern: 'Exercise Mood Boost',
        frequency: exerciseEntries.length,
        impact: 'positive',
        confidence: 0.75,
        recommendation: `Exercise improves your mood by ${((avgMoodWithExercise - avgMoodWithoutExercise) * 10).toFixed(0)}%. Keep up regular physical activity!`,
        relatedFactors: ['exercise', 'mood', 'energy', 'stress'],
        timeRange: {
          start: new Date(Math.min(..._entries.map(e => new Date(e.timestamp).getTime()))),
          end: new Date()
        }
      });
    }
  }
  
  // Social interaction patterns
  const socialEntries = entries.filter(e => e.socialInteraction !== undefined);
  if (socialEntries.length > 5) {
    const highSocialEntries = socialEntries.filter(e => (e.socialInteraction || 0) >= 4);
    const lowSocialEntries = socialEntries.filter(e => (e.socialInteraction || 0) <= 2);
    
    if (highSocialEntries.length > 0 && lowSocialEntries.length > 0) {
      const avgMoodHighSocial = highSocialEntries.reduce((sum, e) => sum + e.moodScore, 0) / highSocialEntries.length;
      const avgMoodLowSocial = lowSocialEntries.reduce((sum, e) => sum + e.moodScore, 0) / lowSocialEntries.length;
      
      if (avgMoodHighSocial - avgMoodLowSocial > 1.2) {
        patterns.push({
          pattern: 'Social Connection Benefits',
          frequency: socialEntries.length,
          impact: 'positive',
          confidence: 0.8,
          recommendation: 'Social interactions significantly boost your wellbeing. Schedule regular connections with friends and family.',
          relatedFactors: ['social', 'mood', 'stress', 'anxiety'],
          timeRange: {
            start: new Date(Math.min(...socialEntries.map(e => new Date(e.timestamp).getTime()))),
            end: new Date()
          }
        });
      }
    }
  }
  
  // Time of day patterns
  const morningEntries = entries.filter(e => new Date(e.timestamp).getHours() < 12);
  const eveningEntries = entries.filter(e => new Date(e.timestamp).getHours() >= 18);
  
  if (morningEntries.length > 5 && eveningEntries.length > 5) {
    const avgMorningMood = morningEntries.reduce((sum, e) => sum + e.moodScore, 0) / morningEntries.length;
    const avgEveningMood = eveningEntries.reduce((sum, e) => sum + e.moodScore, 0) / eveningEntries.length;
    
    if (Math.abs(avgMorningMood - avgEveningMood) > 1.5) {
      const betterTime = avgMorningMood > avgEveningMood ? 'morning' : 'evening';
      patterns.push({
        pattern: `${betterTime.charAt(0).toUpperCase() + betterTime.slice(1)} Peak Performance`,
        frequency: entries.length,
        impact: 'neutral',
        confidence: 0.7,
        recommendation: `You tend to feel better in the ${betterTime}. Schedule important activities during your peak hours.`,
        relatedFactors: ['time', 'mood', 'energy', 'productivity'],
        timeRange: {
          start: new Date(Math.min(..._entries.map(e => new Date(e.timestamp).getTime()))),
          end: new Date()
        }
      });
    }
  }
  
  return patterns;
};

const generateWellnessInsights = (
  _entries: MoodEntry[],
  metrics: WellnessMetrics[],
  goals: WellnessGoal[]
): WellnessInsight[] => {
  const insights: WellnessInsight[] = [];
  const now = new Date();
  
  // Recent mood trend
  const recentAvg = calculateMoodAverage(_entries, 7);
  const previousAvg = calculateMoodAverage(_entries.filter(e => {
    const date = new Date(e.timestamp);
    const weekAgo = new Date();
    weekAgo.setDate(weekAgo.getDate() - 14);
    const twoWeeksAgo = new Date();
    twoWeeksAgo.setDate(twoWeeksAgo.getDate() - 21);
    return date >= twoWeeksAgo && date < weekAgo;
  }), 7);
  
  if (recentAvg > 0 && previousAvg > 0) {
    const change = ((recentAvg - previousAvg) / previousAvg) * 100;
    if (Math.abs(_change) > 10) {
      insights.push({
        id: `insight-mood-trend-${Date.now()}`,
        type: change > 0 ? 'trend' : 'warning',
        title: change > 0 ? 'Mood Improvement Detected' : 'Mood Decline Alert',
        description: `Your average mood has ${change > 0 ? 'improved' : 'declined'} by ${Math.abs(_change).toFixed(0)}% over the past week.`,
        priority: Math.abs(_change) > 20 ? 'high' : 'medium',
        category: 'mood',
        createdAt: now,
        actionable: true,
        actions: change < 0 ? [
          { label: 'Review coping strategies', type: 'navigate', data: '/wellness/coping' },
          { label: 'Schedule self-care', type: 'navigate', data: '/wellness/self-care' }
        ] : [
          { label: 'Continue current routine', type: 'info', data: null },
          { label: 'Share progress', type: 'share', data: null }
        ],
        relatedMetrics: ['mood', 'stress', 'sleep'],
        confidence: 0.85
      });
    }
  }
  
  // Goal progress insights
  goals.filter(g => g.status === 'active').forEach(goal => {
    const progressPercentage = (goal.currentValue / goal.targetValue) * 100;
    
    if (progressPercentage >= 100) {
      insights.push({
        id: `insight-goal-complete-${goal.id}`,
        type: 'achievement',
        title: `Goal Achieved: ${goal.title}`,
        description: `Congratulations! You've reached your ${goal.title} goal.`,
        priority: 'high',
        category: 'goals',
        createdAt: now,
        actionable: true,
        actions: [
          { label: 'Set new goal', type: 'navigate', data: '/goals/new' },
          { label: 'View progress', type: 'navigate', data: `/goals/${goal.id}` }
        ],
        relatedMetrics: [goal.category],
        confidence: 1.0
      });
    } else if (progressPercentage < 30 && goal.endDate) {
      const daysRemaining = Math.ceil((new Date(goal.endDate).getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
      if (daysRemaining < 7) {
        insights.push({
          id: `insight-goal-risk-${goal.id}`,
          type: 'warning',
          title: `Goal at Risk: ${goal.title}`,
          description: `Only ${daysRemaining} days remaining with ${progressPercentage.toFixed(0)}% progress.`,
          priority: 'high',
          category: 'goals',
          createdAt: now,
          expiresAt: goal.endDate,
          actionable: true,
          actions: [
            { label: 'Update goal', type: 'navigate', data: `/goals/${goal.id}/edit` },
            { label: 'Get support', type: 'navigate', data: '/community/support' }
          ],
          relatedMetrics: [goal.category],
          confidence: 0.9
        });
      }
    }
  });
  
  // Stress correlation insights
  const stressedEntries = entries.filter(e => e.stressLevel && e.stressLevel > 7);
  if (stressedEntries.length > 3) {
    const _commonTriggers = stressedEntries
      .flatMap(e => e.triggers)
      .reduce((acc, trigger) => {
        acc[trigger] = (acc[trigger] || 0) + 1;
        return acc;
      }, {} as Record<string, number>);
    
    const topTrigger = Object.entries(_commonTriggers)
      .sort((a, b) => b[1] - a[1])[0];
    
    if (topTrigger && topTrigger[1] > 2) {
      insights.push({
        id: `insight-stress-trigger-${Date.now()}`,
        type: 'correlation',
        title: 'Stress Pattern Identified',
        description: `"${topTrigger[0]}" appears to be a recurring stress trigger.`,
        priority: 'medium',
        category: 'stress',
        createdAt: now,
        actionable: true,
        actions: [
          { label: 'Learn coping strategies', type: 'navigate', data: '/wellness/stress-management' },
          { label: 'Track triggers', type: 'navigate', data: '/mood/triggers' }
        ],
        relatedMetrics: ['stress', 'mood', 'anxiety'],
        confidence: 0.75
      });
    }
  }
  
  return insights;
};

// Create the store
export const useWellnessStore = create<WellnessState>()(
  persist(
    immer((set, get) => ({
      // Initial state
      moodEntries: [],
      wellnessMetrics: [],
      wellnessGoals: [],
      crisisEvents: [],
      moodPatterns: [],
      wellnessInsights: [],
      insights: [],
      weeklyScore: 0,
      monthlyScore: 0,
      yearlyScore: 0,
      preferences: {
        reminderSettings: {
          moodCheck: { enabled: true, times: ['09:00', '21:00'] },
          medication: { enabled: false, times: [] },
          exercise: { enabled: true, time: '07:00' },
          hydration: { enabled: true, interval: 120 },
          journaling: { enabled: true, time: '20:00' }
        },
        privacySettings: {
          shareAnalytics: false,
          allowNotifications: true,
          dataRetentionDays: 365
        },
        displaySettings: {
          theme: 'auto',
          chartType: 'line',
          metricsView: 'detailed'
        }
      },
      therapeuticContent: [],
      favoriteExercises: [],
      
      // Actions
      addMoodEntry: (_entry) => set((state) => {
        const _newEntry: MoodEntry = {
          ...entry,
          id: `mood-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          timestamp: new Date()
        };
        state.moodEntries.push(_newEntry);
        
        // Trigger pattern analysis after adding entry
        get().analyzeMoodPatterns();
        get().generateInsights();
      }),
      
      updateMoodEntry: (id, updates) => set((state) => {
        const index = state.moodEntries.findIndex((e: MoodEntry) => e.id === id);
        if (index !== -1 && state.moodEntries[index]) {
          Object.assign(state.moodEntries[index], updates);
        }
      }),
      
      deleteMoodEntry: (_id) => set((state) => {
        state.moodEntries = state.moodEntries.filter((e: MoodEntry) => e.id !== id);
      }),
      
      addWellnessMetric: (_metric) => set((state) => {
        const _newMetric: WellnessMetrics = {
          ...metric,
          date: new Date()
        };
        state.wellnessMetrics.push(_newMetric);
      }),
      
      updateWellnessMetric: (date, updates) => set((state) => {
        const index = state.wellnessMetrics.findIndex((m: WellnessMetrics) => 
          new Date(m.date).toDateString() === date.toDateString()
        );
        if (index !== -1 && state.wellnessMetrics[index]) {
          Object.assign(state.wellnessMetrics[index], updates);
        }
      }),
      
      addWellnessGoal: (goal) => set((state) => {
        const _newGoal: WellnessGoal = {
          ...goal,
          id: `goal-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          progress: 0,
          status: 'active'
        };
        state.wellnessGoals.push(_newGoal);
      }),
      
      updateWellnessGoal: (id, updates) => set((state) => {
        const index = state.wellnessGoals.findIndex((g: WellnessGoal) => g.id === id);
        if (index !== -1 && state.wellnessGoals[index]) {
          Object.assign(state.wellnessGoals[index], updates);
        }
      }),
      
      updateGoalProgress: (id, value) => set((state) => {
        const goal = state.wellnessGoals.find((g: WellnessGoal) => g.id === id);
        if (goal) {
          goal.currentValue = value;
          goal.progress = (value / goal.targetValue) * 100;
          
          if (goal.progress >= 100) {
            goal.status = 'completed';
          }
          
          // Check for milestones
          goal.milestones.forEach((milestone: unknown) => {
            if (!milestone.achieved && value >= milestone.value) {
              milestone.achieved = true;
              milestone.date = new Date();
            }
          });
        }
      }),
      
      completeGoal: (_id) => set((state) => {
        const goal = state.wellnessGoals.find((g: WellnessGoal) => g.id === id);
        if (goal) {
          goal.status = 'completed';
          goal.progress = 100;
        }
      }),
      
      recordCrisisEvent: (_event) => set((state) => {
        const _newEvent: CrisisEvent = {
          ...event,
          id: `crisis-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          timestamp: new Date()
        };
        state.crisisEvents.push(_newEvent);
      }),
      
      analyzeMoodPatterns: () => set((state) => {
        const _entries = state.moodEntries.map((e: unknown) => ({
          ...e,
          timestamp: e.timestamp instanceof Date ? e.timestamp : new Date(e.timestamp)
        }));
        state.moodPatterns = detectPatterns(_entries);
      }),
      
      generateInsights: () => set((state) => {
        const _entries = state.moodEntries.map((e: unknown) => ({
          ...e,
          timestamp: e.timestamp instanceof Date ? e.timestamp : new Date(e.timestamp)
        }));
        state.wellnessInsights = generateWellnessInsights(
          _entries,
          state.wellnessMetrics,
          state.wellnessGoals
        );
      }),
      
      calculateWellnessScores: () => set((state) => {
        // Calculate weekly score
        const weeklyMoodAvg = calculateMoodAverage(state.moodEntries, 7);
        const weeklyExercise = state.wellnessMetrics
          .filter((m: WellnessMetrics) => {
            const date = new Date(m.date);
            const weekAgo = new Date();
            weekAgo.setDate(weekAgo.getDate() - 7);
            return date >= weekAgo;
          })
          .reduce((sum: number, m: WellnessMetrics) => sum + (m.exerciseMinutes || 0), 0) / 7;
        
        const weeklyGoalProgress = state.wellnessGoals
          .filter((g: WellnessGoal) => g.status === 'active' && g.frequency === 'weekly')
          .reduce((sum: number, g: WellnessGoal) => sum + g.progress, 0) / 
          (state.wellnessGoals.filter((g: WellnessGoal) => g.status === 'active' && g.frequency === 'weekly').length || 1);
        
        state.weeklyScore = Math.round(
          (weeklyMoodAvg * 10) * 0.4 +
          Math.min(weeklyExercise / 30 * 100, 100) * 0.3 +
          weeklyGoalProgress * 0.3
        );
        
        // Calculate monthly score
        const monthlyMoodAvg = calculateMoodAverage(state.moodEntries, 30);
        state.monthlyScore = Math.round(monthlyMoodAvg * 10);
        
        // Calculate yearly score
        const yearlyMoodAvg = calculateMoodAverage(state.moodEntries, 365);
        state.yearlyScore = Math.round(yearlyMoodAvg * 10);
      }),
      
      updatePreferences: (_updates) => set((state) => {
        state.preferences = {
          ...state.preferences,
          ...updates
        };
      }),
      
      clearAllData: () => set((state) => {
        state.moodEntries = [];
        state.wellnessMetrics = [];
        state.wellnessGoals = [];
        state.crisisEvents = [];
        state.moodPatterns = [];
        state.wellnessInsights = [];
        state.weeklyScore = 0;
        state.monthlyScore = 0;
        state.yearlyScore = 0;
      }),
      
      exportData: () => {
        const state = get();
        return JSON.stringify({
          moodEntries: state.moodEntries,
          wellnessMetrics: state.wellnessMetrics,
          wellnessGoals: state.wellnessGoals,
          crisisEvents: state.crisisEvents,
          preferences: state.preferences,
          exportDate: new Date().toISOString(),
          version: '1.0'
        }, null, 2);
      },
      
      importData: (_data) => set((state) => {
        try {
          const parsed = JSON.parse(_data);
          if (parsed.moodEntries) state.moodEntries = parsed.moodEntries;
          if (parsed.wellnessMetrics) state.wellnessMetrics = parsed.wellnessMetrics;
          if (parsed.wellnessGoals) state.wellnessGoals = parsed.wellnessGoals;
          if (parsed.crisisEvents) state.crisisEvents = parsed.crisisEvents;
          if (parsed.preferences) state.preferences = parsed.preferences;
          
          // Recalculate analytics after import
          get().analyzeMoodPatterns();
          get().generateInsights();
          get().calculateWellnessScores();
        } catch (_error) {
          console.error('Failed to import data:');
        }
      })
    })),
    {
      name: 'wellness-storage',
      storage: createJSONStorage(() => localStorage),
      partialize: (state) => ({
        moodEntries: state.moodEntries,
        wellnessMetrics: state.wellnessMetrics,
        wellnessGoals: state.wellnessGoals,
        crisisEvents: state.crisisEvents,
        preferences: state.preferences,
        therapeuticContent: state.therapeuticContent,
        favoriteExercises: state.favoriteExercises
      })
    }
  )
);