apiVersion: apps/v1
kind: Deployment
metadata:
  name: corev4-backend
  namespace: corev4-mental-health
  labels:
    app: corev4-backend
    tier: backend
    version: v4.0.0
    compliance: hipaa
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: corev4-backend
  template:
    metadata:
      labels:
        app: corev4-backend
        tier: backend
        version: v4.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: backend
        image: corev4/backend:v4.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: corev4-secrets
              key: jwt-secret
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: corev4-secrets
              key: encryption-key
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: corev4-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: corev4-secrets
              key: redis-url
        - name: CRISIS_API_KEY
          valueFrom:
            secretKeyRef:
              name: corev4-secrets
              key: crisis-api-key
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "1Gi"
            cpu: "800m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: app-cache
          mountPath: /app/cache
      volumes:
      - name: tmp-volume
        emptyDir:
          sizeLimit: 1Gi
      - name: app-cache
        emptyDir:
          sizeLimit: 2Gi
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node-role.kubernetes.io/backend"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - corev4-backend
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: corev4-backend-service
  namespace: corev4-mental-health
  labels:
    app: corev4-backend
    tier: backend
spec:
  type: ClusterIP
  selector:
    app: corev4-backend
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  sessionAffinity: None