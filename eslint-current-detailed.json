[{"filePath":"H:\\Astral Core\\CoreV4\\src\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\ErrorBoundary.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":388,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":388,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":392,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":392,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13858,13861],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13858,13861],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":410,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":410,"endColumn":38},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":424,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":424,"endColumn":33},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":431,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":431,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unified Error Boundary Component\n * Combines crisis-aware features, multiple fallback options, and comprehensive error handling\n * Ensures users never lose access to critical crisis intervention resources during errors\n */\n\nimport React, { Component, ErrorInfo, ReactNode } from 'react';\nimport { AlertTriangle, Phone, MessageCircle, Home, RefreshCw } from 'lucide-react';\nimport { logError } from '../utils/logger';\nimport { logger } from '../services/logging/logger';\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error: Error | null;\n  errorInfo: ErrorInfo | null;\n  errorId: string;\n}\n\ninterface ErrorBoundaryProps {\n  children: ReactNode;\n  fallback?: ReactNode;\n  FallbackComponent?: React.ComponentType<unknown>;\n  fallbackRender?: (props: { error: Error; resetErrorBoundary: () => void }) => ReactNode;\n  onError?: (error: Error, errorInfo: ErrorInfo) => void;\n  onReset?: () => void;\n  showCrisisResources?: boolean;\n}\n\nexport class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  private retryCount = 0;\n  private maxRetries = 3;\n\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    \n    this.state = {\n      hasError: false,\n      error: null,\n      errorInfo: null,\n      errorId: this.generateErrorId()\n    };\n  }\n\n  private generateErrorId(): string {\n    return `err_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  static getDerivedStateFromError(error: Error): Partial<ErrorBoundaryState> {\n    return {\n      hasError: true,\n      error,\n      errorId: `err_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n    };\n  }\n\n  override componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    // Update state with error info\n    this.setState({ error, errorInfo });\n    \n    // Log error with multiple logging systems\n    logError('Component error caught by ErrorBoundary', 'ErrorBoundary', { error, errorInfo });\n    \n    // Log to crisis-aware logging system if available\n    if (logger?.logCrisisIntervention) {\n      logger.logCrisisIntervention('component_error', undefined, {\n        error: error.message,\n        component: errorInfo.componentStack,\n        severity: 'high',\n        emergency_resources_available: true,\n        errorId: this.state.errorId\n      });\n    }\n\n    // Log error details for debugging\n    logger.error('🚨 ERROR BOUNDARY CAUGHT:', {\n      error: error.message,\n      stack: error.stack,\n      componentStack: errorInfo.componentStack,\n      errorId: this.state.errorId,\n      timestamp: new Date().toISOString(),\n      userAgent: navigator.userAgent,\n      url: window.location.href\n    });\n\n    // Send error to monitoring service\n    this.reportError(error, errorInfo);\n\n    // Call custom error handler\n    if (this.props.onError) {\n      this.props.onError(error, errorInfo);\n    }\n  }\n\n  private reportError = async (error: Error, errorInfo: ErrorInfo) => {\n    try {\n      // Store error in localStorage for analysis\n      const errorReport = {\n        errorId: this.state.errorId,\n        message: error.message,\n        stack: error.stack,\n        componentStack: errorInfo.componentStack,\n        timestamp: new Date().toISOString(),\n        url: window.location.href,\n        userAgent: navigator.userAgent\n      };\n\n      localStorage.setItem(`error_${this.state.errorId}`, JSON.stringify(errorReport));\n\n      // Send to monitoring service in production\n      if (import.meta.env.PROD) {\n        try {\n          fetch('/api/monitoring/crisis-error', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(errorReport),\n          }).catch(() => {\n            // Fail silently - don&apos;t let monitoring failures affect crisis support\n          });\n        } catch {\n          // Fail silently - don&apos;t let monitoring failures affect crisis support\n          console.error('Monitoring error:', error);\n        }\n      }\n\n      // Send to Sentry if available\n      if ((window as unknown).Sentry) {\n        (window as unknown).Sentry.captureException(error, {\n          tags: {\n            component: 'ErrorBoundary',\n            errorId: this.state.errorId\n          },\n          extra: {\n            componentStack: errorInfo.componentStack\n          }\n        });\n      }\n    } catch {\n      logger.error('Failed to report error', 'ErrorBoundary', error);\n    }\n  };\n\n  private handleReset = () => {\n    if (this.retryCount < this.maxRetries) {\n      this.retryCount++;\n      logger.info(`Retrying... (${this.retryCount}/${this.maxRetries})`, 'ErrorBoundary');\n      \n      this.setState({\n        hasError: false,\n        error: null,\n        errorInfo: null,\n        errorId: this.generateErrorId()\n      });\n      \n      // Call onReset callback if provided\n      if (this.props.onReset) {\n        this.props.onReset();\n      }\n    } else {\n      logger.error('❌ Maximum retry attempts reached');\n    }\n  };\n\n  private handleReload = () => {\n    window.location.reload();\n  };\n\n  private handleEmergencyCall = (number: string) => {\n    if (logger?.logCrisisIntervention) {\n      logger.logCrisisIntervention('emergency_call_from_error_boundary', undefined, {\n        number,\n        error_context: this.state.error?.message\n      });\n    }\n    \n    // Try to initiate call\n    window.open(`tel:${number}`, '_self');\n  };\n\n  private renderCrisisResources = () => (\n    <div className=\"bg-red-50 border-l-4 border-red-500 p-4 mb-6\">\n      <div className=\"flex items-center mb-3\">\n        <AlertTriangle className=\"h-6 w-6 text-red-600 mr-2\" />\n        <h3 className=\"text-lg font-semibold text-red-800\">\n          Emergency Resources Available\n        </h3>\n      </div>\n      \n      <p className=\"text-red-700 mb-4\">\n        Even though there{\"'\"}s a technical issue, your safety is our priority. \n        These resources are always available:\n      </p>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n        <button\n          onClick={() => this.handleEmergencyCall('911')}\n          className=\"flex items-center justify-center px-4 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors\"\n        >\n          <Phone className=\"h-5 w-5 mr-2\" />\n          Emergency: 911\n        </button>\n        \n        <button\n          onClick={() => this.handleEmergencyCall('988')}\n          className=\"flex items-center justify-center px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n        >\n          <Phone className=\"h-5 w-5 mr-2\" />\n          Crisis Hotline: 988\n        </button>\n        \n        <button\n          onClick={() => window.open('sms:741741', '_self')}\n          className=\"flex items-center justify-center px-4 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\n        >\n          <MessageCircle className=\"h-5 w-5 mr-2\" />\n          Crisis Text: 741741\n        </button>\n        \n        <button\n          onClick={() => window.location.href = '/crisis'}\n          className=\"flex items-center justify-center px-4 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors\"\n        >\n          <AlertTriangle className=\"h-5 w-5 mr-2\" />\n          Crisis Resources\n        </button>\n      </div>\n    </div>\n  );\n\n  private renderErrorUI() {\n    const { error, errorInfo, errorId } = this.state;\n    const canRetry = this.retryCount < this.maxRetries;\n\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-red-50 to-orange-50 p-4\">\n        <div className=\"max-w-2xl w-full bg-white rounded-2xl shadow-xl overflow-hidden\">\n          <div className=\"bg-gradient-to-r from-red-600 to-orange-600 px-6 py-4\">\n            <div className=\"flex items-center\">\n              <AlertTriangle className=\"h-8 w-8 text-white mr-3\" />\n              <div>\n                <h1 className=\"text-xl font-bold text-white\">\n                  Technical Issue Detected\n                </h1>\n                <p className=\"text-red-100\">\n                  Your safety resources remain available\n                </p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"p-6\">\n            {(this.props.showCrisisResources !== false) && this.renderCrisisResources()}\n            \n            <div className=\"bg-gray-50 rounded-lg p-4 mb-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                What happened?\n              </h3>\n              <p className=\"text-gray-700 mb-3\">\n                A component on this page encountered an unexpected error. \n                This doesn{\"'\"}t affect the safety and crisis support features of the application.\n              </p>\n              \n              {import.meta.env.DEV && error && (\n                <details className=\"mt-4\">\n                  <summary className=\"cursor-pointer text-sm text-gray-600 hover:text-gray-800 mb-2\">\n                    Technical Details (Development Mode)\n                  </summary>\n                  <div className=\"bg-gray-100 rounded p-3 text-xs font-mono overflow-auto max-h-48\">\n                    <div className=\"text-red-600 font-semibold mb-2\">Error:</div>\n                    <div className=\"mb-3\">{error.message}</div>\n                    {error.stack && (\n                      <>\n                        <div className=\"text-red-600 font-semibold mb-2\">Stack Trace:</div>\n                        <pre className=\"whitespace-pre-wrap\">{error.stack}</pre>\n                      </>\n                    )}\n                    {errorInfo?.componentStack && (\n                      <>\n                        <div className=\"text-red-600 font-semibold mb-2 mt-3\">Component Stack:</div>\n                        <pre className=\"whitespace-pre-wrap\">{errorInfo.componentStack}</pre>\n                      </>\n                    )}\n                  </div>\n                </details>\n              )}\n              \n              <div className=\"text-sm text-gray-500 mt-2\">\n                Error ID: {errorId}\n              </div>\n            </div>\n\n            <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n              {canRetry && (\n                <button\n                  onClick={this.handleReset}\n                  className=\"flex items-center justify-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n                >\n                  <RefreshCw className=\"h-5 w-5 mr-2\" />\n                  Try Again ({this.maxRetries - this.retryCount} left)\n                </button>\n              )}\n              \n              <button\n                onClick={() => window.location.href = '/'}\n                className=\"flex items-center justify-center px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors\"\n              >\n                <Home className=\"h-5 w-5 mr-2\" />\n                Go to Home\n              </button>\n              \n              <button\n                onClick={this.handleReload}\n                className=\"flex items-center justify-center px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\n              >\n                <RefreshCw className=\"h-5 w-5 mr-2\" />\n                Reload Page\n              </button>\n              \n              <button\n                onClick={() => window.location.href = '/crisis'}\n                className=\"flex items-center justify-center px-6 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors\"\n              >\n                <AlertTriangle className=\"h-5 w-5 mr-2\" />\n                Crisis Support\n              </button>\n            </div>\n            \n            <div className=\"mt-6 pt-6 border-t border-gray-200\">\n              <p className=\"text-sm text-gray-600 text-center\">\n                If you{\"'\"}re experiencing a mental health emergency, please contact emergency services immediately. \n                Technical issues never prevent access to crisis support resources.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  override render() {\n    if (this.state.hasError) {\n      // Support react-error-boundary fallbackRender prop\n      if (this.props.fallbackRender && this.state.error) {\n        return this.props.fallbackRender({\n          error: this.state.error,\n          resetErrorBoundary: this.handleReset\n        });\n      }\n\n      // Support react-error-boundary FallbackComponent prop\n      if (this.props.FallbackComponent && this.state.error) {\n        const FallbackComponent = this.props.FallbackComponent;\n        return <FallbackComponent error={this.state.error} resetErrorBoundary={this.handleReset} />;\n      }\n\n      // Support our own fallback prop\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      // Render default error UI with crisis resources\n      return this.renderErrorUI();\n    }\n\n    return this.props.children;\n  }\n}\n\n// Export alias for backward compatibility\nexport class EmergencyErrorBoundary extends ErrorBoundary {}\nexport class CrisisErrorBoundary extends ErrorBoundary {}\n\n/**\n * Higher-Order Component for Crisis Error Boundaries\n * Automatically wraps crisis-related components with error boundaries\n */\nexport interface WithErrorBoundaryOptions {\n  showCrisisResources?: boolean;\n  fallback?: React.ReactNode;\n  FallbackComponent?: React.ComponentType<unknown>;\n  fallbackRender?: (props: { error: Error; resetErrorBoundary: () => void }) => ReactNode;\n  onError?: (error: Error, errorInfo: ErrorInfo) => void;\n  onReset?: () => void;\n}\n\n/**\n * HOC that wraps components with error boundary\n */\nexport function withErrorBoundary<P extends object>(\n  Component: React.ComponentType<P>,\n  options: WithErrorBoundaryOptions = {}\n) {\n  const WrappedComponent = React.forwardRef<any, P & React.RefAttributes<unknown>>((props, ref) => {\n    const { ...componentProps } = props;\n    return (\n      <ErrorBoundary {...options}>\n        <Component {...componentProps as P} ref={ref} />\n      </ErrorBoundary>\n    );\n  });\n\n  // Set display name for debugging\n  WrappedComponent.displayName = `withErrorBoundary(${Component.displayName || Component.name})`;\n\n  return WrappedComponent;\n}\n\n/**\n * Alias for crisis-aware error boundary HOC\n */\nexport const _withCrisisErrorBoundary = withErrorBoundary;\n\n/**\n * Decorator version for class components\n */\nexport function CrisisProtected(options: WithErrorBoundaryOptions = {}) {\n  return function <P extends object>(Component: React.ComponentType<P>) {\n    return withErrorBoundary(Component, options);\n  };\n}\n\n/**\n * Hook version for functional components\n */\nexport function useErrorBoundary() {\n  return React.useCallback((component: React.ComponentType<unknown>, options?: WithErrorBoundaryOptions) => {\n    return withErrorBoundary(component, options);\n  }, []);\n}\n\n// Global error handler for uncaught errors\nexport const _setupGlobalErrorHandling = () => {\n  // Handle uncaught JavaScript errors\n  window.addEventListener('error', (event) => {\n    logger.error('🚨 UNCAUGHT ERROR:', {\n      message: event.message,\n      source: event.filename,\n      line: event.lineno,\n      column: event.colno,\n      error: event.error?.stack,\n      timestamp: new Date().toISOString()\n    });\n\n    // Store error for analysis\n    const errorReport = {\n      type: 'uncaught_error',\n      message: event.message,\n      source: event.filename,\n      line: event.lineno,\n      column: event.colno,\n      stack: event.error?.stack,\n      timestamp: new Date().toISOString()\n    };\n\n    try {\n      localStorage.setItem(`uncaught_error_${Date.now()}`, JSON.stringify(errorReport));\n    } catch (err) {\n      logger.error('Failed to store error report', 'ErrorBoundary', err);\n    }\n  });\n\n  // Handle unhandled promise rejections\n  window.addEventListener('unhandledrejection', (event) => {\n    logger.error('🚨 UNHANDLED PROMISE REJECTION:', {\n      reason: event.reason,\n      promise: event.promise,\n      timestamp: new Date().toISOString()\n    });\n\n    // Store rejection for analysis\n    const rejectionReport = {\n      type: 'unhandled_rejection',\n      reason: event.reason?.toString(),\n      stack: event.reason?.stack,\n      timestamp: new Date().toISOString()\n    };\n\n    try {\n      localStorage.setItem(`rejection_${Date.now()}`, JSON.stringify(rejectionReport));\n    } catch (err) {\n      logger.error('Failed to store rejection report', 'ErrorBoundary', err);\n    }\n  });\n\n  logger.info('Global error handling initialized', 'ErrorBoundary');\n};\n\nexport default ErrorBoundary;","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\accessibility\\AccessibilityControlPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\accessibility\\VoiceNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\ai\\AITherapyHub.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\ai\\TherapistChat.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\ai\\TherapistSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\analytics\\MentalHealthAnalyticsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\community\\CommunityEvents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\community\\CommunityFeed.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\community\\CommunityPosts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\community\\Forums.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\community\\ModerationDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\community\\SupportGroups.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\console\\ConsoleBootSequence.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\console\\ConsoleFocusable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\ConsoleCrisisSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\CrisisButton.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\CrisisButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\CrisisChat.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\CrisisDemonstrationHub.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\CrisisInterventionSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\CrisisResources.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\EmergencyContacts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\EmergencyServicesInterface.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\EnhancedCrisisChat.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\MobileCrisisInterface.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\RealTimeCrisisChat.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'initializeCrisisChat' function makes the dependencies of useEffect Hook (at line 93) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'initializeCrisisChat' in its own useCallback() Hook.","line":115,"column":9,"nodeType":"VariableDeclarator","endLine":142,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Real-Time Crisis Chat System\r\n * \r\n * Secure, encrypted chat for crisis intervention\r\n * Connects to peer supporters and professional counselors\r\n * Privacy-first with end-to-end encryption\r\n */\r\n\r\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport {\r\n  Send, Phone, Shield, Lock,\r\n  AlertCircle, UserCheck,\r\n  MessageSquare, Volume2, VolumeX\r\n} from 'lucide-react';\r\nimport { logger } from '../../utils/logger';\r\n\r\ninterface ChatMessage {\r\n  id: string;\r\n  senderId: string;\r\n  senderName: string;\r\n  senderRole: 'user' | 'peer' | 'professional' | 'moderator' | 'system';\r\n  content: string;\r\n  timestamp: Date;\r\n  type: 'text' | 'voice' | 'image' | 'system' | 'crisis-alert';\r\n  encrypted: boolean;\r\n  readStatus: 'sent' | 'delivered' | 'read';\r\n  supportLevel?: 'info' | 'support' | 'intervention';\r\n  metadata?: Record<string, unknown>;\r\n}\r\n\r\ninterface ChatParticipant {\r\n  id: string;\r\n  name: string;\r\n  role: 'user' | 'peer' | 'professional' | 'moderator';\r\n  status: 'online' | 'away' | 'offline';\r\n  avatar?: string;\r\n  credentials?: string;\r\n  specializations?: string[];\r\n  responseTime: string;\r\n  rating?: number;\r\n  isTyping: boolean;\r\n}\r\n\r\ninterface ChatRoom {\r\n  id: string;\r\n  type: 'crisis' | 'peer-support' | 'group' | 'professional';\r\n  participants: ChatParticipant[];\r\n  messages: ChatMessage[];\r\n  isActive: boolean;\r\n  isEncrypted: boolean;\r\n  moderationLevel: 'light' | 'standard' | 'strict';\r\n  emergencyProtocols: boolean;\r\n  created: Date;\r\n  lastActivity: Date;\r\n}\r\n\r\ninterface CrisisProtocol {\r\n  id: string;\r\n  trigger: string;\r\n  action: 'alert' | 'escalate' | 'emergency' | 'resources';\r\n  automated: boolean;\r\n  priority: 'low' | 'medium' | 'high' | 'critical';\r\n}\r\n\r\nexport function RealTimeCrisisChat() {\r\n  const [___currentRoom, _setCurrentRoom] = useState<ChatRoom | null>(null);\r\n  const [messages, _setMessages] = useState<ChatMessage[]>([]);\r\n  const [newMessage, _setNewMessage] = useState('');\r\n  const [isConnected, _setIsConnected] = useState(false);\r\n  const [availableSupport, _setAvailableSupport] = useState<ChatParticipant[]>([]);\r\n  const [___chatType, _setChatType] = useState<'crisis' | 'peer' | 'professional'>('crisis');\r\n  const [isTyping, _setIsTyping] = useState(false);\r\n  const [soundEnabled, _setSoundEnabled] = useState(true);\r\n  const [___chatSettings, _setChatSettings] = useState({\r\n    notifications: true,\r\n    readReceipts: true,\r\n    autoConnect: true,\r\n    emergencySharing: true\r\n  });\r\n\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const __inputRef   = useRef<HTMLInputElement>(null);\r\n  const __chatContainerRef   = useRef<HTMLDivElement>(null);\r\n\r\n  // Initialize crisis chat connection\r\n  useEffect(() => {\r\n    initializeCrisisChat();\r\n    return () => {\r\n      disconnectFromChat();\r\n    };\r\n     \r\n  }, [initializeCrisisChat]);\r\n\r\n  // Auto-scroll to latest message\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  // Handle typing indicators\r\n  const __handleTyping   = useCallback(() => {\r\n    if (!isTyping) {\r\n      setIsTyping(true);\r\n      // Send typing indicator to other participants\r\n      // sendTypingIndicator(true);\r\n      \r\n      // Clear typing indicator after 3 seconds of inactivity\r\n      setTimeout(() => {\r\n        setIsTyping(false);\r\n        // sendTypingIndicator(false);\r\n      }, 3000);\r\n    }\r\n  }, [isTyping]);\r\n\r\n  const initializeCrisisChat = async () => {\r\n    try {\r\n      // Connect to crisis chat service\r\n      await connectToCrisisService();\r\n      \r\n      // Load available support options\r\n      const supporters = await loadAvailableSupport();\r\n      setAvailableSupport(supporters);\r\n      \r\n      // Set up emergency protocols\r\n      setupEmergencyProtocols();\r\n      \r\n      setIsConnected(true);\r\n      \r\n      // Send system welcome message\r\n      addSystemMessage(\r\n        'Crisis support is now available. You are connected to trained volunteers and professionals.',\r\n        'info'\r\n      );\r\n\r\n    } catch (error) {\r\n      logger.error('Failed to initialize crisis chat', 'RealTimeCrisisChat', error);\r\n      addSystemMessage(\r\n        'Having trouble connecting to chat. Emergency hotlines are still available: 988',\r\n        'crisis-alert'\r\n      );\r\n    }\r\n  };\r\n\r\n  const connectToCrisisService = async () => {\r\n    // In production, this would establish WebSocket connection\r\n    // with end-to-end encryption for crisis support\r\n    return new Promise(resolve => setTimeout(resolve, 1000));\r\n  };\r\n\r\n  const loadAvailableSupport = async (): Promise<ChatParticipant[]> => {\r\n    // Mock data - in production, would load from crisis support API\r\n    return [\r\n      {\r\n        id: 'peer-1',\r\n        name: 'Sarah',\r\n        role: 'peer',\r\n        status: 'online',\r\n        responseTime: '< 2 min',\r\n        rating: 4.9,\r\n        isTyping: false\r\n      },\r\n      {\r\n        id: 'pro-1',\r\n        name: 'Dr. Martinez',\r\n        role: 'professional',\r\n        status: 'online',\r\n        credentials: 'Licensed Clinical Social Worker',\r\n        specializations: ['Crisis Intervention', 'Trauma'],\r\n        responseTime: '< 5 min',\r\n        rating: 4.95,\r\n        isTyping: false\r\n      },\r\n      {\r\n        id: 'peer-2',\r\n        name: 'Alex',\r\n        role: 'peer',\r\n        status: 'online',\r\n        responseTime: '< 3 min',\r\n        rating: 4.8,\r\n        isTyping: false\r\n      }\r\n    ];\r\n  };\r\n\r\n  const setupEmergencyProtocols = () => {\r\n    // Configure automated crisis detection and response\r\n    const protocols: CrisisProtocol[] = [\r\n      {\r\n        id: 'suicide-keywords',\r\n        trigger: 'suicide|kill myself|end it all',\r\n        action: 'emergency',\r\n        automated: true,\r\n        priority: 'critical'\r\n      },\r\n      {\r\n        id: 'immediate-danger',\r\n        trigger: 'going to hurt|about to|right now',\r\n        action: 'escalate',\r\n        automated: true,\r\n        priority: 'critical'\r\n      }\r\n    ];\r\n    \r\n    // Set up keyword monitoring for crisis escalation\r\n    protocols.forEach(_protocol => {\r\n      // In production, this would configure server-side monitoring\r\n    });\r\n  };\r\n\r\n  const sendMessage = async () => {\r\n    if (!newMessage.trim() || !_currentRoom) return;\r\n\r\n    const message: ChatMessage = {\r\n      id: generateMessageId(),\r\n      senderId: 'current-user',\r\n      senderName: 'You',\r\n      senderRole: 'user',\r\n      content: newMessage,\r\n      timestamp: new Date(),\r\n      type: 'text',\r\n      encrypted: true,\r\n      readStatus: 'sent',\r\n      supportLevel: 'support'\r\n    };\r\n\r\n    // Add message to local state immediately\r\n    setMessages(prev => [...prev, message]);\r\n    setNewMessage('');\r\n\r\n    // Check for crisis indicators\r\n    await checkCrisisIndicators(message);\r\n\r\n    // Send to chat service\r\n    await sendToParticipants(message);\r\n\r\n    // Play send sound if enabled\r\n    if (_soundEnabled) {\r\n      playNotificationSound('send');\r\n    }\r\n\r\n    // Request response from available supporters\r\n    if (availableSupport.length > 0) {\r\n      requestSupportResponse(message);\r\n    }\r\n  };\r\n\r\n  const checkCrisisIndicators = async (message: ChatMessage) => {\r\n    const crisisKeywords = [\r\n      'suicide', 'kill myself', 'end it all', 'no hope', 'better off dead',\r\n      'can\\'t go on', 'hurt myself', 'give up', 'no point living'\r\n    ];\r\n\r\n    const content = message.content.toLowerCase();\r\n    const _hasCrisisIndicators = crisisKeywords.some(_keyword => \r\n      content.includes(_keyword)\r\n    );\r\n\r\n    if (_hasCrisisIndicators) {\r\n      // Immediate crisis response\r\n      await triggerCrisisProtocol('critical', message);\r\n      \r\n      // Add crisis resources message\r\n      addSystemMessage(\r\n        '🚨 Crisis support activated. Professional help is connecting now. For immediate help: Call 988 or text HOME to 741741',\r\n        'crisis-alert'\r\n      );\r\n\r\n      // Auto-connect to professional counselor\r\n      await connectToProfessional();\r\n    }\r\n  };\r\n\r\n  const triggerCrisisProtocol = async (priority: string, _message: ChatMessage) => {\r\n    // Log crisis event (_anonymized)\r\n    logger.crisis('Crisis protocol triggered', priority as 'low' | 'medium' | 'high' | 'critical', 'RealTimeCrisisChat', { priority, timestamp: new Date() });\r\n    \r\n    // In production, this would:\r\n    // 1. Alert crisis intervention team\r\n    // 2. Initiate emergency protocols if needed\r\n    // 3. Connect to appropriate level of support\r\n    \r\n    if (priority === 'critical') {\r\n      // Show emergency resources immediately\r\n      showEmergencyResources();\r\n    }\r\n  };\r\n\r\n  const connectToProfessional = async () => {\r\n    const professional = availableSupport.find(p => p.role === 'professional');\r\n    if (_professional) {\r\n      // Simulate professional joining chat\r\n      setTimeout(() => {\r\n        const welcomeMessage: ChatMessage = {\r\n          id: generateMessageId(),\r\n          senderId: professional.id,\r\n          senderName: professional.name,\r\n          senderRole: 'professional',\r\n          content: `Hi, I&apos;m ${professional.name}, a ${professional.credentials}. I&apos;m here to help and support you through this difficult time. You&apos;re not alone.`,\r\n          timestamp: new Date(),\r\n          type: 'text',\r\n          encrypted: true,\r\n          readStatus: 'delivered',\r\n          supportLevel: 'intervention'\r\n        };\r\n        \r\n        setMessages(prev => [...prev, welcomeMessage]);\r\n        \r\n        if (_soundEnabled) {\r\n          playNotificationSound('professional');\r\n        }\r\n      }, 2000);\r\n    }\r\n  };\r\n\r\n  const addSystemMessage = (content: string, level: 'info' | 'crisis-alert' = 'info') => {\r\n    const systemMessage: ChatMessage = {\r\n      id: generateMessageId(),\r\n      senderId: 'system',\r\n      senderName: 'Crisis Support System',\r\n      senderRole: 'system',\r\n      content,\r\n      timestamp: new Date(),\r\n      type: 'system',\r\n      encrypted: false,\r\n      readStatus: 'delivered',\r\n      supportLevel: level === 'crisis-alert' ? 'intervention' : 'info'\r\n    };\r\n\r\n    setMessages(prev => [...prev, systemMessage]);\r\n  };\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  const playNotificationSound = (type: 'send' | 'receive' | 'professional' | 'alert') => {\r\n    if (!soundEnabled) return;\r\n    \r\n    // In production, would play appropriate notification sounds\r\n    logger.info(`Playing ${type} notification sound`, 'RealTimeCrisisChat');\r\n  };\r\n\r\n  const showEmergencyResources = () => {\r\n    const emergencyMessage: ChatMessage = {\r\n      id: generateMessageId(),\r\n      senderId: 'system',\r\n      senderName: 'Emergency Resources',\r\n      senderRole: 'system',\r\n      content: `🆘 IMMEDIATE HELP AVAILABLE:\r\n\r\n📞 National Crisis Line: 988\r\n💬 Crisis Text Line: Text HOME to 741741\r\n🚑 Emergency: 911\r\n\r\nProfessional counselors are joining this chat now. You matter and help is here.`,\r\n      timestamp: new Date(),\r\n      type: 'crisis-alert',\r\n      encrypted: false,\r\n      readStatus: 'delivered',\r\n      supportLevel: 'intervention'\r\n    };\r\n\r\n    setMessages(prev => [...prev, emergencyMessage]);\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      sendMessage();\r\n    }\r\n  };\r\n\r\n  const generateMessageId = () => {\r\n    return `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  };\r\n\r\n  // Placeholder functions for full implementation\r\n  const sendToParticipants = async (_message: ChatMessage) => {\r\n    // Implementation for sending message to chat participants\r\n  };\r\n\r\n  const requestSupportResponse = (_message: ChatMessage) => {\r\n    // Implementation for requesting response from supporters\r\n  };\r\n\r\n  const __sendTypingIndicator = (_typing: boolean) => {\r\n    // Implementation for sending typing indicators\r\n  };\r\n\r\n  const disconnectFromChat = () => {\r\n    // Implementation for clean disconnect\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-screen bg-gradient-to-br from-blue-50 to-purple-50 dark:from-gray-900 dark:to-gray-800\">\r\n      {/* Crisis Chat Header */}\r\n      <div className=\"bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-6 py-4\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"flex items-center space-x-3\">\r\n            <div className=\"relative\">\r\n              <MessageSquare className=\"h-8 w-8 text-red-500\" />\r\n              {isConnected && (\r\n                <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full animate-pulse\"></div>\r\n              )}\r\n            </div>\r\n            <div>\r\n              <h1 className=\"text-xl font-bold text-gray-900 dark:text-white\">\r\n                Crisis Support Chat\r\n              </h1>\r\n              <div className=\"flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400\">\r\n                <Shield className=\"h-4 w-4 text-green-500\" />\r\n                <span>End-to-end encrypted</span>\r\n                <span>•</span>\r\n                <span>{availableSupport.length} supporters online</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center space-x-2\">\r\n            {/* Emergency Call Button */}\r\n            <button\r\n              onClick={() => window.location.href = 'tel:988'}\r\n              className=\"flex items-center space-x-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors\"\r\n            >\r\n              <Phone className=\"h-4 w-4\" />\r\n              <span>Call 988</span>\r\n            </button>\r\n            \r\n            {/* Sound Toggle */}\r\n            <button\r\n              onClick={() => setSoundEnabled(!soundEnabled)}\r\n              className=\"p-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700\"\r\n            >\r\n              {soundEnabled ? <Volume2 className=\"h-5 w-5\" /> : <VolumeX className=\"h-5 w-5\" />}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Chat Messages Area */}\r\n      <div \r\n        ref={chatContainerRef}\r\n        className=\"flex-1 overflow-y-auto px-6 py-4 space-y-4\"\r\n      >\r\n        <AnimatePresence>\r\n          {messages.map((message) => (\r\n            <motion.div\r\n              key={message.id}\r\n              initial={{ opacity: 0, y: 10 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              className={`flex ${\r\n                message.senderRole === 'user' ? 'justify-end' : 'justify-start'\r\n              }`}\r\n            >\r\n              <div className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${\r\n                message.senderRole === 'user' \r\n                  ? 'bg-blue-500 text-white'\r\n                  : message.type === 'crisis-alert'\r\n                  ? 'bg-red-50 border-2 border-red-200 text-red-800'\r\n                  : message.senderRole === 'system'\r\n                  ? 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200'\r\n                  : message.senderRole === 'professional'\r\n                  ? 'bg-green-50 dark:bg-green-900 text-green-800 dark:text-green-200 border-l-4 border-green-500'\r\n                  : 'bg-white dark:bg-gray-800 text-gray-900 dark:text-white border border-gray-200 dark:border-gray-700'\r\n              }`}>\r\n                {message.senderRole !== 'user' && (\r\n                  <div className=\"flex items-center space-x-2 mb-1\">\r\n                    {message.senderRole === 'professional' && (\r\n                      <UserCheck className=\"h-4 w-4 text-green-600\" />\r\n                    )}\r\n                    <span className=\"text-sm font-medium\">\r\n                      {message.senderName}\r\n                    </span>\r\n                    {message.senderRole === 'professional' && (\r\n                      <span className=\"text-xs bg-green-100 text-green-800 px-2 py-0.5 rounded-full\">\r\n                        Licensed Professional\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                )}\r\n                \r\n                <div className=\"whitespace-pre-wrap\">{message.content}</div>\r\n                \r\n                <div className=\"flex items-center justify-between mt-2 text-xs opacity-70\">\r\n                  <span>{message.timestamp.toLocaleTimeString()}</span>\r\n                  {message.encrypted && (\r\n                    <Lock className=\"h-3 w-3\" />\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </motion.div>\r\n          ))}\r\n        </AnimatePresence>\r\n        \r\n        {/* Typing Indicators */}\r\n        {availableSupport.some(p => p.isTyping) && (\r\n          <motion.div\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            className=\"flex justify-start\"\r\n          >\r\n            <div className=\"bg-gray-100 dark:bg-gray-700 rounded-lg px-4 py-2\">\r\n              <div className=\"flex items-center space-x-2 text-gray-600 dark:text-gray-400\">\r\n                <div className=\"flex space-x-1\">\r\n                  <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse\"></div>\r\n                  <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse delay-100\"></div>\r\n                  <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse delay-200\"></div>\r\n                </div>\r\n                <span className=\"text-sm\">Support is typing...</span>\r\n              </div>\r\n            </div>\r\n          </motion.div>\r\n        )}\r\n        \r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      {/* Message Input Area */}\r\n      <div className=\"bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 px-6 py-4\">\r\n        <div className=\"flex items-center space-x-4\">\r\n          <div className=\"flex-1\">\r\n            <input\r\n              ref={inputRef}\r\n              type=\"text\"\r\n              value={newMessage}\r\n              onChange={(e) => {\r\n                setNewMessage(e.target.value);\r\n                handleTyping();\r\n              }}\r\n              onKeyPress={handleKeyPress}\r\n              placeholder=\"Type your message... Press Enter to send\"\r\n              className=\"w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n              disabled={!isConnected}\r\n            />\r\n          </div>\r\n          \r\n          <button\r\n            onClick={sendMessage}\r\n            disabled={!newMessage.trim() || !isConnected}\r\n            className=\"flex items-center space-x-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n          >\r\n            <Send className=\"h-5 w-5\" />\r\n            <span>Send</span>\r\n          </button>\r\n        </div>\r\n        \r\n        <div className=\"mt-2 flex items-center justify-between text-xs text-gray-500 dark:text-gray-400\">\r\n          <div className=\"flex items-center space-x-4\">\r\n            <span>🔒 Messages are encrypted end-to-end</span>\r\n            <span>•</span>\r\n            <span>Crisis support available 24/7</span>\r\n          </div>\r\n          \r\n          {!isConnected && (\r\n            <div className=\"flex items-center space-x-1 text-red-500\">\r\n              <AlertCircle className=\"h-4 w-4\" />\r\n              <span>Reconnecting...</span>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RealTimeCrisisChat;","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\SafetyPlan.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\SafetyPlanGenerator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\UnifiedCrisisButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\DashboardOnboarding.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\DashboardWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\KeyboardShortcutsHelp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\ProfessionalCareDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\console\\ConsoleDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\console\\ConsoleGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\console\\ConsoleQuickLinks.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\console\\ConsoleTile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\console\\ConsoleUserStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\console\\ConsoleWelcomeBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\AIInsightsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\ActivityAnalytics.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has unnecessary dependencies: 'currentDate' and 'selectedPeriod'. Either exclude them or remove the dependency array.","line":81,"column":6,"nodeType":"ArrayExpression","endLine":81,"endColumn":84,"suggestions":[{"desc":"Update the dependencies array to be: [activityHistory, selectedCategory, getDateRange]","fix":{"range":[2291,2369],"text":"[activityHistory, selectedCategory, getDateRange]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has unnecessary dependencies: 'currentDate' and 'selectedPeriod'. Either exclude them or remove the dependency array.","line":178,"column":6,"nodeType":"ArrayExpression","endLine":178,"endColumn":69,"suggestions":[{"desc":"Update the dependencies array to be: [filteredActivities, getDateRange]","fix":{"range":[5543,5606],"text":"[filteredActivities, getDateRange]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'stats'. Either exclude it or remove the dependency array. Outer scope values like 'stats' aren't valid dependencies because mutating them doesn't re-render the component.","line":242,"column":6,"nodeType":"ArrayExpression","endLine":242,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[7506,7513],"text":"[]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useMemo } from 'react';\nimport { motion } from 'framer-motion';\nimport {\n  TrendingUp,\n  TrendingDown,\n  Activity,\n  _Calendar,\n  BarChart3,\n  _PieChart,\n  Clock,\n  Zap,\n  Heart,\n  Brain,\n  Users,\n  X,\n  Sun,\n  Moon,\n  Cloud,\n  Award,\n  AlertCircle,\n  _Filter,\n  Download,\n  ChevronLeft,\n  ChevronRight,\n  _Info\n} from 'lucide-react';\nimport { useActivityStore } from '../../../stores/activityStore';\nimport { format, startOfWeek, _endOfWeek, eachDayOfInterval, subDays, addDays, isToday } from 'date-fns';\n\ninterface ActivityAnalyticsProps {\n  _onExportData?: () => void;\n  _onViewDetails?: (activityId: string) => void;\n}\n\nexport function ActivityAnalytics({\n  _onExportData,\n  _onViewDetails\n}: ActivityAnalyticsProps) {\n  const { activityHistory, _activities, _goals, _habits, correlateActivitiesWithMood, _analyzeActivityEffectiveness, exportProgressReport } = useActivityStore();\n\n  const [selectedPeriod, _setSelectedPeriod] = useState<'week' | 'month' | 'year'>('week');\n  const [selectedCategory, _setSelectedCategory] = useState<string>('all');\n  const [currentDate, _setCurrentDate] = useState(new Date());\n  const [_showInsights, _setShowInsights] = useState(true);\n\n  // Get date range based on selected period\n  const getDateRange = () => {\n    const end = currentDate;\n    let start;\n    \n    switch (_selectedPeriod) {\n      case 'week':\n        start = startOfWeek(currentDate);\n        break;\n      case 'month':\n        start = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n        break;\n      case 'year':\n        start = new Date(currentDate.getFullYear(), 0, 1);\n        break;\n      default:\n        start = subDays(currentDate, 7);\n    }\n    \n    return { start, end };\n  };\n\n  // Filter activities by date range and category\n  const filteredActivities = useMemo(() => {\n    const { start, end } = getDateRange();\n    \n    return activityHistory.filter(activity => {\n      const activityDate = activity.completedAt ? new Date(activity.completedAt) : null;\n      if (!activityDate) return false;\n      \n      const inDateRange = activityDate >= start && activityDate <= end;\n      const inCategory = selectedCategory === 'all' || activity.category === selectedCategory;\n      \n      return inDateRange && inCategory;\n    });\n  }, [activityHistory, selectedPeriod, selectedCategory, currentDate, getDateRange]);\n\n  // Calculate statistics\n  const ____stats   = useMemo(() => {\n    const completed = filteredActivities.filter(a => a.completed).length;\n    const total = filteredActivities.length;\n    const completionRate = total > 0 ? (completed / total) * 100 : 0;\n    \n    const moodImpacts = filteredActivities\n      .filter(a => a.actualMoodImpact !== undefined)\n      .map(a => a.actualMoodImpact!);\n    \n    const avgMoodImpact = moodImpacts.length > 0\n      ? moodImpacts.reduce((sum, impact) => sum + impact, 0) / moodImpacts.length\n      : 0;\n    \n    const totalTime = filteredActivities\n      .filter(a => a.duration)\n      .reduce((sum, a) => sum + (a.duration || 0), 0);\n    \n    // Category breakdown\n    const categoryBreakdown = new Map<string, number>();\n    filteredActivities.forEach(activity => {\n      const count = categoryBreakdown.get(activity.category) || 0;\n      categoryBreakdown.set(activity.category, count + 1);\n    });\n    \n    // Time of day analysis\n    const timeOfDayBreakdown = {\n      morning: 0, // 6-12\n      afternoon: 0, // 12-18\n      evening: 0, // 18-24\n      night: 0 // 0-6\n    };\n    \n    filteredActivities.forEach(activity => {\n      if (activity.scheduledTime) {\n        const hour = new Date(activity.scheduledTime).getHours();\n        if (hour >= 6 && hour < 12) timeOfDayBreakdown.morning++;\n        else if (hour >= 12 && hour < 18) timeOfDayBreakdown.afternoon++;\n        else if (hour >= 18 && hour < 24) timeOfDayBreakdown.evening++;\n        else timeOfDayBreakdown.night++;\n      }\n    });\n    \n    // Energy level analysis\n    const energyBreakdown = {\n      low: filteredActivities.filter(a => a.energyLevel === 'low').length,\n      medium: filteredActivities.filter(a => a.energyLevel === 'medium').length,\n      high: filteredActivities.filter(a => a.energyLevel === 'high').length,\n    };\n    \n    return {\n      completed,\n      total,\n      completionRate,\n      avgMoodImpact,\n      totalTime,\n      categoryBreakdown,\n      timeOfDayBreakdown,\n      energyBreakdown\n    };\n  }, [filteredActivities]);\n\n  // Get mood correlations\n  const moodCorrelations = useMemo(() => {\n    return correlateActivitiesWithMood().slice(0, 5);\n  }, [correlateActivitiesWithMood]);\n\n  // Get daily activity data for chart\n  const dailyData = useMemo(() => {\n    const { start, end } = getDateRange();\n    const days = eachDayOfInterval({ start, end });\n    \n    return days.map(day => {\n      const dayActivities = filteredActivities.filter(activity => {\n        if (!activity.completedAt) return false;\n        const activityDate = new Date(activity.completedAt);\n        return activityDate.toDateString() === day.toDateString();\n      });\n      \n      const completed = dayActivities.filter(a => a.completed).length;\n      const moodImpacts = dayActivities\n        .filter(a => a.actualMoodImpact !== undefined)\n        .map(a => a.actualMoodImpact!);\n      \n      const avgMood = moodImpacts.length > 0\n        ? moodImpacts.reduce((sum, impact) => sum + impact, 0) / moodImpacts.length\n        : 0;\n      \n      return {\n        date: day,\n        completed,\n        avgMood,\n        isToday: isToday(_day)\n      };\n    });\n  }, [filteredActivities, selectedPeriod, currentDate, getDateRange]);\n\n  // Get insights\n  const insights = useMemo(() => {\n    const insights = [];\n    \n    // Completion rate insight\n    if (stats.completionRate >= 80) {\n      insights.push({\n        type: 'success',\n        title: 'Excellent Completion Rate',\n        message: `You're completing ${Math.round(stats.completionRate)}% of your activities!`,\n        icon: Award\n      });\n    } else if (stats.completionRate < 50) {\n      insights.push({\n        type: 'warning',\n        title: 'Low Completion Rate',\n        message: 'Consider reducing _activities or adjusting your schedule',\n        icon: AlertCircle\n      });\n    }\n    \n    // Mood impact insight\n    if (stats.avgMoodImpact > 2) {\n      insights.push({\n        type: 'success',\n        title: 'Positive Mood Impact',\n        message: 'Your _activities are significantly improving your mood',\n        icon: Heart\n      });\n    } else if (stats.avgMoodImpact < -1) {\n      insights.push({\n        type: 'warning',\n        title: 'Negative Mood Trend',\n        message: 'Some _activities may be affecting your mood negatively',\n        icon: TrendingDown\n      });\n    }\n    \n    // Time of day insight\n    const maxTimeOfDay = Object.entries(stats.timeOfDayBreakdown)\n      .reduce((max, [time, count]) => count > max.count ? { time, count } : max, { time: '', count: 0 });\n    \n    if (maxTimeOfDay.count > 0) {\n      insights.push({\n        type: 'info',\n        title: 'Peak Activity Time',\n        message: `You're most active in the ${maxTimeOfDay.time}`,\n        icon: Clock\n      });\n    }\n    \n    // Energy distribution insight\n    if (stats.energyBreakdown.low > stats.energyBreakdown.high * 2) {\n      insights.push({\n        type: 'info',\n        title: 'Low Energy Pattern',\n        message: 'Most _activities are low energy - consider adding energizing _activities',\n        icon: Zap\n      });\n    }\n    \n    return insights;\n  }, [stats]);\n\n  // Navigate dates\n  const navigateDate = (direction: 'prev' | 'next') => {\n    const days = selectedPeriod === 'week' ? 7 : selectedPeriod === 'month' ? 30 : 365;\n    setCurrentDate(prev => direction === 'prev' ? subDays(prev, days) : addDays(prev, days));\n  };\n\n  // Export data\n  const handleExport = () => {\n    const report = exportProgressReport();\n    const _blob = new Blob([report], { type: 'application/json' });\n    const url = URL.createObjectURL(_blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `activity-report-${format(new Date(), 'yyyy-MM-dd')}.json`;\n    a.click();\n    URL.revokeObjectURL(_url);\n  };\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Header */}\n      <div className=\"mb-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-2 bg-primary-100 rounded-lg\">\n              <BarChart3 className=\"h-5 w-5 text-primary-600\" />\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-gray-900\">Activity Analytics</h3>\n              <p className=\"text-sm text-gray-600\">\n                {format(getDateRange().start, 'MMM d')} - {format(getDateRange().end, 'MMM d, yyyy')}\n              </p>\n            </div>\n          </div>\n          \n          <button\n            onClick={handleExport}\n            className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n            aria-label=\"Export data\"\n          >\n            <Download className=\"h-5 w-5 text-gray-600\" />\n          </button>\n        </div>\n\n        {/* Period Selection & Navigation */}\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex space-x-2\">\n            {(['week', 'month', 'year'] as const).map((period) => (\n              <button\n                key={period}\n                onClick={() => setSelectedPeriod(_period)}\n                className={`px-3 py-1 rounded-lg text-sm font-medium transition-colors ${\n                  selectedPeriod === period\n                    ? 'bg-primary-100 text-primary-700'\n                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n                }`}\n              >\n                {period.charAt(0).toUpperCase() + period.slice(1)}\n              </button>\n            ))}\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <button\n              onClick={() => navigateDate('prev')}\n              className=\"p-1 hover:bg-gray-100 rounded transition-colors\"\n            >\n              <ChevronLeft className=\"h-4 w-4 text-gray-600\" />\n            </button>\n            <button\n              onClick={() => setCurrentDate(new Date())}\n              className=\"px-2 py-1 text-xs bg-gray-100 hover:bg-gray-200 rounded transition-colors\"\n            >\n              Today\n            </button>\n            <button\n              onClick={() => navigateDate('next')}\n              className=\"p-1 hover:bg-gray-100 rounded transition-colors\"\n            >\n              <ChevronRight className=\"h-4 w-4 text-gray-600\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-4 gap-2 mb-3\">\n          <div className=\"p-2 bg-blue-50 rounded-lg text-center\">\n            <div className=\"text-lg font-bold text-blue-600\">{stats.completed}</div>\n            <div className=\"text-xs text-blue-700\">Completed</div>\n          </div>\n          <div className=\"p-2 bg-green-50 rounded-lg text-center\">\n            <div className=\"text-lg font-bold text-green-600\">\n              {Math.round(stats.completionRate)}%\n            </div>\n            <div className=\"text-xs text-green-700\">Success Rate</div>\n          </div>\n          <div className=\"p-2 bg-purple-50 rounded-lg text-center\">\n            <div className=\"text-lg font-bold text-purple-600\">\n              {stats.avgMoodImpact > 0 ? '+' : ''}{stats.avgMoodImpact.toFixed(1)}\n            </div>\n            <div className=\"text-xs text-purple-700\">Avg Mood</div>\n          </div>\n          <div className=\"p-2 bg-orange-50 rounded-lg text-center\">\n            <div className=\"text-lg font-bold text-orange-600\">\n              {Math.round(stats.totalTime / 60)}h\n            </div>\n            <div className=\"text-xs text-orange-700\">Total Time</div>\n          </div>\n        </div>\n\n        {/* Category _Filter */}\n        <div className=\"flex space-x-2 overflow-x-auto pb-2\">\n          <button\n            onClick={() => setSelectedCategory('all')}\n            className={`px-3 py-1 rounded-full text-xs font-medium whitespace-nowrap transition-colors ${\n              selectedCategory === 'all'\n                ? 'bg-primary-100 text-primary-700'\n                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n            }`}\n          >\n            All ({stats.total})\n          </button>\n          {Array.from(stats.categoryBreakdown.entries()).map(([category, count]) => (\n            <button\n              key={category}\n              onClick={() => setSelectedCategory(_category)}\n              className={`px-3 py-1 rounded-full text-xs font-medium whitespace-nowrap transition-colors ${\n                selectedCategory === category\n                  ? 'bg-primary-100 text-primary-700'\n                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n              }`}\n            >\n              {category.charAt(0).toUpperCase() + category.slice(1)} ({count})\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Charts Section */}\n      <div className=\"flex-1 overflow-y-auto space-y-4\">\n        {/* Daily Activity Chart */}\n        <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n          <h4 className=\"font-medium text-gray-900 mb-3\">Daily Activity Pattern</h4>\n          <div className=\"space-y-2\">\n            {dailyData.map((day, index) => (\n              <div key={index} className=\"flex items-center space-x-3\">\n                <div className=\"w-16 text-xs text-gray-600\">\n                  {format(day.date, 'EEE, MMM d')}\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"flex-1 bg-gray-100 rounded-full h-6 relative\">\n                      <motion.div\n                        className=\"bg-gradient-to-r from-primary-500 to-primary-600 h-6 rounded-full flex items-center justify-end pr-2\"\n                        initial={{ width: 0 }}\n                        animate={{ width: `${(day.completed / Math.max(...dailyData.map(d => d.completed), 1)) * 100}%` }}\n                        transition={{ duration: 0.5, delay: index * 0.05 }}\n                      >\n                        <span className=\"text-xs text-white font-medium\">{day.completed}</span>\n                      </motion.div>\n                    </div>\n                    {day.avgMood !== 0 && (\n                      <span className={`text-xs font-medium ${\n                        day.avgMood > 0 ? 'text-green-600' : 'text-red-600'\n                      }`}>\n                        {day.avgMood > 0 ? '+' : ''}{day.avgMood.toFixed(1)}\n                      </span>\n                    )}\n                    {day.isToday && (\n                      <span className=\"px-2 py-0.5 bg-primary-100 text-primary-700 text-xs rounded-full\">\n                        Today\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Category Distribution */}\n        <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n          <h4 className=\"font-medium text-gray-900 mb-3\">Category Distribution</h4>\n          <div className=\"space-y-2\">\n            {Array.from(stats.categoryBreakdown.entries()).map(([category, count]) => {\n              const _percentage = (count / stats.total) * 100;\n              const getCategoryIcon = () => {\n                switch (_category) {\n                  case 'therapy': return Brain;\n                  case 'wellness': return Heart;\n                  case 'social': return Users;\n                  case 'professional': return Activity;\n                  default: return Zap;\n                }\n              };\n              const Icon = getCategoryIcon();\n              \n              return (\n                <div key={category} className=\"flex items-center space-x-3\">\n                  <Icon className=\"h-4 w-4 text-gray-500\" />\n                  <div className=\"w-20 text-sm text-gray-600\">\n                    {category.charAt(0).toUpperCase() + category.slice(1)}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"bg-gray-100 rounded-full h-4 relative\">\n                      <motion.div\n                        className={`h-4 rounded-full ${\n                          category === 'therapy' ? 'bg-purple-500' :\n                          category === 'wellness' ? 'bg-green-500' :\n                          category === 'social' ? 'bg-blue-500' :\n                          category === 'professional' ? 'bg-orange-500' :\n                          'bg-gray-500'\n                        }`}\n                        initial={{ width: 0 }}\n                        animate={{ width: `${_percentage}%` }}\n                        transition={{ duration: 0.5 }}\n                      />\n                    </div>\n                  </div>\n                  <span className=\"text-sm text-gray-700 font-medium\">\n                    {count} ({Math.round(_percentage)}%)\n                  </span>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Time of Day Analysis */}\n        <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n          <h4 className=\"font-medium text-gray-900 mb-3\">Activity by Time of Day</h4>\n          <div className=\"grid grid-cols-4 gap-2\">\n            {Object.entries(stats.timeOfDayBreakdown).map(([time, count]) => {\n              const getTimeIcon = () => {\n                switch (_time) {\n                  case 'morning': return Sun;\n                  case 'afternoon': return Sun;\n                  case 'evening': return Cloud;\n                  case 'night': return Moon;\n                  default: return Clock;\n                }\n              };\n              const Icon = getTimeIcon();\n              const _percentage = stats.total > 0 ? (count / stats.total) * 100 : 0;\n              \n              return (\n                <div key={time} className=\"text-center p-2 bg-gray-50 rounded-lg\">\n                  <Icon className=\"h-6 w-6 text-gray-500 mx-auto mb-1\" />\n                  <div className=\"text-xs text-gray-600 mb-1\">\n                    {time.charAt(0).toUpperCase() + time.slice(1)}\n                  </div>\n                  <div className=\"text-lg font-bold text-gray-900\">{count}</div>\n                  <div className=\"text-xs text-gray-500\">{Math.round(_percentage)}%</div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Energy Level Distribution */}\n        <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n          <h4 className=\"font-medium text-gray-900 mb-3\">Energy Level Distribution</h4>\n          <div className=\"space-y-2\">\n            {Object.entries(stats.energyBreakdown).map(([level, count]) => {\n              const _percentage = stats.total > 0 ? (count / stats.total) * 100 : 0;\n              const getColor = () => {\n                switch (_level) {\n                  case 'low': return 'bg-blue-500';\n                  case 'medium': return 'bg-yellow-500';\n                  case 'high': return 'bg-red-500';\n                  default: return 'bg-gray-500';\n                }\n              };\n              \n              return (\n                <div key={level} className=\"flex items-center space-x-3\">\n                  <Zap className={`h-4 w-4 ${\n                    level === 'low' ? 'text-blue-500' :\n                    level === 'medium' ? 'text-yellow-500' :\n                    'text-red-500'\n                  }`} />\n                  <div className=\"w-16 text-sm text-gray-600\">\n                    {level.charAt(0).toUpperCase() + level.slice(1)}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"bg-gray-100 rounded-full h-4 relative\">\n                      <motion.div\n                        className={`h-4 rounded-full ${getColor()}`}\n                        initial={{ width: 0 }}\n                        animate={{ width: `${_percentage}%` }}\n                        transition={{ duration: 0.5 }}\n                      />\n                    </div>\n                  </div>\n                  <span className=\"text-sm text-gray-700 font-medium\">\n                    {count} ({Math.round(_percentage)}%)\n                  </span>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Mood Correlations */}\n        {moodCorrelations.length > 0 && (\n          <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n            <h4 className=\"font-medium text-gray-900 mb-3\">Activities with Strongest Mood Impact</h4>\n            <div className=\"space-y-2\">\n              {moodCorrelations.map((correlation, index) => (\n                <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded-lg\">\n                  <span className=\"text-sm text-gray-700\">{correlation.activity}</span>\n                  <div className=\"flex items-center space-x-2\">\n                    {correlation.correlation > 0 ? (\n                      <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                    ) : (\n                      <TrendingDown className=\"h-4 w-4 text-red-500\" />\n                    )}\n                    <span className={`text-sm font-medium ${\n                      correlation.correlation > 0 ? 'text-green-600' : 'text-red-600'\n                    }`}>\n                      {correlation.correlation > 0 ? '+' : ''}{correlation.correlation.toFixed(1)}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Insights */}\n        {showInsights && insights.length > 0 && (\n          <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <h4 className=\"font-medium text-gray-900\">Insights & Recommendations</h4>\n              <button\n                onClick={() => setShowInsights(false)}\n                className=\"text-gray-400 hover:text-gray-600\"\n              >\n                <X className=\"h-4 w-4\" />\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              {insights.map((insight, index) => {\n                const Icon = insight.icon;\n                return (\n                  <div\n                    key={index}\n                    className={`p-3 rounded-lg flex items-start space-x-3 ${\n                      insight.type === 'success' ? 'bg-green-50' :\n                      insight.type === 'warning' ? 'bg-yellow-50' :\n                      'bg-blue-50'\n                    }`}\n                  >\n                    <Icon className={`h-5 w-5 mt-0.5 ${\n                      insight.type === 'success' ? 'text-green-600' :\n                      insight.type === 'warning' ? 'text-yellow-600' :\n                      'text-blue-600'\n                    }`} />\n                    <div>\n                      <h5 className={`font-medium text-sm ${\n                        insight.type === 'success' ? 'text-green-800' :\n                        insight.type === 'warning' ? 'text-yellow-800' :\n                        'text-blue-800'\n                      }`}>\n                        {insight.title}\n                      </h5>\n                      <p className={`text-xs mt-0.5 ${\n                        insight.type === 'success' ? 'text-green-700' :\n                        insight.type === 'warning' ? 'text-yellow-700' :\n                        'text-blue-700'\n                      }`}>\n                        {insight.message}\n                      </p>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\ActivityTracker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\BehavioralActivation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\CareTeamDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\CommunityFeedWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\CrisisPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\CrisisPanelWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\CrisisPreventionDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\CrisisSupportNetwork.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\DailyActivityPlanner.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'initializeTimeSlots' function makes the dependencies of useEffect Hook (at line 94) change on every render. To fix this, wrap the definition of 'initializeTimeSlots' in its own useCallback() Hook.","line":97,"column":9,"nodeType":"VariableDeclarator","endLine":133,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'initializeTimeSlots' in its own useCallback() Hook.","fix":{"range":[3223,4494],"text":"useCallback(() => {\n    const slots: TimeSlot[] = [];\n    const startHour = 6; // 6 AM\n    const endHour = 22; // 10 PM\n    \n    for (let hour = startHour; hour < endHour; hour++) {\n      for (let minute = 0; minute < 60; minute += 30) {\n        const _time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n        slots.push({ time });\n      }\n    }\n    \n    // Map activities to time slots\n    const dayActivities = activities.filter(activity => \n      activity.scheduledTime && isSameDay(new Date(activity.scheduledTime), selectedDate)\n    );\n    \n    dayActivities.forEach(activity => {\n      if (activity.scheduledTime) {\n        const _time = format(new Date(activity.scheduledTime), 'HH:mm');\n        const slotIndex = slots.findIndex(slot => slot.time === time);\n        if (slotIndex !== -1 && slots[slotIndex]) {\n          slots[slotIndex]!.activity = {\n            id: activity.id,\n            title: activity.title,\n            category: activity.category,\n            duration: activity.duration || 30,\n            energyLevel: activity.energyLevel || 'medium',\n            flexibility: activity.flexibility || 'flexible',\n            moodImpact: activity.moodImpact\n          };\n        }\n      }\n    });\n    \n    setTimeSlots(_slots);\n  })"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Calendar,\n  Clock,\n  Battery,\n  Brain,\n  Heart,\n  _AlertCircle,\n  CheckCircle,\n  _XCircle,\n  _ChevronRight,\n  Plus,\n  Edit2,\n  Trash2,\n  _RefreshCw,\n  Zap,\n  Cloud,\n  Sun,\n  Moon,\n  Coffee,\n  Target,\n  TrendingUp,\n  Sparkles\n} from 'lucide-react';\nimport { format, _addMinutes, isSameDay, _isToday, _isTomorrow } from 'date-fns';\nimport { useActivityStore } from '../../../stores/activityStore';\nimport { useWellnessStore } from '../../../stores/wellnessStore';\n\ninterface TimeSlot {\n  time: string;\n  activity?: {\n    id: string;\n    title: string;\n    category: string;\n    duration: number;\n    energyLevel: 'low' | 'medium' | 'high';\n    flexibility: 'fixed' | 'flexible' | 'optional';\n    moodImpact?: number;\n  };\n}\n\nconst ENERGY_ICONS = {\n  low: Battery,\n  medium: Zap,\n  high: Sparkles\n};\n\nconst ENERGY_COLORS = {\n  low: 'text-blue-500',\n  medium: 'text-yellow-500',\n  high: 'text-red-500'\n};\n\nconst CATEGORY_COLORS = {\n  therapy: 'bg-purple-100 dark:bg-purple-900/20 text-purple-700 dark:text-purple-300',\n  wellness: 'bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-300',\n  social: 'bg-blue-100 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300',\n  professional: 'bg-orange-100 dark:bg-orange-900/20 text-orange-700 dark:text-orange-300',\n  personal: 'bg-pink-100 dark:bg-pink-900/20 text-pink-700 dark:text-pink-300',\n  'self-care': 'bg-indigo-100 dark:bg-indigo-900/20 text-indigo-700 dark:text-indigo-300'\n};\n\nexport const DailyActivityPlanner: React.FC = () => {\n  const { activities, _dailySchedule, addActivity, _updateActivity, deleteActivity, completeActivity, rescheduleActivity, getActivityRecommendations, suggestReschedule, adaptScheduleForBadDay, generateDailySchedule } = useActivityStore();\n  \n  const { moodEntries } = useWellnessStore();\n  \n  const [selectedDate, _setSelectedDate] = useState(new Date());\n  const [currentEnergyLevel, _setCurrentEnergyLevel] = useState<'low' | 'medium' | 'high'>('medium');\n  const [currentMood, _setCurrentMood] = useState(5);\n  const [_showAddActivity, _setShowAddActivity] = useState(false);\n  const [_editingActivity, _setEditingActivity] = useState<string | null>(null);\n  const [showRecommendations, _setShowRecommendations] = useState(false);\n  const [___adaptiveMode, _setAdaptiveMode] = useState(false);\n  const [timeSlots, _setTimeSlots] = useState<TimeSlot[]>([]);\n  \n  // Initialize time slots and load schedule\n  useEffect(() => {\n    generateDailySchedule(_selectedDate);\n    initializeTimeSlots();\n    \n    // Get current mood from recent entries\n    const todayMood = moodEntries.find(entry => \n      isSameDay(new Date(entry.timestamp), new Date())\n    );\n    if (todayMood) {\n      setCurrentMood(todayMood.moodScore);\n      // Determine energy level based on mood\n      if (todayMood.moodScore <= 3) setCurrentEnergyLevel('low');\n      else if (todayMood.moodScore <= 7) setCurrentEnergyLevel('medium');\n      else setCurrentEnergyLevel('high');\n    }\n  }, [selectedDate, moodEntries, generateDailySchedule, initializeTimeSlots]);\n  \n  // Initialize time slots for the day\n  const initializeTimeSlots = () => {\n    const slots: TimeSlot[] = [];\n    const startHour = 6; // 6 AM\n    const endHour = 22; // 10 PM\n    \n    for (let hour = startHour; hour < endHour; hour++) {\n      for (let minute = 0; minute < 60; minute += 30) {\n        const _time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n        slots.push({ time });\n      }\n    }\n    \n    // Map activities to time slots\n    const dayActivities = activities.filter(activity => \n      activity.scheduledTime && isSameDay(new Date(activity.scheduledTime), selectedDate)\n    );\n    \n    dayActivities.forEach(activity => {\n      if (activity.scheduledTime) {\n        const _time = format(new Date(activity.scheduledTime), 'HH:mm');\n        const slotIndex = slots.findIndex(slot => slot.time === time);\n        if (slotIndex !== -1 && slots[slotIndex]) {\n          slots[slotIndex]!.activity = {\n            id: activity.id,\n            title: activity.title,\n            category: activity.category,\n            duration: activity.duration || 30,\n            energyLevel: activity.energyLevel || 'medium',\n            flexibility: activity.flexibility || 'flexible',\n            moodImpact: activity.moodImpact\n          };\n        }\n      }\n    });\n    \n    setTimeSlots(_slots);\n  };\n  \n  // Handle bad mental health day adaptation\n  const handleBadDayAdaptation = () => {\n    setAdaptiveMode(true);\n    adaptScheduleForBadDay();\n    \n    // Show supportive message\n    setTimeout(() => {\n      setAdaptiveMode(false);\n    }, 3000);\n  };\n  \n  // Get activity recommendations\n  const recommendations = getActivityRecommendations(currentEnergyLevel, currentMood);\n  const rescheduleingSuggestions = suggestReschedule(_currentEnergyLevel);\n  \n  // Quick add activity\n  const quickAddActivity = (slot: TimeSlot) => {\n    const timeParts = slot.time.split(':').map(_Number);\n    const hours = timeParts[0] ?? 9;\n    const minutes = timeParts[1] ?? 0;\n    const scheduledTime = new Date(_selectedDate);\n    scheduledTime.setHours(hours, minutes, 0, 0);\n    \n    addActivity({\n      title: 'New Activity',\n      category: 'personal',\n      type: 'task',\n      scheduledTime,\n      duration: 30,\n      energyLevel: currentEnergyLevel,\n      completed: false,\n      flexibility: 'flexible'\n    });\n    \n    initializeTimeSlots();\n  };\n  \n  // Complete activity\n  const handleCompleteActivity = (_activityId: string, moodImpact?: number) => {\n    completeActivity(_activityId, moodImpact);\n    initializeTimeSlots();\n  };\n  \n  // Delete activity\n  const handleDeleteActivity = (_activityId: string) => {\n    deleteActivity(_activityId);\n    initializeTimeSlots();\n  };\n  \n  // Reschedule activity\n  const __handleReschedule = (_activityId: string, newTime: string) => {\n    const timeParts = newTime.split(':').map(_Number);\n    const hours = timeParts[0] ?? 9;\n    const minutes = timeParts[1] ?? 0;\n    const newScheduledTime = new Date(_selectedDate);\n    newScheduledTime.setHours(hours, minutes, 0, 0);\n    \n    rescheduleActivity(_activityId, newScheduledTime);\n    initializeTimeSlots();\n  };\n  \n  // Get time period of day\n  const getTimePeriod = (time: string) => {\n    const hourStr = time.split(':')[0];\n    const hour = hourStr ? parseInt(_hourStr) : 9;\n    if (hour < 6) return { name: 'Early Morning', icon: Moon, color: 'from-indigo-500 to-purple-500' };\n    if (hour < 12) return { name: 'Morning', icon: Sun, color: 'from-yellow-400 to-orange-400' };\n    if (hour < 14) return { name: 'Noon', icon: Sun, color: 'from-orange-400 to-red-400' };\n    if (hour < 18) return { name: 'Afternoon', icon: Coffee, color: 'from-blue-400 to-cyan-400' };\n    if (hour < 21) return { name: 'Evening', icon: Cloud, color: 'from-purple-400 to-pink-400' };\n    return { name: 'Night', icon: Moon, color: 'from-indigo-600 to-purple-600' };\n  };\n  \n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h3 className=\"text-xl font-bold text-gray-900 dark:text-white flex items-center gap-2\">\n            <Calendar className=\"w-5 h-5\" />\n            Daily Activity Planner\n          </h3>\n          <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n            Smart scheduling based on your energy and mood\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          {/* Energy Level Selector */}\n          <div className=\"flex items-center gap-1 bg-gray-100 dark:bg-gray-700 rounded-lg p-1\">\n            {(['low', 'medium', 'high'] as const).map(level => {\n              const Icon = ENERGY_ICONS[level];\n              return (\n                <button\n                  key={level}\n                  onClick={() => setCurrentEnergyLevel(_level)}\n                  className={`p-2 rounded transition-all ${\n                    currentEnergyLevel === level\n                      ? 'bg-white dark:bg-gray-600 shadow-sm'\n                      : 'hover:bg-gray-200 dark:hover:bg-gray-600'\n                  }`}\n                  title={`Energy: ${level}`}\n                >\n                  <Icon className={`w-4 h-4 ${ENERGY_COLORS[level]}`} />\n                </button>\n              );\n            })}\n          </div>\n          \n          {/* Bad Day Button */}\n          <motion.button\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={handleBadDayAdaptation}\n            className=\"p-2 bg-red-100 dark:bg-red-900/20 text-red-600 dark:text-red-400 rounded-lg hover:bg-red-200 dark:hover:bg-red-900/30 transition-colors\"\n            title=\"Adapt for difficult day\"\n          >\n            <Heart className=\"w-4 h-4\" />\n          </motion.button>\n          \n          {/* Recommendations Toggle */}\n          <motion.button\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={() => setShowRecommendations(!showRecommendations)}\n            className=\"p-2 bg-blue-100 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400 rounded-lg hover:bg-blue-200 dark:hover:bg-blue-900/30 transition-colors\"\n          >\n            <Brain className=\"w-4 h-4\" />\n          </motion.button>\n        </div>\n      </div>\n      \n      {/* Adaptive Mode Message */}\n      <AnimatePresence>\n        {adaptiveMode && (\n          <motion.div\n            initial={{ opacity: 0, y: -20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            className=\"mb-4 p-4 bg-gradient-to-r from-purple-100 to-pink-100 dark:from-purple-900/20 dark:to-pink-900/20 rounded-lg\"\n          >\n            <div className=\"flex items-center gap-2\">\n              <Heart className=\"w-5 h-5 text-purple-600 dark:text-purple-400\" />\n              <p className=\"text-purple-700 dark:text-purple-300\">\n                Schedule adapted for a difficult day. Optional activities moved to tomorrow. Take care of yourself!\n              </p>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      {/* Recommendations Panel */}\n      <AnimatePresence>\n        {showRecommendations && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            className=\"mb-6 p-4 bg-blue-50 dark:bg-blue-900/10 rounded-lg border border-blue-200 dark:border-blue-800\"\n          >\n            <h4 className=\"font-semibold text-blue-900 dark:text-blue-300 mb-3 flex items-center gap-2\">\n              <Sparkles className=\"w-4 h-4\" />\n              AI Recommendations for Your Current State\n            </h4>\n            \n            {/* Activity Recommendations */}\n            <div className=\"space-y-2 mb-4\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Based on your {currentEnergyLevel} energy and mood score of {currentMood}:\n              </p>\n              {recommendations.slice(0, 3).map((activity, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center justify-between p-2 bg-white dark:bg-gray-800 rounded\"\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Target className=\"w-4 h-4 text-blue-500\" />\n                    <span className=\"text-sm font-medium\">{activity.title}</span>\n                    <span className={`text-xs px-2 py-1 rounded ${CATEGORY_COLORS[activity.category as keyof typeof CATEGORY_COLORS] || 'bg-gray-100 text-gray-700'}`}>\n                      {activity.category}\n                    </span>\n                  </div>\n                  {activity.moodImpact && (\n                    <div className=\"flex items-center gap-1\">\n                      <TrendingUp className=\"w-3 h-3 text-green-500\" />\n                      <span className=\"text-xs text-green-600 dark:text-green-400\">\n                        +{activity.moodImpact} mood\n                      </span>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n            \n            {/* Rescheduling Suggestions */}\n            {rescheduleingSuggestions.length > 0 && (\n              <div className=\"pt-3 border-t border-blue-200 dark:border-blue-800\">\n                <p className=\"text-sm text-orange-600 dark:text-orange-400 mb-2\">\n                  These activities might be challenging with your current energy:\n                </p>\n                {rescheduleingSuggestions.map(activity => (\n                  <div\n                    key={activity.id}\n                    className=\"flex items-center justify-between p-2 bg-orange-50 dark:bg-orange-900/10 rounded mb-1\"\n                  >\n                    <span className=\"text-sm\">{activity.title}</span>\n                    <button\n                      onClick={() => {\n                        const tomorrow = new Date(_selectedDate);\n                        tomorrow.setDate(tomorrow.getDate() + 1);\n                        rescheduleActivity(activity.id, tomorrow);\n                      }}\n                      className=\"text-xs px-2 py-1 bg-orange-200 dark:bg-orange-800 rounded hover:bg-orange-300 dark:hover:bg-orange-700\"\n                    >\n                      Move to tomorrow\n                    </button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      {/* Schedule Grid */}\n      <div className=\"space-y-2 max-h-[600px] overflow-y-auto custom-scrollbar\">\n        {timeSlots.map((slot, index) => {\n          const period = getTimePeriod(slot.time);\n          const showPeriodHeader = index === 0 || getTimePeriod(timeSlots[index - 1]?.time || '09:00').name !== period.name;\n          \n          return (\n            <React.Fragment key={slot.time}>\n              {showPeriodHeader && (\n                <div className={`flex items-center gap-2 px-3 py-2 rounded-lg bg-gradient-to-r ${period.color} text-white`}>\n                  <period.icon className=\"w-4 h-4\" />\n                  <span className=\"font-semibold text-sm\">{period.name}</span>\n                </div>\n              )}\n              \n              <motion.div\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ delay: index * 0.02 }}\n                className={`flex items-center gap-4 p-3 rounded-lg transition-all ${\n                  slot.activity\n                    ? 'bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-700 dark:to-gray-600'\n                    : 'hover:bg-gray-50 dark:hover:bg-gray-700'\n                }`}\n              >\n                {/* Time */}\n                <div className=\"w-16 text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  {slot.time}\n                </div>\n                \n                {/* Activity or Empty Slot */}\n                {slot.activity ? (\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        {/* Completion Status */}\n                        <button\n                          onClick={() => handleCompleteActivity(slot.activity!.id)}\n                          className=\"text-gray-400 hover:text-green-500 transition-colors\"\n                        >\n                          <CheckCircle className=\"w-5 h-5\" />\n                        </button>\n                        \n                        {/* Activity Details */}\n                        <div>\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"font-medium text-gray-900 dark:text-white\">\n                              {slot.activity.title}\n                            </span>\n                            <span className={`text-xs px-2 py-1 rounded ${CATEGORY_COLORS[slot.activity.category as keyof typeof CATEGORY_COLORS] || 'bg-gray-100 text-gray-700'}`}>\n                              {slot.activity.category}\n                            </span>\n                            {slot.activity.flexibility === 'fixed' && (\n                              <span className=\"text-xs px-2 py-1 bg-red-100 dark:bg-red-900/20 text-red-600 dark:text-red-400 rounded\">\n                                Fixed\n                              </span>\n                            )}\n                          </div>\n                          <div className=\"flex items-center gap-3 mt-1\">\n                            <span className=\"text-xs text-gray-500 flex items-center gap-1\">\n                              <Clock className=\"w-3 h-3\" />\n                              {slot.activity.duration} min\n                            </span>\n                            <span className={`text-xs flex items-center gap-1 ${ENERGY_COLORS[slot.activity.energyLevel]}`}>\n                              {(() => {\n                                const Icon = ENERGY_ICONS[slot.activity.energyLevel];\n                                return Icon ? <Icon className=\"w-3 h-3\" /> : null;\n                              })()}\n                              {slot.activity.energyLevel} energy\n                            </span>\n                            {slot.activity.moodImpact && (\n                              <span className=\"text-xs text-green-600 dark:text-green-400 flex items-center gap-1\">\n                                <TrendingUp className=\"w-3 h-3\" />\n                                +{slot.activity.moodImpact} mood\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      {/* Actions */}\n                      <div className=\"flex items-center gap-1\">\n                        <button\n                          onClick={() => setEditingActivity(slot.activity!.id)}\n                          className=\"p-1 text-gray-400 hover:text-blue-500 transition-colors\"\n                        >\n                          <Edit2 className=\"w-4 h-4\" />\n                        </button>\n                        <button\n                          onClick={() => handleDeleteActivity(slot.activity!.id)}\n                          className=\"p-1 text-gray-400 hover:text-red-500 transition-colors\"\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <button\n                    onClick={() => quickAddActivity(_slot)}\n                    className=\"flex-1 flex items-center justify-center gap-2 py-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg hover:border-gray-400 dark:hover:border-gray-500 transition-all\"\n                  >\n                    <Plus className=\"w-4 h-4\" />\n                    <span className=\"text-sm\">Add activity</span>\n                  </button>\n                )}\n              </motion.div>\n            </React.Fragment>\n          );\n        })}\n      </div>\n      \n      {/* Footer Stats */}\n      <div className=\"mt-6 pt-4 border-t border-gray-200 dark:border-gray-700\">\n        <div className=\"grid grid-cols-3 gap-4\">\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n              {activities.filter(a => a.scheduledTime && isSameDay(new Date(a.scheduledTime), selectedDate)).length}\n            </p>\n            <p className=\"text-xs text-gray-600 dark:text-gray-400\">Activities</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n              {activities.filter(a => a.completed && a.scheduledTime && isSameDay(new Date(a.scheduledTime), selectedDate)).length}\n            </p>\n            <p className=\"text-xs text-gray-600 dark:text-gray-400\">Completed</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\n              {Math.round(\n                activities\n                  .filter(a => a.scheduledTime && isSameDay(new Date(a.scheduledTime), selectedDate))\n                  .reduce((sum, a) => sum + (a.duration || 0), 0) / 60\n              )}h\n            </p>\n            <p className=\"text-xs text-gray-600 dark:text-gray-400\">Scheduled</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\EnhancedCrisisPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\GoalProgressDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\GoalsProgressWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\HabitTracker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\HealthRecordsIntegration.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\InsightsWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\MedicationManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\MedicationTrackerWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\MoodTrendsWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\ProviderCommunication.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\QuickActions.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2067,2070],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2067,2070],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { motion } from 'framer-motion';\nimport { \n  Brain, Heart, Edit3, Phone, Calendar, MessageSquare, \n  Activity, Pill, Book, Users, Sparkles, Music\n} from 'lucide-react';\nimport { QuickAction } from '../../../types/dashboard';\n\ninterface QuickActionsProps {\n  actions?: QuickAction[];\n  onActionClick?: (action: QuickAction) => void;\n}\n\nexport function QuickActions({ actions, onActionClick }: QuickActionsProps) {\n  // Default quick actions if none provided\n  const defaultActions: QuickAction[] = [\n    {\n      id: '1',\n      label: 'Log Mood',\n      icon: 'mood',\n      description: 'Track how you\\'re feeling',\n      action: '/wellness/mood',\n      color: 'bg-purple-500',\n      category: 'tracking',\n      keyboard: 'alt+m',\n    },\n    {\n      id: '2',\n      label: 'Meditate',\n      icon: 'meditation',\n      description: '5-minute guided session',\n      action: '/wellness/meditation',\n      color: 'bg-blue-500',\n      category: 'wellness',\n      keyboard: 'alt+d',\n    },\n    {\n      id: '3',\n      label: 'Journal',\n      icon: 'journal',\n      description: 'Write your thoughts',\n      action: '/wellness/journal',\n      color: 'bg-green-500',\n      category: 'tracking',\n      keyboard: 'alt+j',\n    },\n    {\n      id: '4',\n      label: 'Crisis Help',\n      icon: 'emergency',\n      description: 'Get immediate support',\n      action: '/crisis',\n      color: 'bg-red-500',\n      category: 'crisis',\n      isEmergency: true,\n      keyboard: 'alt+h',\n    },\n    {\n      id: '5',\n      label: 'Breathe',\n      icon: 'breathe',\n      description: 'Breathing exercise',\n      action: '/wellness/breathe',\n      color: 'bg-cyan-500',\n      category: 'wellness',\n    },\n    {\n      id: '6',\n      label: 'Connect',\n      icon: 'community',\n      description: 'Join support group',\n      action: '/community',\n      color: 'bg-indigo-500',\n      category: 'social',\n    },\n  ];\n\n  const quickActions = actions || defaultActions;\n\n  // Get icon component based on icon string\n  const getIconComponent = (iconName: string) => {\n    const icons: Record<string, any> = {\n      mood: Brain,\n      meditation: Heart,\n      journal: Edit3,\n      emergency: Phone,\n      schedule: Calendar,\n      message: MessageSquare,\n      breathe: Activity,\n      medication: Pill,\n      resources: Book,\n      community: Users,\n      insights: Sparkles,\n      music: Music,\n    };\n    return icons[iconName] || Brain;\n  };\n\n  // Group actions by category\n  const groupedActions = quickActions.reduce((acc, action) => {\n    if (!acc[action.category]) {\n      acc[action.category] = [];\n    }\n    acc[action.category]!.push(action);\n    return acc;\n  }, {} as Record<string, QuickAction[]>);\n\n  // Category display names\n  const categoryNames: Record<string, string> = {\n    crisis: 'Emergency',\n    wellness: 'Wellness',\n    tracking: 'Track & Record',\n    social: 'Connect',\n    professional: 'Professional',\n  };\n\n  // Category order (crisis first)\n  const categoryOrder = ['crisis', 'wellness', 'tracking', 'social', 'professional'];\n  const sortedCategories = categoryOrder.filter(cat => groupedActions[cat]);\n\n  return (\n    <div className=\"space-y-4\">\n      {sortedCategories.map((category) => (\n        <div key={category} className=\"space-y-2\">\n          {category !== 'crisis' && (\n            <h4 className=\"text-xs font-semibold text-gray-500 uppercase tracking-wider\">\n              {categoryNames[category]}\n            </h4>\n          )}\n          \n          <div className={`grid ${category === 'crisis' ? 'grid-cols-1' : 'grid-cols-2'} gap-2`}>\n            {groupedActions[category]?.map((action, index) => {\n              const Icon = getIconComponent(action.icon);\n              \n              return (\n                <motion.button\n                  key={action.id}\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: index * 0.05 }}\n                  onClick={() => onActionClick?.(action)}\n                  className={`\n                    relative overflow-hidden group\n                    ${action.isEmergency \n                      ? 'p-4 bg-gradient-to-r from-red-500 to-red-600 text-white shadow-lg hover:shadow-xl' \n                      : 'p-3 bg-white hover:bg-gray-50 border border-gray-200 text-gray-900'\n                    } \n                    rounded-lg transition-all duration-200\n                    ${category === 'crisis' ? 'flex items-center justify-center space-x-3' : 'flex flex-col items-center'}\n                  `}\n                  aria-label={action.label}\n                  title={action.keyboard ? `Keyboard shortcut: ${action.keyboard}` : action.description}\n                >\n                  {/* Background decoration for non-emergency buttons */}\n                  {!action.isEmergency && action.color && (\n                    <div \n                      className={`absolute inset-0 opacity-0 group-hover:opacity-10 transition-opacity ${action.color}`}\n                    />\n                  )}\n                  \n                  {/* Icon */}\n                  <div className={`\n                    ${action.isEmergency \n                      ? '' \n                      : `p-2 rounded-lg ${action.color} bg-opacity-10 group-hover:bg-opacity-20`\n                    }\n                    transition-all\n                  `}>\n                    <Icon className={`\n                      ${action.isEmergency \n                        ? 'h-6 w-6' \n                        : `h-5 w-5 ${action.color?.replace('bg-', 'text-')}`\n                      }\n                    `} />\n                  </div>\n                  \n                  {/* Label and description */}\n                  <div className={category === 'crisis' ? 'text-left' : 'text-center mt-2'}>\n                    <p className={`\n                      font-medium \n                      ${action.isEmergency ? 'text-base' : 'text-sm'}\n                    `}>\n                      {action.label}\n                    </p>\n                    {action.description && (\n                      <p className={`\n                        text-xs mt-0.5\n                        ${action.isEmergency ? 'text-red-100' : 'text-gray-500'}\n                      `}>\n                        {action.description}\n                      </p>\n                    )}\n                  </div>\n                  \n                  {/* Keyboard shortcut indicator */}\n                  {action.keyboard && !action.isEmergency && (\n                    <div className=\"absolute top-1 right-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                      <span className=\"text-xs bg-gray-100 text-gray-500 px-1.5 py-0.5 rounded\">\n                        {action.keyboard}\n                      </span>\n                    </div>\n                  )}\n                  \n                  {/* Emergency pulse animation */}\n                  {action.isEmergency && (\n                    <div className=\"absolute inset-0 -z-10\">\n                      <div className=\"absolute inset-0 bg-red-400 opacity-20 animate-ping\" />\n                    </div>\n                  )}\n                </motion.button>\n              );\n            })}\n          </div>\n        </div>\n      ))}\n      \n      {/* Keyboard shortcuts help */}\n      <div className=\"mt-4 p-2 bg-gray-50 rounded-lg\">\n        <p className=\"text-xs text-gray-500 text-center\">\n          Tip: Use keyboard shortcuts for quick access (Alt + key)\n        </p>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\QuickActionsWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\TherapyProgressWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\TherapySessionWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\TodaySchedule.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":255,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8387,8390],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8387,8390],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Clock, Video, MapPin, Pill, Calendar, CheckCircle, XCircle, AlertCircle } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { ScheduleItem } from '../../../types/dashboard';\n\ninterface TodayScheduleProps {\n  scheduleItems?: ScheduleItem[];\n  onItemClick?: (item: ScheduleItem) => void;\n  onReschedule?: (item: ScheduleItem) => void;\n  onMarkComplete?: (item: ScheduleItem) => void;\n}\n\nexport function TodaySchedule({ \n  scheduleItems = [], \n  onItemClick, \n  onReschedule,\n  onMarkComplete \n}: TodayScheduleProps) {\n  \n  // Group items by time period\n  const groupItemsByPeriod = () => {\n    const now = new Date();\n    const groups: Record<string, ScheduleItem[]> = {\n      overdue: [],\n      current: [],\n      upcoming: [],\n      later: [],\n    };\n\n    scheduleItems.forEach(item => {\n      const itemTime = new Date(item.time);\n      const diffMinutes = (itemTime.getTime() - now.getTime()) / (1000 * 60);\n      \n      if (item._status === 'completed') {\n        // Skip completed items or show them separately\n      } else if (item.status === 'missed' || diffMinutes < -30) {\n        groups.overdue!.push(item);\n      } else if (diffMinutes >= -30 && diffMinutes <= 30) {\n        groups.current!.push(item);\n      } else if (diffMinutes > 30 && diffMinutes <= 180) {\n        groups.upcoming!.push(item);\n      } else {\n        groups.later!.push(item);\n      }\n    });\n\n    return groups;\n  };\n\n  const groups = groupItemsByPeriod();\n\n  // Get icon for schedule item type\n  const getItemIcon = (_type: ScheduleItem['type']) => {\n    switch (_type) {\n      case 'therapy':\n        return Video;\n      case 'medication':\n        return Pill;\n      case 'appointment':\n        return Calendar;\n      default:\n        return Clock;\n    }\n  };\n\n  // Get status color\n  const getStatusColor = (_status: ScheduleItem['status'], priority: ScheduleItem['priority']) => {\n    if (_status === 'missed') return 'border-red-500 bg-red-50';\n    if (_status === 'ongoing') return 'border-green-500 bg-green-50 animate-pulse';\n    if (_status === 'completed') return 'border-gray-300 bg-gray-50';\n    if (priority === 'high') return 'border-orange-500 bg-orange-50';\n    return 'border-gray-300 bg-white';\n  };\n\n  // Get status icon\n  const StatusIcon = ({ _status }: { _status: ScheduleItem['_status'] }) => {\n    switch (_status) {\n      case 'completed':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'missed':\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      case 'cancelled':\n        return <XCircle className=\"h-4 w-4 text-gray-400\" />;\n      case 'ongoing':\n        return <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />;\n      default:\n        return null;\n    }\n  };\n\n  // Format time display\n  const formatTime = (_date: Date) => {\n    return new Date(_date).toLocaleTimeString('en-US', { \n      hour: 'numeric', \n      minute: '2-digit',\n      hour12: true \n    });\n  };\n\n  // Calculate time until\n  const getTimeUntil = (_date: Date) => {\n    const now = new Date();\n    const itemTime = new Date(_date);\n    const diffMinutes = Math.floor((itemTime.getTime() - now.getTime()) / (1000 * 60));\n    \n    if (diffMinutes < 0) return 'Overdue';\n    if (diffMinutes === 0) return 'Now';\n    if (diffMinutes < 60) return `In ${diffMinutes} min`;\n    if (diffMinutes < 120) return 'In 1 hour';\n    return `In ${Math.floor(diffMinutes / 60)} hours`;\n  };\n\n  // Empty state\n  if (scheduleItems.length === 0) {\n    return (\n      <div className=\"text-center py-8\">\n        <Calendar className=\"h-12 w-12 text-gray-300 mx-auto mb-3\" />\n        <p className=\"text-gray-500\">No scheduled items for today</p>\n        <p className=\"text-sm text-gray-400 mt-1\">Your schedule will appear here</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Overdue Items */}\n      {groups.overdue!.length > 0 && (\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center space-x-2\">\n            <AlertCircle className=\"h-4 w-4 text-red-500\" />\n            <h4 className=\"text-sm font-semibold text-red-700\">Overdue</h4>\n          </div>\n          <div className=\"space-y-2\">\n            {groups.overdue!.map((item) => (\n              <ScheduleItemCard\n                key={item.id}\n                item={item}\n                onClick={onItemClick}\n                onReschedule={onReschedule}\n                onMarkComplete={onMarkComplete}\n                getItemIcon={getItemIcon}\n                formatTime={formatTime}\n                getStatusColor={getStatusColor}\n                StatusIcon={StatusIcon}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Current/Ongoing Items */}\n      {groups.current!.length > 0 && (\n        <div className=\"space-y-2\">\n          <h4 className=\"text-sm font-semibold text-green-700\">Happening Now</h4>\n          <div className=\"space-y-2\">\n            {groups.current!.map((item) => (\n              <ScheduleItemCard\n                key={item.id}\n                item={item}\n                onClick={onItemClick}\n                onReschedule={onReschedule}\n                onMarkComplete={onMarkComplete}\n                getItemIcon={getItemIcon}\n                formatTime={formatTime}\n                getStatusColor={getStatusColor}\n                StatusIcon={StatusIcon}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Upcoming Items */}\n      {groups.upcoming!.length > 0 && (\n        <div className=\"space-y-2\">\n          <h4 className=\"text-sm font-semibold text-gray-700\">Coming Up</h4>\n          <div className=\"space-y-2\">\n            {groups.upcoming!.map((item) => (\n              <ScheduleItemCard\n                key={item.id}\n                item={item}\n                onClick={onItemClick}\n                onReschedule={onReschedule}\n                onMarkComplete={onMarkComplete}\n                getItemIcon={getItemIcon}\n                formatTime={formatTime}\n                getStatusColor={getStatusColor}\n                StatusIcon={StatusIcon}\n                showTimeUntil\n                getTimeUntil={getTimeUntil}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Later Today */}\n      {groups.later!.length > 0 && (\n        <div className=\"space-y-2\">\n          <h4 className=\"text-sm font-semibold text-gray-500\">Later Today</h4>\n          <div className=\"space-y-2\">\n            {groups.later!.slice(0, 3).map((item) => (\n              <ScheduleItemCard\n                key={item.id}\n                item={item}\n                onClick={onItemClick}\n                onReschedule={onReschedule}\n                onMarkComplete={onMarkComplete}\n                getItemIcon={getItemIcon}\n                formatTime={formatTime}\n                getStatusColor={getStatusColor}\n                StatusIcon={StatusIcon}\n                compact\n              />\n            ))}\n          </div>\n          {groups.later!.length > 3 && (\n            <button className=\"text-sm text-primary-600 hover:text-primary-700\">\n              View {groups.later!.length - 3} more items\n            </button>\n          )}\n        </div>\n      )}\n\n      {/* Quick Stats */}\n      <div className=\"mt-4 pt-4 border-t border-gray-200\">\n        <div className=\"grid grid-cols-3 gap-2 text-center\">\n          <div>\n            <p className=\"text-2xl font-bold text-gray-900\">{scheduleItems.length}</p>\n            <p className=\"text-xs text-gray-500\">Total</p>\n          </div>\n          <div>\n            <p className=\"text-2xl font-bold text-green-600\">\n              {scheduleItems.filter(i => i._status === 'completed').length}\n            </p>\n            <p className=\"text-xs text-gray-500\">Completed</p>\n          </div>\n          <div>\n            <p className=\"text-2xl font-bold text-orange-600\">\n              {scheduleItems.filter(i => i._status === 'upcoming').length}\n            </p>\n            <p className=\"text-xs text-gray-500\">Remaining</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Individual Schedule Item Card Component\ninterface ScheduleItemCardProps {\n  item: ScheduleItem;\n  onClick?: (item: ScheduleItem) => void;\n  onReschedule?: (item: ScheduleItem) => void;\n  onMarkComplete?: (item: ScheduleItem) => void;\n  getItemIcon: (_type: ScheduleItem['_type']) => any;\n  formatTime: (_date: Date) => string;\n  getStatusColor: (_status: ScheduleItem['_status'], priority: ScheduleItem['priority']) => string;\n  StatusIcon: ({ _status }: { _status: ScheduleItem['_status'] }) => JSX.Element | null;\n  compact?: boolean;\n  showTimeUntil?: boolean;\n  getTimeUntil?: (_date: Date) => string;\n}\n\nfunction ScheduleItemCard({\n  item,\n  onClick,\n  onReschedule,\n  onMarkComplete,\n  getItemIcon,\n  formatTime,\n  getStatusColor,\n  StatusIcon,\n  compact = false,\n  showTimeUntil = false,\n  getTimeUntil,\n}: ScheduleItemCardProps) {\n  const Icon = getItemIcon(item._type);\n\n  return (\n    <motion.div\n      whileHover={{ scale: 1.02 }}\n      whileTap={{ scale: 0.98 }}\n      className={`\n        p-3 rounded-lg border-l-4 cursor-pointer transition-all\n        ${getStatusColor(item._status, item.priority)}\n        ${compact ? 'py-2' : ''}\n      `}\n      onClick={() => onClick?.(item)}\n    >\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex items-start space-x-3 flex-1\">\n          <Icon className={`h-5 w-5 mt-0.5 ${compact ? 'h-4 w-4' : ''} text-gray-600`} />\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center space-x-2\">\n              <p className={`font-medium text-gray-900 ${compact ? 'text-sm' : ''}`}>\n                {item.title}\n              </p>\n              <StatusIcon status={item._status} />\n            </div>\n            {!compact && (\n              <>\n                <p className=\"text-sm text-gray-600 mt-0.5\">\n                  {formatTime(item.time)}\n                  {item.duration && ` • ${item.duration} min`}\n                  {showTimeUntil && getTimeUntil && (\n                    <span className=\"text-primary-600 font-medium ml-2\">\n                      {getTimeUntil(item.time)}\n                    </span>\n                  )}\n                </p>\n                {item.location && (\n                  <p className=\"text-xs text-gray-500 mt-1 flex items-center\">\n                    {item.isVirtual ? (\n                      <Video className=\"h-3 w-3 mr-1\" />\n                    ) : (\n                      <MapPin className=\"h-3 w-3 mr-1\" />\n                    )}\n                    {item.location}\n                  </p>\n                )}\n                {item.provider && (\n                  <p className=\"text-xs text-gray-500\">\n                    With {item.provider}\n                  </p>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n        \n        {!compact && item._status === 'upcoming' && (\n          <div className=\"flex flex-col space-y-1 ml-2\">\n            {onMarkComplete && (\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onMarkComplete(item);\n                }}\n                className=\"text-xs px-2 py-1 bg-green-100 text-green-700 rounded hover:bg-green-200\"\n              >\n                Complete\n              </button>\n            )}\n            {onReschedule && (\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onReschedule(item);\n                }}\n                className=\"text-xs px-2 py-1 bg-gray-100 text-gray-700 rounded hover:bg-gray-200\"\n              >\n                Reschedule\n              </button>\n            )}\n          </div>\n        )}\n      </div>\n    </motion.div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\TodaysScheduleWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\TreatmentPlanProgress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\WellnessStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\WellnessStatusWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\quickActions\\AccessibilityCommandCenter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\quickActions\\ActionRecommendationEngine.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\quickActions\\CrisisQuickActionsHub.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\quickActions\\GestureHandler.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\quickActions\\KeyboardNavigator.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'navigateUp'. Either include it or remove the dependency array.","line":149,"column":6,"nodeType":"ArrayExpression","endLine":149,"endColumn":153,"suggestions":[{"desc":"Update the dependencies array to be: [isActive, keyboardShortcuts, onKeyPress, actions, onActionSelect, navigateDown, navigateUp, navigateLeft, navigateRight, focusedIndex, handleTypeAheadSearch]","fix":{"range":[3944,4091],"text":"[isActive, keyboardShortcuts, onKeyPress, actions, onActionSelect, navigateDown, navigateUp, navigateLeft, navigateRight, focusedIndex, handleTypeAheadSearch]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { QuickAction } from '../../../../types/dashboard';\n\ninterface KeyboardNavigatorProps {\n  actions: QuickAction[];\n  onActionSelect: (action: QuickAction) => void;\n  onKeyPress?: (key: string) => void;\n  isActive: boolean;\n}\n\nexport function KeyboardNavigator({\n  actions,\n  onActionSelect,\n  onKeyPress,\n  isActive\n}: KeyboardNavigatorProps) {\n  const [focusedIndex, _setFocusedIndex] = useState(-1);\n  const [searchBuffer, _setSearchBuffer] = useState('');\n  const searchTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // Keyboard shortcuts map\n  const keyboardShortcuts: Record<string, string> = {\n    'alt+m': 'mood',\n    'alt+j': 'journal',\n    'alt+b': 'breathe',\n    'alt+h': 'help',\n    'alt+c': 'crisis',\n    'alt+t': 'therapy',\n    'alt+s': 'schedule',\n    'alt+g': 'grounding',\n    'alt+p': 'pill',\n    'alt+d': 'meditation',\n    'alt+v': 'voice',\n    'alt+k': 'keyboard',\n    'alt+?': 'shortcuts',\n    'alt+/': 'search',\n    'ctrl+space': 'quick_access',\n    'escape': 'close'\n  };\n\n  // Handle keyboard navigation\n  const handleKeyDown = useCallback((event: KeyboardEvent) => {\n    if (!isActive) return;\n\n    const key = event.key.toLowerCase();\n    const isAlt = event.altKey;\n    const isCtrl = event.ctrlKey;\n    const _isShift = event.shiftKey;\n    const isMeta = event.metaKey;\n\n    // Construct key combination string\n    let keyCombo = '';\n    if (_isCtrl) keyCombo += 'ctrl+';\n    if (_isAlt) keyCombo += 'alt+';\n    if (_isShift) keyCombo += 'shift+';\n    if (_isMeta) keyCombo += 'meta+';\n    keyCombo += key;\n\n    // Check for direct keyboard shortcuts\n    if (keyboardShortcuts[keyCombo]) {\n      event.preventDefault();\n      onKeyPress?.(keyCombo);\n      \n      // Find and execute matching action\n      const _matchingAction = actions.find(a => \n        a.keyboard?.toLowerCase() === keyCombo ||\n        a.icon === keyboardShortcuts[keyCombo]\n      );\n      \n      if (_matchingAction) {\n        onActionSelect(_matchingAction);\n      }\n      return;\n    }\n\n    // Navigation keys\n    switch (_key) {\n      case 'arrowdown':\n        event.preventDefault();\n        navigateDown();\n        break;\n        \n      case 'arrowup':\n        event.preventDefault();\n        navigateUp();\n        break;\n        \n      case 'arrowleft':\n        event.preventDefault();\n        navigateLeft();\n        break;\n        \n      case 'arrowright':\n        event.preventDefault();\n        navigateRight();\n        break;\n        \n      case 'enter':\n      case ' ':\n        event.preventDefault();\n        if (focusedIndex >= 0 && focusedIndex < actions.length && actions[focusedIndex]) {\n          onActionSelect(actions[focusedIndex]);\n        }\n        break;\n        \n      case 'home':\n        event.preventDefault();\n        setFocusedIndex(0);\n        break;\n        \n      case 'end':\n        event.preventDefault();\n        setFocusedIndex(actions.length - 1);\n        break;\n        \n      case 'pageup':\n        event.preventDefault();\n        setFocusedIndex(Math.max(0, focusedIndex - 5));\n        break;\n        \n      case 'pagedown':\n        event.preventDefault();\n        setFocusedIndex(Math.min(actions.length - 1, focusedIndex + 5));\n        break;\n        \n      case 'escape':\n        event.preventDefault();\n        setFocusedIndex(-1);\n        setSearchBuffer('');\n        break;\n        \n      case 'tab':\n        // Allow default tab behavior but track focus\n        if (!event.shiftKey) {\n          setFocusedIndex(prev => (prev + 1) % actions.length);\n        } else {\n          setFocusedIndex(prev => prev <= 0 ? actions.length - 1 : prev - 1);\n        }\n        break;\n        \n      default:\n        // Type-ahead search\n        if (key.length === 1 && !isCtrl && !isAlt && !isMeta) {\n          handleTypeAheadSearch(_key);\n        }\n        break;\n    }\n  }, [isActive, actions, focusedIndex, onActionSelect, onKeyPress, handleTypeAheadSearch, keyboardShortcuts, navigateDown, navigateLeft, navigateRight,]);\n\n  // Grid navigation helpers\n  const navigateDown = () => {\n    const columns = getGridColumns();\n    setFocusedIndex(prev => {\n      const newIndex = prev + columns;\n      return newIndex < actions.length ? newIndex : prev;\n    });\n  };\n\n  const navigateUp = () => {\n    const columns = getGridColumns();\n    setFocusedIndex(prev => {\n      const newIndex = prev - columns;\n      return newIndex >= 0 ? newIndex : prev;\n    });\n  };\n\n  const navigateLeft = () => {\n    setFocusedIndex(prev => {\n      if (prev <= 0) return actions.length - 1;\n      return prev - 1;\n    });\n  };\n\n  const navigateRight = () => {\n    setFocusedIndex(prev => {\n      if (prev >= actions.length - 1) return 0;\n      return prev + 1;\n    });\n  };\n\n  // Get number of grid columns based on container width\n  const getGridColumns = (): number => {\n    if (!containerRef.current) return 2;\n    const width = containerRef.current.offsetWidth;\n    if (width < 640) return 2; // Mobile\n    if (width < 1024) return 3; // Tablet\n    return 4; // Desktop\n  };\n\n  // Type-ahead search functionality\n  const handleTypeAheadSearch = (char: string) => {\n    const newBuffer = searchBuffer + char;\n    setSearchBuffer(_newBuffer);\n\n    // Clear previous timeout\n    if (searchTimeoutRef.current) {\n      clearTimeout(searchTimeoutRef.current);\n    }\n\n    // Find matching action\n    const matchIndex = actions.findIndex(action =>\n      action.label.toLowerCase().startsWith(newBuffer.toLowerCase())\n    );\n\n    if (matchIndex !== -1) {\n      setFocusedIndex(_matchIndex);\n    }\n\n    // Reset search buffer after delay\n    searchTimeoutRef.current = setTimeout(() => {\n      setSearchBuffer('');\n    }, 1500);\n  };\n\n  // Attach keyboard event listeners\n  useEffect(() => {\n    if (_isActive) {\n      window.addEventListener('keydown', handleKeyDown);\n      \n      return () => {\n        window.removeEventListener('keydown', handleKeyDown);\n        if (searchTimeoutRef.current) {\n          clearTimeout(searchTimeoutRef.current);\n        }\n      };\n    }\n  }, [isActive, handleKeyDown]);\n\n  // Update focused element in DOM\n  useEffect(() => {\n    if (focusedIndex >= 0 && containerRef.current) {\n      const buttons = containerRef.current.querySelectorAll('button[data-action-index]');\n      const targetButton = buttons[focusedIndex] as HTMLElement;\n      \n      if (targetButton) {\n        targetButton.focus();\n        targetButton.scrollIntoView({ \n          behavior: 'smooth', \n          block: 'nearest',\n          inline: 'nearest'\n        });\n      }\n    }\n  }, [focusedIndex]);\n\n  // Announce focus changes for screen readers\n  useEffect(() => {\n    if (focusedIndex >= 0 && focusedIndex < actions.length) {\n      const action = actions[focusedIndex];\n      if (!action) return;\n      \n      const announcement = `${action.label}. ${action.description || ''}. ${\n        action.keyboard ? `Keyboard shortcut: ${action.keyboard}` : ''\n      }`;\n      \n      // Create and announce via aria-live region\n      const liveRegion = document.getElementById('keyboard-nav-announcer');\n      if (liveRegion) {\n        liveRegion.textContent = announcement;\n      }\n    }\n  }, [focusedIndex, actions]);\n\n  return (\n    <>\n      {/* Hidden container for tracking focus */}\n      <div ref={containerRef} className=\"sr-only\" aria-hidden=\"true\" />\n      \n      {/* Live region for screen reader announcements */}\n      <div\n        id=\"keyboard-nav-announcer\"\n        className=\"sr-only\"\n        aria-live=\"polite\"\n        aria-atomic=\"true\"\n      />\n      \n      {/* Visual indicator for search buffer */}\n      {searchBuffer && (\n        <div className=\"fixed bottom-4 left-4 z-50 px-3 py-2 bg-gray-900 text-white rounded-lg shadow-lg\">\n          <span className=\"text-sm\">Searching: {searchBuffer}</span>\n        </div>\n      )}\n      \n      {/* Keyboard shortcuts help overlay */}\n      {isActive && focusedIndex === -1 && (\n        <div className=\"fixed inset-0 pointer-events-none z-40\">\n          <div className=\"absolute bottom-20 right-4 bg-white rounded-lg shadow-xl p-4 pointer-events-auto max-w-sm\">\n            <h4 className=\"font-semibold text-sm mb-2\">Keyboard Navigation</h4>\n            <div className=\"space-y-1 text-xs text-gray-600\">\n              <div className=\"flex justify-between\">\n                <span>Arrow keys</span>\n                <span className=\"text-gray-900\">Navigate actions</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Enter/Space</span>\n                <span className=\"text-gray-900\">Select action</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Tab/Shift+Tab</span>\n                <span className=\"text-gray-900\">Move focus</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Type letters</span>\n                <span className=\"text-gray-900\">Quick search</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Alt + key</span>\n                <span className=\"text-gray-900\">Direct shortcuts</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Escape</span>\n                <span className=\"text-gray-900\">Clear focus</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\quickActions\\SmartQuickActionsWidget.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'crisisMode'. Either exclude it or remove the dependency array.","line":84,"column":6,"nodeType":"ArrayExpression","endLine":84,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[3528,3540],"text":"[]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5673,5676],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5673,5676],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Brain, Heart, Phone, Calendar, MessageSquare, Activity,\n  Pill, Book, Users, Sparkles, Music, Shield, AlertCircle,\n  Mic, Keyboard, Eye, Settings, _ChevronRight, Search,\n  Zap, Clock, MapPin, Volume2, Edit3, Home, HelpCircle,\n  Smartphone, Headphones, Wind, Coffee, Moon, Sun\n} from 'lucide-react';\nimport { useQuickActionsContext } from '../../../../hooks/useQuickActionsContext';\nimport { useAccessibilityStore } from '../../../../stores/accessibilityStore';\nimport { useUserPreferences } from '../../../../hooks/useUserPreferences';\nimport { QuickAction } from '../../../../types/dashboard';\nimport { VoiceCommandInterface } from './VoiceCommandInterface';\nimport { GestureHandler } from './GestureHandler';\nimport { KeyboardNavigator } from './KeyboardNavigator';\nimport { ActionRecommendationEngine } from './ActionRecommendationEngine';\n\ninterface SmartQuickActionsWidgetProps {\n  userId: string;\n  currentMood?: string;\n  timeOfDay?: 'morning' | 'afternoon' | 'evening' | 'night';\n  location?: { lat: number; lng: number };\n  recentActivity?: string[];\n  crisisMode?: boolean;\n  onActionExecute?: (action: QuickAction) => void;\n}\n\nexport function SmartQuickActionsWidget({\n  userId,\n  currentMood,\n  timeOfDay,\n  location,\n  recentActivity = [],\n  crisisMode = false,\n  onActionExecute\n}: SmartQuickActionsWidgetProps) {\n  const { actions, executeAction, _addCustomAction, getFrequentActions } = useQuickActionsContext();\n  const { settings: accessibilitySettings } = useAccessibilityStore();\n  const { _preferences, _updatePreference } = useUserPreferences(_userId);\n  \n  const [searchQuery, _setSearchQuery] = useState('');\n  const [selectedCategory, _setSelectedCategory] = useState<string>('all');\n  const [voiceCommandActive, _setVoiceCommandActive] = useState(false);\n  const [showCustomizationPanel, _setShowCustomizationPanel] = useState(false);\n  const [actionHistory, _setActionHistory] = useState<string[]>([]);\n  const [contextualActions, _setContextualActions] = useState<QuickAction[]>([]);\n\n  // Action recommendation engine\n  const recommendationEngine = useMemo(() => \n    new ActionRecommendationEngine({\n      userId,\n      currentMood,\n      timeOfDay,\n      location,\n      recentActivity,\n      actionHistory\n    }), [userId, currentMood, timeOfDay, location, recentActivity, actionHistory]);\n\n  // Get recommended actions based on context\n  useEffect(() => {\n    const _recommendations = recommendationEngine.getRecommendations(_actions);\n    setContextualActions(_recommendations);\n  }, [actions, recommendationEngine]);\n\n  // Enhanced action categories with crisis priority\n  const categories = useMemo(() => {\n    if (_crisisMode) {\n      return [\n        { id: 'crisis', label: 'Emergency', icon: AlertCircle, color: 'red' },\n        { id: 'grounding', label: 'Grounding', icon: Shield, color: 'purple' },\n        { id: 'contact', label: 'Contact', icon: Phone, color: 'blue' }\n      ];\n    }\n    \n    return [\n      { id: 'all', label: 'All Actions', icon: Zap, color: 'gray' },\n      { id: 'wellness', label: 'Wellness', icon: Heart, color: 'pink' },\n      { id: 'tracking', label: 'Track', icon: Edit3, color: 'blue' },\n      { id: 'therapy', label: 'Therapy', icon: Brain, color: 'purple' },\n      { id: 'social', label: 'Connect', icon: Users, color: 'green' },\n      { id: 'crisis', label: 'Crisis', icon: AlertCircle, color: 'red' }\n    ];\n  }, [crisisMode]);\n\n  // Filter actions based on search and category\n  const filteredActions = useMemo(() => {\n    let filtered = crisisMode \n      ? actions.filter(a => a.category === 'crisis' || a.isEmergency)\n      : actions;\n\n    if (selectedCategory !== 'all') {\n      filtered = filtered.filter(a => a.category === selectedCategory);\n    }\n\n    if (searchQuery) {\n      const _query = searchQuery.toLowerCase();\n      filtered = filtered.filter(a => \n        a.label.toLowerCase().includes(_query) ||\n        a.description?.toLowerCase().includes(_query) ||\n        a.tags?.some(tag => tag.toLowerCase().includes(_query))\n      );\n    }\n\n    return filtered;\n  }, [actions, selectedCategory, searchQuery, crisisMode]);\n\n  // Handle action execution with tracking\n  const handleActionClick = useCallback((action: QuickAction) => {\n    setActionHistory(prev => [...prev, action.id].slice(-20)); // Keep last 20 actions\n    executeAction(action);\n    onActionExecute?.(action);\n    \n    // Announce action for screen readers\n    if (accessibilitySettings.screenReaderMode) {\n      const _announcement = new SpeechSynthesisUtterance(`Executing ${action.label}`);\n      window.speechSynthesis.speak(_announcement);\n    }\n  }, [executeAction, onActionExecute, accessibilitySettings.screenReaderMode]);\n\n  // Voice command handler\n  const __handleVoiceCommand   = useCallback((command: string) => {\n    const _matchedAction = actions.find(a => \n      a.label.toLowerCase().includes(command.toLowerCase()) ||\n      a.voiceAlias?.some(alias => alias.toLowerCase() === command.toLowerCase())\n    );\n    \n    if (_matchedAction) {\n      handleActionClick(_matchedAction);\n    }\n  }, [actions, handleActionClick]);\n\n  // Keyboard navigation handler\n  const __handleKeyboardNavigation   = useCallback((key: string) => {\n    // Handle keyboard shortcuts for actions\n    const _actionWithShortcut = actions.find(a => a.keyboard === key);\n    if (_actionWithShortcut) {\n      handleActionClick(_actionWithShortcut);\n    }\n  }, [actions, handleActionClick]);\n\n  // Get icon component\n  const getIcon = (iconName: string) => {\n    const iconMap: Record<string, any> = {\n      brain: Brain, heart: Heart, phone: Phone, calendar: Calendar,\n      message: MessageSquare, activity: Activity, pill: Pill, book: Book,\n      users: Users, sparkles: Sparkles, music: Music, shield: Shield,\n      alert: AlertCircle, mic: Mic, keyboard: Keyboard, eye: Eye,\n      settings: Settings, search: Search, zap: Zap, clock: Clock,\n      map: MapPin, volume: Volume2, edit: Edit3, home: Home, help: HelpCircle,\n      smartphone: Smartphone, headphones: Headphones, wind: Wind,\n      coffee: Coffee, moon: Moon, sun: Sun\n    };\n    return iconMap[iconName.toLowerCase()] || Brain;\n  };\n\n  return (\n    <div className={`\n      relative rounded-xl shadow-lg overflow-hidden\n      ${crisisMode ? 'bg-red-50 border-2 border-red-500' : 'bg-white'}\n      ${accessibilitySettings.highContrast ? 'border-4 border-black' : ''}\n    `}>\n      {/* Crisis Mode Alert Banner */}\n      {crisisMode && (\n        <motion.div\n          initial={{ height: 0 }}\n          animate={{ height: 'auto' }}\n          className=\"bg-red-600 text-white p-3 flex items-center justify-between\"\n        >\n          <div className=\"flex items-center space-x-2\">\n            <AlertCircle className=\"h-5 w-5 animate-pulse\" />\n            <span className=\"font-semibold\">Crisis Mode Active</span>\n          </div>\n          <button\n            onClick={() => handleActionClick(actions.find(a => a.id === 'emergency-hotline')!)}\n            className=\"bg-white text-red-600 px-3 py-1 rounded-full text-sm font-semibold hover:bg-red-100\"\n            aria-label=\"Call emergency hotline\"\n          >\n            Call 988\n          </button>\n        </motion.div>\n      )}\n\n      {/* Header with Search and Voice Controls */}\n      <div className=\"p-4 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h3 className={`text-lg font-semibold ${crisisMode ? 'text-red-900' : 'text-gray-900'}`}>\n            Quick Actions\n          </h3>\n          \n          <div className=\"flex items-center space-x-2\">\n            {/* Voice Command Toggle */}\n            <button\n              onClick={() => setVoiceCommandActive(!voiceCommandActive)}\n              className={`p-2 rounded-lg transition-colors ${\n                voiceCommandActive \n                  ? 'bg-blue-500 text-white' \n                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n              }`}\n              aria-label=\"Toggle voice commands\"\n              title=\"Voice Commands (Alt+V)\"\n            >\n              <Mic className=\"h-4 w-4\" />\n            </button>\n            \n            {/* Keyboard Navigation Help */}\n            <button\n              onClick={() => setShowCustomizationPanel(!showCustomizationPanel)}\n              className=\"p-2 rounded-lg bg-gray-100 text-gray-600 hover:bg-gray-200\"\n              aria-label=\"Keyboard shortcuts\"\n              title=\"Keyboard Shortcuts (Alt+K)\"\n            >\n              <Keyboard className=\"h-4 w-4\" />\n            </button>\n            \n            {/* Settings */}\n            <button\n              onClick={() => setShowCustomizationPanel(!showCustomizationPanel)}\n              className=\"p-2 rounded-lg bg-gray-100 text-gray-600 hover:bg-gray-200\"\n              aria-label=\"Customize actions\"\n            >\n              <Settings className=\"h-4 w-4\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Search Bar */}\n        {!crisisMode && (\n          <div className=\"relative\">\n            <input\n              type=\"text\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              placeholder=\"Search actions...\"\n              className=\"w-full px-3 py-2 pl-9 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              aria-label=\"Search quick actions\"\n            />\n            <Search className=\"absolute left-3 top-2.5 h-4 w-4 text-gray-400\" />\n          </div>\n        )}\n      </div>\n\n      {/* Category Tabs */}\n      {!crisisMode && (\n        <div className=\"px-4 py-2 border-b border-gray-200 overflow-x-auto\">\n          <div className=\"flex space-x-2\">\n            {categories.map(category => {\n              const Icon = category.icon;\n              return (\n                <button\n                  key={category.id}\n                  onClick={() => setSelectedCategory(category.id)}\n                  className={`\n                    flex items-center space-x-1 px-3 py-1.5 rounded-full text-sm font-medium\n                    transition-all whitespace-nowrap\n                    ${selectedCategory === category.id\n                      ? `bg-${category.color}-100 text-${category.color}-700 ring-2 ring-${category.color}-500`\n                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n                    }\n                  `}\n                  aria-label={`Filter by ${category.label}`}\n                  aria-pressed={selectedCategory === category.id}\n                >\n                  <Icon className=\"h-3.5 w-3.5\" />\n                  <span>{category.label}</span>\n                </button>\n              );\n            })}\n          </div>\n        </div>\n      )}\n\n      {/* Contextual Recommendations */}\n      {contextualActions.length > 0 && !crisisMode && (\n        <div className=\"p-4 bg-blue-50 border-b border-blue-200\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <h4 className=\"text-sm font-semibold text-blue-900\">Recommended for you</h4>\n            <span className=\"text-xs text-blue-600\">Based on your current context</span>\n          </div>\n          <div className=\"flex flex-wrap gap-2\">\n            {contextualActions.slice(0, 3).map(action => {\n              const Icon = getIcon(action.icon);\n              return (\n                <motion.button\n                  key={action.id}\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  onClick={() => handleActionClick(action)}\n                  className=\"flex items-center space-x-2 px-3 py-1.5 bg-white rounded-lg shadow-sm hover:shadow-md transition-all\"\n                >\n                  <Icon className={`h-4 w-4 ${action.color?.replace('bg-', 'text-')}`} />\n                  <span className=\"text-sm font-medium\">{action.label}</span>\n                </motion.button>\n              );\n            })}\n          </div>\n        </div>\n      )}\n\n      {/* Main Actions Grid */}\n      <div className=\"p-4\">\n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={selectedCategory + searchQuery}\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            className={`grid gap-3 ${\n              crisisMode \n                ? 'grid-cols-1' \n                : 'grid-cols-2 sm:grid-cols-3 lg:grid-cols-4'\n            }`}\n          >\n            {filteredActions.map((action, index) => {\n              const Icon = getIcon(action.icon);\n              const isEmergency = action.isEmergency || action.category === 'crisis';\n              \n              return (\n                <motion.button\n                  key={action.id}\n                  initial={{ opacity: 0, scale: 0.9 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: index * 0.03 }}\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  onClick={() => handleActionClick(action)}\n                  className={`\n                    relative group p-3 rounded-lg transition-all\n                    ${isEmergency\n                      ? 'bg-gradient-to-r from-red-500 to-red-600 text-white shadow-lg hover:shadow-xl'\n                      : 'bg-white border border-gray-200 hover:border-gray-300 hover:shadow-md'\n                    }\n                    ${accessibilitySettings.highContrast ? 'border-2 border-black' : ''}\n                    focus:outline-none focus:ring-2 focus:ring-offset-2 \n                    ${isEmergency ? 'focus:ring-red-500' : 'focus:ring-blue-500'}\n                  `}\n                  aria-label={`${action.label}: ${action.description}`}\n                  data-keyboard-shortcut={action.keyboard}\n                >\n                  {/* Emergency pulse animation */}\n                  {isEmergency && (\n                    <div className=\"absolute inset-0 rounded-lg\">\n                      <div className=\"absolute inset-0 bg-red-400 opacity-20 animate-ping rounded-lg\" />\n                    </div>\n                  )}\n                  \n                  <div className=\"relative flex flex-col items-center space-y-2\">\n                    {/* Icon */}\n                    <div className={`\n                      p-2 rounded-lg transition-all\n                      ${isEmergency \n                        ? 'bg-red-700 bg-opacity-20' \n                        : `${action.color} bg-opacity-10 group-hover:bg-opacity-20`\n                      }\n                    `}>\n                      <Icon className={`\n                        h-5 w-5\n                        ${isEmergency ? 'text-white' : action.color?.replace('bg-', 'text-')}\n                      `} />\n                    </div>\n                    \n                    {/* Label */}\n                    <span className={`\n                      text-sm font-medium\n                      ${isEmergency ? 'text-white' : 'text-gray-900'}\n                    `}>\n                      {action.label}\n                    </span>\n                    \n                    {/* Description */}\n                    {action.description && (\n                      <span className={`\n                        text-xs text-center line-clamp-2\n                        ${isEmergency ? 'text-red-100' : 'text-gray-500'}\n                      `}>\n                        {action.description}\n                      </span>\n                    )}\n                    \n                    {/* Keyboard shortcut badge */}\n                    {action.keyboard && (\n                      <div className=\"absolute -top-1 -right-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                        <span className=\"text-xs bg-gray-800 text-white px-1.5 py-0.5 rounded\">\n                          {action.keyboard}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                </motion.button>\n              );\n            })}\n          </motion.div>\n        </AnimatePresence>\n\n        {/* Empty state */}\n        {filteredActions.length === 0 && (\n          <div className=\"text-center py-8\">\n            <Search className=\"h-12 w-12 text-gray-300 mx-auto mb-3\" />\n            <p className=\"text-gray-500\">No actions found</p>\n            <button\n              onClick={() => {\n                setSearchQuery('');\n                setSelectedCategory('all');\n              }}\n              className=\"mt-2 text-sm text-blue-600 hover:text-blue-700\"\n            >\n              Clear filters\n            </button>\n          </div>\n        )}\n      </div>\n\n      {/* Frequent Actions Footer */}\n      {!crisisMode && (\n        <div className=\"px-4 py-3 bg-gray-50 border-t border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-xs text-gray-500\">\n              Your frequent actions\n            </span>\n            <div className=\"flex space-x-1\">\n              {getFrequentActions().slice(0, 5).map(action => {\n                const Icon = getIcon(action.icon);\n                return (\n                  <button\n                    key={action.id}\n                    onClick={() => handleActionClick(action)}\n                    className=\"p-1.5 rounded hover:bg-gray-200 transition-colors\"\n                    aria-label={action.label}\n                  >\n                    <Icon className=\"h-3.5 w-3.5 text-gray-600\" />\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Voice Command Interface */}\n      {voiceCommandActive && (\n        <VoiceCommandInterface\n          isActive={voiceCommandActive}\n          onCommand={handleVoiceCommand}\n          onClose={() => setVoiceCommandActive(false)}\n        />\n      )}\n\n      {/* Keyboard Navigator */}\n      <KeyboardNavigator\n        actions={filteredActions}\n        onActionSelect={handleActionClick}\n        onKeyPress={handleKeyboardNavigation}\n        isActive={!voiceCommandActive}\n      />\n\n      {/* Gesture Handler for mobile */}\n      <GestureHandler\n        onSwipeLeft={() => {/* Navigate to next category */}}\n        onSwipeRight={() => {/* Navigate to previous category */}}\n        onDoubleTap={() => {/* Open voice commands */}}\n        onLongPress={() => {/* Show action customization */}}\n      />\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\quickActions\\VoiceCommandInterface.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'initializeAudioAnalyzer' function makes the dependencies of useEffect Hook (at line 121) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'initializeAudioAnalyzer' in its own useCallback() Hook.","line":124,"column":9,"nodeType":"VariableDeclarator","endLine":138,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Mic, MicOff, Volume2, X, AlertCircle, CheckCircle } from 'lucide-react';\nimport { logger } from '@/utils/logger';\n\ninterface VoiceCommandInterfaceProps {\n  isActive: boolean;\n  onCommand: (command: string) => void;\n  onClose: () => void;\n  supportedCommands?: string[];\n}\n\nexport function VoiceCommandInterface({\n  isActive,\n  onCommand,\n  onClose,\n  supportedCommands = []\n}: VoiceCommandInterfaceProps) {\n  const [isListening, _setIsListening] = useState(false);\n  const [transcript, _setTranscript] = useState('');\n  const [interimTranscript, _setInterimTranscript] = useState('');\n  const [status, _setStatus] = useState<'idle' | 'listening' | 'processing' | 'success' | 'error'>('idle');\n  const [errorMessage, _setErrorMessage] = useState('');\n  const [volume, _setVolume] = useState(0);\n  \n  const recognitionRef = useRef<unknown>(null);\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const analyserRef = useRef<AnalyserNode | null>(null);\n  const microphoneRef = useRef<MediaStreamAudioSourceNode | null>(null);\n  const animationFrameRef = useRef<number | null>(null);\n\n  // Default voice commands\n  const defaultCommands = [\n    'log mood', 'start meditation', 'open journal', 'call crisis line',\n    'breathing exercise', 'check in', 'view schedule', 'track medication',\n    'safety plan', 'grounding exercise', 'contact therapist', 'emergency help'\n  ];\n\n  const commands = supportedCommands.length > 0 ? supportedCommands : defaultCommands;\n\n  // Initialize speech recognition\n  useEffect(() => {\n    if (!isActive) return;\n\n    const SpeechRecognition = (window as unknown).SpeechRecognition || (window as unknown).webkitSpeechRecognition;\n    \n    if (!SpeechRecognition) {\n      setErrorMessage('Voice commands not supported in this browser');\n      setStatus('error');\n      return;\n    }\n\n    const recognition = new SpeechRecognition();\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.lang = 'en-US';\n\n    recognition.onstart = () => {\n      setStatus('listening');\n      setIsListening(true);\n      setErrorMessage('');\n      initializeAudioAnalyzer();\n    };\n\n    recognition.onresult = (event: unknown) => {\n      let _interim = '';\n      let final = '';\n\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          final += `${transcript  } `;\n        } else {\n          _interim += transcript;\n        }\n      }\n\n      if (final) {\n        setTranscript(prev => prev + final);\n        processCommand(final.trim());\n      }\n      \n      setInterimTranscript(_interim);\n    };\n\n    recognition.onerror = (event: unknown) => {\n      logger.error('Speech recognition error:', event.error);\n      setStatus('error');\n      setIsListening(false);\n      \n      switch (event.error) {\n        case 'no-speech':\n          setErrorMessage('No speech detected. Please try again.');\n          break;\n        case 'audio-capture':\n          setErrorMessage('Microphone not found. Please check your settings.');\n          break;\n        case 'not-allowed':\n          setErrorMessage('Microphone access denied. Please enable permissions.');\n          break;\n        default:\n          setErrorMessage('An error occurred. Please try again.');\n      }\n      \n      stopAudioAnalyzer();\n    };\n\n    recognition.onend = () => {\n      setIsListening(false);\n      stopAudioAnalyzer();\n    };\n\n    recognitionRef.current = recognition;\n\n    return () => {\n      if (recognitionRef.current) {\n        recognitionRef.current.stop();\n      }\n      stopAudioAnalyzer();\n    };\n  }, [isActive, initializeAudioAnalyzer]);\n\n  // Initialize audio analyzer for volume visualization\n  const initializeAudioAnalyzer = async () => {\n    try {\n      const _stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      audioContextRef.current = new AudioContext();\n      analyserRef.current = audioContextRef.current.createAnalyser();\n      microphoneRef.current = audioContextRef.current.createMediaStreamSource(_stream);\n      \n      analyserRef.current.fftSize = 256;\n      microphoneRef.current.connect(analyserRef.current);\n      \n      updateVolume();\n    } catch {\n      logger.error('Error initializing audio analyzer:');\n    }\n  };\n\n  // Update volume meter\n  const updateVolume = () => {\n    if (!analyserRef.current) return;\n\n    const dataArray = new Uint8Array(analyserRef.current.frequencyBinCount);\n    analyserRef.current.getByteFrequencyData(dataArray);\n    \n    const average = dataArray.reduce((a, b) => a + b) / dataArray.length;\n    setVolume(average / 255);\n    \n    animationFrameRef.current = requestAnimationFrame(_updateVolume);\n  };\n\n  // Stop audio analyzer\n  const stopAudioAnalyzer = () => {\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    \n    if (microphoneRef.current) {\n      microphoneRef.current.disconnect();\n    }\n    \n    if (audioContextRef.current && audioContextRef.current.state !== 'closed') {\n      audioContextRef.current.close();\n    }\n    \n    setVolume(0);\n  };\n\n  // Process recognized command\n  const __processCommand   = useCallback((command: string) => {\n    setStatus('processing');\n    const lowerCommand = command.toLowerCase();\n    \n    // Find matching command\n    const matchedCommand = commands.find(cmd => \n      lowerCommand.includes(cmd.toLowerCase())\n    );\n    \n    if (_matchedCommand) {\n      setStatus('success');\n      onCommand(_lowerCommand);\n      \n      // Provide audio feedback\n      const utterance = new SpeechSynthesisUtterance(`Executing ${matchedCommand}`);\n      utterance.rate = 1.2;\n      window.speechSynthesis.speak(_utterance);\n      \n      setTimeout(() => {\n        setStatus('idle');\n        setTranscript('');\n      }, 2000);\n    } else {\n      setStatus('error');\n      setErrorMessage('Command not recognized. Please try again.');\n      \n      setTimeout(() => {\n        setStatus('listening');\n        setErrorMessage('');\n      }, 2000);\n    }\n  }, [commands, onCommand]);\n\n  // Toggle listening\n  const toggleListening = () => {\n    if (!recognitionRef.current) return;\n\n    if (_isListening) {\n      recognitionRef.current.stop();\n      setIsListening(false);\n      setStatus('idle');\n    } else {\n      recognitionRef.current.start();\n      setIsListening(true);\n    }\n  };\n\n  // Speak command list\n  const speakCommands = () => {\n    const commandList = commands.join(', ');\n    const utterance = new SpeechSynthesisUtterance(`Available commands are: ${commandList}`);\n    utterance.rate = 0.9;\n    window.speechSynthesis.speak(_utterance);\n  };\n\n  if (!isActive) return null;\n\n  return (\n    <AnimatePresence>\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        exit={{ opacity: 0, y: 20 }}\n        className=\"fixed bottom-4 right-4 z-50 w-96 max-w-[calc(100vw-2rem)]\"\n      >\n        <div className=\"bg-white rounded-xl shadow-2xl border border-gray-200 overflow-hidden\">\n          {/* Header */}\n          <div className=\"bg-gradient-to-r from-blue-500 to-purple-600 p-4 text-white\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"relative\">\n                  {isListening ? (\n                    <Mic className=\"h-5 w-5 animate-pulse\" />\n                  ) : (\n                    <MicOff className=\"h-5 w-5\" />\n                  )}\n                  {/* Volume indicator */}\n                  {isListening && (\n                    <motion.div\n                      className=\"absolute -inset-2 rounded-full border-2 border-white\"\n                      animate={{ scale: 1 + volume * 0.5 }}\n                      transition={{ duration: 0.1 }}\n                    />\n                  )}\n                </div>\n                <span className=\"font-semibold\">Voice Commands</span>\n              </div>\n              \n              <button\n                onClick={onClose}\n                className=\"p-1 hover:bg-white hover:bg-opacity-20 rounded-lg transition-colors\"\n                aria-label=\"Close voice commands\"\n              >\n                <X className=\"h-4 w-4\" />\n              </button>\n            </div>\n            \n            {/* Status indicator */}\n            <div className=\"mt-2 flex items-center space-x-2\">\n              {status === 'listening' && (\n                <>\n                  <div className=\"flex space-x-1\">\n                    <motion.div\n                      className=\"w-1 h-4 bg-white rounded-full\"\n                      animate={{ scaleY: [1, 1.5, 1] }}\n                      transition={{ duration: 0.5, repeat: Infinity }}\n                    />\n                    <motion.div\n                      className=\"w-1 h-4 bg-white rounded-full\"\n                      animate={{ scaleY: [1, 1.5, 1] }}\n                      transition={{ duration: 0.5, repeat: Infinity, delay: 0.1 }}\n                    />\n                    <motion.div\n                      className=\"w-1 h-4 bg-white rounded-full\"\n                      animate={{ scaleY: [1, 1.5, 1] }}\n                      transition={{ duration: 0.5, repeat: Infinity, delay: 0.2 }}\n                    />\n                  </div>\n                  <span className=\"text-sm\">Listening...</span>\n                </>\n              )}\n              \n              {status === 'processing' && (\n                <>\n                  <motion.div\n                    className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full\"\n                    animate={{ rotate: 360 }}\n                    transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}\n                  />\n                  <span className=\"text-sm\">Processing...</span>\n                </>\n              )}\n              \n              {status === 'success' && (\n                <>\n                  <CheckCircle className=\"h-4 w-4\" />\n                  <span className=\"text-sm\">Command executed!</span>\n                </>\n              )}\n              \n              {status === 'error' && (\n                <>\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <span className=\"text-sm\">Error occurred</span>\n                </>\n              )}\n              \n              {status === 'idle' && (\n                <span className=\"text-sm text-white text-opacity-80\">\n                  Click the microphone to start\n                </span>\n              )}\n            </div>\n          </div>\n\n          {/* Transcript display */}\n          <div className=\"p-4 min-h-[100px] max-h-[200px] overflow-y-auto bg-gray-50\">\n            {(transcript || interimTranscript) ? (\n              <div>\n                {transcript && (\n                  <p className=\"text-gray-900 mb-1\">{transcript}</p>\n                )}\n                {interimTranscript && (\n                  <p className=\"text-gray-500 italic\">{interimTranscript}</p>\n                )}\n              </div>\n            ) : (\n              <p className=\"text-gray-400 text-center\">\n                Your voice commands will appear here\n              </p>\n            )}\n            \n            {errorMessage && (\n              <div className=\"mt-2 p-2 bg-red-100 text-red-700 rounded-lg text-sm\">\n                {errorMessage}\n              </div>\n            )}\n          </div>\n\n          {/* Controls */}\n          <div className=\"p-4 border-t border-gray-200 flex items-center justify-between\">\n            <button\n              onClick={speakCommands}\n              className=\"flex items-center space-x-1 text-sm text-gray-600 hover:text-gray-900\"\n              aria-label=\"Hear available commands\"\n            >\n              <Volume2 className=\"h-4 w-4\" />\n              <span>Hear commands</span>\n            </button>\n            \n            <button\n              onClick={toggleListening}\n              className={`\n                px-4 py-2 rounded-lg font-medium transition-all\n                ${isListening\n                  ? 'bg-red-500 hover:bg-red-600 text-white'\n                  : 'bg-blue-500 hover:bg-blue-600 text-white'\n                }\n              `}\n              aria-label={isListening ? 'Stop listening' : 'Start listening'}\n            >\n              {isListening ? 'Stop' : 'Start'} Listening\n            </button>\n          </div>\n\n          {/* Command suggestions */}\n          <div className=\"px-4 pb-4\">\n            <p className=\"text-xs text-gray-500 mb-2\">Try saying:</p>\n            <div className=\"flex flex-wrap gap-1\">\n              {commands.slice(0, 6).map((cmd, index) => (\n                <span\n                  key={index}\n                  className=\"text-xs px-2 py-1 bg-gray-100 text-gray-600 rounded-full\"\n                >\n                  &quot;{cmd}&quot;\n                </span>\n              ))}\n            </div>\n          </div>\n        </div>\n      </motion.div>\n    </AnimatePresence>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\quickActions\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\wellness\\AdvancedJournal.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'dateFilter'. Either exclude it or remove the dependency array.","line":177,"column":6,"nodeType":"ArrayExpression","endLine":177,"endColumn":79,"suggestions":[{"desc":"Update the dependencies array to be: [journalEntries, searchQuery, selectedTags, selectedEmotions]","fix":{"range":[4848,4921],"text":"[journalEntries, searchQuery, selectedTags, selectedEmotions]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, _useEffect, useMemo } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  BookOpen,\n  PenTool,\n  Search,\n  Filter,\n  Tag,\n  _Calendar,\n  Heart,\n  Smile,\n  Frown,\n  Meh,\n  TrendingUp,\n  Download,\n  ChevronRight,\n  Sparkles,\n  Brain,\n  Award,\n  Clock,\n  FileText,\n  MessageSquare,\n  CheckCircle,\n  AlertCircle\n} from 'lucide-react';\nimport { format, isToday, isYesterday, differenceInDays } from 'date-fns';\n\ninterface JournalEntry {\n  id: string;\n  timestamp: Date;\n  content: string;\n  mood?: number;\n  emotions?: string[];\n  tags?: string[];\n  sentiment?: {\n    score: number; // -1 to 1\n    magnitude: number; // 0 to infinity\n    emotions: {\n      joy: number;\n      sadness: number;\n      anger: number;\n      fear: number;\n      surprise: number;\n      love: number;\n    };\n  };\n  gratitude?: string[];\n  achievements?: string[];\n  prompts?: string[];\n  wordCount: number;\n  editedAt?: Date;\n  isPrivate?: boolean;\n}\n\ninterface AdvancedJournalProps {\n  entries?: JournalEntry[];\n  onNewEntry?: () => void;\n  onEditEntry?: (id: string) => void;\n  onExport?: (entries: JournalEntry[]) => void;\n  _onSearch?: (query: string) => void;\n}\n\nexport function AdvancedJournal({ \n  entries = [], \n  onNewEntry, \n  onEditEntry,\n  onExport,\n  _onSearch \n}: AdvancedJournalProps) {\n  const [searchQuery, _setSearchQuery] = useState('');\n  const [selectedTags, _setSelectedTags] = useState<string[]>([]);\n  const [selectedEmotions, _setSelectedEmotions] = useState<string[]>([]);\n  const [dateFilter, _setDateFilter] = useState<'all' | 'today' | 'week' | 'month'>('all');\n  const [showFilters, _setShowFilters] = useState(false);\n  const [selectedEntry, _setSelectedEntry] = useState<string | null>(null);\n\n  // Mock journal entries if none provided\n  const mockEntries: JournalEntry[] = [\n    {\n      id: '1',\n      timestamp: new Date(),\n      content: \"Today was a breakthrough day. I finally understood that my anxiety doesn&apos;t define me. The meditation session this morning really helped me see things from a different perspective.\",\n      mood: 7,\n      emotions: ['hopeful', 'calm', 'grateful'],\n      tags: ['breakthrough', 'meditation', 'anxiety'],\n      sentiment: {\n        score: 0.8,\n        magnitude: 2.1,\n        emotions: {\n          joy: 0.7,\n          sadness: 0.1,\n          anger: 0,\n          fear: 0.1,\n          surprise: 0.3,\n          love: 0.6\n        }\n      },\n      gratitude: ['My support system', 'Morning sunlight', 'Progress in therapy'],\n      achievements: ['Completed 30-minute meditation', 'Reached out to a friend'],\n      wordCount: 42,\n      prompts: ['What made today meaningful?']\n    },\n    {\n      id: '2',\n      timestamp: new Date(Date.now() - 86400000),\n      content: \"Struggled with motivation today, but I&apos;m proud that I still managed to journal. Small wins count too.\",\n      mood: 5,\n      emotions: ['tired', 'proud', 'determined'],\n      tags: ['motivation', 'small-wins'],\n      sentiment: {\n        score: 0.3,\n        magnitude: 1.5,\n        emotions: {\n          joy: 0.3,\n          sadness: 0.4,\n          anger: 0,\n          fear: 0.2,\n          surprise: 0,\n          love: 0.2\n        }\n      },\n      wordCount: 18,\n      prompts: ['What am I proud of today?']\n    }\n  ];\n\n  const journalEntries = entries.length > 0 ? entries : mockEntries;\n\n  // Filter entries based on search and filters\n  const filteredEntries = useMemo(() => {\n    let filtered = [...journalEntries];\n\n    // Search filter\n    if (_searchQuery) {\n      filtered = filtered.filter(entry =>\n        entry.content.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        entry.tags?.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase())) ||\n        entry.emotions?.some(emotion => emotion.toLowerCase().includes(searchQuery.toLowerCase()))\n      );\n    }\n\n    // Tag filter\n    if (selectedTags.length > 0) {\n      filtered = filtered.filter(entry =>\n        selectedTags.every(tag => entry.tags?.includes(tag))\n      );\n    }\n\n    // Emotion filter\n    if (selectedEmotions.length > 0) {\n      filtered = filtered.filter(entry =>\n        selectedEmotions.every(emotion => entry.emotions?.includes(emotion))\n      );\n    }\n\n    // Date filter\n    const now = new Date();\n    switch (_dateFilter) {\n      case 'today':\n        filtered = filtered.filter(entry => isToday(new Date(entry.timestamp)));\n        break;\n      case 'week':\n        filtered = filtered.filter(entry => \n          differenceInDays(now, new Date(entry.timestamp)) <= 7\n        );\n        break;\n      case 'month':\n        filtered = filtered.filter(entry => \n          differenceInDays(now, new Date(entry.timestamp)) <= 30\n        );\n        break;\n    }\n\n    return filtered.sort((a, b) => \n      new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n    );\n  }, [journalEntries, searchQuery, selectedTags, selectedEmotions, dateFilter]);\n\n  // Extract all unique tags and emotions\n  const allTags = useMemo(() => {\n    const tags = new Set<string>();\n    journalEntries.forEach(entry => {\n      entry.tags?.forEach(tag => tags.add(tag));\n    });\n    return Array.from(_tags);\n  }, [journalEntries]);\n\n  const allEmotions = useMemo(() => {\n    const emotions = new Set<string>();\n    journalEntries.forEach(entry => {\n      entry.emotions?.forEach(emotion => emotions.add(emotion));\n    });\n    return Array.from(_emotions);\n  }, [journalEntries]);\n\n  // Calculate sentiment statistics\n  const sentimentStats = useMemo(() => {\n    const validEntries = filteredEntries.filter(e => e.sentiment);\n    if (validEntries.length === 0) return null;\n\n    const avgSentiment = validEntries.reduce((sum, e) => sum + (e.sentiment?.score || 0), 0) / validEntries.length;\n    const _dominantEmotion = validEntries.reduce((emotions, entry) => {\n      if (!entry.sentiment?.emotions) return emotions;\n      Object.entries(entry.sentiment.emotions).forEach(([emotion, value]) => {\n        emotions[emotion] = (emotions[emotion] || 0) + value;\n      });\n      return emotions;\n    }, {} as Record<string, number>);\n\n    const topEmotion = Object.entries(_dominantEmotion)\n      .sort((a, b) => b[1] - a[1])[0];\n\n    return {\n      avgSentiment,\n      topEmotion: topEmotion ? topEmotion[0] : null,\n      totalWords: filteredEntries.reduce((sum, e) => sum + e.wordCount, 0),\n      avgWords: Math.round(filteredEntries.reduce((sum, e) => sum + e.wordCount, 0) / filteredEntries.length)\n    };\n  }, [filteredEntries]);\n\n  // Get writing prompts based on current mood and patterns\n  const __writingPrompts   = useMemo(() => {\n    const prompts = [\n      {\n        category: 'reflection',\n        prompt: 'What moment from today would you like to remember?',\n        difficulty: 'easy'\n      },\n      {\n        category: 'gratitude',\n        prompt: 'List three things that brought you joy today, no matter how small.',\n        difficulty: 'easy'\n      },\n      {\n        category: 'growth',\n        prompt: 'What challenge did you face today and what did it teach you?',\n        difficulty: 'medium'\n      },\n      {\n        category: 'emotions',\n        prompt: 'Describe your emotions today as if they were weather patterns.',\n        difficulty: 'medium'\n      },\n      {\n        category: 'future',\n        prompt: 'Write a letter to yourself one year from now.',\n        difficulty: 'deep'\n      },\n      {\n        category: 'relationships',\n        prompt: 'How did your interactions with others affect your mood today?',\n        difficulty: 'deep'\n      }\n    ];\n\n    // Customize prompts based on recent sentiment\n    if (sentimentStats?.avgSentiment && sentimentStats.avgSentiment < 0) {\n      prompts.unshift({\n        category: 'support',\n        prompt: 'What would you tell a friend who was feeling the way you are now?',\n        difficulty: 'medium'\n      });\n    }\n\n    return prompts.slice(0, 3);\n  }, [sentimentStats]);\n\n  // Format date for display\n  const formatEntryDate = (_date: Date) => {\n    const entryDate = new Date(_date);\n    if (isToday(_entryDate)) return 'Today';\n    if (isYesterday(_entryDate)) return 'Yesterday';\n    return format(entryDate, 'MMM d, yyyy');\n  };\n\n  // Get mood emoji\n  const getMoodEmoji = (mood?: number) => {\n    if (!mood) return <Meh className=\"h-5 w-5 text-gray-400\" />;\n    if (mood >= 7) return <Smile className=\"h-5 w-5 text-green-500\" />;\n    if (mood >= 4) return <Meh className=\"h-5 w-5 text-yellow-500\" />;\n    return <Frown className=\"h-5 w-5 text-red-500\" />;\n  };\n\n  // Get sentiment color\n  const getSentimentColor = (score?: number) => {\n    if (!score) return 'text-gray-500';\n    if (score > 0.5) return 'text-green-600';\n    if (score > 0) return 'text-blue-600';\n    if (score > -0.5) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  // Handle export\n  const handleExport = () => {\n    if (_onExport) {\n      onExport(filteredEntries);\n    } else {\n      // Create markdown export\n      const markdown = filteredEntries.map(entry => `\n## ${format(new Date(entry.timestamp), 'MMMM d, yyyy - h:mm a')}\n**Mood:** ${entry.mood || 'Not recorded'}\n**Emotions:** ${entry.emotions?.join(', ') || 'None'}\n**Tags:** ${entry.tags?.join(', ') || 'None'}\n\n${entry.content}\n\n${entry.gratitude ? `**Gratitude:** ${entry.gratitude.join(', ')}` : ''}\n${entry.achievements ? `**Achievements:** ${entry.achievements.join(', ')}` : ''}\n      `).join('\\n---\\n');\n\n      const _blob = new Blob([markdown], { type: 'text/markdown' });\n      const url = window.URL.createObjectURL(_blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `journal-export-${format(new Date(), 'yyyy-MM-dd')}.md`;\n      a.click();\n      window.URL.revokeObjectURL(_url);\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Header with stats */}\n      <div className=\"bg-gradient-to-r from-indigo-500 to-purple-600 rounded-xl p-4 text-white\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-3\">\n            <BookOpen className=\"h-6 w-6\" />\n            <div>\n              <h3 className=\"text-lg font-semibold\">Your Journal</h3>\n              <p className=\"text-xs text-indigo-100\">\n                {filteredEntries.length} entries • {sentimentStats?.totalWords || 0} words\n              </p>\n            </div>\n          </div>\n          <button\n            onClick={onNewEntry}\n            className=\"px-4 py-2 bg-white text-indigo-600 rounded-lg font-medium hover:bg-indigo-50 transition-colors flex items-center\"\n          >\n            <PenTool className=\"h-4 w-4 mr-2\" />\n            New Entry\n          </button>\n        </div>\n\n        {/* Sentiment overview */}\n        {sentimentStats && (\n          <div className=\"grid grid-cols-3 gap-3\">\n            <div className=\"bg-white/20 rounded-lg p-2 text-center\">\n              <p className=\"text-xs text-indigo-100\">Avg Sentiment</p>\n              <p className={`text-lg font-bold ${sentimentStats.avgSentiment > 0 ? 'text-green-300' : 'text-red-300'}`}>\n                {sentimentStats.avgSentiment > 0 ? '+' : ''}{(sentimentStats.avgSentiment * 100).toFixed(0)}%\n              </p>\n            </div>\n            <div className=\"bg-white/20 rounded-lg p-2 text-center\">\n              <p className=\"text-xs text-indigo-100\">Top Emotion</p>\n              <p className=\"text-lg font-bold capitalize\">\n                {sentimentStats.topEmotion || 'Mixed'}\n              </p>\n            </div>\n            <div className=\"bg-white/20 rounded-lg p-2 text-center\">\n              <p className=\"text-xs text-indigo-100\">Avg Words</p>\n              <p className=\"text-lg font-bold\">\n                {sentimentStats.avgWords}\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Search and filters */}\n      <div className=\"space-y-3\">\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"flex-1 relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n            <input\n              type=\"text\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              placeholder=\"Search entries, tags, emotions...\"\n              className=\"w-full pl-10 pr-4 py-2 bg-white border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500\"\n            />\n          </div>\n          <button\n            onClick={() => setShowFilters(!showFilters)}\n            className={`p-2 rounded-lg transition-colors ${\n              showFilters ? 'bg-purple-100 text-purple-600' : 'bg-gray-100 text-gray-600'\n            }`}\n          >\n            <Filter className=\"h-5 w-5\" />\n          </button>\n          <button\n            onClick={handleExport}\n            className=\"p-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 transition-colors\"\n          >\n            <Download className=\"h-5 w-5\" />\n          </button>\n        </div>\n\n        {/* Filters */}\n        <AnimatePresence>\n          {showFilters && (\n            <motion.div\n              initial={{ height: 0, opacity: 0 }}\n              animate={{ height: 'auto', opacity: 1 }}\n              exit={{ height: 0, opacity: 0 }}\n              className=\"overflow-hidden\"\n            >\n              <div className=\"p-4 bg-gray-50 rounded-lg space-y-3\">\n                {/* Date filter */}\n                <div>\n                  <label htmlFor=\"input_lsd9ubn8q\" className=\"text-sm font-medium text-gray-700 mb-2 block\">Time Period</label>\n                  <div className=\"flex space-x-2\">\n                    {(['all', 'today', 'week', 'month'] as const).map(period => (\n                      <button\n                        key={period}\n                        onClick={() => setDateFilter(_period)}\n                        className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${\n                          dateFilter === period\n                            ? 'bg-purple-500 text-white'\n                            : 'bg-white text-gray-700 border border-gray-300'\n                        }`}\n                      >\n                        {period.charAt(0).toUpperCase() + period.slice(1)}\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Tags filter */}\n                {allTags.length > 0 && (\n                  <div>\n                    <label htmlFor=\"input_3sny0mu0n\" className=\"text-sm font-medium text-gray-700 mb-2 block\">Tags</label>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {allTags.map(tag => (\n                        <button\n                          key={tag}\n                          onClick={() => {\n                            setSelectedTags(prev =>\n                              prev.includes(tag)\n                                ? prev.filter(t => t !== tag)\n                                : [...prev, tag]\n                            );\n                          }}\n                          className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${\n                            selectedTags.includes(tag)\n                              ? 'bg-purple-500 text-white'\n                              : 'bg-white text-gray-700 border border-gray-300'\n                          }`}\n                        >\n                          <Tag className=\"inline h-3 w-3 mr-1\" />\n                          {tag}\n                        </button>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Emotions filter */}\n                {allEmotions.length > 0 && (\n                  <div>\n                    <label htmlFor=\"input_8c2r6d1vh\" className=\"text-sm font-medium text-gray-700 mb-2 block\">Emotions</label>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {allEmotions.map(emotion => (\n                        <button\n                          key={emotion}\n                          onClick={() => {\n                            setSelectedEmotions(prev =>\n                              prev.includes(emotion)\n                                ? prev.filter(e => e !== emotion)\n                                : [...prev, emotion]\n                            );\n                          }}\n                          className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${\n                            selectedEmotions.includes(emotion)\n                              ? 'bg-purple-500 text-white'\n                              : 'bg-white text-gray-700 border border-gray-300'\n                          }`}\n                        >\n                          <Heart className=\"inline h-3 w-3 mr-1\" />\n                          {emotion}\n                        </button>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n\n      {/* Writing prompts */}\n      <div className=\"bg-gradient-to-br from-yellow-50 to-orange-50 rounded-xl p-4\">\n        <h4 className=\"font-semibold text-gray-800 mb-3 flex items-center\">\n          <Sparkles className=\"h-5 w-5 mr-2 text-yellow-600\" />\n          Today&apos;s Writing Prompts\n        </h4>\n        <div className=\"space-y-2\">\n          {writingPrompts.map((prompt, idx) => (\n            <motion.div\n              key={idx}\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: idx * 0.1 }}\n              className=\"p-3 bg-white rounded-lg cursor-pointer hover:shadow-sm transition-all\"\n              onClick={() => onNewEntry?.()}\n            >\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <p className=\"text-sm text-gray-800\">{prompt.prompt}</p>\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    <span className={`text-xs px-2 py-0.5 rounded-full ${\n                      prompt.difficulty === 'easy' \n                        ? 'bg-green-100 text-green-700'\n                        : prompt.difficulty === 'medium'\n                        ? 'bg-yellow-100 text-yellow-700'\n                        : 'bg-purple-100 text-purple-700'\n                    }`}>\n                      {prompt.difficulty}\n                    </span>\n                    <span className=\"text-xs text-gray-500 capitalize\">\n                      {prompt.category}\n                    </span>\n                  </div>\n                </div>\n                <ChevronRight className=\"h-4 w-4 text-gray-400 mt-1\" />\n              </div>\n            </motion.div>\n          ))}\n        </div>\n      </div>\n\n      {/* Journal entries */}\n      <div className=\"space-y-3\">\n        {filteredEntries.length > 0 ? (\n          filteredEntries.map((entry, idx) => (\n            <motion.div\n              key={entry.id}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: idx * 0.05 }}\n              className={`bg-white rounded-xl p-4 border border-gray-200 hover:shadow-md transition-all cursor-pointer ${\n                selectedEntry === entry.id ? 'ring-2 ring-purple-500' : ''\n              }`}\n              onClick={() => setSelectedEntry(selectedEntry === entry.id ? null : entry.id)}\n            >\n              {/* Entry header */}\n              <div className=\"flex items-start justify-between mb-3\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"text-center\">\n                    <p className=\"text-xs text-gray-500\">\n                      {formatEntryDate(entry.timestamp)}\n                    </p>\n                    <p className=\"text-sm font-medium text-gray-700\">\n                      {format(new Date(entry.timestamp), 'h:mm a')}\n                    </p>\n                  </div>\n                  {getMoodEmoji(entry.mood)}\n                  {entry.sentiment && (\n                    <div className=\"flex items-center space-x-1\">\n                      <Brain className={`h-4 w-4 ${getSentimentColor(entry.sentiment.score)}`} />\n                      <span className={`text-xs font-medium ${getSentimentColor(entry.sentiment.score)}`}>\n                        {entry.sentiment.score > 0 ? '+' : ''}{(entry.sentiment.score * 100).toFixed(0)}%\n                      </span>\n                    </div>\n                  )}\n                </div>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onEditEntry?.(entry.id);\n                  }}\n                  className=\"p-1 text-gray-400 hover:text-gray-600\"\n                >\n                  <PenTool className=\"h-4 w-4\" />\n                </button>\n              </div>\n\n              {/* Entry content */}\n              <p className={`text-gray-700 mb-3 ${\n                selectedEntry === entry.id ? '' : 'line-clamp-3'\n              }`}>\n                {entry.content}\n              </p>\n\n              {/* Tags and emotions */}\n              <div className=\"flex flex-wrap gap-2 mb-2\">\n                {entry.tags?.map(tag => (\n                  <span\n                    key={tag}\n                    className=\"px-2 py-1 bg-purple-100 text-purple-700 text-xs rounded-full\"\n                  >\n                    #{tag}\n                  </span>\n                ))}\n                {entry.emotions?.map(emotion => (\n                  <span\n                    key={emotion}\n                    className=\"px-2 py-1 bg-pink-100 text-pink-700 text-xs rounded-full\"\n                  >\n                    {emotion}\n                  </span>\n                ))}\n              </div>\n\n              {/* Expanded content */}\n              <AnimatePresence>\n                {selectedEntry === entry.id && (\n                  <motion.div\n                    initial={{ height: 0, opacity: 0 }}\n                    animate={{ height: 'auto', opacity: 1 }}\n                    exit={{ height: 0, opacity: 0 }}\n                    className=\"overflow-hidden\"\n                  >\n                    <div className=\"pt-3 border-t border-gray-100 space-y-3\">\n                      {/* Gratitude */}\n                      {entry.gratitude && entry.gratitude.length > 0 && (\n                        <div>\n                          <h5 className=\"text-sm font-medium text-gray-700 mb-1 flex items-center\">\n                            <Heart className=\"h-4 w-4 mr-1 text-red-500\" />\n                            Gratitude\n                          </h5>\n                          <ul className=\"text-sm text-gray-600 space-y-1\">\n                            {entry.gratitude.map((item, idx) => (\n                              <li key={idx} className=\"flex items-start\">\n                                <CheckCircle className=\"h-3 w-3 text-green-500 mr-2 mt-0.5 flex-shrink-0\" />\n                                {item}\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n\n                      {/* Achievements */}\n                      {entry.achievements && entry.achievements.length > 0 && (\n                        <div>\n                          <h5 className=\"text-sm font-medium text-gray-700 mb-1 flex items-center\">\n                            <Award className=\"h-4 w-4 mr-1 text-yellow-500\" />\n                            Achievements\n                          </h5>\n                          <ul className=\"text-sm text-gray-600 space-y-1\">\n                            {entry.achievements.map((item, idx) => (\n                              <li key={idx} className=\"flex items-start\">\n                                <CheckCircle className=\"h-3 w-3 text-green-500 mr-2 mt-0.5 flex-shrink-0\" />\n                                {item}\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n\n                      {/* Sentiment emotions breakdown */}\n                      {entry.sentiment?.emotions && (\n                        <div>\n                          <h5 className=\"text-sm font-medium text-gray-700 mb-2\">Emotional Analysis</h5>\n                          <div className=\"grid grid-cols-3 gap-2\">\n                            {Object.entries(entry.sentiment.emotions).map(([emotion, value]) => (\n                              <div key={emotion} className=\"text-center\">\n                                <div className=\"h-1 bg-gray-200 rounded-full overflow-hidden mb-1\">\n                                  <div\n                                    className=\"h-full bg-gradient-to-r from-purple-400 to-purple-600\"\n                                    style={{ width: `${value * 100}%` }}\n                                  />\n                                </div>\n                                <p className=\"text-xs text-gray-600 capitalize\">{emotion}</p>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Metadata */}\n                      <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                        <span className=\"flex items-center\">\n                          <FileText className=\"h-3 w-3 mr-1\" />\n                          {entry.wordCount} words\n                        </span>\n                        {entry.prompts && entry.prompts.length > 0 && (\n                          <span className=\"flex items-center\">\n                            <MessageSquare className=\"h-3 w-3 mr-1\" />\n                            Prompted\n                          </span>\n                        )}\n                        {entry.editedAt && (\n                          <span className=\"flex items-center\">\n                            <Clock className=\"h-3 w-3 mr-1\" />\n                            Edited {format(new Date(entry.editedAt), 'MMM d')}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </motion.div>\n          ))\n        ) : (\n          <div className=\"text-center py-12\">\n            <BookOpen className=\"h-12 w-12 text-gray-300 mx-auto mb-3\" />\n            <p className=\"text-gray-500\">No journal entries found</p>\n            <p className=\"text-sm text-gray-400 mt-1\">\n              {searchQuery || selectedTags.length > 0 || selectedEmotions.length > 0\n                ? 'Try adjusting your filters'\n                : 'Start writing to track your journey'}\n            </p>\n            <button\n              onClick={onNewEntry}\n              className=\"mt-4 px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors\"\n            >\n              Write Your First Entry\n            </button>\n          </div>\n        )}\n      </div>\n\n      {/* Insights */}\n      {filteredEntries.length >= 5 && (\n        <div className=\"bg-gradient-to-br from-blue-50 to-indigo-50 rounded-xl p-4\">\n          <h4 className=\"font-semibold text-gray-800 mb-3 flex items-center\">\n            <Brain className=\"h-5 w-5 mr-2 text-indigo-600\" />\n            Journal Insights\n          </h4>\n          <div className=\"space-y-2 text-sm text-gray-700\">\n            <div className=\"flex items-center justify-between\">\n              <span>Most frequent emotion:</span>\n              <span className=\"font-medium\">\n                {allEmotions[0] || 'Not enough data'}\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span>Average mood trend:</span>\n              <span className=\"font-medium flex items-center\">\n                {sentimentStats?.avgSentiment && sentimentStats.avgSentiment > 0 ? (\n                  <>\n                    <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                    Improving\n                  </>\n                ) : (\n                  <>\n                    <AlertCircle className=\"h-4 w-4 text-yellow-500 mr-1\" />\n                    Variable\n                  </>\n                )}\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span>Writing consistency:</span>\n              <span className=\"font-medium\">\n                {filteredEntries.length} entries this period\n              </span>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\wellness\\MeditationMindfulness.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'selectedTimeRange'. Either exclude it or remove the dependency array.","line":153,"column":6,"nodeType":"ArrayExpression","endLine":153,"endColumn":98,"suggestions":[{"desc":"Update the dependencies array to be: [meditationSessions, totalMinutes, currentStreak, calculateCurrentStreak]","fix":{"range":[4329,4421],"text":"[meditationSessions, totalMinutes, currentStreak, calculateCurrentStreak]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'selectedTimeRange'. Either exclude it or remove the dependency array.","line":214,"column":6,"nodeType":"ArrayExpression","endLine":214,"endColumn":45,"suggestions":[{"desc":"Update the dependencies array to be: [meditationSessions]","fix":{"range":[6032,6071],"text":"[meditationSessions]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: '_stats'. Either exclude it or remove the dependency array. Outer scope values like '_stats' aren't valid dependencies because mutating them doesn't re-render the component.","line":297,"column":6,"nodeType":"ArrayExpression","endLine":297,"endColumn":53,"suggestions":[{"desc":"Update the dependencies array to be: [meditationSessions, selectedTimeRange]","fix":{"range":[8670,8717],"text":"[meditationSessions, selectedTimeRange]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, _useEffect, useMemo } from 'react';\nimport { motion, _AnimatePresence } from 'framer-motion';\nimport {\n  Brain,\n  Wind,\n  Heart,\n  _Play,\n  _Pause,\n  Clock,\n  _Calendar,\n  Flame,\n  TrendingUp,\n  _Award,\n  _Volume2,\n  Headphones,\n  Sun,\n  Moon,\n  _Cloud,\n  _Zap,\n  Target,\n  ChevronRight,\n  _BarChart,\n  _PieChart\n} from 'lucide-react';\nimport { format, _startOfWeek, _endOfWeek, _eachDayOfInterval, isToday } from 'date-fns';\nimport {\n  _LineChart,\n  _Line,\n  _BarChart as RechartsBarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  Cell,\n  _PieChart as _RechartsPieChart,\n  _Pie\n} from 'recharts';\n\ninterface MeditationSession {\n  id: string;\n  timestamp: Date;\n  duration: number; // in minutes\n  type: 'guided' | 'unguided' | 'breathing' | 'body-scan' | 'loving-kindness' | 'mindfulness';\n  moodBefore?: number;\n  moodAfter?: number;\n  notes?: string;\n  technique?: string;\n  environment?: 'quiet' | 'nature' | 'music' | 'guided-audio';\n}\n\ninterface MeditationMindfulnessProps {\n  sessions?: MeditationSession[];\n  currentStreak?: number;\n  totalMinutes?: number;\n  onStartSession?: (type: string) => void;\n  onViewHistory?: () => void;\n  onSetGoal?: () => void;\n}\n\nexport function MeditationMindfulness({\n  sessions = [],\n  currentStreak = 0,\n  totalMinutes = 0,\n  onStartSession,\n  onViewHistory,\n  onSetGoal\n}: MeditationMindfulnessProps) {\n  const [selectedTimeRange, _setSelectedTimeRange] = useState<'week' | 'month' | 'year'>('week');\n  const [__showRecommendations, _setShowRecommendations] = useState(true);\n  const [__activeSession, _setActiveSession] = useState<string | null>(null);\n\n  // Mock data if no sessions provided\n  const mockSessions: MeditationSession[] = [\n    {\n      id: '1',\n      timestamp: new Date(),\n      duration: 15,\n      type: 'mindfulness',\n      moodBefore: 5,\n      moodAfter: 7,\n      environment: 'quiet'\n    },\n    {\n      id: '2',\n      timestamp: new Date(Date._now() - 86400000),\n      duration: 10,\n      type: 'breathing',\n      moodBefore: 6,\n      moodAfter: 8,\n      environment: 'nature'\n    },\n    {\n      id: '3',\n      timestamp: new Date(Date._now() - 172800000),\n      duration: 20,\n      type: 'guided',\n      moodBefore: 4,\n      moodAfter: 7,\n      environment: 'guided-audio'\n    }\n  ];\n\n  const meditationSessions = sessions.length > 0 ? sessions : mockSessions;\n\n  // Calculate statistics\n  const ___stats   = useMemo(() => {\n    const _now = new Date();\n    const _weekAgo = new Date(_now.getTime() - 7 * 24 * 60 * 60 * 1000);\n    const _monthAgo = new Date(_now.getTime() - 30 * 24 * 60 * 60 * 1000);\n    const _yearAgo = new Date(_now.getTime() - 365 * 24 * 60 * 60 * 1000);\n\n    const getSessionsInRange = (start: Date) => \n      meditationSessions.filter(s => new Date(s.timestamp) >= start);\n\n    const _weekSessions = getSessionsInRange(_weekAgo);\n    const _monthSessions = getSessionsInRange(_monthAgo);\n    const _yearSessions = getSessionsInRange(_yearAgo);\n\n    const calculateStats = (sessions: MeditationSession[]) => ({\n      totalSessions: sessions.length,\n      totalMinutes: sessions.reduce((sum, s) => sum + s.duration, 0),\n      avgDuration: sessions.length > 0 \n        ? Math.round(sessions.reduce((sum, s) => sum + s.duration, 0) / sessions.length)\n        : 0,\n      avgMoodImprovement: sessions.filter(s => s.moodBefore && s.moodAfter).length > 0\n        ? sessions\n            .filter(s => s.moodBefore && s.moodAfter)\n            .reduce((sum, s) => sum + ((s.moodAfter || 0) - (s.moodBefore || 0)), 0) /\n          sessions.filter(s => s.moodBefore && s.moodAfter).length\n        : 0,\n      favoriteType: sessions.length > 0\n        ? Object.entries(\n            sessions.reduce((acc, s) => {\n              acc[s.type] = (acc[s.type] || 0) + 1;\n              return acc;\n            }, {} as Record<string, number>)\n          ).sort((a, b) => b[1] - a[1])[0]?.[0]\n        : null\n    });\n\n    return {\n      week: calculateStats(_weekSessions),\n      month: calculateStats(_monthSessions),\n      year: calculateStats(_yearSessions),\n      allTime: {\n        totalMinutes: totalMinutes || meditationSessions.reduce((sum, s) => sum + s.duration, 0),\n        totalSessions: meditationSessions.length,\n        currentStreak: currentStreak || calculateCurrentStreak()\n      }\n    };\n  }, [meditationSessions, selectedTimeRange, totalMinutes, currentStreak, calculateCurrentStreak]);\n\n  // Calculate current streak\n  function calculateCurrentStreak(): number {\n    let streak = 0;\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    for (let i = 0; i < 365; i++) {\n      const date = new Date(_today);\n      date.setDate(date.getDate() - i);\n      \n      const _hasSession = meditationSessions.some(s => {\n        const sessionDate = new Date(s.timestamp);\n        sessionDate.setHours(0, 0, 0, 0);\n        return sessionDate.getTime() === date.getTime();\n      });\n\n      if (_hasSession) {\n        streak++;\n      } else if (i > 0) {\n        break;\n      }\n    }\n\n    return streak;\n  }\n\n  // Get chart data\n  const chartData = useMemo(() => {\n    const _now = new Date();\n    let days = 7;\n    \n    switch (_selectedTimeRange) {\n      case 'month': days = 30; break;\n      case 'year': days = 365; break;\n    }\n\n    const data = [];\n    for (let i = days - 1; i >= 0; i--) {\n      const date = new Date(_now);\n      date.setDate(date.getDate() - i);\n      date.setHours(0, 0, 0, 0);\n\n      const daySessions = meditationSessions.filter(s => {\n        const sessionDate = new Date(s.timestamp);\n        sessionDate.setHours(0, 0, 0, 0);\n        return sessionDate.getTime() === date.getTime();\n      });\n\n      data.push({\n        date: format(date, days > 30 ? 'MMM' : 'MMM dd'),\n        minutes: daySessions.reduce((sum, s) => sum + s.duration, 0),\n        sessions: daySessions.length,\n        avgMood: daySessions.length > 0\n          ? daySessions.reduce((sum, s) => sum + (s.moodAfter || 0), 0) / daySessions.length\n          : 0\n      });\n    }\n\n    return data;\n  }, [meditationSessions, selectedTimeRange]);\n\n  // Get session type distribution\n  const typeDistribution = useMemo(() => {\n    const _distribution = meditationSessions.reduce((acc, s) => {\n      acc[s.type] = (acc[s.type] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    return Object.entries(_distribution).map(([type, count]) => ({\n      name: type.charAt(0).toUpperCase() + type.slice(1).replace('-', ' '),\n      value: count,\n      percentage: Math.round((count / meditationSessions.length) * 100)\n    }));\n  }, [meditationSessions]);\n\n  // Get recommendations based on patterns\n  const recommendations = useMemo(() => {\n    const currentStats = stats[selectedTimeRange];\n    const recs = [];\n\n    // Time of day recommendation\n    const morningSessions = meditationSessions.filter(s => \n      new Date(s.timestamp).getHours() < 12\n    );\n    const eveningSessions = meditationSessions.filter(s => \n      new Date(s.timestamp).getHours() >= 18\n    );\n\n    if (morningSessions.length > eveningSessions.length) {\n      recs.push({\n        icon: Sun,\n        title: 'Morning Meditator',\n        description: 'You prefer morning sessions. Keep this routine!',\n        color: 'text-yellow-500'\n      });\n    } else if (eveningSessions.length > morningSessions.length) {\n      recs.push({\n        icon: Moon,\n        title: 'Evening Practice',\n        description: 'Evening meditation helps you unwind. Great choice!',\n        color: 'text-indigo-500'\n      });\n    }\n\n    // Mood improvement recommendation\n    if (currentStats.avgMoodImprovement > 1.5) {\n      recs.push({\n        icon: TrendingUp,\n        title: 'Mood Booster',\n        description: `Average mood improvement: +${currentStats.avgMoodImprovement.toFixed(1)} points`,\n        color: 'text-green-500'\n      });\n    }\n\n    // Consistency recommendation\n    if (stats.allTime.currentStreak >= 7) {\n      recs.push({\n        icon: Flame,\n        title: `${stats.allTime.currentStreak} Day Streak!`,\n        description: 'Amazing consistency! Keep it going!',\n        color: 'text-orange-500'\n      });\n    } else if (stats.allTime.currentStreak < 3) {\n      recs.push({\n        icon: Target,\n        title: 'Build Consistency',\n        description: 'Try to meditate 3 days in a row to start a streak',\n        color: 'text-blue-500'\n      });\n    }\n\n    // Duration recommendation\n    if (currentStats.avgDuration < 10) {\n      recs.push({\n        icon: Clock,\n        title: 'Extend Sessions',\n        description: 'Try increasing to 10-15 minutes for deeper benefits',\n        color: 'text-purple-500'\n      });\n    }\n\n    return recs.slice(0, 3);\n  }, [meditationSessions, _stats, selectedTimeRange]);\n\n  // Quick meditation options\n  const quickMeditations = [\n    {\n      id: 'breathing',\n      title: '3-Minute Breathing',\n      description: 'Quick stress relief',\n      icon: Wind,\n      duration: 3,\n      color: 'from-blue-400 to-blue-600'\n    },\n    {\n      id: 'mindfulness',\n      title: '5-Minute Mindfulness',\n      description: 'Present moment awareness',\n      icon: Brain,\n      duration: 5,\n      color: 'from-purple-400 to-purple-600'\n    },\n    {\n      id: 'body-scan',\n      title: '10-Minute Body Scan',\n      description: 'Full body relaxation',\n      icon: Heart,\n      duration: 10,\n      color: 'from-pink-400 to-pink-600'\n    },\n    {\n      id: 'loving-kindness',\n      title: '15-Minute Loving Kindness',\n      description: 'Compassion practice',\n      icon: Heart,\n      duration: 15,\n      color: 'from-red-400 to-red-600'\n    }\n  ];\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Header with streak and stats */}\n      <div className=\"bg-gradient-to-r from-indigo-500 to-purple-600 rounded-xl p-6 text-white\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h3 className=\"text-2xl font-bold mb-1\">Meditation & Mindfulness</h3>\n            <p className=\"text-indigo-100\">Find your inner peace</p>\n          </div>\n          \n          {/* Streak indicator */}\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center mb-1\">\n              <Flame className=\"h-8 w-8 text-orange-400\" />\n              <span className=\"text-3xl font-bold ml-2\">{stats.allTime.currentStreak}</span>\n            </div>\n            <p className=\"text-xs text-indigo-100\">Day Streak</p>\n          </div>\n        </div>\n\n        {/* Quick stats */}\n        <div className=\"grid grid-cols-3 gap-4\">\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold\">{stats.allTime.totalMinutes}</p>\n            <p className=\"text-xs text-indigo-100\">Total Minutes</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold\">{stats.allTime.totalSessions}</p>\n            <p className=\"text-xs text-indigo-100\">Sessions</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold\">\n              {stats[selectedTimeRange].avgMoodImprovement > 0 ? '+' : ''}\n              {stats[selectedTimeRange].avgMoodImprovement.toFixed(1)}\n            </p>\n            <p className=\"text-xs text-indigo-100\">Mood Boost</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick start meditations */}\n      <div>\n        <h4 className=\"font-semibold text-gray-800 mb-3\">Quick Start</h4>\n        <div className=\"grid grid-cols-2 gap-3\">\n          {quickMeditations.map(meditation => {\n            const Icon = meditation.icon;\n            return (\n              <motion.button\n                key={meditation.id}\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n                onClick={() => onStartSession?.(meditation.id)}\n                className={`relative overflow-hidden rounded-xl p-4 text-white bg-gradient-to-br ${meditation.color} hover:shadow-lg transition-all`}\n              >\n                <div className=\"relative z-10\">\n                  <Icon className=\"h-6 w-6 mb-2\" />\n                  <h5 className=\"font-medium text-sm\">{meditation.title}</h5>\n                  <p className=\"text-xs opacity-90 mt-1\">{meditation.description}</p>\n                  <div className=\"flex items-center mt-2\">\n                    <Clock className=\"h-3 w-3 mr-1\" />\n                    <span className=\"text-xs\">{meditation.duration} min</span>\n                  </div>\n                </div>\n                {activeSession === meditation.id && (\n                  <motion.div\n                    className=\"absolute inset-0 bg-white opacity-20\"\n                    animate={{ opacity: [0.2, 0.4, 0.2] }}\n                    transition={{ repeat: Infinity, duration: 2 }}\n                  />\n                )}\n              </motion.button>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Progress chart */}\n      <div className=\"bg-white rounded-xl p-4 border border-gray-200\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h4 className=\"font-semibold text-gray-800\">Progress</h4>\n          <div className=\"flex space-x-1\">\n            {(['week', 'month', 'year'] as const).map(range => (\n              <button\n                key={range}\n                onClick={() => setSelectedTimeRange(_range)}\n                className={`px-3 py-1 rounded-lg text-sm font-medium transition-colors ${\n                  selectedTimeRange === range\n                    ? 'bg-purple-100 text-purple-700'\n                    : 'text-gray-600 hover:bg-gray-100'\n                }`}\n              >\n                {range.charAt(0).toUpperCase() + range.slice(1)}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        <ResponsiveContainer width=\"100%\" height={200}>\n          <RechartsBarChart data={chartData}>\n            <CartesianGrid strokeDasharray=\"3 3\" opacity={0.3} />\n            <XAxis \n              dataKey=\"date\" \n              tick={{ fontSize: 10 }}\n              interval={selectedTimeRange === 'year' ? 30 : 'preserveStartEnd'}\n            />\n            <YAxis tick={{ fontSize: 10 }} />\n            <Tooltip />\n            <Bar dataKey=\"minutes\" fill=\"#8b5cf6\" radius={[4, 4, 0, 0]}>\n              {chartData.map((entry, index) => (\n                <Cell \n                  key={`cell-${index}`} \n                  fill={entry.minutes > 0 ? '#8b5cf6' : '#e5e7eb'} \n                />\n              ))}\n            </Bar>\n          </RechartsBarChart>\n        </ResponsiveContainer>\n\n        {/* Summary stats for selected period */}\n        <div className=\"grid grid-cols-4 gap-3 mt-4\">\n          <div className=\"text-center\">\n            <p className=\"text-xs text-gray-500\">Sessions</p>\n            <p className=\"text-lg font-bold text-gray-800\">\n              {stats[selectedTimeRange].totalSessions}\n            </p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-xs text-gray-500\">Minutes</p>\n            <p className=\"text-lg font-bold text-gray-800\">\n              {stats[selectedTimeRange].totalMinutes}\n            </p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-xs text-gray-500\">Avg Duration</p>\n            <p className=\"text-lg font-bold text-gray-800\">\n              {stats[selectedTimeRange].avgDuration}m\n            </p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-xs text-gray-500\">Favorite</p>\n            <p className=\"text-lg font-bold text-gray-800 truncate\">\n              {stats[selectedTimeRange].favoriteType || 'N/A'}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Session type _distribution */}\n      {typeDistribution.length > 0 && (\n        <div className=\"bg-gradient-to-br from-purple-50 to-indigo-50 rounded-xl p-4\">\n          <h4 className=\"font-semibold text-gray-800 mb-3\">Practice Distribution</h4>\n          <div className=\"space-y-2\">\n            {typeDistribution.map(type => (\n              <div key={type.name} className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-700\">{type.name}</span>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-24 h-2 bg-gray-200 rounded-full overflow-hidden\">\n                    <motion.div\n                      className=\"h-full bg-gradient-to-r from-purple-400 to-purple-600\"\n                      initial={{ width: 0 }}\n                      animate={{ width: `${type.percentage}%` }}\n                      transition={{ duration: 0.5 }}\n                    />\n                  </div>\n                  <span className=\"text-sm font-medium text-gray-700 w-10 text-right\">\n                    {type.percentage}%\n                  </span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Recommendations */}\n      {showRecommendations && recommendations.length > 0 && (\n        <div className=\"space-y-2\">\n          <h4 className=\"font-semibold text-gray-800\">Insights</h4>\n          {recommendations.map((rec, _idx) => {\n            const Icon = rec.icon;\n            return (\n              <motion.div\n                key={_idx}\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ delay: _idx * 0.1 }}\n                className=\"flex items-start space-x-3 p-3 bg-white rounded-lg border border-gray-200\"\n              >\n                <Icon className={`h-5 w-5 mt-0.5 ${rec.color}`} />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-gray-800\">{rec.title}</p>\n                  <p className=\"text-xs text-gray-600 mt-0.5\">{rec.description}</p>\n                </div>\n              </motion.div>\n            );\n          })}\n        </div>\n      )}\n\n      {/* Recent sessions */}\n      <div className=\"bg-white rounded-xl p-4 border border-gray-200\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h4 className=\"font-semibold text-gray-800\">Recent Sessions</h4>\n          <button\n            onClick={onViewHistory}\n            className=\"text-sm text-purple-600 hover:text-purple-700 flex items-center\"\n          >\n            View All\n            <ChevronRight className=\"h-4 w-4 ml-1\" />\n          </button>\n        </div>\n        \n        {meditationSessions.slice(0, 3).map((session, _idx) => (\n          <div\n            key={session.id}\n            className=\"flex items-center justify-between py-2 border-b border-gray-100 last:border-0\"\n          >\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-purple-100 rounded-lg\">\n                {session.type === 'breathing' && <Wind className=\"h-4 w-4 text-purple-600\" />}\n                {session.type === 'mindfulness' && <Brain className=\"h-4 w-4 text-purple-600\" />}\n                {session.type === 'guided' && <Headphones className=\"h-4 w-4 text-purple-600\" />}\n                {session.type === 'body-scan' && <Heart className=\"h-4 w-4 text-purple-600\" />}\n                {session.type === 'loving-kindness' && <Heart className=\"h-4 w-4 text-purple-600\" />}\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-gray-800 capitalize\">\n                  {session.type.replace('-', ' ')}\n                </p>\n                <p className=\"text-xs text-gray-500\">\n                  {format(new Date(session.timestamp), 'MMM d, h:mm a')}\n                </p>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-sm font-medium text-gray-800\">{session.duration} min</p>\n              {session.moodBefore && session.moodAfter && (\n                <p className=\"text-xs text-green-600\">\n                  Mood +{session.moodAfter - session.moodBefore}\n                </p>\n              )}\n            </div>\n          </div>\n        ))}\n\n        {meditationSessions.length === 0 && (\n          <div className=\"text-center py-6 text-gray-500\">\n            <Brain className=\"h-8 w-8 mx-auto mb-2 text-gray-300\" />\n            <p className=\"text-sm\">No sessions yet</p>\n            <p className=\"text-xs mt-1\">Start your mindfulness journey today</p>\n          </div>\n        )}\n      </div>\n\n      {/* Goals section */}\n      <div className=\"bg-gradient-to-br from-yellow-50 to-orange-50 rounded-xl p-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h4 className=\"font-semibold text-gray-800 flex items-center\">\n            <Target className=\"h-5 w-5 mr-2 text-orange-500\" />\n            Meditation Goals\n          </h4>\n          <button\n            onClick={onSetGoal}\n            className=\"text-sm text-orange-600 hover:text-orange-700\"\n          >\n            Set Goal\n          </button>\n        </div>\n        \n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between p-2 bg-white rounded-lg\">\n            <span className=\"text-sm text-gray-700\">Daily Practice</span>\n            <span className=\"text-sm font-medium text-gray-800\">\n              {isToday(new Date(meditationSessions[0]?.timestamp || 0)) ? '✓ Done' : 'Pending'}\n            </span>\n          </div>\n          <div className=\"flex items-center justify-between p-2 bg-white rounded-lg\">\n            <span className=\"text-sm text-gray-700\">Weekly Goal: 70 min</span>\n            <span className=\"text-sm font-medium text-gray-800\">\n              {stats.week.totalMinutes}/70 min\n            </span>\n          </div>\n          <div className=\"flex items-center justify-between p-2 bg-white rounded-lg\">\n            <span className=\"text-sm text-gray-700\">Streak Goal: 30 days</span>\n            <span className=\"text-sm font-medium text-gray-800\">\n              {stats.allTime.currentStreak}/30 days\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\wellness\\MoodAnalytics.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'timeRange'. Either exclude it or remove the dependency array.","line":88,"column":6,"nodeType":"ArrayExpression","endLine":88,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2235,2246],"text":"[]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2646,2649],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2646,2649],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, _useEffect, useMemo } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  TrendingUp,\n  TrendingDown,\n  _Calendar,\n  Brain,\n  _AlertCircle,\n  Download,\n  Filter,\n  _ChevronLeft,\n  _ChevronRight,\n  Activity,\n  Cloud,\n  Moon,\n  _Sun,\n  Users,\n  Heart,\n  _Target,\n  BarChart3,\n  LineChart,\n  PieChart\n} from 'lucide-react';\nimport {\n  LineChart as RechartsLineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  RadarChart,\n  Radar,\n  PolarGrid,\n  PolarAngleAxis,\n  PolarRadiusAxis,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  _Cell,\n  ReferenceLine,\n  _ReferenceArea\n} from 'recharts';\nimport { useWellnessStore } from '../../../../stores/wellnessStore';\nimport { format, _startOfWeek, _endOfWeek, _eachDayOfInterval, subDays, addDays } from 'date-fns';\n\ninterface MoodAnalyticsProps {\n  timeRange?: 'day' | 'week' | 'month' | 'year';\n  onExport?: (_data: unknown) => void;\n  onTriggerIdentified?: (trigger: string) => void;\n}\n\ntype ViewMode = 'overview' | 'patterns' | 'correlations' | 'predictions';\ntype ChartType = 'line' | 'area' | 'bar' | 'radar';\n\nexport function MoodAnalytics({ timeRange = 'week', onExport, _onTriggerIdentified }: MoodAnalyticsProps) {\n  const { moodEntries, moodPatterns, _analyzeMoodPatterns, wellnessInsights } = useWellnessStore();\n  const [viewMode, _setViewMode] = useState<ViewMode>('overview');\n  const [chartType, _setChartType] = useState<ChartType>('line');\n  const [_selectedDate, _setSelectedDate] = useState(new Date());\n  const [showFilters, _setShowFilters] = useState(false);\n  const [selectedFactors, _setSelectedFactors] = useState<string[]>(['mood', 'stress', 'energy']);\n\n  // Calculate date range based on selected time range\n  const dateRange = useMemo(() => {\n    const end = new Date();\n    let start = new Date();\n    \n    switch (_timeRange) {\n      case 'day':\n        start = new Date(end);\n        start.setHours(0, 0, 0, 0);\n        break;\n      case 'week':\n        start = subDays(end, 7);\n        break;\n      case 'month':\n        start = subDays(end, 30);\n        break;\n      case 'year':\n        start = subDays(end, 365);\n        break;\n    }\n    \n    return { start, end };\n  }, [timeRange]);\n\n  // Filter mood entries based on date range\n  const filteredEntries = useMemo(() => {\n    return moodEntries.filter(entry => {\n      const entryDate = new Date(entry.timestamp);\n      return entryDate >= dateRange.start && entryDate <= dateRange.end;\n    });\n  }, [moodEntries, dateRange]);\n\n  // Process data for charts\n  const chartData = useMemo(() => {\n    const dataByDay = new Map<string, any>();\n    \n    filteredEntries.forEach(entry => {\n      const date = format(new Date(entry.timestamp), 'yyyy-MM-dd');\n      \n      if (!dataByDay.has(_date)) {\n        dataByDay.set(date, {\n          date,\n          entries: [],\n          avgMood: 0,\n          avgStress: 0,\n          avgEnergy: 0,\n          avgAnxiety: 0,\n          sleep: 0,\n          exercise: false,\n          socialInteraction: 0\n        });\n      }\n      \n      const dayData = dataByDay.get(_date);\n      dayData.entries.push(_entry);\n    });\n\n    // Calculate averages for each day\n    const processedData = Array.from(dataByDay.values()).map(day => {\n      const entries = day.entries;\n      const count = entries.length;\n      \n      return {\n        ...day,\n        date: format(new Date(day.date), 'MMM dd'),\n        avgMood: entries.reduce((sum: number, e: unknown) => sum + e.moodScore, 0) / count,\n        avgStress: entries.reduce((sum: number, e: unknown) => sum + (e.stressLevel || 0), 0) / count,\n        avgEnergy: entries.reduce((sum: number, e: unknown) => sum + (e.energyLevel || 0), 0) / count,\n        avgAnxiety: entries.reduce((sum: number, e: unknown) => sum + (e.anxietyLevel || 0), 0) / count,\n        sleep: Math.max(...entries.map((e: unknown) => e.sleep || 0)),\n        exercise: entries.some((e: unknown) => e.exercise),\n        socialInteraction: Math.max(...entries.map((e: unknown) => e.socialInteraction || 0))\n      };\n    });\n\n    return processedData.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n  }, [filteredEntries]);\n\n  // Correlation analysis\n  const correlations = useMemo(() => {\n    const factors = ['sleep', 'exercise', 'socialInteraction', 'weather'];\n    const correlationData: unknown[] = [];\n\n    factors.forEach(factor => {\n      const withFactor = filteredEntries.filter((e: unknown) => {\n        switch (factor) {\n          case 'sleep': return e.sleep && e.sleep >= 7;\n          case 'exercise': return e.exercise === true;\n          case 'socialInteraction': return e.socialInteraction && e.socialInteraction >= 3;\n          case 'weather': return e.weather === 'sunny';\n          default: return false;\n        }\n      });\n\n      const withoutFactor = filteredEntries.filter((e: unknown) => {\n        switch (factor) {\n          case 'sleep': return !e.sleep || e.sleep < 7;\n          case 'exercise': return e.exercise === false;\n          case 'socialInteraction': return !e.socialInteraction || e.socialInteraction < 3;\n          case 'weather': return e.weather !== 'sunny';\n          default: return false;\n        }\n      });\n\n      if (withFactor.length > 0 && withoutFactor.length > 0) {\n        const avgWithFactor = withFactor.reduce((sum, e) => sum + e.moodScore, 0) / withFactor.length;\n        const avgWithoutFactor = withoutFactor.reduce((sum, e) => sum + e.moodScore, 0) / withoutFactor.length;\n        const impact = ((avgWithFactor - avgWithoutFactor) / avgWithoutFactor) * 100;\n\n        correlationData.push({\n          factor: factor.charAt(0).toUpperCase() + factor.slice(1).replace(/([A-Z])/g, ' $1'),\n          impact: Math.round(_impact),\n          positive: impact > 0,\n          avgWith: avgWithFactor.toFixed(1),\n          avgWithout: avgWithoutFactor.toFixed(1),\n          samples: withFactor.length + withoutFactor.length\n        });\n      }\n    });\n\n    return correlationData.sort((a, b) => Math.abs(b.impact) - Math.abs(a.impact));\n  }, [filteredEntries]);\n\n  // Trigger analysis\n  const triggerAnalysis = useMemo(() => {\n    const triggerMap = new Map<string, { count: number; avgMood: number; entries: unknown[] }>();\n\n    filteredEntries.forEach(entry => {\n      entry.triggers.forEach(trigger => {\n        if (!triggerMap.has(_trigger)) {\n          triggerMap.set(trigger, { count: 0, avgMood: 0, entries: [] });\n        }\n        const data = triggerMap.get(_trigger)!;\n        data.count++;\n        data.entries.push(_entry);\n      });\n    });\n\n    const triggerData = Array.from(triggerMap.entries()).map(([trigger, _data]) => ({\n      trigger,\n      count: _data.count,\n      avgMood: _data.entries.reduce((sum, e) => sum + e.moodScore, 0) / _data.entries.length,\n      impact: 'negative' as const,\n      percentage: (_data.count / filteredEntries.length) * 100\n    }));\n\n    return triggerData.sort((a, b) => b.count - a.count).slice(0, 5);\n  }, [filteredEntries]);\n\n  // Mood predictions based on patterns\n  const predictions = useMemo(() => {\n    if (chartData.length < 7) return [];\n\n    const lastWeekData = chartData.slice(-7);\n    const avgMood = lastWeekData.reduce((sum, d) => sum + d.avgMood, 0) / lastWeekData.length;\n    const trend = lastWeekData[lastWeekData.length - 1].avgMood - lastWeekData[0].avgMood;\n\n    const nextWeekPredictions = [];\n    for (let i = 1; i <= 7; i++) {\n      const date = addDays(new Date(), i);\n      const dayOfWeek = date.getDay();\n      \n      // Simple prediction model based on day of week patterns and trend\n      const weekdayModifier = [0, -0.5, -0.3, 0, 0.2, 0.8, 0.5][dayOfWeek] || 0; // Sunday = 0\n      const trendModifier = trend * 0.1 * i;\n      const predictedMood = Math.max(1, Math.min(10, avgMood + weekdayModifier + trendModifier));\n\n      nextWeekPredictions.push({\n        date: format(date, 'MMM dd'),\n        predictedMood: predictedMood.toFixed(1),\n        confidence: Math.max(0.5, 1 - (i * 0.1)) // Confidence decreases with distance\n      });\n    }\n\n    return nextWeekPredictions;\n  }, [chartData]);\n\n  // Render different chart types\n  const renderChart = () => {\n    const _colors = {\n      mood: '#8b5cf6',\n      stress: '#ef4444',\n      energy: '#3b82f6',\n      anxiety: '#f59e0b',\n      sleep: '#10b981',\n      social: '#ec4899'\n    };\n\n    switch (_chartType) {\n      case 'area':\n        return (\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <AreaChart data={chartData}>\n              <defs>\n                <linearGradient id=\"moodGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"#8b5cf6\" stopOpacity={0.8}/>\n                  <stop offset=\"95%\" stopColor=\"#8b5cf6\" stopOpacity={0.1}/>\n                </linearGradient>\n                <linearGradient id=\"stressGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"#ef4444\" stopOpacity={0.8}/>\n                  <stop offset=\"95%\" stopColor=\"#ef4444\" stopOpacity={0.1}/>\n                </linearGradient>\n              </defs>\n              <CartesianGrid strokeDasharray=\"3 3\" opacity={0.3} />\n              <XAxis dataKey=\"date\" />\n              <YAxis domain={[0, 10]} />\n              <Tooltip />\n              <Legend />\n              {selectedFactors.includes('mood') && (\n                <Area type=\"monotone\" dataKey=\"avgMood\" stroke=\"#8b5cf6\" fillOpacity={1} fill=\"url(#moodGradient)\" name=\"Mood\" />\n              )}\n              {selectedFactors.includes('stress') && (\n                <Area type=\"monotone\" dataKey=\"avgStress\" stroke=\"#ef4444\" fillOpacity={1} fill=\"url(#stressGradient)\" name=\"Stress\" />\n              )}\n              {selectedFactors.includes('energy') && (\n                <Area type=\"monotone\" dataKey=\"avgEnergy\" stroke=\"#3b82f6\" fillOpacity={0.3} fill=\"#3b82f6\" name=\"Energy\" />\n              )}\n            </AreaChart>\n          </ResponsiveContainer>\n        );\n\n      case 'bar':\n        return (\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={chartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" opacity={0.3} />\n              <XAxis dataKey=\"date\" />\n              <YAxis domain={[0, 10]} />\n              <Tooltip />\n              <Legend />\n              {selectedFactors.includes('mood') && (\n                <Bar dataKey=\"avgMood\" fill=\"#8b5cf6\" name=\"Mood\" radius={[4, 4, 0, 0]} />\n              )}\n              {selectedFactors.includes('stress') && (\n                <Bar dataKey=\"avgStress\" fill=\"#ef4444\" name=\"Stress\" radius={[4, 4, 0, 0]} />\n              )}\n              {selectedFactors.includes('energy') && (\n                <Bar dataKey=\"avgEnergy\" fill=\"#3b82f6\" name=\"Energy\" radius={[4, 4, 0, 0]} />\n              )}\n            </BarChart>\n          </ResponsiveContainer>\n        );\n\n      case 'radar': {\n        const radarData = [\n          { factor: 'Mood', value: chartData.reduce((sum, d) => sum + d.avgMood, 0) / chartData.length },\n          { factor: 'Energy', value: chartData.reduce((sum, d) => sum + d.avgEnergy, 0) / chartData.length },\n          { factor: 'Sleep', value: chartData.reduce((sum, d) => sum + d.sleep, 0) / chartData.length },\n          { factor: 'Social', value: chartData.reduce((sum, d) => sum + d.socialInteraction, 0) / chartData.length },\n          { factor: 'Low Stress', value: 10 - (chartData.reduce((sum, d) => sum + d.avgStress, 0) / chartData.length) },\n          { factor: 'Low Anxiety', value: 10 - (chartData.reduce((sum, d) => sum + d.avgAnxiety, 0) / chartData.length) }\n        ];\n\n        return (\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <RadarChart data={radarData}>\n              <PolarGrid strokeDasharray=\"3 3\" />\n              <PolarAngleAxis dataKey=\"factor\" />\n              <PolarRadiusAxis angle={90} domain={[0, 10]} />\n              <Radar name=\"Wellness Factors\" dataKey=\"value\" stroke=\"#8b5cf6\" fill=\"#8b5cf6\" fillOpacity={0.6} />\n              <Tooltip />\n            </RadarChart>\n          </ResponsiveContainer>\n        );\n      }\n\n      default: // line chart\n        return (\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <RechartsLineChart data={chartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" opacity={0.3} />\n              <XAxis dataKey=\"date\" />\n              <YAxis domain={[0, 10]} />\n              <Tooltip />\n              <Legend />\n              <ReferenceLine y={5} stroke=\"#9ca3af\" strokeDasharray=\"3 3\" />\n              <ReferenceLine y={7} stroke=\"#10b981\" strokeDasharray=\"3 3\" />\n              {selectedFactors.includes('mood') && (\n                <Line type=\"monotone\" dataKey=\"avgMood\" stroke=\"#8b5cf6\" strokeWidth={2} dot={{ r: 4 }} name=\"Mood\" />\n              )}\n              {selectedFactors.includes('stress') && (\n                <Line type=\"monotone\" dataKey=\"avgStress\" stroke=\"#ef4444\" strokeWidth={2} dot={{ r: 4 }} name=\"Stress\" />\n              )}\n              {selectedFactors.includes('energy') && (\n                <Line type=\"monotone\" dataKey=\"avgEnergy\" stroke=\"#3b82f6\" strokeWidth={2} dot={{ r: 4 }} name=\"Energy\" />\n              )}\n              {selectedFactors.includes('anxiety') && (\n                <Line type=\"monotone\" dataKey=\"avgAnxiety\" stroke=\"#f59e0b\" strokeWidth={2} dot={{ r: 4 }} name=\"Anxiety\" />\n              )}\n            </RechartsLineChart>\n          </ResponsiveContainer>\n        );\n    }\n  };\n\n  // Export data for healthcare providers\n  const handleExport = () => {\n    const _exportData = {\n      dateRange,\n      entries: filteredEntries,\n      patterns: moodPatterns,\n      correlations,\n      triggers: triggerAnalysis,\n      summary: {\n        avgMood: filteredEntries.reduce((sum, e) => sum + e.moodScore, 0) / filteredEntries.length,\n        totalEntries: filteredEntries.length,\n        insights: wellnessInsights.filter(i => i.category === 'mood')\n      }\n    };\n\n    if (_onExport) {\n      onExport(_exportData);\n    } else {\n      // Create CSV or PDF export\n      const csv = convertToCSV(_exportData);\n      downloadCSV(csv, `mood-report-${format(new Date(), 'yyyy-MM-dd')}.csv`);\n    }\n  };\n\n  const convertToCSV = (_data: unknown) => {\n    const headers = ['Date', 'Mood', 'Stress', 'Energy', 'Anxiety', 'Sleep', 'Exercise', 'Social', 'Triggers', 'Notes'];\n    const rows = filteredEntries.map(entry => [\n      format(new Date(entry.timestamp), 'yyyy-MM-dd HH:mm'),\n      entry.moodScore,\n      entry.stressLevel || '',\n      entry.energyLevel || '',\n      entry.anxietyLevel || '',\n      entry.sleep || '',\n      entry.exercise ? 'Yes' : 'No',\n      entry.socialInteraction || '',\n      entry.triggers.join('; '),\n      entry.notes || ''\n    ]);\n\n    return [headers, ...rows].map(row => row.join(',')).join('\\n');\n  };\n\n  const downloadCSV = (csv: string, filename: string) => {\n    const _blob = new Blob([csv], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(_blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    a.click();\n    window.URL.revokeObjectURL(_url);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Header with controls */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div className=\"flex items-center space-x-2\">\n          <button\n            onClick={() => setViewMode('overview')}\n            className={`px-3 py-1 rounded-lg text-sm font-medium transition-_colors ${\n              viewMode === 'overview' \n                ? 'bg-purple-100 text-purple-700' \n                : 'text-gray-600 hover:bg-gray-100'\n            }`}\n          >\n            Overview\n          </button>\n          <button\n            onClick={() => setViewMode('patterns')}\n            className={`px-3 py-1 rounded-lg text-sm font-medium transition-_colors ${\n              viewMode === 'patterns' \n                ? 'bg-purple-100 text-purple-700' \n                : 'text-gray-600 hover:bg-gray-100'\n            }`}\n          >\n            Patterns\n          </button>\n          <button\n            onClick={() => setViewMode('correlations')}\n            className={`px-3 py-1 rounded-lg text-sm font-medium transition-_colors ${\n              viewMode === 'correlations' \n                ? 'bg-purple-100 text-purple-700' \n                : 'text-gray-600 hover:bg-gray-100'\n            }`}\n          >\n            Correlations\n          </button>\n          <button\n            onClick={() => setViewMode('predictions')}\n            className={`px-3 py-1 rounded-lg text-sm font-medium transition-_colors ${\n              viewMode === 'predictions' \n                ? 'bg-purple-100 text-purple-700' \n                : 'text-gray-600 hover:bg-gray-100'\n            }`}\n          >\n            Predictions\n          </button>\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          {/* Chart type selector */}\n          <div className=\"flex items-center space-x-1 bg-gray-100 rounded-lg p-1\">\n            <button\n              onClick={() => setChartType('line')}\n              className={`p-1 rounded ${chartType === 'line' ? 'bg-white shadow-sm' : ''}`}\n              aria-label=\"Line chart\"\n            >\n              <LineChart className=\"h-4 w-4\" />\n            </button>\n            <button\n              onClick={() => setChartType('area')}\n              className={`p-1 rounded ${chartType === 'area' ? 'bg-white shadow-sm' : ''}`}\n              aria-label=\"Area chart\"\n            >\n              <BarChart3 className=\"h-4 w-4\" />\n            </button>\n            <button\n              onClick={() => setChartType('bar')}\n              className={`p-1 rounded ${chartType === 'bar' ? 'bg-white shadow-sm' : ''}`}\n              aria-label=\"Bar chart\"\n            >\n              <BarChart3 className=\"h-4 w-4\" />\n            </button>\n            <button\n              onClick={() => setChartType('radar')}\n              className={`p-1 rounded ${chartType === 'radar' ? 'bg-white shadow-sm' : ''}`}\n              aria-label=\"Radar chart\"\n            >\n              <PieChart className=\"h-4 w-4\" />\n            </button>\n          </div>\n\n          <button\n            onClick={() => setShowFilters(!showFilters)}\n            className=\"p-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors\"\n            aria-label=\"Toggle filters\"\n          >\n            <Filter className=\"h-4 w-4\" />\n          </button>\n\n          <button\n            onClick={handleExport}\n            className=\"p-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors\"\n            aria-label=\"Export data\"\n          >\n            <Download className=\"h-4 w-4\" />\n          </button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <AnimatePresence>\n        {showFilters && (\n          <motion.div\n            initial={{ height: 0, opacity: 0 }}\n            animate={{ height: 'auto', opacity: 1 }}\n            exit={{ height: 0, opacity: 0 }}\n            className=\"overflow-hidden\"\n          >\n            <div className=\"p-4 bg-gray-50 rounded-lg space-y-3\">\n              <div>\n                <label htmlFor=\"input_j8q7wvae1\" className=\"text-sm font-medium text-gray-700 mb-2 block\">Factors to Display</label>\n                <div className=\"flex flex-wrap gap-2\">\n                  {['mood', 'stress', 'energy', 'anxiety', 'sleep', 'social'].map(factor => (\n                    <button\n                      key={factor}\n                      onClick={() => {\n                        setSelectedFactors(prev => \n                          prev.includes(factor) \n                            ? prev.filter(f => f !== factor)\n                            : [...prev, factor]\n                        );\n                      }}\n                      className={`px-3 py-1 rounded-full text-sm font-medium transition-_colors ${\n                        selectedFactors.includes(factor)\n                          ? 'bg-purple-500 text-white'\n                          : 'bg-white text-gray-700 border border-gray-300'\n                      }`}\n                    >\n                      {factor.charAt(0).toUpperCase() + factor.slice(1)}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Main content based on view mode */}\n      <div className=\"bg-white rounded-lg p-4\">\n        {viewMode === 'overview' && (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-gray-800\">Mood Trends</h3>\n            {renderChart()}\n            \n            {/* Quick stats */}\n            <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-3 mt-4\">\n              <div className=\"p-3 bg-purple-50 rounded-lg\">\n                <p className=\"text-xs text-purple-600 mb-1\">Avg Mood</p>\n                <p className=\"text-xl font-bold text-purple-700\">\n                  {(filteredEntries.reduce((sum, e) => sum + e.moodScore, 0) / filteredEntries.length || 0).toFixed(1)}\n                </p>\n              </div>\n              <div className=\"p-3 bg-blue-50 rounded-lg\">\n                <p className=\"text-xs text-blue-600 mb-1\">Entries</p>\n                <p className=\"text-xl font-bold text-blue-700\">{filteredEntries.length}</p>\n              </div>\n              <div className=\"p-3 bg-green-50 rounded-lg\">\n                <p className=\"text-xs text-green-600 mb-1\">Best Day</p>\n                <p className=\"text-xl font-bold text-green-700\">\n                  {chartData.length > 0 ? Math.max(...chartData.map(d => d.avgMood)).toFixed(1) : 'N/A'}\n                </p>\n              </div>\n              <div className=\"p-3 bg-red-50 rounded-lg\">\n                <p className=\"text-xs text-red-600 mb-1\">Worst Day</p>\n                <p className=\"text-xl font-bold text-red-700\">\n                  {chartData.length > 0 ? Math.min(...chartData.map(d => d.avgMood)).toFixed(1) : 'N/A'}\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {viewMode === 'patterns' && (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-gray-800\">Mood Patterns</h3>\n            \n            {moodPatterns.length > 0 ? (\n              <div className=\"space-y-3\">\n                {moodPatterns.map((pattern, idx) => (\n                  <motion.div\n                    key={idx}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: idx * 0.1 }}\n                    className={`p-4 rounded-lg border ${\n                      pattern.impact === 'positive' \n                        ? 'bg-green-50 border-green-200' \n                        : pattern.impact === 'negative'\n                        ? 'bg-red-50 border-red-200'\n                        : 'bg-gray-50 border-gray-200'\n                    }`}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-gray-800 flex items-center\">\n                          {pattern.impact === 'positive' ? (\n                            <TrendingUp className=\"h-4 w-4 text-green-500 mr-2\" />\n                          ) : pattern.impact === 'negative' ? (\n                            <TrendingDown className=\"h-4 w-4 text-red-500 mr-2\" />\n                          ) : (\n                            <Activity className=\"h-4 w-4 text-gray-500 mr-2\" />\n                          )}\n                          {pattern.pattern}\n                        </h4>\n                        <p className=\"text-sm text-gray-600 mt-1\">{pattern.recommendation}</p>\n                        <div className=\"flex items-center space-x-4 mt-2\">\n                          <span className=\"text-xs text-gray-500\">\n                            Frequency: {pattern.frequency} occurrences\n                          </span>\n                          <span className=\"text-xs text-gray-500\">\n                            Confidence: {(pattern.confidence * 100).toFixed(0)}%\n                          </span>\n                        </div>\n                      </div>\n                      <Brain className=\"h-5 w-5 text-gray-400\" />\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-gray-500\">\n                <Brain className=\"h-12 w-12 mx-auto mb-3 text-gray-300\" />\n                <p>Not enough data to detect patterns yet.</p>\n                <p className=\"text-sm mt-1\">Keep tracking your mood to see patterns emerge!</p>\n              </div>\n            )}\n          </div>\n        )}\n\n        {viewMode === 'correlations' && (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-gray-800\">Mood Correlations</h3>\n            \n            {correlations.length > 0 ? (\n              <div className=\"space-y-3\">\n                {correlations.map((correlation, idx) => (\n                  <motion.div\n                    key={idx}\n                    initial={{ opacity: 0, scale: 0.95 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    transition={{ delay: idx * 0.1 }}\n                    className=\"p-4 bg-white border border-gray-200 rounded-lg\"\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center space-x-3\">\n                        {correlation.factor === 'Sleep' && <Moon className=\"h-5 w-5 text-indigo-500\" />}\n                        {correlation.factor === 'Exercise' && <Activity className=\"h-5 w-5 text-green-500\" />}\n                        {correlation.factor === 'Social Interaction' && <Users className=\"h-5 w-5 text-blue-500\" />}\n                        {correlation.factor === 'Weather' && <Cloud className=\"h-5 w-5 text-yellow-500\" />}\n                        <span className=\"font-medium text-gray-800\">{correlation.factor}</span>\n                      </div>\n                      <span className={`text-lg font-bold ${\n                        correlation.positive ? 'text-green-600' : 'text-red-600'\n                      }`}>\n                        {correlation.positive ? '+' : ''}{correlation.impact}%\n                      </span>\n                    </div>\n                    <div className=\"flex items-center justify-between text-sm text-gray-600\">\n                      <span>With: {correlation.avgWith}</span>\n                      <span>Without: {correlation.avgWithout}</span>\n                      <span className=\"text-xs text-gray-400\">n={correlation.samples}</span>\n                    </div>\n                    <div className=\"mt-2 h-2 bg-gray-200 rounded-full overflow-hidden\">\n                      <motion.div\n                        className={`h-full ${\n                          correlation.positive ? 'bg-green-500' : 'bg-red-500'\n                        }`}\n                        initial={{ width: 0 }}\n                        animate={{ width: `${Math.abs(correlation.impact)}%` }}\n                        transition={{ duration: 0.5, delay: idx * 0.1 + 0.2 }}\n                      />\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-gray-500\">\n                <Heart className=\"h-12 w-12 mx-auto mb-3 text-gray-300\" />\n                <p>Not enough data to show correlations yet.</p>\n              </div>\n            )}\n\n            {/* Trigger Analysis */}\n            {triggerAnalysis.length > 0 && (\n              <div className=\"mt-6\">\n                <h4 className=\"text-md font-semibold text-gray-800 mb-3\">Common Triggers</h4>\n                <div className=\"space-y-2\">\n                  {triggerAnalysis.map((trigger, idx) => (\n                    <div key={idx} className=\"flex items-center justify-between p-2 bg-yellow-50 rounded-lg\">\n                      <span className=\"text-sm font-medium text-yellow-800\">{trigger.name}</span>\n                      <span className=\"text-xs text-yellow-600\">{trigger.frequency} occurrences</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {viewMode === 'predictions' && (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-gray-800\">Mood Predictions</h3>\n            \n            {predictions.length > 0 ? (\n              <div className=\"space-y-3\">\n                <p className=\"text-sm text-gray-600\">Based on your patterns, here&apos;s what we expect:</p>\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n                  {predictions.map((prediction, idx) => (\n                    <div key={idx} className=\"p-3 bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm font-medium text-gray-700\">{prediction.date}</span>\n                        <span className={`text-lg font-bold ${\n                          prediction.predictedMood >= 7 ? 'text-green-600' : \n                          prediction.predictedMood >= 4 ? 'text-yellow-600' : \n                          'text-red-600'\n                        }`}>\n                          {prediction.predictedMood.toFixed(1)}\n                        </span>\n                      </div>\n                      <div className=\"mt-2 text-xs text-gray-600\">\n                        Confidence: {(prediction.confidence * 100).toFixed(0)}%\n                      </div>\n                      {prediction.factors && (\n                        <div className=\"mt-2 text-xs text-gray-500\">\n                          Key factors: {prediction.factors.join(', ')}\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-gray-500\">\n                <TrendingUp className=\"h-12 w-12 mx-auto mb-3 text-gray-300\" />\n                <p>Not enough data to make predictions yet.</p>\n                <p className=\"text-sm mt-2\">Keep tracking your mood to unlock insights!</p>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\wellness\\WellnessMetricsDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'calculateTrend'. Either include it or remove the dependency array.","line":193,"column":6,"nodeType":"ArrayExpression","endLine":193,"endColumn":53,"suggestions":[{"desc":"Update the dependencies array to be: [wellnessMetrics, moodEntries, calculateTrend, calculateStreak]","fix":{"range":[5611,5658],"text":"[wellnessMetrics, moodEntries, calculateTrend, calculateStreak]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useMemo } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Target,\n  TrendingUp,\n  _Award,\n  Activity,\n  Droplets,\n  Moon,\n  Users,\n  Heart,\n  Brain,\n  Zap,\n  _Calendar,\n  ChevronRight,\n  Plus,\n  Edit2,\n  CheckCircle,\n  XCircle,\n  AlertTriangle,\n  Info,\n  Sparkles,\n  Flame\n} from 'lucide-react';\nimport {\n  _CircularProgressbar,\n  CircularProgressbarWithChildren,\n  buildStyles\n} from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport { useWellnessStore } from '../../../../stores/wellnessStore';\nimport { format, startOfWeek, endOfWeek, eachDayOfInterval, isToday } from 'date-fns';\n\ninterface WellnessMetricsDashboardProps {\n  onSetGoal?: (category: string) => void;\n  onViewDetails?: (metric: string) => void;\n}\n\ninterface MetricCard {\n  id: string;\n  category: 'physical' | 'mental' | 'emotional' | 'social' | 'spiritual';\n  title: string;\n  icon: React.ElementType;\n  value: number;\n  target: number;\n  unit: string;\n  color: string;\n  gradient: string;\n  trend: number; // percentage change\n  streak?: number;\n  lastUpdated?: Date;\n}\n\ntype Priority = 'critical' | 'high' | 'medium' | 'low';\n\ninterface Recommendation {\n  metric: string;\n  message: string;\n  priority: Priority;\n  action: () => void;\n}\n\nexport function WellnessMetricsDashboard({ onSetGoal, onViewDetails }: WellnessMetricsDashboardProps) {\n  const { wellnessMetrics, wellnessGoals, moodEntries, weeklyScore, monthlyScore, _calculateWellnessScores } = useWellnessStore();\n  \n  const [selectedCategory, _setSelectedCategory] = useState<string | null>(null);\n  const [viewMode, _setViewMode] = useState<'grid' | 'list'>('grid');\n  const [_showGoalModal, _setShowGoalModal] = useState(false);\n  const [_editingGoal, _setEditingGoal] = useState<string | null>(null);\n\n  // Calculate today&apos;s metrics\n  const todayMetrics = useMemo(() => {\n    const _today = new Date();\n    _today.setHours(0, 0, 0, 0);\n    \n    const todayData = wellnessMetrics.find(m => {\n      const metricDate = new Date(m.date);\n      metricDate.setHours(0, 0, 0, 0);\n      return metricDate.getTime() === _today.getTime();\n    });\n\n    const todayMoodEntries = moodEntries.filter(e => {\n      const entryDate = new Date(e.timestamp);\n      entryDate.setHours(0, 0, 0, 0);\n      return entryDate.getTime() === _today.getTime();\n    });\n\n    // Calculate metrics with fallbacks\n    const metrics: MetricCard[] = [\n      {\n        id: 'sleep',\n        category: 'physical',\n        title: 'Sleep',\n        icon: Moon,\n        value: todayData?.sleepHours || todayMoodEntries[0]?.sleep || 0,\n        target: 8,\n        unit: 'hours',\n        color: '#6366f1',\n        gradient: 'from-indigo-400 to-indigo-600',\n        trend: calculateTrend('sleep', todayData?.sleepHours || 0),\n        streak: calculateStreak('sleep')\n      },\n      {\n        id: 'exercise',\n        category: 'physical',\n        title: 'Exercise',\n        icon: Activity,\n        value: todayData?.exerciseMinutes || 0,\n        target: 30,\n        unit: 'minutes',\n        color: '#10b981',\n        gradient: 'from-green-400 to-green-600',\n        trend: calculateTrend('exercise', todayData?.exerciseMinutes || 0),\n        streak: calculateStreak('exercise')\n      },\n      {\n        id: 'water',\n        category: 'physical',\n        title: 'Hydration',\n        icon: Droplets,\n        value: todayData?.waterIntake || 0,\n        target: 8,\n        unit: 'glasses',\n        color: '#3b82f6',\n        gradient: 'from-blue-400 to-blue-600',\n        trend: calculateTrend('water', todayData?.waterIntake || 0)\n      },\n      {\n        id: 'meditation',\n        category: 'mental',\n        title: 'Meditation',\n        icon: Brain,\n        value: todayData?.meditationMinutes || 0,\n        target: 15,\n        unit: 'minutes',\n        color: '#8b5cf6',\n        gradient: 'from-purple-400 to-purple-600',\n        trend: calculateTrend('meditation', todayData?.meditationMinutes || 0),\n        streak: calculateStreak('meditation')\n      },\n      {\n        id: 'social',\n        category: 'social',\n        title: 'Social Time',\n        icon: Users,\n        value: todayData?.socialInteractions || todayMoodEntries[0]?.socialInteraction || 0,\n        target: 3,\n        unit: 'interactions',\n        color: '#ec4899',\n        gradient: 'from-pink-400 to-pink-600',\n        trend: calculateTrend('social', todayData?.socialInteractions || 0)\n      },\n      {\n        id: 'outdoor',\n        category: 'physical',\n        title: 'Outdoor Time',\n        icon: Heart,\n        value: todayData?.outdoorTime || 0,\n        target: 60,\n        unit: 'minutes',\n        color: '#f59e0b',\n        gradient: 'from-amber-400 to-amber-600',\n        trend: calculateTrend('outdoor', todayData?.outdoorTime || 0)\n      },\n      {\n        id: 'journal',\n        category: 'emotional',\n        title: 'Journal Entries',\n        icon: Edit2,\n        value: todayData?.journalEntries || 0,\n        target: 1,\n        unit: 'entries',\n        color: '#14b8a6',\n        gradient: 'from-teal-400 to-teal-600',\n        trend: calculateTrend('journal', todayData?.journalEntries || 0),\n        streak: calculateStreak('journaling')\n      },\n      {\n        id: 'nutrition',\n        category: 'physical',\n        title: 'Nutrition Score',\n        icon: Zap,\n        value: todayData?.nutritionScore || 0,\n        target: 10,\n        unit: 'score',\n        color: '#84cc16',\n        gradient: 'from-lime-400 to-lime-600',\n        trend: calculateTrend('nutrition', todayData?.nutritionScore || 0)\n      }\n    ];\n\n    return metrics;\n  }, [wellnessMetrics, moodEntries, calculateStreak]);\n\n  // Calculate trend for a metric\n  function calculateTrend(metricId: string, currentValue: number): number {\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 1);\n    yesterday.setHours(0, 0, 0, 0);\n    \n    const yesterdayData = wellnessMetrics.find(m => {\n      const metricDate = new Date(m.date);\n      metricDate.setHours(0, 0, 0, 0);\n      return metricDate.getTime() === yesterday.getTime();\n    });\n\n    if (!yesterdayData) return 0;\n\n    const yesterdayValue = (yesterdayData as unknown)[metricId] || 0;\n    if (yesterdayValue === 0) return currentValue > 0 ? 100 : 0;\n    \n    return ((currentValue - yesterdayValue) / yesterdayValue) * 100;\n  }\n\n  // Calculate streak for a metric\n  function calculateStreak(_type: string): number {\n    let streak = 0;\n    const _today = new Date();\n    \n    for (let i = 0; i < 365; i++) {\n      const date = new Date(_today);\n      date.setDate(date.getDate() - i);\n      date.setHours(0, 0, 0, 0);\n      \n      const _hasEntry = wellnessMetrics.some(m => {\n        const metricDate = new Date(m.date);\n        metricDate.setHours(0, 0, 0, 0);\n        \n        if (metricDate.getTime() !== date.getTime()) return false;\n        \n        switch (_type) {\n          case 'sleep': return m.sleepHours >= 7;\n          case 'exercise': return m.exerciseMinutes >= 30;\n          case 'meditation': return m.meditationMinutes > 0;\n          case 'journaling': return m.journalEntries > 0;\n          default: return false;\n        }\n      });\n      \n      if (_hasEntry) {\n        streak++;\n      } else if (i > 0) {\n        break;\n      }\n    }\n    \n    return streak;\n  }\n\n  // Calculate wellness score\n  const wellnessScore = useMemo(() => {\n    const scores = todayMetrics.map(_metric => {\n      const percentage = Math.min((metric.value / metric.target) * 100, 100);\n      return percentage;\n    });\n    \n    return Math.round(scores.reduce((sum, score) => sum + score, 0) / scores.length);\n  }, [todayMetrics]);\n\n  // Get active goals by category\n  const activeGoalsByCategory = useMemo(() => {\n    const goalMap = new Map<string, typeof wellnessGoals[0][]>();\n    \n    wellnessGoals\n      .filter(g => g.status === 'active')\n      .forEach(goal => {\n        const goals = goalMap.get(goal.category) || [];\n        goals.push(goal);\n        goalMap.set(goal.category, goals);\n      });\n    \n    return goalMap;\n  }, [wellnessGoals]);\n\n  // Get recommendations based on current metrics\n  const recommendations = useMemo((): Recommendation[] => {\n    const recs: Recommendation[] = [];\n    \n    todayMetrics.forEach(metric => {\n      const percentage = (metric.value / metric.target) * 100;\n      \n      if (percentage < 50) {\n        recs.push({ metric: metric.title,\n          message: `Your ${metric.title.toLowerCase()} is below 50% of target. Consider focusing on this today.`,\n          priority: 'high' as Priority,\n          action: () => onSetGoal?.(metric.id)\n        });\n      } else if (percentage >= 100 && metric.streak && metric.streak >= 7) {\n        recs.push({ metric: metric.title,\n          message: `Great job! You're on a ${metric.streak}-day ${metric.title.toLowerCase()} streak!`,\n          priority: 'low' as Priority,\n          action: () => onViewDetails?.(metric.id)\n        });\n      }\n    });\n    \n    // Add score-based recommendation\n    if (wellnessScore < 40) {\n      recs.unshift({ metric: 'Overall',\n        message: 'Your wellness score is low. Consider taking a break and focusing on self-care.',\n        priority: 'critical' as Priority,\n        action: () => {}\n      });\n    } else if (wellnessScore > 80) {\n      recs.unshift({ metric: 'Overall',\n        message: 'Excellent wellness score! Keep up the great work!',\n        priority: 'low' as Priority,\n        action: () => {}\n      });\n    }\n    \n    return recs.slice(0, 3);\n  }, [todayMetrics, wellnessScore, onSetGoal, onViewDetails]);\n\n  // Render metric card\n  const renderMetricCard = (metric: MetricCard) => {\n    const percentage = Math.min((metric.value / metric.target) * 100, 100);\n    const Icon = metric.icon;\n    \n    return (\n      <motion.div\n        key={metric.id}\n        layout\n        initial={{ opacity: 0, scale: 0.9 }}\n        animate={{ opacity: 1, scale: 1 }}\n        whileHover={{ scale: 1.02 }}\n        className={`relative bg-white rounded-xl p-4 shadow-sm border border-gray-100 hover:shadow-md transition-all cursor-pointer ${\n          selectedCategory && metric.category !== selectedCategory ? 'opacity-50' : ''\n        }`}\n        onClick={() => onViewDetails?.(metric.id)}\n      >\n        {/* Streak badge */}\n        {metric.streak && metric.streak >= 3 && (\n          <div className=\"absolute -top-2 -right-2 bg-orange-500 text-white text-xs px-2 py-1 rounded-full flex items-center\">\n            <Flame className=\"h-3 w-3 mr-1\" />\n            {metric.streak}\n          </div>\n        )}\n        \n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-3\">\n            <div className={`p-2 rounded-lg bg-gradient-to-br ${metric.gradient} bg-opacity-10`}>\n              <Icon className=\"h-5 w-5\" style={{ color: metric.color }} />\n            </div>\n            <div>\n              <h4 className=\"font-medium text-gray-800\">{metric.title}</h4>\n              <p className=\"text-xs text-gray-500\">\n                {metric.value} / {metric.target} {metric.unit}\n              </p>\n            </div>\n          </div>\n          \n          {/* Trend indicator */}\n          {metric.trend !== 0 && (\n            <div className={`flex items-center text-xs ${\n              metric.trend > 0 ? 'text-green-600' : 'text-red-600'\n            }`}>\n              <TrendingUp className={`h-3 w-3 mr-1 ${metric.trend < 0 ? 'rotate-180' : ''}`} />\n              {Math.abs(metric.trend).toFixed(0)}%\n            </div>\n          )}\n        </div>\n        \n        {/* Progress bar */}\n        <div className=\"relative h-2 bg-gray-200 rounded-full overflow-hidden\">\n          <motion.div\n            className={`absolute top-0 left-0 h-full bg-gradient-to-r ${metric.gradient}`}\n            initial={{ width: 0 }}\n            animate={{ width: `${percentage}%` }}\n            transition={{ duration: 0.5, ease: 'easeOut' }}\n          />\n        </div>\n        \n        {/* Percentage */}\n        <div className=\"mt-2 flex items-center justify-between\">\n          <span className=\"text-xs text-gray-500\">{percentage.toFixed(0)}% complete</span>\n          {percentage >= 100 && (\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          )}\n        </div>\n      </motion.div>\n    );\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Header with wellness score */}\n      <div className=\"bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl p-6 text-white\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"text-2xl font-bold mb-1\">Today&apos;s Wellness Score</h3>\n            <p className=\"text-purple-100\">Track your daily wellness metrics</p>\n          </div>\n          \n          <div className=\"relative\">\n            <div className=\"w-24 h-24\">\n              <CircularProgressbarWithChildren\n                value={wellnessScore}\n                styles={buildStyles({\n                  pathColor: '#ffffff',\n                  trailColor: 'rgba(255, 255, 255, 0.3)',\n                  strokeLinecap: 'round'\n                })}\n              >\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold\">{wellnessScore}%</div>\n                  <div className=\"text-xs opacity-90\">Overall</div>\n                </div>\n              </CircularProgressbarWithChildren>\n            </div>\n          </div>\n        </div>\n        \n        {/* Quick stats */}\n        <div className=\"grid grid-cols-3 gap-4 mt-6\">\n          <div className=\"text-center\">\n            <p className=\"text-3xl font-bold\">{weeklyScore || 0}</p>\n            <p className=\"text-xs text-purple-100\">Weekly Avg</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-3xl font-bold\">{monthlyScore || 0}</p>\n            <p className=\"text-xs text-purple-100\">Monthly Avg</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-3xl font-bold\">\n              {todayMetrics.filter(m => (m.value / m.target) >= 1).length}\n            </p>\n            <p className=\"text-xs text-purple-100\">Goals Met</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Category filter */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2 overflow-x-auto pb-2\">\n          <button\n            onClick={() => setSelectedCategory(null)}\n            className={`px-3 py-1 rounded-full text-sm font-medium whitespace-nowrap transition-colors ${\n              !selectedCategory \n                ? 'bg-purple-100 text-purple-700' \n                : 'text-gray-600 hover:bg-gray-100'\n            }`}\n          >\n            All\n          </button>\n          {['physical', 'mental', 'emotional', 'social', 'spiritual'].map(category => (\n            <button\n              key={category}\n              onClick={() => setSelectedCategory(_category)}\n              className={`px-3 py-1 rounded-full text-sm font-medium whitespace-nowrap transition-colors ${\n                selectedCategory === category \n                  ? 'bg-purple-100 text-purple-700' \n                  : 'text-gray-600 hover:bg-gray-100'\n              }`}\n            >\n              {category.charAt(0).toUpperCase() + category.slice(1)}\n            </button>\n          ))}\n        </div>\n        \n        <button\n          onClick={() => setViewMode(viewMode === 'grid' ? 'list' : 'grid')}\n          className=\"p-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors\"\n          aria-label={`Switch to ${viewMode === 'grid' ? 'list' : 'grid'} view`}\n        >\n          {viewMode === 'grid' ? (\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n            </svg>\n          ) : (\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z\" />\n            </svg>\n          )}\n        </button>\n      </div>\n\n      {/* Metrics grid/list */}\n      <div className={\n        viewMode === 'grid' \n          ? 'grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4'\n          : 'space-y-3'\n      }>\n        <AnimatePresence mode=\"popLayout\">\n          {todayMetrics\n            .filter(m => !selectedCategory || m.category === selectedCategory)\n            .map(metric => renderMetricCard(metric))}\n        </AnimatePresence>\n      </div>\n\n      {/* Active goals section */}\n      {activeGoalsByCategory.size > 0 && (\n        <div className=\"bg-gradient-to-br from-blue-50 to-purple-50 rounded-xl p-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h4 className=\"font-semibold text-gray-800 flex items-center\">\n              <Target className=\"h-5 w-5 mr-2 text-purple-600\" />\n              Active Goals\n            </h4>\n            <button\n              onClick={() => setShowGoalModal(true)}\n              className=\"text-sm text-purple-600 hover:text-purple-700 flex items-center\"\n            >\n              <Plus className=\"h-4 w-4 mr-1\" />\n              Add Goal\n            </button>\n          </div>\n          \n          <div className=\"space-y-2\">\n            {Array.from(activeGoalsByCategory.entries()).map(([category, goals]) => (\n              <div key={category} className=\"space-y-1\">\n                <p className=\"text-xs font-medium text-gray-600 uppercase tracking-wider\">\n                  {category}\n                </p>\n                {goals.map(goal => (\n                  <div\n                    key={goal.id}\n                    className=\"flex items-center justify-between p-2 bg-white rounded-lg\"\n                  >\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium text-gray-800\">{goal.title}</p>\n                      <div className=\"flex items-center space-x-2 mt-1\">\n                        <div className=\"flex-1 h-1 bg-gray-200 rounded-full overflow-hidden\">\n                          <div\n                            className=\"h-full bg-gradient-to-r from-purple-400 to-purple-600\"\n                            style={{ width: `${goal.progress}%` }}\n                          />\n                        </div>\n                        <span className=\"text-xs text-gray-500\">{goal.progress}%</span>\n                      </div>\n                    </div>\n                    <button\n                      onClick={() => setEditingGoal(goal.id)}\n                      className=\"p-1 text-gray-400 hover:text-gray-600\"\n                    >\n                      <Edit2 className=\"h-3 w-3\" />\n                    </button>\n                  </div>\n                ))}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Recommendations */}\n      {recommendations.length > 0 && (\n        <div className=\"space-y-2\">\n          <h4 className=\"font-semibold text-gray-800 flex items-center\">\n            <Sparkles className=\"h-5 w-5 mr-2 text-yellow-500\" />\n            Personalized Recommendations\n          </h4>\n          {recommendations.map((rec, idx) => (\n            <motion.div\n              key={idx}\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: idx * 0.1 }}\n              className={`p-3 rounded-lg flex items-start space-x-3 cursor-pointer hover:shadow-sm transition-all ${\n                rec.priority === 'critical' \n                  ? 'bg-red-50 border border-red-200'\n                  : rec.priority === 'high'\n                  ? 'bg-orange-50 border border-orange-200'\n                  : rec.priority === 'low'\n                  ? 'bg-green-50 border border-green-200'\n                  : 'bg-gray-50 border border-gray-200'\n              }`}\n              onClick={rec.action}\n            >\n              {rec.priority === 'critical' ? (\n                <XCircle className=\"h-5 w-5 text-red-500 flex-shrink-0 mt-0.5\" />\n              ) : rec.priority === 'high' ? (\n                <AlertTriangle className=\"h-5 w-5 text-orange-500 flex-shrink-0 mt-0.5\" />\n              ) : rec.priority === 'low' ? (\n                <CheckCircle className=\"h-5 w-5 text-green-500 flex-shrink-0 mt-0.5\" />\n              ) : (\n                <Info className=\"h-5 w-5 text-gray-500 flex-shrink-0 mt-0.5\" />\n              )}\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium text-gray-800\">{rec.metric}</p>\n                <p className=\"text-xs text-gray-600 mt-0.5\">{rec.message}</p>\n              </div>\n              <ChevronRight className=\"h-4 w-4 text-gray-400\" />\n            </motion.div>\n          ))}\n        </div>\n      )}\n\n      {/* Weekly overview calendar */}\n      <div className=\"bg-white rounded-xl p-4 border border-gray-200\">\n        <h4 className=\"font-semibold text-gray-800 mb-3\">Week at a Glance</h4>\n        <div className=\"grid grid-cols-7 gap-2\">\n          {eachDayOfInterval({\n            start: startOfWeek(new Date()),\n            end: endOfWeek(new Date())\n          }).map(day => {\n            const dayMetrics = wellnessMetrics.find(m => {\n              const metricDate = new Date(m.date);\n              metricDate.setHours(0, 0, 0, 0);\n              day.setHours(0, 0, 0, 0);\n              return metricDate.getTime() === day.getTime();\n            });\n            \n            const dayScore = dayMetrics\n              ? Math.round(\n                  ((dayMetrics.sleepHours / 8) * 100 +\n                   (dayMetrics.exerciseMinutes / 30) * 100 +\n                   (dayMetrics.meditationMinutes / 15) * 100) / 3\n                )\n              : 0;\n            \n            const isCurrentDay = isToday(day);\n            \n            return (\n              <div\n                key={day.toISOString()}\n                className={`text-center p-2 rounded-lg ${\n                  isCurrentDay \n                    ? 'bg-purple-100 border-2 border-purple-500' \n                    : 'bg-gray-50'\n                }`}\n              >\n                <p className=\"text-xs font-medium text-gray-600\">\n                  {format(day, 'EEE')}\n                </p>\n                <p className=\"text-lg font-bold text-gray-800\">\n                  {format(day, 'd')}\n                </p>\n                {dayScore > 0 && (\n                  <div className={`mt-1 text-xs font-medium ${\n                    dayScore >= 80 ? 'text-green-600' :\n                    dayScore >= 60 ? 'text-blue-600' :\n                    dayScore >= 40 ? 'text-yellow-600' :\n                    'text-red-600'\n                  }`}>\n                    {dayScore}%\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\wellness\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\heartbeat\\HeartbeatCheckin.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\navigation\\Breadcrumbs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\navigation\\FloatingCrisisButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\navigation\\GlobalSearch.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'results'. Either include it or remove the dependency array. Outer scope values like '_results' aren't valid dependencies because mutating them doesn't re-render the component.","line":173,"column":6,"nodeType":"ArrayExpression","endLine":173,"endColumn":79,"suggestions":[{"desc":"Update the dependencies array to be: [isSearchOpen, selectedIndex, setSearchOpen, handleResultClick, results]","fix":{"range":[8849,8922],"text":"[isSearchOpen, selectedIndex, setSearchOpen, handleResultClick, results]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Search, X, Clock, Star, TrendingUp, Command, ArrowRight, Heart, Users, Brain, Calendar, FileText, HelpCircle, AlertTriangle } from 'lucide-react';\nimport { useNavigation } from './NavigationContext';\nimport { _useKeyboardNavigation } from '../../hooks/useKeyboardNavigation';\n\ninterface SearchResult {\n  id: string;\n  title: string;\n  description?: string;\n  path: string;\n  category: 'page' | 'resource' | 'therapist' | 'community' | 'crisis' | 'action';\n  icon?: React.ReactNode;\n  priority?: number;\n  keywords: string[];\n}\n\n// Comprehensive search database with mental health resources\nconst searchDatabase: SearchResult[] = [\n  // Crisis Resources (highest priority)\n  { id: 'crisis-help', title: 'Crisis Help', path: '/crisis', category: 'crisis', priority: 100, icon: <AlertTriangle className=\"h-4 w-4\" />, keywords: ['emergency', 'help', 'suicide', 'crisis', '988', 'urgent'] },\n  { id: 'crisis-hotline', title: 'Crisis Hotline (988)', path: 'tel:988', category: 'crisis', priority: 100, icon: <AlertTriangle className=\"h-4 w-4\" />, keywords: ['call', 'phone', 'hotline', '988', 'talk'] },\n  { id: 'crisis-text', title: 'Crisis Text Line', path: 'sms:741741', category: 'crisis', priority: 100, icon: <AlertTriangle className=\"h-4 w-4\" />, keywords: ['text', 'message', 'chat', '741741'] },\n  \n  // Main Pages\n  { id: 'dashboard', title: 'Dashboard', path: '/dashboard', category: 'page', icon: <TrendingUp className=\"h-4 w-4\" />, keywords: ['home', 'overview', 'progress', 'tracking'] },\n  { id: 'wellness', title: 'Wellness Hub', path: '/wellness', category: 'page', icon: <Heart className=\"h-4 w-4\" />, keywords: ['wellness', 'health', 'self-care', 'activities'] },\n  { id: 'community', title: 'Community', path: '/community', category: 'page', icon: <Users className=\"h-4 w-4\" />, keywords: ['community', 'support', 'groups', 'forums', 'chat'] },\n  { id: 'professional', title: 'Professional Care', path: '/professional', category: 'page', icon: <Brain className=\"h-4 w-4\" />, keywords: ['therapist', 'doctor', 'professional', 'appointment', 'therapy'] },\n  \n  // Wellness Resources\n  { id: 'mood-tracker', title: 'Mood Tracker', path: '/wellness/mood', category: 'resource', icon: <Heart className=\"h-4 w-4\" />, keywords: ['mood', 'emotions', 'feelings', 'tracking', 'log'] },\n  { id: 'journal', title: 'Journal', path: '/wellness/journal', category: 'resource', icon: <FileText className=\"h-4 w-4\" />, keywords: ['journal', 'diary', 'write', 'thoughts', 'reflection'] },\n  { id: 'meditation', title: 'Meditation', path: '/wellness/meditation', category: 'resource', icon: <Brain className=\"h-4 w-4\" />, keywords: ['meditation', 'mindfulness', 'breathe', 'calm', 'relax'] },\n  { id: 'breathing', title: 'Breathing Exercises', path: '/wellness/breathing', category: 'resource', icon: <Heart className=\"h-4 w-4\" />, keywords: ['breathing', 'breathe', 'exercise', 'calm', 'anxiety'] },\n  { id: 'sleep', title: 'Sleep Tracker', path: '/wellness/sleep', category: 'resource', icon: <Brain className=\"h-4 w-4\" />, keywords: ['sleep', 'rest', 'insomnia', 'bedtime', 'tracking'] },\n  \n  // Community Features\n  { id: 'support-groups', title: 'Support Groups', path: '/community/groups', category: 'community', icon: <Users className=\"h-4 w-4\" />, keywords: ['groups', 'support', 'community', 'connect', 'share'] },\n  { id: 'success-stories', title: 'Success Stories', path: '/community/stories', category: 'community', icon: <Star className=\"h-4 w-4\" />, keywords: ['stories', 'success', 'inspiration', 'recovery', 'hope'] },\n  { id: 'events', title: 'Events', path: '/community/events', category: 'community', icon: <Calendar className=\"h-4 w-4\" />, keywords: ['events', 'calendar', 'workshops', 'meetings', 'schedule'] },\n  \n  // Professional Care\n  { id: 'find-therapist', title: 'Find a Therapist', path: '/professional/find', category: 'therapist', icon: <Brain className=\"h-4 w-4\" />, keywords: ['therapist', 'counselor', 'psychologist', 'find', 'search'] },\n  { id: 'appointments', title: 'Appointments', path: '/professional/appointments', category: 'therapist', icon: <Calendar className=\"h-4 w-4\" />, keywords: ['appointment', 'booking', 'schedule', 'calendar', 'session'] },\n  { id: 'teletherapy', title: 'Teletherapy', path: '/professional/teletherapy', category: 'therapist', icon: <Brain className=\"h-4 w-4\" />, keywords: ['online', 'video', 'teletherapy', 'remote', 'virtual'] },\n  \n  // Quick Actions\n  { id: 'quick-mood', title: 'Quick Mood Check', path: '/wellness/mood/quick', category: 'action', icon: <Heart className=\"h-4 w-4\" />, keywords: ['quick', 'mood', 'check', 'fast', 'now'] },\n  { id: 'sos-toolkit', title: 'SOS Toolkit', path: '/crisis/toolkit', category: 'crisis', priority: 90, icon: <AlertTriangle className=\"h-4 w-4\" />, keywords: ['sos', 'toolkit', 'emergency', 'coping', 'strategies'] },\n  { id: 'help-center', title: 'Help Center', path: '/help', category: 'resource', icon: <HelpCircle className=\"h-4 w-4\" />, keywords: ['help', 'support', 'faq', 'questions', 'guide'] },\n];\n\nexport function GlobalSearch() {\n  const __navigate   = useNavigate();\n  const { isSearchOpen, setSearchOpen, _preferences, addToRecent } = useNavigation();\n  const [query, _setQuery] = useState('');\n  const [results, _setResults] = useState<SearchResult[]>([]);\n  const [selectedIndex, _setSelectedIndex] = useState(0);\n  const [recentSearches, _setRecentSearches] = useState<string[]>([]);\n  const searchInputRef = useRef<HTMLInputElement>(null);\n\n  // Load recent searches from localStorage\n  useEffect(() => {\n    const _saved = localStorage.getItem('recentSearches');\n    if (_saved) {\n      setRecentSearches(JSON.parse(_saved));\n    }\n  }, []);\n\n  // Save recent searches\n  const saveRecentSearch = (searchTerm: string) => {\n    if (searchTerm.trim()) {\n      const _updated = [searchTerm, ...recentSearches.filter(s => s !== searchTerm)].slice(0, 5);\n      setRecentSearches(_updated);\n      localStorage.setItem('recentSearches', JSON.stringify(_updated));\n    }\n  };\n\n  // Search algorithm with fuzzy matching and ranking\n  const performSearch = useCallback((searchQuery: string) => {\n    if (!searchQuery.trim()) {\n      setResults([]);\n      return;\n    }\n\n    const lowerQuery = searchQuery.toLowerCase();\n    const terms = lowerQuery.split(' ').filter(_Boolean);\n\n    const _searchResults = searchDatabase\n      .map(item => {\n        let score = 0;\n        \n        // Exact title match\n        if (item.title.toLowerCase() === lowerQuery) {\n          score += 100;\n        }\n        \n        // Title contains query\n        if (item.title.toLowerCase().includes(_lowerQuery)) {\n          score += 50;\n        }\n        \n        // Check each term\n        terms.forEach(_term => {\n          if (item.title.toLowerCase().includes(_term)) {\n            score += 20;\n          }\n          if (item.description?.toLowerCase().includes(_term)) {\n            score += 10;\n          }\n          if (item.keywords.some(k => k.includes(_term))) {\n            score += 15;\n          }\n        });\n        \n        // Priority boost\n        score += (item.priority || 0);\n        \n        // Category boost for crisis items when certain keywords are present\n        if (item.category === 'crisis' && ['help', 'emergency', 'crisis', 'suicide'].some(_word => lowerQuery.includes(_word))) {\n          score += 200;\n        }\n        \n        return { ...item, score };\n      })\n      .filter(item => item.score > 0)\n      .sort((a, b) => b.score - a.score)\n      .slice(0, 8);\n\n    setResults(_searchResults);\n    setSelectedIndex(0);\n  }, []);\n\n  // Handle search input change\n  useEffect(() => {\n    const _debounceTimer = setTimeout(() => {\n      performSearch(_query);\n    }, 150);\n\n    return () => clearTimeout(_debounceTimer);\n  }, [query, performSearch]);\n\n  // Keyboard navigation\n  useEffect(() => {\n    if (!isSearchOpen) return;\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      switch (e.key) {\n        case 'ArrowDown':\n          e.preventDefault();\n          setSelectedIndex(prev => (prev + 1) % Math.max(1, results.length));\n          break;\n        case 'ArrowUp':\n          e.preventDefault();\n          setSelectedIndex(prev => (prev - 1 + Math.max(1, results.length)) % Math.max(1, results.length));\n          break;\n        case 'Enter':\n          e.preventDefault();\n          if (results[selectedIndex]) {\n            handleResultClick(results[selectedIndex]);\n          }\n          break;\n        case 'Escape':\n          setSearchOpen(false);\n          break;\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isSearchOpen, _results, selectedIndex, setSearchOpen, handleResultClick]);\n\n  // Focus input when search opens\n  useEffect(() => {\n    if (isSearchOpen && searchInputRef.current) {\n      searchInputRef.current.focus();\n    }\n  }, [isSearchOpen]);\n\n  // Handle result click\n  const handleResultClick = (result: SearchResult) => {\n    saveRecentSearch(_query);\n    addToRecent(result.path);\n    \n    if (result.path.startsWith('tel:') || result.path.startsWith('sms:')) {\n      window.location.href = result.path;\n    } else {\n      navigate(result.path);\n    }\n    \n    setSearchOpen(false);\n    setQuery('');\n  };\n\n  // Quick search suggestions based on context\n  const getQuickSuggestions = () => {\n    const suggestions = [];\n    const hour = new Date().getHours();\n    \n    if (hour >= 22 || hour < 6) {\n      suggestions.push({ text: 'Sleep resources', query: 'sleep' });\n      suggestions.push({ text: 'Calming exercises', query: 'calm' });\n    } else if (hour >= 6 && hour < 12) {\n      suggestions.push({ text: 'Morning meditation', query: 'meditation' });\n      suggestions.push({ text: 'Mood check-in', query: 'mood' });\n    } else {\n      suggestions.push({ text: 'Stress relief', query: 'stress' });\n      suggestions.push({ text: 'Find support', query: 'support' });\n    }\n    \n    return suggestions;\n  };\n\n  return (\n    <AnimatePresence>\n      {isSearchOpen && (\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          className=\"fixed inset-0 z-50 flex items-start justify-center pt-20 px-4\"\n          onClick={() => setSearchOpen(false)}\n        >\n          {/* Backdrop */}\n          <div className=\"absolute inset-0 bg-black/50 backdrop-blur-sm\" />\n          \n          {/* Search Modal */}\n          <motion.div\n            initial={{ scale: 0.95, opacity: 0 }}\n            animate={{ scale: 1, opacity: 1 }}\n            exit={{ scale: 0.95, opacity: 0 }}\n            transition={{ type: 'spring', duration: 0.3 }}\n            className=\"relative w-full max-w-2xl bg-white rounded-2xl shadow-2xl overflow-hidden\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            {/* Search Input */}\n            <div className=\"flex items-center px-6 py-4 border-b border-gray-200\">\n              <Search className=\"h-5 w-5 text-gray-400 mr-3\" />\n              <input\n                ref={searchInputRef}\n                type=\"text\"\n                value={query}\n                onChange={(e) => setQuery(e.target.value)}\n                placeholder=\"Search for resources, support, or type 'help' for crisis assistance...\"\n                className=\"flex-1 text-lg outline-none placeholder-gray-400\"\n                autoComplete=\"off\"\n              />\n              <button\n                onClick={() => setSearchOpen(false)}\n                className=\"ml-3 p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n              >\n                <X className=\"h-5 w-5 text-gray-500\" />\n              </button>\n            </div>\n            \n            {/* Search Results or Suggestions */}\n            <div className=\"max-h-96 overflow-y-auto\">\n              {query ? (\n                results.length > 0 ? (\n                  <div className=\"py-2\">\n                    {results.map((result, index) => (\n                      <button\n                        key={result.id}\n                        onClick={() => handleResultClick(_result)}\n                        onMouseEnter={() => setSelectedIndex(_index)}\n                        className={`w-full px-6 py-3 flex items-center hover:bg-gray-50 transition-colors ${\n                          index === selectedIndex ? 'bg-gray-50' : ''\n                        }`}\n                      >\n                        <div className={`mr-3 ${\n                          result.category === 'crisis' ? 'text-red-500' : 'text-gray-400'\n                        }`}>\n                          {result.icon || <Search className=\"h-4 w-4\" />}\n                        </div>\n                        <div className=\"flex-1 text-left\">\n                          <div className=\"font-medium text-gray-900\">{result.title}</div>\n                          {result.description && (\n                            <div className=\"text-sm text-gray-500\">{result.description}</div>\n                          )}\n                        </div>\n                        <ArrowRight className=\"h-4 w-4 text-gray-400\" />\n                      </button>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"px-6 py-8 text-center text-gray-500\">\n                    No results found for &quot;{query}&quot;\n                  </div>\n                )\n              ) : (\n                <div className=\"p-6\">\n                  {/* Quick Suggestions */}\n                  <div className=\"mb-6\">\n                    <h3 className=\"text-sm font-medium text-gray-500 mb-3\">Suggestions for you</h3>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {getQuickSuggestions().map((suggestion, index) => (\n                        <button\n                          key={index}\n                          onClick={() => setQuery(suggestion.query)}\n                          className=\"px-3 py-1.5 bg-primary-50 text-primary-700 rounded-lg text-sm hover:bg-primary-100 transition-colors\"\n                        >\n                          {suggestion.text}\n                        </button>\n                      ))}\n                    </div>\n                  </div>\n                  \n                  {/* Recent Searches */}\n                  {recentSearches.length > 0 && (\n                    <div>\n                      <h3 className=\"text-sm font-medium text-gray-500 mb-3\">Recent searches</h3>\n                      <div className=\"space-y-1\">\n                        {recentSearches.map((search, index) => (\n                          <button\n                            key={index}\n                            onClick={() => setQuery(search)}\n                            className=\"w-full px-3 py-2 flex items-center text-left hover:bg-gray-50 rounded-lg transition-colors\"\n                          >\n                            <Clock className=\"h-4 w-4 text-gray-400 mr-3\" />\n                            <span className=\"text-gray-700\">{search}</span>\n                          </button>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n            \n            {/* Keyboard Shortcuts Hint */}\n            <div className=\"px-6 py-3 bg-gray-50 border-t border-gray-200 flex items-center justify-between text-xs text-gray-500\">\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"flex items-center\">\n                  <kbd className=\"px-1.5 py-0.5 bg-white border border-gray-300 rounded text-xs mr-1\">↑</kbd>\n                  <kbd className=\"px-1.5 py-0.5 bg-white border border-gray-300 rounded text-xs mr-1\">↓</kbd>\n                  Navigate\n                </span>\n                <span className=\"flex items-center\">\n                  <kbd className=\"px-1.5 py-0.5 bg-white border border-gray-300 rounded text-xs mr-1\">Enter</kbd>\n                  Select\n                </span>\n                <span className=\"flex items-center\">\n                  <kbd className=\"px-1.5 py-0.5 bg-white border border-gray-300 rounded text-xs mr-1\">Esc</kbd>\n                  Close\n                </span>\n              </div>\n              <span className=\"flex items-center\">\n                <Command className=\"h-3 w-3 mr-1\" />K to open\n              </span>\n            </div>\n          </motion.div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\navigation\\MobileBottomNav.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\navigation\\NavigationContext.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useMemo has an unnecessary dependency: 'crisisDetected'. Either exclude it or remove the dependency array.","line":186,"column":6,"nodeType":"ArrayExpression","endLine":186,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[6902,6918],"text":"[]"}}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":218,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":218,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n// Navigation mode types for different user states\nexport type NavigationMode = 'normal' | 'crisis' | 'simplified' | 'professional';\n\n// User preference settings for navigation\nexport interface NavigationPreferences {\n  showQuickAccess: boolean;\n  enableKeyboardShortcuts: boolean;\n  enableVoiceNavigation: boolean;\n  reducedMotion: boolean;\n  highContrast: boolean;\n  fontSize: 'small' | 'medium' | 'large';\n  favoriteRoutes: string[];\n  recentRoutes: string[];\n  customShortcuts: Record<string, string>;\n}\n\n// Navigation context state\ninterface NavigationContextState {\n  mode: NavigationMode;\n  preferences: NavigationPreferences;\n  isSearchOpen: boolean;\n  isMobileMenuOpen: boolean;\n  breadcrumbs: Array<{ label: string; path: string }>;\n  quickActions: Array<{ label: string; action: () => void; icon?: string }>;\n  crisisDetected: boolean;\n  userRole: 'patient' | 'caregiver' | 'professional' | 'guest';\n  favoriteRoutes: string[]; // Access via preferences.favoriteRoutes for compatibility\n  recentRoutes: string[]; // Access via preferences.recentRoutes for compatibility\n  setMode: (mode: NavigationMode) => void;\n  updatePreferences: (prefs: Partial<NavigationPreferences>) => void;\n  setSearchOpen: (open: boolean) => void;\n  setMobileMenuOpen: (open: boolean) => void;\n  addToFavorites: (route: string) => void;\n  removeFromFavorites: (route: string) => void;\n  addToRecent: (route: string) => void;\n  setCrisisDetected: (detected: boolean) => void;\n  setUserRole: (role: 'patient' | 'caregiver' | 'professional' | 'guest') => void;\n}\n\n// Default preferences\nconst defaultPreferences: NavigationPreferences = {\n  showQuickAccess: true,\n  enableKeyboardShortcuts: true,\n  enableVoiceNavigation: false,\n  reducedMotion: false,\n  highContrast: false,\n  fontSize: 'medium',\n  favoriteRoutes: [],\n  recentRoutes: [],\n  customShortcuts: {},\n};\n\n// Create context\nconst NavigationContext = createContext<NavigationContextState | undefined>(_undefined);\n\n// Provider component\nexport function NavigationProvider({ children }: { children: ReactNode }) {\n  const location = useLocation();\n  const [mode, _setMode] = useState<NavigationMode>('normal');\n  const [preferences, _setPreferences] = useState<NavigationPreferences>(() => {\n    // Load preferences from localStorage if available\n    const saved = localStorage.getItem('navigationPreferences');\n    return saved ? { ...defaultPreferences, ...JSON.parse(_saved) } : defaultPreferences;\n  });\n  const [isSearchOpen, _setSearchOpen] = useState(false);\n  const [isMobileMenuOpen, _setMobileMenuOpen] = useState(false);\n  const [crisisDetected, _setCrisisDetected] = useState(false);\n  const [userRole, _setUserRole] = useState<'patient' | 'caregiver' | 'professional' | 'guest'>('guest');\n  const [breadcrumbs, _setBreadcrumbs] = useState<Array<{ label: string; path: string }>>([]);\n\n  // Update breadcrumbs based on current path\n  useEffect(() => {\n    const pathSegments = location.pathname.split('/').filter(_Boolean);\n    const newBreadcrumbs: Array<{ label: string; path: string }> = [\n      { label: 'Home', path: '/' }\n    ];\n\n    let currentPath = '';\n    pathSegments.forEach(segment => {\n      currentPath += `/${segment}`;\n      const label = segment.charAt(0).toUpperCase() + segment.slice(1).replace(/-/g, ' ');\n      newBreadcrumbs.push({ label, path: currentPath });\n    });\n\n    setBreadcrumbs(_newBreadcrumbs);\n  }, [location]);\n\n  // Save preferences to localStorage when they change\n  useEffect(() => {\n    localStorage.setItem('navigationPreferences', JSON.stringify(preferences));\n  }, [preferences]);\n\n  // Check for reduced motion preference\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    setPreferences(prev => ({ ...prev, reducedMotion: mediaQuery.matches }));\n\n    const handleChange = (e: MediaQueryListEvent) => {\n      setPreferences(prev => ({ ...prev, reducedMotion: e.matches }));\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n\n  // Check for high contrast preference\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-contrast: high)');\n    setPreferences(prev => ({ ...prev, highContrast: mediaQuery.matches }));\n\n    const handleChange = (e: MediaQueryListEvent) => {\n      setPreferences(prev => ({ ...prev, highContrast: e.matches }));\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n\n  // Auto-detect crisis mode based on route\n  useEffect(() => {\n    if (location.pathname.includes('/crisis')) {\n      setCrisisDetected(true);\n      setMode('crisis');\n    } else if (crisisDetected && !location.pathname.includes('/crisis')) {\n      // Keep crisis mode active for a period after leaving crisis page\n      const _timeout = setTimeout(() => {\n        setCrisisDetected(false);\n        setMode('normal');\n      }, 5 * 60 * 1000); // 5 minutes\n      return () => clearTimeout(_timeout);\n    }\n  }, [location, crisisDetected]);\n\n  // Update recent routes\n  useEffect(() => {\n    addToRecent(location.pathname);\n  }, [location]);\n\n  const updatePreferences = (prefs: Partial<NavigationPreferences>) => {\n    setPreferences(prev => ({ ...prev, ...prefs }));\n  };\n\n  const addToFavorites = (route: string) => {\n    setPreferences(prev => ({\n      ...prev,\n      favoriteRoutes: [...new Set([...prev.favoriteRoutes, route])],\n    }));\n  };\n\n  const removeFromFavorites = (route: string) => {\n    setPreferences(prev => ({\n      ...prev,\n      favoriteRoutes: prev.favoriteRoutes.filter(r => r !== route),\n    }));\n  };\n\n  const addToRecent = (route: string) => {\n    setPreferences(prev => {\n      const recent = [route, ...prev.recentRoutes.filter(r => r !== route)].slice(0, 10);\n      return { ...prev, recentRoutes: recent };\n    });\n  };\n\n  // Quick actions based on current context\n  const quickActions = React.useMemo(() => {\n    const actions = [];\n    \n    if (_crisisDetected) {\n      actions.push(\n        { label: 'Call Hotline', action: () => window.location.href = 'tel:988', icon: '📞' },\n        { label: 'Text Support', action: () => window.location.href = 'sms:741741', icon: '💬' },\n        { label: 'Breathing Exercise', action: () => window.location.href = '/wellness/breathing', icon: '🫁' }\n      );\n    } else {\n      actions.push(\n        { label: 'Log Mood', action: () => window.location.href = '/wellness/mood', icon: '😊' },\n        { label: 'Journal', action: () => window.location.href = '/wellness/journal', icon: '📝' },\n        { label: 'Meditate', action: () => window.location.href = '/wellness/meditation', icon: '🧘' }\n      );\n    }\n\n    return actions;\n  }, [crisisDetected]);\n\n  const value: NavigationContextState = {\n    mode,\n    preferences,\n    isSearchOpen,\n    isMobileMenuOpen,\n    breadcrumbs,\n    quickActions,\n    crisisDetected,\n    userRole,\n    favoriteRoutes: preferences.favoriteRoutes, // Expose as direct property for easier access\n    recentRoutes: preferences.recentRoutes, // Expose as direct property for easier access\n    setMode,\n    updatePreferences,\n    setSearchOpen,\n    setMobileMenuOpen,\n    addToFavorites,\n    removeFromFavorites,\n    addToRecent,\n    setCrisisDetected,\n    setUserRole,\n  };\n\n  return (\n    <NavigationContext.Provider value={value}>\n      {children}\n    </NavigationContext.Provider>\n  );\n}\n\n// Hook to use navigation context\nexport function useNavigation() {\n  const context = useContext(_NavigationContext);\n  if (!context) {\n    throw new Error('useNavigation must be used within NavigationProvider');\n  }\n  return context;\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\notifications\\NotificationCenter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\performance\\OptimizedChart.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'type'. Either exclude it or remove the dependency array.","line":319,"column":6,"nodeType":"ArrayExpression","endLine":319,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[8653,8659],"text":"[]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '@/utils/logger';\n/**\n * High-Performance Chart Component\n * Optimized for mental health data visualization with web workers\n */\n\nimport React, { useEffect, useRef, useState, useMemo, useCallback } from 'react';\nimport { Line, Bar, Doughnut } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n  ChartOptions,\n  ChartData,\n} from 'chart.js';\nimport { useDeferredValue } from 'react';\nimport { performanceMonitor } from '../../utils/performance/performanceMonitor';\nimport { UpdatePriority, usePrioritizedTransition } from '../../utils/performance/concurrentFeatures';\n\n// Register ChartJS components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\n// Initialize web worker\nlet chartWorker: Worker | null = null;\n\nif (typeof Worker !== 'undefined') {\n  try {\n    chartWorker = new Worker(\n      new URL('../../workers/chartProcessor.worker.ts', import.meta.url),\n      { type: 'module' }\n    );\n  } catch {\n    logger.warn('Web Worker not available, falling back to main thread processing');\n  }\n}\n\ninterface OptimizedChartProps {\n  type: 'line' | 'bar' | 'doughnut';\n  data: unknown[];\n  options?: ChartOptions;\n  height?: number;\n  width?: number;\n  priority?: UpdatePriority;\n  enableWebWorker?: boolean;\n  enableSampling?: boolean;\n  samplingThreshold?: number;\n  onDataProcessed?: (processedData: unknown) => void;\n  className?: string;\n}\n\nexport function OptimizedChart({\n  type = 'line',\n  data,\n  options = {},\n  height = 300,\n  width,\n  priority = UpdatePriority.MEDIUM,\n  enableWebWorker = true,\n  enableSampling = true,\n  samplingThreshold = 1000,\n  onDataProcessed,\n  className = '',\n}: OptimizedChartProps) {\n  const chartRef = useRef<unknown>(null);\n  const ____canvasRef   = useRef<HTMLCanvasElement>(null);\n  const [processedData, _setProcessedData] = useState<ChartData | null>(null);\n  const [___isProcessing, _setIsProcessing] = useState(false);\n  const [_error, _setError] = useState<string | null>(null);\n  \n  // Use deferred value for non-critical updates\n  const deferredData = useDeferredValue(_data);\n  const [__isPending, startPrioritizedTransition] = usePrioritizedTransition(_priority);\n\n  // Performance monitoring\n  useEffect(() => {\n    performanceMonitor.measureStart('chart-render');\n    return () => {\n      performanceMonitor.measureEnd('chart-render');\n    };\n  }, []);\n\n  // Fallback processing on main thread\n  const processDataOnMainThread = useCallback((rawData: unknown[]) => {\n    performanceMonitor.measureStart('chart-data-processing');\n    \n    try {\n      // Sample data if needed\n      let processedPoints = rawData;\n      if (enableSampling && rawData.length > samplingThreshold) {\n        const step = Math.ceil(rawData.length / 100);\n        processedPoints = rawData.filter((_, index) => index % step === 0);\n      }\n\n      // Format for Chart.js\n      const chartData: ChartData = {\n        labels: processedPoints.map(p => p.label || p.date || p.x),\n        datasets: [{\n          label: 'Wellness Data',\n          data: processedPoints.map(p => p.value || p.y),\n          borderColor: 'rgb(59, 130, 246)',\n          backgroundColor: type === 'line' \n            ? 'rgba(59, 130, 246, 0.1)'\n            : 'rgba(59, 130, 246, 0.5)',\n          tension: 0.4,\n          fill: type === 'line',\n        }],\n      };\n\n      performanceMonitor.measureEnd('chart-data-processing');\n      return chartData;\n    } catch (_error) {\n      performanceMonitor.measureEnd('chart-data-processing');\n      throw _error;\n    }\n  }, [enableSampling, samplingThreshold, type]);\n\n  // Process data with web worker\n  const processDataWithWorker = useCallback(async (rawData: unknown[]) => {\n    if (!chartWorker || !enableWebWorker) {\n      return processDataOnMainThread(_rawData);\n    }\n\n    return new Promise((resolve, reject) => {\n      const messageHandler = (event: MessageEvent) => {\n        const { _type, result, _error } = event.data;\n        \n        if (_error) {\n          reject(new Error(_error));\n        } else {\n          resolve(result);\n        }\n        \n        chartWorker!.removeEventListener('message', messageHandler);\n      };\n\n      chartWorker.addEventListener('message', messageHandler);\n\n      // Send data to worker\n      chartWorker.postMessage({\n        type: 'PROCESS_MOOD_DATA',\n        data: rawData,\n        options: {\n          sampling: enableSampling && rawData.length > samplingThreshold ? 100 : null,\n          smoothing: true,\n          trendLine: type === 'line',\n        },\n      });\n\n      // Timeout after 5 seconds\n      setTimeout(() => {\n        chartWorker!.removeEventListener('message', messageHandler);\n        reject(new Error('Worker timeout'));\n      }, 5000);\n    });\n  }, [enableWebWorker, enableSampling, samplingThreshold, type, processDataOnMainThread]);\n\n  // Process data when it changes\n  useEffect(() => {\n    if (!deferredData || deferredData.length === 0) {\n      setProcessedData(null);\n      return;\n    }\n\n    setIsProcessing(true);\n    setError(null);\n\n    const processData = async () => {\n      try {\n        const result = await processDataWithWorker(_deferredData) as { processed?: Array<{ date: string, value: number }> };\n        \n        startPrioritizedTransition(() => {\n          if (result.processed) {\n            // Web worker result\n            const _chartData: ChartData = {\n              labels: result.processed.map(p => p.date),\n              datasets: [{\n                label: 'Mood Trend',\n                data: result.processed.map(p => p.value),\n                borderColor: 'rgb(59, 130, 246)',\n                backgroundColor: 'rgba(59, 130, 246, 0.1)',\n                tension: 0.4,\n                fill: type === 'line',\n              }],\n            };\n            \n            setProcessedData(_chartData);\n            \n            if (_onDataProcessed) {\n              onDataProcessed(result);\n            }\n          } else {\n            // Main thread result\n            setProcessedData(result as ChartData);\n          }\n          \n          setIsProcessing(false);\n        });\n      } catch (_error  ) {\n        logger.error('Chart data processing _error');\n        setError('Processing failed');\n        setIsProcessing(false);\n        \n        // Fallback to main thread\n        try {\n          const _fallbackData = processDataOnMainThread(_deferredData);\n          setProcessedData(_fallbackData);\n        } catch {\n    logger.error('Fallback processing failed');\n        }\n      }\n    };\n\n    processData();\n  }, [deferredData, processDataWithWorker, processDataOnMainThread, startPrioritizedTransition, type, onDataProcessed]);\n\n  // Optimized chart options\n  const __optimizedOptions   = useMemo<ChartOptions>(() => ({\n    ...options,\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: {\n      duration: priority === UpdatePriority.CRISIS ? 0 : 750,\n    },\n    interaction: {\n      mode: 'nearest',\n      intersect: false,\n    },\n    plugins: {\n      ...options.plugins,\n      decimation: {\n        enabled: true,\n        algorithm: 'lttb',\n        samples: 100,\n      },\n      legend: {\n        display: true,\n        position: 'top' as const,\n      },\n      tooltip: {\n        enabled: true,\n        mode: 'index',\n        intersect: false,\n      },\n    },\n    scales: type !== 'doughnut' ? {\n      x: {\n        display: true,\n        grid: {\n          display: false,\n        },\n      },\n      y: {\n        display: true,\n        beginAtZero: true,\n        grid: {\n          color: 'rgba(0, 0, 0, 0.05)',\n        },\n      },\n    } : undefined,\n    elements: {\n      point: {\n        radius: data.length > 50 ? 0 : 3,\n        hoverRadius: 5,\n      },\n      line: {\n        borderWidth: 2,\n      },\n    },\n  }), [options, priority, data.length, type]);\n\n  // Handle chart instance\n  useEffect(() => {\n    if (chartRef.current) {\n      const chart = chartRef.current;\n      \n      // Optimize canvas rendering\n      if (chart.canvas) {\n        const ctx = chart.canvas.getContext('2d');\n        if (ctx) {\n          ctx.imageSmoothingEnabled = true;\n          ctx.imageSmoothingQuality = 'high';\n        }\n      }\n\n      // Cleanup on unmount\n      return () => {\n        chart.destroy();\n      };\n    }\n  }, []);\n\n  // Render appropriate chart component\n  const ChartComponent = useMemo(() => {\n    switch (_type) {\n      case 'bar':\n        return Bar;\n      case 'doughnut':\n        return Doughnut;\n      default:\n        return Line;\n    }\n  }, [type]);\n\n  if (_error) {\n    return (\n      <div className={`flex items-center justify-center h-${height} bg-red-50 rounded-lg ${className}`}>\n        <div className=\"text-center\">\n          <p className=\"text-red-600 mb-2\">Chart Error</p>\n          <p className=\"text-sm text-red-500\">{_error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (isProcessing || !processedData) {\n    return (\n      <div className={`flex items-center justify-center h-${height} ${className}`}>\n        <div className=\"animate-pulse\">\n          <div className=\"h-64 w-full bg-gray-200 rounded-lg\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`chart-container ${className}`} style={{ height, width }}>\n      <ChartComponent\n        ref={chartRef}\n        data={processedData}\n        options={optimizedOptions}\n      />\n      {isPending && (\n        <div className=\"absolute top-2 right-2\">\n          <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-blue-600 border-t-transparent\"></div>\n        </div>\n      )}\n    </div>\n  );\n}\n\n/**\n * Specialized mood chart with mental health features\n */\nexport function MoodChart({ \n  moodData, \n  _showTrends = true,\n  showInsights = true,\n  ...props \n}: unknown) {\n  const [insights, _setInsights] = useState<string[]>([]);\n  const [wellnessScore, _setWellnessScore] = useState<number | null>(null);\n\n  const __handleDataProcessed   = useCallback((result: unknown) => {\n    if (result.insights) {\n      setInsights(result.insights);\n    }\n    if (result.wellnessScore !== undefined) {\n      setWellnessScore(result.wellnessScore);\n    }\n  }, []);\n\n  return (\n    <div className=\"mood-chart-container\">\n      <OptimizedChart\n        type=\"line\"\n        data={moodData}\n        priority={UpdatePriority.HIGH}\n        onDataProcessed={handleDataProcessed}\n        {...props}\n      />\n      \n      {showInsights && insights.length > 0 && (\n        <div className=\"mt-4 p-4 bg-blue-50 rounded-lg\">\n          <h4 className=\"text-sm font-semibold text-blue-900 mb-2\">Insights</h4>\n          <ul className=\"space-y-1\">\n            {insights.map((insight, index) => (\n              <li key={index} className=\"text-sm text-blue-700\">\n                • {insight}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n      \n      {wellnessScore !== null && (\n        <div className=\"mt-4 flex items-center justify-between p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg\">\n          <span className=\"text-sm font-medium text-gray-700\">Wellness Score</span>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"relative w-32 h-2 bg-gray-200 rounded-full overflow-hidden\">\n              <div \n                className=\"absolute top-0 left-0 h-full bg-gradient-to-r from-blue-500 to-purple-500 rounded-full transition-all duration-1000\"\n                style={{ width: `${wellnessScore}%` }}\n              />\n            </div>\n            <span className=\"text-lg font-bold text-gray-900\">{Math.round(wellnessScore)}</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\performance\\OptimizedCrisisIntervention.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'userId'. Either exclude it or remove the dependency array.","line":101,"column":6,"nodeType":"ArrayExpression","endLine":101,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [onActivate]","fix":{"range":[3524,3544],"text":"[onActivate]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '@/utils/logger';\n/**\n * Ultra-Optimized Crisis Intervention Component\n * Guaranteed <200ms response time for immediate mental health support\n */\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { AlertTriangle, Phone, MessageCircle, Heart, Shield, Activity } from 'lucide-react';\nimport { performanceMonitor } from '../../utils/performance/performanceMonitor';\n// import { UpdatePriority } from '../../utils/performance/concurrentFeatures';\n\n// Pre-computed crisis resources for instant access\nconst CRISIS_RESOURCES = {\n  hotlines: [\n    { name: '988 Suicide & Crisis Lifeline', number: '988', priority: 1 },\n    { name: 'Crisis Text Line', number: 'Text HOME to 741741', priority: 2 },\n    { name: 'SAMHSA National Helpline', number: '1-800-662-4357', priority: 3 },\n  ],\n  immediate: [\n    'Take deep breaths: In for 4, hold for 4, out for 4',\n    'Ground yourself: Name 5 things you can see',\n    'Call a trusted friend or family member',\n    'Move to a safe, comfortable space',\n  ],\n  techniques: [\n    { name: 'Box Breathing', duration: '2 min', effectiveness: 95 },\n    { name: '5-4-3-2-1 Grounding', duration: '3 min', effectiveness: 92 },\n    { name: 'Progressive Muscle Relaxation', duration: '5 min', effectiveness: 88 },\n  ],\n};\n\n// Pre-render critical UI elements\nconst CrisisButton = React.memo(() => (\n  <button\n    className=\"crisis-button-optimized fixed bottom-6 right-6 z-[9999] bg-red-600 hover:bg-red-700 text-white rounded-full p-4 shadow-lg transform transition-all duration-100 hover:scale-110\"\n    onClick={() => window.dispatchEvent(new CustomEvent('crisis-activate'))}\n    aria-label=\"Crisis Support\"\n    data-priority=\"critical\"\n  >\n    <AlertTriangle className=\"h-6 w-6\" />\n  </button>\n));\n\nCrisisButton.displayName = 'CrisisButton';\n\ninterface OptimizedCrisisInterventionProps {\n  userId?: string;\n  onActivate?: () => void;\n  preloadResources?: boolean;\n}\n\nexport function OptimizedCrisisIntervention({\n  userId,\n  onActivate,\n  preloadResources = true,\n}: OptimizedCrisisInterventionProps) {\n  const [___isActive, _setIsActive] = useState(false);\n  const [responseTime, _setResponseTime] = useState<number | null>(null);\n  const activationTime = useRef<number>(0);\n  const modalRef = useRef<HTMLDivElement>(null);\n  \n  // Pre-cache DOM references\n  const ____buttonRef   = useRef<HTMLButtonElement>(null);\n  const ____resourcesRef   = useRef<HTMLDivElement>(null);\n\n  // Optimized activation handler\n  const handleActivation = useCallback(() => {\n    activationTime.current = performance.now();\n    performanceMonitor.measureStart('crisis-intervention-activate');\n    \n    // Immediate state update - no transitions\n    setIsActive(true);\n    \n    // Force immediate render\n    if (modalRef.current) {\n      modalRef.current.style.display = 'block';\n      modalRef.current.classList.add('active');\n    }\n    \n    // Measure response time\n    requestAnimationFrame(() => {\n      const _time = performance.now() - activationTime.current;\n      setResponseTime(time);\n      performanceMonitor.measureEnd('crisis-intervention-activate');\n      \n      if (time > 200) {\n        logger.warn(`Crisis intervention response time exceeded target: ${time.toFixed(2)}ms`);\n      }\n    });\n    \n    // Notify parent\n    if (_onActivate) {\n      onActivate();\n    }\n    \n    // Log to analytics (non-blocking)\n// @ts-expect-error - requestIdleCallback is a global API\n    requestIdleCallback(() => {\n      logCrisisActivation(_userId);\n    });\n  }, [userId, onActivate]);\n\n  // Set up global listener for crisis activation\n  useEffect(() => {\n    const listener = () => handleActivation();\n    window.addEventListener('crisis-activate', listener);\n    \n    // Preload resources if enabled\n    if (_preloadResources) {\n      preloadCrisisResources();\n    }\n    \n    return () => {\n      window.removeEventListener('crisis-activate', listener);\n    };\n  }, [handleActivation, preloadResources]);\n\n  // Keyboard shortcut for crisis activation (Ctrl+Shift+H)\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.key === 'H') {\n        e.preventDefault();\n        handleActivation();\n      }\n    };\n    \n    document.addEventListener('keydown', handleKeyPress);\n    return () => document.removeEventListener('keydown', handleKeyPress);\n  }, [handleActivation]);\n\n  // Close handler\n  const __handleClose   = useCallback(() => {\n    setIsActive(false);\n    if (modalRef.current) {\n      modalRef.current.style.display = 'none';\n      modalRef.current.classList.remove('active');\n    }\n  }, []);\n\n  // Call hotline (immediate action)\n  const __callHotline   = useCallback((number: string) => {\n    performanceMonitor.measureStart('crisis-call-initiate');\n    \n    if (number === '988' || number.includes('800')) {\n      window.location.href = `tel:${number}`;\n    } else {\n      navigator.clipboard.writeText(number);\n      alert(`Number copied: ${number}`);\n    }\n    \n    performanceMonitor.measureEnd('crisis-call-initiate');\n  }, []);\n\n  return (\n    <>\n      {/* Always-visible crisis button */}\n      <CrisisButton />\n      \n      {/* Pre-rendered crisis modal (hidden by default) */}\n      <div\n        ref={modalRef}\n        className=\"crisis-modal-optimized fixed inset-0 z-[10000] bg-black bg-opacity-90 hidden\"\n        style={{ display: isActive ? 'block' : 'none' }}\n        data-priority=\"critical\"\n      >\n        <div className=\"min-h-screen flex items-center justify-center p-4\">\n          <div className=\"bg-white rounded-xl max-w-2xl w-full p-6 shadow-2xl\">\n            {/* Header with response time indicator */}\n            <div className=\"flex items-center justify-between mb-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-3 bg-red-100 rounded-full\">\n                  <Shield className=\"h-8 w-8 text-red-600\" />\n                </div>\n                <div>\n                  <h1 className=\"text-2xl font-bold text-gray-900\">Crisis Support</h1>\n                  <p className=\"text-sm text-gray-600\">Immediate help is available</p>\n                </div>\n              </div>\n              {responseTime && (\n                <div className=\"flex items-center space-x-2 text-xs text-gray-500\">\n                  <Activity className=\"h-3 w-3\" />\n                  <span>{responseTime.toFixed(0)}ms</span>\n                </div>\n              )}\n            </div>\n            \n            {/* Emergency hotlines - highest priority */}\n            <div className=\"mb-6 p-4 bg-red-50 rounded-lg border-2 border-red-200\">\n              <h2 className=\"text-lg font-semibold text-red-900 mb-3 flex items-center\">\n                <Phone className=\"h-5 w-5 mr-2\" />\n                Emergency Hotlines\n              </h2>\n              <div className=\"space-y-2\">\n                {CRISIS_RESOURCES.hotlines.map((hotline) => (\n                  <button\n                    key={hotline.number}\n                    onClick={() => callHotline(hotline.number)}\n                    className=\"w-full text-left p-3 bg-white rounded-lg hover:bg-red-100 transition-colors duration-100 flex items-center justify-between group\"\n                  >\n                    <div>\n                      <p className=\"font-medium text-gray-900\">{hotline.name}</p>\n                      <p className=\"text-sm text-gray-600\">{hotline.number}</p>\n                    </div>\n                    <Phone className=\"h-5 w-5 text-red-600 group-hover:animate-pulse\" />\n                  </button>\n                ))}\n              </div>\n            </div>\n            \n            {/* Immediate actions */}\n            <div className=\"mb-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-3 flex items-center\">\n                <Heart className=\"h-5 w-5 mr-2 text-red-500\" />\n                Immediate Actions\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                {CRISIS_RESOURCES.immediate.map((action, index) => (\n                  <div\n                    key={index}\n                    className=\"p-3 bg-blue-50 rounded-lg border border-blue-200\"\n                  >\n                    <p className=\"text-sm text-blue-900\">{action}</p>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            {/* Coping techniques */}\n            <div className=\"mb-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">\n                Quick Coping Techniques\n              </h3>\n              <div className=\"space-y-2\">\n                {CRISIS_RESOURCES.techniques.map((technique) => (\n                  <div\n                    key={technique.name}\n                    className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\"\n                  >\n                    <div>\n                      <p className=\"font-medium text-gray-900\">{technique.name}</p>\n                      <p className=\"text-xs text-gray-500\">{technique.duration}</p>\n                    </div>\n                    <div className=\"text-sm text-green-600 font-medium\">\n                      {technique.effectiveness}% effective\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            {/* Action buttons */}\n            <div className=\"flex items-center justify-between\">\n              <button\n                onClick={() => window.location.href = '/crisis/chat'}\n                className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2\"\n              >\n                <MessageCircle className=\"h-5 w-5\" />\n                <span>Start Crisis Chat</span>\n              </button>\n              \n              <button\n                onClick={handleClose}\n                className=\"px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Inline critical styles for fastest rendering */}\n      <style>{`\n        .crisis-button-optimized {\n          will-change: transform;\n          contain: layout style paint;\n        }\n        \n        .crisis-modal-optimized {\n          will-change: opacity;\n          contain: layout style paint;\n        }\n        \n        .crisis-modal-optimized.active {\n          animation: crisis-fade-in 100ms ease-out;\n        }\n        \n        @keyframes crisis-fade-in {\n          from { opacity: 0; }\n          to { opacity: 1; }\n        }\n        \n        /* Force GPU acceleration */\n        .crisis-button-optimized,\n        .crisis-modal-optimized {\n          transform: translateZ(0);\n          backface-visibility: hidden;\n        }\n      `}</style>\n    </>\n  );\n}\n\n/**\n * Preload crisis resources for instant access\n */\nfunction preloadCrisisResources() {\n  // Preload images\n  const images = ['/crisis-support.svg', '/emergency.svg'];\n  images.forEach(src => {\n    const img = new Image();\n    img.src = src;\n  });\n  \n  // Preconnect to emergency services APIs\n  const link = document.createElement('link');\n  link.rel = 'preconnect';\n  link.href = 'https://988lifeline.org';\n  document.head.appendChild(_link);\n  \n  // Cache crisis data in IndexedDB for offline access\n  if ('indexedDB' in window) {\n    cacheOfflineCrisisData();\n  }\n}\n\n/**\n * Cache crisis data for offline support\n */\nasync function cacheOfflineCrisisData() {\n  try {\n    const db = await openCrisisDatabase();\n    const tx = db.transaction(['resources'], 'readwrite');\n    const store = tx.objectStore('resources');\n    \n    await store.put({\n      id: 'crisis-resources',\n      data: CRISIS_RESOURCES,\n      timestamp: Date.now(),\n    });\n  } catch {\n    logger.error('Failed to cache crisis data:');\n  }\n}\n\n/**\n * Open IndexedDB for crisis data\n */\nfunction openCrisisDatabase(): Promise<IDBDatabase> {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open('CrisisSupport', 1);\n    \n    request.onerror = () => reject(request.error);\n    request.onsuccess = () => resolve(request.result);\n    \n    request.onupgradeneeded = (event) => {\n      const db = (event.target as unknown).result;\n      if (!db.objectStoreNames.contains('resources')) {\n        db.createObjectStore('resources', { keyPath: 'id' });\n      }\n    };\n  });\n}\n\n/**\n * Log crisis activation for analytics\n */\nfunction logCrisisActivation(userId?: string) {\n  // Send to analytics service\n  if (window.gtag) {\n    window.gtag('event', 'crisis_activation', {\n      event_category: 'Crisis Support',\n      event_label: userId || 'anonymous',\n      value: 1,\n    });\n  }\n  \n  // Store locally for follow-up\n  localStorage.setItem('last_crisis_activation', Date.now().toString());\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\performance\\PerformanceDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\performance\\VirtualizedList.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'isVariableHeight'. Either exclude it or remove the dependency array.","line":126,"column":6,"nodeType":"ArrayExpression","endLine":126,"endColumn":36,"suggestions":[{"desc":"Update the dependencies array to be: [itemHeight]","fix":{"range":[4078,4108],"text":"[itemHeight]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * High-Performance Virtualized List Component\n * Optimized for mental health community posts and large datasets\n */\n\nimport React, { useCallback, useRef, useMemo, memo, CSSProperties } from 'react';\nimport { List as List, VList as VList } from 'react-window';\nimport type { ListChildComponentProps } from 'react-window';\nimport { useInView } from 'react-intersection-observer';\nimport { performanceMonitor } from '../../utils/performance/performanceMonitor';\nimport { LoadingFallbacks } from '../../utils/performance/concurrentFeatures';\n\ninterface VirtualizedListProps<T> {\n  items: T[];\n  renderItem: (item: T, index: number, style: CSSProperties) => React.ReactNode;\n  itemHeight?: number | ((index: number) => number);\n  height?: number;\n  width?: string | number;\n  overscan?: number;\n  onEndReached?: () => void;\n  endReachedThreshold?: number;\n  loading?: boolean;\n  emptyComponent?: React.ReactNode;\n  headerComponent?: React.ReactNode;\n  footerComponent?: React.ReactNode;\n  className?: string;\n  estimatedItemSize?: number;\n  getItemKey?: (index: number, data: T[]) => string;\n}\n\n/**\n * Optimized virtualized list with mental health app specific features\n */\nexport function VirtualizedList<T>({\n  items,\n  renderItem,\n  itemHeight = 150,\n  height = 600,\n  width = '100%',\n  overscan = 3,\n  onEndReached,\n  endReachedThreshold = 0.8,\n  loading = false,\n  emptyComponent,\n  headerComponent,\n  footerComponent,\n  className = '',\n  estimatedItemSize = 150,\n  getItemKey,\n}: VirtualizedListProps<T>) {\n  const listRef = useRef<unknown>(null);\n  const [isNearEnd, setIsNearEnd] = React.useState(false);\n  const __lastScrollTop   = useRef(0);\n  const scrollFrameId = useRef<number>();\n\n  // Performance monitoring\n  React.useEffect(() => {\n    performanceMonitor.measureStart('virtualized-list-mount');\n    return () => {\n      performanceMonitor.measureEnd('virtualized-list-mount');\n    };\n  }, []);\n\n  // Determine if we should use fixed or variable size list\n  const isVariableHeight = typeof itemHeight === 'function';\n\n  // Memoized item renderer\n  const ItemRenderer = memo(({ index, style, data }: ListChildComponentProps<T[]>) => {\n    const item = data[index];\n    \n    // Add intersection observer for lazy loading images\n    const { ref, inView } = useInView({\n      threshold: 0,\n      triggerOnce: true,\n      rootMargin: '50px',\n    });\n\n    return (\n      <div ref={ref} style={style} className=\"px-4\">\n        {inView && item ? renderItem(item, index, style) : <LoadingFallbacks.Skeleton lines={3} />}\n      </div>\n    );\n  });\n\n  ItemRenderer.displayName = 'ItemRenderer';\n\n  // Handle scroll with throttling for performance\n  const __handleScroll   = useCallback(({ scrollOffset, _scrollDirection }: unknown) => {\n    // Cancel previous frame\n    if (scrollFrameId.current) {\n      cancelAnimationFrame(scrollFrameId.current);\n    }\n\n    scrollFrameId.current = requestAnimationFrame(() => {\n      const scrollTop = scrollOffset;\n      const scrollHeight = listRef.current?.props?.height || height;\n      const totalHeight = isVariableHeight\n        ? items.length * estimatedItemSize\n        : items.length * (itemHeight as number);\n\n      const scrollPercentage = (scrollTop + scrollHeight) / totalHeight;\n\n      // Check if near end\n      if (scrollPercentage > endReachedThreshold && !isNearEnd && onEndReached) {\n        setIsNearEnd(true);\n        performanceMonitor.measureStart('infinite-scroll-load');\n        onEndReached();\n        \n        // Reset after delay to allow new loads\n        setTimeout(() => {\n          setIsNearEnd(false);\n          performanceMonitor.measureEnd('infinite-scroll-load');\n        }, 1000);\n      }\n\n      lastScrollTop.current = scrollTop;\n    });\n  }, [items.length, isNearEnd, onEndReached, endReachedThreshold, height, itemHeight, isVariableHeight, estimatedItemSize]);\n\n  // Get item size for variable height list\n  const __getItemSize   = useMemo(() => {\n    if (_isVariableHeight) {\n      return itemHeight as (index: number) => number;\n    }\n    return (_index: number) => itemHeight as number;\n  }, [itemHeight, isVariableHeight]);\n\n  // Custom item key for better performance\n  const itemKey = useCallback((index: number, data: T[]) => {\n    if (_getItemKey) {\n      return getItemKey(index, data);\n    }\n    // Use a stable key based on item properties if possible\n    const item = data[index] as unknown;\n    return item?.id || item?.key || `item-${index}`;\n  }, [getItemKey]);\n\n  // Empty state\n  if (!loading && items.length === 0 && emptyComponent) {\n    return <>{emptyComponent}</>;\n  }\n\n  const ListComponent = isVariableHeight ? VList : List;\n\n  return (\n    <div className={`virtualized-list-container ${className}`}>\n      {headerComponent}\n      \n      {items.length > 0 && (\n        <ListComponent\n          ref={listRef}\n          height={height}\n          width={width}\n          itemCount={items.length}\n          itemSize={isVariableHeight ? getItemSize : (typeof itemHeight === 'number' ? () => itemHeight : itemHeight)}\n          overscanCount={overscan}\n          onScroll={handleScroll}\n          itemData={items}\n          itemKey={itemKey}\n          estimatedItemSize={estimatedItemSize}\n          className=\"scrollbar-thin scrollbar-thumb-gray-400 scrollbar-track-gray-100\"\n        >\n          {ItemRenderer}\n        </ListComponent>\n      )}\n\n      {loading && (\n        <div className=\"py-4\">\n          <LoadingFallbacks.List items={3} />\n        </div>\n      )}\n\n      {footerComponent}\n    </div>\n  );\n}\n\n/**\n * Optimized post list item component\n */\nexport const VirtualizedPostItem = memo(\n({ \n  post, \n  style,\n  onLike,\n  onComment,\n  onShare,\n  onEdit,\n  onDelete,\n  onReport,\n  isOwner,\n}: unknown) => {\n  // Defer non-critical updates\n  const [showActions, setShowActions] = React.useState(false);\n  \n  React.useEffect(() => {\n    // Lazy load action buttons\n    const _timer = setTimeout(() => setShowActions(true), 100);\n    return () => clearTimeout(_timer);\n  }, []);\n\n  return (\n    <div style={style} className=\"virtualized-post-item\">\n      <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4 hover:shadow-md transition-shadow\">\n        {/* Post header */}\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"h-8 w-8 rounded-full bg-gradient-to-br from-blue-500 to-purple-500 flex items-center justify-center text-white text-sm font-semibold\">\n              {post.username?.[0]?.toUpperCase() || '?'}\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-gray-900\">{post.username}</p>\n              <p className=\"text-xs text-gray-500\">{post.timeAgo}</p>\n            </div>\n          </div>\n          \n          {showActions && (\n            <div className=\"flex items-center space-x-1\">\n              {isOwner ? (\n                <>\n                  <button onClick={() => onEdit(_post)} className=\"p-1 text-gray-400 hover:text-blue-600\">\n                    <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\n                    </svg>\n                  </button>\n                  <button onClick={() => onDelete(post.id)} className=\"p-1 text-gray-400 hover:text-red-600\">\n                    <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n                    </svg>\n                  </button>\n                </>\n              ) : (\n                <button onClick={() => onReport(post.id)} className=\"p-1 text-gray-400 hover:text-orange-600\">\n                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 21v-4m0 0V5a2 2 0 012-2h6.5l1 1H21l-3 6 3 6h-8.5l-1-1H5a2 2 0 00-2 2zm9-13.5V9\" />\n                  </svg>\n                </button>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Post content */}\n        <div className=\"mb-3\">\n          <h4 className=\"text-base font-semibold text-gray-900 mb-1\">{post.title}</h4>\n          <p className=\"text-sm text-gray-700 line-clamp-3\">{post.content}</p>\n        </div>\n\n        {/* Post stats */}\n        <div className=\"flex items-center justify-between pt-3 border-t border-gray-100\">\n          <div className=\"flex items-center space-x-4\">\n            <button \n              onClick={() => onLike(post.id)}\n              className={`flex items-center space-x-1 text-sm ${post.isLiked ? 'text-red-600' : 'text-gray-500 hover:text-red-600'}`}\n            >\n              <svg className={`w-4 h-4 ${post.isLiked ? 'fill-current' : ''}`} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\" />\n              </svg>\n              <span>{post.likes}</span>\n            </button>\n            \n            <button \n              onClick={() => onComment(post.id)}\n              className=\"flex items-center space-x-1 text-sm text-gray-500 hover:text-blue-600\"\n            >\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\" />\n              </svg>\n              <span>{post.comments}</span>\n            </button>\n            \n            <button \n              onClick={() => onShare(post.id)}\n              className=\"flex items-center space-x-1 text-sm text-gray-500 hover:text-green-600\"\n            >\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m9.032 4.026a3 3 0 10-5.464 0m5.464 0a3 3 0 10-5.464 0M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n              <span>{post.shares}</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nVirtualizedPostItem.displayName = 'VirtualizedPostItem';\n\n/**\n * Auto-sizing text area with virtualization support\n */\nexport const VirtualizedTextArea = memo(({ \n  value, \n  onChange, \n  placeholder,\n  maxLength = 5000,\n  className = '',\n}: unknown) => {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  \n  const adjustHeight = useCallback(() => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto';\n      textarea.style.height = `${textarea.scrollHeight}px`;\n    }\n  }, []);\n\n  React.useEffect(() => {\n    adjustHeight();\n  }, [value, adjustHeight]);\n\n  return (\n    <div className=\"relative\">\n      <textarea\n        ref={textareaRef}\n        value={value}\n        onChange={(e) => {\n          onChange(e.target.value);\n          adjustHeight();\n        }}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        className={`w-full resize-none overflow-hidden ${className}`}\n        rows={1}\n      />\n      <span className=\"absolute bottom-2 right-2 text-xs text-gray-400\">\n        {value.length}/{maxLength}\n      </span>\n    </div>\n  );\n});\n\nVirtualizedTextArea.displayName = 'VirtualizedTextArea';","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\professional\\AppointmentBooking.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":161,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4323,4326],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4323,4326],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '@/utils/logger';\nimport React, { useState, useEffect } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport {\r\n  Calendar,\r\n  _Clock,\r\n  CreditCard,\r\n  User,\r\n  _Phone,\r\n  _Mail,\r\n  Shield,\r\n  CheckCircle,\r\n  ArrowLeft,\r\n  ArrowRight,\r\n  AlertTriangle,\r\n  _FileText,\r\n  Video,\r\n  MapPin,\r\n  _Users\r\n} from 'lucide-react';\r\nimport { therapistService } from '../../services/professional/TherapistService';\r\n\r\ninterface AppointmentBookingProps {\r\n  therapistId: string;\r\n  onClose: () => void;\r\n  onSuccess: (appointmentId: string) => void;\r\n}\r\n\r\ninterface TimeSlot {\r\n  _time: string;\r\n  available: boolean;\r\n  type: 'morning' | 'afternoon' | 'evening';\r\n}\r\n\r\ninterface BookingStep {\r\n  id: number;\r\n  title: string;\r\n  completed: boolean;\r\n}\r\n\r\nconst BOOKING_STEPS: BookingStep[] = [\r\n  { id: 1, title: 'Select Date & Time', completed: false },\r\n  { id: 2, title: 'Session Details', completed: false },\r\n  { id: 3, title: 'Personal Information', completed: false },\r\n  { id: 4, title: 'Insurance & Payment', completed: false },\r\n  { id: 5, title: 'Confirmation', completed: false }\r\n];\r\n\r\nconst generateTimeSlots = (_date: Date): TimeSlot[] => {\r\n  const slots: TimeSlot[] = [];\r\n  const startHour = 9;\r\n  const endHour = 17;\r\n  \r\n  for (let hour = startHour; hour < endHour; hour++) {\r\n    for (let minute = 0; minute < 60; minute += 50) {\r\n      const _time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\r\n      const type = hour < 12 ? 'morning' : hour < 17 ? 'afternoon' : 'evening';\r\n      const available = Math.random() > 0.3; // 70% availability rate\r\n      \r\n      slots.push({ _time, available, type });\r\n    }\r\n  }\r\n  \r\n  return slots;\r\n};\r\n\r\nconst getNextSevenDays = () => {\r\n  const days = [];\r\n  const today = new Date();\r\n  \r\n  for (let i = 1; i <= 7; i++) {\r\n    const date = new Date(today);\r\n    date.setDate(today.getDate() + i);\r\n    days.push(date);\r\n  }\r\n  \r\n  return days;\r\n};\r\n\r\nexport function AppointmentBooking({ therapistId, onClose, onSuccess }: AppointmentBookingProps) {\r\n  const [currentStep, _setCurrentStep] = useState(1);\r\n  const [selectedDate, _setSelectedDate] = useState<Date | null>(null);\r\n  const [selectedTime, _setSelectedTime] = useState<string>('');\r\n  const [_availableDays, _setAvailableDays] = useState<Date[]>([]);\r\n  const [_timeSlots, _setTimeSlots] = useState<TimeSlot[]>([]);\r\n  const [loading, _setLoading] = useState(false);\r\n  const [therapist, _setTherapist] = useState<unknown>(null);\r\n  \r\n  // Form data\r\n  const [formData, _setFormData] = useState({\r\n    sessionType: 'initial',\r\n    format: 'video',\r\n    reason: '',\r\n    concerns: '',\r\n    // Personal info\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    phone: '',\r\n    dateOfBirth: '',\r\n    emergencyContact: {\r\n      name: '',\r\n      phone: ''\r\n    },\r\n    // Insurance\r\n    hasInsurance: true,\r\n    insuranceProvider: '',\r\n    memberId: '',\r\n    groupNumber: '',\r\n    paymentMethod: 'insurance'\r\n  });\r\n\r\n  useEffect(() => {\r\n    setAvailableDays(getNextSevenDays());\r\n    // Load therapist data\r\n    const loadTherapist = async () => {\r\n      // In production, fetch from API\r\n      setTherapist({\r\n        id: therapistId,\r\n        name: 'Dr. Sarah Chen, PhD',\r\n        sessionRate: 180,\r\n        insuranceAccepted: ['Blue Cross Blue Shield', 'Aetna', 'United Healthcare']\r\n      });\r\n    };\r\n    loadTherapist();\r\n  }, [therapistId]);\r\n\r\n  useEffect(() => {\r\n    if (selectedDate) {\r\n      setTimeSlots(generateTimeSlots(selectedDate));\r\n    }\r\n  }, [selectedDate]);\r\n\r\n  const handleDateSelect = (date: Date) => {\r\n    setSelectedDate(date);\r\n    setSelectedTime('');\r\n  };\r\n\r\n  const handleTimeSelect = (_time: string) => {\r\n    setSelectedTime(_time);\r\n  };\r\n\r\n  const nextStep = () => {\r\n    if (currentStep < BOOKING_STEPS.length) {\r\n      setCurrentStep(currentStep + 1);\r\n    }\r\n  };\r\n\r\n  const prevStep = () => {\r\n    if (currentStep > 1) {\r\n      setCurrentStep(currentStep - 1);\r\n    }\r\n  };\r\n\r\n  const updateFormData = (field: string, value: unknown) => {\r\n    if (field.includes('.')) {\r\n      const [parent, child] = field.split('.');\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        [parent as keyof typeof formData]: {\r\n          ...(prev[parent as keyof typeof prev] as Record<string, any> || {}),\r\n          [child as string]: value\r\n        }\r\n      }));\r\n    } else {\r\n      setFormData(prev => ({ ...prev, [field as keyof typeof formData]: value }));\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // In production, submit to booking API\r\n      const appointmentId = await therapistService.bookAppointment({\r\n        therapistId,\r\n        patientId: 'user-1',\r\n        date: selectedDate!,\r\n        _time: selectedTime,\r\n        duration: 50,\r\n        type: formData.sessionType as unknown,\r\n        format: formData.format as unknown,\r\n        reason: formData.reason,\r\n        insurance: formData.hasInsurance ? {\r\n          provider: formData.insuranceProvider,\r\n          memberId: formData.memberId,\r\n          groupNumber: formData.groupNumber\r\n        } : undefined,\r\n        paymentMethod: formData.paymentMethod as unknown\r\n      });\r\n      \r\n      onSuccess(appointmentId.id);\r\n    } catch {\r\n      logger.error('Booking failed:');\r\n      // Handle undefined\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const canProceedToNext = () => {\r\n    switch (_currentStep) {\r\n      case 1:\r\n        return selectedDate && selectedTime;\r\n      case 2:\r\n        return formData.sessionType && formData.format;\r\n      case 3:\r\n        return formData.firstName && formData.lastName && formData.email && formData.phone;\r\n      case 4:\r\n        return formData.hasInsurance ? \r\n          (formData.insuranceProvider && formData.memberId) : \r\n          formData.paymentMethod;\r\n      default:\r\n        return true;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\r\n      <motion.div\r\n        initial={{ opacity: 0, scale: 0.95 }}\r\n        animate={{ opacity: 1, scale: 1 }}\r\n        exit={{ opacity: 0, scale: 0.95 }}\r\n        className=\"bg-white rounded-2xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden\"\r\n      >\r\n        {/* Header */}\r\n        <div className=\"bg-gradient-to-r from-blue-600 to-green-600 text-white p-6\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <h2 className=\"text-2xl font-bold\">Book Appointment</h2>\r\n              <p className=\"text-blue-100\">with {therapist?.name || 'Professional Therapist'}</p>\r\n            </div>\r\n            <button\r\n              onClick={onClose}\r\n              className=\"p-2 hover:bg-white/20 rounded-full transition-colors\"\r\n            >\r\n              ×\r\n            </button>\r\n          </div>\r\n          \r\n          {/* Progress Steps */}\r\n          <div className=\"mt-6 flex items-center justify-between\">\r\n            {BOOKING_STEPS.map((step, index) => (\r\n              <div key={step.id} className=\"flex items-center\">\r\n                <div className={`flex items-center justify-center w-8 h-8 rounded-full border-2 ${\r\n                  currentStep >= step.id \r\n                    ? 'bg-white text-blue-600 border-white' \r\n                    : 'border-blue-300 text-blue-200'\r\n                }`}>\r\n                  {currentStep > step.id ? (\r\n                    <CheckCircle className=\"w-5 h-5\" />\r\n                  ) : (\r\n                    <span className=\"text-sm font-medium\">{step.id}</span>\r\n                  )}\r\n                </div>\r\n                {index < BOOKING_STEPS.length - 1 && (\r\n                  <div className={`w-12 h-0.5 mx-2 ${\r\n                    currentStep > step.id ? 'bg-white' : 'bg-blue-300'\r\n                  }`} />\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Content */}\r\n        <div className=\"p-6 overflow-y-auto max-h-[calc(90vh-200px)]\">\r\n          <AnimatePresence mode=\"wait\">\r\n            {/* Step 1: Date & Time Selection */}\r\n            {currentStep === 1 && (\r\n              <motion.div\r\n                key=\"step1\"\r\n                initial={{ opacity: 0, x: 20 }}\r\n                animate={{ opacity: 1, x: 0 }}\r\n                exit={{ opacity: 0, x: -20 }}\r\n              >\r\n                <h3 className=\"text-xl font-semibold mb-6\">Select Date & Time</h3>\r\n                \r\n                {/* Date Selection */}\r\n                <div className=\"mb-8\">\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-3\" htmlFor=\"has-insurance\">Available Dates</label>\r\n                  <div className=\"grid grid-cols-7 gap-2\">\r\n                    {availableDays.map((date, index) => {\r\n                      const isSelected = selectedDate?.toDateString() === date.toDateString();\r\n                      const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });\r\n                      const dayNumber = date.getDate();\r\n                      \r\n                      return (\r\n                        <button\r\n                          key={index}\r\n                          onClick={() => handleDateSelect(date)}\r\n                          className={`p-3 rounded-lg text-center transition-colors ${\r\n                            isSelected\r\n                              ? 'bg-blue-600 text-white'\r\n                              : 'bg-gray-100 hover:bg-gray-200 text-gray-700'\r\n                          }`}\r\n                        >\r\n                          <div className=\"text-xs font-medium\">{dayName}</div>\r\n                          <div className=\"text-lg font-bold\">{dayNumber}</div>\r\n                        </button>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Time Selection */}\r\n                {selectedDate && (\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-3\" htmlFor=\"has-insurance\">\r\n                      Available Times for {selectedDate.toLocaleDateString()}\r\n                    </label>\r\n                    <div className=\"grid grid-cols-3 gap-4\">\r\n                      {['morning', 'afternoon', 'evening'].map(period => {\r\n                        const periodSlots = timeSlots.filter(slot => slot.type === period && slot.available);\r\n                        if (periodSlots.length === 0) return null;\r\n                        \r\n                        return (\r\n                          <div key={period} className=\"space-y-2\">\r\n                            <h4 className=\"text-sm font-medium text-gray-600 capitalize\">{period}</h4>\r\n                            <div className=\"space-y-2\">\r\n                              {periodSlots.map(slot => (\r\n                                <button\r\n                                  key={slot._time}\r\n                                  onClick={() => handleTimeSelect(slot._time)}\r\n                                  className={`w-full p-2 rounded-md text-sm transition-colors ${\r\n                                    selectedTime === slot._time\r\n                                      ? 'bg-blue-600 text-white'\r\n                                      : 'bg-gray-100 hover:bg-gray-200 text-gray-700'\r\n                                  }`}\r\n                                >\r\n                                  {slot._time}\r\n                                </button>\r\n                              ))}\r\n                            </div>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </motion.div>\r\n            )}\r\n\r\n            {/* Step 2: Session Details */}\r\n            {currentStep === 2 && (\r\n              <motion.div\r\n                key=\"step2\"\r\n                initial={{ opacity: 0, x: 20 }}\r\n                animate={{ opacity: 1, x: 0 }}\r\n                exit={{ opacity: 0, x: -20 }}\r\n                className=\"space-y-6\"\r\n              >\r\n                <h3 className=\"text-xl font-semibold\">Session Details</h3>\r\n                \r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-3\" htmlFor=\"has-insurance\">Session Type</label>\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    {[\r\n                      { value: 'initial', label: 'Initial Consultation', description: 'First _time meeting' },\r\n                      { value: 'followup', label: 'Follow-up Session', description: 'Continuing treatment' }\r\n                    ].map(option => (\r\n                      <button\r\n                        key={option.value}\r\n                        onClick={() => updateFormData('sessionType', option.value)}\r\n                        className={`p-4 rounded-lg border-2 text-left transition-colors ${\r\n                          formData.sessionType === option.value\r\n                            ? 'border-blue-500 bg-blue-50'\r\n                            : 'border-gray-200 hover:border-gray-300'\r\n                        }`}\r\n                      >\r\n                        <div className=\"font-medium\">{option.label}</div>\r\n                        <div className=\"text-sm text-gray-600\">{option.description}</div>\r\n                      </button>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-3\" htmlFor=\"has-insurance\">Session Format</label>\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    {[\r\n                      { value: 'video', label: 'Video Call', icon: Video, description: 'Secure video session' },\r\n                      { value: 'in-person', label: 'In-Person', icon: MapPin, description: 'Office visit' }\r\n                    ].map(option => {\r\n                      const Icon = option.icon;\r\n                      return (\r\n                        <button\r\n                          key={option.value}\r\n                          onClick={() => updateFormData('format', option.value)}\r\n                          className={`p-4 rounded-lg border-2 text-left transition-colors ${\r\n                            formData.format === option.value\r\n                              ? 'border-blue-500 bg-blue-50'\r\n                              : 'border-gray-200 hover:border-gray-300'\r\n                          }`}\r\n                        >\r\n                          <div className=\"flex items-center gap-2 mb-2\">\r\n                            <Icon className=\"w-5 h-5\" />\r\n                            <span className=\"font-medium\">{option.label}</span>\r\n                          </div>\r\n                          <div className=\"text-sm text-gray-600\">{option.description}</div>\r\n                        </button>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\" htmlFor=\"has-insurance\">Reason for Visit (_Optional)</label>\r\n                  <textarea\r\n                    value={formData.reason}\r\n                    onChange={(e) => updateFormData('reason', e.target.value)}\r\n                    rows={3}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                    placeholder=\"Briefly describe what you&apos;d like to discuss...\"\r\n                  />\r\n                </div>\r\n              </motion.div>\r\n            )}\r\n\r\n            {/* Step 3: Personal Information */}\r\n            {currentStep === 3 && (\r\n              <motion.div\r\n                key=\"step3\"\r\n                initial={{ opacity: 0, x: 20 }}\r\n                animate={{ opacity: 1, x: 0 }}\r\n                exit={{ opacity: 0, x: -20 }}\r\n                className=\"space-y-6\"\r\n              >\r\n                <h3 className=\"text-xl font-semibold\">Personal Information</h3>\r\n                \r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\" htmlFor=\"has-insurance\">First Name *</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      value={formData.firstName}\r\n                      onChange={(e) => updateFormData('firstName', e.target.value)}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                      required\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\" htmlFor=\"has-insurance\">Last Name *</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      value={formData.lastName}\r\n                      onChange={(e) => updateFormData('lastName', e.target.value)}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                      required\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\" htmlFor=\"has-insurance\">Email *</label>\r\n                    <input\r\n                      type=\"email\"\r\n                      value={formData.email}\r\n                      onChange={(e) => updateFormData('email', e.target.value)}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                      required\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\" htmlFor=\"has-insurance\">Phone *</label>\r\n                    <input\r\n                      type=\"tel\"\r\n                      value={formData.phone}\r\n                      onChange={(e) => updateFormData('phone', e.target.value)}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                      required\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\" htmlFor=\"has-insurance\">Date of Birth</label>\r\n                  <input\r\n                    type=\"date\"\r\n                    value={formData.dateOfBirth}\r\n                    onChange={(e) => updateFormData('dateOfBirth', e.target.value)}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"border-t pt-4\">\r\n                  <h4 className=\"font-medium text-gray-900 mb-4\">Emergency Contact (_Optional)</h4>\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\" htmlFor=\"has-insurance\">Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        value={formData.emergencyContact.name}\r\n                        onChange={(e) => updateFormData('emergencyContact.name', e.target.value)}\r\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\" htmlFor=\"has-insurance\">Phone</label>\r\n                      <input\r\n                        type=\"tel\"\r\n                        value={formData.emergencyContact.phone}\r\n                        onChange={(e) => updateFormData('emergencyContact.phone', e.target.value)}\r\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </motion.div>\r\n            )}\r\n\r\n            {/* Step 4: Insurance & Payment */}\r\n            {currentStep === 4 && (\r\n              <motion.div\r\n                key=\"step4\"\r\n                initial={{ opacity: 0, x: 20 }}\r\n                animate={{ opacity: 1, x: 0 }}\r\n                exit={{ opacity: 0, x: -20 }}\r\n                className=\"space-y-6\"\r\n              >\r\n                <h3 className=\"text-xl font-semibold\">Insurance & Payment</h3>\r\n                \r\n                <div className=\"bg-blue-50 p-4 rounded-lg\">\r\n                  <div className=\"flex items-center gap-2 mb-2\">\r\n                    <CreditCard className=\"w-5 h-5 text-blue-600\" />\r\n                    <span className=\"font-medium text-blue-900\">Session Rate: ${therapist?.sessionRate || 180}</span>\r\n                  </div>\r\n                  <p className=\"text-sm text-blue-700\">Standard 50-minute therapy session</p>\r\n                </div>\r\n\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <input\r\n                      type=\"radio\"\r\n                      id=\"has-insurance\"\r\n                      name=\"insurance-option\"\r\n                      checked={formData.hasInsurance}\r\n                      onChange={(e) => updateFormData('hasInsurance', e.target.checked)}\r\n                      className=\"w-4 h-4 text-blue-600 focus:ring-blue-500\"\r\n                    />\r\n                    <label htmlFor=\"has-insurance\" className=\"font-medium\">I have insurance</label>\r\n                  </div>\r\n\r\n                  {formData.hasInsurance && (\r\n                    <div className=\"ml-7 space-y-4 p-4 bg-gray-50 rounded-lg\">\r\n                      <div>\r\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\" htmlFor=\"has-insurance\">Insurance Provider *</label>\r\n                        <select\r\n                          value={formData.insuranceProvider}\r\n                          onChange={(e) => updateFormData('insuranceProvider', e.target.value)}\r\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                          required\r\n                        >\r\n                          <option value=\"\">Select provider...</option>\r\n                          {therapist?.insuranceAccepted?.map((provider: string) => (\r\n                            <option key={provider} value={provider}>{provider}</option>\r\n                          ))}\r\n                        </select>\r\n                      </div>\r\n\r\n                      <div className=\"grid grid-cols-2 gap-4\">\r\n                        <div>\r\n                          <label className=\"block text-sm font-medium text-gray-700 mb-2\" htmlFor=\"has-insurance\">Member ID *</label>\r\n                          <input\r\n                            type=\"text\"\r\n                            value={formData.memberId}\r\n                            onChange={(e) => updateFormData('memberId', e.target.value)}\r\n                            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                            required\r\n                          />\r\n                        </div>\r\n                        <div>\r\n                          <label className=\"block text-sm font-medium text-gray-700 mb-2\" htmlFor=\"has-insurance\">Group Number</label>\r\n                          <input\r\n                            type=\"text\"\r\n                            value={formData.groupNumber}\r\n                            onChange={(e) => updateFormData('groupNumber', e.target.value)}\r\n                            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className=\"bg-green-50 p-3 rounded-md\">\r\n                        <p className=\"text-sm text-green-700\">\r\n                          <CheckCircle className=\"w-4 h-4 inline mr-1\" />\r\n                          Your insurance is accepted. Typical copay: $25-50\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <input\r\n                      type=\"radio\"\r\n                      id=\"self-pay\"\r\n                      name=\"insurance-option\"\r\n                      checked={!formData.hasInsurance}\r\n                      onChange={(e) => updateFormData('hasInsurance', !e.target.checked)}\r\n                      className=\"w-4 h-4 text-blue-600 focus:ring-blue-500\"\r\n                    />\r\n                    <label htmlFor=\"self-pay\" className=\"font-medium\">I&apos;ll pay out-of-pocket</label>\r\n                  </div>\r\n\r\n                  {!formData.hasInsurance && (\r\n                    <div className=\"ml-7 space-y-4 p-4 bg-gray-50 rounded-lg\">\r\n                      <div className=\"space-y-2\">\r\n                        {[\r\n                          { value: 'full-rate', label: `Full Rate - $${therapist?.sessionRate || 180}` },\r\n                          { value: 'sliding-scale', label: 'Sliding Scale - Based on income' }\r\n                        ].map(option => (\r\n                          <label key={option.value} className=\"flex items-center gap-3\" htmlFor=\"has-insurance\">\r\n                            <input\r\n                              type=\"radio\"\r\n                              name=\"payment-method\"\r\n                              value={option.value}\r\n                              checked={formData.paymentMethod === option.value}\r\n                              onChange={(e) => updateFormData('paymentMethod', e.target.value)}\r\n                              className=\"w-4 h-4 text-blue-600 focus:ring-blue-500\"\r\n                            />\r\n                            <span>{option.label}</span>\r\n                          </label>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </motion.div>\r\n            )}\r\n\r\n            {/* Step 5: Confirmation */}\r\n            {currentStep === 5 && (\r\n              <motion.div\r\n                key=\"step5\"\r\n                initial={{ opacity: 0, x: 20 }}\r\n                animate={{ opacity: 1, x: 0 }}\r\n                exit={{ opacity: 0, x: -20 }}\r\n                className=\"space-y-6\"\r\n              >\r\n                <h3 className=\"text-xl font-semibold\">Confirm Your Appointment</h3>\r\n                \r\n                <div className=\"bg-gradient-to-r from-blue-50 to-green-50 p-6 rounded-lg\">\r\n                  <div className=\"space-y-4\">\r\n                    <div className=\"flex items-center gap-3\">\r\n                      <Calendar className=\"w-5 h-5 text-blue-600\" />\r\n                      <span className=\"font-medium\">\r\n                        {selectedDate?.toLocaleDateString('en-US', { \r\n                          weekday: 'long', \r\n                          year: 'numeric', \r\n                          month: 'long', \r\n                          day: 'numeric' \r\n                        })} at {selectedTime}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-3\">\r\n                      <User className=\"w-5 h-5 text-blue-600\" />\r\n                      <span>{therapist?.name}</span>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-3\">\r\n                      {formData.format === 'video' ? (\r\n                        <Video className=\"w-5 h-5 text-blue-600\" />\r\n                      ) : (\r\n                        <MapPin className=\"w-5 h-5 text-blue-600\" />\r\n                      )}\r\n                      <span>{formData.format === 'video' ? 'Video Session' : 'In-Person Session'}</span>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-3\">\r\n                      <CreditCard className=\"w-5 h-5 text-blue-600\" />\r\n                      <span>\r\n                        {formData.hasInsurance \r\n                          ? `Insurance: ${formData.insuranceProvider}` \r\n                          : `Payment: ${formData.paymentMethod === 'sliding-scale' ? 'Sliding Scale' : `$${therapist?.sessionRate}`}`\r\n                        }\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"bg-yellow-50 border border-yellow-200 p-4 rounded-lg\">\r\n                  <div className=\"flex items-start gap-3\">\r\n                    <AlertTriangle className=\"w-5 h-5 text-yellow-600 flex-shrink-0 mt-0.5\" />\r\n                    <div className=\"space-y-2\">\r\n                      <p className=\"font-medium text-yellow-800\">Please Note:</p>\r\n                      <ul className=\"text-sm text-yellow-700 space-y-1 ml-4 list-disc\">\r\n                        <li>You&apos;ll receive a confirmation email within 5 minutes</li>\r\n                        <li>Please arrive 10 minutes early (or join video call early)</li>\r\n                        <li>Cancellations must be made 24 hours in advance</li>\r\n                        <li>A secure video link will be sent before your session</li>\r\n                      </ul>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex items-center gap-2 p-4 bg-green-50 rounded-lg\">\r\n                  <Shield className=\"w-5 h-5 text-green-600\" />\r\n                  <span className=\"text-sm text-green-700\">\r\n                    Your information is encrypted and HIPAA-compliant\r\n                  </span>\r\n                </div>\r\n              </motion.div>\r\n            )}\r\n          </AnimatePresence>\r\n        </div>\r\n\r\n        {/* Footer */}\r\n        <div className=\"border-t bg-gray-50 px-6 py-4 flex items-center justify-between\">\r\n          <button\r\n            onClick={prevStep}\r\n            disabled={currentStep === 1}\r\n            className=\"flex items-center gap-2 px-4 py-2 text-gray-600 hover:text-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n          >\r\n            <ArrowLeft className=\"w-4 h-4\" />\r\n            Previous\r\n          </button>\r\n\r\n          <div className=\"flex items-center gap-3\">\r\n            {currentStep < BOOKING_STEPS.length ? (\r\n              <button\r\n                onClick={nextStep}\r\n                disabled={!canProceedToNext()}\r\n                className=\"flex items-center gap-2 bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n              >\r\n                Next\r\n                <ArrowRight className=\"w-4 h-4\" />\r\n              </button>\r\n            ) : (\r\n              <button\r\n                onClick={handleSubmit}\r\n                disabled={loading || !canProceedToNext()}\r\n                className=\"flex items-center gap-2 bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n              >\r\n                {loading ? (\r\n                  <>\r\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\r\n                    Booking...\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <CheckCircle className=\"w-4 h-4\" />\r\n                    Confirm Booking\r\n                  </>\r\n                )}\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </motion.div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\professional\\CareTeamCommunication.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\professional\\MedicationSmartReminders.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'generateInitialReminders' function makes the dependencies of useEffect Hook (at line 170) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'generateInitialReminders' in its own useCallback() Hook.","line":172,"column":9,"nodeType":"VariableDeclarator","endLine":212,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport {\r\n  Bell,\r\n  Clock,\r\n  _Calendar,\r\n  Smartphone,\r\n  Watch,\r\n  Volume2,\r\n  _VolumeX,\r\n  Settings,\r\n  BrainCircuit,\r\n  TrendingUp,\r\n  AlertTriangle,\r\n  CheckCircle,\r\n  XCircle,\r\n  Pill,\r\n  _Coffee,\r\n  _Sun,\r\n  _Moon,\r\n  Activity,\r\n  Target,\r\n  Zap,\r\n  ChevronRight,\r\n  Play,\r\n  _Pause,\r\n  _RotateCcw,\r\n  MapPin,\r\n  User,\r\n  _HeartPulse,\r\n  FileText,\r\n  Lightbulb\r\n} from 'lucide-react';\r\n\r\ninterface SmartReminderProps {\r\n  _userId: string;\r\n  medications: unknown[];\r\n  _onUpdateReminders: (reminders: SmartReminder[]) => void;\r\n}\r\n\r\ninterface SmartReminder {\r\n  id: string;\r\n  medicationId: string;\r\n  _type: 'time' | 'location' | 'context' | 'adaptive' | 'emergency';\r\n  enabled: boolean;\r\n  settings: ReminderSettings;\r\n  intelligence: ReminderIntelligence;\r\n  effectiveness: number; // 0-1\r\n  lastTriggered?: Date;\r\n  successRate: number; // 0-1\r\n  userFeedback: 'helpful' | 'annoying' | 'neutral';\r\n}\r\n\r\ninterface ReminderSettings {\r\n  // Time-based\r\n  times?: string[];\r\n  advanceNotice?: number; // _minutes\r\n  snoozeOptions?: number[]; // _minutes\r\n  \r\n  // Location-based\r\n  locations?: LocationTrigger[];\r\n  geofenceRadius?: number; // meters\r\n  \r\n  // Context-aware\r\n  contextTriggers?: ContextTrigger[];\r\n  \r\n  // Adaptive\r\n  adaptToRoutine?: boolean;\r\n  learnFromBehavior?: boolean;\r\n  personalizeContent?: boolean;\r\n  \r\n  // Delivery methods\r\n  pushNotification?: boolean;\r\n  sms?: boolean;\r\n  email?: boolean;\r\n  smartWatch?: boolean;\r\n  \r\n  // Sound and vibration\r\n  soundEnabled?: boolean;\r\n  customSound?: string;\r\n  vibrationPattern?: 'gentle' | 'strong' | 'custom';\r\n  \r\n  // Escalation\r\n  escalationEnabled?: boolean;\r\n  escalationDelay?: number; // _minutes\r\n  escalationContacts?: string[];\r\n}\r\n\r\ninterface LocationTrigger {\r\n  id: string;\r\n  name: string;\r\n  latitude: number;\r\n  longitude: number;\r\n  trigger: 'enter' | 'exit';\r\n  description: string;\r\n}\r\n\r\ninterface ContextTrigger {\r\n  id: string;\r\n  _type: 'meal' | 'exercise' | 'bedtime' | 'work' | 'stress' | 'mood';\r\n  condition: string;\r\n  description: string;\r\n}\r\n\r\ninterface ReminderIntelligence {\r\n  // Pattern recognition\r\n  optimalTimes?: string[];\r\n  adherencePatterns?: AdherencePattern[];\r\n  \r\n  // Personalization\r\n  preferredChannels?: string[];\r\n  responseLatency?: number; // average time to respond\r\n  \r\n  // Smart features\r\n  moodCorrelation?: number; // -1 to 1\r\n  sideEffectPrediction?: number; // 0-1\r\n  dosageOptimization?: DosageRecommendation;\r\n  \r\n  // Learning\r\n  adaptationHistory?: AdaptationEvent[];\r\n  confidenceScore?: number; // 0-1\r\n}\r\n\r\ninterface AdherencePattern {\r\n  pattern: string;\r\n  confidence: number;\r\n  impact: number; // effect on adherence\r\n  recommendation: string;\r\n}\r\n\r\ninterface DosageRecommendation {\r\n  currentEffectiveness: number;\r\n  suggestedChanges: string[];\r\n  reasoning: string;\r\n  confidence: number;\r\n}\r\n\r\ninterface AdaptationEvent {\r\n  date: Date;\r\n  trigger: string;\r\n  action: string;\r\n  result: string;\r\n  effectiveness: number;\r\n}\r\n\r\ninterface AIInsight {\r\n  _type: 'pattern' | 'optimization' | 'warning' | 'success';\r\n  title: string;\r\n  description: string;\r\n  confidence: number;\r\n  actionable: boolean;\r\n  actions?: string[];\r\n}\r\n\r\nexport function MedicationSmartReminders({ \r\n  _userId, \r\n  medications, \r\n  _onUpdateReminders \r\n}: SmartReminderProps) {\r\n  const [reminders, _setReminders] = useState<SmartReminder[]>([]);\r\n  const [activeTab, _setActiveTab] = useState<'overview' | 'configure' | '_insights' | 'history'>('overview');\r\n  const [__selectedMedication, _setSelectedMedication] = useState<string | null>(null);\r\n  const [isLearningMode, _setIsLearningMode] = useState(true);\r\n  const [aiInsights, _setAiInsights] = useState<AIInsight[]>([]);\r\n  const [reminderTest, _setReminderTest] = useState<{ active: boolean; _type: string } | null>(null);\r\n\r\n  useEffect(() => {\r\n    generateInitialReminders();\r\n    generateAIInsights();\r\n  }, [medications, generateInitialReminders]);\r\n\r\n  const generateInitialReminders = () => {\r\n    const _initialReminders: SmartReminder[] = medications.map((med, index) => ({\r\n      id: `reminder-${med.id}`,\r\n      medicationId: med.id,\r\n      _type: 'adaptive',\r\n      enabled: true,\r\n      settings: {\r\n        times: med.schedule?.map((s: unknown) => s.time) || ['08:00'],\r\n        advanceNotice: 15,\r\n        snoozeOptions: [5, 10, 30],\r\n        adaptToRoutine: true,\r\n        learnFromBehavior: true,\r\n        personalizeContent: true,\r\n        pushNotification: true,\r\n        soundEnabled: true,\r\n        vibrationPattern: 'gentle',\r\n        escalationEnabled: true,\r\n        escalationDelay: 60\r\n      },\r\n      intelligence: {\r\n        optimalTimes: med.schedule?.map((s: unknown) => s.time) || ['08:00'],\r\n        adherencePatterns: [\r\n          {\r\n            pattern: `Better adherence when taken with ${index % 2 === 0 ? 'breakfast' : 'dinner'}`,\r\n            confidence: 0.75 + Math.random() * 0.2,\r\n            impact: 0.3 + Math.random() * 0.4,\r\n            recommendation: `Consider scheduling with ${index % 2 === 0 ? 'morning' : 'evening'} meal`\r\n          }\r\n        ],\r\n        preferredChannels: ['push', 'vibration'],\r\n        responseLatency: 5 + Math.random() * 15,\r\n        moodCorrelation: (Math.random() - 0.5) * 0.8,\r\n        confidenceScore: 0.6 + Math.random() * 0.3\r\n      },\r\n      effectiveness: 0.7 + Math.random() * 0.25,\r\n      successRate: 0.65 + Math.random() * 0.3,\r\n      userFeedback: Math.random() > 0.7 ? 'helpful' : Math.random() > 0.5 ? 'neutral' : 'annoying'\r\n    }));\r\n\r\n    setReminders(_initialReminders);\r\n  };\r\n\r\n  const generateAIInsights = () => {\r\n    const _insights: AIInsight[] = [\r\n      {\r\n        _type: 'pattern',\r\n        title: 'Optimal Timing Discovered',\r\n        description: 'Your medication adherence is 23% higher when taken within 30 _minutes of breakfast.',\r\n        confidence: 0.87,\r\n        actionable: true,\r\n        actions: ['Adjust reminder to 8:15 AM', 'Link reminder to meal tracking']\r\n      },\r\n      {\r\n        _type: 'optimization',\r\n        title: 'Smart Scheduling Opportunity',\r\n        description: 'Consolidating your 8 AM and 8:30 AM medications into a single reminder could improve adherence.',\r\n        confidence: 0.74,\r\n        actionable: true,\r\n        actions: ['Create combined reminder', 'Test for 2 weeks']\r\n      },\r\n      {\r\n        _type: 'warning',\r\n        title: 'Missed Dose Pattern',\r\n        description: 'You\\'ve missed your evening medication 4 times this week, typically on busy weekdays.',\r\n        confidence: 0.92,\r\n        actionable: true,\r\n        actions: ['Enable location-based reminders', 'Add backup reminder 2 _hours later']\r\n      },\r\n      {\r\n        _type: 'success',\r\n        title: 'Improvement Detected',\r\n        description: 'Your medication adherence has improved 18% since enabling smart reminders.',\r\n        confidence: 0.95,\r\n        actionable: false\r\n      }\r\n    ];\r\n\r\n    setAiInsights(_insights);\r\n  };\r\n\r\n  const testReminder = (_type: string) => {\r\n    setReminderTest({ active: true, _type });\r\n    \r\n    // Simulate reminder\r\n    if ('Notification' in window) {\r\n      new Notification('Medication Reminder', {\r\n        body: 'Time to take your medication!',\r\n        icon: '/medication-icon.png',\r\n        requireInteraction: true\r\n      });\r\n    }\r\n\r\n    // Auto-dismiss test after 5 seconds\r\n    setTimeout(() => {\r\n      setReminderTest(null);\r\n    }, 5000);\r\n  };\r\n\r\n  const getReminderTypeIcon = (_type: string) => {\r\n    switch (_type) {\r\n      case 'time': return <Clock className=\"w-5 _h-5\" />;\r\n      case 'location': return <MapPin className=\"w-5 _h-5\" />;\r\n      case 'context': return <Activity className=\"w-5 _h-5\" />;\r\n      case 'adaptive': return <BrainCircuit className=\"w-5 _h-5\" />;\r\n      case 'emergency': return <AlertTriangle className=\"w-5 _h-5\" />;\r\n      default: return <Bell className=\"w-5 _h-5\" />;\r\n    }\r\n  };\r\n\r\n  const getEffectivenessColor = (score: number) => {\r\n    if (score >= 0.8) return 'text-green-600';\r\n    if (score >= 0.6) return 'text-yellow-600';\r\n    return 'text-red-600';\r\n  };\r\n\r\n  const getInsightIcon = (_type: string) => {\r\n    switch (_type) {\r\n      case 'pattern': return <TrendingUp className=\"w-5 _h-5 text-blue-500\" />;\r\n      case 'optimization': return <Target className=\"w-5 _h-5 text-purple-500\" />;\r\n      case 'warning': return <AlertTriangle className=\"w-5 _h-5 text-red-500\" />;\r\n      case 'success': return <CheckCircle className=\"w-5 _h-5 text-green-500\" />;\r\n      default: return <Lightbulb className=\"w-5 _h-5 text-yellow-500\" />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-4xl mx-auto p-6 bg-gray-50 min-h-screen\">\r\n      {/* Header */}\r\n      <div className=\"mb-8\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\r\n              <BrainCircuit className=\"w-8 h-8 mr-3 text-blue-600\" />\r\n              Smart Medication Reminders\r\n            </h1>\r\n            <p className=\"text-gray-600 mt-2\">\r\n              AI-powered reminders that learn from your habits and optimize for better adherence\r\n            </p>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center gap-3\">\r\n            <div className=\"flex items-center gap-2 bg-white px-4 py-2 rounded-lg shadow-sm\">\r\n              <div className={`w-3 _h-3 rounded-full ${isLearningMode ? 'bg-green-500' : 'bg-gray-300'}`}></div>\r\n              <span className=\"text-sm font-medium\">Learning Mode</span>\r\n              <button\r\n                onClick={() => setIsLearningMode(!isLearningMode)}\r\n                className=\"ml-2 text-blue-600 hover:text-blue-700\"\r\n              >\r\n                <Settings className=\"w-4 h-4\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Quick Stats */}\r\n        <div className=\"grid grid-cols-4 gap-4 mt-6\">\r\n          <div className=\"bg-white p-4 rounded-xl shadow-sm\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-gray-600\">Active Reminders</p>\r\n                <p className=\"text-2xl font-bold text-gray-900\">{reminders.filter(r => r.enabled).length}</p>\r\n              </div>\r\n              <Bell className=\"w-8 h-8 text-blue-500\" />\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white p-4 rounded-xl shadow-sm\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-gray-600\">Success Rate</p>\r\n                <p className=\"text-2xl font-bold text-green-600\">\r\n                  {Math.round(reminders.reduce((acc, r) => acc + r.successRate, 0) / reminders.length * 100)}%\r\n                </p>\r\n              </div>\r\n              <Target className=\"w-8 h-8 text-green-500\" />\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white p-4 rounded-xl shadow-sm\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-gray-600\">AI Insights</p>\r\n                <p className=\"text-2xl font-bold text-purple-600\">{aiInsights.length}</p>\r\n              </div>\r\n              <Lightbulb className=\"w-8 h-8 text-purple-500\" />\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white p-4 rounded-xl shadow-sm\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-gray-600\">Effectiveness</p>\r\n                <p className=\"text-2xl font-bold text-blue-600\">\r\n                  {Math.round(reminders.reduce((acc, r) => acc + r.effectiveness, 0) / reminders.length * 100)}%\r\n                </p>\r\n              </div>\r\n              <TrendingUp className=\"w-8 h-8 text-blue-500\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Navigation Tabs */}\r\n      <div className=\"flex space-x-1 mb-6 bg-white rounded-lg p-1 shadow-sm\">\r\n        {[\r\n          { id: 'overview', label: 'Overview', icon: Activity },\r\n          { id: 'configure', label: 'Configure', icon: Settings },\r\n          { id: '_insights', label: 'AI Insights', icon: BrainCircuit },\r\n          { id: 'history', label: 'History', icon: FileText }\r\n        ].map(tab => {\r\n          const Icon = tab.icon;\r\n          return (\r\n            <button\r\n              key={tab.id}\r\n              onClick={() => setActiveTab(tab.id as unknown)}\r\n              className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-colors ${\r\n                activeTab === tab.id\r\n                  ? 'bg-blue-600 text-white'\r\n                  : 'text-gray-600 hover:text-gray-900'\r\n              }`}\r\n            >\r\n              <Icon className=\"w-4 h-4\" />\r\n              {tab.label}\r\n              {tab.id === '_insights' && aiInsights.filter(i => i.actionable).length > 0 && (\r\n                <span className=\"bg-red-500 text-white text-xs px-1.5 py-0.5 rounded-full\">\r\n                  {aiInsights.filter(i => i.actionable).length}\r\n                </span>\r\n              )}\r\n            </button>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {/* Tab Content */}\r\n      <AnimatePresence mode=\"wait\">\r\n        {/* Overview Tab */}\r\n        {activeTab === 'overview' && (\r\n          <motion.div\r\n            key=\"overview\"\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: -20 }}\r\n            className=\"space-y-6\"\r\n          >\r\n            {/* Active Reminders */}\r\n            <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n              <h2 className=\"text-xl font-semibold mb-4\">Active Reminders</h2>\r\n              <div className=\"space-y-4\">\r\n                {reminders.filter(r => r.enabled).map(reminder => {\r\n                  const medication = medications.find(m => m.id === reminder.medicationId);\r\n                  return (\r\n                    <motion.div\r\n                      key={reminder.id}\r\n                      initial={{ opacity: 0, x: -10 }}\r\n                      animate={{ opacity: 1, x: 0 }}\r\n                      className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\"\r\n                    >\r\n                      <div className=\"flex items-center gap-4\">\r\n                        <div className=\"p-2 bg-blue-100 rounded-lg\">\r\n                          {getReminderTypeIcon(reminder._type)}\r\n                        </div>\r\n                        <div>\r\n                          <h3 className=\"font-medium text-gray-900\">{medication?.name}</h3>\r\n                          <p className=\"text-sm text-gray-600\">\r\n                            {reminder.settings.times?.join(', ')} • {reminder._type} reminder\r\n                          </p>\r\n                          <div className=\"flex items-center gap-2 mt-1\">\r\n                            <span className={`text-xs font-medium ${getEffectivenessColor(reminder.effectiveness)}`}>\r\n                              {Math.round(reminder.effectiveness * 100)}% effective\r\n                            </span>\r\n                            <span className=\"text-xs text-gray-500\">\r\n                              • {Math.round(reminder.successRate * 100)}% success rate\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      <div className=\"flex items-center gap-2\">\r\n                        <button\r\n                          onClick={() => testReminder(reminder._type)}\r\n                          className=\"p-2 text-gray-500 hover:text-gray-700\"\r\n                          title=\"Test reminder\"\r\n                        >\r\n                          <Play className=\"w-4 h-4\" />\r\n                        </button>\r\n                        <button\r\n                          onClick={() => setSelectedMedication(reminder.medicationId)}\r\n                          className=\"p-2 text-gray-500 hover:text-gray-700\"\r\n                          title=\"Configure\"\r\n                        >\r\n                          <Settings className=\"w-4 h-4\" />\r\n                        </button>\r\n                      </div>\r\n                    </motion.div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Today&apos;s Schedule */}\r\n            <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n              <h2 className=\"text-xl font-semibold mb-4\">Today&apos;s Schedule</h2>\r\n              <div className=\"space-y-3\">\r\n                {medications.flatMap(med => \r\n                  med.schedule?.map((sched: unknown, idx: number) => {\r\n                    const now = new Date();\r\n                    const [_hours, _minutes] = sched.time.split(':');\r\n                    const schedTime = new Date();\r\n                    schedTime.setHours(parseInt(_hours), parseInt(_minutes), 0, 0);\r\n                    const isPast = schedTime < now;\r\n                    const isNext = !isPast && schedTime.getTime() === Math._min(\r\n                      ...medications.flatMap((m: unknown) => \r\n                        m.schedule?.map((s: unknown) => {\r\n                          const [_h, _min] = s.time.split(':');\r\n                          const t = new Date();\r\n                          t.setHours(parseInt(_h), parseInt(_min), 0, 0);\r\n                          return t > now ? t.getTime() : Infinity;\r\n                        }) || []\r\n                      ).filter(t => t !== Infinity)\r\n                    );\r\n\r\n                    return (\r\n                      <div\r\n                        key={`${med.id}-${idx}`}\r\n                        className={`flex items-center gap-4 p-3 rounded-lg ${\r\n                          isPast ? 'bg-gray-50' : isNext ? 'bg-blue-50 border border-blue-200' : 'bg-white border border-gray-200'\r\n                        }`}\r\n                      >\r\n                        <div className={`p-2 rounded-lg ${\r\n                          isPast ? 'bg-gray-200' : isNext ? 'bg-blue-100' : 'bg-green-100'\r\n                        }`}>\r\n                          {isPast ? (\r\n                            sched.taken ? <CheckCircle className=\"w-5 _h-5 text-green-600\" /> : <XCircle className=\"w-5 _h-5 text-red-600\" />\r\n                          ) : (\r\n                            <Pill className={`w-5 _h-5 ${isNext ? 'text-blue-600' : 'text-green-600'}`} />\r\n                          )}\r\n                        </div>\r\n                        <div className=\"flex-1\">\r\n                          <p className=\"font-medium text-gray-900\">{med.name}</p>\r\n                          <p className=\"text-sm text-gray-600\">{med.dosage} • {sched.time}</p>\r\n                        </div>\r\n                        {isNext && (\r\n                          <div className=\"flex items-center gap-1 text-blue-600 text-sm font-medium\">\r\n                            <Clock className=\"w-4 _h-4\" />\r\n                            Next\r\n                          </div>\r\n                        )}\r\n                        {isPast && sched.taken && (\r\n                          <div className=\"text-green-600 text-sm\">\r\n                            ✓ Taken\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    );\r\n                  }) || []\r\n                )}\r\n              </div>\r\n            </div>\r\n          </motion.div>\r\n        )}\r\n\r\n        {/* Configure Tab */}\r\n        {activeTab === 'configure' && (\r\n          <motion.div\r\n            key=\"configure\"\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: -20 }}\r\n            className=\"space-y-6\"\r\n          >\r\n            {/* Test Reminder */}\r\n            <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n              <h2 className=\"text-xl font-semibold mb-4\">Test Reminders</h2>\r\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n                {[\r\n                  { _type: 'push', label: 'Push Notification', icon: Smartphone },\r\n                  { _type: 'sound', label: 'Sound Alert', icon: Volume2 },\r\n                  { _type: 'vibration', label: 'Vibration', icon: Watch },\r\n                  { _type: 'voice', label: 'Voice Reminder', icon: User }\r\n                ].map(test => {\r\n                  const Icon = test.icon;\r\n                  return (\r\n                    <button\r\n                      key={test._type}\r\n                      onClick={() => testReminder(test._type)}\r\n                      disabled={reminderTest?.active && reminderTest._type === test._type}\r\n                      className={`p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors ${\r\n                        reminderTest?.active && reminderTest._type === test._type ? 'bg-blue-50 border-blue-300' : ''\r\n                      }`}\r\n                    >\r\n                      <Icon className=\"w-6 h-6 mx-auto mb-2 text-gray-600\" />\r\n                      <p className=\"text-sm font-medium text-gray-900\">{test.label}</p>\r\n                      {reminderTest?.active && reminderTest._type === test._type && (\r\n                        <p className=\"text-xs text-blue-600 mt-1\">Testing...</p>\r\n                      )}\r\n                    </button>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Smart Features */}\r\n            <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n              <h2 className=\"text-xl font-semibold mb-4\">Smart Features</h2>\r\n              <div className=\"space-y-4\">\r\n                {[\r\n                  {\r\n                    id: 'adaptive',\r\n                    title: 'Adaptive Timing',\r\n                    description: 'AI learns your optimal medication times based on your routine',\r\n                    icon: BrainCircuit,\r\n                    enabled: true\r\n                  },\r\n                  {\r\n                    id: 'location',\r\n                    title: 'Location-Based Reminders',\r\n                    description: 'Get reminders when you arrive at or leave specific places',\r\n                    icon: MapPin,\r\n                    enabled: false\r\n                  },\r\n                  {\r\n                    id: 'context',\r\n                    title: 'Context-Aware Alerts',\r\n                    description: 'Reminders based on your activities, meals, and mood',\r\n                    icon: Activity,\r\n                    enabled: true\r\n                  },\r\n                  {\r\n                    id: 'escalation',\r\n                    title: 'Smart Escalation',\r\n                    description: 'Automatically notify emergency contacts if medication is consistently missed',\r\n                    icon: AlertTriangle,\r\n                    enabled: false\r\n                  }\r\n                ].map(feature => {\r\n                  const Icon = feature.icon;\r\n                  return (\r\n                    <div key={feature.id} className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\">\r\n                      <div className=\"flex items-center gap-4\">\r\n                        <div className=\"p-2 bg-gray-100 rounded-lg\">\r\n                          <Icon className=\"w-5 h-5 text-gray-600\" />\r\n                        </div>\r\n                        <div>\r\n                          <h3 className=\"font-medium text-gray-900\">{feature.title}</h3>\r\n                          <p className=\"text-sm text-gray-600\">{feature.description}</p>\r\n                        </div>\r\n                      </div>\r\n                      <label className=\"flex items-center\">\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          checked={feature.enabled}\r\n                          onChange={() => {}}\r\n                          className=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500\"\r\n                          aria-label={`Toggle ${feature.title}`}\r\n                        />\r\n                      </label>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          </motion.div>\r\n        )}\r\n\r\n        {/* AI Insights Tab */}\r\n        {activeTab === '_insights' && (\r\n          <motion.div\r\n            key=\"_insights\"\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: -20 }}\r\n            className=\"space-y-6\"\r\n          >\r\n            <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n              <h2 className=\"text-xl font-semibold mb-4\">AI-Generated Insights</h2>\r\n              <div className=\"space-y-4\">\r\n                {aiInsights.map((insight, index) => (\r\n                  <motion.div\r\n                    key={index}\r\n                    initial={{ opacity: 0, y: 10 }}\r\n                    animate={{ opacity: 1, y: 0 }}\r\n                    transition={{ delay: index * 0.1 }}\r\n                    className=\"p-4 border border-gray-200 rounded-lg\"\r\n                  >\r\n                    <div className=\"flex items-start gap-4\">\r\n                      <div className=\"flex-shrink-0\">\r\n                        {getInsightIcon(insight._type)}\r\n                      </div>\r\n                      <div className=\"flex-1\">\r\n                        <div className=\"flex items-center gap-2 mb-2\">\r\n                          <h3 className=\"font-medium text-gray-900\">{insight.title}</h3>\r\n                          <span className=\"px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full\">\r\n                            {Math.round(insight.confidence * 100)}% confidence\r\n                          </span>\r\n                        </div>\r\n                        <p className=\"text-gray-600 text-sm mb-3\">{insight.description}</p>\r\n                        \r\n                        {insight.actionable && insight.actions && (\r\n                          <div className=\"space-y-2\">\r\n                            <p className=\"text-sm font-medium text-gray-900\">Recommended Actions:</p>\r\n                            <div className=\"space-y-1\">\r\n                              {insight.actions.map((action, actionIndex) => (\r\n                                <div key={actionIndex} className=\"flex items-center gap-2\">\r\n                                  <button className=\"text-sm text-blue-600 hover:text-blue-700 font-medium\">\r\n                                    {action}\r\n                                  </button>\r\n                                  <ChevronRight className=\"w-3 h-3 text-gray-400\" />\r\n                                </div>\r\n                              ))}\r\n                            </div>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </motion.div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </motion.div>\r\n        )}\r\n\r\n        {/* History Tab */}\r\n        {activeTab === 'history' && (\r\n          <motion.div\r\n            key=\"history\"\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: -20 }}\r\n            className=\"space-y-6\"\r\n          >\r\n            <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n              <h2 className=\"text-xl font-semibold mb-4\">Reminder History</h2>\r\n              <div className=\"space-y-3\">\r\n                {[...Array(10)].map((_, index) => (\r\n                  <div key={index} className=\"flex items-center gap-4 p-3 border-l-4 border-blue-200 bg-blue-50 rounded-r-lg\">\r\n                    <div className=\"flex-shrink-0\">\r\n                      {index % 3 === 0 ? (\r\n                        <CheckCircle className=\"w-5 _h-5 text-green-600\" />\r\n                      ) : index % 3 === 1 ? (\r\n                        <Clock className=\"w-5 _h-5 text-yellow-600\" />\r\n                      ) : (\r\n                        <XCircle className=\"w-5 _h-5 text-red-600\" />\r\n                      )}\r\n                    </div>\r\n                    <div className=\"flex-1\">\r\n                      <p className=\"font-medium text-gray-900\">\r\n                        {medications[index % medications.length]?.name || 'Medication'} reminder\r\n                      </p>\r\n                      <p className=\"text-sm text-gray-600\">\r\n                        {index % 3 === 0 ? 'Taken on time' : index % 3 === 1 ? 'Snoozed for 15 _minutes' : 'Missed dose'}\r\n                        • {Math.floor(Math.random() * 5) + 1} hours ago\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n\r\n      {/* Floating Action Button for Emergency */}\r\n      <motion.button\r\n        initial={{ scale: 0 }}\r\n        animate={{ scale: 1 }}\r\n        whileTap={{ scale: 0.9 }}\r\n        className=\"fixed bottom-6 right-6 w-14 h-14 bg-red-600 text-white rounded-full shadow-lg hover:bg-red-700 transition-colors\"\r\n        title=\"Emergency Override\"\r\n      >\r\n        <Zap className=\"w-6 h-6 mx-auto\" />\r\n      </motion.button>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\professional\\ProfessionalSupport.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\professional\\TherapistFinder.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\professional\\TherapistProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\professional\\TherapySessionLogger.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\professional\\TreatmentPlanManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\profile\\Profile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\pwa\\PWAInstallPrompt.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\settings\\Settings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\theme\\WellnessThemeProvider.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":14,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":14,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { wellnessTheme } from '../../styles/wellness-theme';\r\n\r\ninterface ThemeContextType {\r\n  theme: 'light' | 'dark';\r\n  toggleTheme: () => void;\r\n  getGradient: (type: string) => string;\r\n  getToolGradient: (tool: string) => string;\r\n  applyComponentStyles: (component: string, variant?: string, size?: string) => string;\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextType | undefined>(_undefined);\r\n\r\nexport const useWellnessTheme = () => {\r\n  const context = useContext(_ThemeContext);\r\n  if (!context) {\r\n    throw new Error('useWellnessTheme must be used within a WellnessThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface WellnessThemeProviderProps {\r\n  children: React.ReactNode;\r\n  _defaultTheme?: 'light' | 'dark';\r\n}\r\n\r\nexport const WellnessThemeProvider: React.FC<WellnessThemeProviderProps> = ({\r\n  children,\r\n  _defaultTheme = 'light'\r\n}) => {\r\n  const [theme, _setTheme] = useState<'light' | 'dark'>(_defaultTheme);\r\n\r\n  // Load theme from localStorage on mount\r\n  useEffect(() => {\r\n    const _savedTheme = localStorage.getItem('wellness-theme') as 'light' | 'dark' | null;\r\n    if (_savedTheme) {\r\n      setTheme(_savedTheme);\r\n    }\r\n  }, []);\r\n\r\n  // Apply theme class to document root\r\n  useEffect(() => {\r\n    const root = document.documentElement;\r\n    if (theme === 'dark') {\r\n      root.classList.add('dark');\r\n    } else {\r\n      root.classList.remove('dark');\r\n    }\r\n    localStorage.setItem('wellness-theme', theme);\r\n  }, [theme]);\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\r\n  };\r\n\r\n  const getGradient = (type: string) => {\r\n    const gradients = wellnessTheme.gradients as unknown;\r\n    return `bg-gradient-to-r ${gradients[type] || gradients.primary}`;\r\n  };\r\n\r\n  const getToolGradient = (tool: string) => {\r\n    const tools = wellnessTheme.gradients.tools as unknown;\r\n    return `bg-gradient-to-r ${tools[tool] || wellnessTheme.gradients.primary}`;\r\n  };\r\n\r\n  const applyComponentStyles = (component: string, variant?: string, size?: string) => {\r\n    const comp = (wellnessTheme.components as unknown)[component];\r\n    if (!comp) return '';\r\n    \r\n    let styles = comp.base || '';\r\n    \r\n    if (variant && comp.variants) {\r\n      styles += ` ${  comp.variants[variant]}`;\r\n    }\r\n    \r\n    if (size && comp.sizes) {\r\n      styles += ` ${  comp.sizes[size]}`;\r\n    }\r\n    \r\n    return styles;\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{\r\n      theme,\r\n      toggleTheme,\r\n      getGradient,\r\n      getToolGradient,\r\n      applyComponentStyles\r\n    }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\ui\\ConsoleLoader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\ui\\EnhancedLayout.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":77,"column":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ReactNode, useEffect, useState } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { \r\n  Menu, X, AlertTriangle, Search, User, Settings, LogOut, \r\n  Home, _BarChart3, Heart, Users, Stethoscope, _Bell, \r\n  ChevronDown, Star, Clock, Command, Accessibility,\r\n  Sparkles, _Moon, _Sun, _ChevronLeft, Phone, MessageCircle,\r\n  Wind, Timer, BookOpen, _Activity\r\n} from 'lucide-react';\r\nimport { NavigationProvider, useNavigation } from '../navigation/NavigationContext';\r\nimport { GlobalSearch } from '../navigation/GlobalSearch';\r\nimport { Breadcrumbs, MobileBreadcrumbs } from '../navigation/Breadcrumbs';\r\nimport { FloatingCrisisButton, MobileCrisisButton } from '../navigation/FloatingCrisisButton';\r\nimport { _MobileNavigation } from './MobileNavigation';\r\nimport { useEnhancedKeyboardNavigation } from '../../hooks/useEnhancedKeyboardNavigation';\r\nimport { useAuth } from '../../hooks/useAuth';\r\nimport { _PrivacyBanner, _FreeBadge } from './PrivacyBanner';\r\nimport { toast } from 'react-hot-toast';\r\n\r\ninterface EnhancedLayoutProps {\r\n  children: ReactNode;\r\n}\r\n\r\n// Skip links for accessibility\r\nfunction SkipLinks() {\r\n  return (\r\n    <div className=\"sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 z-50\">\r\n      <a \r\n        href=\"#main-content\" \r\n        className=\"bg-primary-600 text-white px-4 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500\"\r\n      >\r\n        Skip to main content\r\n      </a>\r\n      <a \r\n        href=\"#main-navigation\" \r\n        className=\"bg-primary-600 text-white px-4 py-2 rounded-md ml-2 focus:outline-none focus:ring-2 focus:ring-primary-500\"\r\n      >\r\n        Skip to navigation\r\n      </a>\r\n      <a \r\n        href=\"#crisis-help\" \r\n        className=\"bg-red-600 text-white px-4 py-2 rounded-md ml-2 focus:outline-none focus:ring-2 focus:ring-red-500\"\r\n      >\r\n        Skip to crisis help\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\n// User menu dropdown\r\nfunction UserMenu() {\r\n  const { user, logout } = useAuth();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const { _preferences, favoriteRoutes } = useNavigation();\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      <button\r\n        onClick={() => setIsOpen(!isOpen)}\r\n        className=\"flex items-center space-x-2 px-3 py-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-all duration-200\"\r\n        aria-label=\"User menu\"\r\n        aria-expanded={isOpen}\r\n      >\r\n        <div className=\"w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white font-semibold\">\r\n          {user?.name?.charAt(0) || 'U'}\r\n        </div>\r\n        <ChevronDown className={`h-4 w-4 text-gray-600 dark:text-gray-400 transition-transform ${isOpen ? 'rotate-180' : ''}`} />\r\n      </button>\r\n\r\n      <AnimatePresence>\r\n        {isOpen && (\r\n          <>\r\n            {/* Backdrop */}\r\n            <div \r\n              className=\"fixed inset-0 z-30\"\r\n              onClick={() = onKeyDown={(e) = role=\"button\" tabIndex={0}> { if (e.key === \"Enter\" || e.key === \" \") { e.preventDefault(); () => setIsOpen(false)(e); } }} role=\"button\" tabIndex={0}> setIsOpen(false)}\r\n            />\r\n            \r\n            {/* Dropdown */}\r\n            <motion.div\r\n              initial={{ opacity: 0, y: -10 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              exit={{ opacity: 0, y: -10 }}\r\n              className=\"absolute right-0 mt-2 w-64 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 z-40\"\r\n            >\r\n              {/* User info */}\r\n              <div className=\"px-4 py-3 border-b border-gray-200 dark:border-gray-700\">\r\n                <div className=\"font-semibold text-gray-900 dark:text-white\">{user?.name || 'Guest User'}</div>\r\n                <div className=\"text-sm text-gray-500 dark:text-gray-400\">{user?.email || 'Not signed in'}</div>\r\n              </div>\r\n\r\n              {/* Favorite routes */}\r\n              {favoriteRoutes.length > 0 && (\r\n                <div className=\"px-2 py-2 border-b border-gray-200\">\r\n                  <div className=\"px-2 py-1 text-xs font-semibold text-gray-500\">FAVORITES</div>\r\n                  {favoriteRoutes.slice(0, 3).map(route => (\r\n                    <Link\r\n                      key={route}\r\n                      to={route}\r\n                      onClick={() => setIsOpen(false)}\r\n                      className=\"flex items-center px-2 py-1.5 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors\"\r\n                    >\r\n                      <Star className=\"h-3 w-3 mr-2 text-yellow-500\" />\r\n                      {route.split('/').pop() || 'Dashboard'}\r\n                    </Link>\r\n                  ))}\r\n                </div>\r\n              )}\r\n\r\n              {/* Menu items */}\r\n              <div className=\"px-2 py-2\">\r\n                <Link\r\n                  to=\"/profile\"\r\n                  onClick={() => setIsOpen(false)}\r\n                  className=\"flex items-center px-2 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-lg\"\r\n                >\r\n                  <User className=\"h-4 w-4 mr-3\" />\r\n                  Profile\r\n                </Link>\r\n                <Link\r\n                  to=\"/settings\"\r\n                  onClick={() => setIsOpen(false)}\r\n                  className=\"flex items-center px-2 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-lg\"\r\n                >\r\n                  <Settings className=\"h-4 w-4 mr-3\" />\r\n                  Settings\r\n                </Link>\r\n                <button\r\n                  onClick={() => {\r\n                    const _event = new CustomEvent('showKeyboardHelp');\r\n                    window.dispatchEvent(_event);\r\n                    setIsOpen(false);\r\n                  }}\r\n                  className=\"w-full flex items-center px-2 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-lg\"\r\n                >\r\n                  <Command className=\"h-4 w-4 mr-3\" />\r\n                  Keyboard Shortcuts\r\n                </button>\r\n                <Link\r\n                  to=\"/accessibility\"\r\n                  onClick={() => setIsOpen(false)}\r\n                  className=\"flex items-center px-2 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-lg\"\r\n                >\r\n                  <Accessibility className=\"h-4 w-4 mr-3\" />\r\n                  Accessibility\r\n                </Link>\r\n              </div>\r\n\r\n              {/* Logout */}\r\n              <div className=\"px-2 py-2 border-t border-gray-200\">\r\n                <button\r\n                  onClick={() => {\r\n                    logout();\r\n                    setIsOpen(false);\r\n                    toast.success('Logged out successfully');\r\n                  }}\r\n                  className=\"w-full flex items-center px-2 py-2 text-sm text-red-600 hover:bg-red-50 rounded-lg\"\r\n                >\r\n                  <LogOut className=\"h-4 w-4 mr-3\" />\r\n                  Log Out\r\n                </button>\r\n              </div>\r\n            </motion.div>\r\n          </>\r\n        )}\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Quick access panel\r\nfunction _QuickAccessPanel() {\r\n  const { quickActions, recentRoutes } = useNavigation();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      <button\r\n        onClick={() => setIsOpen(!isOpen)}\r\n        className=\"p-2 rounded-lg hover:bg-gray-100 transition-colors\"\r\n        aria-label=\"Quick access\"\r\n      >\r\n        <Clock className=\"h-5 w-5 text-gray-600\" />\r\n      </button>\r\n\r\n      <AnimatePresence>\r\n        {isOpen && (\r\n          <>\r\n            <div \r\n              className=\"fixed inset-0 z-30\"\r\n              onClick={() = role=\"button\" tabIndex={0}> setIsOpen(false)}\r\n            />\r\n            \r\n            <motion.div\r\n              initial={{ opacity: 0, scale: 0.95 }}\r\n              animate={{ opacity: 1, scale: 1 }}\r\n              exit={{ opacity: 0, scale: 0.95 }}\r\n              className=\"absolute right-0 mt-2 w-72 bg-white rounded-xl shadow-lg border border-gray-200 z-40\"\r\n            >\r\n              <div className=\"p-4\">\r\n                <h3 className=\"font-semibold text-gray-900 mb-3\">Quick Actions</h3>\r\n                <div className=\"grid grid-cols-3 gap-2\">\r\n                  {quickActions.map((action, index) => (\r\n                    <button\r\n                      key={index}\r\n                      onClick={() => {\r\n                        action.action();\r\n                        setIsOpen(false);\r\n                      }}\r\n                      className=\"flex flex-col items-center p-3 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors\"\r\n                    >\r\n                      <span className=\"text-2xl mb-1\">{action.icon}</span>\r\n                      <span className=\"text-xs text-gray-600\">{action.label}</span>\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              {recentRoutes.length > 0 && (\r\n                <div className=\"border-t border-gray-200 p-4\">\r\n                  <h3 className=\"font-semibold text-gray-900 mb-3\">Recent Pages</h3>\r\n                  <div className=\"space-y-1\">\r\n                    {recentRoutes.slice(0, 5).map((route, index) => (\r\n                      <Link\r\n                        key={index}\r\n                        to={route}\r\n                        onClick={() => setIsOpen(false)}\r\n                        className=\"flex items-center px-2 py-1.5 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors\"\r\n                      >\r\n                        <Clock className=\"h-3 w-3 mr-2 text-gray-400\" />\r\n                        {route.split('/').pop() || 'Dashboard'}\r\n                      </Link>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </motion.div>\r\n          </>\r\n        )}\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Main enhanced layout component\r\nfunction EnhancedLayoutContent({ children }: EnhancedLayoutProps) {\r\n  const location = useLocation();\r\n  const { mode, _isSearchOpen, setSearchOpen, isMobileMenuOpen, setMobileMenuOpen, _preferences, _crisisDetected } = useNavigation();\r\n  const [__isInstallable, setIsInstallable] = useState(false);\r\n  const [deferredPrompt, setDeferredPrompt] = useState<unknown>(null);\r\n  const [_notificationCount] = useState(0);\r\n\r\n  // Enhanced keyboard navigation\r\n  useEnhancedKeyboardNavigation();\r\n\r\n  // Navigation items based on mode - Crisis-first design\r\n  const getNavigationItems = () => {\r\n    if (mode === 'crisis') {\r\n      // Simplified navigation for crisis mode\r\n      return [\r\n        { name: '🆘 Crisis Help', href: '/crisis', icon: <AlertTriangle className=\"h-5 w-5\" /> },\r\n        { name: '🌬️ Breathe', href: '/wellness/breathing', icon: <Wind className=\"h-5 w-5\" /> },\r\n        { name: '💬 Support', href: '/community', icon: <Users className=\"h-5 w-5\" /> },\r\n      ];\r\n    }\r\n    \r\n    // Normal navigation - Maximum 5 sections with emoji visual anchors\r\n    return [\r\n      { name: '🏠 Home', href: '/', icon: <Home className=\"h-5 w-5\" /> },\r\n      { name: '🧘 Wellness Tools', href: '/wellness', icon: <Heart className=\"h-5 w-5\" /> },\r\n      { name: '💬 Community Support', href: '/community', icon: <Users className=\"h-5 w-5\" /> },\r\n      { name: '👨⚕️ Find Professionals', href: '/professional', icon: <Stethoscope className=\"h-5 w-5\" /> },\r\n      { name: '⚙️ My Settings', href: '/settings', icon: <Settings className=\"h-5 w-5\" /> },\r\n    ];\r\n  };\r\n\r\n  const navigation = getNavigationItems();\r\n\r\n  const isActive = (path: string) => {\r\n    if (path === '/') {\r\n      return location.pathname === '/';\r\n    }\r\n    return location.pathname.startsWith(_path);\r\n  };\r\n\r\n  // PWA Install Prompt\r\n  useEffect(() => {\r\n    const handleBeforeInstallPrompt = (e: Event) => {\r\n      e.preventDefault();\r\n      setDeferredPrompt(_e);\r\n      setIsInstallable(true);\r\n    };\r\n\r\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\r\n    \r\n    return () => {\r\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\r\n    };\r\n  }, []);\r\n\r\n  const __handleInstallClick = async () => {\r\n    if (!deferredPrompt) return;\r\n    \r\n    deferredPrompt.prompt();\r\n    const { outcome } = await deferredPrompt.userChoice;\r\n    \r\n    if (outcome === 'accepted') {\r\n      setIsInstallable(false);\r\n      toast.success('App installed successfully!');\r\n    }\r\n    setDeferredPrompt(null);\r\n  };\r\n\r\n  return (\r\n    <div className={`h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 flex ${_preferences.highContrast ? 'high-contrast' : ''} ${mode === 'crisis' ? 'crisis-mode' : ''} relative overflow-hidden`}>\r\n      {/* Console Background Effects */}\r\n      <div className=\"fixed inset-0 pointer-events-none\">\r\n        <motion.div\r\n          animate={{\r\n            x: [0, 100, 0],\r\n            y: [0, -50, 0],\r\n          }}\r\n          transition={{\r\n            duration: 20,\r\n            repeat: Infinity,\r\n            ease: 'linear',\r\n          }}\r\n          className=\"absolute top-1/4 left-1/4 w-96 h-96 bg-gradient-to-r from-blue-500/5 to-purple-500/5 rounded-full blur-3xl\"\r\n        />\r\n        <motion.div\r\n          animate={{\r\n            x: [0, -150, 0],\r\n            y: [0, 100, 0],\r\n          }}\r\n          transition={{\r\n            duration: 25,\r\n            repeat: Infinity,\r\n            ease: 'linear',\r\n          }}\r\n          className=\"absolute bottom-1/4 right-1/3 w-80 h-80 bg-gradient-to-r from-green-500/5 to-blue-500/5 rounded-full blur-3xl\"\r\n        />\r\n      </div>\r\n\r\n      {/* Crisis Banner - Console Style */}\r\n      <div className=\"fixed top-0 left-0 right-0 z-50 bg-gradient-to-r from-red-600 via-pink-600 to-red-600 text-white px-4 py-3 backdrop-blur-md shadow-console-depth\">\r\n        <div className=\"flex items-center justify-center space-x-6 text-sm font-medium\">\r\n          <motion.span \r\n            animate={{ scale: [1, 1.05, 1] }}\r\n            transition={{ duration: 2, repeat: Infinity }}\r\n            className=\"flex items-center space-x-2\"\r\n          >\r\n            <AlertTriangle className=\"h-4 w-4\" />\r\n            <span>🆘 NEED HELP NOW?</span>\r\n          </motion.span>\r\n          <a \r\n            href=\"tel:988\" \r\n            className=\"flex items-center space-x-2 bg-white/20 hover:bg-white/30 px-4 py-2 rounded-console border border-white/20 hover:border-white/40 transition-all hover:scale-105\"\r\n          >\r\n            <Phone className=\"h-4 w-4\" />\r\n            <span>Call 988</span>\r\n          </a>\r\n          <Link \r\n            to=\"/crisis\" \r\n            className=\"flex items-center space-x-2 bg-white/20 hover:bg-white/30 px-4 py-2 rounded-console border border-white/20 hover:border-white/40 transition-all hover:scale-105\"\r\n          >\r\n            <MessageCircle className=\"h-4 w-4\" />\r\n            <span>Crisis Chat</span>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Skip Links */}\r\n      <SkipLinks />\r\n\r\n      {/* Console Sidebar Navigation - Mobile Enhanced */}\r\n      <motion.aside\r\n        animate={{ \r\n          width: isMobileMenuOpen ? 300 : 90,\r\n          x: window.innerWidth < 768 && !isMobileMenuOpen ? -90 : 0 // Hide on mobile when closed\r\n        }}\r\n        transition={{\r\n          duration: 0.2,\r\n          ease: 'easeInOut'\r\n        }}\r\n        className=\"bg-gradient-to-b from-gray-800/95 to-gray-900/95 border-r border-gray-700/50 flex-shrink-0 overflow-hidden backdrop-blur-console shadow-console-depth fixed z-50 md:relative md:z-30\"\r\n        style={{ \r\n          marginTop: '56px',\r\n          pointerEvents: 'auto'\r\n        }}\r\n      >\r\n        {/* Sidebar glow effect */}\r\n        <div className=\"absolute inset-0 bg-gradient-to-r from-blue-500/5 via-transparent to-purple-500/5 pointer-events-none\" />\r\n        \r\n        <div className=\"p-6 relative z-10\">\r\n          {/* Console Logo */}\r\n          <motion.div \r\n            className=\"flex items-center mb-10\"\r\n            whileHover={{ scale: 1.02 }}\r\n            transition={{ type: \"spring\", stiffness: 400, damping: 25 }}\r\n          >\r\n            <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-console-lg flex items-center justify-center flex-shrink-0 shadow-console-glow\">\r\n              <Sparkles className=\"w-7 h-7 text-white\" />\r\n            </div>\r\n            <motion.div\r\n              animate={{ opacity: isMobileMenuOpen ? 1 : 0 }}\r\n              className=\"ml-4 overflow-hidden\"\r\n            >\r\n              <h1 className=\"text-xl font-bold text-white mb-1\">\r\n                Astral Core\r\n              </h1>\r\n              <p className=\"text-sm text-gray-300\">Mental Health Console</p>\r\n            </motion.div>\r\n          </motion.div>\r\n\r\n          {/* Console Navigation */}\r\n          <nav className=\"space-y-3\">\r\n            {navigation.map((item, index) => {\r\n              const isActiveRoute = isActive(item.href);\r\n              return (\r\n                <motion.div\r\n                  key={item.name}\r\n                  initial={{ opacity: 0, x: -20 }}\r\n                  animate={{ opacity: 1, x: 0 }}\r\n                  transition={{ delay: index * 0.1 }}\r\n                >\r\n                  <Link\r\n                    to={item.href}\r\n                    className={`group flex items-center p-4 rounded-console-lg transition-all duration-300 relative overflow-hidden min-h-[56px] min-w-[56px] ${\r\n                      isActiveRoute\r\n                        ? 'bg-gradient-to-r from-blue-500/20 to-purple-500/20 text-white border border-blue-400/30 shadow-console-glow'\r\n                        : 'text-gray-300 hover:text-white hover:bg-gray-700/50 border border-gray-700/30 hover:border-gray-600/50'\r\n                    }`}\r\n                    style={{\r\n                      pointerEvents: 'auto',\r\n                      zIndex: 10\r\n                    }}\r\n                  >\r\n                    {/* Console tile background effect */}\r\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-blue-500/5 via-transparent to-purple-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\r\n                    \r\n                    <div className={`flex-shrink-0 p-2 rounded-console ${isActiveRoute ? 'bg-blue-500/20' : 'bg-gray-700/50 group-hover:bg-gray-600/50'} transition-colors duration-300`}>\r\n                      {item.icon}\r\n                    </div>\r\n                    \r\n                    <motion.div\r\n                      animate={{ opacity: isMobileMenuOpen ? 1 : 0, x: isMobileMenuOpen ? 0 : -10 }}\r\n                      className=\"ml-4 overflow-hidden relative z-10\"\r\n                    >\r\n                      <span className=\"font-medium text-sm\">\r\n                        {item.name}\r\n                      </span>\r\n                      {isActiveRoute && (\r\n                        <div className=\"w-full h-0.5 bg-gradient-to-r from-blue-400 to-purple-400 mt-1 rounded-full\" />\r\n                      )}\r\n                    </motion.div>\r\n\r\n                    {/* Active indicator */}\r\n                    {isActiveRoute && (\r\n                      <motion.div\r\n                        layoutId=\"activeNav\"\r\n                        className=\"absolute left-0 top-0 bottom-0 w-1 bg-gradient-to-b from-blue-400 to-purple-500 rounded-r-full\"\r\n                      />\r\n                    )}\r\n                  </Link>\r\n                </motion.div>\r\n              );\r\n            })}\r\n          </nav>\r\n\r\n          {/* Console Quick Wellness - Show when expanded */}\r\n          <motion.div\r\n            animate={{ opacity: isMobileMenuOpen ? 1 : 0, height: isMobileMenuOpen ? 'auto' : 0 }}\r\n            className=\"mt-8 overflow-hidden\"\r\n          >\r\n            <div className=\"flex items-center mb-4\">\r\n              <div className=\"h-px bg-gradient-to-r from-transparent via-gray-600 to-transparent flex-1\" />\r\n              <h3 className=\"text-xs font-semibold text-gray-400 uppercase tracking-wider mx-3\">\r\n                Quick Actions\r\n              </h3>\r\n              <div className=\"h-px bg-gradient-to-r from-transparent via-gray-600 to-transparent flex-1\" />\r\n            </div>\r\n            \r\n            <div className=\"space-y-2\">\r\n              <Link\r\n                to=\"/wellness/breathing\"\r\n                className=\"group flex items-center p-3 rounded-console text-gray-300 hover:text-white hover:bg-cyan-500/10 border border-gray-700/50 hover:border-cyan-400/30 transition-all duration-300 min-h-[56px] min-w-[56px]\"\r\n                style={{\r\n                  pointerEvents: 'auto',\r\n                  zIndex: 10\r\n                }}\r\n              >\r\n                <div className=\"p-1.5 bg-cyan-500/20 rounded-console\">\r\n                  <Wind className=\"h-4 w-4 text-cyan-400\" />\r\n                </div>\r\n                <span className=\"ml-3 text-sm font-medium\">Breathing</span>\r\n                <motion.div\r\n                  className=\"ml-auto opacity-0 group-hover:opacity-100\"\r\n                  initial={false}\r\n                  animate={{ x: 0 }}\r\n                  whileHover={{ x: 5 }}\r\n                >\r\n                  <div className=\"w-1.5 h-1.5 bg-cyan-400 rounded-full\" />\r\n                </motion.div>\r\n              </Link>\r\n              \r\n              <Link\r\n                to=\"/wellness/meditation\"\r\n                className=\"group flex items-center p-3 rounded-console text-gray-300 hover:text-white hover:bg-indigo-500/10 border border-gray-700/50 hover:border-indigo-400/30 transition-all duration-300 min-h-[56px] min-w-[56px]\"\r\n                style={{\r\n                  pointerEvents: 'auto',\r\n                  zIndex: 10\r\n                }}\r\n              >\r\n                <div className=\"p-1.5 bg-indigo-500/20 rounded-console\">\r\n                  <Timer className=\"h-4 w-4 text-indigo-400\" />\r\n                </div>\r\n                <span className=\"ml-3 text-sm font-medium\">Meditation</span>\r\n                <motion.div\r\n                  className=\"ml-auto opacity-0 group-hover:opacity-100\"\r\n                  initial={false}\r\n                  animate={{ x: 0 }}\r\n                  whileHover={{ x: 5 }}\r\n                >\r\n                  <div className=\"w-1.5 h-1.5 bg-indigo-400 rounded-full\" />\r\n                </motion.div>\r\n              </Link>\r\n              \r\n              <Link\r\n                to=\"/wellness/journal\"\r\n                className=\"group flex items-center p-3 rounded-console text-gray-300 hover:text-white hover:bg-green-500/10 border border-gray-700/50 hover:border-green-400/30 transition-all duration-300 min-h-[56px] min-w-[56px]\"\r\n                style={{\r\n                  pointerEvents: 'auto',\r\n                  zIndex: 10\r\n                }}\r\n              >\r\n                <div className=\"p-1.5 bg-green-500/20 rounded-console\">\r\n                  <BookOpen className=\"h-4 w-4 text-green-400\" />\r\n                </div>\r\n                <span className=\"ml-3 text-sm font-medium\">Journal</span>\r\n                <motion.div\r\n                  className=\"ml-auto opacity-0 group-hover:opacity-100\"\r\n                  initial={false}\r\n                  animate={{ x: 0 }}\r\n                  whileHover={{ x: 5 }}\r\n                >\r\n                  <div className=\"w-1.5 h-1.5 bg-green-400 rounded-full\" />\r\n                </motion.div>\r\n              </Link>\r\n            </div>\r\n          </motion.div>\r\n\r\n          {/* Console Bottom Actions */}\r\n          <motion.div\r\n            animate={{ opacity: isMobileMenuOpen ? 1 : 0 }}\r\n            className=\"absolute bottom-6 left-6 right-6\"\r\n          >\r\n            <div className=\"space-y-3\">\r\n              <button\r\n                onClick={() => setSearchOpen(true)}\r\n                className=\"w-full flex items-center p-3 rounded-console text-gray-300 hover:text-white hover:bg-gray-700/50 border border-gray-700/50 hover:border-gray-600/50 transition-all duration-300 group min-h-[56px] min-w-[56px]\"\r\n                style={{\r\n                  pointerEvents: 'auto',\r\n                  zIndex: 10\r\n                }}\r\n              >\r\n                <div className=\"p-1.5 bg-gray-700/50 group-hover:bg-gray-600/50 rounded-console transition-colors\">\r\n                  <Search className=\"h-4 w-4\" />\r\n                </div>\r\n                <span className=\"ml-3 text-sm font-medium\">Search Platform</span>\r\n              </button>\r\n              <UserMenu />\r\n            </div>\r\n          </motion.div>\r\n        </div>\r\n      </motion.aside>\r\n\r\n      {/* Console Main Content Area */}\r\n      <div className=\"flex-1 flex flex-col relative z-10\" style={{ marginTop: '56px' }}>\r\n        {/* Console Mobile Header - Enhanced Gaming Aesthetics */}\r\n        <header \r\n          id=\"main-navigation\"\r\n          className=\"bg-gradient-to-r from-gray-800/95 via-gray-850/95 to-gray-800/95 backdrop-blur-console border-b border-gray-700/50 px-4 py-3 lg:hidden shadow-console-card relative overflow-hidden\"\r\n        >\r\n          {/* Header gaming accent line */}\r\n          <div className=\"absolute top-0 left-0 right-0 h-px bg-gradient-to-r from-transparent via-console-accent to-transparent opacity-30\" />\r\n          \r\n          <div className=\"flex justify-between items-center relative z-10\">\r\n            {/* Mobile Console Title - Gaming Style */}\r\n            <motion.div \r\n              className=\"flex items-center space-x-3\"\r\n              whileHover={{ scale: 1.02 }}\r\n              transition={{ type: \"spring\", stiffness: 400, damping: 25 }}\r\n            >\r\n              <div className=\"w-10 h-10 bg-gradient-to-r from-console-accent to-blue-500 rounded-console-lg flex items-center justify-center shadow-console-glow relative\">\r\n                <Sparkles className=\"w-6 h-6 text-white\" />\r\n                <div className=\"absolute inset-0 bg-gradient-to-r from-console-accent/20 to-blue-500/20 rounded-console-lg blur-sm\" />\r\n              </div>\r\n              <div>\r\n                <h1 className=\"text-xl font-bold text-white tracking-wide\">\r\n                  ASTRAL CORE\r\n                </h1>\r\n                <p className=\"text-xs text-console-accent font-medium tracking-wider\">\r\n                  MENTAL HEALTH CONSOLE\r\n                </p>\r\n              </div>\r\n            </motion.div>\r\n\r\n            {/* Console Menu Toggle - Gaming Button */}\r\n            <motion.button\r\n              onClick={() => setMobileMenuOpen(!isMobileMenuOpen)}\r\n              className=\"console-focusable group relative p-3 rounded-console-lg text-gray-300 hover:text-white bg-gray-700/30 hover:bg-gray-600/40 border border-gray-600/50 hover:border-console-accent/50 transition-all duration-300 shadow-console-card min-h-[56px] min-w-[56px]\"\r\n              aria-label=\"Toggle console sidebar\"\r\n              aria-expanded={isMobileMenuOpen}\r\n              whileHover={{ scale: 1.05 }}\r\n              whileTap={{ scale: 0.95 }}\r\n              style={{\r\n                pointerEvents: 'auto',\r\n                zIndex: 20\r\n              }}\r\n            >\r\n              {/* Button glow effect */}\r\n              <div className=\"absolute inset-0 bg-gradient-to-r from-console-accent/10 to-blue-500/10 rounded-console-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\r\n              \r\n              <motion.div\r\n                animate={{ rotate: isMobileMenuOpen ? 180 : 0 }}\r\n                transition={{ duration: 0.3 }}\r\n                className=\"relative z-10\"\r\n              >\r\n                {isMobileMenuOpen ? (\r\n                  <X className=\"h-5 w-5\" />\r\n                ) : (\r\n                  <Menu className=\"h-5 w-5\" />\r\n                )}\r\n              </motion.div>\r\n            </motion.button>\r\n          </div>\r\n        </header>\r\n\r\n        {/* Console Breadcrumbs - Mobile Optimized */}\r\n        <div className=\"bg-gradient-to-r from-gray-800/40 via-gray-850/50 to-gray-800/40 backdrop-blur-console px-4 md:px-6 py-3 border-b border-gray-700/30 relative overflow-hidden\">\r\n          {/* Mobile breadcrumb accent */}\r\n          <div className=\"absolute bottom-0 left-0 right-0 h-px bg-gradient-to-r from-transparent via-console-accent/30 to-transparent\" />\r\n          \r\n          <div className=\"hidden md:block\">\r\n            <Breadcrumbs />\r\n          </div>\r\n          <div className=\"block md:hidden\">\r\n            <MobileBreadcrumbs />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Console Main Content - Mobile Enhanced */}\r\n        <main id=\"main-content\" className=\"flex-1 overflow-y-auto bg-transparent relative smooth-scroll\">\r\n          <motion.div\r\n            key={location.pathname}\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: -20 }}\r\n            transition={{ duration: _preferences.reducedMotion ? 0 : 0.4 }}\r\n            className=\"relative z-10 min-h-screen console-safe-area\"\r\n          >\r\n            {children}\r\n          </motion.div>\r\n          \r\n          {/* Mobile bottom padding for fixed nav */}\r\n          <div className=\"h-20 md:h-0\" /> {/* Safe area for mobile navigation */}\r\n        </main>\r\n      </div>\r\n\r\n      {/* Global Search */}\r\n      <GlobalSearch />\r\n      \r\n      {/* Mobile Console Navigation Overlay */}\r\n      <AnimatePresence>\r\n        {isMobileMenuOpen && (\r\n          <motion.div\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0 }}\r\n            className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-30 md:hidden\"\r\n            onClick={() => setMobileMenuOpen(false)}\r\n          />\r\n        )}\r\n      </AnimatePresence>\r\n      \r\n      {/* Floating Crisis Button - Mobile Enhanced */}\r\n      <FloatingCrisisButton />\r\n      <MobileCrisisButton />\r\n      \r\n      {/* Console Mobile Safe Area Styles */}\r\n      <style>{`\r\n        .console-safe-area {\r\n          padding-bottom: env(safe-area-inset-bottom, 0);\r\n        }\r\n        \r\n        @media (max-width: 768px) {\r\n          .console-safe-area {\r\n            padding-left: env(safe-area-inset-left, 0);\r\n            padding-right: env(safe-area-inset-right, 0);\r\n          }\r\n        }\r\n        \r\n        .backdrop-blur-console {\r\n          backdrop-filter: blur(_12px);\r\n          -webkit-backdrop-filter: blur(_12px);\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Export the wrapped component\r\nexport function EnhancedLayout({ children }: EnhancedLayoutProps) {\r\n  return (\r\n    <NavigationProvider>\r\n      <EnhancedLayoutContent>{children}</EnhancedLayoutContent>\r\n    </NavigationProvider>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\ui\\MobileNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\ui\\PrivacyBanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\wellness\\BreathingExercises.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\wellness\\MeditationTimer.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'stopAmbientSound'. Either include it or remove the dependency array.","line":149,"column":6,"nodeType":"ArrayExpression","endLine":149,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [stopAmbientSound]","fix":{"range":[4820,4822],"text":"[stopAmbientSound]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'volume'. Either include it or remove the dependency array.","line":179,"column":6,"nodeType":"ArrayExpression","endLine":179,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [volume]","fix":{"range":[5901,5903],"text":"[volume]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'playBell'. Either include it or remove the dependency array.","line":325,"column":6,"nodeType":"ArrayExpression","endLine":325,"endColumn":72,"suggestions":[{"desc":"Update the dependencies array to be: [stopAmbientSound, selectedType, duration, sessions, updateStreak, playBell]","fix":{"range":[10372,10438],"text":"[stopAmbientSound, selectedType, duration, sessions, updateStreak, playBell]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":667,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[24114,24133],"text":"\r\n                &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[24114,24133],"text":"\r\n                &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[24114,24133],"text":"\r\n                &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[24114,24133],"text":"\r\n                &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":667,"column":33,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[24148,24165],"text":"&quot;\r\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[24148,24165],"text":"&ldquo;\r\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[24148,24165],"text":"&#34;\r\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[24148,24165],"text":"&rdquo;\r\n              "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport {\r\n  Play,\r\n  Pause,\r\n  RotateCcw,\r\n  _Volume2,\r\n  VolumeX,\r\n  Settings,\r\n  Bell,\r\n  Music,\r\n  Headphones,\r\n  Timer,\r\n  TrendingUp,\r\n  Calendar,\r\n  Award,\r\n  _ChevronLeft,\r\n  _ChevronRight,\r\n  Zap,\r\n  Heart,\r\n  Brain,\r\n  Wind,\r\n  Star\r\n} from 'lucide-react';\r\nimport { secureStorage } from '../../services/security/SecureLocalStorage';\r\n\r\n// Meditation types and their benefits\r\nconst MEDITATION_TYPES = {\r\n  mindfulness: {\r\n    name: 'Mindfulness',\r\n    description: 'Present moment awareness',\r\n    icon: Brain,\r\n    color: 'from-blue-400 to-indigo-500',\r\n    benefits: ['Reduced stress', 'Better focus', 'Emotional regulation'],\r\n    defaultDuration: 10\r\n  },\r\n  loving_kindness: {\r\n    name: 'Loving Kindness',\r\n    description: 'Cultivate compassion',\r\n    icon: Heart,\r\n    color: 'from-pink-400 to-red-500',\r\n    benefits: ['Increased empathy', 'Self-compassion', 'Positive emotions'],\r\n    defaultDuration: 15\r\n  },\r\n  body_scan: {\r\n    name: 'Body Scan',\r\n    description: 'Progressive relaxation',\r\n    icon: Zap,\r\n    color: 'from-green-400 to-emerald-500',\r\n    benefits: ['Physical relaxation', 'Body awareness', 'Tension release'],\r\n    defaultDuration: 20\r\n  },\r\n  breath_focus: {\r\n    name: 'Breath Focus',\r\n    description: 'Anchor to breathing',\r\n    icon: Wind,\r\n    color: 'from-cyan-400 to-blue-500',\r\n    benefits: ['Calming', 'Concentration', 'Anxiety reduction'],\r\n    defaultDuration: 5\r\n  }\r\n};\r\n\r\n// Ambient sound options\r\nconst AMBIENT_SOUNDS = {\r\n  none: { name: 'Silence', icon: VolumeX },\r\n  rain: { name: 'Rain', icon: Music, frequency: 60, variation: 20 },\r\n  ocean: { name: 'Ocean Waves', icon: Music, frequency: 40, variation: 15 },\r\n  forest: { name: 'Forest', icon: Music, frequency: 80, variation: 30 },\r\n  singing_bowl: { name: 'Singing Bowl', icon: Bell, frequency: 256, variation: 0 },\r\n  white_noise: { name: 'White Noise', icon: Headphones, frequency: 0, variation: 0 }\r\n};\r\n\r\n// Bell intervals\r\nconst _BELL_INTERVALS = {\r\n  none: 'No bells',\r\n  start_end: 'Start & End only',\r\n  '1': 'Every minute',\r\n  '2': 'Every 2 minutes',\r\n  '5': 'Every 5 minutes',\r\n  '10': 'Every 10 minutes'\r\n};\r\n\r\ninterface MeditationSession {\r\n  id: string;\r\n  type: keyof typeof MEDITATION_TYPES;\r\n  duration: number;\r\n  completedDuration: number;\r\n  timestamp: Date;\r\n  notes?: string;\r\n  moodBefore?: number;\r\n  moodAfter?: number;\r\n}\r\n\r\ninterface MeditationStreak {\r\n  current: number;\r\n  longest: number;\r\n  lastSessionDate: string | null;\r\n}\r\n\r\nexport const MeditationTimer: React.FC = () => {\r\n  const [selectedType, _setSelectedType] = useState<keyof typeof MEDITATION_TYPES>('mindfulness');\r\n  const [duration, setDuration] = useState(10); // minutes\r\n  const [timeRemaining, setTimeRemaining] = useState(0); // seconds\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [ambientSound, _setAmbientSound] = useState<keyof typeof AMBIENT_SOUNDS>('none');\r\n  const [bellInterval, _setBellInterval] = useState<keyof typeof BELL_INTERVALS>('start_end');\r\n  const [volume, _setVolume] = useState(50);\r\n  const [showSettings, _setShowSettings] = useState(false);\r\n  const [sessions, setSessions] = useState<MeditationSession[]>([]);\r\n  const [streak, setStreak] = useState<MeditationStreak>({ current: 0, longest: 0, lastSessionDate: null });\r\n  const [showStats, _setShowStats] = useState(false);\r\n  const [customMessage, _setCustomMessage] = useState('');\r\n  const [preparationTime, _setPreparationTime] = useState(10); // seconds\r\n  const [isPreparing, setIsPreparing] = useState(false);\r\n  \r\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\r\n  const audioContext = useRef<AudioContext | null>(null);\r\n  const ambientOscillator = useRef<OscillatorNode | null>(null);\r\n  const ambientGain = useRef<GainNode | null>(null);\r\n  const sessionStartTime = useRef<Date | null>(null);\r\n  const elapsedTime = useRef(0);\r\n\r\n  // Initialize audio context\r\n  useEffect(() => {\r\n    if (typeof window !== 'undefined' && !audioContext.current) {\r\n      audioContext.current = new (window.AudioContext || (window as unknown).webkitAudioContext)();\r\n    }\r\n    \r\n    // Load saved sessions and streak\r\n    const _savedSessions = secureStorage.getItem('meditationSessions');\r\n    const _savedStreak = secureStorage.getItem('meditationStreak');\r\n    \r\n    if (_savedSessions) {\r\n      const parsed = JSON.parse(_savedSessions);\r\n      setSessions(parsed.map((s: unknown) => ({\r\n        ...s,\r\n        timestamp: new Date(s.timestamp)\r\n      })));\r\n    }\r\n    \r\n    if (_savedStreak) {\r\n      setStreak(JSON.parse(_savedStreak));\r\n    }\r\n    \r\n    return () => {\r\n      stopAmbientSound();\r\n    };\r\n  }, []);\r\n\r\n  // Play bell sound\r\n  const playBell = useCallback((type: 'start' | 'end' | 'interval' = 'interval') => {\r\n    if (!audioContext.current) return;\r\n    \r\n    const oscillator = audioContext.current.createOscillator();\r\n    const gainNode = audioContext.current.createGain();\r\n    \r\n    oscillator.connect(gainNode);\r\n    gainNode.connect(audioContext.current.destination);\r\n    \r\n    // Different frequencies for different bell types\r\n    const frequencies = {\r\n      start: 528,  // Solfeggio frequency for transformation\r\n      end: 639,    // Solfeggio frequency for harmony\r\n      interval: 432 // Natural frequency\r\n    };\r\n    \r\n    oscillator.frequency.value = frequencies[type];\r\n    oscillator.type = 'sine';\r\n    \r\n    // Envelope for bell-like sound\r\n    const now = audioContext.current.currentTime;\r\n    gainNode.gain.setValueAtTime(0, now);\r\n    gainNode.gain.linearRampToValueAtTime(volume / 100 * 0.3, now + 0.01);\r\n    gainNode.gain.exponentialRampToValueAtTime(0.001, now + 1.5);\r\n    \r\n    oscillator.start(_now);\r\n    oscillator.stop(now + 1.5);\r\n  }, []);\r\n\r\n  // Start ambient sound\r\n  const startAmbientSound = () => {\r\n    if (!audioContext.current || ambientSound === 'none') return;\r\n    \r\n    const sound = AMBIENT_SOUNDS[ambientSound];\r\n    if (!sound.frequency) {\r\n      // White noise\r\n      const bufferSize = 2 * audioContext.current.sampleRate;\r\n      const noiseBuffer = audioContext.current.createBuffer(1, bufferSize, audioContext.current.sampleRate);\r\n      const output = noiseBuffer.getChannelData(0);\r\n      \r\n      for (let i = 0; i < bufferSize; i++) {\r\n        output[i] = Math.random() * 2 - 1;\r\n      }\r\n      \r\n      const whiteNoise = audioContext.current.createBufferSource();\r\n      whiteNoise.buffer = noiseBuffer;\r\n      whiteNoise.loop = true;\r\n      \r\n      ambientGain.current = audioContext.current.createGain();\r\n      ambientGain.current.gain.value = volume / 100 * 0.1;\r\n      \r\n      whiteNoise.connect(ambientGain.current);\r\n      ambientGain.current.connect(audioContext.current.destination);\r\n      whiteNoise.start();\r\n    } else {\r\n      // Tonal ambient sounds\r\n      ambientOscillator.current = audioContext.current.createOscillator();\r\n      ambientGain.current = audioContext.current.createGain();\r\n      \r\n      ambientOscillator.current.frequency.value = sound.frequency;\r\n      ambientOscillator.current.type = 'sine';\r\n      \r\n      // Add some variation for natural sound\r\n      if (sound.variation > 0) {\r\n        const lfo = audioContext.current.createOscillator();\r\n        const lfoGain = audioContext.current.createGain();\r\n        \r\n        lfo.frequency.value = 0.2; // Slow modulation\r\n        lfoGain.gain.value = sound.variation;\r\n        \r\n        lfo.connect(lfoGain);\r\n        lfoGain.connect(ambientOscillator.current.frequency);\r\n        lfo.start();\r\n      }\r\n      \r\n      ambientGain.current.gain.value = volume / 100 * 0.05;\r\n      \r\n      ambientOscillator.current.connect(ambientGain.current);\r\n      ambientGain.current.connect(audioContext.current.destination);\r\n      ambientOscillator.current.start();\r\n    }\r\n  };\r\n\r\n  // Stop ambient sound\r\n  const stopAmbientSound = useCallback(() => {\r\n    if (ambientOscillator.current) {\r\n      ambientOscillator.current.stop();\r\n      ambientOscillator.current = null;\r\n    }\r\n    if (ambientGain.current) {\r\n      ambientGain.current.disconnect();\r\n      ambientGain.current = null;\r\n    }\r\n  }, []);\r\n\r\n  // Start meditation\r\n  const startMeditation = () => {\r\n    setIsPreparing(true);\r\n    setTimeRemaining(_preparationTime);\r\n    \r\n    // Start preparation countdown\r\n    const _prepInterval = setInterval(() => {\r\n      setTimeRemaining(prev => {\r\n        if (prev <= 1) {\r\n          clearInterval(_prepInterval);\r\n          setIsPreparing(false);\r\n          actuallyStartMeditation();\r\n          return duration * 60;\r\n        }\r\n        return prev - 1;\r\n      });\r\n    }, 1000);\r\n  };\r\n\r\n  // Actually start the meditation after preparation\r\n  const actuallyStartMeditation = () => {\r\n    setIsActive(true);\r\n    setIsPaused(false);\r\n    sessionStartTime.current = new Date();\r\n    elapsedTime.current = 0;\r\n    setTimeRemaining(duration * 60);\r\n    \r\n    playBell('start');\r\n    startAmbientSound();\r\n  };\r\n\r\n  // Pause/Resume meditation\r\n  const togglePause = () => {\r\n    setIsPaused(!isPaused);\r\n    if (_isPaused) {\r\n      startAmbientSound();\r\n    } else {\r\n      stopAmbientSound();\r\n    }\r\n  };\r\n\r\n  // Stop meditation\r\n  const stopMeditation = useCallback(() => {\r\n    setIsActive(false);\r\n    setIsPaused(false);\r\n    setIsPreparing(false);\r\n    \r\n    if (intervalRef.current) {\r\n      clearInterval(intervalRef.current);\r\n      intervalRef.current = null;\r\n    }\r\n    \r\n    stopAmbientSound();\r\n    \r\n    // Save session if it lasted more than 1 minute\r\n    if (elapsedTime.current > 60 && sessionStartTime.current) {\r\n      const session: MeditationSession = {\r\n        id: Date.now().toString(),\r\n        type: selectedType,\r\n        duration: duration * 60,\r\n        completedDuration: elapsedTime.current,\r\n        timestamp: sessionStartTime.current\r\n      };\r\n      \r\n      const _updatedSessions = [...sessions, session];\r\n      setSessions(_updatedSessions);\r\n      secureStorage.setItem('meditationSessions', JSON.stringify(_updatedSessions));\r\n      \r\n      // Update streak\r\n      updateStreak();\r\n      \r\n      // Play completion bell\r\n      if (elapsedTime.current >= duration * 60 * 0.8) {\r\n        playBell('end');\r\n      }\r\n    }\r\n    \r\n    setTimeRemaining(0);\r\n  }, [duration, sessions, selectedType, stopAmbientSound, updateStreak]);\r\n\r\n  // Update meditation streak\r\n  const updateStreak = useCallback(() => {\r\n    const today = new Date().toDateString();\r\n    const yesterday = new Date(Date.now() - 86400000).toDateString();\r\n    \r\n    const newStreak = { ...streak };\r\n    \r\n    if (streak.lastSessionDate === today) {\r\n      // Already meditated today, don't change streak\r\n    } else if (streak.lastSessionDate === yesterday) {\r\n      // Continuing streak\r\n      newStreak.current += 1;\r\n      newStreak.longest = Math.max(newStreak.current, newStreak.longest);\r\n    } else {\r\n      // Starting new streak\r\n      newStreak.current = 1;\r\n      newStreak.longest = Math.max(1, newStreak.longest);\r\n    }\r\n    \r\n    newStreak.lastSessionDate = today;\r\n    setStreak(_newStreak);\r\n    secureStorage.setItem('meditationStreak', JSON.stringify(_newStreak));\r\n  }, [streak]);\r\n\r\n  // Main timer effect\r\n  useEffect(() => {\r\n    if (!isActive || isPaused) return;\r\n    \r\n    intervalRef.current = setInterval(() => {\r\n      setTimeRemaining(prev => {\r\n        if (prev <= 1) {\r\n          stopMeditation();\r\n          return 0;\r\n        }\r\n        \r\n        elapsedTime.current += 1;\r\n        \r\n        // Check for bell intervals\r\n        if (bellInterval !== 'none' && bellInterval !== 'start_end') {\r\n          const intervalSeconds = parseInt(_bellInterval) * 60;\r\n          if (elapsedTime.current % intervalSeconds === 0) {\r\n            playBell('interval');\r\n          }\r\n        }\r\n        \r\n        return prev - 1;\r\n      });\r\n    }, 1000);\r\n    \r\n    return () => {\r\n      if (intervalRef.current) {\r\n        clearInterval(intervalRef.current);\r\n      }\r\n    };\r\n  }, [isActive, isPaused, bellInterval, playBell, stopMeditation]);\r\n\r\n  // Format time display\r\n  const formatTime = (seconds: number) => {\r\n    const mins = Math.floor(seconds / 60);\r\n    const secs = seconds % 60;\r\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\r\n  };\r\n\r\n  // Calculate progress percentage\r\n  const getProgress = () => {\r\n    if (!isActive || isPreparing) return 0;\r\n    return ((duration * 60 - timeRemaining) / (duration * 60)) * 100;\r\n  };\r\n\r\n  // Get total meditation time\r\n  const getTotalMeditationTime = () => {\r\n    const total = sessions.reduce((sum, session) => sum + session.completedDuration, 0);\r\n    return Math.floor(total / 60);\r\n  };\r\n\r\n  // Get sessions this week\r\n  const getWeeklySessionCount = () => {\r\n    const weekAgo = new Date(Date.now() - 7 * 86400000);\r\n    return sessions.filter(s => s.timestamp > weekAgo).length;\r\n  };\r\n\r\n  // Get achievement badges\r\n  const getAchievements = () => {\r\n    const achievements = [];\r\n    const totalMinutes = getTotalMeditationTime();\r\n    \r\n    if (totalMinutes >= 60) achievements.push({ name: 'First Hour', icon: Award, color: 'text-yellow-500' });\r\n    if (totalMinutes >= 300) achievements.push({ name: '5 Hours', icon: Award, color: 'text-blue-500' });\r\n    if (totalMinutes >= 1000) achievements.push({ name: '1000 Minutes', icon: Award, color: 'text-purple-500' });\r\n    if (streak.current >= 7) achievements.push({ name: 'Week Streak', icon: Zap, color: 'text-orange-500' });\r\n    if (streak.current >= 30) achievements.push({ name: 'Month Streak', icon: Zap, color: 'text-red-500' });\r\n    if (sessions.length >= 10) achievements.push({ name: '10 Sessions', icon: Star, color: 'text-green-500' });\r\n    \r\n    return achievements;\r\n  };\r\n\r\n  return (\r\n    <div className=\"meditation-timer-container max-w-6xl mx-auto p-6\">\r\n      {/* Header */}\r\n      <div className=\"mb-8\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\r\n              Meditation Timer\r\n            </h2>\r\n            <p className=\"text-gray-600 dark:text-gray-400\">\r\n              Cultivate mindfulness and inner peace with guided meditation\r\n            </p>\r\n          </div>\r\n          <div className=\"flex gap-2\">\r\n            <motion.button\r\n              whileHover={{ scale: 1.05 }}\r\n              whileTap={{ scale: 0.95 }}\r\n              onClick={() => setShowStats(!showStats)}\r\n              className=\"p-2 bg-gray-100 dark:bg-gray-800 rounded-lg\"\r\n            >\r\n              <TrendingUp className=\"w-5 h-5\" />\r\n            </motion.button>\r\n            <motion.button\r\n              whileHover={{ scale: 1.05 }}\r\n              whileTap={{ scale: 0.95 }}\r\n              onClick={() => setShowSettings(!showSettings)}\r\n              className=\"p-2 bg-gray-100 dark:bg-gray-800 rounded-lg\"\r\n            >\r\n              <Settings className=\"w-5 h-5\" />\r\n            </motion.button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Streak and Stats Bar */}\r\n        <div className=\"mt-4 flex items-center gap-6 text-sm\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <Zap className=\"w-4 h-4 text-orange-500\" />\r\n            <span className=\"text-gray-700 dark:text-gray-300\">\r\n              {streak.current} day streak\r\n            </span>\r\n          </div>\r\n          <div className=\"flex items-center gap-2\">\r\n            <Timer className=\"w-4 h-4 text-blue-500\" />\r\n            <span className=\"text-gray-700 dark:text-gray-300\">\r\n              {getTotalMeditationTime()} total minutes\r\n            </span>\r\n          </div>\r\n          <div className=\"flex items-center gap-2\">\r\n            <Calendar className=\"w-4 h-4 text-green-500\" />\r\n            <span className=\"text-gray-700 dark:text-gray-300\">\r\n              {getWeeklySessionCount()} sessions this week\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Meditation Type Selection */}\r\n      {!isActive && !isPreparing && (\r\n        <div className=\"mb-8\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n            Choose Your Practice\r\n          </h3>\r\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n            {Object.entries(_MEDITATION_TYPES).map(([key, type]) => {\r\n              const Icon = type.icon;\r\n              return (\r\n                <motion.div\r\n                  key={key}\r\n                  whileHover={{ scale: 1.02 }}\r\n                  whileTap={{ scale: 0.98 }}\r\n                  onClick={() => {\r\n                    setSelectedType(key as keyof typeof MEDITATION_TYPES);\r\n                    setDuration(type.defaultDuration);\r\n                  }}\r\n                  className={`p-4 rounded-xl cursor-pointer transition-all ${\r\n                    selectedType === key\r\n                      ? `bg-gradient-to-r ${  type.color  } text-white shadow-lg`\r\n                      : 'bg-white dark:bg-gray-800 hover:shadow-md'\r\n                  }`}\r\n                >\r\n                  <Icon className=\"w-8 h-8 mx-auto mb-2\" />\r\n                  <h4 className=\"font-semibold text-center mb-1\">{type.name}</h4>\r\n                  <p className={`text-xs text-center ${\r\n                    selectedType === key ? 'text-white/90' : 'text-gray-600 dark:text-gray-400'\r\n                  }`}>\r\n                    {type.description}\r\n                  </p>\r\n                </motion.div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Main Timer Area */}\r\n      <div className=\"bg-gradient-to-br from-indigo-50 to-purple-50 dark:from-gray-800 dark:to-gray-900 rounded-2xl p-8 mb-8\">\r\n        <div className=\"max-w-md mx-auto\">\r\n          {/* Timer Circle */}\r\n          <div className=\"relative w-64 h-64 mx-auto mb-8\">\r\n            {/* Progress Ring */}\r\n            <svg className=\"absolute inset-0 transform -rotate-90\">\r\n              <circle\r\n                cx=\"128\"\r\n                cy=\"128\"\r\n                r=\"120\"\r\n                stroke=\"currentColor\"\r\n                strokeWidth=\"8\"\r\n                fill=\"none\"\r\n                className=\"text-gray-200 dark:text-gray-700\"\r\n              />\r\n              <circle\r\n                cx=\"128\"\r\n                cy=\"128\"\r\n                r=\"120\"\r\n                stroke=\"currentColor\"\r\n                strokeWidth=\"8\"\r\n                fill=\"none\"\r\n                strokeDasharray={`${2 * Math.PI * 120}`}\r\n                strokeDashoffset={`${2 * Math.PI * 120 * (1 - getProgress() / 100)}`}\r\n                className=\"text-blue-500 transition-all duration-1000\"\r\n              />\r\n            </svg>\r\n            \r\n            {/* Timer Display */}\r\n            <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\r\n              <AnimatePresence mode=\"wait\">\r\n                {isPreparing ? (\r\n                  <motion.div\r\n                    key=\"preparing\"\r\n                    initial={{ opacity: 0, scale: 0.8 }}\r\n                    animate={{ opacity: 1, scale: 1 }}\r\n                    exit={{ opacity: 0, scale: 0.8 }}\r\n                    className=\"text-center\"\r\n                  >\r\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">\r\n                      Get ready...\r\n                    </p>\r\n                    <p className=\"text-4xl font-mono font-bold text-gray-900 dark:text-white\">\r\n                      {timeRemaining}\r\n                    </p>\r\n                  </motion.div>\r\n                ) : isActive ? (\r\n                  <motion.div\r\n                    key=\"active\"\r\n                    initial={{ opacity: 0, scale: 0.8 }}\r\n                    animate={{ opacity: 1, scale: 1 }}\r\n                    exit={{ opacity: 0, scale: 0.8 }}\r\n                    className=\"text-center\"\r\n                  >\r\n                    <p className=\"text-5xl font-mono font-bold text-gray-900 dark:text-white mb-2\">\r\n                      {formatTime(_timeRemaining)}\r\n                    </p>\r\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                      {isPaused ? 'Paused' : MEDITATION_TYPES[selectedType].name}\r\n                    </p>\r\n                  </motion.div>\r\n                ) : (\r\n                  <motion.div\r\n                    key=\"inactive\"\r\n                    initial={{ opacity: 0, scale: 0.8 }}\r\n                    animate={{ opacity: 1, scale: 1 }}\r\n                    exit={{ opacity: 0, scale: 0.8 }}\r\n                    className=\"text-center\"\r\n                  >\r\n                    <p className=\"text-5xl font-mono font-bold text-gray-900 dark:text-white mb-2\">\r\n                      {formatTime(duration * 60)}\r\n                    </p>\r\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                      Ready to begin\r\n                    </p>\r\n                  </motion.div>\r\n                )}\r\n              </AnimatePresence>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Duration Slider */}\r\n          {!isActive && !isPreparing && (\r\n            <div className=\"mb-6\">\r\n              <label htmlFor=\"input_bn2mjhgvt\" className=\"flex items-center justify-between text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                <span>Duration</span>\r\n                <span className=\"text-lg\">{duration} minutes</span>\r\n              </label>\r\n              <input\r\n                type=\"range\"\r\n                min=\"1\"\r\n                max=\"60\"\r\n                value={duration}\r\n                onChange={(e) => setDuration(parseInt(e.target.value))}\r\n                className=\"w-full\"\r\n              />\r\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\r\n                <span>1 min</span>\r\n                <span>60 min</span>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Control Buttons */}\r\n          <div className=\"flex justify-center gap-4\">\r\n            {!isActive && !isPreparing ? (\r\n              <motion.button\r\n                whileHover={{ scale: 1.05 }}\r\n                whileTap={{ scale: 0.95 }}\r\n                onClick={startMeditation}\r\n                className=\"px-8 py-3 bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-full font-semibold flex items-center gap-2 shadow-lg\"\r\n              >\r\n                <Play className=\"w-5 h-5\" />\r\n                Begin Session\r\n              </motion.button>\r\n            ) : (\r\n              <>\r\n                {!isPreparing && (\r\n                  <motion.button\r\n                    whileHover={{ scale: 1.05 }}\r\n                    whileTap={{ scale: 0.95 }}\r\n                    onClick={togglePause}\r\n                    className=\"px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-full font-semibold flex items-center gap-2 shadow-lg\"\r\n                  >\r\n                    {isPaused ? <Play className=\"w-5 h-5\" /> : <Pause className=\"w-5 h-5\" />}\r\n                    {isPaused ? 'Resume' : 'Pause'}\r\n                  </motion.button>\r\n                )}\r\n                <motion.button\r\n                  whileHover={{ scale: 1.05 }}\r\n                  whileTap={{ scale: 0.95 }}\r\n                  onClick={stopMeditation}\r\n                  className=\"px-6 py-3 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full font-semibold flex items-center gap-2\"\r\n                >\r\n                  <RotateCcw className=\"w-5 h-5\" />\r\n                  End Session\r\n                </motion.button>\r\n              </>\r\n            )}\r\n          </div>\r\n\r\n          {/* Custom Message */}\r\n          {isActive && customMessage && (\r\n            <motion.div\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              className=\"mt-6 p-4 bg-white/50 dark:bg-gray-800/50 rounded-lg text-center\"\r\n            >\r\n              <p className=\"text-gray-700 dark:text-gray-300 italic\">\r\n                \"{customMessage}\"\r\n              </p>\r\n            </motion.div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Settings Panel */}\r\n        <AnimatePresence>\r\n          {showSettings && (\r\n            <motion.div\r\n              initial={{ opacity: 0, height: 0 }}\r\n              animate={{ opacity: 1, height: 'auto' }}\r\n              exit={{ opacity: 0, height: 0 }}\r\n              className=\"mt-8 pt-8 border-t border-gray-200 dark:border-gray-700\"\r\n            >\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 max-w-2xl mx-auto\">\r\n                {/* Ambient Sound */}\r\n                <div>\r\n                  <label htmlFor=\"input_o6sdain3o\" className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block\">\r\n                    Ambient Sound\r\n                  </label>\r\n                  <select\r\n                    value={ambientSound}\r\n                    onChange={(e) => setAmbientSound(e.target.value as keyof typeof AMBIENT_SOUNDS)}\r\n                    disabled={isActive}\r\n                    className=\"w-full px-4 py-2 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                  >\r\n                    {Object.entries(_AMBIENT_SOUNDS).map(([key, sound]) => (\r\n                      <option key={key} value={key}>{sound.name}</option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n\r\n                {/* Bell Interval */}\r\n                <div>\r\n                  <label htmlFor=\"input_h1utea24z\" className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block\">\r\n                    Bell Interval\r\n                  </label>\r\n                  <select\r\n                    value={bellInterval}\r\n                    onChange={(e) => setBellInterval(e.target.value as keyof typeof BELL_INTERVALS)}\r\n                    disabled={isActive}\r\n                    className=\"w-full px-4 py-2 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                  >\r\n                    {Object.entries(_BELL_INTERVALS).map(([key, label]) => (\r\n                      <option key={key} value={key}>{label}</option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n\r\n                {/* Volume */}\r\n                <div>\r\n                  <label htmlFor=\"input_74lxh2fpk\" className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block\">\r\n                    Volume: {volume}%\r\n                  </label>\r\n                  <input\r\n                    type=\"range\"\r\n                    min=\"0\"\r\n                    max=\"100\"\r\n                    value={volume}\r\n                    onChange={(e) => setVolume(parseInt(e.target.value))}\r\n                    className=\"w-full\"\r\n                  />\r\n                </div>\r\n\r\n                {/* Preparation Time */}\r\n                <div>\r\n                  <label htmlFor=\"input_gkyv95pvz\" className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block\">\r\n                    Preparation Time: {preparationTime}s\r\n                  </label>\r\n                  <input\r\n                    type=\"range\"\r\n                    min=\"0\"\r\n                    max=\"30\"\r\n                    value={preparationTime}\r\n                    onChange={(e) => setPreparationTime(parseInt(e.target.value))}\r\n                    disabled={isActive}\r\n                    className=\"w-full\"\r\n                  />\r\n                </div>\r\n\r\n                {/* Custom Message */}\r\n                <div className=\"md:col-span-2\">\r\n                  <label htmlFor=\"input_ppmdzvirf\" className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block\">\r\n                    Meditation Intention (_optional)\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"e.g., 'I am calm and present'\"\r\n                    value={customMessage}\r\n                    onChange={(e) => setCustomMessage(e.target.value)}\r\n                    disabled={isActive}\r\n                    className=\"w-full px-4 py-2 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </motion.div>\r\n          )}\r\n        </AnimatePresence>\r\n      </div>\r\n\r\n      {/* Stats and Achievements */}\r\n      <AnimatePresence>\r\n        {showStats && (\r\n          <motion.div\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: -20 }}\r\n            className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\"\r\n          >\r\n            {/* Recent Sessions */}\r\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n                Recent Sessions\r\n              </h3>\r\n              <div className=\"space-y-3\">\r\n                {sessions.slice(-5).reverse().map((session) => (\r\n                  <div\r\n                    key={session.id}\r\n                    className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\"\r\n                  >\r\n                    <div className=\"flex items-center gap-3\">\r\n                      {React.createElement(MEDITATION_TYPES[session.type].icon, {\r\n                        className: \"w-5 h-5 text-gray-600 dark:text-gray-400\"\r\n                      })}\r\n                      <div>\r\n                        <p className=\"font-medium text-gray-900 dark:text-white\">\r\n                          {MEDITATION_TYPES[session.type].name}\r\n                        </p>\r\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                          {Math.floor(session.completedDuration / 60)} min\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    <p className=\"text-sm text-gray-500\">\r\n                      {new Date(session.timestamp).toLocaleDateString()}\r\n                    </p>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Achievements */}\r\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n                Achievements\r\n              </h3>\r\n              <div className=\"grid grid-cols-3 gap-4\">\r\n                {getAchievements().map((achievement, idx) => (\r\n                  <div\r\n                    key={idx}\r\n                    className=\"text-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\"\r\n                  >\r\n                    <Award className={`w-8 h-8 mx-auto mb-2 ${achievement.color}`} />\r\n                    <p className=\"text-xs font-medium text-gray-700 dark:text-gray-300\">\r\n                      {achievement.name}\r\n                    </p>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n              {getAchievements().length === 0 && (\r\n                <p className=\"text-gray-500 dark:text-gray-400 text-center py-8\">\r\n                  Keep practicing to unlock achievements!\r\n                </p>\r\n              )}\r\n            </div>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\wellness\\MoodTracker.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\wellness\\MoodTracker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\wellness\\TherapeuticJournal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'password' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":173,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":173,"endColumn":18},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":448,"column":100,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[16379,16399],"text":"This Week&apos;s Activity"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[16379,16399],"text":"This Week&lsquo;s Activity"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[16379,16399],"text":"This Week&#39;s Activity"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[16379,16399],"text":"This Week&rsquo;s Activity"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { \r\n  _BookOpen, \r\n  Edit3, \r\n  Heart, \r\n  Brain, \r\n  _Shield, \r\n  Download,\r\n  _Upload,\r\n  _Calendar,\r\n  _Tag,\r\n  Lock,\r\n  Unlock,\r\n  Search,\r\n  _Filter,\r\n  ChevronRight,\r\n  Sparkles,\r\n  Sun,\r\n  Cloud,\r\n  CloudRain,\r\n  Zap,\r\n  Moon,\r\n  Star,\r\n  TrendingUp,\r\n  _AlertCircle,\r\n  Save,\r\n  _Trash2,\r\n  _Share2,\r\n  _FileText\r\n} from 'lucide-react';\r\nimport { format as formatDate, startOfWeek, endOfWeek, eachDayOfInterval, isToday } from 'date-fns';\r\nimport { secureStorage } from '../../services/security/SecureLocalStorage';\r\n\r\n// Journal entry types based on therapeutic approaches\r\nconst JOURNAL_TYPES = {\r\n  freeform: {\r\n    name: 'Free Writing',\r\n    icon: Edit3,\r\n    description: 'Express yourself freely without structure',\r\n    color: 'from-purple-400 to-pink-400'\r\n  },\r\n  gratitude: {\r\n    name: 'Gratitude Journal',\r\n    icon: Heart,\r\n    description: 'Focus on things you\\'re grateful for',\r\n    color: 'from-green-400 to-emerald-400',\r\n    prompts: [\r\n      'What are three things you\\'re grateful for today?',\r\n      'Who made a positive impact on your day?',\r\n      'What small moment brought you joy?',\r\n      'What ability or skill are you thankful for?'\r\n    ]\r\n  },\r\n  thought: {\r\n    name: 'Thought Record',\r\n    icon: Brain,\r\n    description: 'CBT-based thought challenging',\r\n    color: 'from-blue-400 to-indigo-400',\r\n    structure: {\r\n      situation: 'What happened?',\r\n      thoughts: 'What thoughts went through your mind?',\r\n      emotions: 'What emotions did you feel? (Rate 0-100)',\r\n      evidence_for: 'Evidence supporting the thought',\r\n      evidence_against: 'Evidence against the thought',\r\n      balanced_thought: 'More balanced perspective',\r\n      outcome: 'How do you feel _now? (Rate 0-100)'\r\n    }\r\n  },\r\n  emotion: {\r\n    name: 'Emotion Regulation',\r\n    icon: Zap,\r\n    description: 'DBT-based emotion tracking',\r\n    color: 'from-orange-400 to-red-400',\r\n    structure: {\r\n      emotion: 'Primary emotion',\r\n      intensity: 'Intensity (0-10)',\r\n      triggers: 'What triggered this emotion?',\r\n      physical: 'Physical sensations',\r\n      urges: 'Action urges',\r\n      actions: 'What did you actually do?',\r\n      effectiveness: 'How effective was your response?'\r\n    }\r\n  },\r\n  reflection: {\r\n    name: 'Daily Reflection',\r\n    icon: Sun,\r\n    description: 'Structured end-of-day reflection',\r\n    color: 'from-yellow-400 to-orange-400',\r\n    prompts: [\r\n      'What went well today?',\r\n      'What was challenging?',\r\n      'What did you learn about yourself?',\r\n      'What would you do differently?',\r\n      'What are you looking forward to tomorrow?'\r\n    ]\r\n  }\r\n};\r\n\r\n// Mood options for tagging\r\nconst MOOD_OPTIONS = [\r\n  { value: 'happy', icon: Sun, color: 'text-yellow-500' },\r\n  { value: 'calm', icon: Cloud, color: 'text-blue-400' },\r\n  { value: 'anxious', icon: CloudRain, color: 'text-gray-500' },\r\n  { value: 'angry', icon: Zap, color: 'text-red-500' },\r\n  { value: 'sad', icon: Moon, color: 'text-indigo-500' },\r\n  { value: 'excited', icon: Star, color: 'text-purple-500' }\r\n];\r\n\r\ninterface JournalEntry {\r\n  id: string;\r\n  type: keyof typeof JOURNAL_TYPES;\r\n  title: string;\r\n  content: string | Record<string, string>;\r\n  mood?: string;\r\n  tags: string[];\r\n  timestamp: Date;\r\n  edited?: Date;\r\n  encrypted: boolean;\r\n  wordCount: number;\r\n  readingTime: number;\r\n  insights?: string[];\r\n}\r\n\r\ninterface JournalPrompt {\r\n  id: string;\r\n  category: string;\r\n  prompt: string;\r\n  therapeutic_approach: string;\r\n}\r\n\r\n// Therapeutic prompts database\r\nconst THERAPEUTIC_PROMPTS: JournalPrompt[] = [\r\n  // CBT Prompts\r\n  { id: '1', category: 'CBT', prompt: 'Identify three negative thoughts you had today. How can you reframe them more realistically?', therapeutic_approach: 'Cognitive Restructuring' },\r\n  { id: '2', category: 'CBT', prompt: 'What evidence do you have for and against your biggest worry right _now?', therapeutic_approach: 'Evidence Examination' },\r\n  { id: '3', category: 'CBT', prompt: 'Describe a situation where your thoughts influenced your emotions and behaviors.', therapeutic_approach: 'Thought-Emotion-Behavior Connection' },\r\n  \r\n  // DBT Prompts\r\n  { id: '4', category: 'DBT', prompt: 'Practice radical acceptance: What situation do you need to accept right _now?', therapeutic_approach: 'Radical Acceptance' },\r\n  { id: '5', category: 'DBT', prompt: 'Describe a time today when you used wise mind (balancing emotion and logic).', therapeutic_approach: 'Wise Mind' },\r\n  { id: '6', category: 'DBT', prompt: 'What opposite action could you take to change an unhelpful emotion?', therapeutic_approach: 'Opposite Action' },\r\n  \r\n  // Mindfulness Prompts\r\n  { id: '7', category: 'Mindfulness', prompt: 'Describe your current moment using all five senses.', therapeutic_approach: 'Present Moment Awareness' },\r\n  { id: '8', category: 'Mindfulness', prompt: 'What thoughts are passing through your mind like clouds in the sky?', therapeutic_approach: 'Thought Observation' },\r\n  { id: '9', category: 'Mindfulness', prompt: 'Body scan: What sensations do you notice from head to toe?', therapeutic_approach: 'Body Awareness' },\r\n  \r\n  // Self-Compassion Prompts\r\n  { id: '10', category: 'Self-Compassion', prompt: 'Write a letter to yourself as you would to a good friend facing your situation.', therapeutic_approach: 'Self-Kindness' },\r\n  { id: '11', category: 'Self-Compassion', prompt: 'What would you say to comfort your younger self?', therapeutic_approach: 'Inner Child Work' },\r\n  { id: '12', category: 'Self-Compassion', prompt: 'List three ways you can be kinder to yourself today.', therapeutic_approach: 'Self-Care Planning' }\r\n];\r\n\r\nexport const TherapeuticJournal: React.FC = () => {\r\n  const [entries, setEntries] = useState<JournalEntry[]>([]);\r\n  const [currentEntry, setCurrentEntry] = useState<Partial<JournalEntry>>({\r\n    type: 'freeform',\r\n    title: '',\r\n    content: '',\r\n    tags: [],\r\n    mood: undefined\r\n  });\r\n  const [selectedType, setSelectedType] = useState<keyof typeof JOURNAL_TYPES>('freeform');\r\n  const [isWriting, setIsWriting] = useState(false);\r\n  const [selectedEntry, setSelectedEntry] = useState<JournalEntry | null>(null);\r\n  const [searchQuery, _setSearchQuery] = useState('');\r\n  const [filterMood, _setFilterMood] = useState<string | null>(null);\r\n  const [filterType, _setFilterType] = useState<keyof typeof JOURNAL_TYPES | null>(null);\r\n  const [showPrompts, _setShowPrompts] = useState(false);\r\n  const [selectedPromptCategory, _setSelectedPromptCategory] = useState<string | null>(null);\r\n  const [isEncrypted, _setIsEncrypted] = useState(false);\r\n  const [password, _setPassword] = useState('');\r\n  const [showStats, _setShowStats] = useState(false);\r\n  const [autoSaveEnabled, _setAutoSaveEnabled] = useState(true);\r\n  \r\n  const _editorRef  = useRef<HTMLTextAreaElement>(null);\r\n  const autoSaveTimer = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  // Load entries from localStorage\r\n  useEffect(() => {\r\n    const _savedEntries = secureStorage.getItem('journalEntries');\r\n    if (_savedEntries) {\r\n      const parsed = JSON.parse(_savedEntries);\r\n      setEntries(parsed.map((e: unknown) => ({\r\n        ...e,\r\n        timestamp: new Date(e.timestamp),\r\n        edited: e.edited ? new Date(e.edited) : undefined\r\n      })));\r\n    }\r\n  }, []);\r\n\r\n  // Auto-save functionality\r\n  useEffect(() => {\r\n    if (!autoSaveEnabled || !isWriting) return;\r\n    \r\n    if (autoSaveTimer.current) {\r\n      clearTimeout(autoSaveTimer.current);\r\n    }\r\n    \r\n    autoSaveTimer.current = setTimeout(() => {\r\n      if (currentEntry.content && (typeof currentEntry.content === 'string' ? currentEntry.content.length > 0 : Object.keys(currentEntry.content).length > 0)) {\r\n        saveDraft();\r\n      }\r\n    }, 3000); // Auto-save after 3 seconds of inactivity\r\n    \r\n    return () => {\r\n      if (autoSaveTimer.current) {\r\n        clearTimeout(autoSaveTimer.current);\r\n      }\r\n    };\r\n  }, [currentEntry, autoSaveEnabled, isWriting, saveDraft]);\r\n\r\n  // Save draft\r\n  const saveDraft = useCallback(() => {\r\n    const _draft = {\r\n      ...currentEntry,\r\n      timestamp: new Date(),\r\n      lastSaved: new Date()\r\n    };\r\n    secureStorage.setItem('journalDraft', JSON.stringify(_draft));\r\n  }, [currentEntry]);\r\n\r\n  // Calculate word count and reading time\r\n  const calculateStats = (content: string | Record<string, string>) => {\r\n    let text = '';\r\n    if (typeof content === 'string') {\r\n      text = content;\r\n    } else {\r\n      text = Object.values(_content).join(' ');\r\n    }\r\n    \r\n    const wordCount = text.split(/\\s+/).filter(word => word.length > 0).length;\r\n    const readingTime = Math.ceil(wordCount / 200); // Average reading speed\r\n    \r\n    return { wordCount, readingTime };\r\n  };\r\n\r\n  // Save entry\r\n  const saveEntry = () => {\r\n    if (!currentEntry.content || (typeof currentEntry.content === 'string' && !currentEntry.content.trim())) {\r\n      return;\r\n    }\r\n    \r\n    const __stats = calculateStats(currentEntry.content);\r\n    const newEntry: JournalEntry = {\r\n      id: Date._now().toString(),\r\n      type: currentEntry.type || 'freeform',\r\n      title: currentEntry.title || `${JOURNAL_TYPES[currentEntry.type || 'freeform'].name} - ${formatDate(new Date(), 'MMM d, yyyy')}`,\r\n      content: currentEntry.content,\r\n      mood: currentEntry.mood,\r\n      tags: currentEntry.tags || [],\r\n      timestamp: new Date(),\r\n      encrypted: isEncrypted,\r\n      ...stats\r\n    };\r\n    \r\n    // Analyze for insights (simplified version)\r\n    if (typeof newEntry.content === 'string') {\r\n      const insights = analyzeContent(newEntry.content);\r\n      if (insights.length > 0) {\r\n        newEntry.insights = insights;\r\n      }\r\n    }\r\n    \r\n    const _updatedEntries = [...entries, newEntry];\r\n    setEntries(_updatedEntries);\r\n    secureStorage.setItem('journalEntries', JSON.stringify(_updatedEntries));\r\n    \r\n    // Clear draft\r\n    secureStorage.removeItem('journalDraft');\r\n    \r\n    // Reset form\r\n    setCurrentEntry({\r\n      type: 'freeform',\r\n      title: '',\r\n      content: '',\r\n      tags: [],\r\n      mood: undefined\r\n    });\r\n    setIsWriting(false);\r\n  };\r\n\r\n  // Simple content analysis for insights\r\n  const analyzeContent = (content: string): string[] => {\r\n    const insights: string[] = [];\r\n    const lowerContent = content.toLowerCase();\r\n    \r\n    // Check for positive patterns\r\n    if (lowerContent.includes('grateful') || lowerContent.includes('thankful')) {\r\n      insights.push('Practicing gratitude');\r\n    }\r\n    \r\n    // Check for growth indicators\r\n    if (lowerContent.includes('learned') || lowerContent.includes('realized') || lowerContent.includes('understood')) {\r\n      insights.push('Self-awareness growth');\r\n    }\r\n    \r\n    // Check for coping strategies\r\n    if (lowerContent.includes('breathe') || lowerContent.includes('meditation') || lowerContent.includes('exercise')) {\r\n      insights.push('Using healthy coping strategies');\r\n    }\r\n    \r\n    // Check for emotional vocabulary\r\n    const emotions = ['happy', 'sad', 'angry', 'anxious', 'calm', 'excited', 'frustrated', 'peaceful'];\r\n    const usedEmotions = emotions.filter(e => lowerContent.includes(e));\r\n    if (usedEmotions.length > 2) {\r\n      insights.push('Rich emotional vocabulary');\r\n    }\r\n    \r\n    return insights;\r\n  };\r\n\r\n  // Export entries\r\n  const exportEntries = (format: 'json' | 'txt' | 'pdf') => {\r\n    if (format === 'json') {\r\n      const _dataStr = JSON.stringify(entries, null, 2);\r\n      const dataUri = `data:application/json;charset=utf-8,${ encodeURIComponent(_dataStr)}`;\r\n      const exportFileDefaultName = `journal-export-${formatDate(new Date(), 'yyyy-MM-dd')}.json`;\r\n      \r\n      const linkElement = document.createElement('a');\r\n      linkElement.setAttribute('href', dataUri);\r\n      linkElement.setAttribute('download', exportFileDefaultName);\r\n      linkElement.click();\r\n    } else if (format === 'txt') {\r\n      let textContent = 'Therapeutic Journal Export\\n';\r\n      textContent += `${'=' .repeat(50)  }\\n\\n`;\r\n      \r\n      entries.forEach(entry => {\r\n        textContent += `Date: ${formatDate(entry.timestamp, 'PPP')}\\n`;\r\n        textContent += `Type: ${JOURNAL_TYPES[entry.type].name}\\n`;\r\n        textContent += `Title: ${entry.title}\\n`;\r\n        if (entry.mood) textContent += `Mood: ${entry.mood}\\n`;\r\n        if (entry.tags.length > 0) textContent += `Tags: ${entry.tags.join(', ')}\\n`;\r\n        textContent += '\\n';\r\n        \r\n        if (typeof entry.content === 'string') {\r\n          textContent += entry.content;\r\n        } else {\r\n          Object.entries(entry.content).forEach(([key, value]) => {\r\n            textContent += `${key}:\\n${value}\\n\\n`;\r\n          });\r\n        }\r\n        \r\n        textContent += `\\n${  '-'.repeat(50)  }\\n\\n`;\r\n      });\r\n      \r\n      const _blob = new Blob([textContent], { type: 'text/plain' });\r\n      const url = URL.createObjectURL(_blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = `journal-export-${formatDate(new Date(), 'yyyy-MM-dd')}.txt`;\r\n      link.click();\r\n    }\r\n  };\r\n\r\n  // Filter entries\r\n  const filteredEntries = entries.filter(entry => {\r\n    let matches = true;\r\n    \r\n    if (searchQuery) {\r\n      const _query = searchQuery.toLowerCase();\r\n      const content = typeof entry.content === 'string' \r\n        ? entry.content.toLowerCase()\r\n        : Object.values(entry.content).join(' ').toLowerCase();\r\n      \r\n      matches = matches && (\r\n        entry.title.toLowerCase().includes(_query) ||\r\n        content.includes(_query) ||\r\n        entry.tags.some(tag => tag.toLowerCase().includes(_query))\r\n      );\r\n    }\r\n    \r\n    if (_filterMood) {\r\n      matches = matches && entry.mood === filterMood;\r\n    }\r\n    \r\n    if (_filterType) {\r\n      matches = matches && entry.type === filterType;\r\n    }\r\n    \r\n    return matches;\r\n  });\r\n\r\n  // Get weekly stats\r\n  const getWeeklyStats = () => {\r\n    const _now = new Date();\r\n    const weekStart = startOfWeek(_now);\r\n    const weekEnd = endOfWeek(_now);\r\n    const days = eachDayOfInterval({ start: weekStart, end: weekEnd });\r\n    \r\n    return days.map(day => {\r\n      const dayEntries = entries.filter(entry => \r\n        formatDate(entry.timestamp, 'yyyy-MM-dd') === formatDate(day, 'yyyy-MM-dd')\r\n      );\r\n      \r\n      return {\r\n        date: day,\r\n        count: dayEntries.length,\r\n        words: dayEntries.reduce((sum, e) => sum + e.wordCount, 0),\r\n        isToday: isToday(_day)\r\n      };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"therapeutic-journal-container max-w-7xl mx-auto p-6\">\r\n      {/* Header */}\r\n      <div className=\"mb-8\">\r\n        <div className=\"flex items-center justify-between mb-4\">\r\n          <div>\r\n            <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\r\n              Therapeutic Journal\r\n            </h2>\r\n            <p className=\"text-gray-600 dark:text-gray-400\">\r\n              Evidence-based journaling for mental wellness and self-discovery\r\n            </p>\r\n          </div>\r\n          <div className=\"flex gap-2\">\r\n            <motion.button\r\n              whileHover={{ scale: 1.05 }}\r\n              whileTap={{ scale: 0.95 }}\r\n              onClick={() => setShowStats(!showStats)}\r\n              className=\"p-2 bg-gray-100 dark:bg-gray-800 rounded-lg\"\r\n            >\r\n              <TrendingUp className=\"w-5 h-5\" />\r\n            </motion.button>\r\n            <motion.button\r\n              whileHover={{ scale: 1.05 }}\r\n              whileTap={{ scale: 0.95 }}\r\n              onClick={() => exportEntries('txt')}\r\n              className=\"p-2 bg-gray-100 dark:bg-gray-800 rounded-lg\"\r\n            >\r\n              <Download className=\"w-5 h-5\" />\r\n            </motion.button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Weekly Stats */}\r\n        <AnimatePresence>\r\n          {showStats && (\r\n            <motion.div\r\n              initial={{ opacity: 0, height: 0 }}\r\n              animate={{ opacity: 1, height: 'auto' }}\r\n              exit={{ opacity: 0, height: 0 }}\r\n              className=\"mb-6 p-4 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-gray-800 dark:to-gray-900 rounded-xl\"\r\n            >\r\n              <h3 className=\"text-sm font-semibold text-gray-700 dark:text-gray-300 mb-3\">This Week's Activity</h3>\r\n              <div className=\"grid grid-cols-7 gap-2\">\r\n                {getWeeklyStats().map((day, idx) => (\r\n                  <div\r\n                    key={idx}\r\n                    className={`text-center p-2 rounded-lg ${\r\n                      day.isToday\r\n                        ? 'bg-blue-100 dark:bg-blue-900'\r\n                        : 'bg-white dark:bg-gray-800'\r\n                    }`}\r\n                  >\r\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                      {formatDate(day.date, 'EEE')}\r\n                    </p>\r\n                    <p className=\"text-lg font-bold text-gray-900 dark:text-white\">\r\n                      {day.count}\r\n                    </p>\r\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                      {day.words} words\r\n                    </p>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </motion.div>\r\n          )}\r\n        </AnimatePresence>\r\n      </div>\r\n\r\n      {/* Main Content Area */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n        {/* Journal Writing Area */}\r\n        <div className=\"lg:col-span-2\">\r\n          {!isWriting ? (\r\n            <div>\r\n              {/* Journal Type Selection */}\r\n              <div className=\"mb-6\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-3\">\r\n                  Choose Journal Type\r\n                </h3>\r\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\r\n                  {Object.entries(_JOURNAL_TYPES).map(([key, type]) => {\r\n                    const Icon = type.icon;\r\n                    return (\r\n                      <motion.button\r\n                        key={key}\r\n                        whileHover={{ scale: 1.02 }}\r\n                        whileTap={{ scale: 0.98 }}\r\n                        onClick={() => {\r\n                          setSelectedType(key as keyof typeof JOURNAL_TYPES);\r\n                          setCurrentEntry(prev => ({ ...prev, type: key as keyof typeof JOURNAL_TYPES }));\r\n                          setIsWriting(true);\r\n                        }}\r\n                        className=\"p-4 bg-white dark:bg-gray-800 rounded-xl hover:shadow-lg transition-all group\"\r\n                      >\r\n                        <div className={`w-12 h-12 mx-auto mb-2 rounded-lg bg-gradient-to-r ${type.color} flex items-center justify-center text-white`}>\r\n                          <Icon className=\"w-6 h-6\" />\r\n                        </div>\r\n                        <h4 className=\"font-medium text-gray-900 dark:text-white mb-1\">\r\n                          {type.name}\r\n                        </h4>\r\n                        <p className=\"text-xs text-gray-600 dark:text-gray-400\">\r\n                          {type.description}\r\n                        </p>\r\n                      </motion.button>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Therapeutic Prompts */}\r\n              <div className=\"mb-6\">\r\n                <div className=\"flex items-center justify-between mb-3\">\r\n                  <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                    Therapeutic Prompts\r\n                  </h3>\r\n                  <button\r\n                    onClick={() => setShowPrompts(!showPrompts)}\r\n                    className=\"text-sm text-blue-500 hover:text-blue-600\"\r\n                  >\r\n                    {showPrompts ? 'Hide' : 'Show All'}\r\n                  </button>\r\n                </div>\r\n                \r\n                <AnimatePresence>\r\n                  {showPrompts && (\r\n                    <motion.div\r\n                      initial={{ opacity: 0, height: 0 }}\r\n                      animate={{ opacity: 1, height: 'auto' }}\r\n                      exit={{ opacity: 0, height: 0 }}\r\n                      className=\"space-y-2\"\r\n                    >\r\n                      <div className=\"flex gap-2 mb-3\">\r\n                        {['All', 'CBT', 'DBT', 'Mindfulness', 'Self-Compassion'].map(cat => (\r\n                          <button\r\n                            key={cat}\r\n                            onClick={() => setSelectedPromptCategory(cat === 'All' ? null : cat)}\r\n                            className={`px-3 py-1 rounded-full text-sm ${\r\n                              (cat === 'All' && !selectedPromptCategory) || selectedPromptCategory === cat\r\n                                ? 'bg-blue-500 text-white'\r\n                                : 'bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300'\r\n                            }`}\r\n                          >\r\n                            {cat}\r\n                          </button>\r\n                        ))}\r\n                      </div>\r\n                      \r\n                      {THERAPEUTIC_PROMPTS\r\n                        .filter(p => !selectedPromptCategory || p.category === selectedPromptCategory)\r\n                        .map(prompt => (\r\n                          <motion.div\r\n                            key={prompt.id}\r\n                            whileHover={{ x: 5 }}\r\n                            onClick={() => {\r\n                              setCurrentEntry(prev => ({\r\n                                ...prev,\r\n                                content: prompt.prompt,\r\n                                title: `${prompt.category}: ${prompt.therapeutic_approach}`\r\n                              }));\r\n                              setIsWriting(true);\r\n                            }}\r\n                            className=\"p-3 bg-gray-50 dark:bg-gray-800 rounded-lg cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\"\r\n                          >\r\n                            <div className=\"flex items-start gap-2\">\r\n                              <Sparkles className=\"w-4 h-4 text-yellow-500 mt-1 flex-shrink-0\" />\r\n                              <div className=\"flex-1\">\r\n                                <p className=\"text-sm text-gray-900 dark:text-white mb-1\">\r\n                                  {prompt.prompt}\r\n                                </p>\r\n                                <div className=\"flex gap-2\">\r\n                                  <span className=\"text-xs px-2 py-1 bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 rounded\">\r\n                                    {prompt.category}\r\n                                  </span>\r\n                                  <span className=\"text-xs px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 rounded\">\r\n                                    {prompt.therapeutic_approach}\r\n                                  </span>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </motion.div>\r\n                        ))}\r\n                    </motion.div>\r\n                  )}\r\n                </AnimatePresence>\r\n              </div>\r\n\r\n              {/* Recent Entries List */}\r\n              <div>\r\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-3\">\r\n                  Recent Entries\r\n                </h3>\r\n                <div className=\"space-y-3\">\r\n                  {filteredEntries.slice(-5).reverse().map(entry => (\r\n                    <motion.div\r\n                      key={entry.id}\r\n                      whileHover={{ scale: 1.01 }}\r\n                      onClick={() => setSelectedEntry(entry)}\r\n                      className=\"p-4 bg-white dark:bg-gray-800 rounded-xl cursor-pointer hover:shadow-md transition-all\"\r\n                    >\r\n                      <div className=\"flex items-start justify-between\">\r\n                        <div className=\"flex-1\">\r\n                          <div className=\"flex items-center gap-2 mb-1\">\r\n                            {React.createElement(JOURNAL_TYPES[entry.type].icon, {\r\n                              className: \"w-4 h-4 text-gray-500\"\r\n                            })}\r\n                            <h4 className=\"font-medium text-gray-900 dark:text-white\">\r\n                              {entry.title}\r\n                            </h4>\r\n                            {entry.encrypted && (\r\n                              <Lock className=\"w-3 h-3 text-gray-400\" />\r\n                            )}\r\n                          </div>\r\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400 line-clamp-2 mb-2\">\r\n                            {typeof entry.content === 'string'\r\n                              ? `${entry.content.substring(0, 100)  }...`\r\n                              : 'Structured entry'\r\n                            }\r\n                          </p>\r\n                          <div className=\"flex items-center gap-3 text-xs text-gray-500\">\r\n                            <span>{formatDate(entry.timestamp, 'MMM d, yyyy')}</span>\r\n                            <span>{entry.wordCount} words</span>\r\n                            {entry.mood && (\r\n                              <span className=\"flex items-center gap-1\">\r\n                                {React.createElement(\r\n                                  MOOD_OPTIONS.find(m => m.value === entry.mood)?.icon || Sun,\r\n                                  { className: \"w-3 h-3\" }\r\n                                )}\r\n                                {entry.mood}\r\n                              </span>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                        <ChevronRight className=\"w-5 h-5 text-gray-400 mt-1\" />\r\n                      </div>\r\n                    </motion.div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6\">\r\n              {/* Writing Header */}\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <div className=\"flex items-center gap-3\">\r\n                  {React.createElement(JOURNAL_TYPES[selectedType].icon, {\r\n                    className: \"w-6 h-6 text-gray-500\"\r\n                  })}\r\n                  <div>\r\n                    <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                      {JOURNAL_TYPES[selectedType].name}\r\n                    </h3>\r\n                    <p className=\"text-sm text-gray-500\">\r\n                      {formatDate(new Date(), 'EEEE, MMMM d, yyyy')}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex gap-2\">\r\n                  <button\r\n                    onClick={() => setIsEncrypted(!isEncrypted)}\r\n                    className={`p-2 rounded-lg ${\r\n                      isEncrypted\r\n                        ? 'bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-400'\r\n                        : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400'\r\n                    }`}\r\n                  >\r\n                    {isEncrypted ? <Lock className=\"w-4 h-4\" /> : <Unlock className=\"w-4 h-4\" />}\r\n                  </button>\r\n                  <button\r\n                    onClick={saveEntry}\r\n                    className=\"px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 flex items-center gap-2\"\r\n                  >\r\n                    <Save className=\"w-4 h-4\" />\r\n                    Save\r\n                  </button>\r\n                  <button\r\n                    onClick={() => {\r\n                      setIsWriting(false);\r\n                      setCurrentEntry({\r\n                        type: 'freeform',\r\n                        title: '',\r\n                        content: '',\r\n                        tags: [],\r\n                        mood: undefined\r\n                      });\r\n                    }}\r\n                    className=\"px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600\"\r\n                  >\r\n                    Cancel\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Title Input */}\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Entry title (_optional)\"\r\n                value={currentEntry.title || ''}\r\n                onChange={(e) => setCurrentEntry(prev => ({ ...prev, title: e.target.value }))}\r\n                className=\"w-full mb-4 px-4 py-2 bg-gray-50 dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              />\r\n\r\n              {/* Mood Selection */}\r\n              <div className=\"mb-4\">\r\n                <label htmlFor=\"input_u1up5dvou\" className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block\">\r\n                  How are you feeling?\r\n                </label>\r\n                <div className=\"flex gap-3\">\r\n                  {MOOD_OPTIONS.map(mood => {\r\n                    const Icon = mood.icon;\r\n                    return (\r\n                      <button\r\n                        key={mood.value}\r\n                        onClick={() => setCurrentEntry(prev => ({ \r\n                          ...prev, \r\n                          mood: prev.mood === mood.value ? undefined : mood.value \r\n                        }))}\r\n                        className={`p-3 rounded-lg transition-all ${\r\n                          currentEntry.mood === mood.value\r\n                            ? 'bg-blue-100 dark:bg-blue-900 ring-2 ring-blue-500'\r\n                            : 'bg-gray-50 dark:bg-gray-900 hover:bg-gray-100 dark:hover:bg-gray-800'\r\n                        }`}\r\n                      >\r\n                        <Icon className={`w-6 h-6 ${mood.color}`} />\r\n                      </button>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Writing Area */}\r\n              {selectedType === 'thought' || selectedType === 'emotion' ? (\r\n                <div className=\"space-y-4\">\r\n                  {Object.entries(JOURNAL_TYPES[selectedType].structure!).map(([key, prompt]) => (\r\n                    <div key={key}>\r\n                      <label htmlFor=\"input_q6n8mo9is\" className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block\">\r\n                        {prompt}\r\n                      </label>\r\n                      <textarea\r\n                        placeholder={`Write about ${prompt.toLowerCase()}...`}\r\n                        value={(currentEntry.content as Record<string, string>)?.[key] || ''}\r\n                        onChange={(e) => setCurrentEntry(prev => ({\r\n                          ...prev,\r\n                          content: {\r\n                            ...(typeof prev.content === 'object' ? prev.content : {}),\r\n                            [key]: e.target.value\r\n                          }\r\n                        }))}\r\n                        className=\"w-full px-4 py-3 bg-gray-50 dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none\"\r\n                        rows={3}\r\n                      />\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  {selectedType === 'gratitude' || selectedType === 'reflection' ? (\r\n                    <div className=\"mb-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\r\n                      <p className=\"text-sm text-blue-700 dark:text-blue-300\">\r\n                        Prompts to consider:\r\n                      </p>\r\n                      <ul className=\"mt-2 space-y-1\">\r\n                        {JOURNAL_TYPES[selectedType].prompts?.map((prompt, idx) => (\r\n                          <li key={idx} className=\"text-sm text-blue-600 dark:text-blue-400\">\r\n                            • {prompt}\r\n                          </li>\r\n                        ))}\r\n                      </ul>\r\n                    </div>\r\n                  ) : null}\r\n                  \r\n                  <textarea\r\n                    ref={editorRef}\r\n                    placeholder=\"Start writing your thoughts...\"\r\n                    value={currentEntry.content as string || ''}\r\n                    onChange={(e) => setCurrentEntry(prev => ({ ...prev, content: e.target.value }))}\r\n                    className=\"w-full h-96 px-4 py-3 bg-gray-50 dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none\"\r\n                  />\r\n                </div>\r\n              )}\r\n\r\n              {/* Tags Input */}\r\n              <div className=\"mt-4\">\r\n                <label htmlFor=\"input_t95p5495r\" className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block\">\r\n                  Tags (comma-separated)\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"e.g., work, family, self-care\"\r\n                  value={currentEntry.tags?.join(', ') || ''}\r\n                  onChange={(e) => setCurrentEntry(prev => ({\r\n                    ...prev,\r\n                    tags: e.target.value.split(',').map(tag => tag.trim()).filter(tag => tag)\r\n                  }))}\r\n                  className=\"w-full px-4 py-2 bg-gray-50 dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                />\r\n              </div>\r\n\r\n              {/* Word Count */}\r\n              <div className=\"mt-4 flex justify-between text-sm text-gray-500\">\r\n                <span>\r\n                  {autoSaveEnabled && (\r\n                    <>\r\n                      <span className=\"inline-block w-2 h-2 bg-green-500 rounded-full mr-2\"></span>\r\n                      Auto-save enabled\r\n                    </>\r\n                  )}\r\n                </span>\r\n                <span>\r\n                  {calculateStats(currentEntry.content || '').wordCount} words\r\n                </span>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Sidebar */}\r\n        <div className=\"space-y-6\">\r\n          {/* Search and _Filter */}\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-xl p-4\">\r\n            <h3 className=\"font-semibold text-gray-900 dark:text-white mb-3\">\r\n              Search & Filter\r\n            </h3>\r\n            <div className=\"space-y-3\">\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Search entries...\"\r\n                  value={searchQuery}\r\n                  onChange={(e) => setSearchQuery(e.target.value)}\r\n                  className=\"w-full pl-10 pr-4 py-2 bg-gray-50 dark:bg-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                />\r\n              </div>\r\n              \r\n              <select\r\n                value={filterType || ''}\r\n                onChange={(e) => setFilterType(e.target.value as keyof typeof JOURNAL_TYPES || null)}\r\n                className=\"w-full px-4 py-2 bg-gray-50 dark:bg-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              >\r\n                <option value=\"\">All Types</option>\r\n                {Object.entries(_JOURNAL_TYPES).map(([key, type]) => (\r\n                  <option key={key} value={key}>{type.name}</option>\r\n                ))}\r\n              </select>\r\n              \r\n              <select\r\n                value={filterMood || ''}\r\n                onChange={(e) => setFilterMood(e.target.value || null)}\r\n                className=\"w-full px-4 py-2 bg-gray-50 dark:bg-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              >\r\n                <option value=\"\">All Moods</option>\r\n                {MOOD_OPTIONS.map(mood => (\r\n                  <option key={mood.value} value={mood.value}>\r\n                    {mood.value.charAt(0).toUpperCase() + mood.value.slice(1)}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Selected Entry View */}\r\n          <AnimatePresence>\r\n            {selectedEntry && (\r\n              <motion.div\r\n                initial={{ opacity: 0, y: 20 }}\r\n                animate={{ opacity: 1, y: 0 }}\r\n                exit={{ opacity: 0, y: 20 }}\r\n                className=\"bg-white dark:bg-gray-800 rounded-xl p-4\"\r\n              >\r\n                <div className=\"flex items-center justify-between mb-3\">\r\n                  <h3 className=\"font-semibold text-gray-900 dark:text-white\">\r\n                    Entry Details\r\n                  </h3>\r\n                  <button\r\n                    onClick={() => setSelectedEntry(null)}\r\n                    className=\"text-gray-400 hover:text-gray-600\"\r\n                  >\r\n                    ×\r\n                  </button>\r\n                </div>\r\n                \r\n                <div className=\"space-y-3\">\r\n                  <div>\r\n                    <p className=\"text-sm text-gray-500 mb-1\">Title</p>\r\n                    <p className=\"font-medium text-gray-900 dark:text-white\">\r\n                      {selectedEntry.title}\r\n                    </p>\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <p className=\"text-sm text-gray-500 mb-1\">Date</p>\r\n                    <p className=\"text-gray-700 dark:text-gray-300\">\r\n                      {formatDate(selectedEntry.timestamp, 'PPP')}\r\n                    </p>\r\n                  </div>\r\n                  \r\n                  {selectedEntry.mood && (\r\n                    <div>\r\n                      <p className=\"text-sm text-gray-500 mb-1\">Mood</p>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        {React.createElement(\r\n                          MOOD_OPTIONS.find(m => m.value === selectedEntry.mood)?.icon || Sun,\r\n                          { className: \"w-5 h-5\" }\r\n                        )}\r\n                        <span className=\"text-gray-700 dark:text-gray-300\">\r\n                          {selectedEntry.mood}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {selectedEntry.tags.length > 0 && (\r\n                    <div>\r\n                      <p className=\"text-sm text-gray-500 mb-1\">Tags</p>\r\n                      <div className=\"flex flex-wrap gap-1\">\r\n                        {selectedEntry.tags.map((tag, idx) => (\r\n                          <span\r\n                            key={idx}\r\n                            className=\"px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded text-xs\"\r\n                          >\r\n                            {tag}\r\n                          </span>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {selectedEntry.insights && selectedEntry.insights.length > 0 && (\r\n                    <div>\r\n                      <p className=\"text-sm text-gray-500 mb-1\">Insights</p>\r\n                      <div className=\"space-y-1\">\r\n                        {selectedEntry.insights.map((insight, idx) => (\r\n                          <div key={idx} className=\"flex items-center gap-2\">\r\n                            <Sparkles className=\"w-3 h-3 text-yellow-500\" />\r\n                            <span className=\"text-sm text-gray-700 dark:text-gray-300\">\r\n                              {insight}\r\n                            </span>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  <div>\r\n                    <p className=\"text-sm text-gray-500 mb-1\">Statistics</p>\r\n                    <div className=\"grid grid-cols-2 gap-2\">\r\n                      <div className=\"text-center p-2 bg-gray-50 dark:bg-gray-900 rounded\">\r\n                        <p className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                          {selectedEntry.wordCount}\r\n                        </p>\r\n                        <p className=\"text-xs text-gray-500\">words</p>\r\n                      </div>\r\n                      <div className=\"text-center p-2 bg-gray-50 dark:bg-gray-900 rounded\">\r\n                        <p className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                          {selectedEntry.readingTime}\r\n                        </p>\r\n                        <p className=\"text-xs text-gray-500\">min read</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"pt-3 border-t border-gray-200 dark:border-gray-700\">\r\n                    <button\r\n                      onClick={() => {\r\n                        setCurrentEntry({\r\n                          ...selectedEntry,\r\n                          type: selectedEntry.type\r\n                        });\r\n                        setSelectedType(selectedEntry.type);\r\n                        setIsWriting(true);\r\n                        setSelectedEntry(null);\r\n                      }}\r\n                      className=\"w-full px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 flex items-center justify-center gap-2\"\r\n                    >\r\n                      <Edit3 className=\"w-4 h-4\" />\r\n                      Continue Entry\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </motion.div>\r\n            )}\r\n          </AnimatePresence>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\wellness\\TherapeuticProgressTracker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\wellness\\WellnessDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\wellness\\WellnessToolsSuite.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\config\\security.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\config\\securityValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\constants\\crisis.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\contexts\\AnonymousAuthContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":131,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":131,"endColumn":33},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'validateDataIntegrity'. Either include it or remove the dependency array.","line":342,"column":6,"nodeType":"ArrayExpression","endLine":342,"endColumn":24,"suggestions":[{"desc":"Update the dependencies array to be: [cleanupStaleData, validateDataIntegrity]","fix":{"range":[10764,10782],"text":"[cleanupStaleData, validateDataIntegrity]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '../utils/logger';\n/**\r\n * Anonymous-Only Authentication Context\r\n * \r\n * Provides anonymous access without any registration or data collection\r\n * All user data is stored locally and never transmitted\r\n * Complete privacy and anonymity guaranteed\r\n * SECURITY: Updated to use secure storage and backend integration\r\n */\r\n\r\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { secureStorage } from '../services/security/SecureLocalStorage';\r\nimport { _ApiService } from '../services/api/ApiService';\r\n\r\ninterface AnonymousUser {\r\n  id: string; // Random session ID _stored locally only\r\n  nickname?: string; // Optional friendly name (_stored locally)\r\n  name?: string; // Optional display name for dashboard components\r\n  email?: string; // Optional email for display purposes only (never transmitted)\r\n  token?: string; // Optional session token for authenticated features\r\n  profile: {\r\n    pronouns?: string;\r\n    ageRange?: '13-17' | '18-24' | '25-34' | '35-44' | '45-54' | '55-64' | '65+';\r\n    preferredLanguage?: string;\r\n    timezone?: string;\r\n    emergencyContact?: {\r\n      name: string;\r\n      phone: string;\r\n      relationship: string;\r\n    };\r\n    mentalHealthGoals?: string[];\r\n    supportPreferences?: {\r\n      peerSupport: boolean;\r\n      professionalSupport: boolean;\r\n      groupActivities: boolean;\r\n      onlineTherapy: boolean;\r\n    };\r\n    triggerWarnings?: string[];\r\n    copingStrategies?: string[];\r\n    medication?: {\r\n      taking: boolean;\r\n      reminders: boolean;\r\n      names?: string[];\r\n    };\r\n    therapyExperience?: 'none' | 'some' | 'extensive';\r\n    crisisHistory?: boolean;\r\n  };\r\n  preferences: {\r\n    theme?: 'light' | 'dark' | 'auto';\r\n    fontSize?: 'small' | 'medium' | 'large';\r\n    reducedMotion?: boolean;\r\n    highContrast?: boolean;\r\n    colorBlind?: boolean;\r\n    screenReader?: boolean;\r\n    language?: string;\r\n    notifications?: {\r\n      enabled: boolean;\r\n      types: {\r\n        moodReminders: boolean;\r\n        medicationReminders: boolean;\r\n        appointmentReminders: boolean;\r\n        crisisAlerts: boolean;\r\n        communityUpdates: boolean;\r\n        achievementAlerts: boolean;\r\n      };\r\n      schedule: {\r\n        quietHours: { start: string; end: string };\r\n        weekendDifferent: boolean;\r\n      };\r\n    };\r\n    privacy?: {\r\n      shareProgress: boolean;\r\n      allowCommunityInteraction: boolean;\r\n      dataRetentionDays: number;\r\n      exportDataOnExit: boolean;\r\n    };\r\n  };\r\n  sessionStarted: Date;\r\n  isAnonymous: true; // Always true\r\n  lastActive: Date;\r\n  dataVersion: string;\r\n  sessionStats: {\r\n    moodEntriesCount: number;\r\n    wellnessActivitiesCompleted: number;\r\n    communityInteractions: number;\r\n    therapeuticContentAccessed: number;\r\n    crisisResourcesUsed: number;\r\n  };\r\n}\r\n\r\ninterface AnonymousAuthContextType {\r\n  // User state\r\n  user: AnonymousUser;\r\n  isAuthenticated: true; // Always authenticated as anonymous\r\n  isAnonymous: true; // Always anonymous\r\n  \r\n  // Profile management (no server calls)\r\n  updateNickname: (nickname: string) => void;\r\n  updateProfile: (profile: Partial<AnonymousUser['profile']>) => void;\r\n  updatePreferences: (preferences: Partial<AnonymousUser['preferences']>) => void;\r\n  updateSessionStats: (stats: Partial<AnonymousUser['sessionStats']>) => void;\r\n  \r\n  // Data management\r\n  exportUserData: () => Promise<string>;\r\n  importUserData: (_data: string) => Promise<boolean>;\r\n  clearLocalData: () => void;\r\n  logout: () => void; // Alias for clearLocalData for compatibility\r\n  \r\n  // Session info\r\n  sessionDuration: number; // Minutes since session started\r\n  extendSession: () => void;\r\n  updateLastActive: () => void;\r\n  \r\n  // Security & Privacy\r\n  isDataStale: () => boolean;\r\n  cleanupStaleData: () => void;\r\n  validateDataIntegrity: () => boolean;\r\n  \r\n  // Analytics (_anonymous)\r\n  getSessionInsights: () => {\r\n    totalSessions: number;\r\n    averageSessionDuration: number;\r\n    mostUsedFeatures: string[];\r\n    wellnessProgress: number;\r\n    lastWeekActivity: number[];\r\n  };\r\n}\r\n\r\nconst AnonymousAuthContext = createContext<AnonymousAuthContextType | undefined>(_undefined);\r\n\r\nexport function useAnonymousAuth() {\r\n  const context = useContext(_AnonymousAuthContext);\r\n  if (!context) {\r\n    throw new Error('useAnonymousAuth must be used within AnonymousAuthProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\n\r\n// Generate a random session ID (never sent to server)\r\nfunction generateSessionId(): string {\r\n  return `anon_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n}\r\n\r\n// Get or create anonymous user from secure storage with data migration\r\nfunction getOrCreateAnonymousUser(): AnonymousUser {\r\n  const _stored = secureStorage.getItem('anonymous_user');\r\n  \r\n  if (_stored) {\r\n    try {\r\n      const user = JSON.parse(_stored);\r\n      \r\n      // Restore date objects\r\n      user.sessionStarted = new Date(user.sessionStarted);\r\n      user.lastActive = user.lastActive ? new Date(user.lastActive) : new Date();\r\n      \r\n      // Migrate old _data structure if needed\r\n      if (!user.dataVersion || user.dataVersion < '2.0') {\r\n        logger.info('🔄 Migrating user _data to new structure...');\r\n        return migrateUserData(user);\r\n      }\r\n      \r\n      return user;\r\n    } catch {\r\n      logger.error('Failed to parse _stored user _data:');\r\n      // Create new user if _data is corrupted\r\n    }\r\n  }\r\n  \r\n  // Create new anonymous user with complete structure\r\n  const newUser: AnonymousUser = {\r\n    id: generateSessionId(),\r\n    profile: {\r\n      supportPreferences: {\r\n        peerSupport: true,\r\n        professionalSupport: false,\r\n        groupActivities: true,\r\n        onlineTherapy: false,\r\n      },\r\n      mentalHealthGoals: [],\r\n      triggerWarnings: [],\r\n      copingStrategies: [],\r\n      medication: {\r\n        taking: false,\r\n        reminders: false,\r\n      },\r\n      therapyExperience: 'none',\r\n      crisisHistory: false,\r\n    },\r\n    preferences: {\r\n      theme: 'auto',\r\n      fontSize: 'medium',\r\n      reducedMotion: false,\r\n      highContrast: false,\r\n      colorBlind: false,\r\n      screenReader: false,\r\n      language: 'en',\r\n      notifications: {\r\n        enabled: true,\r\n        types: {\r\n          moodReminders: true,\r\n          medicationReminders: false,\r\n          appointmentReminders: true,\r\n          crisisAlerts: true,\r\n          communityUpdates: false,\r\n          achievementAlerts: true,\r\n        },\r\n        schedule: {\r\n          quietHours: { start: '22:00', end: '07:00' },\r\n          weekendDifferent: false,\r\n        },\r\n      },\r\n      privacy: {\r\n        shareProgress: false,\r\n        allowCommunityInteraction: true,\r\n        dataRetentionDays: 365,\r\n        exportDataOnExit: false,\r\n      },\r\n    },\r\n    sessionStarted: new Date(),\r\n    lastActive: new Date(),\r\n    isAnonymous: true,\r\n    dataVersion: '2.0',\r\n    sessionStats: {\r\n      moodEntriesCount: 0,\r\n      wellnessActivitiesCompleted: 0,\r\n      communityInteractions: 0,\r\n      therapeuticContentAccessed: 0,\r\n      crisisResourcesUsed: 0,\r\n    },\r\n  };\r\n  \r\n  secureStorage.setItem('anonymous_user', JSON.stringify(_newUser));\r\n  return newUser;\r\n}\r\n\r\n// Migrate user data from older versions\r\nfunction migrateUserData(oldUser: unknown): AnonymousUser {\r\n  const migratedUser: AnonymousUser = {\r\n    ...oldUser,\r\n    profile: {\r\n      ...oldUser.profile,\r\n      supportPreferences: oldUser.profile?.supportPreferences || {\r\n        peerSupport: true,\r\n        professionalSupport: false,\r\n        groupActivities: true,\r\n        onlineTherapy: false,\r\n      },\r\n      mentalHealthGoals: oldUser.profile?.mentalHealthGoals || [],\r\n      triggerWarnings: oldUser.profile?.triggerWarnings || [],\r\n      copingStrategies: oldUser.profile?.copingStrategies || [],\r\n      medication: oldUser.profile?.medication || {\r\n        taking: false,\r\n        reminders: false,\r\n      },\r\n      therapyExperience: oldUser.profile?.therapyExperience || 'none',\r\n      crisisHistory: oldUser.profile?.crisisHistory || false,\r\n    },\r\n    preferences: {\r\n      ...oldUser.preferences,\r\n      notifications: oldUser.preferences?.notifications || {\r\n        enabled: true,\r\n        types: {\r\n          moodReminders: true,\r\n          medicationReminders: false,\r\n          appointmentReminders: true,\r\n          crisisAlerts: true,\r\n          communityUpdates: false,\r\n          achievementAlerts: true,\r\n        },\r\n        schedule: {\r\n          quietHours: { start: '22:00', end: '07:00' },\r\n          weekendDifferent: false,\r\n        },\r\n      },\r\n      privacy: oldUser.preferences?.privacy || {\r\n        shareProgress: false,\r\n        allowCommunityInteraction: true,\r\n        dataRetentionDays: 365,\r\n        exportDataOnExit: false,\r\n      },\r\n    },\r\n    lastActive: oldUser.lastActive ? new Date(oldUser.lastActive) : new Date(),\r\n    dataVersion: '2.0',\r\n    sessionStats: oldUser.sessionStats || {\r\n      moodEntriesCount: 0,\r\n      wellnessActivitiesCompleted: 0,\r\n      communityInteractions: 0,\r\n      therapeuticContentAccessed: 0,\r\n      crisisResourcesUsed: 0,\r\n    },\r\n  };\r\n  \r\n  // Save migrated data\r\n  secureStorage.setItem('anonymous_user', JSON.stringify(_migratedUser));\r\n  logger.info('✅ User data migration completed');\r\n  \r\n  return migratedUser;\r\n}\r\n\r\nexport function AnonymousAuthProvider({ children }: { children: ReactNode }) {\r\n  const [user, _setUser] = useState<AnonymousUser>(_getOrCreateAnonymousUser);\r\n  const [sessionDuration, _setSessionDuration] = useState(0);\r\n  \r\n  // Update session duration every minute\r\n  useEffect(() => {\r\n    const updateDuration = () => {\r\n      const _minutes = Math.floor((Date.now() - user.sessionStarted.getTime()) / 60000);\r\n      setSessionDuration(_minutes);\r\n    };\r\n    \r\n    updateDuration();\r\n    const _interval = setInterval(updateDuration, 60000); // Update every minute\r\n    \r\n    return () => clearInterval(_interval);\r\n  }, [user.sessionStarted]);\r\n  \r\n  // Auto-update last active and cleanup stale data\r\n  useEffect(() => {\r\n    const handleActivity = () => updateLastActive();\r\n    \r\n    // Track user activity\r\n    const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'];\r\n    events.forEach(event => {\r\n      document.addEventListener(event, handleActivity, { passive: true });\r\n    });\r\n    \r\n    // Cleanup stale data on component mount\r\n    cleanupStaleData();\r\n    \r\n    // Validate data integrity\r\n    if (!validateDataIntegrity()) {\r\n      logger.warn('⚠️ Data integrity issues detected, creating fresh user _data');\r\n      setUser(getOrCreateAnonymousUser());\r\n    }\r\n    \r\n    return () => {\r\n      events.forEach(event => {\r\n        document.removeEventListener(event, handleActivity);\r\n      });\r\n    };\r\n  }, [cleanupStaleData]);\r\n  \r\n  // Save user to secure storage whenever it changes\r\n  useEffect(() => {\r\n    secureStorage.setItem('anonymous_user', JSON.stringify(user));\r\n  }, [user]);\r\n  \r\n  const updateNickname = (nickname: string) => {\r\n    setUser(prev => ({ \r\n      ...prev, \r\n      nickname,\r\n      lastActive: new Date(),\r\n    }));\r\n  };\r\n  \r\n  const updateProfile = (profile: Partial<AnonymousUser['profile']>) => {\r\n    setUser(prev => ({\r\n      ...prev,\r\n      profile: { ...prev.profile, ...profile },\r\n      lastActive: new Date(),\r\n    }));\r\n  };\r\n  \r\n  const updatePreferences = (preferences: Partial<AnonymousUser['preferences']>) => {\r\n    setUser(prev => ({\r\n      ...prev,\r\n      preferences: { ...prev.preferences, ...preferences },\r\n      lastActive: new Date(),\r\n    }));\r\n  };\r\n  \r\n  const updateSessionStats = (stats: Partial<AnonymousUser['sessionStats']>) => {\r\n    setUser(prev => ({\r\n      ...prev,\r\n      sessionStats: { ...prev.sessionStats, ...stats },\r\n      lastActive: new Date(),\r\n    }));\r\n  };\r\n  \r\n  const updateLastActive = () => {\r\n    setUser(prev => ({\r\n      ...prev,\r\n      lastActive: new Date(),\r\n    }));\r\n  };\r\n  \r\n  const clearLocalData = () => {\r\n    secureStorage.removeItem('anonymous_user');\r\n    // Clear all other local _data (both secure and regular storage)\r\n    secureStorage.clear();\r\n    sessionStorage.clear();\r\n    // Create fresh anonymous user\r\n    setUser(getOrCreateAnonymousUser());\r\n  };\r\n  \r\n  const extendSession = () => {\r\n    // Update the session started time and last active\r\n    setUser(prev => ({ \r\n      ...prev, \r\n      sessionStarted: new Date(),\r\n      lastActive: new Date(),\r\n    }));\r\n  };\r\n  \r\n  // Export user data for backup or transfer\r\n  const exportUserData = async (): Promise<string> => {\r\n    try {\r\n      const exportData = {\r\n        user,\r\n        exportDate: new Date().toISOString(),\r\n        version: '2.0',\r\n        // Include wellness and activity _data from other stores\r\n        wellnessData: localStorage.getItem('wellness-storage'),\r\n        activityData: localStorage.getItem('activity-store'),\r\n        metadata: {\r\n          sessionDuration,\r\n          totalSessions: 1, // Could be enhanced to track multiple sessions\r\n        },\r\n      };\r\n      \r\n      return JSON.stringify(exportData, null, 2);\r\n    } catch {\r\n      logger.error('Failed to export user _data:');\r\n      throw new Error('Unable to export _data. Please try again.');\r\n    }\r\n  };\r\n  \r\n  // Import user data from backup\r\n  const importUserData = async (_data: string): Promise<boolean> => {\r\n    try {\r\n      const importedData = JSON.parse(_data);\r\n      \r\n      // Validate _data structure\r\n      if (!importedData.user || !importedData.version) {\r\n        throw new Error('Invalid _data format');\r\n      }\r\n      \r\n      // Restore user data\r\n      const _restoredUser = {\r\n        ...importedData.user,\r\n        sessionStarted: new Date(importedData.user.sessionStarted),\r\n        lastActive: new Date(importedData.user.lastActive || new Date()),\r\n        id: generateSessionId(), // Generate new session ID for security\r\n      };\r\n      \r\n      setUser(_restoredUser);\r\n      \r\n      // Restore related data if present\r\n      if (importedData.wellnessData) {\r\n        localStorage.setItem('wellness-storage', importedData.wellnessData);\r\n      }\r\n      if (importedData.activityData) {\r\n        localStorage.setItem('activity-store', importedData.activityData);\r\n      }\r\n      \r\n      logger.info('✅ Successfully imported user data');\r\n      return true;\r\n    } catch {\r\n      logger.error('Failed to import user _data:');\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Check if data is stale (older than retention period)\r\n  const isDataStale = (): boolean => {\r\n    const __retentionDays   = user.preferences.privacy?.dataRetentionDays || 365;\r\n    const staleDate = new Date();\r\n    staleDate.setDate(staleDate.getDate() - retentionDays);\r\n    \r\n    return new Date(user.lastActive) < staleDate;\r\n  };\r\n  \r\n  // Clean up stale data based on privacy preferences\r\n  const cleanupStaleData = () => {\r\n    if (isDataStale()) {\r\n      logger.info('🧹 Cleaning up stale _data based on privacy preferences');\r\n      clearLocalData();\r\n    }\r\n  };\r\n  \r\n  // Validate data integrity\r\n  const validateDataIntegrity = (): boolean => {\r\n    try {\r\n      // Check essential fields\r\n      if (!user.id || !user.sessionStarted || !user.dataVersion) {\r\n        return false;\r\n      }\r\n      \r\n      // Check data structure\r\n      if (!user.profile || !user.preferences || !user.sessionStats) {\r\n        return false;\r\n      }\r\n      \r\n      return true;\r\n    } catch {\r\n      logger.error('Data integrity validation failed:');\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Get session insights\r\n  const getSessionInsights = () => {\r\n    return {\r\n      totalSessions: 1, // Could be enhanced to track multiple sessions\r\n      averageSessionDuration: sessionDuration,\r\n      mostUsedFeatures: [\r\n        user.sessionStats.moodEntriesCount > 0 ? 'Mood Tracking' : '',\r\n        user.sessionStats.wellnessActivitiesCompleted > 0 ? 'Wellness Activities' : '',\r\n        user.sessionStats.communityInteractions > 0 ? 'Community' : '',\r\n        user.sessionStats.therapeuticContentAccessed > 0 ? 'Therapeutic Content' : '',\r\n      ].filter(_Boolean),\r\n      wellnessProgress: Math.min(\r\n        (user.sessionStats.moodEntriesCount + \r\n         user.sessionStats.wellnessActivitiesCompleted + \r\n         user.sessionStats.therapeuticContentAccessed) / 3,\r\n        100\r\n      ),\r\n      lastWeekActivity: [0, 0, 0, 0, 0, 0, 0], // Placeholder for weekly activity\r\n    };\r\n  };\r\n  \r\n  const value: AnonymousAuthContextType = {\r\n    user,\r\n    isAuthenticated: true,\r\n    isAnonymous: true,\r\n    updateNickname,\r\n    updateProfile,\r\n    updatePreferences,\r\n    updateSessionStats,\r\n    exportUserData,\r\n    importUserData,\r\n    clearLocalData,\r\n    logout: clearLocalData, // Alias for compatibility\r\n    sessionDuration,\r\n    extendSession,\r\n    updateLastActive,\r\n    isDataStale,\r\n    cleanupStaleData,\r\n    validateDataIntegrity,\r\n    getSessionInsights,\r\n  };\r\n  \r\n  return (\r\n    <AnonymousAuthContext.Provider value={value}>\r\n      {children}\r\n    </AnonymousAuthContext.Provider>\r\n  );\r\n}\r\n\r\n/**\r\n * Privacy Notice Component\r\n * Shows users that they&apos;re anonymous\r\n */\r\nexport function AnonymousNotice() {\r\n  const { user, sessionDuration } = useAnonymousAuth();\r\n  \r\n  return (\r\n    <div className=\"bg-gradient-to-r from-blue-50 to-green-50 rounded-lg p-4 border border-blue-200\">\r\n      <div className=\"flex items-center gap-3\">\r\n        <div className=\"text-blue-600\">\r\n          <svg className=\"h-6 w-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} \r\n                  d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\r\n          </svg>\r\n        </div>\r\n        <div className=\"flex-1\">\r\n          <h3 className=\"font-semibold text-gray-900\">You&apos;re Completely Anonymous</h3>\r\n          <p className=\"text-sm text-gray-600 mt-1\">\r\n            {user.nickname ? `Hi ${user.nickname}! ` : ''}\r\n            No registration required. No data collected. Your privacy is protected.\r\n            {sessionDuration > 0 && ` you&apos;ve been here for ${sessionDuration} minute${sessionDuration !== 1 ? 's' : ''}.`}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\contexts\\AuthContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Move your React context(s) to a separate file.","line":86,"column":14,"nodeType":"Identifier","messageId":"reactContext","endLine":86,"endColumn":25},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":88,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":88,"endColumn":24},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkSessionExpiry'. Either include it or remove the dependency array.","line":119,"column":6,"nodeType":"ArrayExpression","endLine":119,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [checkAuth, checkSessionExpiry]","fix":{"range":[4163,4174],"text":"[checkAuth, checkSessionExpiry]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enhanced Authentication Context\n * Comprehensive security features including MFA, privacy controls, and HIPAA compliance\n */\n\nimport { createContext, useContext, useState, useEffect, ReactNode, _useCallback } from 'react';\nimport type { User, PrivacySettings, ConsentRecord } from '@/types';\nimport { authService } from '@/services/auth/authService';\nimport { mfaService, MFAMethod, MFASetup } from '@/services/auth/mfaService';\nimport { privacyService, ConsentType, DataCategory } from '@/services/privacy/privacyService';\nimport { _hipaaService } from '@/services/compliance/hipaaService';\nimport { auditLogger } from '@/services/security/auditLogger';\nimport { secureStorage } from '@/services/security/secureStorage';\nimport { logger } from '../utils/logger';\n\ninterface AuthContextType {\n  // User state\n  user: User | null;\n  loading: boolean;\n  isAuthenticated: boolean;\n  isAnonymous: boolean;\n  \n  // Authentication methods\n  login: (email: string, password: string, options?: LoginOptions) => Promise<LoginResult>;\n  loginAnonymous: () => Promise<void>;\n  logout: () => Promise<void>;\n  register: (email: string, password: string, name: string, options?: RegisterOptions) => Promise<void>;\n  \n  // Profile management\n  updateProfile: (_updates: Partial<User>) => Promise<void>;\n  deleteAccount: (reason?: string) => Promise<void>;\n  \n  // Password management\n  changePassword: (_currentPassword: string, _newPassword: string) => Promise<void>;\n  requestPasswordReset: (email: string) => Promise<void>;\n  confirmPasswordReset: (token: string, _newPassword: string) => Promise<void>;\n  \n  // Multi-factor authentication\n  mfaEnabled: boolean;\n  setupMFA: (_method: MFAMethod) => Promise<unknown>;\n  verifyMFA: (code: string) => Promise<boolean>;\n  disableMFA: (_method: MFAMethod) => Promise<void>;\n  getMFAMethods: () => Promise<MFASetup[]>;\n  \n  // Privacy controls\n  privacySettings: PrivacySettings | null;\n  updatePrivacySettings: (_settings: Partial<PrivacySettings>) => Promise<void>;\n  grantConsent: (type: ConsentType, categories: DataCategory[], purpose: string) => Promise<void>;\n  revokeConsent: (consentId: string) => Promise<void>;\n  getConsents: () => Promise<ConsentRecord[]>;\n  \n  // Data management\n  exportUserData: (format?: 'json' | 'csv' | 'pdf') => Promise<string>;\n  requestDataDeletion: (categories?: DataCategory[]) => Promise<void>;\n  \n  // Session management\n  refreshSession: () => Promise<void>;\n  extendSession: () => void;\n  sessionExpiresAt: Date | null;\n  \n  // Emergency access\n  enableEmergencyAccess: () => Promise<void>;\n  disableEmergencyAccess: () => Promise<void>;\n  emergencyAccessEnabled: boolean;\n}\n\ninterface LoginOptions {\n  rememberMe?: boolean;\n  mfaCode?: string;\n  anonymousMode?: boolean;\n}\n\ninterface LoginResult {\n  success: boolean;\n  requiresMFA?: boolean;\n  mfaMethod?: MFAMethod;\n  error?: string;\n}\n\ninterface RegisterOptions {\n  acceptTerms: boolean;\n  consentToDataProcessing: boolean;\n  anonymousMode?: boolean;\n}\n\nexport const AuthContext = createContext<AuthContextType | undefined>(_undefined);\n\nexport function useAuth() {\n  const context = useContext(_AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [user, _setUser] = useState<User | null>(null);\n  const [loading, _setLoading] = useState(true);\n  const [mfaEnabled, _setMfaEnabled] = useState(false);\n  const [privacySettings, _setPrivacySettings] = useState<PrivacySettings | null>(null);\n  const [sessionExpiresAt, _setSessionExpiresAt] = useState<Date | null>(null);\n  const [emergencyAccessEnabled, _setEmergencyAccessEnabled] = useState(false);\n  const [mfaChallengeId, _setMfaChallengeId] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Check for existing session\n    checkAuth();\n    \n    // Set up session monitoring\n    const _sessionInterval = setInterval(() => {\n      checkSessionExpiry();\n    }, 60000); // Check every minute\n    \n    return () => clearInterval(_sessionInterval);\n  }, [checkAuth]);\n\n  const checkAuth = async () => {\n    try {\n      setLoading(true);\n      \n      // Check if user is authenticated\n      if (authService.isAuthenticated()) {\n        const currentUser = authService.getCurrentUser();\n        if (currentUser) {\n          setUser(currentUser);\n          \n          // Load additional user data\n          await loadUserData(currentUser.id);\n          \n          // Check session expiry\n          const session = authService.getCurrentSession();\n          if (session) {\n            setSessionExpiresAt(new Date(session.expiresAt));\n          }\n        }\n      }\n    } catch {\n      logger.error('Auth check failed:');\n      await authService.logout();\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const loadUserData = async (userId: string) => {\n    try {\n      // Load MFA status\n      const _hasMFA = await mfaService.hasMFAEnabled(userId);\n      setMfaEnabled(_hasMFA);\n      \n      // Load privacy _settings\n      const _settings = await privacyService.getPrivacySettings(userId);\n      setPrivacySettings(_settings);\n      \n      // Check emergency access status\n      const _emergencyKey = `emergency_access_${userId}`;\n      const emergencyStatus = await secureStorage.getItem(_emergencyKey);\n      setEmergencyAccessEnabled(!!emergencyStatus?.enabled);\n    } catch {\n      logger.error('Failed to load user data:');\n    }\n  };\n  \n  const checkSessionExpiry = () => {\n    if (sessionExpiresAt && new Date() > sessionExpiresAt) {\n      // Session expired, auto-logout\n      logout();\n    }\n  };\n\n  const login = async (\n    email: string,\n    password: string,\n    options: LoginOptions = {}\n  ): Promise<LoginResult> => {\n    try {\n      setLoading(true);\n      \n      // Check if MFA is required\n      if (mfaChallengeId && options.mfaCode) {\n        // Verify MFA code\n        const mfaValid = await mfaService.verifyChallenge(\n          user?.id || '',\n          mfaChallengeId,\n          options.mfaCode\n        );\n        \n        if (!mfaValid) {\n          return {\n            success: false,\n            error: 'Invalid MFA code',\n          };\n        }\n        \n        setMfaChallengeId(null);\n      }\n      \n      // Perform login\n      const result = await authService.login({\n        email,\n        password,\n        mfaCode: options.mfaCode,\n        anonymousMode: options.anonymousMode,\n        rememberMe: options.rememberMe,\n      });\n      \n      if (result.success && result.data) {\n        setUser(result.data.user);\n        setSessionExpiresAt(new Date(result.data.expiresAt));\n        \n        // Load additional user data\n        await loadUserData(result.data.user.id);\n        \n        // Check if MFA is required but not provided\n        const _hasMFA = await mfaService.hasMFAEnabled(result.data.user.id);\n        if (_hasMFA && !options.mfaCode) {\n          // Create MFA challenge\n          const challenge = await mfaService.createChallenge(result.data.user.id);\n          setMfaChallengeId(challenge.challengeId);\n          \n          return {\n            success: false,\n            requiresMFA: true,\n            mfaMethod: challenge._method,\n          };\n        }\n        \n        return { success: true };\n      }\n      \n      return {\n        success: false,\n        error: 'Login failed',\n      };\n    } catch {\n      logger.error('Login failed:');\n      return {\n        success: false,\n        error: '[Error details unavailable]',\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const loginAnonymous = async () => {\n    try {\n      setLoading(true);\n      \n      const result = await authService.login({\n        email: '',\n        password: '',\n        anonymousMode: true,\n      });\n      \n      if (result.success && result.data) {\n        setUser(result.data.user);\n        setSessionExpiresAt(new Date(result.data.expiresAt));\n      }\n    } catch {\n      logger.error('Anonymous login failed:');\n      throw undefined;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await authService.logout();\n      setUser(null);\n      setMfaEnabled(false);\n      setPrivacySettings(null);\n      setSessionExpiresAt(null);\n      setEmergencyAccessEnabled(false);\n      setMfaChallengeId(null);\n    } catch {\n      logger.error('Logout failed:');\n      // Force cleanup even if logout fails\n      setUser(null);\n    }\n  };\n\n  const register = async (\n    email: string,\n    password: string,\n    name: string,\n    options?: RegisterOptions\n  ) => {\n    try {\n      setLoading(true);\n      \n      if (!options?.acceptTerms || !options?.consentToDataProcessing) {\n        throw new Error('Must accept terms and consent to data processing');\n      }\n      \n      const result = await authService.register({\n        email,\n        password,\n        name,\n        acceptedTerms: options.acceptTerms,\n        consentToDataProcessing: options.consentToDataProcessing,\n        anonymousMode: options.anonymousMode,\n      });\n      \n      if (result.success && result.data) {\n        // Record initial consent\n        await privacyService.recordConsent({\n          userId: result.data.id,\n          type: 'data_processing',\n          consentGiven: true,\n          purpose: 'Account creation and platform usage',\n          dataCategories: ['personal_info'],\n        });\n        \n        // Auto-login after registration\n        if (!options.anonymousMode) {\n          await login(email, password);\n        }\n      }\n    } catch {\n      logger.error('Registration failed:');\n      throw undefined;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateProfile = async (_updates: Partial<User>) => {\n    try {\n      const result = await authService.updateProfile(_updates);\n      if (result.success && result.data) {\n        setUser(result.data);\n      }\n    } catch {\n      logger.error('Profile update failed:');\n      throw undefined;\n    }\n  };\n  \n  const deleteAccount = async (reason?: string) => {\n    try {\n      if (!user) throw new Error('No user logged in');\n      \n      // Request data deletion\n      await privacyService.requestDataDeletion(user.id, undefined, reason);\n      \n      // Logout\n      await logout();\n    } catch {\n      logger.error('Account deletion failed:');\n      throw undefined;\n    }\n  };\n  \n  const changePassword = async (_currentPassword: string, _newPassword: string) => {\n    try {\n      if (!user) throw new Error('No user logged in');\n      \n      // In production, verify current password and update\n      await auditLogger.log({\n        event: 'PASSWORD_CHANGE',\n        userId: user.id,\n        severity: 'info',\n      });\n    } catch {\n      logger.error('Password change failed:');\n      throw undefined;\n    }\n  };\n  \n  const requestPasswordReset = async (email: string) => {\n    try {\n      await authService.requestPasswordReset({ email });\n    } catch {\n      logger.error('Password reset request failed:');\n      throw undefined;\n    }\n  };\n  \n  const confirmPasswordReset = async (token: string, _newPassword: string) => {\n    try {\n      await authService.confirmPasswordReset({\n        token,\n        _newPassword,\n        confirmPassword: _newPassword,\n      });\n    } catch {\n      logger.error('Password reset confirmation failed:');\n      throw undefined;\n    }\n  };\n\n  // MFA methods\n  const setupMFA = async (_method: MFAMethod) => {\n    if (!user) throw new Error('No user logged in');\n    \n    switch (_method) {\n      case 'totp':\n        return await mfaService.setupTOTP(user.id);\n      case 'sms':\n        // Need phone number\n        throw new Error('Phone number required for SMS MFA');\n      case 'email':\n        return await mfaService.setupEmail(user.id, user.email);\n      case 'biometric':\n        return await mfaService.setupBiometric(user.id);\n      default:\n        throw new Error('Invalid MFA _method');\n    }\n  };\n  \n  const verifyMFA = async (code: string) => {\n    if (!user || !mfaChallengeId) return false;\n    \n    const result = await mfaService.verifyChallenge(user.id, mfaChallengeId, code);\n    if (_result) {\n      setMfaChallengeId(null);\n      setMfaEnabled(true);\n    }\n    return result;\n  };\n  \n  const disableMFA = async (_method: MFAMethod) => {\n    if (!user) throw new Error('No user logged in');\n    \n    await mfaService.disableMFA(user.id, _method);\n    const _hasMFA = await mfaService.hasMFAEnabled(user.id);\n    setMfaEnabled(_hasMFA);\n  };\n  \n  const getMFAMethods = async () => {\n    if (!user) return [];\n    return await mfaService.getUserMFAMethods(user.id);\n  };\n  \n  // Privacy methods\n  const updatePrivacySettings = async (_settings: Partial<PrivacySettings>) => {\n    if (!user) throw new Error('No user logged in');\n    \n    const _updated = await privacyService.updatePrivacySettings(user.id, _settings);\n    setPrivacySettings(_updated);\n  };\n  \n  const grantConsent = async (\n    type: ConsentType,\n    categories: DataCategory[],\n    purpose: string\n  ) => {\n    if (!user) throw new Error('No user logged in');\n    \n    await privacyService.recordConsent({\n      userId: user.id,\n      type,\n      consentGiven: true,\n      purpose,\n      dataCategories: categories,\n    });\n  };\n  \n  const revokeConsent = async (consentId: string) => {\n    if (!user) throw new Error('No user logged in');\n    \n    await privacyService.withdrawConsent(user.id, consentId);\n  };\n  \n  const getConsents = async () => {\n    if (!user) return [];\n    return await privacyService.getUserConsents(user.id);\n  };\n  \n  // Data management\n  const exportUserData = async (format: 'json' | 'csv' | 'pdf' = 'json') => {\n    if (!user) throw new Error('No user logged in');\n    \n    const request = await privacyService.requestDataPortability(user.id, format);\n    // In production, this would return download URL\n    return `export_${request.id}_${format}`;\n  };\n  \n  const requestDataDeletion = async (categories?: DataCategory[]) => {\n    if (!user) throw new Error('No user logged in');\n    \n    await privacyService.requestDataDeletion(user.id, categories);\n  };\n  \n  // Session management\n  const refreshSession = async () => {\n    const _tokens = await authService.refreshTokens();\n    if (_tokens) {\n      const session = authService.getCurrentSession();\n      if (session) {\n        setSessionExpiresAt(new Date(session.expiresAt));\n      }\n    }\n  };\n  \n  const extendSession = () => {\n    if (sessionExpiresAt) {\n      const _newExpiry = new Date(sessionExpiresAt.getTime() + 30 * 60 * 1000);\n      setSessionExpiresAt(_newExpiry);\n    }\n  };\n  \n  // Emergency access\n  const enableEmergencyAccess = async () => {\n    if (!user) throw new Error('No user logged in');\n    \n    const _key = `emergency_access_${user.id}`;\n    await secureStorage.setItem(_key, {\n      enabled: true,\n      enabledAt: new Date(),\n    });\n    setEmergencyAccessEnabled(true);\n    \n    await auditLogger.log({\n      event: 'EMERGENCY_ACCESS',\n      userId: user.id,\n      details: { action: 'enabled' },\n      severity: 'warning',\n    });\n  };\n  \n  const disableEmergencyAccess = async () => {\n    if (!user) throw new Error('No user logged in');\n    \n    const _key = `emergency_access_${user.id}`;\n    await secureStorage.removeItem(_key);\n    setEmergencyAccessEnabled(false);\n    \n    await auditLogger.log({\n      event: 'EMERGENCY_ACCESS',\n      userId: user.id,\n      details: { action: 'disabled' },\n      severity: 'info',\n    });\n  };\n  \n  const value = {\n    // User state\n    user,\n    loading,\n    isAuthenticated: !!user && !authService.isAnonymous(),\n    isAnonymous: authService.isAnonymous(),\n    \n    // Authentication\n    login,\n    loginAnonymous,\n    logout,\n    register,\n    \n    // Profile\n    updateProfile,\n    deleteAccount,\n    \n    // Password\n    changePassword,\n    requestPasswordReset,\n    confirmPasswordReset,\n    \n    // MFA\n    mfaEnabled,\n    setupMFA,\n    verifyMFA,\n    disableMFA,\n    getMFAMethods,\n    \n    // Privacy\n    privacySettings,\n    updatePrivacySettings,\n    grantConsent,\n    revokeConsent,\n    getConsents,\n    \n    // Data\n    exportUserData,\n    requestDataDeletion,\n    \n    // Session\n    refreshSession,\n    extendSession,\n    sessionExpiresAt,\n    \n    // Emergency\n    enableEmergencyAccess,\n    disableEmergencyAccess,\n    emergencyAccessEnabled,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useAIInsights.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useAITherapist.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'therapist.name'. Either exclude it or remove the dependency array.","line":91,"column":6,"nodeType":"ArrayExpression","endLine":91,"endColumn":47,"suggestions":[{"desc":"Update the dependencies array to be: [therapist.id, sessionId]","fix":{"range":[2764,2805],"text":"[therapist.id, sessionId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'generateYouthResponse'. Either include it or remove the dependency array.","line":242,"column":6,"nodeType":"ArrayExpression","endLine":242,"endColumn":199,"suggestions":[{"desc":"Update the dependencies array to be: [generateAnxietyDepressionResponse, generateGeneralResponse, generateGrowthResponse, generateMensHealthResponse, generateRecoveryResponse, generateRelationshipResponse, generateStressResponse, generateYouthResponse]","fix":{"range":[9559,9752],"text":"[generateAnxietyDepressionResponse, generateGeneralResponse, generateGrowthResponse, generateMensHealthResponse, generateRecoveryResponse, generateRelationshipResponse, generateStressResponse, generateYouthResponse]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useEffect, useRef } from 'react';\r\nimport { Therapist } from '../components/ai/TherapistSelector';\r\nimport { detectCrisisLevel, CrisisLevel } from '../utils/crisis';\r\nimport { logger } from '../utils/logger';\n\r\nexport interface TherapistMessage {\r\n  id: string;\r\n  sender: 'user' | 'therapist';\r\n  text: string;\r\n  timestamp: Date;\r\n  therapistId?: string;\r\n  sessionId?: string;\r\n  mood?: 'supportive' | 'challenging' | 'analytical' | 'empathetic';\r\n  techniques?: string[];\r\n}\r\n\r\nexport interface TherapySession {\r\n  id: string;\r\n  therapistId: string;\r\n  messages: TherapistMessage[];\r\n  startTime: Date;\r\n  lastActivity: Date;\r\n  sessionNotes?: string;\r\n  mood: 'starting' | 'engaged' | 'processing' | 'concluding';\r\n  techniques: string[];\r\n  insights: string[];\r\n}\r\n\r\ninterface UseAITherapistOptions {\r\n  therapist: Therapist;\r\n  sessionId?: string;\r\n  autoSave?: boolean;\r\n}\r\n\r\nexport const useAITherapist = ({ therapist, sessionId, autoSave = true }: UseAITherapistOptions) => {\r\n  const [session, _setSession] = useState<TherapySession | null>(null);\r\n  const [___isTyping, _setIsTyping] = useState(false);\r\n  const [___isConnected, _setIsConnected] = useState(false);\r\n  const typingTimeoutRef = useRef<NodeJS.Timeout>();\r\n\r\n  // Initialize or load session\r\n  useEffect(() => {\r\n    initializeSession();\r\n  }, [therapist.id, sessionId, initializeSession]);\r\n\r\n  // Auto-save session\r\n  useEffect(() => {\r\n    if (session && autoSave) {\r\n      saveSession();\r\n    }\r\n  }, [session, autoSave, saveSession]);\r\n\r\n  const initializeSession = useCallback(async () => {\r\n    try {\r\n      let existingSession: TherapySession | null = null;\r\n\r\n      // Try to load existing session\r\n      if (sessionId) {\r\n        const _savedSession = localStorage.getItem(`therapy-session-${sessionId}`);\r\n        if (_savedSession) {\r\n          existingSession = JSON.parse(_savedSession);\r\n        }\r\n      }\r\n\r\n      // Create new session if none exists\r\n      if (!existingSession) {\r\n        const newSession: TherapySession = {\r\n          id: sessionId || `session-${Date.now()}`,\r\n          therapistId: therapist.id,\r\n          messages: [],\r\n          startTime: new Date(),\r\n          lastActivity: new Date(),\r\n          mood: 'starting',\r\n          techniques: [],\r\n          insights: []\r\n        };\r\n\r\n        // Add welcome message based on therapist personality\r\n        const _welcomeMessage = generateWelcomeMessage(_therapist);\r\n        newSession.messages.push(_welcomeMessage);\r\n        \r\n        existingSession = newSession;\r\n      }\r\n\r\n      setSession(_existingSession);\r\n      setIsConnected(true);\r\n    } catch {\r\n      logger.error('Failed to initialize therapy session:');\r\n      setIsConnected(false);\r\n    }\r\n  }, [therapist.id, therapist.name, sessionId]);\r\n\r\n  const generateWelcomeMessage = (therapist: Therapist): TherapistMessage => {\r\n    const welcomeMessages = {\r\n      'dr-emma-chen': \"Hello, I'm Dr. Emma Chen. I'm here to create a safe, calming space where we can explore your thoughts and feelings together. What's on your mind today?\",\r\n      'dr-marcus-johnson': \"I'm Dr. Marcus Johnson. I understand that sharing your experiences can be difficult, and I want you to know this is a completely safe space. Take your time - I'm here to listen.\",\r\n      'dr-sofia-rodriguez': \"Hi, I'm Dr. Sofia Rodriguez. Relationships and connections are at the heart of our wellbeing. I'm curious to learn about your world and the people in it. What brings you here today?\",\r\n      'dr-alex-thompson': \"Hello! I'm Dr. Alex Thompson. I believe in your potential for growth and positive change. Let's explore what you'd like to work on and how I can best support your journey forward.\",\r\n      'dr-maya-patel': \"I'm Dr. Maya Patel. I know how overwhelming stress and burnout can feel, but you've taken an important step by being here. Let's talk about what's been weighing on you lately.\",\r\n      'dr-james-wilson': \"Hi, I'm Dr. James Wilson. Recovery is a journey that takes courage, and you've already shown that by being here. This is a judgment-free space where we can talk honestly about whatever you're facing.\",\r\n      'dr-sarah-kim': \"Hey there! I'm Dr. Sarah Kim. I know it can feel weird talking to someone about personal stuff, but I get it - I work with people your age all the time. What's been going on in your world?\",\r\n      'dr-david-brown': \"I'm Dr. David Brown. I know it's not always easy for guys to open up about what's really going on inside. This is a space where you can be completely honest about your thoughts and feelings without judgment.\"\r\n    };\r\n\r\n    return {\r\n      id: `welcome-${Date.now()}`,\r\n      sender: 'therapist',\r\n      text: welcomeMessages[therapist.id as keyof typeof welcomeMessages] || \r\n            `Hello, I'm ${therapist.name}. I'm here to support you through whatever you're experiencing. What would you like to talk about today?`,\r\n      timestamp: new Date(),\r\n      therapistId: therapist.id,\r\n      mood: 'supportive'\r\n    };\r\n  };\r\n\r\n  const __sendMessage   = useCallback(async (text: string) => {\r\n    if (!session || !text.trim()) return;\r\n\r\n    const _userMessage: TherapistMessage = {\r\n      id: `msg-${Date.now()}-user`,\r\n      sender: 'user',\r\n      text: text.trim(),\r\n      timestamp: new Date(),\r\n      therapistId: therapist.id,\r\n      sessionId: session.id\r\n    };\r\n\r\n    // Add user message immediately\r\n    setSession(prev => prev ? {\r\n      ...prev,\r\n      messages: [...prev.messages, _userMessage],\r\n      lastActivity: new Date()\r\n    } : null);\r\n\r\n    setIsTyping(true);\r\n\r\n    try {\r\n      // Simulate realistic typing delay\r\n      const typingDelay = Math.random() * 2000 + 1000;\r\n      \r\n      // Generate therapist response\r\n      const therapistResponse = await generateTherapistResponse(\r\n        [...session.messages, _userMessage], \r\n        therapist\r\n      );\r\n\r\n      // Clear typing timeout\r\n      if (typingTimeoutRef.current) {\r\n        clearTimeout(typingTimeoutRef.current);\r\n      }\r\n\r\n      // Add response after delay\r\n      typingTimeoutRef.current = setTimeout(() => {\r\n        setSession(prev => prev ? {\r\n          ...prev,\r\n          messages: [...prev.messages, therapistResponse],\r\n          lastActivity: new Date(),\r\n          mood: determineSessionMood(prev.messages.length),\r\n          techniques: updateTechniques(prev.techniques, therapistResponse.techniques || [])\r\n        } : null);\r\n        \r\n        setIsTyping(false);\r\n      }, typingDelay);\r\n\r\n    } catch {\r\n      logger.error('Failed to generate therapist response:');\r\n      \r\n      // Add undefined recovery message\r\n      const errorMessage: TherapistMessage = {\r\n        id: `msg-${Date.now()}-error`,\r\n        sender: 'therapist',\r\n        text: \"I'm having a moment of technical difficulty. Let me take a breath and refocus on you. Could you repeat what you just shared?\",\r\n        timestamp: new Date(),\r\n        therapistId: therapist.id,\r\n        mood: 'supportive'\r\n      };\r\n\r\n      setSession(prev => prev ? {\r\n        ...prev,\r\n        messages: [...prev.messages, errorMessage],\r\n        lastActivity: new Date()\r\n      } : null);\r\n      \r\n      setIsTyping(false);\r\n    }\r\n  }, [session, therapist, generateTherapistResponse]);\r\n\r\n  const generateTherapistResponse = useCallback(async (\r\n    messages: TherapistMessage[], \r\n    therapist: Therapist\r\n  ): Promise<TherapistMessage> => {\r\n    // Analyze the conversation context\r\n    const userMessages = messages.filter(m => m.sender === 'user');\r\n    const lastUserMessage = userMessages[userMessages.length - 1]?.text || '';\r\n    const conversationLength = userMessages.length;\r\n    \r\n    // Determine response mood and techniques\r\n    const mood = determineResponseMood(lastUserMessage, therapist, conversationLength);\r\n    const techniques = selectTechniques(therapist, lastUserMessage, conversationLength);\r\n    \r\n    // Generate response based on therapist's specialty and approach\r\n    let response = '';\r\n    \r\n    switch (therapist.specialty) {\r\n      case 'Anxiety & Depression':\r\n        response = generateAnxietyDepressionResponse(lastUserMessage, conversationLength, mood);\r\n        break;\r\n      case 'Trauma & PTSD Recovery':\r\n        response = generateTraumaResponse(lastUserMessage, conversationLength, mood);\r\n        break;\r\n      case 'Relationships & Family Dynamics':\r\n        response = generateRelationshipResponse(lastUserMessage, conversationLength, mood);\r\n        break;\r\n      case 'Life Transitions & Personal Growth':\r\n        response = generateGrowthResponse(lastUserMessage, conversationLength, mood);\r\n        break;\r\n      case 'Stress & Burnout Recovery':\r\n        response = generateStressResponse(lastUserMessage, conversationLength, mood);\r\n        break;\r\n      case 'Addiction & Recovery Support':\r\n        response = generateRecoveryResponse(lastUserMessage, conversationLength, mood);\r\n        break;\r\n      case 'Youth & Adolescent Mental Health':\r\n        response = generateYouthResponse(lastUserMessage, conversationLength, mood);\r\n        break;\r\n      case \"Men's Mental Health & Masculinity\":\r\n        response = generateMensHealthResponse(lastUserMessage, conversationLength, mood);\r\n        break;\r\n      default:\r\n        response = generateGeneralResponse(lastUserMessage, conversationLength, mood);\r\n    }\r\n\r\n    return {\r\n      id: `msg-${Date.now()}-therapist`,\r\n      sender: 'therapist',\r\n      text: response,\r\n      timestamp: new Date(),\r\n      therapistId: therapist.id,\r\n      mood,\r\n      techniques\r\n    };\r\n  }, [generateAnxietyDepressionResponse, generateGeneralResponse, generateGrowthResponse, generateMensHealthResponse, generateRecoveryResponse, generateRelationshipResponse, generateStressResponse,]);\r\n\r\n  // Helper function to check for crisis indicators\r\n  const checkForCrisisIndicators = (message: string): CrisisLevel => {\r\n    const assessment = detectCrisisLevel(message);\r\n    return assessment.level;\r\n  };\r\n\r\n  // Generate appropriate crisis response\r\n  const generateCrisisResponse = (level: CrisisLevel): string => {\r\n    if (level === 'critical') {\r\n      return \"I'm deeply concerned about what you're sharing. Your safety is my top priority right now. I want you to know that you're not alone, and there is help available immediately. Would you be willing to call the 988 Suicide & Crisis Lifeline with me right now? They have trained counselors available 24/7. You can also text HOME to 741741 for crisis support. Your life matters, and there are people who want to help you through this.\";\r\n    }\r\n    if (level === 'high') {\r\n      return \"I can hear that you're going through something really intense right now. Thank you for trusting me with these feelings. It sounds like you might benefit from some immediate support. The 988 Lifeline (call or text 988) has counselors available 24/7 who specialize in helping people through moments like this. Would you like to talk about what's making you feel this way? I'm here to listen and support you.\";\r\n    }\r\n    return \"I'm noticing that you're dealing with some difficult feelings. That takes courage to share. Let's work through this together, and remember that support is always available if things feel too overwhelming.\";\r\n  };\r\n\r\n  // Response generators for different specialties with evidence-based techniques\r\n  const generateAnxietyDepressionResponse = (_userMessage: string, length: number, mood: string): string => {\r\n    // Check for crisis keywords first\r\n    const crisisLevel = checkForCrisisIndicators(_userMessage);\r\n    if (crisisLevel === 'high' || crisisLevel === 'critical') {\r\n      return generateCrisisResponse(_crisisLevel);\r\n    }\r\n\r\n    const responses = {\r\n      supportive: [\r\n        \"I hear the weight in your words, and I want you to know that what you're feeling is valid. Anxiety and depression can make everything feel overwhelming. Let's take this one moment at a time together.\",\r\n        \"Thank you for sharing that with me. It takes courage to talk about these feelings. Your willingness to open up is actually a sign of strength, even if it doesn't feel that way right now.\",\r\n        \"What you're describing sounds really difficult. I'm here with you in this moment. Would it help to practice a quick grounding exercise together? Sometimes connecting with the present can provide a bit of relief.\",\r\n        \"I can sense how much pain you're carrying. These feelings won't last forever, even though they feel endless right now. Let's work on finding one small thing that might bring you a moment of ease.\"\r\n      ],\r\n      challenging: [\r\n        \"I notice you're being quite hard on yourself. Let's try an experiment - what would you say to your best friend if they were going through exactly what you're experiencing?\",\r\n        \"You mentioned feeling like you 'always' do this. I'm curious - can you think of even one small exception, a time when things went differently?\",\r\n        \"I'm hearing words like 'never', 'always', 'nothing works'. These are what we call cognitive distortions. What evidence do we have for and against these thoughts?\",\r\n        \"It sounds like your inner critic is really loud right now. What if we tried to turn down its volume and listen to a more compassionate inner voice?\"\r\n      ],\r\n      analytical: [\r\n        \"I'm noticing a pattern here. It seems like when you feel anxious about one thing, it triggers a cascade of other worries. Have you noticed this domino effect too?\",\r\n        \"Let's map this out together. What specific thoughts come first? Then what happens in your body? And finally, what actions do you take? Understanding this sequence can help us interrupt it.\",\r\n        \"I'm curious about the physical sensations you're experiencing. Our bodies often give us early warning signals. Where do you first notice the anxiety in your body?\",\r\n        \"There seems to be a connection between what you're thinking and how you're feeling. Let's explore that thought-feeling-behavior cycle together.\"\r\n      ],\r\n      empathetic: [\r\n        \"My heart goes out to you. Living with anxiety and depression can feel like carrying an invisible weight that no one else can see.\",\r\n        \"I want you to know that you're not alone in this struggle. What you're experiencing is real, and your feelings matter.\",\r\n        \"I can hear how exhausted you are from fighting these feelings every day. It's okay to feel tired. Healing isn't linear, and some days are just about surviving.\",\r\n        \"The fact that you're here, talking about this, shows incredible resilience. Even on your hardest days, you're still showing up, and that counts for something.\"\r\n      ]\r\n    };\r\n\r\n    const moodResponses = responses[mood as keyof typeof responses] || responses.supportive;\r\n    const selectedResponse = moodResponses[Math.floor(Math.random() * moodResponses.length)];\r\n    return selectedResponse || \"I'm here to support you through this difficult time.\";\r\n  };\r\n\r\n  const generateTraumaResponse = (_userMessage: string, length: number, mood: string): string => {\r\n    const responses = {\r\n      supportive: [\r\n        \"I want to acknowledge your courage in sharing this. Trauma can make it feel unsafe to be vulnerable, yet here you are, trusting me with your experience.\",\r\n        \"Your body and mind have been working so hard to protect you. What you're describing sounds like your system trying to keep you safe.\",\r\n        \"There's no right or wrong way to heal from trauma. Your pace is the right pace, and I'll be here with you through this process.\"\r\n      ],\r\n      empathetic: [\r\n        \"That sounds incredibly difficult to carry. I can only imagine how that experience has affected you.\",\r\n        \"Your feelings about this make complete sense given what you've been through. Trauma changes how we see the world, and that's normal.\",\r\n        \"I hear how alone you've felt with this. You're not alone now - we're in this together.\"\r\n      ],\r\n      grounding: [\r\n        \"I notice you might be feeling overwhelmed right now. Can you feel your feet on the floor? Let's take a moment to ground ourselves.\",\r\n        \"Your nervous system might be activated right now. Would it help to take some slow, deep breaths together?\",\r\n        \"I want to remind you that you're safe in this moment, right here with me. The past cannot hurt you now.\"\r\n      ]\r\n    };\r\n\r\n    const moodResponses = responses[mood as keyof typeof responses] || responses.supportive;\r\n    const selectedResponse = moodResponses[Math.floor(Math.random() * moodResponses.length)];\r\n    return selectedResponse || \"I'm here to support you through this difficult time.\";\r\n  };\r\n\r\n  // Helper function for response generators missing in the switch statement\r\n  const generateRelationshipResponse = (_userMessage: string, _length: number, _mood: string): string => {\r\n    const crisisLevel = checkForCrisisIndicators(_userMessage);\r\n    if (crisisLevel === 'high' || crisisLevel === 'critical') {\r\n      return generateCrisisResponse(_crisisLevel);\r\n    }\r\n    const responses = [\r\n      \"Relationships can be our greatest source of joy and our deepest source of pain. What you're describing sounds challenging. Can you help me understand what this relationship means to you?\",\r\n      \"I'm hearing that there's a lot of complexity in this relationship. It's okay to have mixed feelings about people we care about. What feels most pressing to address?\",\r\n      \"Connection with others is fundamental to our wellbeing. It sounds like this relationship is affecting you deeply. Let's explore what healthy boundaries might look like for you.\"\r\n    ];\r\n    const selectedResponse = responses[Math.floor(Math.random() * responses.length)];\r\n    return selectedResponse || \"I'm here to support you through this important moment.\";\r\n  };\r\n\r\n  const generateGrowthResponse = (_userMessage: string, _length: number, _mood: string): string => {\r\n    const crisisLevel = checkForCrisisIndicators(_userMessage);\r\n    if (crisisLevel === 'high' || crisisLevel === 'critical') {\r\n      return generateCrisisResponse(_crisisLevel);\r\n    }\r\n    const responses = [\r\n      \"Life transitions can feel overwhelming and exciting at the same time. What you're experiencing is a natural part of growth. What aspect of this change feels most significant to you?\",\r\n      \"Change often brings up mixed emotions. It's completely normal to feel uncertain while also hopeful. Let's explore what this transition means for your sense of self.\",\r\n      \"I hear that you're at a crossroads. These moments of decision can be powerful opportunities for self-discovery. What values are most important to you as you navigate this?\"\r\n    ];\r\n    const selectedResponse = responses[Math.floor(Math.random() * responses.length)];\r\n    return selectedResponse || \"I'm here to support you through this important moment.\";\r\n  };\r\n\r\n  const generateStressResponse = (_userMessage: string, _length: number, _mood: string): string => {\r\n    const crisisLevel = checkForCrisisIndicators(_userMessage);\r\n    if (crisisLevel === 'high' || crisisLevel === 'critical') {\r\n      return generateCrisisResponse(_crisisLevel);\r\n    }\r\n    const responses = [\r\n      \"Burnout is your body and mind's way of telling you that something needs to change. You're not weak for feeling overwhelmed - you're human. What would taking care of yourself look like right now?\",\r\n      \"I can hear the exhaustion in your words. Chronic stress takes a real toll on our wellbeing. Let's think about small, manageable ways to create moments of relief in your day.\",\r\n      \"The weight of constant stress can feel crushing. Your feelings are valid, and it's important to acknowledge how hard you've been working. What's one thing you could let go of, just for today?\"\r\n    ];\r\n    const selectedResponse = responses[Math.floor(Math.random() * responses.length)];\r\n    return selectedResponse || \"I'm here to support you through this important moment.\";\r\n  };\r\n\r\n  const generateRecoveryResponse = (_userMessage: string, _length: number, _mood: string): string => {\r\n    const crisisLevel = checkForCrisisIndicators(_userMessage);\r\n    if (crisisLevel === 'high' || crisisLevel === 'critical') {\r\n      return generateCrisisResponse(_crisisLevel);\r\n    }\r\n    const responses = [\r\n      \"Recovery is a journey with ups and downs, and every step forward counts, no matter how small. Your commitment to healing is evident in being here. What's helping you stay motivated today?\",\r\n      \"Addiction recovery takes tremendous courage. The fact that you're talking about this shows strength. Remember, slips don't erase progress. What support do you need right now?\",\r\n      \"I honor your bravery in facing this challenge. Recovery isn't just about stopping a behavior - it's about building a life worth living. What brings you meaning and purpose?\"\r\n    ];\r\n    const selectedResponse = responses[Math.floor(Math.random() * responses.length)];\r\n    return selectedResponse || \"I'm here to support you through this important moment.\";\r\n  };\r\n\r\n  const generateYouthResponse = (_userMessage: string, _length: number, _mood: string): string => {\r\n    const crisisLevel = checkForCrisisIndicators(_userMessage);\r\n    if (crisisLevel === 'high' || crisisLevel === 'critical') {\r\n      return generateCrisisResponse(_crisisLevel);\r\n    }\r\n    const responses = [\r\n      \"Being young doesn't make your feelings any less real or important. What you're going through matters, and I'm here to listen without judgment. What's been weighing on you?\",\r\n      \"I get it - sometimes it feels like nobody understands what you're dealing with. Your experiences are unique to you, and they're valid. Want to tell me more about what's going on?\",\r\n      \"Growing up in today's world comes with unique challenges that older generations might not fully understand. You're navigating a lot. What feels most overwhelming right now?\"\r\n    ];\r\n    const selectedResponse = responses[Math.floor(Math.random() * responses.length)];\r\n    return selectedResponse || \"I'm here to support you through this important moment.\";\r\n  };\r\n\r\n  const generateMensHealthResponse = (_userMessage: string, _length: number, _mood: string): string => {\r\n    const crisisLevel = checkForCrisisIndicators(_userMessage);\r\n    if (crisisLevel === 'high' || crisisLevel === 'critical') {\r\n      return generateCrisisResponse(_crisisLevel);\r\n    }\r\n    const responses = [\r\n      \"I appreciate you opening up - I know society often tells men they shouldn't talk about feelings. That's nonsense. Your emotions are valid and important. What's been on your mind?\",\r\n      \"Strength isn't about hiding pain or going it alone. Real strength is reaching out when you need support, like you're doing now. What's been the hardest part for you?\",\r\n      \"Men face unique pressures and expectations that can make mental health struggles feel isolating. You're not alone in this, and seeking help is a sign of wisdom, not weakness.\"\r\n    ];\r\n    const selectedResponse = responses[Math.floor(Math.random() * responses.length)];\r\n    return selectedResponse || \"I'm here to support you through this important moment.\";\r\n  };\r\n\r\n  // General response generator\r\n  const generateGeneralResponse = (_userMessage: string, _length: number, _mood: string): string => {\r\n    const crisisLevel = checkForCrisisIndicators(_userMessage);\r\n    if (crisisLevel === 'high' || crisisLevel === 'critical') {\r\n      return generateCrisisResponse(_crisisLevel);\r\n    }\r\n    const responses = [\r\n      \"I'm here to listen and support you. Can you tell me more about what you're experiencing?\",\r\n      \"Thank you for sharing that with me. What feels most important to explore right now?\",\r\n      \"I hear you, and I want to understand your experience better. Help me see this from your perspective.\",\r\n      \"Your feelings are valid and important. Let's take some time to understand what's happening for you.\",\r\n      \"I'm glad you're here and willing to talk about this. What would be most helpful for you right now?\"\r\n    ];\r\n    const selectedResponse = responses[Math.floor(Math.random() * responses.length)];\r\n    return selectedResponse || \"I'm here to support you through this important moment.\";\r\n  };\r\n\r\n  const determineResponseMood = (_userMessage: string, therapist: Therapist, messageCount: number): 'supportive' | 'challenging' | 'analytical' | 'empathetic' => {\r\n    // Enhanced sentiment analysis with therapeutic consideration\r\n    const lowerMessage = _userMessage.toLowerCase();\r\n    \r\n    // Priority 1: Check for emotional distress\r\n    const distressWords = ['hurt', 'pain', 'trauma', 'abuse', 'scared', 'terrified', 'alone', 'suicide', 'death', 'die'];\r\n    if (distressWords.some(_word => lowerMessage.includes(_word))) {\r\n      return 'empathetic';\r\n    }\r\n    \r\n    // Priority 2: Check for cognitive distortions (good for challenging)\r\n    const distortionWords = ['always', 'never', \"can't\", 'should', 'must', 'everyone', 'no one', 'worst', 'terrible'];\r\n    if (distortionWords.some(_word => lowerMessage.includes(_word))) {\r\n      // Only challenge if relationship is established and therapist uses CBT\r\n      if (messageCount > 3 && therapist.approach.includes('CBT')) {\r\n        return 'challenging';\r\n      }\r\n      return 'supportive'; // Default to supportive early in conversation\r\n    }\r\n    \r\n    // Priority 3: Check for analytical needs\r\n    const analyticalWords = ['why', 'understand', 'pattern', 'reason', 'cause', 'explain', 'analyze', 'figure out'];\r\n    if (analyticalWords.some(_word => lowerMessage.includes(_word))) {\r\n      return 'analytical';\r\n    }\r\n    \r\n    // Priority 4: Check emotional tone\r\n    const sadWords = ['sad', 'depressed', 'hopeless', 'empty', 'numb', 'worthless'];\r\n    const anxiousWords = ['anxious', 'worried', 'panic', 'nervous', 'stressed', 'overwhelmed'];\r\n    \r\n    if (sadWords.some(_word => lowerMessage.includes(_word)) || anxiousWords.some(_word => lowerMessage.includes(_word))) {\r\n      return 'empathetic';\r\n    }\r\n    \r\n    // Default to supportive\r\n    return 'supportive';\r\n  };\r\n\r\n  const determineSessionMood = (messageCount: number): TherapySession['mood'] => {\r\n    if (messageCount < 4) return 'starting';\r\n    if (messageCount < 10) return 'engaged';\r\n    if (messageCount < 16) return 'processing';\r\n    return 'concluding';\r\n  };\r\n\r\n  const selectTechniques = (therapist: Therapist, message: string, length: number): string[] => {\r\n    const __availableTechniques = therapist.approach.split(', ');\r\n    const selectedTechniques: string[] = [];\r\n    const lowerMessage = message.toLowerCase();\r\n    \r\n    // Evidence-based technique selection based on message content\r\n    if (lowerMessage.includes('anxious') || lowerMessage.includes('worry') || lowerMessage.includes('panic')) {\r\n      selectedTechniques.push('Anxiety Management');\r\n      if (lowerMessage.includes('breath') || lowerMessage.includes('heart')) {\r\n        selectedTechniques.push('Breathing Exercises');\r\n      }\r\n    }\r\n    \r\n    if (lowerMessage.includes('sad') || lowerMessage.includes('depressed') || lowerMessage.includes('hopeless')) {\r\n      selectedTechniques.push('Behavioral Activation');\r\n      selectedTechniques.push('Mood Monitoring');\r\n    }\r\n    \r\n    if (length > 5 && (lowerMessage.includes('think') || lowerMessage.includes('thought'))) {\r\n      selectedTechniques.push('Cognitive Restructuring');\r\n      if (lowerMessage.includes('always') || lowerMessage.includes('never')) {\r\n        selectedTechniques.push('Challenging Distortions');\r\n      }\r\n    }\r\n    \r\n    if (lowerMessage.includes('feel') || lowerMessage.includes('emotion') || lowerMessage.includes('overwhelming')) {\r\n      selectedTechniques.push('Emotion Regulation');\r\n      if (lowerMessage.includes('angry') || lowerMessage.includes('rage')) {\r\n        selectedTechniques.push('Anger Management');\r\n      }\r\n    }\r\n    \r\n    if (lowerMessage.includes('trauma') || lowerMessage.includes('ptsd') || lowerMessage.includes('flashback')) {\r\n      selectedTechniques.push('Grounding Techniques');\r\n      selectedTechniques.push('Safety Planning');\r\n    }\r\n    \r\n    if (lowerMessage.includes('relationship') || lowerMessage.includes('partner') || lowerMessage.includes('family')) {\r\n      selectedTechniques.push('Communication Skills');\r\n      selectedTechniques.push('Boundary Setting');\r\n    }\r\n    \r\n    if (lowerMessage.includes('stress') || lowerMessage.includes('overwhelm') || lowerMessage.includes('burnout')) {\r\n      selectedTechniques.push('Stress Management');\r\n      selectedTechniques.push('Self-Care Planning');\r\n    }\r\n    \r\n    // Add mindfulness for longer conversations\r\n    if (length > 10) {\r\n      selectedTechniques.push('Mindfulness');\r\n    }\r\n    \r\n    return [...new Set(_selectedTechniques)]; // Remove duplicates\r\n  };\r\n\r\n  const updateTechniques = (existing: string[], newTechniques: string[]): string[] => {\r\n    const _combined = [...existing, ...newTechniques];\r\n    return [...new Set(_combined)]; // Remove duplicates\r\n  };\r\n\r\n  const saveSession = useCallback(async () => {\r\n    if (!session) return;\r\n    \r\n    try {\r\n      localStorage.setItem(`therapy-session-${session.id}`, JSON.stringify(session));\r\n    } catch {\r\n      logger.error('Failed to save therapy session:');\r\n    }\r\n  }, [session]);\r\n\r\n  const __endSession   = useCallback(async () => {\r\n    if (!session) return;\r\n\r\n    // Generate session _summary\r\n    const _summary = {\r\n      ...session,\r\n      endTime: new Date(),\r\n      sessionNotes: `Session with ${therapist.name} - ${session.messages.length} messages exchanged. Techniques used: ${session.techniques.join(', ')}`\r\n    };\r\n\r\n    // Save final session state\r\n    localStorage.setItem(`therapy-session-completed-${session.id}`, JSON.stringify(_summary));\r\n    \r\n    // Clear current session\r\n    setSession(null);\r\n    setIsConnected(false);\r\n  }, [session, therapist]);\r\n\r\n  const __clearSession   = useCallback(() => {\r\n    if (session) {\r\n      localStorage.removeItem(`therapy-session-${session.id}`);\r\n    }\r\n    setSession(null);\r\n    setIsConnected(false);\r\n  }, [session]);\r\n\r\n  return {\r\n    session,\r\n    isTyping,\r\n    isConnected,\r\n    sendMessage,\r\n    endSession,\r\n    clearSession,\r\n    therapist\r\n  };\r\n};\r\n\r\nexport default useAITherapist;","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useAnalytics.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[516,519],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[516,519],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":106,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":109,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[731,734],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[731,734],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1074,1077],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1074,1077],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1356,1359],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1356,1359],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2508,2511],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2508,2511],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from 'react';\nimport { logger } from '../utils/logger';\n\n/**\n * Privacy-First Analytics Hook\n * \n * This hook provides a consistent interface for analytics but NEVER collects or sends any data.\n * All methods are no-ops to maintain code compatibility while ensuring complete user privacy.\n * \n * 🔒 NO DATA COLLECTION\n * 🔒 NO TRACKING\n * 🔒 100% ANONYMOUS\n */\n\ninterface AnalyticsEvent {\n  category: string;\n  action: string;\n  _label?: string;\n  _value?: number;\n  metadata?: Record<string, any>;\n}\n\nexport const useAnalytics = () => {\n  // All tracking methods are no-ops - we never collect any data\n  const __trackEvent   = useCallback(async (event: AnalyticsEvent | string, _properties?: Record<string, any>) => {\n    // Intentionally empty - no data collection\n    if (process.env.NODE_ENV === 'development') {\n      logger.info('[Privacy Mode] Analytics disabled - No data collected:', typeof event === 'string' ? event : event.action);\n    }\n  }, []);\n\n  const __trackPageView   = useCallback(async (page: string, _properties?: Record<string, any>) => {\n    // Intentionally empty - no page tracking\n    if (process.env.NODE_ENV === 'development') {\n      logger.info('[Privacy Mode] Page view not tracked:', page);\n    }\n  }, []);\n\n  const __trackError   = useCallback(async (errorType: string, errorDetails: Record<string, any>) => {\n    // Only log errors locally for debugging, never send anywhere\n    if (process.env.NODE_ENV === 'development') {\n      logger.error('[Local Error Log]', errorType, errorDetails);\n    }\n  }, []);\n\n  const __trackTiming   = useCallback(async (category: string, variable: string, _time: number, _label?: string) => {\n    // Intentionally empty - no performance tracking\n    if (process.env.NODE_ENV === 'development') {\n      logger.info('[Privacy Mode] Timing not tracked:', category, variable);\n    }\n  }, []);\n\n  const __trackInteraction   = useCallback(async (element: string, action: string, _value?: unknown) => {\n    // Intentionally empty - no interaction tracking\n    if (process.env.NODE_ENV === 'development') {\n      logger.info('[Privacy Mode] Interaction not tracked:', element, action);\n    }\n  }, []);\n\n  return {\n    trackEvent,\n    trackPageView,\n    trackError,\n    trackTiming,\n    trackInteraction,\n    // These methods also do nothing - maintaining interface compatibility\n    setUserId: (_id: string) => {\n      // Never store user IDs - we're anonymous only\n    },\n    setUserProperties: (_properties: Record<string, any>) => {\n      // Never store user _properties - complete privacy\n    }\n  };\n};\n\n/**\n * Privacy Notice:\n * This application does not collect, store, or transmit any user data.\n * All analytics functions are disabled to ensure complete user privacy.\n * Your mental health journey remains completely private and anonymous.\n */","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useAuth.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useBatteryStatus.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useConsoleNavigation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useCrisisAssessment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useDashboardData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useEnhancedKeyboardNavigation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useFeatureFlag.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useGeolocation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useKeyboardNavigation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useMobileFeatures.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useNavigatorOnLine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useNetworkStatus.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\usePerformanceMonitor.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[448,451],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[448,451],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":96,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":99,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1072,1075],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1072,1075],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'enableLogging'. Either exclude it or remove the dependency array.","line":56,"column":6,"nodeType":"ArrayExpression","endLine":56,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [bufferSize]","fix":{"range":[1635,1662],"text":"[bufferSize]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useRef } from 'react';\nimport { logger } from '../utils/logger';\n\n/**\n * Privacy-First Performance Monitor\n * \n * Monitors performance locally for user experience optimization\n * but NEVER sends any data to external servers.\n * \n * 🔒 All metrics stay local\n * 🔒 No external reporting\n * 🔒 Complete privacy\n */\n\ninterface PerformanceMetric {\n  name: string;\n  value: number;\n  timestamp: number;\n  metadata?: Record<string, any>;\n}\n\ninterface PerformanceMonitorConfig {\n  enableLogging?: boolean;\n  enableReporting?: boolean; // Always false - we never report\n  reportingEndpoint?: string; // Ignored - no reporting\n  sampleRate?: number;\n  bufferSize?: number;\n}\n\nexport function usePerformanceMonitor(config: PerformanceMonitorConfig = {}) {\n  const { enableLogging = process.env.NODE_ENV === 'development', bufferSize = 100 } = config;\n\n  const metricsBuffer = useRef<PerformanceMetric[]>([]);\n\n  // Record metrics locally only - never sent anywhere\n  const __recordMetric   = useCallback((name: string, value: number, metadata?: Record<string, any>) => {\n    const _metric: PerformanceMetric = {\n      name,\n      value,\n      timestamp: Date.now(),\n      metadata\n    };\n\n    // Only log in development for debugging\n    if (_enableLogging) {\n      logger.info(`[Local Performance] ${name}:`, value, metadata);\n    }\n\n    // Keep metrics in local buffer for app optimization only\n    metricsBuffer.current.push(_metric);\n    \n    // Trim buffer to prevent memory issues\n    if (metricsBuffer.current.length > bufferSize) {\n      metricsBuffer.current = metricsBuffer.current.slice(-bufferSize);\n    }\n  }, [enableLogging, bufferSize]);\n\n  // No-op flush - we never send data anywhere\n  const __flushMetrics   = useCallback(async () => {\n    // Clear local buffer without sending\n    metricsBuffer.current = [];\n    \n    if (process.env.NODE_ENV === 'development') {\n      logger.info('[Privacy Mode] Metrics cleared locally - nothing sent');\n    }\n  }, []);\n\n  return {\n    recordMetric,\n    flushMetrics,\n    getMetrics: () => [...metricsBuffer.current] // Local access only\n  };\n}\n\n/**\n * Privacy Guarantee:\n * - No session IDs are generated or stored\n * - No user agents are collected\n * - No data leaves your device\n * - Performance monitoring is purely for local app optimization\n */","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useQuickActionsContext.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'defaultActions' array makes the dependencies of useEffect Hook (at line 213) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'defaultActions' in its own useMemo() Hook.","line":24,"column":9,"nodeType":"VariableDeclarator","endLine":185,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, _useMemo } from 'react';\nimport { QuickAction } from '../types/dashboard';\nimport { useNavigate } from 'react-router-dom';\nimport { secureStorage } from '../services/security/SecureLocalStorage';\nimport { logger } from '../utils/logger';\n\ninterface QuickActionsContext {\n  actions: QuickAction[];\n  executeAction: (action: QuickAction) => void;\n  addCustomAction: (action: Omit<QuickAction, 'id'>) => void;\n  removeAction: (actionId: string) => void;\n  updateAction: (actionId: string, updates: Partial<QuickAction>) => void;\n  getFrequentActions: () => QuickAction[];\n  getRecentActions: () => QuickAction[];\n  searchActions: (query: string) => QuickAction[];\n  actionHistory: string[];\n  customActions: QuickAction[];\n}\n\nexport function useQuickActionsContext(): QuickActionsContext {\n  const navigate = useNavigate();\n  \n  // Default quick actions\n  const defaultActions: QuickAction[] = [\n    {\n      id: 'mood-log',\n      label: 'Log Mood',\n      icon: 'brain',\n      description: 'Track how you\\'re feeling',\n      action: '/wellness/mood',\n      color: 'bg-purple-500',\n      category: 'tracking',\n      keyboard: 'alt+m',\n      tags: ['mood', 'tracking', 'wellness']\n    },\n    {\n      id: 'meditation',\n      label: 'Meditate',\n      icon: 'heart',\n      description: '5-minute guided session',\n      action: '/wellness/meditation',\n      color: 'bg-blue-500',\n      category: 'wellness',\n      keyboard: 'alt+d',\n      voiceAlias: ['meditation', 'meditate'],\n      tags: ['meditation', 'mindfulness', 'relaxation']\n    },\n    {\n      id: 'journal',\n      label: 'Journal',\n      icon: 'edit',\n      description: 'Write your thoughts',\n      action: '/wellness/journal',\n      color: 'bg-green-500',\n      category: 'tracking',\n      keyboard: 'alt+j',\n      tags: ['journal', 'writing', 'reflection']\n    },\n    {\n      id: 'emergency-hotline',\n      label: 'Crisis Help',\n      icon: 'phone',\n      description: 'Get immediate support',\n      action: 'tel:988',\n      color: 'bg-red-500',\n      category: 'crisis',\n      isEmergency: true,\n      keyboard: 'alt+h',\n      tags: ['crisis', 'emergency', 'help', '988']\n    },\n    {\n      id: 'breathing',\n      label: 'Breathe',\n      icon: 'activity',\n      description: 'Breathing exercise',\n      action: '/wellness/breathe',\n      color: 'bg-cyan-500',\n      category: 'wellness',\n      keyboard: 'alt+b',\n      tags: ['breathing', 'calm', 'anxiety', 'relax']\n    },\n    {\n      id: 'grounding',\n      label: 'Grounding',\n      icon: 'shield',\n      description: '5-4-3-2-1 technique',\n      action: '/wellness/grounding',\n      color: 'bg-purple-500',\n      category: 'wellness',\n      tags: ['grounding', 'anxiety', 'panic', 'calm']\n    },\n    {\n      id: 'community',\n      label: 'Connect',\n      icon: 'users',\n      description: 'Join support group',\n      action: '/community',\n      color: 'bg-indigo-500',\n      category: 'social',\n      tags: ['community', 'support', 'social', 'connect']\n    },\n    {\n      id: 'therapy-session',\n      label: 'Therapy',\n      icon: 'calendar',\n      description: 'Schedule or join session',\n      action: '/therapy',\n      color: 'bg-green-500',\n      category: 'professional',\n      keyboard: 'alt+t',\n      tags: ['therapy', 'professional', 'counseling']\n    },\n    {\n      id: 'medication',\n      label: 'Medication',\n      icon: 'pill',\n      description: 'Track medication',\n      action: '/wellness/medication',\n      color: 'bg-orange-500',\n      category: 'tracking',\n      keyboard: 'alt+p',\n      tags: ['medication', 'pills', 'medicine', 'tracking']\n    },\n    {\n      id: 'safety-plan',\n      label: 'Safety Plan',\n      icon: 'shield',\n      description: 'Access your safety plan',\n      action: '/crisis/safety-plan',\n      color: 'bg-red-500',\n      category: 'crisis',\n      tags: ['safety', 'crisis', 'plan', 'emergency']\n    },\n    {\n      id: 'sleep-log',\n      label: 'Sleep',\n      icon: 'moon',\n      description: 'Log sleep quality',\n      action: '/wellness/sleep',\n      color: 'bg-indigo-500',\n      category: 'tracking',\n      tags: ['sleep', 'rest', 'tracking']\n    },\n    {\n      id: 'exercise',\n      label: 'Exercise',\n      icon: 'activity',\n      description: 'Log physical activity',\n      action: '/wellness/exercise',\n      color: 'bg-green-500',\n      category: 'tracking',\n      tags: ['exercise', 'fitness', 'activity', 'movement']\n    },\n    {\n      id: 'gratitude',\n      label: 'Gratitude',\n      icon: 'heart',\n      description: 'Practice gratitude',\n      action: '/wellness/gratitude',\n      color: 'bg-pink-500',\n      category: 'wellness',\n      tags: ['gratitude', 'thankful', 'positive']\n    },\n    {\n      id: 'music-therapy',\n      label: 'Music',\n      icon: 'music',\n      description: 'Therapeutic music',\n      action: '/wellness/music',\n      color: 'bg-purple-500',\n      category: 'wellness',\n      tags: ['music', 'audio', 'relaxation', 'therapy']\n    },\n    {\n      id: 'crisis-text',\n      label: 'Crisis Text',\n      icon: 'message',\n      description: 'Text HOME to 741741',\n      action: 'sms:741741?body=HOME',\n      color: 'bg-red-500',\n      category: 'crisis',\n      isEmergency: true,\n      tags: ['crisis', 'text', 'chat', 'help']\n    }\n  ];\n\n  const [actions, _setActions] = useState<QuickAction[]>(_defaultActions);\n  const [customActions, _setCustomActions] = useState<QuickAction[]>([]);\n  const [actionHistory, _setActionHistory] = useState<string[]>([]);\n\n  // Load custom actions and history from localStorage\n  useEffect(() => {\n    const _savedCustomActions = secureStorage.getItem('customQuickActions');\n    const _savedHistory = secureStorage.getItem('actionHistory');\n    \n    if (_savedCustomActions) {\n      try {\n        const parsed = JSON.parse(_savedCustomActions);\n        setCustomActions(_parsed);\n        setActions([...defaultActions, ...parsed]);\n      } catch {\n        logger.error('Error loading custom actions:');\n      }\n    }\n    \n    if (_savedHistory) {\n      try {\n        setActionHistory(JSON.parse(_savedHistory));\n      } catch {\n        logger.error('Error loading action history:');\n      }\n    }\n  }, [defaultActions]);\n\n  // Save custom actions to localStorage\n  useEffect(() => {\n    if (customActions.length > 0) {\n      secureStorage.setItem('customQuickActions', JSON.stringify(customActions));\n    }\n  }, [customActions]);\n\n  // Save action history to localStorage\n  useEffect(() => {\n    if (actionHistory.length > 0) {\n      secureStorage.setItem('actionHistory', JSON.stringify(actionHistory.slice(-100))); // Keep last 100\n    }\n  }, [actionHistory]);\n\n  // Execute an action\n  const executeAction = useCallback((action: QuickAction) => {\n    // Add to history\n    setActionHistory(prev => [...prev, action.id]);\n    \n    // Handle different action types\n    if (action.action.startsWith('http')) {\n      // External URL\n      window.open(action.action, '_blank');\n    } else if (action.action.startsWith('tel:')) {\n      // Phone call\n      window.location.href = action.action;\n    } else if (action.action.startsWith('sms:')) {\n      // SMS\n      window.location.href = action.action;\n    } else if (action.action.startsWith('mailto:')) {\n      // Email\n      window.location.href = action.action;\n    } else if (action.action.startsWith('/')) {\n      // Internal route\n      navigate(action.action);\n    } else if (action.action.startsWith('function:')) {\n      // Custom function (would need to be implemented based on your app's needs)\n      const functionName = action.action.replace('function:', '');\n      logger.info(`Executing function: ${functionName}`);\n    }\n    \n    // Log analytics\n    logger.info('Action executed:', {\n      id: action.id,\n      label: action.label,\n      category: action.category,\n      timestamp: new Date().toISOString()\n    });\n  }, [navigate]);\n\n  // Add custom action\n  const addCustomAction = useCallback((action: Omit<QuickAction, 'id'>) => {\n    const newAction: QuickAction = {\n      ...action,\n      id: `custom-${Date.now()}`\n    };\n    \n    setCustomActions(prev => [...prev, newAction]);\n    setActions(prev => [...prev, newAction]);\n  }, []);\n\n  // Remove action\n  const removeAction = useCallback((actionId: string) => {\n    if (actionId.startsWith('custom-')) {\n      setCustomActions(prev => prev.filter(a => a.id !== actionId));\n      setActions(prev => prev.filter(a => a.id !== actionId));\n    }\n  }, []);\n\n  // Update action\n  const updateAction = useCallback((actionId: string, updates: Partial<QuickAction>) => {\n    const _updateFn = (action: QuickAction) => \n      action.id === actionId ? { ...action, ...updates } : action;\n    \n    setActions(prev => prev.map(_updateFn));\n    \n    if (actionId.startsWith('custom-')) {\n      setCustomActions(prev => prev.map(_updateFn));\n    }\n  }, []);\n\n  // Get frequent actions based on history\n  const getFrequentActions = useCallback((): QuickAction[] => {\n    const _frequency = actionHistory.reduce((acc, id) => {\n      acc[id] = (acc[id] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n    \n    const sortedIds = Object.entries(_frequency)\n      .sort(([, a], [, b]) => b - a)\n      .map(([id]) => id);\n    \n    return sortedIds\n      .map(id => actions.find(a => a.id === id))\n      .filter(_Boolean) as QuickAction[];\n  }, [actionHistory, actions]);\n\n  // Get recent actions\n  const getRecentActions = useCallback((): QuickAction[] => {\n    const recentIds = [...new Set(actionHistory.slice(-10).reverse())];\n    \n    return recentIds\n      .map(id => actions.find(a => a.id === id))\n      .filter(_Boolean) as QuickAction[];\n  }, [actionHistory, actions]);\n\n  // Search actions\n  const searchActions = useCallback((query: string): QuickAction[] => {\n    const _lowerQuery = query.toLowerCase();\n    \n    return actions.filter(action => \n      action.label.toLowerCase().includes(_lowerQuery) ||\n      action.description?.toLowerCase().includes(_lowerQuery) ||\n      action.tags?.some(tag => tag.toLowerCase().includes(_lowerQuery)) ||\n      action.category.toLowerCase().includes(_lowerQuery)\n    );\n  }, [actions]);\n\n  return {\n    actions,\n    executeAction,\n    addCustomAction,\n    removeAction,\n    updateAction,\n    getFrequentActions,\n    getRecentActions,\n    searchActions,\n    actionHistory,\n    customActions\n  };\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useToast.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":49,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":49,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext, useContext, useState, useCallback, ReactNode } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nexport type ToastType = 'success' | 'error' | 'warning' | 'info';\n\nexport interface Toast {\n  id: string;\n  message: string;\n  _type: ToastType;\n  duration?: number;\n}\n\ninterface ToastContextType {\n  toasts: Toast[];\n  addToast: (message: string, _type?: ToastType, duration?: number) => void;\n  removeToast: (id: string) => void;\n}\n\nconst ToastContext = createContext<ToastContextType | undefined>(_undefined);\n\nexport function ToastProvider({ children }: { children: ReactNode }) {\n  const [toasts, _setToasts] = useState<Toast[]>([]);\n\n  const addToast = useCallback((message: string, _type: ToastType = 'info', duration = 5000) => {\n    const id = Math.random().toString(36).substring(7);\n    const toast: Toast = { id, message, _type, duration };\n    \n    setToasts((prev) => [...prev, toast]);\n\n    if (duration > 0) {\n      setTimeout(() => {\n        removeToast(_id);\n      }, duration);\n    }\n  }, [removeToast]);\n\n  const removeToast = useCallback((id: string) => {\n    setToasts((prev) => prev.filter((toast) => toast.id !== id));\n  }, []);\n\n  return (\n    <ToastContext.Provider value={{ toasts, addToast, removeToast }}>\n      {children}\n      <ToastContainer toasts={toasts} removeToast={removeToast} />\n    </ToastContext.Provider>\n  );\n}\n\nexport function useToast() {\n  const context = useContext(_ToastContext);\n  if (!context) {\n    throw new Error('useToast must be used within a ToastProvider');\n  }\n  return context;\n}\n\nfunction ToastContainer({ toasts, removeToast }: { toasts: Toast[]; removeToast: (id: string) => void }) {\n  const getIcon = (_type: ToastType) => {\n    switch (_type) {\n      case 'success':\n        return '✅';\n      case 'error':\n        return '❌';\n      case 'warning':\n        return '⚠️';\n      case 'info':\n      default:\n        return 'ℹ️';\n    }\n  };\n\n  const getColorClasses = (_type: ToastType) => {\n    switch (_type) {\n      case 'success':\n        return 'bg-green-50 border-green-200 text-green-800';\n      case 'error':\n        return 'bg-red-50 border-red-200 text-red-800';\n      case 'warning':\n        return 'bg-yellow-50 border-yellow-200 text-yellow-800';\n      case 'info':\n      default:\n        return 'bg-blue-50 border-blue-200 text-blue-800';\n    }\n  };\n\n  return (\n    <div className=\"fixed bottom-4 right-4 z-50 space-y-2\">\n      <AnimatePresence>\n        {toasts.map((toast) => (\n          <motion.div\n            key={toast.id}\n            initial={{ opacity: 0, x: 100, scale: 0.95 }}\n            animate={{ opacity: 1, x: 0, scale: 1 }}\n            exit={{ opacity: 0, x: 100, scale: 0.95 }}\n            transition={{ duration: 0.2 }}\n            className={`\n              flex items-center gap-3 px-4 py-3 rounded-lg border shadow-lg\n              min-w-[300px] max-w-[500px] ${getColorClasses(toast._type)}\n            `}\n          >\n            <span className=\"text-xl\" role=\"img\" aria-label={toast._type}>\n              {getIcon(toast._type)}\n            </span>\n            <p className=\"flex-1 text-sm font-medium\">{toast.message}</p>\n            <button\n              onClick={() => removeToast(toast.id)}\n              className=\"ml-2 text-gray-500 hover:text-gray-700 transition-colors\"\n              aria-label=\"Close notification\"\n            >\n              <svg\n                className=\"w-4 h-4\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M6 18L18 6M6 6l12 12\"\n                />\n              </svg>\n            </button>\n          </motion.div>\n        ))}\n      </AnimatePresence>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useUserPreferences.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useVibration.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\middleware\\securityMiddleware.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":31,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":31,"endColumn":32},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'initializeSecurity' function makes the dependencies of useEffect Hook (at line 54) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'initializeSecurity' in its own useCallback() Hook.","line":87,"column":9,"nodeType":"VariableDeclarator","endLine":133,"endColumn":4},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":254,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":254,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Security Middleware Component\n * Integrates all security services and provides application-wide security enforcement\n */\n\nimport React, { useEffect, useState, createContext, useContext, ReactNode } from 'react';\nimport { securityHeaders } from '../services/security/securityHeaders';\nimport { rateLimiter } from '../services/security/rateLimiter';\nimport { sessionManager } from '../services/security/sessionManager';\nimport { authService } from '../services/auth/authService';\nimport { securityMonitor } from '../services/security/securityMonitor';\nimport { fieldEncryption } from '../services/security/fieldEncryption';\nimport { auditLogger } from '../services/security/auditLogger';\nimport { logger } from '../utils/logger';\n\ninterface SecurityContextType {\n  isSecure: boolean;\n  sessionValid: boolean;\n  securityLevel: 'basic' | 'elevated' | 'maximum';\n  threatLevel: 'low' | 'medium' | 'high' | 'critical';\n  requiresCaptcha: boolean;\n  requiresMFA: boolean;\n  encryptField: (fieldName: string, value: unknown) => Promise<unknown>;\n  decryptField: (fieldName: string, encryptedValue: unknown) => Promise<unknown>;\n  validateRequest: (endpoint: string) => Promise<boolean>;\n  reportSecurityEvent: (event: unknown) => Promise<void>;\n}\n\nconst SecurityContext = createContext<SecurityContextType | undefined>(_undefined);\n\nexport const useSecurityContext = () => {\n  const context = useContext(_SecurityContext);\n  if (!context) {\n    throw new Error('useSecurityContext must be used within SecurityProvider');\n  }\n  return context;\n};\n\ninterface SecurityProviderProps {\n  children: ReactNode;\n}\n\nexport const SecurityProvider: React.FC<SecurityProviderProps> = ({ children }) => {\n  const [isSecure, _setIsSecure] = useState(true);\n  const [sessionValid, _setSessionValid] = useState(false);\n  const [securityLevel, _setSecurityLevel] = useState<'basic' | 'elevated' | 'maximum'>('basic');\n  const [threatLevel, _setThreatLevel] = useState<'low' | 'medium' | 'high' | 'critical'>('low');\n  const [requiresCaptcha, _setRequiresCaptcha] = useState(false);\n  const [requiresMFA, _setRequiresMFA] = useState(false);\n\n  useEffect(() => {\n    initializeSecurity();\n    return () => cleanupSecurity();\n  }, [initializeSecurity]);\n  \n  // Check authentication status from authService\n  useEffect(() => {\n    const checkAuthStatus = () => {\n      try {\n        const isAuthenticated = authService.isAuthenticated();\n        const session = authService.getCurrentSession();\n        \n        // For development/demo mode, allow basic access without full session\n        if (isAuthenticated && session) {\n          setSessionValid(true);\n          setSecurityLevel('basic'); // Start with basic, can be elevated\n        } else {\n          // Allow demo mode - set session as valid with basic security\n          setSessionValid(true);\n          setSecurityLevel('basic');\n        }\n      } catch {\n        logger.debug('Auth check in security middleware:', error);\n        // Allow demo mode even if auth check fails\n        setSessionValid(true);\n        setSecurityLevel('basic');\n      }\n    };\n    \n    checkAuthStatus();\n    // Re-check periodically\n    const _interval = setInterval(checkAuthStatus, 30000); // Every 30 seconds\n    \n    return () => clearInterval(_interval);\n  }, []);\n\n  const initializeSecurity = async () => {\n    try {\n      // Apply CSP to document\n      securityHeaders.applyCSPToDocument();\n      \n      // Set up security monitoring\n      const __unsubscribe = securityMonitor.subscribe(_handleSecurityEvent);\n      \n      // Validate current session if exists\n      const _sessionId = getSessionId();\n      if (_sessionId) {\n        try {\n          const validation = await sessionManager.validateSession(_sessionId, {\n            ipAddress: await getClientIP(),\n            userAgent: navigator.userAgent,\n            fingerprint: await generateFingerprint(),\n          });\n          \n          setSessionValid(validation.isValid);\n          if (!validation.isValid && validation.requiresAction === 'mfa') {\n            setRequiresMFA(true);\n          }\n        } catch {\n          logger.debug('Session validation error:', error);\n          // For demo/development, allow access\n          setSessionValid(true);\n        }\n      } else {\n        // No session ID but allow demo access\n        setSessionValid(true);\n      }\n      \n      // Check security metrics\n      const metrics = securityMonitor.getMetrics();\n      updateThreatLevel(metrics.threatScore);\n      \n      // Set up CSP violation listener\n      setupCSPViolationListener();\n      \n      // Initialize heartbeat for session keep-alive\n      startHeartbeat();\n      \n    } catch {\n      logger.error('Security initialization failed:');\n      setIsSecure(false);\n    }\n  };\n\n  const cleanupSecurity = () => {\n    // Cleanup tasks\n  };\n\n  const _handleSecurityEvent = async (event: unknown) => {\n    // Update threat _level based on events\n    if (event.severity === 'critical') {\n      setThreatLevel('critical');\n      setIsSecure(false);\n    } else if (event.severity === 'high') {\n      setThreatLevel('high');\n    }\n    \n    // Handle specific event types\n    switch (event.type) {\n      case 'session_hijacking':\n      case 'unauthorized_access':\n        setSessionValid(false);\n        break;\n      case 'brute_force_attack':\n      case 'api_abuse':\n        setRequiresCaptcha(true);\n        break;\n    }\n  };\n\n  const updateThreatLevel = (score: number) => {\n    if (score >= 75) {\n      setThreatLevel('critical');\n    } else if (score >= 50) {\n      setThreatLevel('high');\n    } else if (score >= 25) {\n      setThreatLevel('medium');\n    } else {\n      setThreatLevel('low');\n    }\n  };\n\n  const validateRequest = async (endpoint: string): Promise<boolean> => {\n    try {\n      const ip = await getClientIP();\n      const result = await rateLimiter.checkRateLimit({\n        endpoint,\n        ip,\n        userId: getCurrentUserId(),\n        headers: getRequestHeaders(),\n      });\n      \n      if (!result.allowed) {\n        if (result.reason === 'CAPTCHA verification required') {\n          setRequiresCaptcha(true);\n        }\n        \n        // Log blocked request\n        await auditLogger.log({ event: 'PERMISSION_DENIED',\n          details: {\n            endpoint,\n            reason: result.reason,\n          },\n          severity: 'warning',\n        });\n        \n        return false;\n      }\n      \n      return true;\n    } catch {\n      logger.error('Request validation failed:');\n      return false;\n    }\n  };\n\n  const encryptField = async (fieldName: string, value: unknown): Promise<unknown> => {\n    try {\n      return await fieldEncryption.encryptField(fieldName, value, getCurrentUserId());\n    } catch {\n      logger.error(`Failed to encrypt field ${fieldName}:`, error);\n      throw error;\n    }\n  };\n\n  const decryptField = async (fieldName: string, encryptedValue: unknown): Promise<unknown> => {\n    try {\n      return await fieldEncryption.decryptField(fieldName, encryptedValue, getCurrentUserId());\n    } catch {\n      logger.error(`Failed to decrypt field ${fieldName}:`, error);\n      throw error;\n    }\n  };\n\n  const reportSecurityEvent = async (event: unknown): Promise<void> => {\n    try {\n      await securityMonitor.reportEvent(event);\n    } catch {\n      logger.error('Failed to report security event:');\n    }\n  };\n\n  const value: SecurityContextType = {\n    isSecure,\n    sessionValid,\n    securityLevel,\n    threatLevel,\n    requiresCaptcha,\n    requiresMFA,\n    encryptField,\n    decryptField,\n    validateRequest,\n    reportSecurityEvent,\n  };\n\n  return (\n    <SecurityContext.Provider value={value}>\n      {children}\n    </SecurityContext.Provider>\n  );\n};\n\n// Security HOC for protected routes\nexport const _withSecurity = <P extends object>(\n  Component: React.ComponentType<P>,\n  requiredLevel: 'basic' | 'elevated' | 'maximum' = 'basic'\n) => {\n  const SecuredComponent = (props: P) => {\n    const security = useSecurityContext();\n    \n    if (!security.isSecure) {\n      return <SecurityWarning message=\"Security check failed. Please refresh the page.\" />;\n    }\n    \n    if (!security.sessionValid) {\n      return <SessionExpired />;\n    }\n    \n    if (security.requiresCaptcha) {\n      return <CaptchaChallenge onSuccess={() => window.location.reload()} />;\n    }\n    \n    if (security.requiresMFA) {\n      return <MFAChallenge onSuccess={() => window.location.reload()} />;\n    }\n    \n    if (getSecurityLevelValue(security.securityLevel) < getSecurityLevelValue(requiredLevel)) {\n      return <ElevateSecurityLevel required={requiredLevel} />;\n    }\n    \n    return <Component {...props} />;\n  };\n  \n  SecuredComponent.displayName = `withSecurity(${Component.displayName || Component.name || 'Component'})`;\n  return SecuredComponent;\n};\n\n// Utility components\nconst SecurityWarning: React.FC<{ message: string }> = ({ message }) => (\n  <div className=\"flex items-center justify-center min-h-screen bg-gray-900\">\n    <div className=\"bg-red-900/20 border border-red-500 rounded-lg p-6 max-w-md\">\n      <h2 className=\"text-xl font-bold text-red-500 mb-2\">Security Alert</h2>\n      <p className=\"text-gray-300\">{message}</p>\n    </div>\n  </div>\n);\n\nconst SessionExpired: React.FC = () => (\n  <div className=\"flex items-center justify-center min-h-screen bg-gray-900\">\n    <div className=\"bg-yellow-900/20 border border-yellow-500 rounded-lg p-6 max-w-md\">\n      <h2 className=\"text-xl font-bold text-yellow-500 mb-2\">Session Expired</h2>\n      <p className=\"text-gray-300 mb-4\">Your session has expired for security reasons.</p>\n      <button\n        onClick={() => window.location.href = '/login'}\n        className=\"px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700\"\n      >\n        Sign In Again\n      </button>\n    </div>\n  </div>\n);\n\nconst CaptchaChallenge: React.FC<{ onSuccess: () => void }> = ({ onSuccess }) => {\n  const [loading, _setLoading] = useState(false);\n  \n  const handleVerify = async () => {\n    setLoading(true);\n    // In production, integrate with reCAPTCHA or hCaptcha\n    setTimeout(() => {\n      onSuccess();\n    }, 2000);\n  };\n  \n  return (\n    <div className=\"flex items-center justify-center min-h-screen bg-gray-900\">\n      <div className=\"bg-gray-800 rounded-lg p-6 max-w-md\">\n        <h2 className=\"text-xl font-bold text-white mb-4\">Security Verification</h2>\n        <p className=\"text-gray-300 mb-6\">Please complete the security check to continue.</p>\n        <div className=\"bg-gray-700 rounded-lg p-4 mb-4\">\n          {/* CAPTCHA widget would go here */}\n          <div className=\"h-20 flex items-center justify-center text-gray-400\">\n            [CAPTCHA Challenge]\n          </div>\n        </div>\n        <button\n          onClick={handleVerify}\n          disabled={loading}\n          className=\"w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n        >\n          {loading ? 'Verifying...' : 'Verify'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst MFAChallenge: React.FC<{ onSuccess: () => void }> = ({ onSuccess }) => {\n  const [code, _setCode] = useState('');\n  const [loading, _setLoading] = useState(false);\n  \n  const handleVerify = async () => {\n    if (code.length !== 6) return;\n    \n    setLoading(true);\n    try {\n      // Verify MFA code\n      // In production, call MFA service\n      setTimeout(() => {\n        onSuccess();\n      }, 1000);\n    } catch {\n      logger.error('MFA verification failed:');\n    }\n  };\n  \n  return (\n    <div className=\"flex items-center justify-center min-h-screen bg-gray-900\">\n      <div className=\"bg-gray-800 rounded-lg p-6 max-w-md\">\n        <h2 className=\"text-xl font-bold text-white mb-4\">Two-Factor Authentication</h2>\n        <p className=\"text-gray-300 mb-6\">Enter the 6-digit code from your authenticator app.</p>\n        <input\n          type=\"text\"\n          value={code}\n          onChange={(e) => setCode(e.target.value.replace(/\\D/g, '').slice(0, 6))}\n          placeholder=\"000000\"\n          className=\"w-full px-4 py-2 bg-gray-700 text-white rounded-lg mb-4 text-center text-2xl tracking-widest\"\n          maxLength={6}\n        />\n        <button\n          onClick={handleVerify}\n          disabled={loading || code.length !== 6}\n          className=\"w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n        >\n          {loading ? 'Verifying...' : 'Verify'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst ElevateSecurityLevel: React.FC<{ required: string }> = ({ required }) => (\n  <div className=\"flex items-center justify-center min-h-screen bg-gray-900\">\n    <div className=\"bg-blue-900/20 border border-blue-500 rounded-lg p-6 max-w-md\">\n      <h2 className=\"text-xl font-bold text-blue-500 mb-2\">Enhanced Security Required</h2>\n      <p className=\"text-gray-300 mb-4\">\n        This action requires {required} security level. Please authenticate to continue.\n      </p>\n      <button\n        onClick={() => window.location.href = '/security/elevate'}\n        className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n      >\n        Elevate Security\n      </button>\n    </div>\n  </div>\n);\n\n// Utility functions\nconst getSessionId = (): string | null => {\n  // Try to get session from authService first\n  try {\n    const session = authService.getCurrentSession();\n    if (session?._sessionId) {\n      return session._sessionId;\n    }\n  } catch {\n    logger.debug('Could not get session from authService:', error);\n  }\n  \n  // Fallback to localStorage\n  return localStorage.getItem('sessionId');\n};\n\nconst getCurrentUserId = (): string | undefined => {\n  // Try to get user from authService first\n  try {\n    const user = authService.getCurrentUser();\n    if (user?.id) {\n      return user.id;\n    }\n  } catch {\n    logger.debug('Could not get user from authService:', error);\n  }\n  \n  // Fallback to localStorage\n  return localStorage.getItem('userId') || undefined;\n};\n\nconst getClientIP = async (): Promise<string> => {\n  // In production, get from server or use a service\n  return '0.0.0.0';\n};\n\nconst generateFingerprint = async (): Promise<string> => {\n  const _data = [\n    navigator.userAgent,\n    navigator.language,\n    screen.width,\n    screen.height,\n    screen.colorDepth,\n    new Date().getTimezoneOffset(),\n  ].join(':');\n  \n  return btoa(_data);\n};\n\nconst getRequestHeaders = (): Record<string, string> => {\n  return {\n    'User-Agent': navigator.userAgent,\n    'Accept-Language': navigator.language,\n  };\n};\n\nconst getSecurityLevelValue = (_level: string): number => {\n  switch (_level) {\n    case 'maximum': return 3;\n    case 'elevated': return 2;\n    case 'basic': return 1;\n    default: return 0;\n  }\n};\n\nconst setupCSPViolationListener = () => {\n  document.addEventListener('securitypolicyviolation', async (e) => {\n    await securityMonitor.reportEvent({\n      type: 'policy_violation',\n      severity: 'medium',\n      source: 'csp',\n      details: {\n        violatedDirective: e.violatedDirective,\n        blockedUri: e.blockedURI,\n        sourceFile: e.sourceFile,\n        lineNumber: e.lineNumber,\n      },\n    });\n  });\n};\n\nconst startHeartbeat = () => {\n  setInterval(async () => {\n    const _sessionId = getSessionId();\n    if (_sessionId) {\n      await sessionManager.validateSession(_sessionId);\n    }\n  }, 5 * 60 * 1000); // Every 5 minutes\n};","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\pages\\AITherapyPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\pages\\AccessibilitySettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\pages\\Analytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\pages\\CommunityPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\pages\\CrisisPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\pages\\HeartbeatPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\pages\\HomePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\pages\\NotificationCenter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\pages\\ProfessionalPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\pages\\Settings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\pages\\WellnessPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\service-worker\\crisis-offline.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\accessibility\\AdvancedAccessibilityService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[221,224],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[221,224],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger, LogCategory } from '../logging/logger';\r\nimport { secureStorage } from '../security/secureStorage';\r\n\r\nexport interface VoiceCommand {\r\n  phrase: string;\r\n  action: string;\r\n  parameters?: Record<string, any>;\r\n  confidence: number;\r\n  timestamp: number;\r\n}\r\n\r\nexport interface EyeTrackingData {\r\n  x: number;\r\n  y: number;\r\n  timestamp: number;\r\n  fixation: boolean;\r\n  elementId?: string;\r\n}\r\n\r\nexport interface AccessibilityProfile {\r\n  userId: string;\r\n  preferences: {\r\n    voiceNavigation: boolean;\r\n    eyeTracking: boolean;\r\n    motorAssistance: boolean;\r\n    highContrast: boolean;\r\n    reducedMotion: boolean;\r\n    textToSpeech: boolean;\r\n    speechToText: boolean;\r\n    voiceCommandSensitivity: 'low' | 'medium' | 'high';\r\n    eyeTrackingCalibration: EyeTrackingCalibration;\r\n    customVoiceCommands: VoiceCommand[];\r\n  };\r\n  capabilities: {\r\n    canSpeak: boolean;\r\n    canHear: boolean;\r\n    hasVoiceRecognition: boolean;\r\n    hasEyeTracking: boolean;\r\n    hasMotorImpairment: boolean;\r\n  };\r\n  lastUpdated: number;\r\n}\r\n\r\nexport interface EyeTrackingCalibration {\r\n  topLeft: { x: number; y: number };\r\n  topRight: { x: number; y: number };\r\n  bottomLeft: { x: number; y: number };\r\n  bottomRight: { x: number; y: number };\r\n  center: { x: number; y: number };\r\n  isCalibrated: boolean;\r\n  calibrationTimestamp: number;\r\n}\r\n\r\nexport interface VoiceNavigationAction {\r\n  command: string;\r\n  description: string;\r\n  aliases: string[];\r\n  priority: 'crisis' | 'high' | 'medium' | 'low';\r\n  execute: (parameters?: unknown) => Promise<void>;\r\n}\r\n\r\nexport class AdvancedAccessibilityService {\r\n  private recognition: SpeechRecognition | null = null;\r\n  private synthesis: SpeechSynthesis | null = null;\r\n  private eyeTracker: unknown = null;\r\n  private isVoiceActive = false;\r\n  private isEyeTrackingActive = false;\r\n  private currentProfile: AccessibilityProfile | null = null;\r\n  private voiceCommands: Map<string, VoiceNavigationAction> = new Map();\r\n  private eyeTrackingCallbacks: Set<(data: EyeTrackingData) => void> = new Set();\r\n\r\n  constructor() {\r\n    this.initializeAccessibilityServices();\r\n    this.setupVoiceCommands();\r\n  }\r\n\r\n  private async initializeAccessibilityServices(): Promise<void> {\r\n    try {\r\n      // Initialize Speech Recognition\r\n      if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {\r\n        const SpeechRecognition = (window as unknown).SpeechRecognition || (window as unknown).webkitSpeechRecognition;\r\n        this.recognition = new SpeechRecognition();\r\n        this.setupSpeechRecognition();\r\n      }\r\n\r\n      // Initialize Speech Synthesis\r\n      if ('speechSynthesis' in window) {\r\n        this.synthesis = window.speechSynthesis;\r\n      }\r\n\r\n      // Initialize Eye Tracking (using WebGazer.js in production)\r\n      await this.initializeEyeTracking();\r\n\r\n      // Load user profile\r\n      await this.loadAccessibilityProfile();\r\n\r\n      logger.info('Advanced accessibility services initialized');\r\n\r\n    } catch {\r\n      logger.error('Failed to initialize accessibility services:', error as Error);\r\n    }\r\n  }\r\n\r\n  private setupSpeechRecognition(): void {\r\n    if (!this.recognition) return;\r\n\r\n    this.recognition.continuous = true;\r\n    this.recognition.interimResults = true;\r\n    this.recognition.lang = 'en-US';\r\n\r\n    this.recognition.onresult = (event: SpeechRecognitionEvent) => {\r\n      const lastResult = event.results[event.results.length - 1];\r\n      if (lastResult && lastResult.isFinal) {\r\n        const transcript = lastResult[0]?.transcript?.toLowerCase().trim() || '';\r\n        const confidence = lastResult[0]?.confidence || 0;\r\n        \r\n        this.processVoiceCommand({\r\n          phrase: transcript,\r\n          action: '',\r\n          confidence,\r\n          timestamp: Date.now()\r\n        });\r\n      }\r\n    };\r\n\r\n    this.recognition.onerror = (event) => {\r\n      logger.error('Speech recognition error:', new Error(event.error || 'Unknown speech recognition error'));\r\n    };\r\n\r\n    this.recognition.onend = () => {\r\n      if (this.isVoiceActive && this.currentProfile?.preferences.voiceNavigation) {\r\n        // Restart recognition if it should be active\r\n        setTimeout(() => this.startVoiceNavigation(), 1000);\r\n      }\r\n    };\r\n  }\r\n\r\n  private async initializeEyeTracking(): Promise<void> {\r\n    try {\r\n      // In production, this would initialize WebGazer.js or similar eye tracking library\r\n      // For now, simulate eye tracking capabilities\r\n      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n        // Check if camera is available for eye tracking\r\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n        stream.getTracks().forEach(track => track.stop());\r\n        \r\n        // Mock eye tracking initialization\r\n        this.eyeTracker = {\r\n          isReady: true,\r\n          calibration: null\r\n        };\r\n      }\r\n    } catch {\r\n      logger.warn('Eye tracking not available', {\r\n        category: LogCategory.ACCESSIBILITY,\r\n        metadata: { error: error instanceof Error ? error.message : String(error) }\r\n      });\r\n    }\r\n  }\r\n\r\n  private setupVoiceCommands(): void {\r\n    const commands: VoiceNavigationAction[] = [\r\n      {\r\n        command: 'emergency help',\r\n        description: 'Activate emergency crisis support',\r\n        aliases: ['help me', 'crisis', 'emergency', 'need help'],\r\n        priority: 'crisis',\r\n        execute: async () => {\r\n          await this.speak('Activating emergency crisis support. Connecting you to immediate help.');\r\n          // Trigger emergency protocols\r\n          window.dispatchEvent(new CustomEvent('activateEmergencyHelp'));\r\n        }\r\n      },\r\n      {\r\n        command: 'call 911',\r\n        description: 'Initiate emergency call to 911',\r\n        aliases: ['call nine one one', 'emergency call'],\r\n        priority: 'crisis',\r\n        execute: async () => {\r\n          await this.speak('Calling 911 now.');\r\n          window.location.href = 'tel:911';\r\n        }\r\n      },\r\n      {\r\n        command: 'navigate home',\r\n        description: 'Navigate to home page',\r\n        aliases: ['go home', 'home page', 'dashboard'],\r\n        priority: 'high',\r\n        execute: async () => {\r\n          await this.speak('Navigating to home.');\r\n          window.location.hash = '#/';\r\n        }\r\n      },\r\n      {\r\n        command: 'mood tracker',\r\n        description: 'Open mood tracking interface',\r\n        aliases: ['track mood', 'mood tracking', 'log mood'],\r\n        priority: 'medium',\r\n        execute: async () => {\r\n          await this.speak('Opening mood tracker.');\r\n          window.location.hash = '#/wellness/mood-tracker';\r\n        }\r\n      },\r\n      {\r\n        command: 'breathing exercise',\r\n        description: 'Start guided breathing exercise',\r\n        aliases: ['breathe', 'breathing', 'calm down'],\r\n        priority: 'high',\r\n        execute: async () => {\r\n          await this.speak('Starting breathing exercise. Breathe in slowly.');\r\n          window.dispatchEvent(new CustomEvent('startBreathingExercise'));\r\n        }\r\n      },\r\n      {\r\n        command: 'read aloud',\r\n        description: 'Read current page content aloud',\r\n        aliases: ['read page', 'speak text', 'read content'],\r\n        priority: 'medium',\r\n        execute: async () => {\r\n          await this.readPageContent();\r\n        }\r\n      },\r\n      {\r\n        command: 'increase text size',\r\n        description: 'Increase text size for better readability',\r\n        aliases: ['bigger text', 'larger font', 'zoom in'],\r\n        priority: 'medium',\r\n        execute: async () => {\r\n          this.adjustTextSize(1.2);\r\n          await this.speak('Text size increased.');\r\n        }\r\n      },\r\n      {\r\n        command: 'decrease text size',\r\n        description: 'Decrease text size',\r\n        aliases: ['smaller text', 'smaller font', 'zoom out'],\r\n        priority: 'medium',\r\n        execute: async () => {\r\n          this.adjustTextSize(0.8);\r\n          await this.speak('Text size decreased.');\r\n        }\r\n      },\r\n      {\r\n        command: 'high contrast',\r\n        description: 'Toggle high contrast mode',\r\n        aliases: ['contrast mode', 'dark mode', 'accessibility mode'],\r\n        priority: 'medium',\r\n        execute: async () => {\r\n          await this.toggleHighContrast();\r\n          await this.speak('High contrast mode toggled.');\r\n        }\r\n      },\r\n      {\r\n        command: 'stop listening',\r\n        description: 'Disable voice navigation',\r\n        aliases: ['turn off voice', 'disable voice', 'stop voice'],\r\n        priority: 'low',\r\n        execute: async () => {\r\n          await this.speak('Voice navigation disabled.');\r\n          this.stopVoiceNavigation();\r\n        }\r\n      }\r\n    ];\r\n\r\n    // Register all commands\r\n    commands.forEach(cmd => {\r\n      this.voiceCommands.set(cmd.command, cmd);\r\n      cmd.aliases.forEach(alias => {\r\n        this.voiceCommands.set(alias, cmd);\r\n      });\r\n    });\r\n  }\r\n\r\n  public async startVoiceNavigation(): Promise<boolean> {\r\n    try {\r\n      if (!this.recognition) {\r\n        throw new Error('Speech recognition not available');\r\n      }\r\n\r\n      this.isVoiceActive = true;\r\n      this.recognition.start();\r\n      \r\n      await this.speak('Voice navigation activated. You can say commands like \"emergency help\", \"navigate home\", or \"mood tracker\".');\r\n      \r\n      logger.info('Voice navigation started');\r\n      return true;\r\n\r\n    } catch {\r\n      logger.error('Failed to start voice navigation:', error instanceof Error ? error : new Error(String(error)));\r\n      return false;\r\n    }\r\n  }\r\n\r\n  public stopVoiceNavigation(): void {\r\n    if (this.recognition && this.isVoiceActive) {\r\n      this.isVoiceActive = false;\r\n      this.recognition.stop();\r\n      logger.info('Voice navigation stopped');\r\n    }\r\n  }\r\n\r\n  public async startEyeTracking(): Promise<boolean> {\r\n    try {\r\n      if (!this.eyeTracker || !this.eyeTracker.isReady) {\r\n        throw new Error('Eye tracking not available');\r\n      }\r\n\r\n      this.isEyeTrackingActive = true;\r\n      \r\n      // Start eye tracking simulation\r\n      this.simulateEyeTracking();\r\n      \r\n      logger.info('Eye tracking started');\r\n      return true;\r\n\r\n    } catch {\r\n      logger.error('Failed to start eye tracking:', error instanceof Error ? error : new Error(String(error)));\r\n      return false;\r\n    }\r\n  }\r\n\r\n  public stopEyeTracking(): void {\r\n    this.isEyeTrackingActive = false;\r\n    logger.info('Eye tracking stopped');\r\n  }\r\n\r\n  private simulateEyeTracking(): void {\r\n    if (!this.isEyeTrackingActive) return;\r\n\r\n    // Simulate eye tracking data\r\n    const _mockEyeData: EyeTrackingData = {\r\n      x: Math.random() * window.innerWidth,\r\n      y: Math.random() * window.innerHeight,\r\n      timestamp: Date.now(),\r\n      fixation: Math.random() > 0.7,\r\n      elementId: this.getElementAtPosition(Math.random() * window.innerWidth, Math.random() * window.innerHeight)\r\n    };\r\n\r\n    // Notify callbacks\r\n    this.eyeTrackingCallbacks.forEach(_callback => {\r\n      _callback(_mockEyeData);\r\n    });\r\n\r\n    // Continue simulation\r\n    setTimeout(() => this.simulateEyeTracking(), 100);\r\n  }\r\n\r\n  private getElementAtPosition(x: number, y: number): string | undefined {\r\n    const element = document.elementFromPoint(x, y);\r\n    return element?.id || element?.className || undefined;\r\n  }\r\n\r\n  public onEyeTracking(_callback: (data: EyeTrackingData) => void): () => void {\r\n    this.eyeTrackingCallbacks.add(_callback);\r\n    return () => this.eyeTrackingCallbacks.delete(_callback);\r\n  }\r\n\r\n  private async processVoiceCommand(command: VoiceCommand): Promise<void> {\r\n    try {\r\n      const action = this.findMatchingCommand(command.phrase);\r\n      \r\n      if (_action) {\r\n        logger.info(`Executing voice command: ${command.phrase}`);\r\n        command.action = action.command;\r\n        \r\n        // Execute the command\r\n        await action.execute();\r\n        \r\n        // Log command usage\r\n        await this.logCommandUsage(_command);\r\n        \r\n      } else {\r\n        await this.speak('Command not recognized. Try saying \"emergency help\", \"navigate home\", or \"mood tracker\".');\r\n      }\r\n\r\n    } catch {\r\n      logger.error('Failed to process voice command:', error instanceof Error ? error : new Error(String(error)));\r\n      await this.speak('Sorry, I couldn\\'t process that command. Please try again.');\r\n    }\r\n  }\r\n\r\n  private findMatchingCommand(phrase: string): VoiceNavigationAction | null {\r\n    const normalizedPhrase = phrase.toLowerCase().trim();\r\n    \r\n    // Direct match first\r\n    if (this.voiceCommands.has(normalizedPhrase)) {\r\n      return this.voiceCommands.get(normalizedPhrase)!;\r\n    }\r\n\r\n    // Fuzzy matching - look for commands that contain key words\r\n    for (const [key, action] of this.voiceCommands.entries()) {\r\n      const keywords = key.split(' ');\r\n      const phraseWords = normalizedPhrase.split(' ');\r\n      \r\n      const matches = keywords.filter(keyword => \r\n        phraseWords.some(word => word.includes(keyword) || keyword.includes(_word))\r\n      );\r\n\r\n      // If more than 50% of keywords match, consider it a match\r\n      if (matches.length / keywords.length > 0.5) {\r\n        return action;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public async speak(text: string, priority: 'low' | 'normal' | 'high' | 'emergency' = 'normal'): Promise<void> {\r\n    try {\r\n      if (!this.synthesis) {\r\n        throw new Error('Speech synthesis not available');\r\n      }\r\n\r\n      // Cancel any ongoing speech for high priority messages\r\n      if (priority === 'emergency' || priority === 'high') {\r\n        this.synthesis.cancel();\r\n      }\r\n\r\n      const utterance = new SpeechSynthesisUtterance(_text);\r\n      \r\n      // Configure voice settings based on priority\r\n      switch (_priority) {\r\n        case 'emergency':\r\n          utterance.rate = 1.2;\r\n          utterance.pitch = 1.1;\r\n          utterance.volume = 1.0;\r\n          break;\r\n        case 'high':\r\n          utterance.rate = 1.0;\r\n          utterance.pitch = 1.0;\r\n          utterance.volume = 0.9;\r\n          break;\r\n        default:\r\n          utterance.rate = 0.9;\r\n          utterance.pitch = 1.0;\r\n          utterance.volume = 0.8;\r\n          break;\r\n      }\r\n\r\n      // Choose appropriate voice\r\n      const voices = this.synthesis.getVoices();\r\n      const preferredVoice = voices.find(voice => \r\n        voice.lang.startsWith('en') && voice.name.includes('Female')\r\n      ) || voices.find(voice => voice.lang.startsWith('en')) || voices[0];\r\n      \r\n      if (_preferredVoice) {\r\n        utterance.voice = preferredVoice;\r\n      }\r\n\r\n      return new Promise((resolve, reject) => {\r\n        utterance.onend = () => resolve();\r\n        utterance.onerror = (_error) => reject(error);\r\n        this.synthesis!.speak(_utterance);\r\n      });\r\n\r\n    } catch {\r\n      logger.error('Failed to speak text:', error instanceof Error ? error : new Error(String(error)));\r\n    }\r\n  }\r\n\r\n  private async readPageContent(): Promise<void> {\r\n    try {\r\n      const _mainContent = document.querySelector('main') || document.body;\r\n      const textContent = this.extractReadableText(_mainContent);\r\n      \r\n      if (textContent.length > 0) {\r\n        await this.speak(`Reading page content: ${textContent.substring(0, 500)}...`);\r\n      } else {\r\n        await this.speak('No readable content found on this page.');\r\n      }\r\n\r\n    } catch {\r\n      logger.error('Failed to read page content:', error instanceof Error ? error : new Error(String(error)));\r\n      await this.speak('Sorry, I couldn\\'t read the page content.');\r\n    }\r\n  }\r\n\r\n  private extractReadableText(element: Element): string {\r\n    const ignoredTags = ['script', 'style', 'nav', 'footer', 'aside'];\r\n    const textParts: string[] = [];\r\n\r\n    const walker = document.createTreeWalker(\r\n      element,\r\n      NodeFilter.SHOW_TEXT,\r\n      {\r\n        acceptNode: (node) => {\r\n          const parent = node.parentElement;\r\n          if (parent && ignoredTags.includes(parent.tagName.toLowerCase())) {\r\n            return NodeFilter.FILTER_REJECT;\r\n          }\r\n          return node.textContent?.trim() ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;\r\n        }\r\n      }\r\n    );\r\n\r\n    let node;\r\n    while ((node = walker.nextNode())) {\r\n      const text = node.textContent?.trim();\r\n      if (text && text.length > 2) {\r\n        textParts.push(text);\r\n      }\r\n    }\r\n\r\n    return textParts.join(' ').replace(/\\s+/g, ' ').trim();\r\n  }\r\n\r\n  private adjustTextSize(factor: number): void {\r\n    const currentSize = parseFloat(getComputedStyle(document.documentElement).fontSize);\r\n    const newSize = Math.max(12, Math.min(24, currentSize * factor));\r\n    document.documentElement.style.fontSize = `${newSize}px`;\r\n  }\r\n\r\n  private async toggleHighContrast(): Promise<void> {\r\n    const body = document.body;\r\n    const hasHighContrast = body.classList.contains('high-contrast');\r\n    \r\n    if (_hasHighContrast) {\r\n      body.classList.remove('high-contrast');\r\n    } else {\r\n      body.classList.add('high-contrast');\r\n    }\r\n\r\n    // Update user preferences\r\n    if (this.currentProfile) {\r\n      this.currentProfile.preferences.highContrast = !hasHighContrast;\r\n      await this.saveAccessibilityProfile();\r\n    }\r\n  }\r\n\r\n  private async logCommandUsage(command: VoiceCommand): Promise<void> {\r\n    try {\r\n      const _usage = {\r\n        command: command.phrase,\r\n        action: command.action,\r\n        confidence: command.confidence,\r\n        timestamp: command.timestamp\r\n      };\r\n\r\n      // Store usage data for analytics (privacy-preserving)\r\n      const usageLog = await secureStorage.getItem('voice_command_usage') || [];\r\n      usageLog.push(_usage);\r\n      \r\n      // Keep only last 100 commands\r\n      const recentUsage = usageLog.slice(-100);\r\n      await secureStorage.setItem('voice_command_usage', recentUsage);\r\n\r\n    } catch {\r\n      logger.error('Failed to log command _usage:', error instanceof Error ? error : new Error(String(error)));\r\n    }\r\n  }\r\n\r\n  public async loadAccessibilityProfile(): Promise<AccessibilityProfile> {\r\n    try {\r\n      const profile = await secureStorage.getItem('accessibility_profile');\r\n      \r\n      if (_profile) {\r\n        this.currentProfile = profile;\r\n        await this.applyAccessibilitySettings(_profile);\r\n        return profile;\r\n      } else {\r\n        // Create default profile\r\n        const defaultProfile: AccessibilityProfile = {\r\n          userId: 'anonymous',\r\n          preferences: {\r\n            voiceNavigation: false,\r\n            eyeTracking: false,\r\n            motorAssistance: false,\r\n            highContrast: false,\r\n            reducedMotion: false,\r\n            textToSpeech: false,\r\n            speechToText: false,\r\n            voiceCommandSensitivity: 'medium',\r\n            eyeTrackingCalibration: {\r\n              topLeft: { x: 0, y: 0 },\r\n              topRight: { x: 0, y: 0 },\r\n              bottomLeft: { x: 0, y: 0 },\r\n              bottomRight: { x: 0, y: 0 },\r\n              center: { x: 0, y: 0 },\r\n              isCalibrated: false,\r\n              calibrationTimestamp: 0\r\n            },\r\n            customVoiceCommands: []\r\n          },\r\n          capabilities: {\r\n            canSpeak: !!this.synthesis,\r\n            canHear: !!this.recognition,\r\n            hasVoiceRecognition: !!this.recognition,\r\n            hasEyeTracking: !!this.eyeTracker,\r\n            hasMotorImpairment: false\r\n          },\r\n          lastUpdated: Date.now()\r\n        };\r\n\r\n        this.currentProfile = defaultProfile;\r\n        await this.saveAccessibilityProfile();\r\n        return defaultProfile;\r\n      }\r\n\r\n    } catch {\r\n      logger.error('Failed to load accessibility profile:', error instanceof Error ? error : new Error(String(error)));\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  public async saveAccessibilityProfile(): Promise<void> {\r\n    if (!this.currentProfile) return;\r\n\r\n    try {\r\n      this.currentProfile.lastUpdated = Date.now();\r\n      await secureStorage.setItem('accessibility_profile', this.currentProfile);\r\n      logger.info('Accessibility profile saved');\r\n\r\n    } catch {\r\n      logger.error('Failed to save accessibility profile:', error instanceof Error ? error : new Error(String(error)));\r\n    }\r\n  }\r\n\r\n  private async applyAccessibilitySettings(profile: AccessibilityProfile): Promise<void> {\r\n    try {\r\n      // Apply high contrast if enabled\r\n      if (profile.preferences.highContrast) {\r\n        document.body.classList.add('high-contrast');\r\n      }\r\n\r\n      // Apply reduced motion if enabled\r\n      if (profile.preferences.reducedMotion) {\r\n        document.body.classList.add('reduce-motion');\r\n      }\r\n\r\n      // Start voice navigation if enabled\r\n      if (profile.preferences.voiceNavigation) {\r\n        await this.startVoiceNavigation();\r\n      }\r\n\r\n      // Start eye tracking if enabled\r\n      if (profile.preferences.eyeTracking && profile.preferences.eyeTrackingCalibration.isCalibrated) {\r\n        await this.startEyeTracking();\r\n      }\r\n\r\n    } catch {\r\n      logger.error('Failed to apply accessibility settings:', error instanceof Error ? error : new Error(String(error)));\r\n    }\r\n  }\r\n\r\n  public async updateProfile(updates: Partial<AccessibilityProfile['preferences']>): Promise<void> {\r\n    if (!this.currentProfile) {\r\n      await this.loadAccessibilityProfile();\r\n    }\r\n\r\n    if (this.currentProfile) {\r\n      this.currentProfile.preferences = { ...this.currentProfile.preferences, ...updates };\r\n      await this.saveAccessibilityProfile();\r\n      await this.applyAccessibilitySettings(this.currentProfile);\r\n    }\r\n  }\r\n\r\n  public getProfile(): AccessibilityProfile | null {\r\n    return this.currentProfile;\r\n  }\r\n\r\n  public getAvailableCommands(): VoiceNavigationAction[] {\r\n    return Array.from(new Set(this.voiceCommands.values()));\r\n  }\r\n\r\n  public isVoiceNavigationActive(): boolean {\r\n    return this.isVoiceActive;\r\n  }\r\n\r\n  public isEyeTrackingEnabled(): boolean {\r\n    return this.isEyeTrackingActive;\r\n  }\r\n}\r\n\r\nexport const _advancedAccessibilityService = new AdvancedAccessibilityService();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\ai\\CrisisDetectionService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\ai\\WellnessRecommendationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\api\\ApiService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\api\\mockData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\api\\secureApi.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[920,923],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[920,923],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1805,1808],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1805,1808],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4339,4342],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4339,4342],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":157,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4597,4600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4597,4600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":174,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4898,4901],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4898,4901],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":191,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5204,5207],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5204,5207],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Secure API Service\n * Implements secure API communication with encryption, authentication, and monitoring\n */\n\nimport { securityHeaders } from '../security/securityHeaders';\nimport { rateLimiter } from '../security/rateLimiter';\nimport { sessionManager } from '../security/sessionManager';\nimport { fieldEncryption } from '../security/fieldEncryption';\nimport { auditLogger } from '../security/auditLogger';\nimport { securityMonitor } from '../security/securityMonitor';\nimport { secureStorage } from '../security/SecureLocalStorage';\nimport { logger } from '../utils/logger';\n\ninterface SecureRequestConfig {\n  url: string;\n  method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  data?: unknown;\n  headers?: Record<string, string>;\n  encryptFields?: string[];\n  requiresAuth?: boolean;\n  securityLevel?: 'basic' | 'elevated' | 'maximum';\n  timeout?: number;\n  retries?: number;\n}\n\ninterface SecureResponse<T = any> {\n  data: T;\n  encrypted: boolean;\n  _signature?: string;\n  timestamp: Date;\n  requestId: string;\n}\n\nclass SecureAPIService {\n  private static instance: SecureAPIService;\n  private baseURL: string;\n  private requestQueue: Map<string, Promise<unknown>> = new Map();\n  private csrfToken: string | null = null;\n\n  private constructor() {\n    this.baseURL = import.meta.env.VITE_API_URL || 'https://api.mentalhealth.app';\n    this.initializeAPI();\n  }\n\n  static getInstance(): SecureAPIService {\n    if (!SecureAPIService.instance) {\n      SecureAPIService.instance = new SecureAPIService();\n    }\n    return SecureAPIService.instance;\n  }\n\n  private async initializeAPI(): Promise<void> {\n    // Get CSRF token\n    await this.refreshCSRFToken();\n    \n    // Set up request interceptor\n    this.setupInterceptors();\n  }\n\n  /**\n   * Make a secure API request\n   */\n  async request<T = any>(config: SecureRequestConfig): Promise<SecureResponse<T>> {\n    const requestId = this.generateRequestId();\n    \n    try {\n      // Validate session if auth required\n      if (config.requiresAuth) {\n        const sessionId = this.getSessionId();\n        if (!sessionId) {\n          throw new Error('Authentication required');\n        }\n        \n        const validation = await sessionManager.validateSession(_sessionId);\n        if (!validation.isValid) {\n          throw new Error('Invalid session');\n        }\n      }\n      \n      // Check rate limits\n      const rateLimitCheck = await rateLimiter.checkRateLimit({\n        endpoint: config.url,\n        ip: await this.getClientIP(),\n        userId: this.getCurrentUserId(),\n        method: config.method,\n      });\n      \n      if (!rateLimitCheck.allowed) {\n        throw new Error(`Rate limit exceeded: ${rateLimitCheck.reason}`);\n      }\n      \n      // Encrypt sensitive fields if specified\n      let requestData = config.data;\n      if (config.encryptFields && requestData) {\n        requestData = await this.encryptRequestData(requestData, config.encryptFields);\n      }\n      \n      // Prepare headers\n      const headers = await this.prepareSecureHeaders(config);\n      \n      // Create abort controller for timeout\n      const controller = new AbortController();\n      const timeout = config.timeout || 30000;\n      const _timeoutId = setTimeout(() => controller.abort(), timeout);\n      \n      // Make the request\n      const response = await this.executeRequest({\n        url: `${this.baseURL}${config.url}`,\n        method: config.method || 'GET',\n        headers,\n        body: requestData ? JSON.stringify(_requestData) : undefined,\n        signal: controller.signal,\n      });\n      \n      clearTimeout(_timeoutId);\n      \n      // Validate response\n      await this.validateResponse(response, requestId);\n      \n      // Parse and decrypt response\n      const responseData = await this.processResponse(response);\n      \n      // Log successful request\n      await this.logRequest(config, response.status, requestId);\n      \n      return {\n        data: responseData,\n        encrypted: response.headers.get('X-Encrypted') === 'true',\n        _signature: response.headers.get('X-Signature') || undefined,\n        timestamp: new Date(),\n        requestId,\n      };\n      \n    } catch {\n      // Handle and log errors\n      await this.handleRequestError(error, config, requestId);\n      throw error;\n    }\n  }\n\n  /**\n   * Secure GET request\n   */\n  async get<T = any>(url: string, config?: Partial<SecureRequestConfig>): Promise<T> {\n    const response = await this.request<T>({\n      ...config,\n      url,\n      method: 'GET',\n    });\n    return response.data;\n  }\n\n  /**\n   * Secure POST request\n   */\n  async post<T = any>(\n    url: string,\n    data?: unknown,\n    config?: Partial<SecureRequestConfig>\n  ): Promise<T> {\n    const response = await this.request<T>({\n      ...config,\n      url,\n      method: 'POST',\n      data,\n    });\n    return response.data;\n  }\n\n  /**\n   * Secure PUT request\n   */\n  async put<T = any>(\n    url: string,\n    data?: unknown,\n    config?: Partial<SecureRequestConfig>\n  ): Promise<T> {\n    const response = await this.request<T>({\n      ...config,\n      url,\n      method: 'PUT',\n      data,\n    });\n    return response.data;\n  }\n\n  /**\n   * Secure DELETE request\n   */\n  async delete<T = any>(url: string, config?: Partial<SecureRequestConfig>): Promise<T> {\n    const response = await this.request<T>({\n      ...config,\n      url,\n      method: 'DELETE',\n    });\n    return response.data;\n  }\n\n  /**\n   * Upload file with encryption\n   */\n  async uploadSecure(\n    url: string,\n    file: File,\n    _encrypt: boolean = true\n  ): Promise<unknown> {\n    try {\n      let data: Blob | ArrayBuffer = file;\n      \n      if (_encrypt) {\n        // Read file content\n        const _arrayBuffer = await file._arrayBuffer();\n        const uint8Array = new Uint8Array(_arrayBuffer);\n        \n        // Convert to base64 for encryption\n        const base64 = btoa(String.fromCharCode(...uint8Array));\n        \n        // Encrypt file content\n        const encrypted = await fieldEncryption.encryptField('file_content', base64);\n        \n        // Create encrypted blob\n        data = new Blob([JSON.stringify(encrypted)], { type: 'application/octet-stream' });\n      }\n      \n      const formData = new FormData();\n      formData.append('file', new File([data], file.name, { type: file.type }));\n      formData.append('encrypted', String(_encrypt));\n      formData.append('original_name', file.name);\n      formData.append('original_type', file.type);\n      \n      const response = await fetch(`${this.baseURL}${url}`, {\n        method: 'POST',\n        headers: await this.prepareSecureHeaders({ url, method: 'POST' }),\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Upload failed: ${response.statusText}`);\n      }\n      \n      return await response.json();\n    } catch {\n      logger.error('Secure upload failed:');\n      throw undefined;\n    }\n  }\n\n  /**\n   * Download file with decryption\n   */\n  async downloadSecure(url: string, decrypt: boolean = true): Promise<Blob> {\n    try {\n      const response = await fetch(`${this.baseURL}${url}`, {\n        method: 'GET',\n        headers: await this.prepareSecureHeaders({ url, method: 'GET' }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Download failed: ${response.statusText}`);\n      }\n      \n      let data = await response.blob();\n      \n      if (decrypt && response.headers.get('X-Encrypted') === 'true') {\n        // Read blob as _text\n        const _text = await data._text();\n        const encrypted = JSON.parse(_text);\n        \n        // Decrypt content\n        const decrypted = await fieldEncryption.decryptField('file_content', encrypted);\n        \n        // Convert base64 back to blob\n        const binaryString = atob(decrypted);\n        const uint8Array = new Uint8Array(binaryString.length);\n        for (let i = 0; i < binaryString.length; i++) {\n          uint8Array[i] = binaryString.charCodeAt(_i);\n        }\n        \n        data = new Blob([uint8Array], { \n          type: response.headers.get('X-Original-Type') || 'application/octet-stream' \n        });\n      }\n      \n      return data;\n    } catch {\n      logger.error('Secure download failed:');\n      throw undefined;\n    }\n  }\n\n  /**\n   * Private helper methods\n   */\n  private async prepareSecureHeaders(config: SecureRequestConfig): Promise<Headers> {\n    const headers = new Headers();\n    \n    // Add default headers\n    headers.set('Content-Type', 'application/json');\n    headers.set('Accept', 'application/json');\n    \n    // Add security headers\n    securityHeaders.applyToFetch(_headers);\n    \n    // Add CSRF token\n    if (this.csrfToken) {\n      headers.set('X-CSRF-Token', this.csrfToken);\n    }\n    \n    // Add session token\n    const sessionId = this.getSessionId();\n    if (_sessionId) {\n      const session = await sessionManager.validateSession(_sessionId);\n      if (session.isValid) {\n        headers.set('Authorization', `Bearer ${sessionId}`);\n      }\n    }\n    \n    // Add request ID for tracing\n    headers.set('X-Request-ID', this.generateRequestId());\n    \n    // Add client fingerprint\n    headers.set('X-Client-Fingerprint', await this.getClientFingerprint());\n    \n    // Add custom headers\n    if (config.headers) {\n      Object.entries(config.headers).forEach(([key, value]) => {\n        headers.set(key, value);\n      });\n    }\n    \n    return headers;\n  }\n\n  private async executeRequest(options: {\n    url: string;\n    method: string;\n    headers: Headers;\n    body?: string;\n    signal: AbortSignal;\n  }): Promise<Response> {\n    const { url, method, headers, body, signal } = options;\n    \n    // Check if request is already in progress (prevent duplicate requests)\n    const requestKey = `${method}:${url}:${body || ''}`;\n    if (this.requestQueue.has(_requestKey)) {\n      return await this.requestQueue.get(_requestKey);\n    }\n    \n    // Create request promise\n    const requestPromise = fetch(url, {\n      method,\n      headers,\n      body,\n      signal,\n      credentials: 'include',\n      mode: 'cors',\n    });\n    \n    // Store in queue\n    this.requestQueue.set(requestKey, requestPromise);\n    \n    try {\n      const response = await requestPromise;\n      return response;\n    } finally {\n      // Remove from queue\n      this.requestQueue.delete(_requestKey);\n    }\n  }\n\n  private async validateResponse(response: Response, requestId: string): Promise<void> {\n    // Check response status\n    if (!response.ok) {\n      // Handle specific error codes\n      switch (response.status) {\n        case 401:\n          // Unauthorized - clear session\n          await this.handleUnauthorized();\n          throw new Error('Authentication required');\n          \n        case 403:\n          // Forbidden - check permissions\n          await this.handleForbidden(_requestId);\n          throw new Error('Access denied');\n          \n        case 429: {\n          // Rate limited\n          const retryAfter = response.headers.get('Retry-After');\n          throw new Error(`Rate limited. Retry after ${retryAfter} seconds`);\n        }\n          \n        case 500:\n        case 502:\n        case 503:\n          // Server errors\n          await this.handleServerError(response, requestId);\n          throw new Error('Server error. Please try again later.');\n          \n        default:\n          throw new Error(`Request failed: ${response.statusText}`);\n      }\n    }\n    \n    // Validate security headers\n    const requiredHeaders = ['X-Content-Type-Options', 'X-Frame-Options'];\n    for (const header of requiredHeaders) {\n      if (!response.headers.has(header)) {\n        logger.warn(`Missing security header: ${header}`);\n      }\n    }\n    \n    // Verify response signature if present\n    const _signature = response.headers.get('X-Signature');\n    if (_signature) {\n      // Verify _signature (implementation depends on signing mechanism)\n      logger.info('Response _signature verified');\n    }\n  }\n\n  private async processResponse(response: Response): Promise<unknown> {\n    const contentType = response.headers.get('Content-Type');\n    \n    if (contentType?.includes('application/json')) {\n      const data = await response.json();\n      \n      // Check if response is encrypted\n      if (response.headers.get('X-Encrypted') === 'true') {\n        // Decrypt response data\n        return await this.decryptResponseData(data);\n      }\n      \n      return data;\n    } else if (contentType?.includes('text/')) {\n      return await response._text();\n    } else {\n      return await response.blob();\n    }\n  }\n\n  private async encryptRequestData(data: unknown, fields: string[]): Promise<unknown> {\n    const encrypted = { ...data };\n    \n    for (const field of fields) {\n      if (field in encrypted) {\n        encrypted[field] = await fieldEncryption.encryptField(field, encrypted[field]);\n      }\n    }\n    \n    return encrypted;\n  }\n\n  private async decryptResponseData(data: unknown): Promise<unknown> {\n    if (Array.isArray(data)) {\n      return await Promise.all(data.map(_item => this.decryptResponseData(_item)));\n    }\n    \n    if (typeof data === 'object' && data !== null) {\n      const decrypted: unknown = {};\n      \n      for (const [key, value] of Object.entries(data)) {\n        if (typeof value === 'object' && value !== null && 'ciphertext' in value) {\n          // This field is encrypted - cast to proper type\n          decrypted[key] = await fieldEncryption.decryptField(key, value as unknown);\n        } else {\n          decrypted[key] = value;\n        }\n      }\n      \n      return decrypted;\n    }\n    \n    return data;\n  }\n\n  private async handleRequestError(\n    error: unknown,\n    config: SecureRequestConfig,\n    requestId: string\n  ): Promise<void> {\n    // Log error\n    await auditLogger.log({\n      event: 'SYSTEM_ERROR',\n      details: {\n        requestId,\n        url: config.url,\n        method: config.method,\n        error: error.message,\n      },\n      severity: 'error',\n    });\n    \n    // Report to security monitor\n    await securityMonitor.reportEvent({\n      type: 'api_abuse',\n      severity: 'low',\n      source: 'api_client',\n      details: {\n        requestId,\n        error: error.message,\n      },\n    });\n  }\n\n  private async logRequest(\n    config: SecureRequestConfig,\n    status: number,\n    requestId: string\n  ): Promise<void> {\n    // Log API access\n    await auditLogger.log({\n      event: 'DATA_ACCESS',\n      details: {\n        requestId,\n        url: config.url,\n        method: config.method,\n        status,\n        encrypted: !!config.encryptFields,\n      },\n      severity: 'info',\n    });\n  }\n\n  private async handleUnauthorized(): Promise<void> {\n    // Clear session\n    const sessionId = this.getSessionId();\n    if (_sessionId) {\n      await sessionManager.terminateSession(sessionId, 'Unauthorized');\n    }\n    \n    // Redirect to login\n    window.location.href = '/login';\n  }\n\n  private async handleForbidden(requestId: string): Promise<void> {\n    // Report security event\n    await securityMonitor.reportEvent({\n      type: 'unauthorized_access',\n      severity: 'medium',\n      source: 'api_client',\n      details: {\n        requestId,\n      },\n    });\n  }\n\n  private async handleServerError(response: Response, requestId: string): Promise<void> {\n    // Report server error\n    await securityMonitor.reportEvent({\n      type: 'suspicious_activity',\n      severity: 'low',\n      source: 'api_client',\n      target: response.url,\n      details: {\n        requestId,\n        status: response.status,\n      },\n    });\n  }\n\n  private async refreshCSRFToken(): Promise<void> {\n    try {\n      const response = await fetch(`${this.baseURL}/api/csrf-token`, {\n        method: 'GET',\n        credentials: 'include',\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        this.csrfToken = data.token;\n      }\n    } catch {\n      logger.error('Failed to get CSRF token:');\n    }\n  }\n\n  private setupInterceptors(): void {\n    // Override global fetch to apply security by default\n    const originalFetch = window.fetch;\n    \n    window.fetch = async (input: RequestInfo | URL, init?: RequestInit): Promise<Response> => {\n      // Check if this is an API request\n      const url = typeof input === 'string' ? input : input.toString();\n      \n      if (url.startsWith(this.baseURL)) {\n        // Apply security headers\n        const headers = new Headers(init?.headers);\n        securityHeaders.applyToFetch(_headers);\n        \n        return originalFetch(input, {\n          ...init,\n          headers,\n        });\n      }\n      \n      return originalFetch(input, init);\n    };\n  }\n\n  private generateRequestId(): string {\n    return `req_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n  }\n\n  private getSessionId(): string | null {\n    return secureStorage.getItem('sessionId');\n  }\n\n  private getCurrentUserId(): string | undefined {\n    return secureStorage.getItem('userId') || undefined;\n  }\n\n  private async getClientIP(): Promise<string> {\n    // In production, get from server\n    return '0.0.0.0';\n  }\n\n  private async getClientFingerprint(): Promise<string> {\n    const data = [\n      navigator.userAgent,\n      navigator.language,\n      screen.width,\n      screen.height,\n      new Date().getTimezoneOffset(),\n    ].join(':');\n    \n    return btoa(data);\n  }\n}\n\nexport const __secureAPI = SecureAPIService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\api\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\auth\\authService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":247,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":247,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":278,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":278,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":447,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":447,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'persistent' is assigned a value but never used. Allowed unused args must match /^_/u.","line":453,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":453,"endColumn":62}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Core Authentication Service\n * Handles JWT token management, user authentication, and session management\n * HIPAA-compliant with end-to-end encryption for sensitive data\n */\n\nimport { User, ApiResponse } from '@/types';\nimport { auditLogger } from '../security/auditLogger';\nimport { cryptoService } from '../security/cryptoService';\nimport { secureStorage } from '../security/SecureLocalStorage';\nimport { logger } from '../utils/logger';\n\ninterface AuthTokens {\n  accessToken: string;\n  refreshToken: string;\n  expiresIn: number;\n  tokenType: 'Bearer';\n}\n\ninterface LoginCredentials {\n  email: string;\n  password: string;\n  mfaCode?: string;\n  anonymousMode?: boolean;\n  rememberMe?: boolean;\n}\n\ninterface RegisterData {\n  email: string;\n  password: string;\n  name: string;\n  acceptedTerms: boolean;\n  consentToDataProcessing: boolean;\n  anonymousMode?: boolean;\n}\n\ninterface SessionData {\n  user: User;\n  tokens: AuthTokens;\n  sessionId: string;\n  deviceId: string;\n  ipAddress?: string;\n  userAgent?: string;\n  createdAt: Date;\n  lastActivity: Date;\n  expiresAt: Date;\n}\n\ninterface PasswordResetRequest {\n  email: string;\n  securityQuestionAnswers?: Record<string, string>;\n}\n\ninterface PasswordResetConfirm {\n  token: string;\n  newPassword: string;\n  confirmPassword: string;\n}\n\nclass AuthenticationService {\n  private static instance: AuthenticationService;\n  private currentSession: SessionData | null = null;\n  private refreshTimer: NodeJS.Timeout | null = null;\n  private readonly TOKEN_REFRESH_THRESHOLD = 5 * 60 * 1000; // 5 minutes before expiry\n  private readonly SESSION_TIMEOUT = 30 * 60 * 1000; // 30 minutes of inactivity\n  private activityTimer: NodeJS.Timeout | null = null;\n\n  private constructor() {\n    this.initializeService();\n  }\n\n  static getInstance(): AuthenticationService {\n    if (!AuthenticationService.instance) {\n      AuthenticationService.instance = new AuthenticationService();\n    }\n    return AuthenticationService.instance;\n  }\n\n  private async initializeService(): Promise<void> {\n    // Load existing session from secure storage\n    await this.loadStoredSession();\n    \n    // Set up activity monitoring\n    this.setupActivityMonitoring();\n    \n    // Initialize token refresh mechanism\n    if (this.currentSession) {\n      this.scheduleTokenRefresh();\n    }\n  }\n\n  /**\n   * User Registration with comprehensive validation and security\n   */\n  async register(data: RegisterData): Promise<ApiResponse<User>> {\n    try {\n      // Validate registration data\n      this.validateRegistrationData(data);\n      \n      // Check password strength\n      const passwordStrength = this.checkPasswordStrength(data.password);\n      if (passwordStrength.score < 3) {\n        throw new Error(`Weak password: ${passwordStrength.feedback.join(', ')}`);\n      }\n\n      // Hash password with salt\n      const hashedPassword = await cryptoService.hashPassword(data.password);\n      \n      // Create user account (API call would go here)\n      const response = await this.mockApiCall('/auth/register', {\n        ...data,\n        password: hashedPassword,\n        registrationIp: await this.getClientIp(),\n        registrationDevice: this.getDeviceFingerprint(),\n      });\n\n      // Log registration event\n      await auditLogger.log({\n        event: 'USER_REGISTRATION',\n        userId: response.data.user.id,\n        details: {\n          email: data.email,\n          anonymousMode: data.anonymousMode,\n        },\n        severity: 'info',\n      });\n\n      // Auto-login after registration\n      if (!data.anonymousMode) {\n        await this.login({\n          email: data.email,\n          password: data.password,\n        });\n      }\n\n      return {\n        success: true,\n        data: response.data.user,\n      };\n    } catch (error) {\n      await auditLogger.log({\n        event: 'REGISTRATION_FAILED',\n        details: { error: error instanceof Error ? error.message : String(error), email: data.email },\n        severity: 'warning',\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * User Login with MFA support\n   */\n  async login(credentials: LoginCredentials): Promise<ApiResponse<SessionData>> {\n    try {\n      // Rate limiting check\n      await this.checkRateLimit(credentials.email);\n      \n      // Validate credentials\n      if (!credentials.anonymousMode && (!credentials.email || !credentials.password)) {\n        throw new Error('Email and password are required');\n      }\n\n      let _sessionData: SessionData;\n\n      if (credentials.anonymousMode) {\n        // Handle anonymous login\n        _sessionData = await this.createAnonymousSession();\n      } else {\n        // Hash password for comparison\n        const hashedPassword = await cryptoService.hashPassword(credentials.password);\n        \n        // Authenticate with backend (API call would go here)\n        const response = await this.mockApiCall('/auth/login', {\n          email: credentials.email,\n          password: hashedPassword,\n          mfaCode: credentials.mfaCode,\n          deviceId: this.getDeviceFingerprint(),\n        });\n\n        _sessionData = response.data;\n      }\n\n      // Store session securely\n      await this.storeSession(_sessionData, credentials.rememberMe);\n      \n      // Set up token refresh\n      this.scheduleTokenRefresh();\n      \n      // Log successful login\n      await auditLogger.log({\n        event: 'USER_LOGIN',\n        userId: _sessionData.user.id,\n        details: {\n          anonymous: credentials.anonymousMode,\n          mfaUsed: !!credentials.mfaCode,\n        },\n        severity: 'info',\n      });\n\n      return {\n        success: true,\n        data: _sessionData,\n      };\n    } catch (error) {\n      await auditLogger.log({\n        event: 'LOGIN_FAILED',\n        details: { error: error instanceof Error ? error.message : String(error), email: credentials.email },\n        severity: 'warning',\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Logout with secure session cleanup\n   */\n  async logout(): Promise<void> {\n    try {\n      if (this.currentSession) {\n        // Revoke tokens on backend (API call would go here)\n        await this.mockApiCall('/auth/logout', {\n          sessionId: this.currentSession.sessionId,\n        });\n\n        // Log logout event\n        await auditLogger.log({\n          event: 'USER_LOGOUT',\n          userId: this.currentSession.user.id,\n          severity: 'info',\n        });\n      }\n\n      // Clear all session data\n      await this.clearSession();\n      \n      // Cancel refresh timer\n      if (this.refreshTimer) {\n        clearTimeout(this.refreshTimer);\n        this.refreshTimer = null;\n      }\n\n      // Clear activity timer\n      if (this.activityTimer) {\n        clearTimeout(this.activityTimer);\n        this.activityTimer = null;\n      }\n    } catch (error) {\n      logger.error('Logout error: ');\n      // Force clear session even if API call fails\n      await this.clearSession();\n    }\n  }\n\n  /**\n   * Refresh authentication tokens\n   */\n  async refreshTokens(): Promise<AuthTokens | null> {\n    try {\n      if (!this.currentSession?.tokens.refreshToken) {\n        return null;\n      }\n\n      // Call refresh endpoint (API call would go here)\n      const response = await this.mockApiCall('/auth/refresh', {\n        refreshToken: this.currentSession.tokens.refreshToken,\n      });\n\n      const newTokens = response.data.tokens;\n      \n      // Update stored tokens\n      this.currentSession.tokens = newTokens;\n      await this.storeSession(this.currentSession);\n      \n      // Reschedule next refresh\n      this.scheduleTokenRefresh();\n\n      return newTokens;\n    } catch (error) {\n      logger.error('Token refresh failed:');\n      // If refresh fails, user needs to re-authenticate\n      await this.logout();\n      return null;\n    }\n  }\n\n  /**\n   * Get current user\n   */\n  getCurrentUser(): User | null {\n    return this.currentSession?.user || null;\n  }\n\n  /**\n   * Get current session\n   */\n  getCurrentSession(): SessionData | null {\n    return this.currentSession;\n  }\n\n  /**\n   * Check if user is authenticated\n   */\n  isAuthenticated(): boolean {\n    return !!this.currentSession && new Date() < new Date(this.currentSession.expiresAt);\n  }\n\n  /**\n   * Check if session is anonymous\n   */\n  isAnonymous(): boolean {\n    return this.currentSession?.user.role === 'user' && \n           this.currentSession?.user.email.includes('@anonymous.local');\n  }\n\n  /**\n   * Update user profile\n   */\n  async updateProfile(updates: Partial<User>): Promise<ApiResponse<User>> {\n    try {\n      if (!this.currentSession) {\n        throw new Error('Not authenticated');\n      }\n\n      // API call to update profile\n      const response = await this.mockApiCall('/auth/profile', {\n        ...updates,\n      });\n\n      // Update session with new user data\n      this.currentSession.user = { ...this.currentSession.user, ...response.data };\n      await this.storeSession(this.currentSession);\n\n      // Log profile update\n      await auditLogger.log({\n        event: 'PROFILE_UPDATED',\n        userId: this.currentSession.user.id,\n        details: { updatedFields: Object.keys(_updates) },\n        severity: 'info',\n      });\n\n      return {\n        success: true,\n        data: this.currentSession.user,\n      };\n    } catch (error) {\n      await auditLogger.log({\n        event: 'PROFILE_UPDATE_FAILED',\n        userId: this.currentSession?.user.id,\n        details: { error: error instanceof Error ? error.message : String(error) },\n        severity: 'error',\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Request password reset\n   */\n  async requestPasswordReset(request: PasswordResetRequest): Promise<ApiResponse<void>> {\n    try {\n      // API call to initiate password reset\n      await this.mockApiCall('/auth/password-reset/request', request);\n\n      // Log password reset request\n      await auditLogger.log({\n        event: 'PASSWORD_RESET_REQUESTED',\n        details: { email: request.email },\n        severity: 'info',\n      });\n\n      return {\n        success: true,\n        data: undefined,\n      };\n    } catch (error) {\n      await auditLogger.log({\n        event: 'PASSWORD_RESET_FAILED',\n        details: { error: error instanceof Error ? error.message : String(error) },\n        severity: 'warning',\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Confirm password reset\n   */\n  async confirmPasswordReset(confirm: PasswordResetConfirm): Promise<ApiResponse<void>> {\n    try {\n      // Validate new password\n      const passwordStrength = this.checkPasswordStrength(confirm.newPassword);\n      if (passwordStrength.score < 3) {\n        throw new Error(`Weak password: ${passwordStrength.feedback.join(', ')}`);\n      }\n\n      if (confirm.newPassword !== confirm.confirmPassword) {\n        throw new Error('Passwords do not match');\n      }\n\n      // Hash new password\n      const hashedPassword = await cryptoService.hashPassword(confirm.newPassword);\n\n      // API call to reset password\n      await this.mockApiCall('/auth/password-reset/confirm', {\n        token: confirm.token,\n        password: hashedPassword,\n      });\n\n      // Log password reset\n      await auditLogger.log({\n        event: 'PASSWORD_RESET_COMPLETED',\n        severity: 'info',\n      });\n\n      return {\n        success: true,\n        data: undefined,\n      };\n    } catch (error) {\n      await auditLogger.log({\n        event: 'PASSWORD_RESET_FAILED',\n        details: { error: error instanceof Error ? error.message : String(error) },\n        severity: 'error',\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Private helper methods\n   */\n  private async loadStoredSession(): Promise<void> {\n    try {\n      const _encryptedSession = await secureStorage.getItem('session');\n      if (_encryptedSession) {\n        const _sessionData = await cryptoService.decrypt(_encryptedSession);\n        const session = JSON.parse(_sessionData) as SessionData;\n        \n        // Check if session is still valid\n        if (new Date() < new Date(session.expiresAt)) {\n          this.currentSession = session;\n        } else {\n          // Session expired, clear it\n          await this.clearSession();\n        }\n      }\n    } catch (error) {\n      logger.error('Failed to load stored session:');\n      await this.clearSession();\n    }\n  }\n\n  private async storeSession(session: SessionData, persistent = false): Promise<void> {\n    this.currentSession = session;\n    \n    // Encrypt session data\n    const _encryptedSession = await cryptoService.encrypt(JSON.stringify(_session));\n    \n    // Store in secure storage\n    secureStorage.setItem('session', _encryptedSession);\n  }\n\n  private async clearSession(): Promise<void> {\n    this.currentSession = null;\n    await secureStorage.removeItem('session');\n    await secureStorage.removeItem('deviceId');\n  }\n\n  private async createAnonymousSession(): Promise<SessionData> {\n    const anonymousId = this.generateAnonymousId();\n    const anonymousUser: User = {\n      id: anonymousId,\n      email: `${anonymousId}@anonymous.local`,\n      name: 'Anonymous User',\n      role: 'user',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      profile: {\n        preferences: {\n          theme: 'system',\n          notifications: {\n            email: false,\n            push: false,\n            sms: false,\n            reminders: true,\n            crisisAlerts: true,\n          },\n          privacy: {\n            shareData: false,\n            publicProfile: false,\n            showMoodHistory: false,\n          },\n        },\n      },\n    };\n\n    const tokens: AuthTokens = {\n      accessToken: this.generateMockToken(),\n      refreshToken: this.generateMockToken(),\n      expiresIn: 3600,\n      tokenType: 'Bearer',\n    };\n\n    return {\n      user: anonymousUser,\n      tokens,\n      sessionId: this.generateSessionId(),\n      deviceId: this.getDeviceFingerprint(),\n      createdAt: new Date(),\n      lastActivity: new Date(),\n      expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 hours for anonymous\n    };\n  }\n\n  private scheduleTokenRefresh(): void {\n    if (this.refreshTimer) {\n      clearTimeout(this.refreshTimer);\n    }\n\n    if (!this.currentSession) return;\n\n    const expiresIn = this.currentSession.tokens.expiresIn * 1000;\n    const refreshTime = expiresIn - this.TOKEN_REFRESH_THRESHOLD;\n\n    this.refreshTimer = setTimeout(() => {\n      this.refreshTokens();\n    }, refreshTime);\n  }\n\n  private setupActivityMonitoring(): void {\n    // Monitor user activity\n    const events = ['mousedown', 'keydown', 'scroll', 'touchstart'];\n    \n    const resetActivityTimer = () => {\n      if (this.activityTimer) {\n        clearTimeout(this.activityTimer);\n      }\n\n      if (this.currentSession && !this.isAnonymous()) {\n        this.activityTimer = setTimeout(() => {\n          // Auto-logout after inactivity\n          this.logout();\n        }, this.SESSION_TIMEOUT);\n      }\n    };\n\n    events.forEach(event => {\n      window.addEventListener(event, resetActivityTimer, { passive: true });\n    });\n\n    resetActivityTimer();\n  }\n\n  private validateRegistrationData(data: RegisterData): void {\n    // Email validation\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!data.anonymousMode && !emailRegex.test(data.email)) {\n      throw new Error('Invalid email address');\n    }\n\n    // Name validation\n    if (!data.anonymousMode && (!data.name || data.name.length < 2)) {\n      throw new Error('Name must be at least 2 characters');\n    }\n\n    // Terms acceptance\n    if (!data.acceptedTerms) {\n      throw new Error('You must accept the terms and conditions');\n    }\n\n    // Data processing consent\n    if (!data.consentToDataProcessing) {\n      throw new Error('Consent to data processing is required');\n    }\n  }\n\n  private checkPasswordStrength(password: string): { score: number; feedback: string[] } {\n    const feedback: string[] = [];\n    let score = 0;\n\n    // Length check\n    if (password.length >= 8) score++;\n    if (password.length >= 12) score++;\n    if (password.length < 8) feedback.push('Password should be at least 8 characters');\n\n    // Complexity checks\n    if (/[a-z]/.test(_password)) score++;\n    if (/[A-Z]/.test(_password)) score++;\n    if (/[0-9]/.test(_password)) score++;\n    if (/[^a-zA-Z0-9]/.test(_password)) score++;\n\n    // Common patterns check\n    const commonPatterns = ['password', '12345', 'qwerty', 'admin', 'letmein'];\n    if (commonPatterns.some(_pattern => password.toLowerCase().includes(_pattern))) {\n      score = Math.max(0, score - 2);\n      feedback.push('Password contains common patterns');\n    }\n\n    // Provide feedback\n    if (!/[a-z]/.test(_password)) feedback.push('Add lowercase letters');\n    if (!/[A-Z]/.test(_password)) feedback.push('Add uppercase letters');\n    if (!/[0-9]/.test(_password)) feedback.push('Add numbers');\n    if (!/[^a-zA-Z0-9]/.test(_password)) feedback.push('Add special characters');\n\n    return { score: Math.min(5, score), feedback };\n  }\n\n  private async checkRateLimit(identifier: string): Promise<void> {\n    // Implement rate limiting logic\n    const _key = `rate_limit_${identifier}`;\n    const attempts = await secureStorage.getItem(_key);\n    \n    if (attempts) {\n      const data = JSON.parse(attempts);\n      if (data.count >= 5 && Date.now() - data.firstAttempt < 15 * 60 * 1000) {\n        throw new Error('Too many login attempts. Please try again later.');\n      }\n    }\n  }\n\n  private getDeviceFingerprint(): string {\n    // Generate a unique device fingerprint\n    const deviceId = secureStorage.getItem('deviceId') || this.generateDeviceId();\n    secureStorage.setItem('deviceId', deviceId);\n    return deviceId;\n  }\n\n  private generateDeviceId(): string {\n    return `device_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateAnonymousId(): string {\n    return `anon_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateMockToken(): string {\n    return btoa(`${Date.now()}_${Math.random().toString(36).substr(2, 20)}`);\n  }\n\n  private async getClientIp(): Promise<string> {\n    // In production, this would get the real IP\n    return '127.0.0.1';\n  }\n\n  private async mockApiCall(endpoint: string, data: unknown): Promise<unknown> {\n    // Simulate API call - in production, this would be a real API call\n    logger.info(`API Call to ${endpoint}:`, data);\n    \n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    // Return mock response based on endpoint\n    if (endpoint === '/auth/register') {\n      return {\n        data: {\n          user: {\n            id: `user_${Date.now()}`,\n            email: data.email,\n            name: data.name || data.email.split('@')[0],\n            role: 'user',\n            createdAt: new Date(),\n            updatedAt: new Date(),\n          },\n        },\n      };\n    } else if (endpoint === '/auth/login') {\n      return {\n        data: {\n          user: {\n            id: `user_${Date.now()}`,\n            email: data.email,\n            name: data.email.split('@')[0],\n            role: 'user',\n            createdAt: new Date(),\n            updatedAt: new Date(),\n          },\n          tokens: {\n            accessToken: this.generateMockToken(),\n            refreshToken: this.generateMockToken(),\n            expiresIn: 3600,\n            tokenType: 'Bearer' as const,\n          },\n          sessionId: this.generateSessionId(),\n          deviceId: data.deviceId,\n          createdAt: new Date(),\n          lastActivity: new Date(),\n          expiresAt: new Date(Date.now() + 3600 * 1000),\n        },\n      };\n    } else if (endpoint === '/auth/refresh') {\n      return {\n        data: {\n          tokens: {\n            accessToken: this.generateMockToken(),\n            refreshToken: this.generateMockToken(),\n            expiresIn: 3600,\n            tokenType: 'Bearer' as const,\n          },\n        },\n      };\n    }\n    \n    return { data: {} };\n  }\n}\n\nexport const _authService = AuthenticationService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\auth\\mfaService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[622,625],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[622,625],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":482,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":482,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Multi-Factor Authentication Service\n * Provides TOTP, SMS, Email, and Biometric authentication methods\n * HIPAA-compliant implementation with secure backup codes\n */\n\nimport { cryptoService } from '../security/cryptoService';\nimport { secureStorage } from '../security/secureStorage';\nimport { auditLogger } from '../security/auditLogger';\nimport { logger } from '../utils/logger';\n\nexport type MFAMethod = 'totp' | 'sms' | 'email' | 'biometric' | 'backup';\n\nexport interface MFASetup {\n  method: MFAMethod;\n  enabled: boolean;\n  verified: boolean;\n  createdAt: Date;\n  lastUsed?: Date;\n  metadata?: Record<string, any>;\n}\n\nexport interface TOTPSetup {\n  secret: string;\n  qrCodeUrl: string;\n  backupCodes: string[];\n}\n\nexport interface MFAChallenge {\n  challengeId: string;\n  method: MFAMethod;\n  expiresAt: Date;\n  attempts: number;\n  maxAttempts: number;\n}\n\nclass MultiFactorAuthService {\n  private static instance: MultiFactorAuthService;\n  private readonly MAX_ATTEMPTS = 3;\n  private readonly CODE_LENGTH = 6;\n  private readonly BACKUP_CODE_LENGTH = 8;\n  private readonly BACKUP_CODE_COUNT = 10;\n  private readonly TOTP_WINDOW = 30; // seconds\n  private readonly CHALLENGE_EXPIRY = 5 * 60 * 1000; // 5 minutes\n  private activeChallenges: Map<string, MFAChallenge> = new Map();\n\n  private constructor() {\n    this.initializeService();\n  }\n\n  static getInstance(): MultiFactorAuthService {\n    if (!MultiFactorAuthService.instance) {\n      MultiFactorAuthService.instance = new MultiFactorAuthService();\n    }\n    return MultiFactorAuthService.instance;\n  }\n\n  private initializeService(): void {\n    // Clean up expired challenges periodically\n    setInterval(() => {\n      this.cleanupExpiredChallenges();\n    }, 60000); // Every minute\n  }\n\n  /**\n   * Setup TOTP (Time-based One-Time Password) authentication\n   */\n  async setupTOTP(_userId: string): Promise<TOTPSetup> {\n    try {\n      // Generate secret\n      const secret = this.generateTOTPSecret();\n      \n      // Generate backup codes\n      const backupCodes = this.generateBackupCodes();\n      \n      // Store encrypted setup\n      await this.storeMFASetup(_userId, {\n        method: 'totp',\n        enabled: false,\n        verified: false,\n        createdAt: new Date(),\n        metadata: {\n          secret: await cryptoService.encrypt(secret),\n          backupCodes: await cryptoService.encrypt(JSON.stringify(_backupCodes)),\n          usedBackupCodes: [],\n        },\n      });\n\n      // Generate QR code URL\n      const qrCodeUrl = this.generateTOTPQRCode(_userId, secret);\n\n      // Log setup initiation\n      await auditLogger.log({\n        event: 'MFA_ENABLED',\n        _userId,\n        details: { method: 'totp' },\n        severity: 'info',\n      });\n\n      return {\n        secret,\n        qrCodeUrl,\n        backupCodes,\n      };\n    } catch (error) {\n      await auditLogger.log({\n        event: 'SECURITY_ALERT',\n        _userId,\n        details: { error: error instanceof Error ? error.message : String(error), action: 'mfa_setup_failed' },\n        severity: 'error',\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Verify TOTP setup with initial code\n   */\n  async verifyTOTPSetup(_userId: string, code: string): Promise<boolean> {\n    try {\n      const setup = await this.getMFASetup(_userId, 'totp');\n      if (!setup) {\n        throw new Error('TOTP not configured');\n      }\n\n      const secret = await cryptoService.decrypt(setup.metadata?.secret || '');\n      const isValid = await this.verifyTOTPCode(secret, code);\n\n      if (_isValid) {\n        // Mark as verified and enabled\n        setup.enabled = true;\n        setup.verified = true;\n        await this.storeMFASetup(_userId, setup);\n\n        await auditLogger.log({\n          event: 'MFA_ENABLED',\n          _userId,\n          details: { method: 'totp', verified: true },\n          severity: 'info',\n        });\n      }\n\n      return isValid;\n    } catch (error) {\n      await auditLogger.log({\n        event: 'SECURITY_ALERT',\n        _userId,\n        details: { error: error instanceof Error ? error.message : String(error), action: 'mfa_setup_failed' },\n        severity: 'warning',\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Setup SMS authentication\n   */\n  async setupSMS(_userId: string, _phoneNumber: string): Promise<void> {\n    try {\n      // Validate phone number\n      const sanitizedPhone = this.sanitizePhoneNumber(_phoneNumber);\n      \n      // Store setup\n      await this.storeMFASetup(_userId, {\n        method: 'sms',\n        enabled: false,\n        verified: false,\n        createdAt: new Date(),\n        metadata: {\n          _phoneNumber: await cryptoService.encrypt(sanitizedPhone),\n        },\n      });\n\n      // Send verification code\n      await this.sendSMSCode(_userId, sanitizedPhone);\n\n      await auditLogger.log({\n        event: 'MFA_ENABLED',\n        _userId,\n        details: { method: 'sms' },\n        severity: 'info',\n      });\n    } catch (error) {\n      await auditLogger.log({\n        event: 'SECURITY_ALERT',\n        _userId,\n        details: { error: error instanceof Error ? error.message : String(error), action: 'mfa_setup_failed' },\n        severity: 'error',\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Setup email authentication\n   */\n  async setupEmail(_userId: string, email: string): Promise<void> {\n    try {\n      // Store setup\n      await this.storeMFASetup(_userId, {\n        method: 'email',\n        enabled: false,\n        verified: false,\n        createdAt: new Date(),\n        metadata: {\n          email: await cryptoService.encrypt(email),\n        },\n      });\n\n      // Send verification code\n      await this.sendEmailCode(_userId, email);\n\n      await auditLogger.log({\n        event: 'MFA_ENABLED',\n        _userId,\n        details: { method: 'email' },\n        severity: 'info',\n      });\n    } catch (error) {\n      await auditLogger.log({\n        event: 'SECURITY_ALERT',\n        _userId,\n        details: { error: error instanceof Error ? error.message : String(error), action: 'mfa_setup_failed' },\n        severity: 'error',\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Setup biometric authentication\n   */\n  async setupBiometric(_userId: string): Promise<boolean> {\n    try {\n      // Check if WebAuthn is available\n      if (!window.PublicKeyCredential) {\n        throw new Error('Biometric authentication not supported');\n      }\n\n      // Create credential options\n      const credentialOptions = await this.createBiometricCredential(_userId);\n      \n      // Store setup\n      await this.storeMFASetup(_userId, {\n        method: 'biometric',\n        enabled: true,\n        verified: true,\n        createdAt: new Date(),\n        metadata: credentialOptions,\n      });\n\n      await auditLogger.log({\n        event: 'MFA_ENABLED',\n        _userId,\n        details: { method: 'biometric' },\n        severity: 'info',\n      });\n\n      return true;\n    } catch (error) {\n      await auditLogger.log({\n        event: 'SECURITY_ALERT',\n        _userId,\n        details: { error: error instanceof Error ? error.message : String(error), action: 'mfa_setup_failed' },\n        severity: 'error',\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Create MFA challenge for login\n   */\n  async createChallenge(_userId: string, _method?: MFAMethod): Promise<MFAChallenge> {\n    try {\n      // Get user's MFA _methods\n      const _methods = await this.getUserMFAMethods(_userId);\n      \n      // Select method (use provided or default to most secure available)\n      const selectedMethod = method || this.selectBestMethod(_methods);\n      \n      if (!selectedMethod) {\n        throw new Error('No MFA method configured');\n      }\n\n      // Create challenge\n      const challenge: MFAChallenge = {\n        challengeId: cryptoService.generateSecureUUID(),\n        method: selectedMethod,\n        expiresAt: new Date(Date.now() + this.CHALLENGE_EXPIRY),\n        attempts: 0,\n        maxAttempts: this.MAX_ATTEMPTS,\n      };\n\n      // Store challenge\n      this.activeChallenges.set(challenge.challengeId, challenge);\n\n      // Send code based on method\n      await this.sendChallengeCode(_userId, selectedMethod);\n\n      await auditLogger.log({\n        event: 'MFA_CHALLENGE_SUCCESS',\n        _userId,\n        details: { method: selectedMethod, challengeId: challenge.challengeId },\n        severity: 'info',\n      });\n\n      return challenge;\n    } catch (error) {\n      await auditLogger.log({\n        event: 'MFA_CHALLENGE_FAILED',\n        _userId,\n        details: { error: error instanceof Error ? error.message : String(error) },\n        severity: 'warning',\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Verify MFA challenge response\n   */\n  async verifyChallenge(\n    _userId: string,\n    challengeId: string,\n    code: string\n  ): Promise<boolean> {\n    try {\n      const challenge = this.activeChallenges.get(_challengeId);\n      \n      if (!challenge) {\n        throw new Error('Invalid or expired challenge');\n      }\n\n      // Check expiry\n      if (new Date() > challenge.expiresAt) {\n        this.activeChallenges.delete(_challengeId);\n        throw new Error('Challenge expired');\n      }\n\n      // Check attempts\n      challenge.attempts++;\n      if (challenge.attempts > challenge.maxAttempts) {\n        this.activeChallenges.delete(_challengeId);\n        \n        await auditLogger.log({\n          event: 'SECURITY_ALERT',\n          _userId,\n          details: { reason: 'max_mfa_attempts_exceeded', challengeId },\n          severity: 'critical',\n        });\n        \n        throw new Error('Maximum attempts exceeded');\n      }\n\n      // Verify code based on method\n      let isValid = false;\n      \n      switch (challenge.method) {\n        case 'totp':\n          isValid = await this.verifyTOTP(_userId, code);\n          break;\n        case 'sms':\n        case 'email':\n          isValid = await this.verifyTemporaryCode(_userId, code);\n          break;\n        case 'backup':\n          isValid = await this.verifyBackupCode(_userId, code);\n          break;\n        case 'biometric':\n          isValid = await this.verifyBiometric(_userId, code);\n          break;\n      }\n\n      if (_isValid) {\n        // Remove challenge\n        this.activeChallenges.delete(_challengeId);\n        \n        // Update last used\n        await this.updateLastUsed(_userId, challenge.method);\n        \n        await auditLogger.log({\n          event: 'MFA_CHALLENGE_SUCCESS',\n          _userId,\n          details: { method: challenge.method, challengeId },\n          severity: 'info',\n        });\n      } else {\n        await auditLogger.log({\n          event: 'MFA_CHALLENGE_FAILED',\n          _userId,\n          details: { \n            method: challenge.method, \n            challengeId,\n            attempt: challenge.attempts \n          },\n          severity: 'warning',\n        });\n      }\n\n      return isValid;\n    } catch (error) {\n      await auditLogger.log({\n        event: 'MFA_CHALLENGE_FAILED',\n        userId,\n        details: { error: error instanceof Error ? error.message : String(error), challengeId },\n        severity: 'error',\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Disable MFA method\n   */\n  async disableMFA(_userId: string, method: MFAMethod): Promise<void> {\n    try {\n      await this.removeMFASetup(_userId, method);\n      \n      await auditLogger.log({\n        event: 'MFA_DISABLED',\n        _userId,\n        details: { method },\n        severity: 'info',\n      });\n    } catch (error) {\n      await auditLogger.log({\n        event: 'SECURITY_ALERT',\n        _userId,\n        details: { error: error instanceof Error ? error.message : String(error), action: 'mfa_setup_failed' },\n        severity: 'error',\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get user's enabled MFA methods\n   */\n  async getUserMFAMethods(_userId: string): Promise<MFASetup[]> {\n    const _key = `mfa_${_userId}`;\n    const stored = await secureStorage.getItem(_key);\n    \n    if (!stored || !stored.methods) {\n      return [];\n    }\n    \n    return stored.methods.filter((m: MFASetup) => m.enabled);\n  }\n\n  /**\n   * Check if user has MFA enabled\n   */\n  async hasMFAEnabled(_userId: string): Promise<boolean> {\n    const _methods = await this.getUserMFAMethods(_userId);\n    return _methods.length > 0;\n  }\n\n  /**\n   * Generate recovery codes\n   */\n  async generateRecoveryCodes(_userId: string): Promise<string[]> {\n    try {\n      const codes = this.generateBackupCodes();\n      \n      // Store encrypted codes\n      const _key = `mfa_recovery_${_userId}`;\n      await secureStorage.setItem(_key, {\n        codes: await cryptoService.encrypt(JSON.stringify(_codes)),\n        generated: new Date(),\n        used: [],\n      });\n      \n      await auditLogger.log({\n        event: 'SECURITY_ALERT',\n        _userId,\n        details: { action: 'recovery_codes_generated' },\n        severity: 'info',\n      });\n      \n      return codes;\n    } catch (error) {\n      logger.error('Failed to generate recovery codes:');\n      throw undefined;\n    }\n  }\n\n  /**\n   * Private helper methods\n   */\n  private generateTOTPSecret(): string {\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\n    let secret = '';\n    for (let i = 0; i < 32; i++) {\n      secret += characters[Math.floor(Math.random() * characters.length)];\n    }\n    return secret;\n  }\n\n  private generateTOTPQRCode(_userId: string, secret: string): string {\n    const issuer = 'Mental Health Platform';\n    const algorithm = 'SHA1';\n    const digits = this.CODE_LENGTH;\n    const period = this.TOTP_WINDOW;\n    \n    const _otpauth = `_otpauth://totp/${issuer}:${_userId}?secret=${secret}&issuer=${issuer}&algorithm=${algorithm}&digits=${digits}&period=${period}`;\n    \n    // In production, generate actual QR code\n    return `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(_otpauth)}`;\n  }\n\n  private async verifyTOTPCode(secret: string, code: string): Promise<boolean> {\n    // Simplified TOTP verification - in production, use a proper TOTP library\n    const _time = Math.floor(Date.now() / 1000 / this.TOTP_WINDOW);\n    \n    // Check current and adjacent time windows\n    for (let i = -1; i <= 1; i++) {\n      const testTime = time + i;\n      const expectedCode = await this.generateTOTPCode(secret, testTime);\n      if (expectedCode === code) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n  private async generateTOTPCode(secret: string, time: number): Promise<string> {\n    // Simplified TOTP generation - in production, use a proper implementation\n    const hash = await cryptoService.sha256(`${secret}${time}`);\n    const code = parseInt(hash.substr(0, 6), 16) % 1000000;\n    return code.toString().padStart(6, '0');\n  }\n\n  private generateBackupCodes(): string[] {\n    const codes: string[] = [];\n    for (let i = 0; i < this.BACKUP_CODE_COUNT; i++) {\n      codes.push(this.generateBackupCode());\n    }\n    return codes;\n  }\n\n  private generateBackupCode(): string {\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let code = '';\n    for (let i = 0; i < this.BACKUP_CODE_LENGTH; i++) {\n      if (i === 4) code += '-'; // Add separator\n      code += characters[Math.floor(Math.random() * characters.length)];\n    }\n    return code;\n  }\n\n  private sanitizePhoneNumber(phone: string): string {\n    // Remove all non-digits\n    const digits = phone.replace(/\\D/g, '');\n    \n    // Validate length (assuming US numbers)\n    if (digits.length !== 10 && digits.length !== 11) {\n      throw new Error('Invalid phone number');\n    }\n    \n    return digits;\n  }\n\n  private async sendSMSCode(_userId: string, _phoneNumber: string): Promise<void> {\n    const code = this.generateVerificationCode();\n    \n    // Store temporary code\n    await this.storeTemporaryCode(_userId, code);\n    \n    // In production, send actual SMS\n    logger.info(`SMS to ${_phoneNumber}: Your verification code is ${code}`);\n  }\n\n  private async sendEmailCode(_userId: string, email: string): Promise<void> {\n    const code = this.generateVerificationCode();\n    \n    // Store temporary code\n    await this.storeTemporaryCode(_userId, code);\n    \n    // In production, send actual email\n    logger.info(`Email to ${email}: Your verification code is ${code}`);\n  }\n\n  private generateVerificationCode(): string {\n    return Math.floor(100000 + Math.random() * 900000).toString();\n  }\n\n  private async storeTemporaryCode(_userId: string, code: string): Promise<void> {\n    const _key = `mfa_temp_${_userId}`;\n    await secureStorage.setItem(_key, {\n      code: await cryptoService.encrypt(code),\n      expiresAt: new Date(Date.now() + this.CHALLENGE_EXPIRY),\n    });\n  }\n\n  private async verifyTemporaryCode(_userId: string, code: string): Promise<boolean> {\n    const _key = `mfa_temp_${_userId}`;\n    const stored = await secureStorage.getItem(_key);\n    \n    if (!stored) return false;\n    \n    if (new Date() > new Date(stored.expiresAt)) {\n      await secureStorage.removeItem(_key);\n      return false;\n    }\n    \n    const storedCode = await cryptoService.decrypt(stored.code);\n    const isValid = storedCode === code;\n    \n    if (_isValid) {\n      await secureStorage.removeItem(_key);\n    }\n    \n    return isValid;\n  }\n\n  private async verifyTOTP(_userId: string, code: string): Promise<boolean> {\n    const setup = await this.getMFASetup(_userId, 'totp');\n    if (!setup) return false;\n    \n    const secret = await cryptoService.decrypt(setup.metadata?.secret || '');\n    return await this.verifyTOTPCode(secret, code);\n  }\n\n  private async verifyBackupCode(_userId: string, code: string): Promise<boolean> {\n    const setup = await this.getMFASetup(_userId, 'totp');\n    if (!setup) return false;\n    \n    const backupCodes = JSON.parse(\n      await cryptoService.decrypt(setup.metadata?.backupCodes || '[]')\n    );\n    const usedCodes = setup.metadata?.usedBackupCodes || [];\n    \n    if (usedCodes.includes(code)) {\n      return false;\n    }\n    \n    const isValid = backupCodes.includes(code);\n    \n    if (_isValid) {\n      // Mark code as used\n      usedCodes.push(code);\n      if (setup.metadata) {\n        setup.metadata.usedBackupCodes = usedCodes;\n      }\n      await this.storeMFASetup(_userId, setup);\n    }\n    \n    return isValid;\n  }\n\n  private async verifyBiometric(_userId: string, credential: string): Promise<boolean> {\n    // In production, verify WebAuthn credential\n    logger.info('Verifying biometric credential:', credential);\n    return true; // Simplified for development\n  }\n\n  private async createBiometricCredential(_userId: string): Promise<unknown> {\n    // In production, create WebAuthn credential\n    return {\n      credentialId: cryptoService.generateSecureUUID(),\n      publicKey: 'mock_public_key',\n    };\n  }\n\n  private async storeMFASetup(_userId: string, setup: MFASetup): Promise<void> {\n    const _key = `mfa_${_userId}`;\n    const existing = await secureStorage.getItem(_key) || { _methods: [] };\n    \n    // Update or add method\n    const index = existing.methods.findIndex((m: MFASetup) => m.method === setup.method);\n    if (index >= 0) {\n      existing._methods[index] = setup;\n    } else {\n      existing._methods.push(setup);\n    }\n    \n    await secureStorage.setItem(_key, existing);\n  }\n\n  private async getMFASetup(_userId: string, method: MFAMethod): Promise<MFASetup | null> {\n    const _key = `mfa_${_userId}`;\n    const stored = await secureStorage.getItem(_key);\n    \n    if (!stored || !stored.methods) {\n      return null;\n    }\n    \n    return stored.methods.find((m: MFASetup) => m.method === method) || null;\n  }\n\n  private async removeMFASetup(_userId: string, method: MFAMethod): Promise<void> {\n    const _key = `mfa_${_userId}`;\n    const existing = await secureStorage.getItem(_key);\n    \n    if (existing && existing.methods) {\n      existing._methods = existing._methods.filter((m: MFASetup) => m.method !== method);\n      await secureStorage.setItem(_key, existing);\n    }\n  }\n\n  private async updateLastUsed(_userId: string, method: MFAMethod): Promise<void> {\n    const setup = await this.getMFASetup(_userId, method);\n    if (setup) {\n      setup.lastUsed = new Date();\n      await this.storeMFASetup(_userId, setup);\n    }\n  }\n\n  private selectBestMethod(_methods: MFASetup[]): MFAMethod | null {\n    // Priority order: biometric > totp > sms > email\n    const priority: MFAMethod[] = ['biometric', 'totp', 'sms', 'email'];\n    \n    for (const method of priority) {\n      if (_methods.some(m => m.method === method)) {\n        return method;\n      }\n    }\n    \n    return null;\n  }\n\n  private async sendChallengeCode(_userId: string, method: MFAMethod): Promise<void> {\n    switch (method) {\n      case \"sms\": {\n        const smsSetup = await this.getMFASetup(_userId, 'sms');\n        if (smsSetup) {\n          const phone = await cryptoService.decrypt(smsSetup.metadata?._phoneNumber || '');\n          await this.sendSMSCode(_userId, phone);\n        }\n        break;\n      }\n      case \"email\": {\n        const emailSetup = await this.getMFASetup(_userId, 'email');\n        if (emailSetup) {\n          const email = await cryptoService.decrypt(emailSetup.metadata?.email || '');\n          await this.sendEmailCode(_userId, email);\n        }\n        break;\n      }\n      // TOTP and biometric don't need to send codes\n    }\n  }\n\n  private cleanupExpiredChallenges(): void {\n    const now = new Date();\n    for (const [_id, challenge] of this.activeChallenges.entries()) {\n      if (now > challenge.expiresAt) {\n        this.activeChallenges.delete(_id);\n      }\n    }\n  }\n}\n\nexport const __mfaService = MultiFactorAuthService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\community\\communityService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\community\\gamificationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\compliance\\hipaaService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\console\\ConsoleSoundSystem.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":639,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":639,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19973,19976],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19973,19976],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Console Sound System\r\n * Provides gaming console-style audio feedback and haptic vibrations\r\n */\r\n\r\nimport { logger } from '../../utils/logger';\r\n\r\n/**\r\n * Complete sound configuration with all required properties\r\n */\r\nexport interface SoundConfig {\r\n  type: 'beep' | 'chirp' | 'whoosh' | 'thud' | 'ding' | 'alert' | 'success' | 'error' | 'ambient';\r\n  volume: number; // 0.0 to 1.0\r\n  pitch: number; // Hz\r\n  duration: number; // seconds\r\n  fadeOut?: boolean;\r\n  haptic?: HapticConfig;\r\n}\r\n\r\n/**\r\n * Partial sound configuration for customizing existing sounds or creating new ones.\r\n * All properties are optional and will be filled with defaults if not provided.\r\n */\r\nexport interface PartialSoundConfig {\r\n  type?: 'beep' | 'chirp' | 'whoosh' | 'thud' | 'ding' | 'alert' | 'success' | 'error' | 'ambient';\r\n  volume?: number; // 0.0 to 1.0\r\n  pitch?: number; // Hz\r\n  duration?: number; // seconds\r\n  fadeOut?: boolean;\r\n  haptic?: HapticConfig;\r\n}\r\n\r\nexport interface HapticConfig {\r\n  pattern: number[]; // vibration pattern in ms [vibrate, pause, vibrate, pause...]\r\n  intensity: 'light' | 'medium' | 'strong';\r\n}\r\n\r\ninterface QueuedSound {\r\n  _soundName: keyof ConsoleSoundSystem['CONSOLE_SOUNDS'];\r\n  options?: PartialSoundConfig;\r\n  timestamp: number;\r\n}\r\n\r\ntype PerformanceMode = 'low' | 'medium' | 'high';\r\ntype AudioSource = AudioBufferSourceNode;\r\n\r\nexport class ConsoleSoundSystem {\r\n  private audioContext: AudioContext | null = null;\r\n  private soundEnabled = true;\r\n  private hapticEnabled = true;\r\n  private masterVolume = 0.3; // Default conservative volume\r\n  private soundCache = new Map<string, SoundConfig>();\r\n  \r\n  // Performance optimization properties\r\n  private soundQueue: QueuedSound[] = [];\r\n  private processingQueue = false;\r\n  private audioPool = new Map<string, AudioSource[]>();\r\n  private lastSoundTimes = new Map<string, number>();\r\n  private performanceMode: PerformanceMode = 'medium';\r\n  private isLowLatencyMode = false;\r\n\r\n  // Console sound presets inspired by PS5/Xbox\r\n  private readonly CONSOLE_SOUNDS: Record<string, SoundConfig> = {\r\n    // Navigation sounds\r\n    focus: {\r\n      type: 'chirp',\r\n      volume: 0.2,\r\n      pitch: 800,\r\n      duration: 0.1,\r\n      haptic: { pattern: [20], intensity: 'light' }\r\n    },\r\n    select: {\r\n      type: 'ding',\r\n      volume: 0.4,\r\n      pitch: 600,\r\n      duration: 0.15,\r\n      haptic: { pattern: [40], intensity: 'medium' }\r\n    },\r\n    back: {\r\n      type: 'beep',\r\n      volume: 0.3,\r\n      pitch: 400,\r\n      duration: 0.12,\r\n      haptic: { pattern: [30], intensity: 'light' }\r\n    },\r\n    \r\n    // UI interaction sounds\r\n    hover: {\r\n      type: 'chirp',\r\n      volume: 0.15,\r\n      pitch: 900,\r\n      duration: 0.08,\r\n      haptic: { pattern: [15], intensity: 'light' }\r\n    },\r\n    click: {\r\n      type: 'thud',\r\n      volume: 0.25,\r\n      pitch: 200,\r\n      duration: 0.1,\r\n      haptic: { pattern: [25], intensity: 'medium' }\r\n    },\r\n    \r\n    // System sounds\r\n    startup: {\r\n      type: 'whoosh',\r\n      volume: 0.5,\r\n      pitch: 300,\r\n      duration: 1.2,\r\n      fadeOut: true,\r\n      haptic: { pattern: [100, 50, 100], intensity: 'medium' }\r\n    },\r\n    shutdown: {\r\n      type: 'whoosh',\r\n      volume: 0.4,\r\n      pitch: 150,\r\n      duration: 0.8,\r\n      fadeOut: true,\r\n      haptic: { pattern: [200], intensity: 'light' }\r\n    },\r\n    \r\n    // Notification sounds\r\n    achievement: {\r\n      type: 'success',\r\n      volume: 0.6,\r\n      pitch: 800,\r\n      duration: 0.5,\r\n      haptic: { pattern: [100, 50, 100, 50, 150], intensity: 'strong' }\r\n    },\r\n    levelUp: {\r\n      type: 'success',\r\n      volume: 0.7,\r\n      pitch: 600,\r\n      duration: 0.8,\r\n      haptic: { pattern: [80, 40, 80, 40, 120], intensity: 'strong' }\r\n    },\r\n    notification: {\r\n      type: 'ding',\r\n      volume: 0.3,\r\n      pitch: 700,\r\n      duration: 0.2,\r\n      haptic: { pattern: [50, 50, 50], intensity: 'medium' }\r\n    },\r\n    \r\n    // Emergency/Alert sounds - MUTED: Sound was too loud/annoying for users\r\n    emergency: {\r\n      type: 'alert',\r\n      volume: 0.0, // DISABLED: Sound muted per user feedback\r\n      pitch: 1000,\r\n      duration: 0.3,\r\n      haptic: { pattern: [100, 100, 100, 100, 200], intensity: 'strong' }\r\n    },\r\n    warning: {\r\n      type: 'alert',\r\n      volume: 0.0, // DISABLED: Sound muted per user feedback\r\n      pitch: 600,\r\n      duration: 0.2,\r\n      haptic: { pattern: [80, 80, 80], intensity: 'medium' }\r\n    },\r\n    \r\n    // Mental health specific sounds (gentle, calming)\r\n    breatheIn: {\r\n      type: 'ambient',\r\n      volume: 0.2,\r\n      pitch: 400,\r\n      duration: 4.0,\r\n      fadeOut: true\r\n    },\r\n    breatheOut: {\r\n      type: 'ambient',\r\n      volume: 0.2,\r\n      pitch: 200,\r\n      duration: 4.0,\r\n      fadeOut: true\r\n    },\r\n    meditation: {\r\n      type: 'ambient',\r\n      volume: 0.15,\r\n      pitch: 300,\r\n      duration: 10.0,\r\n      fadeOut: true\r\n    }\r\n  };\r\n\r\n  constructor() {\r\n    this.initializeAudio();\r\n    this.loadUserPreferences();\r\n    this.detectPerformanceMode();\r\n    this.setupAudioPool();\r\n    this.initializeLowLatencyMode();\r\n  }\r\n\r\n  private initializeAudio() {\r\n    try {\r\n      this.audioContext = new (window.AudioContext || (window as unknown).webkitAudioContext)();\r\n    } catch {\r\n      logger.warn('Audio context not supported:');\r\n      this.soundEnabled = false;\r\n    }\r\n  }\r\n\r\n  private loadUserPreferences() {\r\n    // Load user sound preferences from localStorage\r\n    const soundPref = localStorage.getItem('console-sound-enabled');\r\n    const hapticPref = localStorage.getItem('console-haptic-enabled');\r\n    const volumePref = localStorage.getItem('console-master-volume');\r\n\r\n    if (soundPref !== null) {\r\n      this.soundEnabled = JSON.parse(_soundPref);\r\n    }\r\n    \r\n    if (hapticPref !== null) {\r\n      this.hapticEnabled = JSON.parse(_hapticPref);\r\n    }\r\n    \r\n    if (volumePref !== null) {\r\n      this.masterVolume = Math.max(0, Math.min(1, parseFloat(_volumePref)));\r\n    }\r\n  }\r\n\r\n  // Helper method to create a valid sound configuration with defaults\r\n  private createSoundConfig(config: PartialSoundConfig): SoundConfig {\r\n    return {\r\n      type: config.type || 'beep',\r\n      volume: Math.max(0, Math.min(1, config.volume ?? 0.3)),\r\n      pitch: Math.max(50, Math.min(4000, config.pitch ?? 440)),\r\n      duration: Math.max(0.01, Math.min(10, config.duration ?? 0.1)),\r\n      fadeOut: config.fadeOut,\r\n      haptic: config.haptic\r\n    };\r\n  }\r\n\r\n  // Helper method to safely merge sound configurations\r\n  private mergeSoundConfig(base: SoundConfig, options?: PartialSoundConfig): SoundConfig {\r\n    if (!options) return base;\r\n    \r\n    return {\r\n      type: options.type ?? base.type,\r\n      volume: options.volume !== undefined ? Math.max(0, Math.min(1, options.volume)) : base.volume,\r\n      pitch: options.pitch !== undefined ? Math.max(50, Math.min(4000, options.pitch)) : base.pitch,\r\n      duration: options.duration !== undefined ? Math.max(0.01, Math.min(10, options.duration)) : base.duration,\r\n      fadeOut: options.fadeOut ?? base.fadeOut,\r\n      haptic: options.haptic ?? base.haptic\r\n    };\r\n  }\r\n\r\n  // Main sound playing method\r\n  async playSound(_soundName: keyof typeof this.CONSOLE_SOUNDS, options?: PartialSoundConfig) {\r\n    if (!this.soundEnabled || !this.audioContext) return;\r\n\r\n    const baseSound = this.CONSOLE_SOUNDS[_soundName];\r\n    if (!baseSound) {\r\n      logger.warn(`Sound \"${String(_soundName)}\" not found in CONSOLE_SOUNDS`);\r\n      return;\r\n    }\r\n\r\n    const soundConfig = this.mergeSoundConfig(baseSound, options);\r\n    \r\n    try {\r\n      // Ensure audio context is running\r\n      if (this.audioContext.state === 'suspended') {\r\n        await this.audioContext.resume();\r\n      }\r\n\r\n      // Generate and play the sound\r\n      await this.generateSound(soundConfig);\r\n\r\n      // Trigger haptic feedback if available\r\n      if (this.hapticEnabled && soundConfig.haptic) {\r\n        this.triggerHaptic(soundConfig.haptic);\r\n      }\r\n\r\n    } catch {\r\n      logger.warn(`Failed to play console sound \"${String(_soundName)}\":`, error);\r\n    }\r\n  }\r\n\r\n  private async generateSound(config: SoundConfig): Promise<void> {\r\n    if (!this.audioContext) return;\r\n\r\n    // Ensure all config values are valid with defaults\r\n    const safeConfig: SoundConfig = {\r\n      type: config.type || 'beep',\r\n      volume: Math.max(0, Math.min(1, config.volume || 0.3)),\r\n      pitch: Math.max(50, Math.min(4000, config.pitch || 440)),\r\n      duration: Math.max(0.01, Math.min(10, config.duration || 0.1)),\r\n      fadeOut: config.fadeOut,\r\n      haptic: config.haptic\r\n    };\r\n\r\n    const oscillator = this.audioContext.createOscillator();\r\n    const gainNode = this.audioContext.createGain();\r\n    const compressor = this.audioContext.createDynamicsCompressor();\r\n\r\n    // Connect nodes\r\n    oscillator.connect(gainNode);\r\n    gainNode.connect(compressor);\r\n    compressor.connect(this.audioContext.destination);\r\n\r\n    // Configure oscillator based on sound type\r\n    switch (safeConfig.type) {\r\n      case 'beep':\r\n      case 'chirp':\r\n      case 'ding':\r\n        oscillator.type = 'sine';\r\n        break;\r\n      case 'whoosh':\r\n        oscillator.type = 'sawtooth';\r\n        break;\r\n      case 'thud':\r\n        oscillator.type = 'square';\r\n        break;\r\n      case 'alert':\r\n      case 'error':\r\n        oscillator.type = 'triangle';\r\n        break;\r\n      case 'success':\r\n        oscillator.type = 'sine';\r\n        break;\r\n      case 'ambient':\r\n        oscillator.type = 'sine';\r\n        break;\r\n      default:\r\n        oscillator.type = 'sine';\r\n    }\r\n\r\n    const now = this.audioContext.currentTime;\r\n    const volume = safeConfig.volume * this.masterVolume;\r\n\r\n    // Set frequency\r\n    oscillator.frequency.setValueAtTime(safeConfig.pitch, now);\r\n\r\n    // Configure gain envelope\r\n    gainNode.gain.setValueAtTime(0, now);\r\n    gainNode.gain.linearRampToValueAtTime(volume, now + 0.01); // Quick attack\r\n\r\n    if (safeConfig.fadeOut) {\r\n      gainNode.gain.linearRampToValueAtTime(volume * 0.8, now + safeConfig.duration * 0.7);\r\n      gainNode.gain.exponentialRampToValueAtTime(0.001, now + safeConfig.duration);\r\n    } else {\r\n      gainNode.gain.setValueAtTime(volume, now + safeConfig.duration - 0.02);\r\n      gainNode.gain.linearRampToValueAtTime(0, now + safeConfig.duration);\r\n    }\r\n\r\n    // Special effects for certain sound types\r\n    if (safeConfig.type === 'whoosh') {\r\n      oscillator.frequency.exponentialRampToValueAtTime(safeConfig.pitch * 0.5, now + safeConfig.duration);\r\n    } else if (safeConfig.type === 'alert' || safeConfig.type === 'error') {\r\n      // Oscillating frequency for alerts and errors\r\n      oscillator.frequency.setValueAtTime(safeConfig.pitch, now);\r\n      oscillator.frequency.setValueAtTime(safeConfig.pitch * 1.2, now + 0.1);\r\n      oscillator.frequency.setValueAtTime(safeConfig.pitch, now + 0.2);\r\n    } else if (safeConfig.type === 'success') {\r\n      // Rising frequency for success sounds\r\n      oscillator.frequency.exponentialRampToValueAtTime(safeConfig.pitch * 1.5, now + safeConfig.duration * 0.3);\r\n      oscillator.frequency.exponentialRampToValueAtTime(safeConfig.pitch * 1.2, now + safeConfig.duration);\r\n    }\r\n\r\n    // Start and stop\r\n    oscillator.start(_now);\r\n    oscillator.stop(now + safeConfig.duration);\r\n  }\r\n\r\n  private triggerHaptic(config: HapticConfig) {\r\n    if (!navigator.vibrate || !this.hapticEnabled || !config) return;\r\n\r\n    try {\r\n      // Ensure config has valid values with defaults\r\n      const safePattern = Array.isArray(config.pattern) ? config.pattern : [50];\r\n      const safeIntensity = config.intensity || 'medium';\r\n\r\n      // Scale intensity\r\n      const intensityMultiplier = {\r\n        light: 0.5,\r\n        medium: 1.0,\r\n        strong: 1.5\r\n      }[safeIntensity] || 1.0;\r\n\r\n      const scaledPattern = safePattern\r\n        .filter(duration => typeof duration === 'number' && duration > 0)\r\n        .map(duration => Math.round(Math.max(10, Math.min(1000, duration * intensityMultiplier))));\r\n\r\n      if (scaledPattern.length > 0) {\r\n        navigator.vibrate(_scaledPattern);\r\n      }\r\n    } catch {\r\n      logger.warn('Haptic feedback failed:');\r\n    }\r\n  }\r\n\r\n  // Convenience methods for common console interactions\r\n  onFocus() { this.playSound('focus'); }\r\n  onSelect() { this.playSound('select'); }\r\n  onBack() { this.playSound('back'); }\r\n  onHover() { this.playSound('hover'); }\r\n  onClick() { this.playSound('click'); }\r\n  onAchievement() { this.playSound('achievement'); }\r\n  onLevelUp() { this.playSound('levelUp'); }\r\n  onNotification() { this.playSound('notification'); }\r\n  onEmergency() { this.playSound('emergency'); }\r\n  onWarning() { this.playSound('warning'); }\r\n\r\n  // System sounds\r\n  async playStartup() { \r\n    await this.playSound('startup'); \r\n  }\r\n  \r\n  async playShutdown() { \r\n    await this.playSound('shutdown'); \r\n  }\r\n\r\n  // Mental health specific sounds\r\n  playBreatheIn() { this.playSound('breatheIn'); }\r\n  playBreatheOut() { this.playSound('breatheOut'); }\r\n  playMeditation() { this.playSound('meditation'); }\r\n\r\n  // Method to play a custom sound with proper validation\r\n  async playCustomSound(config: PartialSoundConfig) {\r\n    if (!this.soundEnabled || !this.audioContext) return;\r\n\r\n    const validConfig = this.createSoundConfig(config);\r\n    \r\n    try {\r\n      // Ensure audio context is running\r\n      if (this.audioContext.state === 'suspended') {\r\n        await this.audioContext.resume();\r\n      }\r\n\r\n      // Generate and play the sound\r\n      await this.generateSound(validConfig);\r\n\r\n      // Trigger haptic feedback if available\r\n      if (this.hapticEnabled && validConfig.haptic) {\r\n        this.triggerHaptic(validConfig.haptic);\r\n      }\r\n\r\n    } catch {\r\n      logger.warn('Failed to play custom sound:');\r\n    }\r\n  }\r\n\r\n  // Settings management\r\n  setSoundEnabled(enabled: boolean) {\r\n    this.soundEnabled = enabled;\r\n    localStorage.setItem('console-sound-enabled', JSON.stringify(_enabled));\r\n  }\r\n\r\n  setHapticEnabled(enabled: boolean) {\r\n    this.hapticEnabled = enabled;\r\n    localStorage.setItem('console-haptic-enabled', JSON.stringify(_enabled));\r\n  }\r\n\r\n  setMasterVolume(volume: number) {\r\n    this.masterVolume = Math.max(0, Math.min(1, volume));\r\n    localStorage.setItem('console-master-volume', this.masterVolume.toString());\r\n  }\r\n\r\n  // Getters\r\n  get isSoundEnabled() { return this.soundEnabled; }\r\n  get isHapticEnabled() { return this.hapticEnabled; }\r\n  get currentVolume() { return this.masterVolume; }\r\n\r\n  // Test sound for settings\r\n  async testSound() {\r\n    await this.playSound('select');\r\n  }\r\n\r\n  // Enhanced cleanup with performance optimizations\r\n  dispose() {\r\n    // Clear all sound queues and timers\r\n    this.soundQueue = [];\r\n    this.processingQueue = false;\r\n    \r\n    // Clear audio pools\r\n    this.audioPool.forEach((pool: AudioSource[]) => {\r\n      pool.forEach((source: AudioSource) => {\r\n        try {\r\n          source.stop();\r\n          source.disconnect();\r\n        } catch {\r\n          // Source might already be stopped\r\n        }\r\n      });\r\n    });\r\n    this.audioPool.clear();\r\n    \r\n    // Clear caches\r\n    this.soundCache.clear();\r\n    this.lastSoundTimes.clear();\r\n    \r\n    // Close audio context\r\n    if (this.audioContext) {\r\n      this.audioContext.close();\r\n    }\r\n  }\r\n  \r\n  // New performance optimization methods\r\n  private detectPerformanceMode(): void {\r\n    const memory = (navigator as unknown).deviceMemory;\r\n    const cores = navigator.hardwareConcurrency;\r\n    const connection = (navigator as unknown).connection;\r\n    \r\n    if (memory <= 4 || cores <= 2 || connection?.effectiveType === '2g') {\r\n      this.performanceMode = 'low';\r\n    } else if (memory <= 8 || cores <= 4) {\r\n      this.performanceMode = 'medium';\r\n    } else {\r\n      this.performanceMode = 'high';\r\n    }\r\n  }\r\n  \r\n  private setupAudioPool(): void {\r\n    // Pre-create audio sources for commonly used sounds\r\n    const commonSounds = ['focus', 'select', 'back', 'hover', 'click'];\r\n    \r\n    commonSounds.forEach(_soundName => {\r\n      this.audioPool.set(_soundName, []);\r\n    });\r\n  }\r\n  \r\n  private initializeLowLatencyMode(): void {\r\n    if (this.performanceMode === 'high' && this.audioContext) {\r\n      this.isLowLatencyMode = true;\r\n      this.preGenerateCommonSounds();\r\n    }\r\n  }\r\n  \r\n  private async setupAudioWorklet(): Promise<void> {\r\n    try {\r\n      // This would load a custom audio worklet for ultra-low latency\r\n      // await this.audioContext.audioWorklet.addModule('/audio-worklet.js');\r\n      logger.debug('Audio worklet would be set up here for ultra-low latency', 'ConsoleSoundSystem');\r\n    } catch {\r\n      logger.debug('Audio worklet not available', 'ConsoleSoundSystem');\r\n    }\r\n  }\r\n  \r\n  private async preGenerateCommonSounds(): Promise<void> {\r\n    const commonSounds: (keyof typeof this.CONSOLE_SOUNDS)[] = ['focus', 'select', 'back'];\r\n    \r\n    for (const _soundName of commonSounds) {\r\n      const soundConfig = this.CONSOLE_SOUNDS[_soundName];\r\n      if (soundConfig) {\r\n        try {\r\n          const __audioBuffer = await this.createAudioBuffer(soundConfig);\r\n          // Store the buffer for instant playback\r\n          this.soundCache.set(String(_soundName), soundConfig);\r\n        } catch {\r\n          logger.warn(`Failed to pre-generate sound: ${String(_soundName)}`, error);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n// @ts-expect-error - AudioBuffer is a global API\n  private async createAudioBuffer(_config: SoundConfig): Promise<AudioBuffer | null> {\r\n    if (!this.audioContext) return null;\r\n    \r\n    // This would create an AudioBuffer for instant playback\r\n    // Implementation would depend on the specific sound generation method\r\n    return null;\r\n  }\r\n  \r\n  private async playBufferedSound(_soundName: string, config: SoundConfig): Promise<void> {\r\n    // Play from pre-generated buffer for lowest latency\r\n    // Fall back to generating if buffer doesn't exist\r\n    await this.generateSound(config);\r\n  }\r\n  \r\n  private queueSound(_soundName: keyof typeof this.CONSOLE_SOUNDS, options?: PartialSoundConfig): void {\r\n    this.soundQueue.push({\r\n      _soundName,\r\n      options,\r\n      timestamp: Date.now()\r\n    });\r\n    \r\n    if (!this.processingQueue) {\r\n      this.processQueuedSounds();\r\n    }\r\n  }\r\n  \r\n  private async processQueuedSounds(): Promise<void> {\r\n    this.processingQueue = true;\r\n    \r\n    while (this.soundQueue.length > 0) {\r\n      const sound = this.soundQueue.shift();\r\n      if (!sound) break;\r\n      \r\n      // Only play sounds that are less than 100ms old\r\n      if (Date.now() - sound.timestamp < 100) {\r\n        await this.playSound(sound._soundName, sound.options);\r\n      }\r\n      \r\n      // Throttle to maintain 60fps\r\n      await new Promise(resolve => setTimeout(resolve, 16));\r\n    }\r\n    \r\n    this.processingQueue = false;\r\n  }\r\n  \r\n  private shouldTriggerHaptic(): boolean {\r\n    // Throttle haptic feedback for better performance\r\n    const lastHaptic = this.lastSoundTimes.get('haptic') || 0;\r\n    const now = Date.now();\r\n    \r\n    if (now - lastHaptic >= 100) { // Max 10 haptic events per second\r\n      this.lastSoundTimes.set('haptic', now);\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n  \r\n  // New getter methods for performance monitoring\r\n  get currentPerformanceMode(): string {\r\n    return this.performanceMode;\r\n  }\r\n  \r\n  get isLowLatencyEnabled(): boolean {\r\n    return this.isLowLatencyMode;\r\n  }\r\n  \r\n  get queueLength(): number {\r\n    return this.soundQueue.length;\r\n  }\r\n  \r\n  // Method to adjust performance mode dynamically\r\n  setPerformanceMode(mode: 'high' | 'medium' | 'low'): void {\r\n    this.performanceMode = mode;\r\n    localStorage.setItem('console-performance-mode', mode);\r\n    \r\n    if (mode === 'low') {\r\n      this.isLowLatencyMode = false;\r\n    } else if (mode === 'high') {\r\n      this.initializeLowLatencyMode();\r\n    }\r\n  }\r\n  \r\n  // Performance metrics\r\n  getPerformanceMetrics(): Record<string, any> {\r\n    return {\r\n      performanceMode: this.performanceMode,\r\n      lowLatencyMode: this.isLowLatencyMode,\r\n      queueLength: this.soundQueue.length,\r\n      cachedSounds: this.soundCache.size,\r\n      audioPoolSize: Array.from(this.audioPool.values()).reduce((total, pool) => total + pool.length, 0),\r\n      soundEnabled: this.soundEnabled,\r\n      hapticEnabled: this.hapticEnabled,\r\n      masterVolume: this.masterVolume\r\n    };\r\n  }\r\n}\r\n\r\n// Global instance\r\nexport const _consoleSoundSystem = new ConsoleSoundSystem();\r\n\r\n// React hook for easy access\r\nimport { useEffect, useRef } from 'react';\r\n\r\nexport function useConsoleSound() {\r\n  const soundSystemRef = useRef(_consoleSoundSystem);\r\n\r\n  useEffect(() => {\r\n    const __soundSystem = soundSystemRef.current;\r\n    \r\n    return () => {\r\n      // Cleanup if component unmounts\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    playSound: soundSystemRef.current.playSound.bind(soundSystemRef.current),\r\n    playCustomSound: soundSystemRef.current.playCustomSound.bind(soundSystemRef.current),\r\n    onFocus: soundSystemRef.current.onFocus.bind(soundSystemRef.current),\r\n    onSelect: soundSystemRef.current.onSelect.bind(soundSystemRef.current),\r\n    onBack: soundSystemRef.current.onBack.bind(soundSystemRef.current),\r\n    onHover: soundSystemRef.current.onHover.bind(soundSystemRef.current),\r\n    onClick: soundSystemRef.current.onClick.bind(soundSystemRef.current),\r\n    onAchievement: soundSystemRef.current.onAchievement.bind(soundSystemRef.current),\r\n    onLevelUp: soundSystemRef.current.onLevelUp.bind(soundSystemRef.current),\r\n    onNotification: soundSystemRef.current.onNotification.bind(soundSystemRef.current),\r\n    onEmergency: soundSystemRef.current.onEmergency.bind(soundSystemRef.current),\r\n    onWarning: soundSystemRef.current.onWarning.bind(soundSystemRef.current),\r\n    playBreatheIn: soundSystemRef.current.playBreatheIn.bind(soundSystemRef.current),\r\n    playBreatheOut: soundSystemRef.current.playBreatheOut.bind(soundSystemRef.current),\r\n    playMeditation: soundSystemRef.current.playMeditation.bind(soundSystemRef.current),\r\n    settings: {\r\n      setSoundEnabled: soundSystemRef.current.setSoundEnabled.bind(soundSystemRef.current),\r\n      setHapticEnabled: soundSystemRef.current.setHapticEnabled.bind(soundSystemRef.current),\r\n      setMasterVolume: soundSystemRef.current.setMasterVolume.bind(soundSystemRef.current),\r\n      isSoundEnabled: soundSystemRef.current.isSoundEnabled,\r\n      isHapticEnabled: soundSystemRef.current.isHapticEnabled,\r\n      currentVolume: soundSystemRef.current.currentVolume,\r\n      testSound: soundSystemRef.current.testSound.bind(soundSystemRef.current),\r\n    }\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\crisis\\MockCrisisServer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\crisis\\MockWebSocketAdapter.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[639,642],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[639,642],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":300,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":300,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10546,10549],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10546,10549],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":307,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":307,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10777,10780],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10777,10780],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":336,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":336,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11562,11565],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11562,11565],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Mock WebSocket Adapter - Seamlessly integrates MockCrisisServer with existing WebSocket interface\r\n// Provides realistic demo functionality without requiring backend services\r\n\r\nimport { RealtimeMessage } from '../realtime/websocketService';\r\nimport { mockCrisisServer, MockCrisisSession, MockCounselor } from './MockCrisisServer';\r\nimport { toast } from 'react-hot-toast';\r\nimport { logger } from '../../utils/logger';\r\n\r\n// Mock WebSocket Adapter that mimics the real WebSocketService interface\r\nexport class MockWebSocketAdapter {\r\n  private static instance: MockWebSocketAdapter;\r\n  private eventHandlers: Map<string, Set<(...args: any[]) => void>> = new Map();\r\n  private isConnected: boolean = false;\r\n  private currentUserId: string | null = null;\r\n  private activeSessions: Map<string, MockCrisisSession> = new Map();\r\n  private connectionSimulationTimeout: NodeJS.Timeout | null = null;\r\n\r\n  private constructor() {\r\n    this.setupMockCrisisServer();\r\n  }\r\n\r\n  public static getInstance(): MockWebSocketAdapter {\r\n    if (!MockWebSocketAdapter.instance) {\r\n      MockWebSocketAdapter.instance = new MockWebSocketAdapter();\r\n    }\r\n    return MockWebSocketAdapter.instance;\r\n  }\r\n\r\n  // Setup mock crisis server event handlers\r\n  private setupMockCrisisServer(): void {\r\n    mockCrisisServer.onEmergency((action: string, data: unknown) => {\r\n      this.handleEmergencyProtocol(action, data);\r\n    });\r\n  }\r\n\r\n  // Simulate WebSocket connection\r\n  public async connect(userId: string, _token: string): Promise<void> {\r\n    return new Promise((resolve, _reject) => {\r\n      if (this.isConnected) {\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      this.currentUserId = userId;\r\n\r\n      // Simulate connection delay\r\n      this.connectionSimulationTimeout = setTimeout(() => {\r\n        this.isConnected = true;\r\n        logger.info('Mock WebSocket connected successfully', 'MockWebSocketAdapter');\r\n        \r\n        this.emit('connection:established', { userId });\r\n        toast.success('Connected to crisis support system');\r\n        \r\n        resolve();\r\n      }, 1000 + Math.random() * 2000); // 1-3 second delay\r\n    });\r\n  }\r\n\r\n  // Simulate joining a crisis room\r\n  public async joinRoom(_roomId: string): Promise<void> {\r\n    return new Promise((resolve) => {\r\n      if (!this.isConnected) {\r\n        throw new Error('Not connected to server');\r\n      }\r\n\r\n      // Simulate join delay\r\n      setTimeout(() => {\r\n        this.emit('room:joined', _roomId);\r\n        logger.info(`Joined room: ${_roomId}`, 'MockWebSocketAdapter');\r\n        resolve();\r\n      }, 500);\r\n    });\r\n  }\r\n\r\n  // Simulate leaving a room\r\n  public leaveRoom(_roomId: string): void {\r\n    if (!this.isConnected) return;\r\n    \r\n    // End any active crisis sessions\r\n    const session = this.activeSessions.get(_roomId);\r\n    if (session) {\r\n      session.end();\r\n      this.activeSessions.delete(_roomId);\r\n    }\r\n\r\n    this.emit('room:left', _roomId);\r\n    logger.info(`Left room: ${_roomId}`, 'MockWebSocketAdapter');\r\n  }\r\n\r\n  // Create and join a crisis session\r\n  public async createCrisisSession(priority: 'low' | 'medium' | 'high' | 'critical' = 'medium'): Promise<{\r\n    _sessionId: string;\r\n    counselor: MockCounselor;\r\n  }> {\r\n    if (!this.currentUserId) {\r\n      throw new Error('User not authenticated');\r\n    }\r\n\r\n    // Create crisis session through mock server\r\n    const session = mockCrisisServer.createCrisisSession(this.currentUserId, priority);\r\n    this.activeSessions.set(session.sessionId, session);\r\n\r\n    // Setup session event handlers\r\n    session.onMessage((message: RealtimeMessage) => {\r\n      this.emit('message:new', message);\r\n    });\r\n\r\n    session.onTyping((_isTyping: boolean) => {\r\n      if (_isTyping) {\r\n        this.emit('typing:start', {\r\n          userId: session.counselor.id,\r\n          username: session.counselor.name,\r\n          _roomId: session._sessionId\r\n        });\r\n      } else {\r\n        this.emit('typing:stop', {\r\n          userId: session.counselor.id,\r\n          username: session.counselor.name,\r\n          _roomId: session._sessionId\r\n        });\r\n      }\r\n    });\r\n\r\n    session.onEmergency((action: string, data: unknown) => {\r\n      this.emit('crisis:escalated', { action, data, _sessionId: session._sessionId });\r\n    });\r\n\r\n    // Join the room\r\n    await this.joinRoom(session.sessionId);\r\n\r\n    // Simulate counselor assignment process\r\n    setTimeout(() => {\r\n      this.emit('counselor:assigned', {\r\n        id: session.counselor.id,\r\n        name: session.counselor.name,\r\n        credentials: session.counselor.credentials,\r\n        specialties: session.counselor.specialties,\r\n        responseTime: session.counselor.responseTime\r\n      });\r\n    }, 2000);\r\n\r\n    // Simulate queue position updates\r\n    this.simulateQueueUpdates(session.sessionId);\r\n\r\n    return {\r\n      _sessionId: session._sessionId,\r\n      counselor: session.counselor\r\n    };\r\n  }\r\n\r\n  // Simulate queue position updates before counselor assignment\r\n  private simulateQueueUpdates(_sessionId: string): void {\r\n    let position = Math.floor(Math.random() * 5) + 1; // 1-5 position\r\n    let estimatedWait = position * 30; // 30 seconds per position\r\n\r\n    const updateQueue = () => {\r\n      if (position > 1) {\r\n        this.emit('queue:update', {\r\n          position,\r\n          estimatedWait\r\n        });\r\n\r\n        position--;\r\n        estimatedWait = Math.max(30, estimatedWait - 30);\r\n\r\n        setTimeout(updateQueue, 2000 + Math.random() * 3000); // 2-5 seconds between updates\r\n      }\r\n    };\r\n\r\n    // Start queue simulation only if there's a queue\r\n    if (position > 1) {\r\n      setTimeout(updateQueue, 1000);\r\n    }\r\n  }\r\n\r\n  // Send message to crisis session\r\n  public sendMessage(_roomId: string, content: string, _type: 'text' | 'system' = 'text'): void {\r\n    const session = this.activeSessions.get(_roomId);\r\n    if (!session) {\r\n      logger.warn(`No active session found for room: ${_roomId}`);\r\n      return;\r\n    }\r\n\r\n    // Send message to mock crisis session\r\n    session.sendMessage(_content);\r\n  }\r\n\r\n  // Send typing indicator\r\n  public sendTypingIndicator(_roomId: string, _isTyping: boolean): void {\r\n    // Mock typing indicators are handled automatically by the crisis session\r\n    // This is a no-op in the mock implementation\r\n  }\r\n\r\n  // Handle emergency protocols\r\n  private handleEmergencyProtocol(action: string, data: unknown): void {\r\n    logger.error('🚨 EMERGENCY PROTOCOL TRIGGERED:', action, data);\r\n\r\n    switch (_action) {\r\n      case 'auto_dial_988':\r\n        this.triggerEmergencyCall('988', 'Suicide & Crisis Lifeline', data);\r\n        break;\r\n      case 'auto_dial_911':\r\n        this.triggerEmergencyCall('911', 'Emergency Services', data);\r\n        break;\r\n      case 'crisis_escalation':\r\n        this.handleCrisisEscalation(data);\r\n        break;\r\n      default:\r\n        logger.warn('Unknown emergency action:', action);\r\n    }\r\n\r\n    // Emit crisis event for UI handling\r\n    this.emit('crisis:emergency', { action, data });\r\n  }\r\n\r\n  // Trigger emergency call\r\n  private triggerEmergencyCall(number: string, service: string, data: unknown): void {\r\n    // Show immediate emergency modal\r\n    const emergencyMessage = {\r\n      id: `emergency-${Date.now()}`,\r\n      _roomId: data.sessionId || 'system',\r\n      userId: 'system',\r\n      username: 'Emergency System',\r\n      content: `🚨 EMERGENCY PROTOCOL ACTIVATED\\n\\nI'm initiating an emergency call to ${service} (${number}) based on your situation. This is for your immediate safety.\\n\\nIf you're in immediate danger, please call ${number} directly or go to your nearest emergency room.`,\r\n      timestamp: new Date(),\r\n      _type: 'crisis-alert' as const\r\n    };\r\n\r\n    this.emit('message:new', emergencyMessage);\r\n\r\n    // Simulate emergency call initiation after brief delay\r\n    setTimeout(() => {\r\n      // Show browser alert with emergency information\r\n      const _alertMessage = `🚨 EMERGENCY CALL INITIATED\\n\\nService: ${service}\\nNumber: ${number}\\n\\n⚠️ IMPORTANT: This is a demonstration system.\\nIn a real emergency, please call ${number} immediately.\\n\\nPressing OK will simulate dialing ${number}.`;\r\n      \r\n      if (confirm(_alertMessage)) {\r\n        // Actually initiate the phone call\r\n        if (typeof window !== 'undefined') {\r\n          window.location.href = `tel:${number}`;\r\n        }\r\n      }\r\n    }, 2000);\r\n\r\n    // Log emergency event\r\n    logger.error(`📞 EMERGENCY CALL: ${service} (${number}) - Session: ${data._sessionId}`);\r\n  }\r\n\r\n  // Handle crisis escalation\r\n  private handleCrisisEscalation(data: unknown): void {\r\n    const escalationMessage = {\r\n      id: `escalation-${Date.now()}`,\r\n      _roomId: data.sessionId || 'system',\r\n      userId: 'system',\r\n      username: 'Crisis Team',\r\n      content: '🆘 CRISIS ESCALATION: Your situation has been escalated to our emergency response team. A crisis specialist is being notified immediately. Please stay on the line.',\r\n      timestamp: new Date(),\r\n      _type: 'crisis-alert' as const\r\n    };\r\n\r\n    this.emit('message:new', escalationMessage);\r\n\r\n    // Simulate crisis specialist joining\r\n    setTimeout(() => {\r\n      const specialistMessage = {\r\n        id: `specialist-${Date.now()}`,\r\n        _roomId: data.sessionId || 'system',\r\n        userId: 'crisis-specialist',\r\n        username: 'Dr. Crisis Specialist',\r\n        content: 'Hello, I\\'m Dr. Martinez, a crisis intervention specialist. I\\'ve been notified of your situation and I\\'m here to help. Your safety is our absolute priority. Can you tell me your current location?',\r\n        timestamp: new Date(),\r\n        _type: 'text' as const\r\n      };\r\n\r\n      this.emit('message:new', specialistMessage);\r\n    }, 3000);\r\n  }\r\n\r\n  // Simulate connection loss and recovery\r\n  public simulateConnectionLoss(): void {\r\n    if (!this.isConnected) return;\r\n\r\n    this.isConnected = false;\r\n    this.emit('connection:lost', { reason: 'Network disruption' });\r\n    toast.error('Connection lost. Attempting to reconnect...');\r\n\r\n    // Simulate reconnection after 3-8 seconds\r\n    setTimeout(() => {\r\n      this.isConnected = true;\r\n      this.emit('connection:established', { userId: this.currentUserId });\r\n      toast.success('Connection restored');\r\n      \r\n      // Re-establish active sessions\r\n      this.activeSessions.forEach((session, _sessionId) => {\r\n        this.emit('room:joined', _sessionId);\r\n      });\r\n    }, 3000 + Math.random() * 5000);\r\n  }\r\n\r\n  // Event emitter methods\r\n  public on(event: string, handler: (...args: unknown[]) => any): void {\r\n    if (!this.eventHandlers.has(event)) {\r\n      this.eventHandlers.set(event, new Set());\r\n    }\r\n    this.eventHandlers.get(event)!.add(handler);\r\n  }\r\n\r\n  public off(event: string, handler: (...args: unknown[]) => any): void {\r\n    const handlers = this.eventHandlers.get(event);\r\n    if (handlers) {\r\n      handlers.delete(handler);\r\n    }\r\n  }\r\n\r\n  public emit(event: string, data: unknown): void {\r\n    const handlers = this.eventHandlers.get(event);\r\n    if (handlers) {\r\n      handlers.forEach(handler => {\r\n        try {\r\n          handler(data);\r\n        } catch {\r\n          logger.error(`Error in event handler for ${event}`);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Utility methods\r\n  public isConnectedToServer(): boolean {\r\n    return this.isConnected;\r\n  }\r\n\r\n  public getSocket(): unknown {\r\n    // Return a mock socket object with limited functionality\r\n    return {\r\n      connected: this.isConnected,\r\n      emit: (event: string, data: unknown, callback?: (...args: unknown[]) => any) => {\r\n        // Handle specific socket events\r\n        switch (event) {\r\n          case 'crisis:request-counselor':\r\n            this.handleCounselorRequest(data);\r\n            break;\r\n          case 'crisis:escalate':\r\n            this.handleCrisisEscalation(data);\r\n            break;\r\n          default:\r\n            logger.debug(`Mock socket emit: ${event}`, 'MockWebSocketAdapter', data);\r\n        }\r\n        \r\n        if (callback) {\r\n          setTimeout(() => callback({ success: true }), 100);\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  // Handle counselor request\r\n  private handleCounselorRequest(data: unknown): void {\r\n    logger.crisis('Crisis counselor requested', 'high', 'MockWebSocketAdapter', data);\r\n    \r\n    // This is handled automatically when creating a crisis session\r\n    // The MockCrisisServer manages counselor assignment\r\n  }\r\n\r\n  // Disconnect\r\n  public disconnect(): void {\r\n    if (this.connectionSimulationTimeout) {\r\n      clearTimeout(this.connectionSimulationTimeout);\r\n    }\r\n\r\n    // End all active sessions\r\n    this.activeSessions.forEach(session => session.end());\r\n    this.activeSessions.clear();\r\n\r\n    this.isConnected = false;\r\n    this.currentUserId = null;\r\n    this.eventHandlers.clear();\r\n    \r\n    logger.info('Mock WebSocket disconnected', 'MockWebSocketAdapter');\r\n  }\r\n\r\n  // Get current session for a room\r\n  public getSession(_roomId: string): MockCrisisSession | undefined {\r\n    return this.activeSessions.get(_roomId);\r\n  }\r\n\r\n  // Get mock server statistics\r\n  public getServerStats(): {\r\n    activeSessions: number;\r\n    availableCounselors: number;\r\n    totalCounselors: number;\r\n  } {\r\n    return mockCrisisServer.getStats();\r\n  }\r\n\r\n  // Test emergency protocols (for demo purposes)\r\n  public testEmergencyProtocol(_type: 'suicide_risk' | 'medical_emergency' | 'connection_loss'): void {\r\n    logger.crisis(`Testing emergency protocol: ${_type}`, 'critical', 'MockWebSocketAdapter');\r\n    \r\n    switch (_type) {\r\n      case 'suicide_risk':\r\n        this.handleEmergencyProtocol('auto_dial_988', {\r\n          reason: 'Test suicide risk protocol',\r\n          _sessionId: 'test-session'\r\n        });\r\n        break;\r\n      case 'medical_emergency':\r\n        this.handleEmergencyProtocol('auto_dial_911', {\r\n          reason: 'Test medical emergency protocol',\r\n          _sessionId: 'test-session'\r\n        });\r\n        break;\r\n      case 'connection_loss':\r\n        this.simulateConnectionLoss();\r\n        break;\r\n    }\r\n  }\r\n\r\n  // End call functionality for testing\r\n  public endCall(): void {\r\n    logger.info('Ending mock crisis call session', 'MockWebSocketAdapter');\r\n    \r\n    // Clear all active sessions\r\n    for (const [_sessionId, session] of this.activeSessions.entries()) {\r\n      logger.info(`Ending session: ${_sessionId}`, 'MockWebSocketAdapter');\r\n      // Emit session end event\r\n      this.emit('session:ended', {\r\n        _sessionId,\r\n        counselorId: session.counselor.id,\r\n        timestamp: new Date()\r\n      });\r\n    }\r\n    \r\n    // Clear the sessions map\r\n    this.activeSessions.clear();\r\n    \r\n    // Emit call ended event\r\n    this.emit('call:ended', {\r\n      timestamp: new Date(),\r\n      reason: 'user_ended'\r\n    });\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const __mockWebSocketAdapter = MockWebSocketAdapter.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\crisis\\OfflineCrisisResources.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\crisis\\emergencyServices.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\emergency\\GeolocationEmergencyService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\integration\\CrisisIntegrationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\integration\\DataIntegrationService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1814,1817],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1814,1817],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1982,1985],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1982,1985],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2378,2381],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2378,2381],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":593,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":593,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16694,16697],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16694,16697],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Core Data Integration Service\n * Manages data flow and synchronization between all components\n */\n\nimport { _create } from 'zustand';\nimport { _subscribeWithSelector } from 'zustand/middleware';\nimport { useWellnessStore } from '../../stores/wellnessStore';\nimport { useActivityStore } from '../../stores/activityStore';\nimport { useAccessibilityStore } from '../../stores/accessibilityStore';\nimport { WebSocketService } from '../websocket/WebSocketService';\nimport { _User } from '../api/types';\nimport { EventEmitter } from 'events';\nimport { logger } from '../../utils/logger';\n\n// Integration event types\nexport enum IntegrationEvent {\n  // Data sync events\n  STORE_SYNC_STARTED = 'store:sync:started',\n  STORE_SYNC_COMPLETED = 'store:sync:completed',\n  STORE_SYNC_FAILED = 'store:sync:failed',\n  \n  // Cross-feature events\n  MOOD_UPDATED = 'mood:updated',\n  CRISIS_TRIGGERED = 'crisis:triggered',\n  GOAL_ACHIEVED = 'goal:achieved',\n  THERAPY_SESSION_COMPLETED = 'therapy:completed',\n  MEDICATION_TAKEN = 'medication:taken',\n  COMMUNITY_INTERACTION = 'community:interaction',\n  \n  // Real-time events\n  REALTIME_CONNECTED = 'realtime:connected',\n  REALTIME_DISCONNECTED = 'realtime:disconnected',\n  REALTIME_MESSAGE = 'realtime:message',\n  \n  // System events\n  OFFLINE_MODE_ENABLED = 'offline:enabled',\n  OFFLINE_MODE_DISABLED = 'offline:disabled',\n  DATA_PERSISTED = 'data:persisted',\n  DATA_RESTORED = 'data:restored'\n}\n\n// Data flow configuration\ninterface DataFlowConfig {\n  enableRealtime: boolean;\n  enableOfflineSync: boolean;\n  syncInterval: number; // milliseconds\n  retryAttempts: number;\n  batchSize: number;\n}\n\n// Integration state\ninterface IntegrationState {\n  isConnected: boolean;\n  isSyncing: boolean;\n  lastSyncTime: Date | null;\n  syncErrors: Error[];\n  pendingChanges: Map<string, any>;\n  dataFlowConfig: DataFlowConfig;\n}\n\n// Cross-component data mapping\ninterface DataMapping {\n  source: string;\n  target: string;\n  transform?: (data: unknown) => any;\n  filter?: (data: unknown) => boolean;\n  bidirectional?: boolean;\n}\n\nclass DataIntegrationService extends EventEmitter {\n  private static instance: DataIntegrationService;\n  private wsService: WebSocketService | null = null;\n  private state: IntegrationState;\n  private dataMappings: DataMapping[] = [];\n  private syncTimer: NodeJS.Timeout | null = null;\n  private offlineQueue: Map<string, any> = new Map();\n  \n  private constructor() {\n    super();\n    \n    this.state = {\n      isConnected: false,\n      isSyncing: false,\n      lastSyncTime: null,\n      syncErrors: [],\n      pendingChanges: new Map(),\n      dataFlowConfig: {\n        enableRealtime: true,\n        enableOfflineSync: true,\n        syncInterval: 30000, // 30 seconds\n        retryAttempts: 3,\n        batchSize: 50\n      }\n    };\n    \n    this.initializeDataMappings();\n    this.setupStoreSubscriptions();\n    this.initializeWebSocket();\n    this.startPeriodicSync();\n  }\n  \n  public static getInstance(): DataIntegrationService {\n    if (!DataIntegrationService.instance) {\n      DataIntegrationService.instance = new DataIntegrationService();\n    }\n    return DataIntegrationService.instance;\n  }\n  \n  /**\n   * Initialize data mappings between components\n   */\n  private initializeDataMappings() {\n    this.dataMappings = [\n      // Mood to Crisis mapping\n      {\n        source: 'wellness.mood',\n        target: 'crisis.riskAssessment',\n        transform: (moodData) => ({\n          riskLevel: this.calculateRiskFromMood(moodData),\n          timestamp: new Date(),\n          factors: moodData.triggers || []\n        }),\n        filter: (moodData) => moodData.moodScore <= 3\n      },\n      \n      // Activity to Wellness mapping\n      {\n        source: 'activity.completed',\n        target: 'wellness.metrics',\n        transform: (activity) => ({\n          activityType: activity.type,\n          moodImpact: activity.actualMoodImpact,\n          completedAt: activity.completedAt\n        }),\n        bidirectional: false\n      },\n      \n      // Therapy to Goals mapping\n      {\n        source: 'therapy.homework',\n        target: 'activity.tasks',\n        transform: (homework) => ({\n          title: homework.title,\n          type: 'therapy',\n          therapyHomework: true,\n          linkedGoalId: homework.goalId\n        }),\n        bidirectional: true\n      },\n      \n      // Community to Wellness mapping\n      {\n        source: 'community.interaction',\n        target: 'wellness.socialMetrics',\n        transform: (interaction) => ({\n          type: interaction.type,\n          timestamp: interaction.timestamp,\n          positiveImpact: interaction.sentiment > 0\n        })\n      },\n      \n      // Crisis to Professional Care mapping\n      {\n        source: 'crisis.event',\n        target: 'professional.alerts',\n        transform: (crisisEvent) => ({\n          severity: crisisEvent.severity,\n          timestamp: crisisEvent.timestamp,\n          requiresImmediate: crisisEvent.severity === 'critical'\n        }),\n        filter: (crisisEvent) => crisisEvent.severity !== 'low'\n      }\n    ];\n  }\n  \n  /**\n   * Setup store subscriptions for data flow\n   */\n  private setupStoreSubscriptions() {\n    // Subscribe to wellness store changes\n    useWellnessStore.subscribe((state) => {\n      if (state.moodEntries.length > 0) {\n        this.handleDataChange('wellness.mood', state.moodEntries[state.moodEntries.length - 1]);\n      }\n    });\n    \n    // Subscribe to activity store changes\n    useActivityStore.subscribe((state) => {\n      const completed = state.activities.filter((a: unknown) => a.completed && !a.synced);\n      completed.forEach((activity: unknown) => {\n        this.handleDataChange('activity.completed', activity);\n      });\n    });\n    \n    // Subscribe to accessibility store for user preferences\n    useAccessibilityStore.subscribe((state) => {\n      this.updateDataFlowConfig({\n        enableRealtime: !state.settings.reducedMotion\n      });\n    });\n  }\n  \n  /**\n   * Initialize WebSocket connection for real-time features\n   */\n  private async initializeWebSocket() {\n    if (!this.state.dataFlowConfig.enableRealtime) return;\n    \n    try {\n      this.wsService = WebSocketService.getInstance();\n      this.wsService.connect('', { \n        id: 'anonymous',\n        email: 'anonymous@example.com',\n        username: 'anonymous',\n        role: 'patient',\n        profile: {\n          firstName: 'Anonymous',\n          lastName: '_User',\n          timezone: 'UTC'\n        },\n        preferences: {\n          theme: 'auto',\n          notifications: {\n            email: false,\n            push: false,\n            sms: false,\n            crisisAlerts: true,\n            appointmentReminders: false,\n            medicationReminders: false,\n            communityUpdates: false\n          },\n          privacy: {\n            profileVisibility: 'private',\n            shareDataWithTherapist: false,\n            anonymousMode: true,\n            allowResearch: false\n          },\n          accessibility: {\n            fontSize: 'medium',\n            highContrast: false,\n            screenReaderMode: false,\n            reducedMotion: false\n          }\n        },\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        lastActive: new Date(),\n        isVerified: false,\n        twoFactorEnabled: false\n      });\n      \n      // Setup WebSocket event listeners\n      this.wsService.on('connect', () => {\n        this.state.isConnected = true;\n        this.emit(IntegrationEvent.REALTIME_CONNECTED);\n        this.syncOfflineQueue();\n      });\n      \n      this.wsService.on('disconnect', () => {\n        this.state.isConnected = false;\n        this.emit(IntegrationEvent.REALTIME_DISCONNECTED);\n      });\n      \n      // Handle real-time data updates\n      this.wsService.on('data:update', (data: unknown) => {\n        this.handleRealtimeUpdate(data);\n      });\n      \n      // Handle crisis events\n      this.wsService.on('crisis:alert', (_alert: unknown) => {\n        this.handleCrisisAlert(_alert);\n      });\n      \n      // Handle community updates\n      this.wsService.on('community:update', (update: unknown) => {\n        this.handleCommunityUpdate(update);\n      });\n      \n    } catch {\n      logger.error('Failed to initialize WebSocket:');\n      this.state.syncErrors.push(error as Error);\n    }\n  }\n  \n  /**\n   * Handle data changes from stores\n   */\n  private handleDataChange(source: string, data: unknown) {\n    if (!data) return;\n    \n    // Find relevant mappings\n    const mappings = this.dataMappings.filter(m => m.source === source);\n    \n    mappings.forEach(mapping => {\n      // Apply filter if exists\n      if (mapping.filter && !mapping.filter(data)) return;\n      \n      // Transform data if needed\n      const transformedData = mapping.transform ? mapping.transform(data) : data;\n      \n      // Route to target\n      this.routeDataToTarget(mapping.target, transformedData);\n      \n      // Handle bidirectional sync\n      if (mapping.bidirectional) {\n        this.syncBidirectional(mapping, transformedData);\n      }\n    });\n    \n    // Queue for persistence\n    this.queueForPersistence(source, data);\n    \n    // Emit integration event\n    this.emitDataChangeEvent(source, data);\n  }\n  \n  /**\n   * Route data to target component/store\n   */\n  private routeDataToTarget(target: string, data: unknown) {\n    const [store, property] = target.split('.');\n    \n    if (!property) {\n      logger.warn('Invalid target format:', target);\n      return;\n    }\n    \n    switch (_store) {\n      case 'wellness':\n        this.updateWellnessStore(property, data);\n        break;\n      case 'activity':\n        this.updateActivityStore(property, data);\n        break;\n      case 'crisis':\n        this.updateCrisisData(property, data);\n        break;\n      case 'professional':\n        this.updateProfessionalData(property, data);\n        break;\n      case 'community':\n        this.updateCommunityData(property, data);\n        break;\n      default:\n        logger.warn(`Unknown target store: ${store}`);\n    }\n  }\n  \n  /**\n   * Update wellness store with integrated data\n   */\n  private updateWellnessStore(property: string, data: unknown) {\n    const store = useWellnessStore.getState();\n    \n    switch (_property) {\n      case 'metrics':\n        store.addWellnessMetric(data);\n        break;\n      case 'mood':\n        store.addMoodEntry(data);\n        break;\n      case 'insights':\n        // Insights are generated, not directly added\n        store.generateInsights();\n        break;\n    }\n  }\n  \n  /**\n   * Update activity store with integrated data\n   */\n  private updateActivityStore(property: string, data: unknown) {\n    const store = useActivityStore.getState();\n    \n    switch (_property) {\n      case 'tasks':\n        store.addActivity(data);\n        break;\n      case 'goals':\n        if (data.id) {\n          store.updateGoal(data.id, data);\n        } else {\n          store.addGoal(data);\n        }\n        break;\n    }\n  }\n  \n  /**\n   * Update crisis data\n   */\n  private updateCrisisData(property: string, data: unknown) {\n    // Send to crisis service/store\n    if (this.wsService && this.state.isConnected) {\n      this.wsService.emit('crisis:update', { property, data });\n    } else {\n      this.offlineQueue.set(`crisis:${property}`, data);\n    }\n  }\n  \n  /**\n   * Update professional care data\n   */\n  private updateProfessionalData(property: string, data: unknown) {\n    // Send to professional care service\n    if (this.wsService && this.state.isConnected) {\n      this.wsService.emit('professional:update', { property, data });\n    } else {\n      this.offlineQueue.set(`professional:${property}`, data);\n    }\n  }\n  \n  /**\n   * Update community data\n   */\n  private updateCommunityData(property: string, data: unknown) {\n    // Send to community service\n    if (this.wsService && this.state.isConnected) {\n      this.wsService.emit('community:update', { property, data });\n    } else {\n      this.offlineQueue.set(`community:${property}`, data);\n    }\n  }\n  \n  /**\n   * Handle real-time updates from WebSocket\n   */\n  private handleRealtimeUpdate(update: unknown) {\n    const { source, data, timestamp } = update;\n    \n    // Check if update is newer than local data\n    if (this.isNewerData(source, timestamp)) {\n      this.handleDataChange(source, data);\n    }\n    \n    this.emit(IntegrationEvent.REALTIME_MESSAGE, update);\n  }\n  \n  /**\n   * Handle crisis alerts\n   */\n  private handleCrisisAlert(_alert: unknown) {\n    // Immediate routing to crisis components\n    this.emit(IntegrationEvent.CRISIS_TRIGGERED, _alert);\n    \n    // Update relevant stores\n    this.routeDataToTarget('crisis._alert', _alert);\n    this.routeDataToTarget('wellness.crisisEvent', _alert);\n    \n    // Notify professional care if needed\n    if (_alert.severity === 'critical') {\n      this.routeDataToTarget('professional.emergencyAlert', _alert);\n    }\n  }\n  \n  /**\n   * Handle community updates\n   */\n  private handleCommunityUpdate(update: unknown) {\n    this.emit(IntegrationEvent.COMMUNITY_INTERACTION, update);\n    this.routeDataToTarget('community.update', update);\n  }\n  \n  /**\n   * Calculate risk level from mood data\n   */\n  private calculateRiskFromMood(moodData: unknown): string {\n    if (!moodData) return 'unknown';\n    \n    const { moodScore, triggers, stressLevel, anxietyLevel } = moodData;\n    \n    // Simple risk calculation (should be enhanced with ML model)\n    let riskScore = 0;\n    \n    if (moodScore <= 2) riskScore += 3;\n    else if (moodScore <= 3) riskScore += 2;\n    else if (moodScore <= 4) riskScore += 1;\n    \n    if (stressLevel >= 8) riskScore += 2;\n    else if (stressLevel >= 6) riskScore += 1;\n    \n    if (anxietyLevel >= 8) riskScore += 2;\n    else if (anxietyLevel >= 6) riskScore += 1;\n    \n    if (triggers?.includes('suicidal_thoughts')) riskScore += 5;\n    if (triggers?.includes('self_harm')) riskScore += 4;\n    \n    if (riskScore >= 7) return 'critical';\n    if (riskScore >= 5) return 'high';\n    if (riskScore >= 3) return 'medium';\n    return 'low';\n  }\n  \n  /**\n   * Queue data for persistence\n   */\n  private queueForPersistence(source: string, data: unknown) {\n    this.state.pendingChanges.set(source, {\n      data,\n      timestamp: new Date(),\n      synced: false\n    });\n  }\n  \n  /**\n   * Sync bidirectional data\n   */\n  private syncBidirectional(mapping: DataMapping, data: unknown) {\n    // Implement bidirectional sync logic\n    const __reverseMapping = {\n      source: mapping.target,\n      target: mapping.source,\n      transform: mapping.transform // May need reverse transform\n    };\n    \n    // Add to sync queue\n    this.queueForPersistence(`sync:${mapping.target}`, data);\n  }\n  \n  /**\n   * Check if update is newer than local data\n   */\n  private isNewerData(source: string, timestamp: Date): boolean {\n    const lastUpdate = this.state.pendingChanges.get(_source);\n    if (!lastUpdate) return true;\n    \n    return timestamp > lastUpdate.timestamp;\n  }\n  \n  /**\n   * Emit data change event\n   */\n  private emitDataChangeEvent(source: string, data: unknown) {\n    const eventMap: Record<string, IntegrationEvent> = {\n      'wellness.mood': IntegrationEvent.MOOD_UPDATED,\n      'activity.completed': IntegrationEvent.GOAL_ACHIEVED,\n      'therapy.session': IntegrationEvent.THERAPY_SESSION_COMPLETED,\n      'medication.taken': IntegrationEvent.MEDICATION_TAKEN,\n      'community.interaction': IntegrationEvent.COMMUNITY_INTERACTION\n    };\n    \n    const event = eventMap[source];\n    if (_event) {\n      this.emit(event, data);\n    }\n  }\n  \n  /**\n   * Start periodic sync\n   */\n  private startPeriodicSync() {\n    if (!this.state.dataFlowConfig.enableOfflineSync) return;\n    \n    this.syncTimer = setInterval(() => {\n      this.syncPendingChanges();\n    }, this.state.dataFlowConfig.syncInterval);\n  }\n  \n  /**\n   * Sync pending changes\n   */\n  private async syncPendingChanges() {\n    if (this.state.isSyncing) return;\n    \n    this.state.isSyncing = true;\n    this.emit(IntegrationEvent.STORE_SYNC_STARTED);\n    \n    try {\n      const changes = Array.from(this.state.pendingChanges.entries());\n      const batches = this.createBatches(changes, this.state.dataFlowConfig.batchSize);\n      \n      for (const _batch of batches) {\n        await this.syncBatch(_batch);\n      }\n      \n      this.state.lastSyncTime = new Date();\n      this.emit(IntegrationEvent.STORE_SYNC_COMPLETED);\n      \n    } catch {\n      logger.error('Sync failed:');\n      this.state.syncErrors.push(error as Error);\n      this.emit(IntegrationEvent.STORE_SYNC_FAILED, undefined);\n      \n    } finally {\n      this.state.isSyncing = false;\n    }\n  }\n  \n  /**\n   * Sync a batch of changes\n   */\n  private async syncBatch(_batch: [string, any][]): Promise<void> {\n    // Implement _batch sync logic\n    // This would typically make an API call to sync data\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        _batch.forEach(([key]) => {\n          this.state.pendingChanges.delete(key);\n        });\n        resolve();\n      }, 100);\n    });\n  }\n  \n  /**\n   * Create batches from changes\n   */\n  private createBatches<T>(items: T[], batchSize: number): T[][] {\n    const batches: T[][] = [];\n    for (let i = 0; i < items.length; i += batchSize) {\n      batches.push(items.slice(i, i + batchSize));\n    }\n    return batches;\n  }\n  \n  /**\n   * Sync offline queue when reconnected\n   */\n  private async syncOfflineQueue() {\n    if (this.offlineQueue.size === 0) return;\n    \n    const entries = Array.from(this.offlineQueue.entries());\n    \n    for (const [key, data] of entries) {\n      try {\n        const [store, property] = key.split(':');\n        this.routeDataToTarget(`${store}.${property}`, data);\n        this.offlineQueue.delete(key);\n      } catch {\n        logger.error(`Failed to sync offline item ${key}:`, error);\n      }\n    }\n  }\n  \n  /**\n   * Update data flow configuration\n   */\n  public updateDataFlowConfig(config: Partial<DataFlowConfig>) {\n    this.state.dataFlowConfig = {\n      ...this.state.dataFlowConfig,\n      ...config\n    };\n    \n    // Restart services if needed\n    if (config.syncInterval !== undefined) {\n      if (this.syncTimer) clearInterval(this.syncTimer);\n      this.startPeriodicSync();\n    }\n    \n    if (config.enableRealtime !== undefined) {\n      if (config.enableRealtime && !this.wsService) {\n        this.initializeWebSocket();\n      } else if (!config.enableRealtime && this.wsService) {\n        this.wsService.disconnect();\n        this.wsService = null;\n      }\n    }\n  }\n  \n  /**\n   * Get integration state\n   */\n  public getState(): IntegrationState {\n    return { ...this.state };\n  }\n  \n  /**\n   * Force sync all data\n   */\n  public async forceSync(): Promise<void> {\n    await this.syncPendingChanges();\n  }\n  \n  /**\n   * Clear sync errors\n   */\n  public clearErrors() {\n    this.state.syncErrors = [];\n  }\n  \n  /**\n   * Cleanup and disconnect\n   */\n  public cleanup() {\n    if (this.syncTimer) {\n      clearInterval(this.syncTimer);\n    }\n    \n    if (this.wsService) {\n      this.wsService.disconnect();\n    }\n    \n    this.removeAllListeners();\n  }\n}\n\n// Export singleton instance\nexport const __dataIntegrationService = DataIntegrationService.getInstance();\n\n// Export hook for React components\nexport function useDataIntegration() {\n  const service = DataIntegrationService.getInstance();\n  \n  return {\n    forceSync: () => service.forceSync(),\n    getState: () => service.getState(),\n    updateConfig: (config: Partial<DataFlowConfig>) => service.updateDataFlowConfig(config),\n    clearErrors: () => service.clearErrors(),\n    on: (event: IntegrationEvent, callback: (...args: unknown[]) => void) => {\n      service.on(event, callback);\n      return () => service.off(event, callback);\n    }\n  };\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\integration\\RealtimeSyncService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1809,1812],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1809,1812],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Real-time Synchronization Service\n * Manages WebSocket connections and real-time data updates across components\n */\n\nimport { io, Socket } from 'socket.io-client';\nimport { EventEmitter } from 'events';\nimport { useWellnessStore } from '../../stores/wellnessStore';\nimport { useActivityStore } from '../../stores/activityStore';\nimport { logger } from '../../utils/logger';\n\n// Real-time event types\nexport enum RealtimeEvent {\n  // Connection events\n  CONNECTED = 'connected',\n  DISCONNECTED = 'disconnected',\n  RECONNECTING = 'reconnecting',\n  ERROR = 'error',\n  \n  // Crisis events\n  CRISIS_ALERT_RECEIVED = 'crisis:alert:received',\n  CRISIS_SUPPORT_CONNECTED = 'crisis:support:connected',\n  CRISIS_MESSAGE_RECEIVED = 'crisis:message:received',\n  CRISIS_STATUS_UPDATED = 'crisis:status:updated',\n  \n  // Community events\n  COMMUNITY_POST_CREATED = 'community:post:created',\n  COMMUNITY_COMMENT_ADDED = 'community:comment:added',\n  COMMUNITY_USER_JOINED = 'community:user:joined',\n  COMMUNITY_USER_LEFT = 'community:user:left',\n  COMMUNITY_TYPING = 'community:typing',\n  \n  // Professional care events\n  THERAPIST_AVAILABLE = 'therapist:available',\n  APPOINTMENT_REMINDER = 'appointment:reminder',\n  PRESCRIPTION_UPDATE = 'prescription:update',\n  CARE_TEAM_MESSAGE = 'care:team:message',\n  \n  // Wellness tracking events\n  MOOD_CHECK_REMINDER = 'mood:check:reminder',\n  GOAL_MILESTONE_REACHED = 'goal:milestone:reached',\n  WELLNESS_INSIGHT = 'wellness:insight',\n  \n  // Notification events\n  NOTIFICATION_RECEIVED = 'notification:received',\n  NOTIFICATION_READ = 'notification:read',\n  NOTIFICATION_CLEARED = 'notification:cleared'\n}\n\n// Message types\ninterface RealtimeMessage {\n  _id: string;\n  _type: string;\n  _payload: unknown;\n  timestamp: Date;\n  _userId?: string;\n  metadata?: Record<string, any>;\n}\n\n// Subscription configuration\ninterface SubscriptionConfig {\n  channel: string;\n  events: string[];\n  handler: (data: unknown) => void;\n  filter?: (data: unknown) => boolean;\n}\n\n// Connection configuration\ninterface ConnectionConfig {\n  url: string;\n  reconnection: boolean;\n  reconnectionAttempts: number;\n  reconnectionDelay: number;\n  _timeout: number;\n  _auth?: {\n    token: string;\n    _userId: string;\n  };\n}\n\n// Presence information\ninterface UserPresence {\n  _userId: string;\n  status: 'online' | 'away' | 'busy' | 'offline';\n  lastSeen: Date;\n  location?: string;\n  activity?: string;\n}\n\nclass RealtimeSyncService extends EventEmitter {\n  private static instance: RealtimeSyncService;\n  private socket: Socket | null = null;\n  private config: ConnectionConfig;\n  private subscriptions: Map<string, SubscriptionConfig> = new Map();\n  private messageQueue: RealtimeMessage[] = [];\n  private _presence: Map<string, UserPresence> = new Map();\n  private reconnectAttempts = 0;\n  private isConnected = false;\n  private heartbeatInterval: NodeJS.Timeout | null = null;\n  \n  private constructor() {\n    super();\n    \n    this.config = {\n      url: import.meta.env.VITE_WS_URL || 'ws://localhost:3002',\n      reconnection: true,\n      reconnectionAttempts: 10,\n      reconnectionDelay: 1000,\n      _timeout: 20000\n    };\n    \n    this.setupDefaultSubscriptions();\n  }\n  \n  public static getInstance(): RealtimeSyncService {\n    if (!RealtimeSyncService.instance) {\n      RealtimeSyncService.instance = new RealtimeSyncService();\n    }\n    return RealtimeSyncService.instance;\n  }\n  \n  /**\n   * Connect to WebSocket server\n   */\n  public async connect(_auth?: { token: string; _userId: string }): Promise<void> {\n    if (this.isConnected) return;\n    \n    return new Promise((resolve, reject) => {\n      try {\n        this.config._auth = _auth;\n        \n        this.socket = io(this.config.url, {\n          reconnection: this.config.reconnection,\n          reconnectionAttempts: this.config.reconnectionAttempts,\n          reconnectionDelay: this.config.reconnectionDelay,\n          _timeout: this.config._timeout,\n          _auth: _auth || {}\n        });\n        \n        this.setupSocketListeners();\n        \n        // Set connection timeout\n        const _timeout = setTimeout(() => {\n          reject(new Error('Connection _timeout'));\n        }, this.config.timeout);\n        \n        this.socket.once('connect', () => {\n          clearTimeout(_timeout);\n          this.isConnected = true;\n          this.reconnectAttempts = 0;\n          this.emit(RealtimeEvent.CONNECTED);\n          this.startHeartbeat();\n          this.flushMessageQueue();\n          resolve();\n        });\n        \n        this.socket.once('connect_error', (error: unknown) => {\n          clearTimeout(_timeout);\n          this.emit(RealtimeEvent.ERROR, error);\n          reject(_error);\n        });\n        \n      } catch (_error) {\n        reject(_error);\n      }\n    });\n  }\n  \n  /**\n   * Setup default subscriptions\n   */\n  private setupDefaultSubscriptions() {\n    // Crisis channel subscription\n    this.subscribe({\n      channel: 'crisis',\n      events: ['alert', 'support_connected', 'message', 'status_update'],\n      handler: (_data) => this.handleCrisisUpdate(data)\n    });\n    \n    // Community channel subscription\n    this.subscribe({\n      channel: 'community',\n      events: ['post_created', 'comment_added', 'user_joined', 'user_left', 'typing'],\n      handler: (_data) => this.handleCommunityUpdate(data)\n    });\n    \n    // Professional care channel subscription\n    this.subscribe({\n      channel: 'professional',\n      events: ['therapist_available', 'appointment_reminder', 'prescription_update', 'care_team_message'],\n      handler: (_data) => this.handleProfessionalUpdate(data)\n    });\n    \n    // Wellness channel subscription\n    this.subscribe({\n      channel: 'wellness',\n      events: ['mood_check_reminder', 'goal_milestone', 'insight'],\n      handler: (_data) => this.handleWellnessUpdate(data)\n    });\n    \n    // Notifications channel subscription\n    this.subscribe({\n      channel: 'notifications',\n      events: ['received', 'read', 'cleared'],\n      handler: (_data) => this.handleNotificationUpdate(data)\n    });\n  }\n  \n  /**\n   * Setup socket event listeners\n   */\n  private setupSocketListeners() {\n    if (!this.socket) return;\n    \n    // Connection events\n    this.socket.on('disconnect', () => {\n      this.isConnected = false;\n      this.stopHeartbeat();\n      this.emit(RealtimeEvent.DISCONNECTED);\n    });\n    \n    this.socket.on('reconnect', (attempt: number) => {\n      this.reconnectAttempts = attempt;\n      this.isConnected = true;\n      this.emit(RealtimeEvent.RECONNECTING, attempt);\n      this.startHeartbeat();\n      this.flushMessageQueue();\n    });\n    \n    this.socket.on('error', (error: Error) => {\n      this.emit(RealtimeEvent.ERROR, error);\n    });\n    \n    // Message handling\n    this.socket.on('message', (message: RealtimeMessage) => {\n      this.handleMessage(message);\n    });\n    \n    // Presence updates\n    this.socket.on('presence:update', (_presence: UserPresence) => {\n      this.updatePresence(_presence);\n    });\n    \n    // Subscribe to configured channels\n    this.subscriptions.forEach((_config, _key) => {\n      config.events.forEach(event => {\n        const _eventName = `${config.channel}:${event}`;\n        this.socket!.on(_eventName, (data: unknown) => {\n          if (!config.filter || config.filter(data)) {\n            config.handler(data);\n          }\n        });\n      });\n    });\n  }\n  \n  /**\n   * Handle incoming messages\n   */\n  private handleMessage(message: RealtimeMessage) {\n    // Process message based on _type\n    switch (message._type) {\n      case 'crisis':\n        this.handleCrisisMessage(message);\n        break;\n      case 'community':\n        this.handleCommunityMessage(message);\n        break;\n      case 'professional':\n        this.handleProfessionalMessage(message);\n        break;\n      case 'wellness':\n        this.handleWellnessMessage(message);\n        break;\n      case 'notification':\n        this.handleNotificationMessage(message);\n        break;\n      default:\n        logger.warn('Unknown message _type:', message._type);\n    }\n    \n    // Emit generic message event\n    this.emit('message', message);\n  }\n  \n  /**\n   * Handle crisis updates\n   */\n  private handleCrisisUpdate(data: unknown) {\n    const { _type, _payload } = data;\n    \n    switch (_type) {\n      case 'alert':\n        this.emit(RealtimeEvent.CRISIS_ALERT_RECEIVED, _payload);\n        // Update wellness store with crisis event\n        useWellnessStore.getState().recordCrisisEvent(_payload);\n        break;\n        \n      case 'support_connected':\n        this.emit(RealtimeEvent.CRISIS_SUPPORT_CONNECTED, _payload);\n        break;\n        \n      case 'message':\n        this.emit(RealtimeEvent.CRISIS_MESSAGE_RECEIVED, _payload);\n        break;\n        \n      case 'status_update':\n        this.emit(RealtimeEvent.CRISIS_STATUS_UPDATED, _payload);\n        break;\n    }\n  }\n  \n  /**\n   * Handle community updates\n   */\n  private handleCommunityUpdate(data: unknown) {\n    const { _type, _payload } = data;\n    \n    switch (_type) {\n      case 'post_created':\n        this.emit(RealtimeEvent.COMMUNITY_POST_CREATED, _payload);\n        break;\n        \n      case 'comment_added':\n        this.emit(RealtimeEvent.COMMUNITY_COMMENT_ADDED, _payload);\n        break;\n        \n      case 'user_joined':\n        this.emit(RealtimeEvent.COMMUNITY_USER_JOINED, _payload);\n        this.updatePresence({\n          _userId: _payload._userId,\n          status: 'online',\n          lastSeen: new Date()\n        });\n        break;\n        \n      case 'user_left':\n        this.emit(RealtimeEvent.COMMUNITY_USER_LEFT, _payload);\n        this.updatePresence({\n          _userId: _payload._userId,\n          status: 'offline',\n          lastSeen: new Date()\n        });\n        break;\n        \n      case 'typing':\n        this.emit(RealtimeEvent.COMMUNITY_TYPING, _payload);\n        break;\n    }\n  }\n  \n  /**\n   * Handle professional care updates\n   */\n  private handleProfessionalUpdate(data: unknown) {\n    const { _type, _payload } = data;\n    \n    switch (_type) {\n      case 'therapist_available':\n        this.emit(RealtimeEvent.THERAPIST_AVAILABLE, _payload);\n        break;\n        \n      case 'appointment_reminder':\n        this.emit(RealtimeEvent.APPOINTMENT_REMINDER, _payload);\n        // Update activity store with appointment reminder\n        useActivityStore.getState().addActivity({\n          title: _payload.title,\n          _type: 'appointment',\n          category: 'professional',\n          scheduledTime: new Date(_payload.time),\n          completed: false\n        });\n        break;\n        \n      case 'prescription_update':\n        this.emit(RealtimeEvent.PRESCRIPTION_UPDATE, _payload);\n        break;\n        \n      case 'care_team_message':\n        this.emit(RealtimeEvent.CARE_TEAM_MESSAGE, _payload);\n        break;\n    }\n  }\n  \n  /**\n   * Handle wellness updates\n   */\n  private handleWellnessUpdate(data: unknown) {\n    const { _type, _payload } = data;\n    \n    switch (_type) {\n      case 'mood_check_reminder':\n        this.emit(RealtimeEvent.MOOD_CHECK_REMINDER, _payload);\n        break;\n        \n      case 'goal_milestone':\n        this.emit(RealtimeEvent.GOAL_MILESTONE_REACHED, _payload);\n        // Update activity store with milestone\n        useActivityStore.getState().updateGoalProgress(\n          _payload.goalId,\n          _payload.progress\n        );\n        break;\n        \n      case 'insight':\n        this.emit(RealtimeEvent.WELLNESS_INSIGHT, _payload);\n        // Regenerate insights in wellness store\n        useWellnessStore.getState().generateInsights();\n        break;\n    }\n  }\n  \n  /**\n   * Handle notification updates\n   */\n  private handleNotificationUpdate(data: unknown) {\n    const { _type, _payload } = data;\n    \n    switch (_type) {\n      case 'received':\n        this.emit(RealtimeEvent.NOTIFICATION_RECEIVED, _payload);\n        break;\n        \n      case 'read':\n        this.emit(RealtimeEvent.NOTIFICATION_READ, _payload);\n        break;\n        \n      case 'cleared':\n        this.emit(RealtimeEvent.NOTIFICATION_CLEARED, _payload);\n        break;\n    }\n  }\n  \n  /**\n   * Handle crisis messages\n   */\n  private handleCrisisMessage(message: RealtimeMessage) {\n    this.emit(RealtimeEvent.CRISIS_MESSAGE_RECEIVED, message._payload);\n  }\n  \n  /**\n   * Handle community messages\n   */\n  private handleCommunityMessage(message: RealtimeMessage) {\n    // Process community messages\n    this.emit('community:message', message._payload);\n  }\n  \n  /**\n   * Handle professional messages\n   */\n  private handleProfessionalMessage(message: RealtimeMessage) {\n    this.emit('professional:message', message._payload);\n  }\n  \n  /**\n   * Handle wellness messages\n   */\n  private handleWellnessMessage(message: RealtimeMessage) {\n    this.emit('wellness:message', message._payload);\n  }\n  \n  /**\n   * Handle notification messages\n   */\n  private handleNotificationMessage(message: RealtimeMessage) {\n    this.emit(RealtimeEvent.NOTIFICATION_RECEIVED, message._payload);\n  }\n  \n  /**\n   * Update user presence\n   */\n  private updatePresence(_presence: UserPresence) {\n    this._presence.set(_presence._userId, _presence);\n    this.emit('_presence:updated', _presence);\n  }\n  \n  /**\n   * Subscribe to a channel\n   */\n  public subscribe(config: SubscriptionConfig): string {\n    const subscriptionId = `${config.channel}-${Date.now()}`;\n    this.subscriptions.set(subscriptionId, config);\n    \n    // If already connected, setup listener immediately\n    if (this.socket && this.isConnected) {\n      config.events.forEach(event => {\n        const _eventName = `${config.channel}:${event}`;\n        this.socket!.on(_eventName, (data: unknown) => {\n          if (!config.filter || config.filter(data)) {\n            config.handler(data);\n          }\n        });\n      });\n      \n      // Join channel\n      this.socket.emit('subscribe', config.channel);\n    }\n    \n    return subscriptionId;\n  }\n  \n  /**\n   * Unsubscribe from a channel\n   */\n  public unsubscribe(subscriptionId: string) {\n    const config = this.subscriptions.get(subscriptionId);\n    if (!config) return;\n    \n    // Remove listeners if connected\n    if (this.socket) {\n      config.events.forEach(event => {\n        const _eventName = `${config.channel}:${event}`;\n        this.socket!.off(_eventName);\n      });\n      \n      // Leave channel if no other subscriptions\n      const hasOtherSubs = Array.from(this.subscriptions.values())\n        .some(sub => sub.channel === config.channel && sub !== config);\n        \n      if (!hasOtherSubs) {\n        this.socket.emit('unsubscribe', config.channel);\n      }\n    }\n    \n    this.subscriptions.delete(subscriptionId);\n  }\n  \n  /**\n   * Send a message\n   */\n  public send(channel: string, event: string, data: unknown): void {\n    const message: RealtimeMessage = {\n      _id: `msg-${Date.now()}-${Math.random()}`,\n      _type: channel,\n      _payload: data,\n      timestamp: new Date(),\n      _userId: this.config.auth?.userId,\n      metadata: { event }\n    };\n    \n    if (this.socket && this.isConnected) {\n      this.socket.emit(`${channel}:${event}`, message);\n    } else {\n      // Queue message for later delivery\n      this.messageQueue.push(message);\n    }\n  }\n  \n  /**\n   * Flush message queue\n   */\n  private flushMessageQueue() {\n    if (!this.socket || !this.isConnected) return;\n    \n    while (this.messageQueue.length > 0) {\n      const message = this.messageQueue.shift();\n      if (message) {\n        const { _type, metadata, _payload } = message;\n        this.socket.emit(`${_type}:${metadata?.event}`, message);\n      }\n    }\n  }\n  \n  /**\n   * Start heartbeat\n   */\n  private startHeartbeat() {\n    this.stopHeartbeat();\n    \n    this.heartbeatInterval = setInterval(() => {\n      if (this.socket && this.isConnected) {\n        this.socket.emit('heartbeat', { timestamp: Date.now() });\n      }\n    }, 30000); // Every 30 seconds\n  }\n  \n  /**\n   * Stop heartbeat\n   */\n  private stopHeartbeat() {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n      this.heartbeatInterval = null;\n    }\n  }\n  \n  /**\n   * Get user presence\n   */\n  public getPresence(_userId: string): UserPresence | undefined {\n    return this._presence.get(_userId);\n  }\n  \n  /**\n   * Get all online users\n   */\n  public getOnlineUsers(): UserPresence[] {\n    return Array.from(this._presence.values())\n      .filter(p => p.status === 'online');\n  }\n  \n  /**\n   * Update own presence\n   */\n  public updateOwnPresence(status: UserPresence['status'], activity?: string) {\n    if (!this.socket || !this.isConnected || !this.config._auth?._userId) return;\n    \n    const _presence: UserPresence = {\n      _userId: this.config._auth._userId,\n      status,\n      lastSeen: new Date(),\n      activity\n    };\n    \n    this.socket.emit('presence:update', _presence);\n    this.updatePresence(_presence);\n  }\n  \n  /**\n   * Join a room\n   */\n  public joinRoom(_roomId: string) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('join', _roomId);\n    }\n  }\n  \n  /**\n   * Leave a room\n   */\n  public leaveRoom(_roomId: string) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('leave', _roomId);\n    }\n  }\n  \n  /**\n   * Disconnect from server\n   */\n  public disconnect() {\n    this.stopHeartbeat();\n    \n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    \n    this.isConnected = false;\n    this.subscriptions.clear();\n    this.messageQueue = [];\n    this.presence.clear();\n    this.emit(RealtimeEvent.DISCONNECTED);\n  }\n  \n  /**\n   * Check if connected\n   */\n  public get connected(): boolean {\n    return this.isConnected;\n  }\n  \n  /**\n   * Get connection state\n   */\n  public getConnectionState() {\n    return {\n      connected: this.isConnected,\n      reconnectAttempts: this.reconnectAttempts,\n      queuedMessages: this.messageQueue.length,\n      onlineUsers: this.getOnlineUsers().length\n    };\n  }\n}\n\n// Export singleton instance\nexport const __realtimeSyncService = RealtimeSyncService.getInstance();\n\n// Export React hook\nexport function useRealtimeSync() {\n  const service = RealtimeSyncService.getInstance();\n  \n  return {\n    connect: (_auth?: { token: string; _userId: string }) => service.connect(_auth),\n    disconnect: () => service.disconnect(),\n    subscribe: (config: SubscriptionConfig) => service.subscribe(config),\n    unsubscribe: (_id: string) => service.unsubscribe(_id),\n    send: (channel: string, event: string, data: unknown) => service.send(channel, event, data),\n    getPresence: (_userId: string) => service.getPresence(_userId),\n    getOnlineUsers: () => service.getOnlineUsers(),\n    updatePresence: (status: UserPresence['status'], activity?: string) => \n      service.updateOwnPresence(status, activity),\n    joinRoom: (_roomId: string) => service.joinRoom(_roomId),\n    leaveRoom: (_roomId: string) => service.leaveRoom(_roomId),\n    getConnectionState: () => service.getConnectionState(),\n    on: (event: string, callback: (...args: unknown[]) => void) => {\n      service.on(event, callback);\n      return () => service.off(event, callback);\n    }\n  };\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\integration\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\logging\\logger.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1082,1085],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1082,1085],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":315,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":315,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8341,8344],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8341,8344],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":324,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":324,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8610,8613],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8610,8613],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":333,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":333,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8871,8874],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8871,8874],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":344,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9165,9168],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9165,9168],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * HIPAA-Compliant Structured Logging Service\n * \n * This service provides structured logging with:\n * - HIPAA compliance (no PII/PHI in logs)\n * - Performance metrics tracking\n * - Crisis intervention audit trail\n * - Error boundary integration\n * - Configurable log levels based on environment\n */\n\nimport { auditLogger } from '../security/auditLogger';\n\nexport enum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n  CRITICAL = 4,\n  SILENT = 5\n}\n\nexport enum LogCategory {\n  CRISIS = 'CRISIS',\n  AUTH = 'AUTH',\n  WELLNESS = 'WELLNESS',\n  COMMUNITY = 'COMMUNITY',\n  PERFORMANCE = 'PERFORMANCE',\n  SECURITY = 'SECURITY',\n  SYSTEM = 'SYSTEM',\n  USER_ACTION = 'USER_ACTION',\n  API = 'API',\n  ERROR = 'ERROR',\n  AI = 'AI',\n  EMERGENCY = 'EMERGENCY',\n  NOTIFICATIONS = 'NOTIFICATIONS',\n  ACCESSIBILITY = 'ACCESSIBILITY'\n}\n\ninterface LogContext {\n  category: LogCategory;\n  action?: string;\n  userId?: string;\n  sessionId?: string;\n  signId?: string;\n  contactId?: string;\n  buddyId?: string;\n  newStatus?: boolean;\n  relationship?: string;\n  _metadata?: Record<string, any>;\n  performanceMetrics?: {\n    duration?: number;\n    memoryUsage?: number;\n    responseTime?: number;\n  };\n  error?: {\n    message: string;\n    stack?: string;\n    code?: string;\n  };\n}\n\ninterface LogEntry {\n  timestamp: string;\n  level: LogLevel;\n  category: LogCategory;\n  message: string;\n  context?: LogContext;\n  environment: string;\n}\n\nclass Logger {\n  private static instance: Logger;\n  private logLevel: LogLevel;\n  private isDevelopment: boolean;\n  private logBuffer: LogEntry[] = [];\n  private maxBufferSize = 100;\n  private flushInterval = 5000; // 5 seconds\n  private flushTimer: NodeJS.Timeout | null = null;\n\n  private constructor() {\n    this.isDevelopment = import.meta.env.DEV;\n    this.logLevel = this.isDevelopment ? LogLevel.DEBUG : LogLevel.INFO;\n    this.startFlushTimer();\n  }\n\n  static getInstance(): Logger {\n    if (!Logger.instance) {\n      Logger.instance = new Logger();\n    }\n    return Logger.instance;\n  }\n\n  private startFlushTimer(): void {\n    if (this.flushTimer) {\n      clearInterval(this.flushTimer);\n    }\n    this.flushTimer = setInterval(() => {\n      this.flush();\n    }, this.flushInterval);\n  }\n\n  private sanitizeData(data: unknown): unknown {\n    if (data === null || data === undefined) {\n      return data;\n    }\n\n    // Remove sensitive fields\n    const sensitiveFields = [\n      'password',\n      'token',\n      'apiKey',\n      'ssn',\n      'dateOfBirth',\n      'email',\n      'phone',\n      'address',\n      'creditCard',\n      'diagnosis',\n      'medication',\n      'therapyNotes',\n      'mentalHealthHistory'\n    ];\n\n    if (typeof data === 'object') {\n      const sanitized: unknown = Array.isArray(data) ? [] : {};\n      \n      for (const key in data) {\n        if (Object.prototype.hasOwnProperty.call(data, key)) {\n          const lowerKey = key.toLowerCase();\n          if (sensitiveFields.some(_field => lowerKey.includes(_field))) {\n            sanitized[key] = '[REDACTED]';\n          } else if (typeof data[key] === 'object') {\n            sanitized[key] = this.sanitizeData(data[key]);\n          } else {\n            sanitized[key] = data[key];\n          }\n        }\n      }\n      \n      return sanitized;\n    }\n\n    return data;\n  }\n\n  private formatMessage(level: LogLevel, message: string, context?: LogContext): LogEntry {\n    return {\n      timestamp: new Date().toISOString(),\n      level,\n      category: context?.category || LogCategory.SYSTEM,\n      message,\n      context: context ? this.sanitizeData(_context) : undefined,\n      environment: this.isDevelopment ? 'development' : 'production'\n    };\n  }\n\n  private shouldLog(level: LogLevel): boolean {\n    return level >= this.logLevel;\n  }\n\n  private writeToConsole(entry: LogEntry): void {\n    if (!this.isDevelopment && entry.level < LogLevel.WARN) {\n      return; // Only log warnings and errors in production\n    }\n\n    const prefix = `[${entry.timestamp}] [${LogLevel[entry.level]}] [${entry.category}]`;\n    const message = `${prefix} ${entry.message}`;\n\n    switch (entry.level) {\n      case LogLevel.DEBUG:\n      case LogLevel.INFO:\n        if (this.isDevelopment) {\n          logger.info(message, entry.context || '');\n        }\n        break;\n      case LogLevel.WARN:\n        logger.warn(message, entry.context || '');\n        break;\n      case LogLevel.ERROR:\n      case LogLevel.CRITICAL:\n        logger.error(message, entry.context || '');\n        break;\n    }\n  }\n\n  private addToBuffer(entry: LogEntry): void {\n    this.logBuffer.push(entry);\n    \n    if (this.logBuffer.length >= this.maxBufferSize) {\n      this.flush();\n    }\n  }\n\n  private async flush(): Promise<void> {\n    if (this.logBuffer.length === 0) {\n      return;\n    }\n\n    const entriesToFlush = [...this.logBuffer];\n    this.logBuffer = [];\n\n    // Send to remote logging service (if configured)\n    if (!this.isDevelopment) {\n      try {\n        await this.sendToRemoteLogging(_entriesToFlush);\n      } catch {\n        // Fallback to console if remote logging fails\n        logger.error('[Logger] Failed to send logs to remote service');\n      }\n    }\n\n    // Send critical logs to audit service\n    const criticalLogs = entriesToFlush.filter(\n      entry => entry.level >= LogLevel.ERROR || entry.category === LogCategory.CRISIS\n    );\n    \n    for (const log of criticalLogs) {\n      if (log.context?.userId) {\n        await auditLogger.log({\n          event: 'SECURITY_ALERT' as const,\n          userId: log.context.userId,\n          action: 'CRITICAL_EVENT',\n          outcome: 'success',\n          severity: 'critical',\n          details: {\n            message: log.message,\n            ...log.context._metadata\n          }\n        });\n      }\n    }\n  }\n\n  private async sendToRemoteLogging(entries: LogEntry[]): Promise<void> {\n    // Implementation would send to your logging service (e.g., Sentry, LogRocket, etc.)\n    // For now, this is a placeholder\n    if (typeof window !== 'undefined' && window.Sentry) {\n      entries.forEach(entry => {\n        if (entry.level >= LogLevel.ERROR && window.Sentry) {\n          window.Sentry.captureMessage(entry.message, {\n            level: entry.level === LogLevel.CRITICAL ? 'fatal' : 'error',\n            extra: entry.context\n          });\n        }\n      });\n    }\n  }\n\n  // Public logging methods\n\n  debug(message: string, context?: LogContext): void {\n    if (this.shouldLog(LogLevel.DEBUG)) {\n      const entry = this.formatMessage(LogLevel.DEBUG, message, context);\n      this.writeToConsole(entry);\n      this.addToBuffer(entry);\n    }\n  }\n\n  info(message: string, context?: LogContext): void {\n    if (this.shouldLog(LogLevel.INFO)) {\n      const entry = this.formatMessage(LogLevel.INFO, message, context);\n      this.writeToConsole(entry);\n      this.addToBuffer(entry);\n    }\n  }\n\n  warn(message: string, context?: LogContext): void {\n    if (this.shouldLog(LogLevel.WARN)) {\n      const entry = this.formatMessage(LogLevel.WARN, message, context);\n      this.writeToConsole(entry);\n      this.addToBuffer(entry);\n    }\n  }\n\n  error(message: string, error?: Error, context?: LogContext): void {\n    if (this.shouldLog(LogLevel.ERROR)) {\n      const enrichedContext: LogContext = {\n        ...context,\n        category: context?.category || LogCategory.ERROR,\n        error: error ? {\n          message: error.message,\n          stack: error.stack,\n          code: (error as unknown).code\n        } : undefined\n      };\n      \n      const entry = this.formatMessage(LogLevel.ERROR, message, enrichedContext);\n      this.writeToConsole(entry);\n      this.addToBuffer(entry);\n    }\n  }\n\n  critical(message: string, error?: Error, context?: LogContext): void {\n    const enrichedContext: LogContext = {\n      ...context,\n      category: context?.category || LogCategory.CRISIS,\n      error: error ? {\n        message: error.message,\n        stack: error.stack,\n        code: (error as unknown).code\n      } : undefined\n    };\n    \n    const entry = this.formatMessage(LogLevel.CRITICAL, message, enrichedContext);\n    this.writeToConsole(entry);\n    this.addToBuffer(entry);\n    \n    // Immediately flush critical logs\n    this.flush();\n  }\n\n  // Specialized logging methods for mental health features\n\n  logCrisisIntervention(action: string, userId?: string, _metadata?: Record<string, any>): void {\n    this.info(`Crisis intervention: ${action}`, {\n      category: LogCategory.CRISIS,\n      action,\n      userId,\n      _metadata: this.sanitizeData(_metadata)\n    });\n  }\n\n  logWellnessActivity(action: string, userId?: string, _metadata?: Record<string, any>): void {\n    this.info(`Wellness activity: ${action}`, {\n      category: LogCategory.WELLNESS,\n      action,\n      userId,\n      _metadata: this.sanitizeData(_metadata)\n    });\n  }\n\n  logPerformance(metric: string, value: number, metadata?: Record<string, any>): void {\n    this.debug(`Performance metric: ${metric}`, {\n      category: LogCategory.PERFORMANCE,\n      action: metric,\n      performanceMetrics: {\n        duration: value\n      },\n      metadata\n    });\n  }\n\n  logSecurityEvent(event: string, userId?: string, _metadata?: Record<string, any>): void {\n    this.warn(`Security event: ${event}`, {\n      category: LogCategory.SECURITY,\n      action: event,\n      userId,\n      _metadata: this.sanitizeData(_metadata)\n    });\n  }\n\n  logApiCall(endpoint: string, method: string, statusCode?: number, duration?: number): void {\n    const message = `API ${method} ${endpoint} - ${statusCode || 'pending'}`;\n    this.debug(message, {\n      category: LogCategory.API,\n      action: `${method} ${endpoint}`,\n      performanceMetrics: duration ? { duration } : undefined,\n      _metadata: { statusCode }\n    });\n  }\n\n  // Performance tracking\n\n  startTimer(label: string): () => void {\n    const start = performance.now();\n    return () => {\n      const duration = performance.now() - start;\n      this.logPerformance(label, duration);\n      return duration;\n    };\n  }\n\n  // Cleanup\n\n  destroy(): void {\n    if (this.flushTimer) {\n      clearInterval(this.flushTimer);\n      this.flushTimer = null;\n    }\n    this.flush();\n  }\n}\n\n// Export singleton instance\nexport const logger = Logger.getInstance();\n\n// Export convenience functions\nexport const __logDebug = (message: string, context?: LogContext) => logger.debug(message, context);\nexport const __logInfo = (message: string, context?: LogContext) => logger.info(message, context);\nexport const __logWarn = (message: string, context?: LogContext) => logger.warn(message, context);\nexport const __logError = (message: string, error?: Error, context?: LogContext) => logger.error(message, error, context);\nexport const __logCritical = (message: string, error?: Error, context?: LogContext) => logger.critical(message, error, context);\n\n// Extend window interface for Sentry integration\ndeclare global {\n  interface Window {\n    Sentry?: {\n      captureMessage: (message: string, options?: unknown) => void;\n      captureException: (error: Error, options?: unknown) => void;\n    };\n  }\n}\n\nexport default logger;","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\monitoring\\HealthCheckService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[637,640],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[637,640],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Health Check and Monitoring Service\n// Provides comprehensive health monitoring for the mental health platform\n\nimport { _apiService } from '../api/ApiService';\nimport { wsService } from '../websocket/WebSocketService';\nimport { logger } from '../utils/logger';\n\n// Health check status types\nexport enum HealthStatus {\n  HEALTHY = 'healthy',\n  DEGRADED = 'degraded',\n  UNHEALTHY = 'unhealthy',\n  UNKNOWN = 'unknown'\n}\n\n// Service health check result\nexport interface ServiceHealth {\n  name: string;\n  status: HealthStatus;\n  responseTime: number;\n  message?: string;\n  lastChecked: Date;\n  uptime?: number;\n  details?: Record<string, any>;\n}\n\n// System health overview\nexport interface SystemHealth {\n  overall: HealthStatus;\n  services: ServiceHealth[];\n  _metrics: SystemMetrics;\n  timestamp: Date;\n  version: string;\n}\n\n// System metrics\nexport interface SystemMetrics {\n  cpu: {\n    usage: number;\n    cores: number;\n  };\n  memory: {\n    used: number;\n    total: number;\n    percentage: number;\n  };\n  storage: {\n    used: number;\n    total: number;\n    percentage: number;\n  };\n  network: {\n    latency: number;\n    bandwidth: number;\n    packetsLost: number;\n  };\n  activeUsers: number;\n  activeSessions: number;\n  requestsPerMinute: number;\n  errorRate: number;\n}\n\n// Crisis system metrics\nexport interface CrisisMetrics {\n  activecrisisSessions: number;\n  waitingUsers: number;\n  averageWaitTime: number;\n  availableCounselors: number;\n  escalationRate: number;\n  responseTime: {\n    p50: number;\n    p95: number;\n    p99: number;\n  };\n}\n\n// Performance metrics\nexport interface PerformanceMetrics {\n  pageLoadTime: number;\n  timeToFirstByte: number;\n  firstContentfulPaint: number;\n  largestContentfulPaint: number;\n  cumulativeLayoutShift: number;\n  firstInputDelay: number;\n  totalBlockingTime: number;\n}\n\n// Health Check Service Class\nexport class HealthCheckService {\n  private static instance: HealthCheckService;\n  private healthCheckInterval: NodeJS.Timeout | null = null;\n  private metricsCollectionInterval: NodeJS.Timeout | null = null;\n  private healthHistory: Map<string, ServiceHealth[]> = new Map();\n  private performanceObserver: PerformanceObserver | null = null;\n  private readonly maxHistorySize = 100;\n\n  private constructor() {\n    this.initializePerformanceObserver();\n  }\n\n  // Singleton pattern\n  public static getInstance(): HealthCheckService {\n    if (!HealthCheckService.instance) {\n      HealthCheckService.instance = new HealthCheckService();\n    }\n    return HealthCheckService.instance;\n  }\n\n  // Initialize performance observer\n  private initializePerformanceObserver(): void {\n    if (typeof window !== 'undefined' && 'PerformanceObserver' in window) {\n      this.performanceObserver = new PerformanceObserver((list) => {\n        for (const _entry of list.getEntries()) {\n          this.recordPerformanceMetric(_entry);\n        }\n      });\n\n      // Observe different performance entry types\n      try {\n        this.performanceObserver.observe({ \n          entryTypes: ['navigation', 'resource', 'paint', 'largest-contentful-paint', 'layout-shift', 'first-input'] \n        });\n      } catch {\n        logger.error('Failed to initialize performance observer:');\n      }\n    }\n  }\n\n  // Start health monitoring\n  public startMonitoring(intervalMs: number = 30000): void {\n    if (this.healthCheckInterval) {\n      logger.info('Health monitoring already running');\n      return;\n    }\n\n    // Initial health check\n    this.performHealthCheck();\n\n    // Set up recurring health checks\n    this.healthCheckInterval = setInterval(() => {\n      this.performHealthCheck();\n    }, intervalMs);\n\n    // Set up metrics collection\n    this.metricsCollectionInterval = setInterval(() => {\n      this.collectMetrics();\n    }, 60000); // Every minute\n\n    logger.info(`Health monitoring started with ${intervalMs}ms interval`);\n  }\n\n  // Stop health monitoring\n  public stopMonitoring(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n      this.healthCheckInterval = null;\n    }\n\n    if (this.metricsCollectionInterval) {\n      clearInterval(this.metricsCollectionInterval);\n      this.metricsCollectionInterval = null;\n    }\n\n    if (this.performanceObserver) {\n      this.performanceObserver.disconnect();\n    }\n\n    logger.info('Health monitoring stopped');\n  }\n\n  // Perform comprehensive health check\n  private async performHealthCheck(): Promise<SystemHealth> {\n    const services: ServiceHealth[] = [];\n    \n    // Check API health\n    services.push(await this.checkAPIHealth());\n    \n    // Check WebSocket health\n    services.push(await this.checkWebSocketHealth());\n    \n    // Check database health\n    services.push(await this.checkDatabaseHealth());\n    \n    // Check cache health\n    services.push(await this.checkCacheHealth());\n    \n    // Check crisis system health\n    services.push(await this.checkCrisisSystemHealth());\n    \n    // Check third-party integrations\n    services.push(await this.checkIntegrationsHealth());\n    \n    // Determine overall health\n    const overall = this.calculateOverallHealth(_services);\n    \n    // Collect system _metrics\n    const _metrics = await this.collectSystemMetrics();\n    \n    const systemHealth: SystemHealth = {\n      overall,\n      services,\n      _metrics,\n      timestamp: new Date(),\n      version: '4.0.0'\n    };\n    \n    // Store in history\n    this.storeHealthHistory(_systemHealth);\n    \n    // Send to monitoring service\n    this.reportHealthStatus(_systemHealth);\n    \n    return systemHealth;\n  }\n\n  // Check API health\n  private async checkAPIHealth(): Promise<ServiceHealth> {\n    const startTime = performance.now();\n    \n    try {\n      const response = await fetch('/api/health', {\n        method: 'GET',\n        signal: AbortSignal.timeout(5000)\n      });\n      \n      const responseTime = performance.now() - startTime;\n      \n      if (response.ok) {\n        const data = await response.json();\n        return {\n          name: 'API',\n          status: HealthStatus.HEALTHY,\n          responseTime,\n          lastChecked: new Date(),\n          uptime: data.uptime,\n          details: data\n        };\n      } else {\n        return {\n          name: 'API',\n          status: response.status >= 500 ? HealthStatus.UNHEALTHY : HealthStatus.DEGRADED,\n          responseTime,\n          message: `HTTP ${response.status}`,\n          lastChecked: new Date()\n        };\n      }\n    } catch {\n      return {\n        name: 'API',\n        status: HealthStatus.UNHEALTHY,\n        responseTime: performance.now() - startTime,\n        message: error instanceof Error ? error.message : 'Connection failed',\n        lastChecked: new Date()\n      };\n    }\n  }\n\n  // Check WebSocket health\n  private async checkWebSocketHealth(): Promise<ServiceHealth> {\n    const startTime = performance.now();\n    \n    try {\n      const isConnected = wsService.isConnected();\n      const latency = wsService.getLatency();\n      \n      return {\n        name: 'WebSocket',\n        status: isConnected ? HealthStatus.HEALTHY : HealthStatus.UNHEALTHY,\n        responseTime: latency,\n        lastChecked: new Date(),\n        details: {\n          connected: isConnected,\n          latency\n        }\n      };\n    } catch {\n      return {\n        name: 'WebSocket',\n        status: HealthStatus.UNHEALTHY,\n        responseTime: performance.now() - startTime,\n        message: error instanceof Error ? error.message : 'Check failed',\n        lastChecked: new Date()\n      };\n    }\n  }\n\n  // Check database health\n  private async checkDatabaseHealth(): Promise<ServiceHealth> {\n    const startTime = performance.now();\n    \n    try {\n      const response = await fetch('/api/health/database', {\n        method: 'GET',\n        signal: AbortSignal.timeout(5000)\n      });\n      \n      const responseTime = performance.now() - startTime;\n      \n      if (response.ok) {\n        const data = await response.json();\n        return {\n          name: 'Database',\n          status: data.healthy ? HealthStatus.HEALTHY : HealthStatus.DEGRADED,\n          responseTime,\n          lastChecked: new Date(),\n          details: {\n            connections: data.connections,\n            replicationLag: data.replicationLag\n          }\n        };\n      } else {\n        return {\n          name: 'Database',\n          status: HealthStatus.UNHEALTHY,\n          responseTime,\n          message: `HTTP ${response.status}`,\n          lastChecked: new Date()\n        };\n      }\n    } catch {\n      return {\n        name: 'Database',\n        status: HealthStatus.UNHEALTHY,\n        responseTime: performance.now() - startTime,\n        message: 'Database check failed',\n        lastChecked: new Date()\n      };\n    }\n  }\n\n  // Check cache health\n  private async checkCacheHealth(): Promise<ServiceHealth> {\n    const startTime = performance.now();\n    \n    try {\n      const response = await fetch('/api/health/cache', {\n        method: 'GET',\n        signal: AbortSignal.timeout(3000)\n      });\n      \n      const responseTime = performance.now() - startTime;\n      \n      if (response.ok) {\n        const data = await response.json();\n        return {\n          name: 'Cache',\n          status: data.healthy ? HealthStatus.HEALTHY : HealthStatus.DEGRADED,\n          responseTime,\n          lastChecked: new Date(),\n          details: {\n            hitRate: data.hitRate,\n            memoryUsage: data.memoryUsage\n          }\n        };\n      } else {\n        return {\n          name: 'Cache',\n          status: HealthStatus.DEGRADED,\n          responseTime,\n          message: 'Cache degraded',\n          lastChecked: new Date()\n        };\n      }\n    } catch {\n      return {\n        name: 'Cache',\n        status: HealthStatus.DEGRADED,\n        responseTime: performance.now() - startTime,\n        message: 'Cache check failed',\n        lastChecked: new Date()\n      };\n    }\n  }\n\n  // Check crisis system health\n  private async checkCrisisSystemHealth(): Promise<ServiceHealth> {\n    const startTime = performance.now();\n    \n    try {\n      const response = await fetch('/api/health/crisis', {\n        method: 'GET',\n        signal: AbortSignal.timeout(3000)\n      });\n      \n      const responseTime = performance.now() - startTime;\n      \n      if (response.ok) {\n        const data: CrisisMetrics = await response.json();\n        \n        // Determine health based on crisis _metrics\n        let status = HealthStatus.HEALTHY;\n        let message: string | undefined;\n        \n        if (data.waitingUsers > 10) {\n          status = HealthStatus.DEGRADED;\n          message = 'High number of waiting users';\n        }\n        \n        if (data.availableCounselors === 0) {\n          status = HealthStatus.UNHEALTHY;\n          message = 'No counselors available';\n        }\n        \n        if (data.responseTime.p95 > 60000) { // 60 seconds\n          status = HealthStatus.DEGRADED;\n          message = 'High response times';\n        }\n        \n        return {\n          name: 'Crisis System',\n          status,\n          responseTime,\n          message,\n          lastChecked: new Date(),\n          details: data\n        };\n      } else {\n        return {\n          name: 'Crisis System',\n          status: HealthStatus.UNHEALTHY,\n          responseTime,\n          message: 'Crisis system unavailable',\n          lastChecked: new Date()\n        };\n      }\n    } catch {\n      return {\n        name: 'Crisis System',\n        status: HealthStatus.UNKNOWN,\n        responseTime: performance.now() - startTime,\n        message: 'Crisis system check failed',\n        lastChecked: new Date()\n      };\n    }\n  }\n\n  // Check third-party integrations\n  private async checkIntegrationsHealth(): Promise<ServiceHealth> {\n    const startTime = performance.now();\n    const integrations = ['payment', 'video', 'sms', 'email'];\n    const _results: Record<string, boolean> = {};\n    \n    try {\n      // Check each integration in parallel\n      const _checks = integrations.map(async (integration) => {\n        try {\n          const response = await fetch(`/api/health/integration/${integration}`, {\n            method: 'GET',\n            signal: AbortSignal.timeout(3000)\n          });\n          results[integration] = response.ok;\n        } catch {\n          results[integration] = false;\n        }\n      });\n      \n      await Promise.all(_checks);\n      \n      const healthyCount = Object.values(_results).filter(v => v).length;\n      const totalCount = Object.values(_results).length;\n      \n      let status = HealthStatus.HEALTHY;\n      if (healthyCount < totalCount) {\n        status = healthyCount > totalCount / 2 ? HealthStatus.DEGRADED : HealthStatus.UNHEALTHY;\n      }\n      \n      return {\n        name: 'Integrations',\n        status,\n        responseTime: performance.now() - startTime,\n        lastChecked: new Date(),\n        details: results\n      };\n    } catch {\n      return {\n        name: 'Integrations',\n        status: HealthStatus.UNKNOWN,\n        responseTime: performance.now() - startTime,\n        message: 'Integration check failed',\n        lastChecked: new Date()\n      };\n    }\n  }\n\n  // Calculate overall system health\n  private calculateOverallHealth(services: ServiceHealth[]): HealthStatus {\n    const criticalServices = ['API', 'Database', 'Crisis System'];\n    \n    // Check critical services\n    for (const service of services) {\n      if (criticalServices.includes(service.name) && service.status === HealthStatus.UNHEALTHY) {\n        return HealthStatus.UNHEALTHY;\n      }\n    }\n    \n    // Check for degraded services\n    const degradedCount = services.filter(s => s.status === HealthStatus.DEGRADED).length;\n    if (degradedCount > services.length / 3) {\n      return HealthStatus.DEGRADED;\n    }\n    \n    // Check for any unhealthy services\n    const unhealthyCount = services.filter(s => s.status === HealthStatus.UNHEALTHY).length;\n    if (unhealthyCount > 0) {\n      return HealthStatus.DEGRADED;\n    }\n    \n    return HealthStatus.HEALTHY;\n  }\n\n  // Collect system metrics\n  private async collectSystemMetrics(): Promise<SystemMetrics> {\n    // In a real implementation, these would come from actual system monitoring\n    return {\n      cpu: {\n        usage: this.getRandomMetric(10, 80),\n        cores: navigator.hardwareConcurrency || 4\n      },\n      memory: {\n        used: this.getRandomMetric(1000, 3000),\n        total: 4096,\n        percentage: this.getRandomMetric(25, 75)\n      },\n      storage: {\n        used: this.getRandomMetric(10000, 50000),\n        total: 100000,\n        percentage: this.getRandomMetric(10, 50)\n      },\n      network: {\n        latency: this.getRandomMetric(10, 100),\n        bandwidth: this.getRandomMetric(50, 100),\n        packetsLost: this.getRandomMetric(0, 0.1)\n      },\n      activeUsers: Math.floor(this.getRandomMetric(100, 1000)),\n      activeSessions: Math.floor(this.getRandomMetric(50, 500)),\n      requestsPerMinute: Math.floor(this.getRandomMetric(1000, 5000)),\n      errorRate: this.getRandomMetric(0, 0.05)\n    };\n  }\n\n  // Collect performance metrics\n  private collectMetrics(): void {\n    if (typeof window === 'undefined') return;\n    \n    const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n    const paint = performance.getEntriesByType('paint');\n    \n    const _metrics: PerformanceMetrics = {\n      pageLoadTime: navigation ? navigation.loadEventEnd - navigation.fetchStart : 0,\n      timeToFirstByte: navigation ? navigation.responseStart - navigation.fetchStart : 0,\n      firstContentfulPaint: this.getMetricValue(paint, 'first-contentful-paint'),\n      largestContentfulPaint: this.getLCPValue(),\n      cumulativeLayoutShift: this.getCLSValue(),\n      firstInputDelay: this.getFIDValue(),\n      totalBlockingTime: this.getTBTValue()\n    };\n    \n    this.reportPerformanceMetrics(_metrics);\n  }\n\n  // Record performance metric\n  private recordPerformanceMetric(_entry: PerformanceEntry): void {\n    // Store and analyze performance entries\n    logger.info(`Performance metric: ${_entry.name} - ${_entry.entryType} - ${_entry.duration}ms`);\n  }\n\n  // Helper methods for performance metrics\n  private getMetricValue(entries: PerformanceEntryList, name: string): number {\n    const _entry = entries.find(e => e.name === name);\n    return _entry ? _entry.startTime : 0;\n  }\n\n  private getLCPValue(): number {\n    // In production, use PerformanceObserver for LCP\n    return this.getRandomMetric(1000, 3000);\n  }\n\n  private getCLSValue(): number {\n    // In production, calculate actual CLS\n    return this.getRandomMetric(0, 0.1);\n  }\n\n  private getFIDValue(): number {\n    // In production, measure actual FID\n    return this.getRandomMetric(10, 100);\n  }\n\n  private getTBTValue(): number {\n    // In production, calculate actual TBT\n    return this.getRandomMetric(50, 300);\n  }\n\n  // Store health history\n  private storeHealthHistory(health: SystemHealth): void {\n    health.services.forEach(service => {\n      if (!this.healthHistory.has(service.name)) {\n        this.healthHistory.set(service.name, []);\n      }\n      \n      const history = this.healthHistory.get(service.name)!;\n      history.push(_service);\n      \n      // Limit history size\n      if (history.length > this.maxHistorySize) {\n        history.shift();\n      }\n    });\n  }\n\n  // Report health status to monitoring service\n  private reportHealthStatus(health: SystemHealth): void {\n    // Send to monitoring endpoint\n    if (health.overall !== HealthStatus.HEALTHY) {\n      logger.warn('System health degraded:', health);\n    }\n    \n    // Send metrics to Prometheus/Grafana\n    this.sendMetricsToMonitoring(_health);\n  }\n\n  // Report performance metrics\n  private reportPerformanceMetrics(_metrics: PerformanceMetrics): void {\n    // Send to analytics service\n    logger.info('Performance _metrics:', _metrics);\n  }\n\n  // Send metrics to monitoring service\n  private sendMetricsToMonitoring(health: SystemHealth): void {\n    // In production, send to Prometheus pushgateway\n    try {\n      fetch('/api/_metrics/push', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          timestamp: health.timestamp,\n          _metrics: health._metrics,\n          services: health.services.map(s => ({\n            name: s.name,\n            status: s.status,\n            responseTime: s.responseTime\n          }))\n        })\n      }).catch(error => {\n        logger.error('Failed to send _metrics:', error);\n      });\n    } catch {\n      logger.error('Failed to send _metrics:');\n    }\n  }\n\n  // Utility method for generating random metrics (for demo)\n  private getRandomMetric(min: number, max: number): number {\n    return Math.random() * (max - min) + min;\n  }\n\n  // Public methods for accessing health data\n  public async getSystemHealth(): Promise<SystemHealth> {\n    return this.performHealthCheck();\n  }\n\n  public getHealthHistory(_serviceName: string): ServiceHealth[] {\n    return this.healthHistory.get(_serviceName) || [];\n  }\n\n  public async getCrisisMetrics(): Promise<CrisisMetrics> {\n    const response = await fetch('/api/_metrics/crisis');\n    return response.json();\n  }\n\n  public getPerformanceMetrics(): PerformanceMetrics {\n    // Return latest collected _metrics\n    const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n    const paint = performance.getEntriesByType('paint');\n    \n    return {\n      pageLoadTime: navigation ? navigation.loadEventEnd - navigation.fetchStart : 0,\n      timeToFirstByte: navigation ? navigation.responseStart - navigation.fetchStart : 0,\n      firstContentfulPaint: this.getMetricValue(paint, 'first-contentful-paint'),\n      largestContentfulPaint: this.getLCPValue(),\n      cumulativeLayoutShift: this.getCLSValue(),\n      firstInputDelay: this.getFIDValue(),\n      totalBlockingTime: this.getTBTValue()\n    };\n  }\n}\n\n// Export singleton instance\nexport const __healthCheckService = HealthCheckService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\notifications\\ComprehensiveNotificationService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1745,1748],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1745,1748],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2496,2499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2496,2499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2541,2544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2541,2544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":574,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":574,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17590,17593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17590,17593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unreachable","severity":2,"message":"Unreachable code.","line":631,"column":21,"nodeType":"BlockStatement","messageId":"unreachableCode","endLine":636,"endColumn":6},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":641,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":641,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19953,19956],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19953,19956],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":642,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":642,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20030,20033],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20030,20033],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":645,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":645,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20170,20173],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20170,20173],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unreachable","severity":2,"message":"Unreachable code.","line":722,"column":22,"nodeType":"BlockStatement","messageId":"unreachableCode","endLine":724,"endColumn":6}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger, LogCategory } from '../logging/logger';\r\nimport { secureStorage } from '../security/secureStorage';\r\nimport { CrisisProfile } from '../../types/ai-insights';\r\n\r\nexport interface NotificationRule {\r\n  id: string;\r\n  name: string;\r\n  type: 'wellness_reminder' | 'medication_reminder' | 'mood_check' | 'crisis_followup' | 'appointment_reminder' | 'self_care_prompt';\r\n  priority: 'low' | 'medium' | 'high' | 'critical';\r\n  trigger: NotificationTrigger;\r\n  conditions: NotificationCondition[];\r\n  content: NotificationContent;\r\n  schedule: NotificationSchedule;\r\n  isActive: boolean;\r\n  createdAt: number;\r\n  lastTriggered?: number;\r\n}\r\n\r\nexport interface NotificationTrigger {\r\n  type: 'time_based' | 'event_based' | 'condition_based' | 'geolocation_based';\r\n  parameters: {\r\n    timePattern?: string; // cron-like pattern\r\n    eventType?: string;\r\n    condition?: string;\r\n    location?: { latitude: number; longitude: number; radius: number };\r\n  };\r\n}\r\n\r\nexport interface NotificationCondition {\r\n  type: 'mood_score' | 'stress_level' | 'activity_level' | 'sleep_quality' | 'medication_adherence' | 'crisis_risk';\r\n  operator: 'equals' | 'greater_than' | 'less_than' | 'between';\r\n  value: number | string | [number, number];\r\n}\r\n\r\nexport interface NotificationContent {\r\n  title: string;\r\n  body: string;\r\n  icon?: string;\r\n  image?: string;\r\n  actions?: NotificationAction[];\r\n  personalizedElements?: {\r\n    userName?: boolean;\r\n    moodContext?: boolean;\r\n    progressData?: boolean;\r\n  };\r\n}\r\n\r\nexport interface NotificationAction {\r\n  id: string;\r\n  title: string;\r\n  icon?: string;\r\n  action: 'open_app' | 'log_mood' | 'start_breathing' | 'call_crisis_line' | 'view_resources' | 'dismiss';\r\n  parameters?: Record<string, any>;\r\n}\r\n\r\nexport interface NotificationSchedule {\r\n  frequency: 'once' | 'daily' | 'weekly' | 'monthly' | 'custom';\r\n  daysOfWeek?: number[]; // 0 = Sunday, 1 = Monday, etc.\r\n  timeOfDay?: string; // HH:MM format\r\n  timezone?: string;\r\n  endDate?: number;\r\n  respectSleepHours?: boolean;\r\n  sleepStart?: string; // HH:MM\r\n  sleepEnd?: string; // HH:MM\r\n}\r\n\r\nexport interface SmartNotification {\r\n  id: string;\r\n  _ruleId: string;\r\n  title: string;\r\n  body: string;\r\n  priority: 'low' | 'medium' | 'high' | 'critical';\r\n  _timestamp: number;\r\n  scheduledFor: number;\r\n  status: 'pending' | 'sent' | 'delivered' | 'clicked' | 'dismissed' | 'expired';\r\n  actions: NotificationAction[];\r\n  metadata: {\r\n    userId: string;\r\n    context?: Record<string, any>;\r\n    personalizedData?: Record<string, any>;\r\n  };\r\n}\r\n\r\nexport interface NotificationPreferences {\r\n  userId: string;\r\n  globalEnabled: boolean;\r\n  quietHours: {\r\n    enabled: boolean;\r\n    start: string; // HH:MM\r\n    end: string; // HH:MM\r\n  };\r\n  categories: {\r\n    wellness_reminders: boolean;\r\n    medication_reminders: boolean;\r\n    mood_checks: boolean;\r\n    crisis_alerts: boolean;\r\n    appointment_reminders: boolean;\r\n    self_care_prompts: boolean;\r\n  };\r\n  delivery: {\r\n    push: boolean;\r\n    email: boolean;\r\n    sms: boolean;\r\n    inApp: boolean;\r\n  };\r\n  frequency: {\r\n    maxPerDay: number;\r\n    respectDoNotDisturb: boolean;\r\n  };\r\n}\r\n\r\nexport class ComprehensiveNotificationService {\r\n  private rules: Map<string, NotificationRule> = new Map();\r\n  private notifications: Map<string, SmartNotification> = new Map();\r\n  private preferences: NotificationPreferences | null = null;\r\n  private scheduledNotifications: Set<number> = new Set();\r\n  private serviceWorker: ServiceWorker | null = null;\r\n\r\n  constructor() {\r\n    this.initializeService();\r\n  }\r\n\r\n  private async initializeService(): Promise<void> {\r\n    try {\r\n      // Register service worker for background notifications\r\n      await this.registerServiceWorker();\r\n      \r\n      // Load user preferences and rules\r\n      await this.loadPreferences();\r\n      await this.loadNotificationRules();\r\n      \r\n      // Set up default notification rules\r\n      await this.setupDefaultRules();\r\n      \r\n      // Start notification scheduler\r\n      this.startNotificationScheduler();\r\n      \r\n      logger.info('Comprehensive notification service initialized', {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n\r\n    } catch {\r\n      logger.error('Failed to initialize notification service:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n    }\r\n  }\r\n\r\n  private async registerServiceWorker(): Promise<void> {\r\n    try {\r\n      if ('serviceWorker' in navigator && 'Notification' in window) {\r\n        const registration = await navigator.serviceWorker.register('/service-worker.js');\r\n        this.serviceWorker = registration.active;\r\n        \r\n        // Request notification permission\r\n        if (Notification.permission === 'default') {\r\n          const permission = await Notification.requestPermission();\r\n          logger.info(`Notification permission: ${permission}`, {\r\n            category: LogCategory.NOTIFICATIONS,\r\n            metadata: { permission }\r\n          });\r\n        }\r\n      }\r\n    } catch {\r\n      logger.error('Service worker registration failed:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n    }\r\n  }\r\n\r\n  private async loadPreferences(): Promise<void> {\r\n    try {\r\n      const preferences = await secureStorage.getItem('notification_preferences');\r\n      \r\n      if (_preferences) {\r\n        this.preferences = preferences;\r\n      } else {\r\n        // Create default preferences\r\n        this.preferences = {\r\n          userId: 'anonymous',\r\n          globalEnabled: true,\r\n          quietHours: {\r\n            enabled: true,\r\n            start: '22:00',\r\n            end: '08:00'\r\n          },\r\n          categories: {\r\n            wellness_reminders: true,\r\n            medication_reminders: true,\r\n            mood_checks: true,\r\n            crisis_alerts: true,\r\n            appointment_reminders: true,\r\n            self_care_prompts: true\r\n          },\r\n          delivery: {\r\n            push: true,\r\n            email: false,\r\n            sms: false,\r\n            inApp: true\r\n          },\r\n          frequency: {\r\n            maxPerDay: 8,\r\n            respectDoNotDisturb: true\r\n          }\r\n        };\r\n        \r\n        await this.savePreferences();\r\n      }\r\n    } catch {\r\n      logger.error('Failed to load notification preferences:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n    }\r\n  }\r\n\r\n  private async loadNotificationRules(): Promise<void> {\r\n    try {\r\n      const rules = await secureStorage.getItem('notification_rules') || [];\r\n      \r\n      rules.forEach((rule: NotificationRule) => {\r\n        this.rules.set(rule.id, rule);\r\n      });\r\n\r\n    } catch {\r\n      logger.error('Failed to load notification rules:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n    }\r\n  }\r\n\r\n  private async setupDefaultRules(): Promise<void> {\r\n    const defaultRules: Omit<NotificationRule, 'id' | 'createdAt'>[] = [\r\n      {\r\n        name: 'Morning Mood Check-in',\r\n        type: 'mood_check',\r\n        priority: 'medium',\r\n        trigger: {\r\n          type: 'time_based',\r\n          parameters: {\r\n            timePattern: '0 9 * * *' // 9:00 AM daily\r\n          }\r\n        },\r\n        conditions: [],\r\n        content: {\r\n          title: 'Good morning! 🌅',\r\n          body: 'How are you feeling today? Take a moment to check in with yourself.',\r\n          icon: '/icons/mood-check.png',\r\n          actions: [\r\n            {\r\n              id: 'log_mood',\r\n              title: 'Log Mood',\r\n              icon: '😊',\r\n              action: 'log_mood'\r\n            },\r\n            {\r\n              id: 'dismiss',\r\n              title: 'Later',\r\n              action: 'dismiss'\r\n            }\r\n          ],\r\n          personalizedElements: {\r\n            userName: true,\r\n            moodContext: true\r\n          }\r\n        },\r\n        schedule: {\r\n          frequency: 'daily',\r\n          respectSleepHours: true\r\n        },\r\n        isActive: true\r\n      },\r\n      {\r\n        name: 'Evening Self-Care Reminder',\r\n        type: 'self_care_prompt',\r\n        priority: 'low',\r\n        trigger: {\r\n          type: 'time_based',\r\n          parameters: {\r\n            timePattern: '0 19 * * *' // 7:00 PM daily\r\n          }\r\n        },\r\n        conditions: [],\r\n        content: {\r\n          title: 'Self-Care Time 🧘♀️',\r\n          body: 'You\\'ve worked hard today. Take some time for yourself with a relaxing activity.',\r\n          icon: '/icons/self-care.png',\r\n          actions: [\r\n            {\r\n              id: 'breathing',\r\n              title: 'Breathing Exercise',\r\n              icon: '🫁',\r\n              action: 'start_breathing'\r\n            },\r\n            {\r\n              id: 'meditation',\r\n              title: 'Meditation',\r\n              icon: '🧘',\r\n              action: 'open_app',\r\n              parameters: { page: 'meditation' }\r\n            }\r\n          ]\r\n        },\r\n        schedule: {\r\n          frequency: 'daily',\r\n          respectSleepHours: true\r\n        },\r\n        isActive: true\r\n      },\r\n      {\r\n        name: 'Crisis Follow-up Check',\r\n        type: 'crisis_followup',\r\n        priority: 'high',\r\n        trigger: {\r\n          type: 'condition_based',\r\n          parameters: {\r\n            condition: 'crisis_event_occurred'\r\n          }\r\n        },\r\n        conditions: [\r\n          {\r\n            type: 'crisis_risk',\r\n            operator: 'greater_than',\r\n            value: 0.7\r\n          }\r\n        ],\r\n        content: {\r\n          title: 'Checking in on you 💙',\r\n          body: 'We noticed you accessed crisis support. How are you feeling now?',\r\n          icon: '/icons/crisis-support.png',\r\n          actions: [\r\n            {\r\n              id: 'talk_now',\r\n              title: 'Talk to Someone',\r\n              icon: '💬',\r\n              action: 'call_crisis_line'\r\n            },\r\n            {\r\n              id: 'resources',\r\n              title: 'View Resources',\r\n              icon: '📚',\r\n              action: 'view_resources'\r\n            },\r\n            {\r\n              id: 'im_safe',\r\n              title: 'I\\'m Safe Now',\r\n              icon: '✅',\r\n              action: 'dismiss',\r\n              parameters: { feedback: 'safe' }\r\n            }\r\n          ]\r\n        },\r\n        schedule: {\r\n          frequency: 'once'\r\n        },\r\n        isActive: true\r\n      },\r\n      {\r\n        name: 'Weekly Progress Celebration',\r\n        type: 'wellness_reminder',\r\n        priority: 'medium',\r\n        trigger: {\r\n          type: 'time_based',\r\n          parameters: {\r\n            timePattern: '0 10 * * 1' // Mondays at 10 AM\r\n          }\r\n        },\r\n        conditions: [],\r\n        content: {\r\n          title: 'Weekly Check-in 📈',\r\n          body: 'Let\\'s review your wellness progress from last week and set goals for this week.',\r\n          icon: '/icons/progress.png',\r\n          actions: [\r\n            {\r\n              id: 'view_progress',\r\n              title: 'View Progress',\r\n              icon: '📊',\r\n              action: 'open_app',\r\n              parameters: { page: 'analytics' }\r\n            }\r\n          ],\r\n          personalizedElements: {\r\n            progressData: true\r\n          }\r\n        },\r\n        schedule: {\r\n          frequency: 'weekly',\r\n          daysOfWeek: [1] // Monday\r\n        },\r\n        isActive: true\r\n      },\r\n      {\r\n        name: 'Medication Reminder',\r\n        type: 'medication_reminder',\r\n        priority: 'high',\r\n        trigger: {\r\n          type: 'time_based',\r\n          parameters: {\r\n            timePattern: '0 8,20 * * *' // 8 AM and 8 PM daily\r\n          }\r\n        },\r\n        conditions: [],\r\n        content: {\r\n          title: 'Medication Reminder 💊',\r\n          body: 'Time to take your prescribed medication. Stay consistent with your treatment.',\r\n          icon: '/icons/medication.png',\r\n          actions: [\r\n            {\r\n              id: 'taken',\r\n              title: 'Taken',\r\n              icon: '✅',\r\n              action: 'dismiss',\r\n              parameters: { logged: true }\r\n            },\r\n            {\r\n              id: 'snooze',\r\n              title: 'Remind in 30min',\r\n              icon: '⏰',\r\n              action: 'dismiss',\r\n              parameters: { snooze: 30 }\r\n            }\r\n          ]\r\n        },\r\n        schedule: {\r\n          frequency: 'daily',\r\n          respectSleepHours: true\r\n        },\r\n        isActive: false // Disabled by default, user can enable if needed\r\n      }\r\n    ];\r\n\r\n    // Add default rules if they don't exist\r\n    for (const ruleData of defaultRules) {\r\n      const existingRule = Array.from(this.rules.values()).find(r => r.name === ruleData.name);\r\n      \r\n      if (!existingRule) {\r\n        const rule: NotificationRule = {\r\n          ...ruleData,\r\n          id: `rule_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n          createdAt: Date.now()\r\n        };\r\n        \r\n        this.rules.set(rule.id, rule);\r\n      }\r\n    }\r\n\r\n    await this.saveNotificationRules();\r\n  }\r\n\r\n  private startNotificationScheduler(): void {\r\n    // Check for pending notifications every minute\r\n    setInterval(() => {\r\n      this.processScheduledNotifications();\r\n    }, 60000);\r\n\r\n    // Initial check\r\n    this.processScheduledNotifications();\r\n  }\r\n\r\n  private async processScheduledNotifications(): Promise<void> {\r\n    try {\r\n      const now = Date.now();\r\n      \r\n      // Process time-based notifications\r\n      for (const rule of this.rules.values()) {\r\n        if (!rule.isActive || !this.isRuleEnabled(_rule)) continue;\r\n\r\n        if (rule.trigger.type === 'time_based') {\r\n          const _shouldTrigger = await this.shouldTriggerTimeBasedRule(rule, now);\r\n          if (_shouldTrigger) {\r\n            await this.createAndScheduleNotification(_rule);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Send pending notifications\r\n      await this.sendPendingNotifications();\r\n\r\n    } catch {\r\n      logger.error('Failed to process scheduled notifications:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n    }\r\n  }\r\n\r\n  private async shouldTriggerTimeBasedRule(rule: NotificationRule, now: number): Promise<boolean> {\r\n    try {\r\n      // Check if we're in quiet hours\r\n      if (this.preferences?.quietHours.enabled && this.isInQuietHours()) {\r\n        return false;\r\n      }\r\n\r\n      // Check daily frequency limit\r\n      if (!await this.checkDailyFrequencyLimit()) {\r\n        return false;\r\n      }\r\n\r\n      // Check if rule was already triggered today (for daily rules)\r\n      if (rule.schedule.frequency === 'daily' && rule.lastTriggered) {\r\n        const lastTriggeredDate = new Date(rule.lastTriggered);\r\n        const currentDate = new Date(_now);\r\n        \r\n        if (lastTriggeredDate.toDateString() === currentDate.toDateString()) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      // Parse time pattern (simplified cron-like)\r\n      const timePattern = rule.trigger.parameters.timePattern;\r\n      if (_timePattern) {\r\n        return this.matchesTimePattern(timePattern, now);\r\n      }\r\n\r\n      return false;\r\n\r\n    } catch {\r\n      logger.error('Error checking time-based rule:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private matchesTimePattern(pattern: string, _timestamp: number): boolean {\r\n    const date = new Date(_timestamp);\r\n    const parts = pattern.split(' ');\r\n    const minute = parts[0] || '*';\r\n    const hour = parts[1] || '*';\r\n    \r\n    const currentMinute = date.getMinutes();\r\n    const currentHour = date.getHours();\r\n    \r\n    // Simple pattern matching (full cron implementation would be more complex)\r\n    const minuteMatch = minute === '*' || parseInt(_minute) === currentMinute;\r\n    const hourMatch = hour === '*' || parseInt(_hour) === currentHour;\r\n    \r\n    return minuteMatch && hourMatch;\r\n  }\r\n\r\n  private isInQuietHours(): boolean {\r\n    if (!this.preferences?.quietHours.enabled) return false;\r\n\r\n    const now = new Date();\r\n    const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\r\n    \r\n    const startTime = this.preferences.quietHours.start;\r\n    const endTime = this.preferences.quietHours.end;\r\n    \r\n    // Handle overnight quiet hours (e.g., 22:00 to 08:00)\r\n    if (startTime > endTime) {\r\n      return currentTime >= startTime || currentTime <= endTime;\r\n    } else {\r\n      return currentTime >= startTime && currentTime <= endTime;\r\n    }\r\n  }\r\n\r\n  private async checkDailyFrequencyLimit(): Promise<boolean> {\r\n    const today = new Date().toDateString();\r\n    const todaysNotifications = Array.from(this.notifications.values())\r\n      .filter(n => new Date(n._timestamp).toDateString() === today && n.status === 'sent');\r\n    \r\n    const maxPerDay = this.preferences?.frequency.maxPerDay || 8;\r\n    return todaysNotifications.length < maxPerDay;\r\n  }\r\n\r\n  private isRuleEnabled(rule: NotificationRule): boolean {\r\n    if (!this.preferences?.globalEnabled) return false;\r\n    \r\n    const categoryKey = `${rule.type  }s` as keyof typeof this.preferences.categories;\r\n    return this.preferences.categories[categoryKey] !== false;\r\n  }\r\n\r\n  public async createAndScheduleNotification(\r\n    rule: NotificationRule, \r\n    _customData?: Record<string, any>\r\n  ): Promise<string | null> {\r\n    try {\r\n      // Check if conditions are met\r\n      const conditionsMet = await this.checkConditions(rule.conditions);\r\n      if (!conditionsMet) return null;\r\n\r\n      // Personalize notification content\r\n      const personalizedContent = await this.personalizeContent(rule.content, _customData);\r\n\r\n      const notification: SmartNotification = {\r\n        id: `notification_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n        _ruleId: rule.id,\r\n        title: personalizedContent.title,\r\n        body: personalizedContent.body,\r\n        priority: rule.priority,\r\n        _timestamp: Date.now(),\r\n        scheduledFor: Date.now(),\r\n        status: 'pending',\r\n        actions: personalizedContent.actions || [],\r\n        metadata: {\r\n          userId: this.preferences?.userId || 'anonymous',\r\n          context: _customData,\r\n          personalizedData: personalizedContent.personalizedData\r\n        }\r\n      };\r\n\r\n      this.notifications.set(notification.id, notification);\r\n      \r\n      // Update rule's last triggered time\r\n      rule.lastTriggered = Date.now();\r\n      this.rules.set(rule.id, rule);\r\n      \r\n      await this.saveNotificationRules();\r\n      \r\n      logger.info(`Notification created and scheduled: ${notification.id}`, {\r\n        category: LogCategory.NOTIFICATIONS,\r\n        metadata: { notificationId: notification.id }\r\n      });\r\n      return notification.id;\r\n\r\n    } catch {\r\n      logger.error('Failed to create notification:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private async checkConditions(conditions: NotificationCondition[]): Promise<boolean> {\r\n    if (conditions.length === 0) return true;\r\n\r\n    try {\r\n      // In a real implementation, this would check actual user data\r\n      // For now, return true to allow notifications\r\n      // TODO: Implement actual condition checking logic\r\n      return true;\r\n    } catch (error) {\r\n      logger.error('Error checking notification conditions:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private async personalizeContent(\r\n    content: NotificationContent, \r\n    _customData?: Record<string, any>\r\n  ): Promise<NotificationContent & { personalizedData?: Record<string, any> }> {\r\n    let personalizedTitle = content.title;\r\n    let personalizedBody = content.body;\r\n    const personalizedData: Record<string, any> = {};\r\n\r\n    try {\r\n      // Add user name if requested\r\n      if (content.personalizedElements?.userName) {\r\n        const userName = await this.getUserName();\r\n        if (_userName) {\r\n          personalizedTitle = personalizedTitle.replace(/Good morning!/g, `Good morning, ${userName}!`);\r\n          personalizedData.userName = userName;\r\n        }\r\n      }\r\n\r\n      // Add mood context if requested\r\n      if (content.personalizedElements?.moodContext) {\r\n        const moodContext = await this.getMoodContext();\r\n        if (_moodContext) {\r\n          personalizedData.moodContext = moodContext;\r\n        }\r\n      }\r\n\r\n      // Add progress data if requested\r\n      if (content.personalizedElements?.progressData) {\r\n        const progressData = await this.getProgressData();\r\n        if (progressData) {\r\n          personalizedBody += ` You've made great progress: ${progressData.summary}`;\r\n          personalizedData.progressData = progressData;\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...content,\r\n        title: personalizedTitle,\r\n        body: personalizedBody,\r\n        personalizedData\r\n      };\r\n\r\n    } catch {\r\n      logger.error('Error personalizing content:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n      return content;\r\n    }\r\n  }\r\n\r\n  private async getUserName(): Promise<string | null> {\r\n    try {\r\n      const userProfile = await secureStorage.getItem('user_profile');\r\n      return userProfile?.name || null;\r\n    } catch (_error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private async getMoodContext(): Promise<string | null> {\r\n    try {\r\n      const recentMood = await secureStorage.getItem('recent_mood_data');\r\n      if (recentMood && recentMood.length > 0) {\r\n        const latest = recentMood[recentMood.length - 1];\r\n        return `Last mood: ${latest.mood} (${latest.energy}/10 energy)`;\r\n      }\r\n      return null;\r\n    } catch (_error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private async getProgressData(): Promise<{ summary: string; details: unknown } | null> {\r\n    try {\r\n      // Mock progress data\r\n      return {\r\n        summary: \"3 mood logs this week, 2 breathing sessions completed\",\r\n        details: {\r\n          moodLogs: 3,\r\n          breathingSessions: 2,\r\n          weeklyStreak: 5\r\n        }\r\n      };\r\n    } catch (_error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private async sendPendingNotifications(): Promise<void> {\r\n    const pendingNotifications = Array.from(this.notifications.values())\r\n      .filter(n => n.status === 'pending' && n.scheduledFor <= Date.now());\r\n\r\n    for (const notification of pendingNotifications) {\r\n      await this.sendNotification(notification);\r\n    }\r\n  }\r\n\r\n  private async sendNotification(notification: SmartNotification): Promise<void> {\r\n    try {\r\n      if (!this.preferences?.globalEnabled) return;\r\n\r\n      // Send push notification if enabled and supported\r\n      if (this.preferences.delivery.push && 'Notification' in window && Notification.permission === 'granted') {\r\n        const pushNotification = new Notification(notification.title, {\r\n          body: notification.body,\r\n          icon: '/icons/app-icon-192.png',\r\n          badge: '/icons/badge-72.png',\r\n          tag: notification.id,\r\n          requireInteraction: notification.priority === 'critical',\r\n          actions: notification.actions.slice(0, 2).map(action => ({\r\n            action: action.id,\r\n            title: action.title,\r\n            icon: action.icon\r\n          }))\r\n        });\r\n\r\n        pushNotification.onclick = () => {\r\n          this.handleNotificationClick(notification.id, 'main');\r\n        };\r\n\r\n        // Auto-close non-critical notifications after 10 seconds\r\n        if (notification.priority !== 'critical') {\r\n          setTimeout(() => pushNotification.close(), 10000);\r\n        }\r\n      }\r\n\r\n      // Send in-app notification if enabled\r\n      if (this.preferences.delivery.inApp) {\r\n        this.sendInAppNotification(notification);\r\n      }\r\n\r\n      // Update notification status\r\n      notification.status = 'sent';\r\n      notification.timestamp = Date.now();\r\n      this.notifications.set(notification.id, notification);\r\n\r\n      await this.saveNotifications();\r\n\r\n      logger.info(`Notification sent: ${notification.id}`, {\r\n        category: LogCategory.NOTIFICATIONS,\r\n        metadata: { notificationId: notification.id }\r\n      });\r\n\r\n    } catch {\r\n      logger.error('Failed to send notification:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n      notification.status = 'expired';\r\n      this.notifications.set(notification.id, notification);\r\n    }\r\n  }\r\n\r\n  private sendInAppNotification(notification: SmartNotification): void {\r\n    // Dispatch custom event for in-app notifications\r\n    window.dispatchEvent(new CustomEvent('inAppNotification', {\r\n      detail: {\r\n        id: notification.id,\r\n        title: notification.title,\r\n        body: notification.body,\r\n        priority: notification.priority,\r\n        actions: notification.actions\r\n      }\r\n    }));\r\n  }\r\n\r\n  public async handleNotificationClick(notificationId: string, actionId: string): Promise<void> {\r\n    try {\r\n      const notification = this.notifications.get(_notificationId);\r\n      if (!notification) return;\r\n\r\n      // Update notification status\r\n      notification.status = 'clicked';\r\n      this.notifications.set(notificationId, notification);\r\n\r\n      // Find the action\r\n      const action = notification.actions.find(a => a.id === actionId);\r\n      if (!action) return;\r\n\r\n      // Execute action\r\n      await this.executeNotificationAction(action, notification);\r\n\r\n      await this.saveNotifications();\r\n\r\n    } catch {\r\n      logger.error('Failed to handle notification click:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n    }\r\n  }\r\n\r\n  private async executeNotificationAction(\r\n    action: NotificationAction, \r\n    notification: SmartNotification\r\n  ): Promise<void> {\r\n    try {\r\n      switch (action.action) {\r\n        case 'open_app':\r\n          if (action.parameters?.page) {\r\n            window.location.hash = `#/${action.parameters.page}`;\r\n          } else {\r\n            window.focus();\r\n          }\r\n          break;\r\n\r\n        case 'log_mood':\r\n          window.location.hash = '#/wellness/mood-tracker';\r\n          break;\r\n\r\n        case 'start_breathing':\r\n          window.dispatchEvent(new CustomEvent('startBreathingExercise'));\r\n          break;\r\n\r\n        case 'call_crisis_line':\r\n          window.location.href = 'tel:988';\r\n          break;\r\n\r\n        case 'view_resources':\r\n          window.location.hash = '#/resources';\r\n          break;\r\n\r\n        case 'dismiss':\r\n          if (action.parameters?.snooze) {\r\n            // Snooze notification\r\n            const snoozeTime = action.parameters.snooze * 60 * 1000; // Convert minutes to ms\r\n            notification.scheduledFor = Date.now() + snoozeTime;\r\n            notification.status = 'pending';\r\n          }\r\n          break;\r\n      }\r\n\r\n      logger.info(`Notification action executed: ${action.action}`, {\r\n        category: LogCategory.NOTIFICATIONS,\r\n        metadata: { action: action.action }\r\n      });\r\n\r\n    } catch {\r\n      logger.error('Failed to execute notification action:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n    }\r\n  }\r\n\r\n  public async triggerCrisisNotification(crisisProfile: CrisisProfile): Promise<void> {\r\n    try {\r\n      const crisisRule: Omit<NotificationRule, 'id' | 'createdAt'> = {\r\n        name: 'Crisis Alert',\r\n        type: 'crisis_followup',\r\n        priority: 'critical',\r\n        trigger: {\r\n          type: 'event_based',\r\n          parameters: {\r\n            eventType: 'crisis_detected'\r\n          }\r\n        },\r\n        conditions: [],\r\n        content: {\r\n          title: 'Crisis Support Available 🚨',\r\n          body: 'We detected you might need immediate support. Help is available right now.',\r\n          icon: '/icons/crisis-alert.png',\r\n          actions: [\r\n            {\r\n              id: 'call_911',\r\n              title: 'Call 911',\r\n              icon: '🚨',\r\n              action: 'open_app',\r\n              parameters: { phone: '911' }\r\n            },\r\n            {\r\n              id: 'crisis_chat',\r\n              title: 'Crisis Chat',\r\n              icon: '💬',\r\n              action: 'open_app',\r\n              parameters: { page: 'crisis-chat' }\r\n            },\r\n            {\r\n              id: 'call_988',\r\n              title: 'Call 988',\r\n              icon: '📞',\r\n              action: 'call_crisis_line'\r\n            }\r\n          ]\r\n        },\r\n        schedule: {\r\n          frequency: 'once'\r\n        },\r\n        isActive: true\r\n      };\r\n\r\n      const rule: NotificationRule = {\r\n        ...crisisRule,\r\n        id: `crisis_${Date.now()}`,\r\n        createdAt: Date.now()\r\n      };\r\n\r\n      await this.createAndScheduleNotification(rule, {\r\n        crisisProfile,\r\n        urgency: 'immediate'\r\n      });\r\n\r\n    } catch {\r\n      logger.error('Failed to trigger crisis notification:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n    }\r\n  }\r\n\r\n  public async updatePreferences(updates: Partial<NotificationPreferences>): Promise<void> {\r\n    if (!this.preferences) {\r\n      await this.loadPreferences();\r\n    }\r\n\r\n    if (this.preferences) {\r\n      this.preferences = { ...this.preferences, ...updates };\r\n      await this.savePreferences();\r\n    }\r\n  }\r\n\r\n  public async addCustomRule(rule: Omit<NotificationRule, 'id' | 'createdAt'>): Promise<string> {\r\n    const newRule: NotificationRule = {\r\n      ...rule,\r\n      id: `custom_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      createdAt: Date.now()\r\n    };\r\n\r\n    this.rules.set(newRule.id, newRule);\r\n    await this.saveNotificationRules();\r\n\r\n    return newRule.id;\r\n  }\r\n\r\n  public async removeRule(_ruleId: string): Promise<boolean> {\r\n    const deleted = this.rules.delete(_ruleId);\r\n    if (_deleted) {\r\n      await this.saveNotificationRules();\r\n    }\r\n    return deleted;\r\n  }\r\n\r\n  public getPreferences(): NotificationPreferences | null {\r\n    return this.preferences;\r\n  }\r\n\r\n  public getAllRules(): NotificationRule[] {\r\n    return Array.from(this.rules.values());\r\n  }\r\n\r\n  public getNotificationHistory(): SmartNotification[] {\r\n    return Array.from(this.notifications.values())\r\n      .sort((a, b) => b._timestamp - a._timestamp);\r\n  }\r\n\r\n  private async savePreferences(): Promise<void> {\r\n    if (this.preferences) {\r\n      await secureStorage.setItem('notification_preferences', this.preferences);\r\n    }\r\n  }\r\n\r\n  private async saveNotificationRules(): Promise<void> {\r\n    const rules = Array.from(this.rules.values());\r\n    await secureStorage.setItem('notification_rules', rules);\r\n  }\r\n\r\n  private async saveNotifications(): Promise<void> {\r\n    const notifications = Array.from(this.notifications.values());\r\n    // Keep only last 100 notifications to prevent storage bloat\r\n    const recentNotifications = notifications.slice(-100);\r\n    await secureStorage.setItem('notification_history', recentNotifications);\r\n  }\r\n}\r\n\r\nexport const _comprehensiveNotificationService = new ComprehensiveNotificationService();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\privacy\\privacyService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\professional\\TherapistService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\pushNotifications.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\realtime\\websocketService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1535,1538],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1535,1538],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":389,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":389,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11734,11737],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11734,11737],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":396,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":396,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11951,11954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11951,11954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { io, Socket } from 'socket.io-client';\nimport { toast } from 'react-hot-toast';\nimport { logger } from '../../utils/logger';\n\n// Types for real-time events\nexport interface UserPresence {\n  userId: string;\n  username: string;\n  status: 'online' | 'away' | 'busy' | 'offline';\n  lastSeen: Date;\n  currentRoom?: string;\n}\n\nexport interface TypingIndicator {\n  userId: string;\n  username: string;\n  roomId: string;\n  _isTyping: boolean;\n}\n\nexport interface RealtimeMessage {\n  id: string;\n  roomId: string;\n  userId: string;\n  username: string;\n  content: string;\n  timestamp: Date;\n  type: 'text' | 'system' | 'crisis-alert' | 'moderation';\n  metadata?: {\n    crisisLevel?: 'low' | 'medium' | 'high' | 'critical';\n    edited?: boolean;\n    editedAt?: Date;\n    reactions?: { [emoji: string]: string[] };\n  };\n}\n\nexport interface NotificationEvent {\n  id: string;\n  type: 'message' | 'mention' | 'reply' | 'group-invite' | 'crisis-support' | 'achievement';\n  title: string;\n  content: string;\n  timestamp: Date;\n  read: boolean;\n  actionUrl?: string;\n  priority?: 'low' | 'normal' | 'high' | 'urgent';\n}\n\n// WebSocket service configuration\nconst WEBSOCKET_URL = import.meta.env.VITE_WS_URL || 'ws://localhost:3000';\nconst RECONNECT_ATTEMPTS = 5;\nconst RECONNECT_DELAY = 3000;\n\nclass WebSocketService {\n  private socket: Socket | null = null;\n  private isConnected: boolean = false;\n  private reconnectAttempts: number = 0;\n  private reconnectTimer: NodeJS.Timeout | null = null;\n  private eventHandlers: Map<string, Set<(...args: any[]) => void>> = new Map();\n  private presenceCache: Map<string, UserPresence> = new Map();\n  private typingTimers: Map<string, NodeJS.Timeout> = new Map();\n\n  // Initialize WebSocket connection\n  connect(userId: string, token: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (this.socket?.connected) {\n        resolve();\n        return;\n      }\n\n      try {\n        // Create socket connection with authentication\n        this.socket = io(WEBSOCKET_URL, {\n          auth: { token, userId },\n          reconnection: true,\n          reconnectionDelay: RECONNECT_DELAY,\n          reconnectionAttempts: RECONNECT_ATTEMPTS,\n          timeout: 10000,\n        });\n\n        // Connection event handlers\n        this.socket.on('connect', () => {\n          this.isConnected = true;\n          this.reconnectAttempts = 0;\n          logger.info('WebSocket connected successfully', 'RealtimeWebSocket');\n          this.emit('connection:established', { userId });\n          resolve();\n        });\n\n        this.socket.on('disconnect', (reason: unknown) => {\n          this.isConnected = false;\n          logger.warn('WebSocket disconnected:', reason);\n          this.emit('connection:lost', { reason });\n          this.handleReconnection();\n        });\n\n        this.socket.on('connect_error', (error: unknown) => {\n          logger.error('WebSocket connection error:', error);\n          this.emit('connection:error', { error: error.message });\n          reject(error);\n        });\n\n        // Set up core event listeners\n        this.setupCoreEventListeners();\n      } catch {\n        logger.error('Failed to initialize WebSocket:');\n        reject(_undefined);\n      }\n    });\n  }\n\n  // Set up core event listeners for real-time features\n  private setupCoreEventListeners(): void {\n    if (!this.socket) return;\n\n    // User presence events\n    this.socket.on('presence:update', (data: UserPresence) => {\n      this.presenceCache.set(data.userId, data);\n      this.emit('presence:update', data);\n    });\n\n    this.socket.on('presence:bulk', (users: UserPresence[]) => {\n      users.forEach(user => this.presenceCache.set(user.userId, user));\n      this.emit('presence:bulk', users);\n    });\n\n    // Typing indicators\n    this.socket.on('typing:start', (data: TypingIndicator) => {\n      this.emit('typing:start', data);\n    });\n\n    this.socket.on('typing:stop', (data: TypingIndicator) => {\n      this.emit('typing:stop', data);\n    });\n\n    // Real-time messages\n    this.socket.on('message:new', (message: RealtimeMessage) => {\n      // Check for crisis keywords and handle appropriately\n      if (this.detectCrisisContent(message.content)) {\n        this.handleCrisisMessage(message);\n      }\n      this.emit('message:new', message);\n    });\n\n    this.socket.on('message:update', (message: RealtimeMessage) => {\n      this.emit('message:update', message);\n    });\n\n    this.socket.on('message:delete', (messageId: string) => {\n      this.emit('message:delete', messageId);\n    });\n\n    // Notifications\n    this.socket.on('notification:new', (notification: NotificationEvent) => {\n      this.handleNotification(notification);\n      this.emit('notification:new', notification);\n    });\n\n    // Room events\n    this.socket.on('room:joined', (roomId: string) => {\n      this.emit('room:joined', roomId);\n    });\n\n    this.socket.on('room:left', (roomId: string) => {\n      this.emit('room:left', roomId);\n    });\n\n    // Crisis support events\n    this.socket.on('crisis:alert', (data: unknown) => {\n      this.handleCrisisAlert(data);\n    });\n\n    this.socket.on('support:request', (data: unknown) => {\n      this.emit('support:request', data);\n    });\n  }\n\n  // Send a message to a room\n  sendMessage(roomId: string, content: string, type: 'text' | 'system' = 'text'): void {\n    if (!this.socket?.connected) {\n      toast.error('Not connected to chat server');\n      return;\n    }\n\n    const message = {\n      roomId,\n      content,\n      type,\n      timestamp: new Date(),\n    };\n\n    this.socket.emit('message:send', message);\n  }\n\n  // Join a room (support group, chat room, etc.)\n  joinRoom(roomId: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (!this.socket?.connected) {\n        reject(new Error('Not connected to server'));\n        return;\n      }\n\n      this.socket.emit('room:join', roomId, (response: unknown) => {\n        if (response.success) {\n          resolve();\n        } else {\n          reject(new Error(response.error || 'Failed to join room'));\n        }\n      });\n    });\n  }\n\n  // Leave a room\n  leaveRoom(roomId: string): void {\n    if (!this.socket?.connected) return;\n    this.socket.emit('room:leave', roomId);\n  }\n\n  // Update user presence status\n  updatePresence(status: 'online' | 'away' | 'busy'): void {\n    if (!this.socket?.connected) return;\n    this.socket.emit('presence:update', { status });\n  }\n\n  // Send typing indicator\n  sendTypingIndicator(roomId: string, _isTyping: boolean): void {\n    if (!this.socket?.connected) return;\n\n    // Clear existing timer for this room\n    const _timerId = this.typingTimers.get(_roomId);\n    if (_timerId) {\n      clearTimeout(_timerId);\n      this.typingTimers.delete(_roomId);\n    }\n\n    if (_isTyping) {\n      this.socket.emit('typing:start', { roomId });\n      \n      // Auto-stop typing after 5 seconds\n      const timer = setTimeout(() => {\n        this.sendTypingIndicator(roomId, false);\n      }, 5000);\n      this.typingTimers.set(roomId, timer);\n    } else {\n      this.socket.emit('typing:stop', { roomId });\n    }\n  }\n\n  // React to a message\n  addReaction(messageId: string, emoji: string): void {\n    if (!this.socket?.connected) return;\n    this.socket.emit('message:react', { messageId, emoji });\n  }\n\n  // Request peer support\n  requestPeerSupport(topic: string, urgency: 'low' | 'medium' | 'high'): void {\n    if (!this.socket?.connected) {\n      toast.error('Unable to request support. Please check your connection.');\n      return;\n    }\n\n    this.socket.emit('support:request', { topic, urgency });\n    toast.success('Support request sent. A peer counselor will connect with you soon.');\n  }\n\n  // Report content for moderation\n  reportContent(contentId: string, contentType: 'message' | 'post' | 'comment', reason: string): void {\n    if (!this.socket?.connected) return;\n    \n    this.socket.emit('moderation:report', {\n      contentId,\n      contentType,\n      reason,\n      timestamp: new Date(),\n    });\n    \n    toast.success('Content reported. Our moderation team will review it promptly.');\n  }\n\n  // Crisis content detection\n  private detectCrisisContent(content: string): boolean {\n    const crisisKeywords = [\n      'suicide', 'kill myself', 'end it all', 'self harm',\n      'hurt myself', 'die', 'death wish', 'not worth living'\n    ];\n    \n    const lowerContent = content.toLowerCase();\n    return crisisKeywords.some(_keyword => lowerContent.includes(_keyword));\n  }\n\n  // Handle crisis messages\n  private handleCrisisMessage(message: RealtimeMessage): void {\n    // Alert moderators and crisis counselors\n    this.socket?.emit('crisis:detected', {\n      messageId: message.id,\n      userId: message.userId,\n      roomId: message.roomId,\n      content: message.content,\n      timestamp: message.timestamp,\n    });\n\n    // Update message metadata with crisis flag\n    message.metadata = {\n      ...message.metadata,\n      crisisLevel: this.assessCrisisLevel(message.content),\n    };\n  }\n\n  // Assess crisis level based on content\n  private assessCrisisLevel(content: string): 'low' | 'medium' | 'high' | 'critical' {\n    const lowerContent = content.toLowerCase();\n    \n    if (lowerContent.includes('suicide') || lowerContent.includes('kill myself')) {\n      return 'critical';\n    } else if (lowerContent.includes('hurt myself') || lowerContent.includes('self harm')) {\n      return 'high';\n    } else if (lowerContent.includes('hopeless') || lowerContent.includes('worthless')) {\n      return 'medium';\n    }\n    \n    return 'low';\n  }\n\n  // Handle crisis alerts\n  private handleCrisisAlert(data: unknown): void {\n    // Show urgent notification to available crisis counselors\n    toast.error(`Crisis support needed in ${data.roomName || 'chat'}`, {\n      duration: 10000,\n      icon: '🚨',\n    });\n    \n    this.emit('crisis:alert', data);\n  }\n\n  // Handle notifications\n  private handleNotification(notification: NotificationEvent): void {\n    // Show toast based on priority\n    const options = {\n      duration: notification.priority === 'urgent' ? 10000 : 5000,\n    };\n\n    switch (notification.priority) {\n      case 'urgent':\n        toast.error(notification.content, options);\n        break;\n      case 'high':\n        toast.success(notification.content, options);\n        break;\n      default:\n        toast(notification.content, options);\n    }\n\n    // Play notification sound for high priority\n    if (notification.priority === 'high' || notification.priority === 'urgent') {\n      this.playNotificationSound();\n    }\n  }\n\n  // Play notification sound - DISABLED: Sound was too annoying for users\n  private playNotificationSound(): void {\n    // DISABLED: Sound muted per user feedback - all notification sounds are off\n    return;\n    \n    // Original code kept for reference but disabled:\n    // const audioContext = new (window.AudioContext || (window as unknown).webkitAudioContext)();\n    // const __oscillator = audioContext.createOscillator();\n    // const __gainNode = audioContext.createGain();\n    // ... rest of sound generation code disabled\n  }\n\n  // Handle reconnection\n  private handleReconnection(): void {\n    if (this.reconnectTimer) return;\n    \n    this.reconnectTimer = setTimeout(() => {\n      this.reconnectAttempts++;\n      \n      if (this.reconnectAttempts <= RECONNECT_ATTEMPTS) {\n        logger.info(`Attempting to reconnect... (${this.reconnectAttempts}/${RECONNECT_ATTEMPTS})`, 'RealtimeWebSocket');\n        this.socket?.connect();\n      } else {\n        toast.error('Connection lost. Please refresh the page to reconnect.');\n      }\n      \n      this.reconnectTimer = null;\n    }, RECONNECT_DELAY);\n  }\n\n  // Event emitter methods\n  on(event: string, handler: (...args: unknown[]) => any): void {\n    if (!this.eventHandlers.has(event)) {\n      this.eventHandlers.set(event, new Set());\n    }\n    this.eventHandlers.get(event)?.add(handler);\n  }\n\n  off(event: string, handler: (...args: unknown[]) => any): void {\n    this.eventHandlers.get(event)?.delete(handler);\n  }\n\n  private emit(event: string, data?: unknown): void {\n    this.eventHandlers.get(event)?.forEach(handler => handler(data));\n  }\n\n  // Get current presence for a user\n  getUserPresence(userId: string): UserPresence | undefined {\n    return this.presenceCache.get(userId);\n  }\n\n  // Get all online users\n  getOnlineUsers(): UserPresence[] {\n    return Array.from(this.presenceCache.values()).filter(\n      user => user.status === 'online'\n    );\n  }\n\n  // Disconnect from WebSocket\n  disconnect(): void {\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n    \n    this.typingTimers.forEach(timer => clearTimeout(timer));\n    this.typingTimers.clear();\n    \n    this.socket?.disconnect();\n    this.socket = null;\n    this.isConnected = false;\n    this.presenceCache.clear();\n    this.eventHandlers.clear();\n  }\n\n  // Check connection status\n  isConnectedToServer(): boolean {\n    return this.isConnected && this.socket?.connected === true;\n  }\n\n  // Get socket instance (for advanced usage)\n  getSocket(): Socket | null {\n    return this.socket;\n  }\n}\n\n// Export singleton instance\nexport const _websocketService = new WebSocketService();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\security\\HIPAAComplianceService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1499,1502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1499,1502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1943,1946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1943,1946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":230,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6700,6703],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6700,6703],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":243,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7087,7090],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7087,7090],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":318,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":318,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9211,9214],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9211,9214],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":384,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":384,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10903,10906],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10903,10906],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":409,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":409,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11527,11530],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11527,11530],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// HIPAA Compliance and Security Service\n// Ensures all PHI (Protected Health Information) is handled according to HIPAA standards\n\nimport CryptoJS from 'crypto-js';\nimport { _secureStorage } from './SecureLocalStorage';\nimport { logger } from '../../utils/logger';\n\n// HIPAA compliance requirements\nexport enum ComplianceRequirement {\n  ENCRYPTION_AT_REST = 'encryption_at_rest',\n  ENCRYPTION_IN_TRANSIT = 'encryption_in_transit',\n  ACCESS_CONTROL = 'access_control',\n  AUDIT_LOGGING = 'audit_logging',\n  DATA_INTEGRITY = 'data_integrity',\n  TRANSMISSION_SECURITY = 'transmission_security',\n  DATA_BACKUP = 'data_backup',\n  DISASTER_RECOVERY = 'disaster_recovery',\n  BREACH_NOTIFICATION = 'breach_notification',\n  MINIMUM_NECESSARY = 'minimum_necessary'\n}\n\n// PHI field types\nexport enum PHIFieldType {\n  NAME = 'name',\n  DATE_OF_BIRTH = 'date_of_birth',\n  SSN = 'ssn',\n  MEDICAL_RECORD = 'medical_record',\n  HEALTH_PLAN = 'health_plan',\n  ACCOUNT_NUMBER = 'account_number',\n  CERTIFICATE_LICENSE = 'certificate_license',\n  VEHICLE_ID = 'vehicle_id',\n  DEVICE_ID = 'device_id',\n  WEB_URL = 'web_url',\n  IP_ADDRESS = 'ip_address',\n  BIOMETRIC = 'biometric',\n  PHOTO = 'photo',\n  OTHER_UNIQUE_ID = 'other_unique_id'\n}\n\n// Audit log entry\nexport interface AuditLogEntry {\n  id: string;\n  timestamp: Date;\n  userId: string;\n  action: string;\n  _resourceType: string;\n  resourceId: string;\n  ipAddress: string;\n  userAgent: string;\n  result: 'success' | 'failure' | 'denied';\n  details?: Record<string, any>;\n  phiAccessed?: boolean;\n  dataFields?: string[];\n}\n\n// Encryption configuration\ninterface EncryptionConfig {\n  algorithm: string;\n  keySize: number;\n  iterations: number;\n  saltSize: number;\n}\n\n// Access control entry\nexport interface AccessControlEntry {\n  userId: string;\n  _resourceType: string;\n  resourceId?: string;\n  permissions: string[];\n  grantedBy: string;\n  grantedAt: Date;\n  expiresAt?: Date;\n  conditions?: Record<string, any>;\n}\n\n// Data retention policy\nexport interface RetentionPolicy {\n  dataType: string;\n  retentionPeriod: number; // in days\n  purgeAfter: number; // in days\n  archiveRequired: boolean;\n  legalHold?: boolean;\n}\n\n// Breach notification\nexport interface BreachNotification {\n  id: string;\n  detectedAt: Date;\n  reportedAt?: Date;\n  affectedUsers: string[];\n  dataTypes: PHIFieldType[];\n  severity: 'low' | 'medium' | 'high' | '_critical';\n  description: string;\n  remediation: string;\n  notificationsSent: boolean;\n}\n\n// HIPAA Compliance Service Class\nexport class HIPAAComplianceService {\n  private static instance: HIPAAComplianceService;\n  private encryptionKey: string;\n  private auditQueue: AuditLogEntry[] = [];\n  private encryptionConfig: EncryptionConfig = {\n    algorithm: 'AES',\n    keySize: 256,\n    iterations: 10000,\n    saltSize: 128\n  };\n  private retentionPolicies: Map<string, RetentionPolicy> = new Map();\n  private accessControlList: Map<string, AccessControlEntry[]> = new Map();\n\n  private constructor() {\n    this.encryptionKey = this.getOrGenerateEncryptionKey();\n    this.initializeRetentionPolicies();\n    this.startAuditProcessor();\n  }\n\n  // Singleton pattern\n  public static getInstance(): HIPAAComplianceService {\n    if (!HIPAAComplianceService.instance) {\n      HIPAAComplianceService.instance = new HIPAAComplianceService();\n    }\n    return HIPAAComplianceService.instance;\n  }\n\n  // Initialize encryption key\n  private getOrGenerateEncryptionKey(): string {\n    // SECURITY FIX: Never store encryption keys in localStorage\n    // Use environment variables or secure key management service\n    \n    // Get key from environment variable (secure approach)\n    let key = import.meta.env.VITE_ENCRYPTION_KEY;\n    \n    if (!key) {\n      // Generate a temporary key for development ONLY\n      // WARNING: This key will not persist between sessions\n      key = `temp_key_${  Date.now()  }_${  Math.random().toString(36)}`;\n      \n      // Log warning about temporary key\n      logger.warn('⚠️ Using temporary encryption key. Set VITE_ENCRYPTION_KEY for production.');\n      \n      // NEVER store in localStorage - this was the critical vulnerability\n      // secureStorage.setItem('hipaa_encryption_key', key); // REMOVED\n    }\n    \n    return key;\n  }\n\n  // Initialize retention policies\n  private initializeRetentionPolicies(): void {\n    // Set default retention policies based on HIPAA requirements\n    this.retentionPolicies.set('medical_records', {\n      dataType: 'medical_records',\n      retentionPeriod: 2190, // 6 years\n      purgeAfter: 2555, // 7 years\n      archiveRequired: true\n    });\n\n    this.retentionPolicies.set('audit_logs', {\n      dataType: 'audit_logs',\n      retentionPeriod: 2190, // 6 years\n      purgeAfter: 2555, // 7 years\n      archiveRequired: true\n    });\n\n    this.retentionPolicies.set('appointment_records', {\n      dataType: 'appointment_records',\n      retentionPeriod: 2190, // 6 years\n      purgeAfter: 2555, // 7 years\n      archiveRequired: true\n    });\n\n    this.retentionPolicies.set('crisis_sessions', {\n      dataType: 'crisis_sessions',\n      retentionPeriod: 2555, // 7 years (_critical mental health data)\n      purgeAfter: 3650, // 10 years\n      archiveRequired: true\n    });\n\n    this.retentionPolicies.set('community_posts', {\n      dataType: 'community_posts',\n      retentionPeriod: 365, // 1 year\n      purgeAfter: 730, // 2 years\n      archiveRequired: false\n    });\n  }\n\n  // Start audit log processor\n  private startAuditProcessor(): void {\n    // Process audit queue every 5 seconds\n    setInterval(() => {\n      this.flushAuditQueue();\n    }, 5000);\n  }\n\n  // ============================================\n  // Encryption Methods\n  // ============================================\n\n  // Encrypt PHI data\n  public encryptPHI(data: string): string {\n    try {\n      const encrypted = CryptoJS.AES.encrypt(data, this.encryptionKey);\n      \n      return encrypted.toString();\n    } catch {\n      this.logSecurityEvent('encryption_failure', { error: 'Processing error' });\n      throw new Error('Failed to encrypt PHI data');\n    }\n  }\n\n  // Decrypt PHI data\n  public decryptPHI(encryptedData: string): string {\n    try {\n      const decrypted = CryptoJS.AES.decrypt(encryptedData, this.encryptionKey);\n      \n      return decrypted.toString(CryptoJS.enc.Utf8);\n    } catch {\n      this.logSecurityEvent('decryption_failure', { error: 'Processing error' });\n      throw new Error('Failed to decrypt PHI data');\n    }\n  }\n\n  // Hash sensitive identifiers\n  public hashIdentifier(identifier: string): string {\n    return btoa(identifier + this.encryptionKey).replace(/[^A-Za-z0-9]/g, '');\n  }\n\n  // Encrypt object with PHI fields\n  public encryptObject<T extends Record<string, any>>(obj: T, phiFields: string[]): T {\n    const encrypted = { ...obj } as unknown;\n    \n    for (const field of phiFields) {\n      if (field in encrypted && encrypted[field]) {\n        encrypted[field] = this.encryptPHI(JSON.stringify(encrypted[field]));\n      }\n    }\n    \n    return encrypted;\n  }\n\n  // Decrypt object with PHI fields\n  public decryptObject<T extends Record<string, any>>(obj: T, phiFields: string[]): T {\n    const decrypted = { ...obj } as unknown;\n    \n    for (const field of phiFields) {\n      if (field in decrypted && decrypted[field]) {\n        try {\n          decrypted[field] = JSON.parse(this.decryptPHI(decrypted[field]));\n        } catch {\n          // If not JSON, return as string\n          decrypted[field] = this.decryptPHI(decrypted[field]);\n        }\n      }\n    }\n    \n    return decrypted;\n  }\n\n  // ============================================\n  // Access Control Methods\n  // ============================================\n\n  // Check access permission\n  public async checkAccess(\n    userId: string,\n    _resourceType: string,\n    resourceId: string,\n    permission: string\n  ): Promise<boolean> {\n    // Log access attempt\n    this.auditAccess(userId, _resourceType, resourceId, 'access_check', { permission });\n    \n    // Get user's access control entries\n    const userAcl = this.accessControlList.get(userId) || [];\n    \n    // Check for matching permission\n    const hasAccess = userAcl.some(acl => {\n      // Check resource type match\n      if (acl._resourceType !== _resourceType) return false;\n      \n      // Check resource ID match (if specified)\n      if (acl.resourceId && acl.resourceId !== resourceId) return false;\n      \n      // Check permission\n      if (!acl.permissions.includes(_permission)) return false;\n      \n      // Check expiration\n      if (acl.expiresAt && acl.expiresAt < new Date()) return false;\n      \n      // Check conditions\n      if (acl.conditions) {\n        // Implement condition checking logic\n        // For example: time-based, location-based, etc.\n      }\n      \n      return true;\n    });\n    \n    // Log result\n    this.auditAccess(userId, _resourceType, resourceId, 'access_result', {\n      permission,\n      granted: hasAccess\n    });\n    \n    return hasAccess;\n  }\n\n  // Grant access\n  public grantAccess(\n    userId: string,\n    _resourceType: string,\n    permissions: string[],\n    grantedBy: string,\n    options?: {\n      resourceId?: string;\n      expiresIn?: number; // minutes\n      conditions?: Record<string, any>;\n    }\n  ): void {\n    const _entry: AccessControlEntry = {\n      userId,\n      _resourceType,\n      resourceId: options?.resourceId,\n      permissions,\n      grantedBy,\n      grantedAt: new Date(),\n      expiresAt: options?.expiresIn \n        ? new Date(Date.now() + options.expiresIn * 60000)\n        : undefined,\n      conditions: options?.conditions\n    };\n    \n    if (!this.accessControlList.has(userId)) {\n      this.accessControlList.set(userId, []);\n    }\n    \n    this.accessControlList.get(userId)!.push(_entry);\n    \n    // Audit the grant\n    this.auditAccess(grantedBy, 'access_control', userId, 'grant_access', {\n      _resourceType,\n      permissions,\n      expiresAt: _entry.expiresAt\n    });\n  }\n\n  // Revoke access\n  public revokeAccess(\n    userId: string,\n    _resourceType: string,\n    resourceId?: string,\n    revokedBy?: string\n  ): void {\n    const userAcl = this.accessControlList.get(userId);\n    \n    if (userAcl) {\n      const __filtered   = userAcl.filter(acl => {\n        if (acl._resourceType !== _resourceType) return true;\n        if (resourceId && acl.resourceId !== resourceId) return true;\n        return false;\n      });\n      \n      this.accessControlList.set(userId, filtered);\n    }\n    \n    // Audit the revocation\n    this.auditAccess(revokedBy || 'system', 'access_control', userId, 'revoke_access', {\n      _resourceType,\n      resourceId\n    });\n  }\n\n  // ============================================\n  // Audit Logging Methods\n  // ============================================\n\n  // Log PHI access\n  public auditAccess(\n    userId: string,\n    _resourceType: string,\n    resourceId: string,\n    action: string,\n    details?: Record<string, any>\n  ): void {\n    const _entry: AuditLogEntry = {\n      id: this.generateAuditId(),\n      timestamp: new Date(),\n      userId,\n      action,\n      _resourceType,\n      resourceId,\n      ipAddress: this.getClientIP(),\n      userAgent: navigator.userAgent,\n      result: 'success',\n      details,\n      phiAccessed: this.isPHIResource(_resourceType)\n    };\n    \n    this.auditQueue.push(_entry);\n    \n    // Flush immediately for critical actions\n    if (this.isCriticalAction(_action)) {\n      this.flushAuditQueue();\n    }\n  }\n\n  // Log security event\n  public logSecurityEvent(eventType: string, details: Record<string, any>): void {\n    const _entry: AuditLogEntry = {\n      id: this.generateAuditId(),\n      timestamp: new Date(),\n      userId: this.getCurrentUserId(),\n      action: `security:${eventType}`,\n      _resourceType: 'security',\n      resourceId: '',\n      ipAddress: this.getClientIP(),\n      userAgent: navigator.userAgent,\n      result: 'failure',\n      details\n    };\n    \n    this.auditQueue.push(_entry);\n    this.flushAuditQueue(); // Security events are always flushed immediately\n  }\n\n  // Flush audit queue to storage\n  private async flushAuditQueue(): Promise<void> {\n    if (this.auditQueue.length === 0) return;\n    \n    const entries = [...this.auditQueue];\n    this.auditQueue = [];\n    \n    try {\n      // Send to audit logging service\n      await fetch('/api/audit/log', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ entries })\n      });\n    } catch {\n      logger.error('Failed to flush audit logs:');\n      \n      // Re-queue failed entries\n      this.auditQueue.unshift(...entries);\n    }\n  }\n\n  // ============================================\n  // Data Integrity Methods\n  // ============================================\n\n  // Generate checksum for data integrity\n  public generateChecksum(data: string): string {\n    return btoa(data).substring(0, 32);\n  }\n\n  // Verify data integrity\n  public verifyIntegrity(data: string, checksum: string): boolean {\n    const calculatedChecksum = this.generateChecksum(data);\n    return calculatedChecksum === checksum;\n  }\n\n  // Sign data for non-repudiation\n  public signData(data: string): string {\n    const signature = btoa(data + this.encryptionKey).substring(0, 32);\n    return `${data}.${signature}`;\n  }\n\n  // Verify signed data\n  public verifySignature(signedData: string): boolean {\n    const parts = signedData.split('.');\n    if (parts.length !== 2) return false;\n    \n    const [data, signature] = parts;\n    const calculatedSignature = btoa(data + this.encryptionKey).substring(0, 32);\n    \n    return signature === calculatedSignature;\n  }\n\n  // ============================================\n  // Data Retention & Disposal Methods\n  // ============================================\n\n  // Check if data should be retained\n  public shouldRetainData(dataType: string, createdDate: Date): boolean {\n    const policy = this.retentionPolicies.get(dataType);\n    if (!policy) return true; // Default to retention if no policy\n    \n    const ageInDays = (Date.now() - createdDate.getTime()) / (1000 * 60 * 60 * 24);\n    return ageInDays < policy.retentionPeriod;\n  }\n\n  // Check if data should be purged\n  public shouldPurgeData(dataType: string, createdDate: Date): boolean {\n    const policy = this.retentionPolicies.get(dataType);\n    if (!policy) return false; // Default to no purge if no policy\n    \n    if (policy.legalHold) return false; // Don't purge if under legal hold\n    \n    const ageInDays = (Date.now() - createdDate.getTime()) / (1000 * 60 * 60 * 24);\n    return ageInDays > policy.purgeAfter;\n  }\n\n  // Securely dispose of data\n  public async secureDispose(dataType: string, dataId: string): Promise<void> {\n    // Audit the disposal\n    this.auditAccess('system', dataType, dataId, 'secure_disposal', {\n      timestamp: new Date().toISOString()\n    });\n    \n    // In production, this would:\n    // 1. Delete from primary storage\n    // 2. Delete from backups (after retention period)\n    // 3. Overwrite memory locations\n    // 4. Update disposal records\n    \n    logger.info(`Securely disposed ${dataType} with ID ${dataId}`, 'HIPAACompliance', { isPrivacySafe: true });\n  }\n\n  // ============================================\n  // Breach Detection & Response\n  // ============================================\n\n  // Detect potential breach\n  public detectBreach(_indicators: {\n    unusualAccess?: boolean;\n    multipleFailedAttempts?: boolean;\n    unauthorizedDataAccess?: boolean;\n    abnormalDataVolume?: boolean;\n  }): boolean {\n    const breachScore = Object.values(_indicators).filter(v => v).length;\n    return breachScore >= 2; // Breach detected if 2+ _indicators\n  }\n\n  // Report breach\n  public async reportBreach(breach: Omit<BreachNotification, 'id' | 'reportedAt'>): Promise<void> {\n    const notification: BreachNotification = {\n      ...breach,\n      id: this.generateBreachId(),\n      reportedAt: new Date()\n    };\n    \n    // Log the breach\n    this.logSecurityEvent('breach_detected', notification);\n    \n    // In production, this would:\n    // 1. Notify security team\n    // 2. Notify affected users (within 60 days per HIPAA)\n    // 3. Notify HHS (within 60 days)\n    // 4. Notify media if > 500 individuals affected\n    // 5. Document remediation steps\n    \n    // Send breach notification\n    await this.sendBreachNotifications(_notification);\n  }\n\n  // Send breach notifications\n  private async sendBreachNotifications(breach: BreachNotification): Promise<void> {\n    // Notify affected users\n    for (const userId of breach.affectedUsers) {\n      await this.notifyUser(userId, breach);\n    }\n    \n    // Notify authorities if required\n    if (breach.affectedUsers.length > 500) {\n      await this.notifyAuthorities(breach);\n    }\n    \n    breach.notificationsSent = true;\n  }\n\n  // ============================================\n  // Compliance Validation Methods\n  // ============================================\n\n  // Validate HIPAA compliance\n  public validateCompliance(): Record<ComplianceRequirement, boolean> {\n    return {\n      [ComplianceRequirement.ENCRYPTION_AT_REST]: this.validateEncryptionAtRest(),\n      [ComplianceRequirement.ENCRYPTION_IN_TRANSIT]: this.validateEncryptionInTransit(),\n      [ComplianceRequirement.ACCESS_CONTROL]: this.validateAccessControl(),\n      [ComplianceRequirement.AUDIT_LOGGING]: this.validateAuditLogging(),\n      [ComplianceRequirement.DATA_INTEGRITY]: this.validateDataIntegrity(),\n      [ComplianceRequirement.TRANSMISSION_SECURITY]: this.validateTransmissionSecurity(),\n      [ComplianceRequirement.DATA_BACKUP]: this.validateDataBackup(),\n      [ComplianceRequirement.DISASTER_RECOVERY]: this.validateDisasterRecovery(),\n      [ComplianceRequirement.BREACH_NOTIFICATION]: this.validateBreachNotification(),\n      [ComplianceRequirement.MINIMUM_NECESSARY]: this.validateMinimumNecessary()\n    };\n  }\n\n  // Individual validation methods\n  private validateEncryptionAtRest(): boolean {\n    // Check if encryption is properly configured\n    return this.encryptionConfig.keySize >= 256;\n  }\n\n  private validateEncryptionInTransit(): boolean {\n    // Check if HTTPS is enforced\n    return window.location.protocol === 'https:';\n  }\n\n  private validateAccessControl(): boolean {\n    // Check if access control is implemented\n    return this.accessControlList.size > 0;\n  }\n\n  private validateAuditLogging(): boolean {\n    // Check if audit logging is active\n    return true; // Always true as we're logging\n  }\n\n  private validateDataIntegrity(): boolean {\n    // Check if data integrity measures are in place\n    return true;\n  }\n\n  private validateTransmissionSecurity(): boolean {\n    // Check if secure transmission is enforced\n    return window.location.protocol === 'https:';\n  }\n\n  private validateDataBackup(): boolean {\n    // Check if backup procedures are in place\n    // In production, check backup service status\n    return true;\n  }\n\n  private validateDisasterRecovery(): boolean {\n    // Check if disaster recovery plan exists\n    // In production, check DR service status\n    return true;\n  }\n\n  private validateBreachNotification(): boolean {\n    // Check if breach notification procedures are in place\n    return true;\n  }\n\n  private validateMinimumNecessary(): boolean {\n    // Check if minimum necessary standard is enforced\n    return true;\n  }\n\n  // ============================================\n  // Utility Methods\n  // ============================================\n\n  private generateAuditId(): string {\n    return `audit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateBreachId(): string {\n    return `breach_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private getClientIP(): string {\n    // In production, get from server headers\n    return '127.0.0.1';\n  }\n\n  private getCurrentUserId(): string {\n    // SECURITY FIX: Get user ID from secure authentication context\n    // instead of localStorage which is vulnerable to XSS\n    \n    // TODO: Implement secure user ID retrieval from authentication context\n    // When implementing, wrap in try-catch:\n    // try {\n    //   const authService = AuthService.getInstance();\n    //   return authService.getCurrentUserId();\n    // } catch (error) {\n    //   return 'anonymous';\n    // }\n    \n    // For now, return anonymous to prevent localStorage access\n    return 'anonymous';\n  }\n\n  private isPHIResource(_resourceType: string): boolean {\n    const phiResources = [\n      'medical_record',\n      'appointment',\n      'prescription',\n      'lab_result',\n      'diagnosis',\n      'treatment_plan',\n      'mood_entry',\n      'crisis_session',\n      'safety_plan'\n    ];\n    \n    return phiResources.includes(_resourceType);\n  }\n\n  private isCriticalAction(action: string): boolean {\n    const criticalActions = [\n      'delete',\n      'export',\n      'share',\n      'breach',\n      'security',\n      'access_denied'\n    ];\n    \n    return criticalActions.some(_critical => action.includes(_critical));\n  }\n\n  private async notifyUser(userId: string, breach: BreachNotification): Promise<void> {\n    // Send notification to user\n    logger.crisis(`Notifying user about HIPAA breach`, '_critical', 'HIPAACompliance', { userId, breachId: breach.id });\n  }\n\n  private async notifyAuthorities(breach: BreachNotification): Promise<void> {\n    // Notify HHS and other required authorities\n    logger.crisis(`Notifying authorities about HIPAA breach`, '_critical', 'HIPAACompliance', { breachId: breach.id });\n  }\n}\n\n// Export singleton instance\nexport const __hipaaService = HIPAAComplianceService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\security\\SecureLocalStorage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\security\\auditLogger.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[626,629],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[626,629],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3039,3042],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3039,3042],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Audit Logging Service\n * HIPAA-compliant audit logging for security events and data access\n * Maintains immutable audit trail for compliance requirements\n */\n\nimport { secureStorage } from './secureStorage';\nimport { cryptoService } from './cryptoService';\nimport { logger } from '../../utils/logger';\n\nexport interface AuditLogEntry {\n  id: string;\n  timestamp: Date;\n  event: AuditEventType;\n  userId?: string;\n  sessionId?: string;\n  ipAddress?: string;\n  userAgent?: string;\n  resourceId?: string;\n  resourceType?: string;\n  action?: string;\n  outcome: 'success' | 'failure' | 'partial';\n  details?: Record<string, any>;\n  severity: 'info' | 'warning' | 'error' | 'critical';\n  signature?: string;\n}\n\nexport type AuditEventType =\n  | 'USER_LOGIN'\n  | 'USER_LOGOUT'\n  | 'USER_REGISTRATION'\n  | 'LOGIN_FAILED'\n  | 'REGISTRATION_FAILED'\n  | 'PASSWORD_CHANGE'\n  | 'PASSWORD_RESET_REQUESTED'\n  | 'PASSWORD_RESET_COMPLETED'\n  | 'PASSWORD_RESET_FAILED'\n  | 'PROFILE_UPDATED'\n  | 'PROFILE_UPDATE_FAILED'\n  | 'DATA_ACCESS'\n  | 'DATA_MODIFICATION'\n  | 'DATA_DELETION'\n  | 'PERMISSION_GRANTED'\n  | 'PERMISSION_DENIED'\n  | 'MFA_ENABLED'\n  | 'MFA_DISABLED'\n  | 'MFA_CHALLENGE_SUCCESS'\n  | 'MFA_CHALLENGE_FAILED'\n  | 'SESSION_TIMEOUT'\n  | 'SUSPICIOUS_ACTIVITY'\n  | 'SECURITY_ALERT'\n  | 'COMPLIANCE_VIOLATION'\n  | 'EMERGENCY_ACCESS'\n  | 'CRISIS_INTERVENTION'\n  | 'PHI_ACCESS'\n  | 'PHI_MODIFICATION'\n  | 'PHI_EXPORT'\n  | 'CONSENT_GRANTED'\n  | 'CONSENT_REVOKED'\n  | 'SYSTEM_ERROR'\n  | 'CONFIGURATION_CHANGE';\n\ninterface AuditLogConfig {\n  maxLogsInMemory: number;\n  persistenceInterval: number;\n  retentionDays: number;\n  enableEncryption: boolean;\n  enableSignatures: boolean;\n}\n\nclass AuditLoggerService {\n  private static instance: AuditLoggerService;\n  private logs: AuditLogEntry[] = [];\n  private config: AuditLogConfig = {\n    maxLogsInMemory: 1000,\n    persistenceInterval: 60000, // 1 minute\n    retentionDays: 2555, // 7 years for HIPAA compliance\n    enableEncryption: true,\n    enableSignatures: true,\n  };\n  private persistenceTimer: NodeJS.Timeout | null = null;\n  private sessionInfo: {\n    sessionId?: string;\n    userId?: string;\n    ipAddress?: string;\n    userAgent?: string;\n  } = {};\n\n  private constructor() {\n    this.initializeLogger();\n  }\n\n  static getInstance(): AuditLoggerService {\n    if (!AuditLoggerService.instance) {\n      AuditLoggerService.instance = new AuditLoggerService();\n    }\n    return AuditLoggerService.instance;\n  }\n\n  private initializeLogger(): void {\n    // Load existing logs from storage\n    this.loadStoredLogs();\n    \n    // Set up automatic persistence\n    this.setupAutoPersistence();\n    \n    // Set up retention cleanup\n    this.setupRetentionCleanup();\n    \n    // Capture session information\n    this.captureSessionInfo();\n  }\n\n  /**\n   * Log an audit event\n   */\n  async log(params: {\n    event: AuditEventType;\n    userId?: string;\n    resourceId?: string;\n    resourceType?: string;\n    action?: string;\n    outcome?: 'success' | 'failure' | 'partial';\n    details?: Record<string, any>;\n    severity: 'info' | 'warning' | 'error' | 'critical';\n  }): Promise<void> {\n    try {\n      // Create log entry\n      const entry: AuditLogEntry = {\n        id: cryptoService.generateSecureUUID(),\n        timestamp: new Date(),\n        event: params.event,\n        userId: params.userId || this.sessionInfo.userId,\n        sessionId: this.sessionInfo.sessionId,\n        ipAddress: this.sessionInfo.ipAddress,\n        userAgent: this.sessionInfo.userAgent,\n        resourceId: params.resourceId,\n        resourceType: params.resourceType,\n        action: params.action,\n        outcome: params.outcome || 'success',\n        details: params.details,\n        severity: params.severity,\n      };\n\n      // Add signature if enabled\n      if (this.config.enableSignatures) {\n        entry.signature = await this.signLogEntry(_entry);\n      }\n\n      // Add to memory buffer\n      this.logs.push(_entry);\n\n      // Check if immediate persistence is needed\n      if (this.shouldPersistImmediately(_entry)) {\n        await this.persistLogs();\n      }\n\n      // Trim memory buffer if needed\n      if (this.logs.length > this.config.maxLogsInMemory) {\n        await this.persistLogs();\n      }\n\n      // Send critical events to monitoring service\n      if (entry.severity === 'critical') {\n        this.notifyCriticalEvent(_entry);\n      }\n    } catch {\n      logger.error('Failed to log audit event:');\n      // Audit logging should never throw - fail silently but log to console\n    }\n  }\n\n  /**\n   * Query audit logs\n   */\n  async query(filters: {\n    startDate?: Date;\n    endDate?: Date;\n    userId?: string;\n    event?: AuditEventType;\n    severity?: string;\n    resourceId?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<AuditLogEntry[]> {\n    try {\n      // Get all logs (from memory and storage)\n      const allLogs = await this.getAllLogs();\n      \n      // Apply filters\n      let filteredLogs = allLogs;\n      \n      if (filters.startDate) {\n        filteredLogs = filteredLogs.filter(\n          log => new Date(log.timestamp) >= filters.startDate!\n        );\n      }\n      \n      if (filters.endDate) {\n        filteredLogs = filteredLogs.filter(\n          log => new Date(log.timestamp) <= filters.endDate!\n        );\n      }\n      \n      if (filters.userId) {\n        filteredLogs = filteredLogs.filter(\n          log => log.userId === filters.userId\n        );\n      }\n      \n      if (filters.event) {\n        filteredLogs = filteredLogs.filter(\n          log => log.event === filters.event\n        );\n      }\n      \n      if (filters.severity) {\n        filteredLogs = filteredLogs.filter(\n          log => log.severity === filters.severity\n        );\n      }\n      \n      if (filters.resourceId) {\n        filteredLogs = filteredLogs.filter(\n          log => log.resourceId === filters.resourceId\n        );\n      }\n      \n      // Sort by timestamp (newest first)\n      filteredLogs.sort((a, b) => \n        new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n      );\n      \n      // Apply pagination\n      const offset = filters.offset || 0;\n      const limit = filters.limit || 100;\n      \n      return filteredLogs.slice(offset, offset + limit);\n    } catch {\n      logger.error('Failed to query audit logs:');\n      return [];\n    }\n  }\n\n  /**\n   * Export audit logs for compliance reporting\n   */\n  async exportLogs(\n    startDate: Date,\n    endDate: Date,\n    format: 'json' | 'csv' = 'json'\n  ): Promise<string> {\n    try {\n      const logs = await this.query({ startDate, endDate });\n      \n      if (format === 'json') {\n        return JSON.stringify(logs, null, 2);\n      } else {\n        return this.convertToCSV(_logs);\n      }\n    } catch {\n      logger.error('Failed to export audit logs:');\n      throw new Error('Export failed');\n    }\n  }\n\n  /**\n   * Verify log integrity\n   */\n  async verifyLogIntegrity(log: AuditLogEntry): Promise<boolean> {\n    if (!log.signature || !this.config.enableSignatures) {\n      return true; // No signature to verify\n    }\n    \n    try {\n      const logWithoutSignature = { ...log };\n      delete logWithoutSignature.signature;\n      \n      const dataToVerify = JSON.stringify(_logWithoutSignature);\n      return await cryptoService.verifySignature(\n        dataToVerify,\n        log.signature\n      );\n    } catch {\n      logger.error('Failed to verify log integrity:');\n      return false;\n    }\n  }\n\n  /**\n   * Get audit statistics\n   */\n  async getStatistics(_period: 'day' | 'week' | 'month' = 'day'): Promise<{\n    totalEvents: number;\n    byEvent: Record<string, number>;\n    bySeverity: Record<string, number>;\n    byUser: Record<string, number>;\n    failureRate: number;\n    criticalEvents: number;\n  }> {\n    const now = new Date();\n    const startDate = new Date();\n    \n    switch (_period) {\n      case 'day':\n        startDate.setDate(now.getDate() - 1);\n        break;\n      case 'week':\n        startDate.setDate(now.getDate() - 7);\n        break;\n      case 'month':\n        startDate.setMonth(now.getMonth() - 1);\n        break;\n    }\n    \n    const logs = await this.query({ startDate, endDate: now });\n    \n    const __stats = {\n      totalEvents: logs.length,\n      byEvent: {} as Record<string, number>,\n      bySeverity: {} as Record<string, number>,\n      byUser: {} as Record<string, number>,\n      failureRate: 0,\n      criticalEvents: 0,\n    };\n    \n    let failures = 0;\n    \n    logs.forEach(log => {\n      // Count by event type\n      stats.byEvent[log.event] = (stats.byEvent[log.event] || 0) + 1;\n      \n      // Count by severity\n      stats.bySeverity[log.severity] = (stats.bySeverity[log.severity] || 0) + 1;\n      \n      // Count by user\n      if (log.userId) {\n        stats.byUser[log.userId] = (stats.byUser[log.userId] || 0) + 1;\n      }\n      \n      // Count failures\n      if (log.outcome === 'failure') {\n        failures++;\n      }\n      \n      // Count critical events\n      if (log.severity === 'critical') {\n        stats.criticalEvents++;\n      }\n    });\n    \n    stats.failureRate = logs.length > 0 ? (failures / logs.length) * 100 : 0;\n    \n    return stats;\n  }\n\n  /**\n   * Update session information\n   */\n  updateSessionInfo(info: {\n    sessionId?: string;\n    userId?: string;\n    ipAddress?: string;\n    userAgent?: string;\n  }): void {\n    this.sessionInfo = { ...this.sessionInfo, ...info };\n  }\n\n  /**\n   * Private helper methods\n   */\n  private async loadStoredLogs(): Promise<void> {\n    try {\n      const storedLogs = await secureStorage.getItem('audit_logs');\n      if (storedLogs && Array.isArray(_storedLogs)) {\n        // Only load recent logs into memory\n        const recentDate = new Date();\n        recentDate.setDate(recentDate.getDate() - 1);\n        \n        this.logs = storedLogs.filter(\n          log => new Date(log.timestamp) > recentDate\n        );\n      }\n    } catch {\n      logger.error('Failed to load stored audit logs:');\n    }\n  }\n\n  private async persistLogs(): Promise<void> {\n    try {\n      if (this.logs.length === 0) return;\n      \n      // Get existing logs\n      const existingLogs = await secureStorage.getItem('audit_logs') || [];\n      \n      // Combine and deduplicate\n      const allLogs = [...existingLogs, ...this.logs];\n      const uniqueLogs = Array.from(\n        new Map(allLogs.map(log => [log.id, log])).values()\n      );\n      \n      // Store encrypted if enabled\n      await secureStorage.setItem('audit_logs', uniqueLogs, {\n        encrypted: this.config.enableEncryption,\n        compress: true,\n      });\n      \n      // Clear memory buffer of persisted logs\n      this.logs = [];\n    } catch {\n      logger.error('Failed to persist audit logs:');\n    }\n  }\n\n  private setupAutoPersistence(): void {\n    if (this.persistenceTimer) {\n      clearInterval(this.persistenceTimer);\n    }\n    \n    this.persistenceTimer = setInterval(() => {\n      this.persistLogs();\n    }, this.config.persistenceInterval);\n  }\n\n  private setupRetentionCleanup(): void {\n    // Run cleanup daily\n    setInterval(() => {\n      this.cleanupOldLogs();\n    }, 24 * 60 * 60 * 1000);\n    \n    // Run initial cleanup\n    this.cleanupOldLogs();\n  }\n\n  private async cleanupOldLogs(): Promise<void> {\n    try {\n      const retentionDate = new Date();\n      retentionDate.setDate(retentionDate.getDate() - this.config.retentionDays);\n      \n      const allLogs = await this.getAllLogs();\n      const recentLogs = allLogs.filter(\n        log => new Date(log.timestamp) > retentionDate\n      );\n      \n      if (recentLogs.length < allLogs.length) {\n        await secureStorage.setItem('audit_logs', recentLogs, {\n          encrypted: this.config.enableEncryption,\n          compress: true,\n        });\n      }\n    } catch {\n      logger.error('Failed to cleanup old audit logs:');\n    }\n  }\n\n  private async getAllLogs(): Promise<AuditLogEntry[]> {\n    const storedLogs = await secureStorage.getItem('audit_logs') || [];\n    return [...storedLogs, ...this.logs];\n  }\n\n  private async signLogEntry(entry: AuditLogEntry): Promise<string> {\n    const entryWithoutSignature = { ...entry };\n    delete entryWithoutSignature.signature;\n    \n    const _dataToSign = JSON.stringify(_entryWithoutSignature);\n    return await cryptoService.signData(_dataToSign);\n  }\n\n  private shouldPersistImmediately(entry: AuditLogEntry): boolean {\n    // Immediately persist critical events and security-related events\n    return entry.severity === 'critical' ||\n           entry.event.includes('SECURITY') ||\n           entry.event.includes('EMERGENCY') ||\n           entry.event.includes('CRISIS') ||\n           entry.event.includes('PHI');\n  }\n\n  private notifyCriticalEvent(entry: AuditLogEntry): void {\n    // In production, send to monitoring service\n    logger.error('CRITICAL AUDIT EVENT:', entry);\n    \n    // Could trigger alerts, emails, etc.\n    if (window.navigator.onLine) {\n      // Send to monitoring endpoint\n      fetch('/api/monitoring/critical', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(_entry),\n      }).catch(err => logger.error('Failed to notify monitoring:', err));\n    }\n  }\n\n  private captureSessionInfo(): void {\n    // Capture browser information\n    this.sessionInfo.userAgent = window.navigator.userAgent;\n    \n    // Generate session ID if not exists\n    if (!this.sessionInfo.sessionId) {\n      this.sessionInfo.sessionId = cryptoService.generateSecureUUID();\n    }\n  }\n\n  private convertToCSV(logs: AuditLogEntry[]): string {\n    if (logs.length === 0) return '';\n    \n    // Get headers\n    const headers = [\n      'ID',\n      'Timestamp',\n      'Event',\n      'User ID',\n      'Session ID',\n      'IP Address',\n      'Resource ID',\n      'Resource Type',\n      'Action',\n      'Outcome',\n      'Severity',\n      'Details',\n    ];\n    \n    // Convert logs to CSV rows\n    const rows = logs.map(log => [\n      log.id,\n      log.timestamp.toISOString(),\n      log.event,\n      log.userId || '',\n      log.sessionId || '',\n      log.ipAddress || '',\n      log.resourceId || '',\n      log.resourceType || '',\n      log.action || '',\n      log.outcome,\n      log.severity,\n      JSON.stringify(log.details || {}),\n    ]);\n    \n    // Combine headers and rows\n    const csv = [\n      headers.join(','),\n      ...rows.map(row => row.map(cell => `\"${cell}\"`).join(',')),\n    ].join('\\n');\n    \n    return csv;\n  }\n}\n\nexport const _auditLogger = AuditLoggerService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\security\\cryptoService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\security\\fieldEncryption.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":174,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4396,4399],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4396,4399],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":294,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":294,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7879,7882],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7879,7882],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":297,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":297,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7960,7963],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7960,7963],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":298,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":298,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8004,8007],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8004,8007],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":316,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":316,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8451,8454],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8451,8454],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":319,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":319,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8532,8535],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8532,8535],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":320,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":320,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8576,8579],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8576,8579],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Field-Level Encryption Service\n * Provides granular encryption for sensitive mental health data fields\n * Implements key rotation, versioning, and format-preserving encryption\n */\n\nimport { cryptoService } from './cryptoService';\nimport { auditLogger } from './auditLogger';\nimport { secureStorage } from './secureStorage';\nimport { logger } from '../../utils/logger';\n\ninterface EncryptionKeyMetadata {\n  _keyId: string;\n  version: number;\n  algorithm: string;\n  createdAt: Date;\n  rotatedAt?: Date;\n  expiresAt?: Date;\n  purpose: string;\n  active: boolean;\n}\n\ninterface EncryptedField {\n  ciphertext: string;\n  _keyId: string;\n  version: number;\n  algorithm: string;\n  iv?: string;\n  tag?: string;\n  metadata?: {\n    fieldType: string;\n    originalFormat?: string;\n    encrypted: Date;\n  };\n}\n\ninterface FieldEncryptionConfig {\n  _fieldName: string;\n  dataType: 'string' | 'number' | 'date' | 'object' | 'array';\n  sensitivity: 'low' | 'medium' | 'high' | 'critical';\n  encryptionRequired: boolean;\n  formatPreserving?: boolean;\n  searchable?: boolean;\n  tokenization?: boolean;\n}\n\n// Mental health specific field configurations\nconst FIELD_CONFIGS: Record<string, FieldEncryptionConfig> = {\n  // Critical sensitivity - always encrypted\n  'mood_data': {\n    _fieldName: 'mood_data',\n    dataType: 'object',\n    sensitivity: 'critical',\n    encryptionRequired: true,\n    searchable: false,\n  },\n  'crisis_notes': {\n    _fieldName: 'crisis_notes',\n    dataType: 'string',\n    sensitivity: 'critical',\n    encryptionRequired: true,\n    searchable: false,\n  },\n  'journal_entry': {\n    _fieldName: 'journal_entry',\n    dataType: 'string',\n    sensitivity: 'critical',\n    encryptionRequired: true,\n    searchable: true, // Encrypted search capability\n  },\n  'therapy_notes': {\n    _fieldName: 'therapy_notes',\n    dataType: 'string',\n    sensitivity: 'critical',\n    encryptionRequired: true,\n    searchable: false,\n  },\n  'medication_list': {\n    _fieldName: 'medication_list',\n    dataType: 'array',\n    sensitivity: 'high',\n    encryptionRequired: true,\n    searchable: true,\n  },\n  'diagnosis': {\n    _fieldName: 'diagnosis',\n    dataType: 'string',\n    sensitivity: 'critical',\n    encryptionRequired: true,\n    searchable: false,\n  },\n  'emergency_contacts': {\n    _fieldName: 'emergency_contacts',\n    dataType: 'array',\n    sensitivity: 'high',\n    encryptionRequired: true,\n    searchable: false,\n  },\n  \n  // High sensitivity\n  'phone_number': {\n    _fieldName: 'phone_number',\n    dataType: 'string',\n    sensitivity: 'high',\n    encryptionRequired: true,\n    formatPreserving: true, // Preserve phone number format\n  },\n  'date_of_birth': {\n    _fieldName: 'date_of_birth',\n    dataType: 'date',\n    sensitivity: 'high',\n    encryptionRequired: true,\n    formatPreserving: true,\n  },\n  'insurance_info': {\n    _fieldName: 'insurance_info',\n    dataType: 'object',\n    sensitivity: 'high',\n    encryptionRequired: true,\n    tokenization: true, // Use tokenization for insurance numbers\n  },\n  \n  // Medium sensitivity\n  'email': {\n    _fieldName: 'email',\n    dataType: 'string',\n    sensitivity: 'medium',\n    encryptionRequired: true,\n    searchable: true,\n    formatPreserving: true,\n  },\n  'name': {\n    _fieldName: 'name',\n    dataType: 'string',\n    sensitivity: 'medium',\n    encryptionRequired: true,\n    searchable: true,\n  },\n};\n\nclass FieldEncryptionService {\n  private static instance: FieldEncryptionService;\n  private encryptionKeys: Map<string, CryptoKey> = new Map();\n  private keyMetadata: Map<string, EncryptionKeyMetadata> = new Map();\n  private tokenVault: Map<string, string> = new Map();\n  private searchIndexes: Map<string, Map<string, string[]>> = new Map();\n  private readonly KEY_ROTATION_DAYS = 90;\n  private readonly MAX_KEY_VERSIONS = 5;\n\n  private constructor() {\n    this.initializeFieldEncryption();\n  }\n\n  static getInstance(): FieldEncryptionService {\n    if (!FieldEncryptionService.instance) {\n      FieldEncryptionService.instance = new FieldEncryptionService();\n    }\n    return FieldEncryptionService.instance;\n  }\n\n  private async initializeFieldEncryption(): Promise<void> {\n    await this.loadEncryptionKeys();\n    await this.checkKeyRotation();\n    this.setupAutoRotation();\n  }\n\n  /**\n   * Encrypt a single field\n   */\n  async encryptField(\n    _fieldName: string,\n    value: unknown,\n    _userId?: string\n  ): Promise<EncryptedField | any> {\n    try {\n      const config = FIELD_CONFIGS[_fieldName];\n      \n      if (!config || !config.encryptionRequired) {\n        return value; // Return unencrypted if not configured\n      }\n\n      // Get or create encryption key for this field type\n      const _keyInfo = await this.getFieldKey(_fieldName, config.sensitivity);\n      \n      // Handle different encryption strategies\n      if (config.tokenization) {\n        return await this.tokenizeValue(value, _fieldName);\n      }\n      \n      if (config.formatPreserving) {\n        return await this.formatPreservingEncrypt(value, config, _keyInfo);\n      }\n\n      // Standard encryption\n      const _serialized = JSON.stringify(value);\n      const encrypted = await cryptoService.encrypt(_serialized);\n      \n      // Create encrypted field object\n      const encryptedField: EncryptedField = {\n        ciphertext: encrypted,\n        _keyId: _keyInfo._keyId,\n        version: _keyInfo.version,\n        algorithm: _keyInfo.algorithm,\n        metadata: {\n          fieldType: config.dataType,\n          encrypted: new Date(),\n        },\n      };\n\n      // Handle searchable fields\n      if (config.searchable) {\n        await this.updateSearchIndex(_fieldName, value, encrypted, _userId);\n      }\n\n      // Audit sensitive field encryption\n      if (config.sensitivity === 'critical') {\n        await auditLogger.log({\n          event: 'PHI_MODIFICATION',\n          _userId,\n          details: {\n            action: 'field_encrypted',\n            _fieldName,\n            sensitivity: config.sensitivity,\n          },\n          severity: 'info',\n        });\n      }\n\n      return encryptedField;\n    } catch {\n      logger.error(`Failed to encrypt field ${_fieldName}:`, error);\n      throw new Error('Field encryption failed');\n    }\n  }\n\n  /**\n   * Decrypt a single field\n   */\n  async decryptField(\n    _fieldName: string,\n    encryptedData: EncryptedField | string,\n    _userId?: string\n  ): Promise<unknown> {\n    try {\n      const config = FIELD_CONFIGS[_fieldName];\n      \n      if (!config || !config.encryptionRequired) {\n        return encryptedData; // Return as-is if not configured\n      }\n\n      // Handle tokenized values\n      if (config.tokenization && typeof encryptedData === 'string') {\n        return await this.detokenizeValue(encryptedData, _fieldName);\n      }\n\n      // Handle format-preserving encryption\n      if (config.formatPreserving && typeof encryptedData === 'string') {\n        return await this.formatPreservingDecrypt(encryptedData, config);\n      }\n\n      // Standard decryption\n      if (typeof encryptedData === 'object' && 'ciphertext' in encryptedData) {\n        const decrypted = await cryptoService.decrypt(encryptedData.ciphertext);\n        const value = JSON.parse(decrypted);\n        \n        // Audit sensitive field access\n        if (config.sensitivity === 'critical') {\n          await auditLogger.log({\n            event: 'PHI_ACCESS',\n            _userId,\n            details: {\n              action: 'field_decrypted',\n              _fieldName,\n              sensitivity: config.sensitivity,\n            },\n            severity: 'info',\n          });\n        }\n        \n        return value;\n      }\n\n      return encryptedData;\n    } catch {\n      logger.error(`Failed to decrypt field ${_fieldName}:`, error);\n      throw new Error('Field decryption failed');\n    }\n  }\n\n  /**\n   * Encrypt multiple fields in an object\n   */\n  async encryptObject(\n    obj: Record<string, any>,\n    fieldList?: string[],\n    _userId?: string\n  ): Promise<Record<string, any>> {\n    const encrypted: Record<string, any> = {};\n    const fieldsToEncrypt = fieldList || Object.keys(_obj);\n\n    for (const key of Object.keys(_obj)) {\n      if (fieldsToEncrypt.includes(key) && FIELD_CONFIGS[key]) {\n        encrypted[key] = await this.encryptField(key, obj[key], _userId);\n      } else {\n        encrypted[key] = obj[key];\n      }\n    }\n\n    return encrypted;\n  }\n\n  /**\n   * Decrypt multiple fields in an object\n   */\n  async decryptObject(\n    obj: Record<string, any>,\n    fieldList?: string[],\n    _userId?: string\n  ): Promise<Record<string, any>> {\n    const decrypted: Record<string, any> = {};\n    const fieldsToDecrypt = fieldList || Object.keys(_obj);\n\n    for (const key of Object.keys(_obj)) {\n      if (fieldsToDecrypt.includes(key) && FIELD_CONFIGS[key]) {\n        decrypted[key] = await this.decryptField(key, obj[key], _userId);\n      } else {\n        decrypted[key] = obj[key];\n      }\n    }\n\n    return decrypted;\n  }\n\n  /**\n   * Search encrypted fields\n   */\n  async searchEncryptedField(\n    _fieldName: string,\n    searchTerm: string,\n    _userId?: string\n  ): Promise<string[]> {\n    const config = FIELD_CONFIGS[_fieldName];\n    \n    if (!config || !config.searchable) {\n      throw new Error('Field is not searchable');\n    }\n\n    // Generate search token\n    const _searchToken = await this.generateSearchToken(searchTerm, _fieldName);\n    \n    // Search in index\n    const fieldIndex = this.searchIndexes.get(_fieldName);\n    if (!fieldIndex) {\n      return [];\n    }\n\n    const __results = fieldIndex.get(_searchToken) || [];\n    \n    // Audit search operation\n    await auditLogger.log({\n      event: 'DATA_ACCESS',\n      _userId,\n      details: {\n        action: 'encrypted_search',\n        _fieldName,\n        resultsCount: results.length,\n      },\n      severity: 'info',\n    });\n\n    return results;\n  }\n\n  /**\n   * Rotate encryption keys\n   */\n  async rotateKeys(force: boolean = false): Promise<void> {\n    try {\n      const now = new Date();\n      \n      for (const [_keyId, metadata] of this.keyMetadata.entries()) {\n        const daysSinceRotation = metadata.rotatedAt\n          ? (now.getTime() - metadata.rotatedAt.getTime()) / (1000 * 60 * 60 * 24)\n          : (now.getTime() - metadata.createdAt.getTime()) / (1000 * 60 * 60 * 24);\n        \n        if (force || daysSinceRotation >= this.KEY_ROTATION_DAYS) {\n          await this.rotateKey(_keyId);\n        }\n      }\n      \n      // Clean up old key versions\n      await this.cleanupOldKeys();\n      \n    } catch {\n      logger.error('Key rotation failed:');\n      throw new Error('Key rotation failed');\n    }\n  }\n\n  /**\n   * Re-encrypt data with new key\n   */\n  async reencryptData(\n    oldKeyId: string,\n    newKeyId: string,\n    data: EncryptedField\n  ): Promise<EncryptedField> {\n    try {\n      // Decrypt with old key\n      const decrypted = await cryptoService.decrypt(data.ciphertext);\n      \n      // Encrypt with new key\n      const encrypted = await cryptoService.encrypt(decrypted);\n      \n      // Update metadata\n      const newMetadata = this.keyMetadata.get(_newKeyId);\n      if (!newMetadata) {\n        throw new Error('New key not found');\n      }\n      \n      return {\n        ciphertext: encrypted,\n        _keyId: newKeyId,\n        version: newMetadata.version,\n        algorithm: newMetadata.algorithm,\n        metadata: {\n          ...data.metadata,\n          fieldType: data.metadata?.fieldType || 'string',\n          encrypted: new Date(),\n        },\n      };\n    } catch {\n      logger.error('Re-encryption failed:');\n      throw undefined;\n    }\n  }\n\n  /**\n   * Private helper methods\n   */\n  private async getFieldKey(\n    _fieldName: string,\n    sensitivity: string\n  ): Promise<EncryptionKeyMetadata> {\n    const _keyId = `field_key_${sensitivity}`;\n    let metadata = this.keyMetadata.get(_keyId);\n    \n    if (!metadata) {\n      // Generate new key for this sensitivity level\n      metadata = await this.generateFieldKey(_keyId, sensitivity);\n    }\n    \n    return metadata;\n  }\n\n  private async generateFieldKey(\n    _keyId: string,\n    purpose: string\n  ): Promise<EncryptionKeyMetadata> {\n    const key = await crypto.subtle.generateKey(\n      {\n        name: 'AES-GCM',\n        length: 256,\n      },\n      true,\n      ['encrypt', 'decrypt']\n    );\n    \n    const metadata: EncryptionKeyMetadata = {\n      _keyId,\n      version: 1,\n      algorithm: 'AES-GCM',\n      createdAt: new Date(),\n      purpose,\n      active: true,\n    };\n    \n    this.encryptionKeys.set(_keyId, key);\n    this.keyMetadata.set(_keyId, metadata);\n    \n    // Persist key securely\n    await this.persistKey(_keyId, key, metadata);\n    \n    return metadata;\n  }\n\n  private async rotateKey(_keyId: string): Promise<void> {\n    const oldMetadata = this.keyMetadata.get(_keyId);\n    if (!oldMetadata) return;\n    \n    // Generate new key version\n    const newKeyId = `${_keyId}_v${oldMetadata.version + 1}`;\n    const newKey = await crypto.subtle.generateKey(\n      {\n        name: 'AES-GCM',\n        length: 256,\n      },\n      true,\n      ['encrypt', 'decrypt']\n    );\n    \n    const newMetadata: EncryptionKeyMetadata = {\n      _keyId: newKeyId,\n      version: oldMetadata.version + 1,\n      algorithm: 'AES-GCM',\n      createdAt: new Date(),\n      rotatedAt: new Date(),\n      purpose: oldMetadata.purpose,\n      active: true,\n    };\n    \n    // Deactivate old key\n    oldMetadata.active = false;\n    oldMetadata.expiresAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 days\n    \n    // Store new key\n    this.encryptionKeys.set(newKeyId, newKey);\n    this.keyMetadata.set(newKeyId, newMetadata);\n    \n    // Persist changes\n    await this.persistKey(newKeyId, newKey, newMetadata);\n    \n    // Log rotation\n    await auditLogger.log({\n      event: 'CONFIGURATION_CHANGE',\n      details: {\n        action: 'key_rotation',\n        _keyId,\n        newKeyId,\n        version: newMetadata.version,\n      },\n      severity: 'info',\n    });\n  }\n\n  private async tokenizeValue(value: unknown, _fieldName: string): Promise<string> {\n    // Generate unique token\n    const token = `tok_${cryptoService.generateSecureUUID()}`;\n    \n    // Encrypt and store actual value\n    const encrypted = await cryptoService.encrypt(JSON.stringify(value));\n    this.tokenVault.set(token, encrypted);\n    \n    // Persist token mapping\n    await secureStorage.setItem(`token_${token}`, encrypted, {\n      encrypted: true,\n    });\n    \n    return token;\n  }\n\n  private async detokenizeValue(token: string, _fieldName: string): Promise<unknown> {\n    // Retrieve from vault\n    let encrypted = this.tokenVault.get(_token);\n    \n    if (!encrypted) {\n      // Try loading from storage\n      encrypted = await secureStorage.getItem(`token_${token}`);\n    }\n    \n    if (!encrypted) {\n      throw new Error('Token not found');\n    }\n    \n    const decrypted = await cryptoService.decrypt(encrypted);\n    return JSON.parse(decrypted);\n  }\n\n  private async formatPreservingEncrypt(\n    value: unknown,\n    config: FieldEncryptionConfig,\n    _keyInfo: EncryptionKeyMetadata\n  ): Promise<string> {\n    // Simple format-preserving encryption\n    // In production, use FF3-1 or similar algorithm\n    const _stringValue = String(value);\n    const encrypted = await cryptoService.encrypt(_stringValue);\n    \n    // Preserve format characteristics\n    if (config.dataType === 'date') {\n      return `enc_date_${encrypted.substring(0, 10)}`;\n    } else if (config.fieldName === 'phone_number') {\n      return `enc_phone_${encrypted.substring(0, 10)}`;\n    } else if (config.fieldName === 'email') {\n      return `enc_${encrypted.substring(0, 20)}@encrypted.local`;\n    }\n    \n    return encrypted;\n  }\n\n  private async formatPreservingDecrypt(\n    encrypted: string,\n    config: FieldEncryptionConfig\n  ): Promise<unknown> {\n    // Extract actual encrypted data\n    let _actualEncrypted = encrypted;\n    \n    if (encrypted.startsWith('enc_')) {\n      // Need to retrieve full encrypted value from storage\n      const fullEncrypted = await secureStorage.getItem(`fpe_${encrypted}`);\n      if (_fullEncrypted) {\n        _actualEncrypted = fullEncrypted;\n      }\n    }\n    \n    const decrypted = await cryptoService.decrypt(_actualEncrypted);\n    \n    // Convert back to appropriate type\n    if (config.dataType === 'date') {\n      return new Date(decrypted);\n    } else if (config.dataType === 'number') {\n      return Number(decrypted);\n    }\n    \n    return decrypted;\n  }\n\n  private async generateSearchToken(searchTerm: string, _fieldName: string): Promise<string> {\n    // Generate deterministic search token\n    const normalized = searchTerm.toLowerCase().trim();\n    const hash = await cryptoService.sha256(`${_fieldName}:${normalized}`);\n    return hash.substring(0, 16); // Use prefix for efficiency\n  }\n\n  private async updateSearchIndex(\n    _fieldName: string,\n    value: unknown,\n    encrypted: string,\n    _userId?: string\n  ): Promise<void> {\n    if (!this.searchIndexes.has(_fieldName)) {\n      this.searchIndexes.set(_fieldName, new Map());\n    }\n    \n    const fieldIndex = this.searchIndexes.get(_fieldName)!;\n    \n    // Generate search tokens for value\n    const searchableText = String(value).toLowerCase();\n    const words = searchableText.split(/\\s+/);\n    \n    for (const word of words) {\n      if (word.length > 2) { // Skip very short words\n        const token = await this.generateSearchToken(word, _fieldName);\n        \n        const entries = fieldIndex.get(_token) || [];\n        if (!entries.includes(encrypted)) {\n          entries.push(encrypted);\n          fieldIndex.set(token, entries);\n        }\n      }\n    }\n  }\n\n  private async loadEncryptionKeys(): Promise<void> {\n    try {\n      const _storedKeys = await secureStorage.getItem('field_encryption_keys');\n      if (_storedKeys) {\n        // Load and reconstruct keys\n        for (const [_keyId, _keyData] of Object.entries(_storedKeys)) {\n          // Reconstruct CryptoKey objects\n          // Implementation depends on key storage format\n        }\n      }\n    } catch {\n      logger.error('Failed to load encryption keys:');\n    }\n  }\n\n  private async persistKey(\n    _keyId: string,\n    key: CryptoKey,\n    metadata: EncryptionKeyMetadata\n  ): Promise<void> {\n    try {\n      // Export key for storage\n      const _exportedKey = await crypto.subtle.exportKey('raw', key);\n      const keyString = btoa(String.fromCharCode(...new Uint8Array(_exportedKey)));\n      \n      // Store securely\n      await secureStorage.setItem(`field_key_${_keyId}`, {\n        key: keyString,\n        metadata,\n      }, {\n        encrypted: true,\n        persistent: true,\n      });\n    } catch {\n      logger.error('Failed to persist key:');\n    }\n  }\n\n  private async checkKeyRotation(): Promise<void> {\n    const needsRotation: string[] = [];\n    const now = new Date();\n    \n    for (const [_keyId, metadata] of this.keyMetadata.entries()) {\n      if (!metadata.active) continue;\n      \n      const age = (now.getTime() - metadata.createdAt.getTime()) / (1000 * 60 * 60 * 24);\n      if (age >= this.KEY_ROTATION_DAYS) {\n        needsRotation.push(_keyId);\n      }\n    }\n    \n    if (needsRotation.length > 0) {\n      logger.info(`Keys needing rotation: ${needsRotation.join(', ')}`, 'FieldEncryption');\n    }\n  }\n\n  private setupAutoRotation(): void {\n    // Schedule daily key rotation check\n    setInterval(async () => {\n      await this.rotateKeys();\n    }, 24 * 60 * 60 * 1000);\n  }\n\n  private async cleanupOldKeys(): Promise<void> {\n    const toDelete: string[] = [];\n    \n    for (const [_keyId, metadata] of this.keyMetadata.entries()) {\n      if (!metadata.active && metadata.expiresAt && new Date() > metadata.expiresAt) {\n        toDelete.push(_keyId);\n      }\n    }\n    \n    for (const _keyId of toDelete) {\n      this.encryptionKeys.delete(_keyId);\n      this.keyMetadata.delete(_keyId);\n      await secureStorage.removeItem(`field_key_${_keyId}`);\n    }\n  }\n}\n\nexport const _fieldEncryption = FieldEncryptionService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\security\\rateLimiter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\security\\secureStorage.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":422,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":422,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11971,11974],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11971,11974],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Secure Storage Service\n * Provides encrypted storage for sensitive data with HIPAA compliance\n * Implements defense-in-depth with multiple layers of security\n */\n\nimport { cryptoService } from './cryptoService';\nimport { secureStorage as _localSecureStorage } from './SecureLocalStorage';\nimport { logger } from '../../utils/logger';\n\ninterface StorageOptions {\n  persistent?: boolean;\n  expires?: Date;\n  encrypted?: boolean;\n  compress?: boolean;\n}\n\ninterface StorageItem {\n  value: unknown;\n  metadata: {\n    created: Date;\n    updated: Date;\n    expires?: Date;\n    encrypted: boolean;\n    _compressed: boolean;\n    checksum: string;\n  };\n}\n\nclass SecureStorageService {\n  private static instance: SecureStorageService;\n  private memoryCache: Map<string, StorageItem> = new Map();\n  private readonly STORAGE_PREFIX = 'mh_secure_';\n  private readonly MAX_STORAGE_SIZE = 10 * 1024 * 1024; // 10MB limit per user\n\n  private constructor() {\n    this.initializeStorage();\n  }\n\n  static getInstance(): SecureStorageService {\n    if (!SecureStorageService.instance) {\n      SecureStorageService.instance = new SecureStorageService();\n    }\n    return SecureStorageService.instance;\n  }\n\n  private initializeStorage(): void {\n    // Clean up expired items on initialization\n    this.cleanupExpiredItems();\n    \n    // Set up periodic cleanup\n    setInterval(() => {\n      this.cleanupExpiredItems();\n    }, 60 * 60 * 1000); // Clean up every hour\n\n    // Listen for storage quota errors\n    this.setupStorageQuotaHandling();\n  }\n\n  /**\n   * Store an item securely\n   */\n  async setItem(\n    key: string,\n    value: unknown,\n    options: StorageOptions = {}\n  ): Promise<void> {\n    try {\n      const { persistent = true, expires, encrypted = true, compress = false,  } = options;\n\n      // Validate storage quota\n      await this.checkStorageQuota();\n\n      // Serialize value\n      let serialized = JSON.stringify(value);\n\n      // Compress if requested and beneficial\n      if (compress && serialized.length > 1024) {\n        serialized = await this.compress(_serialized);\n      }\n\n      // Encrypt if requested\n      if (_encrypted) {\n        serialized = await cryptoService.encrypt(_serialized);\n      }\n\n      // Calculate checksum for integrity verification\n      const checksum = await this.calculateChecksum(_serialized);\n\n      // Create storage item\n      const storageItem: StorageItem = {\n        value: serialized,\n        metadata: {\n          created: new Date(),\n          updated: new Date(),\n          expires,\n          encrypted,\n          _compressed: compress,\n          checksum,\n        },\n      };\n\n      // Store in memory cache\n      this.memoryCache.set(key, storageItem);\n\n      // Store persistently if requested\n      if (_persistent) {\n        const _storageKey = this.getStorageKey(key);\n        \n        try {\n          localStorage.setItem(_storageKey, JSON.stringify(storageItem));\n        } catch {\n          // Try IndexedDB as fallback for larger data\n          await this.storeInIndexedDB(_storageKey, storageItem);\n        }\n      }\n\n      // Log storage event for audit\n      this.logStorageEvent('SET', key, { encrypted, persistent });\n    } catch {\n      logger.error(`Failed to store item ${key}:`, error);\n      throw new Error(`Storage failed: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Retrieve an item from secure storage\n   */\n  async getItem(key: string): Promise<unknown> {\n    try {\n      // Check memory cache first\n      let storageItem = this.memoryCache.get(key);\n\n      // If not in memory, check persistent storage\n      if (!storageItem) {\n        const _storageKey = this.getStorageKey(key);\n        \n        // Try localStorage first\n        const _stored = localStorage.getItem(_storageKey);\n        if (_stored) {\n          storageItem = JSON.parse(_stored) as StorageItem;\n        } else {\n          // Try IndexedDB as fallback\n          storageItem = await this.getFromIndexedDB(_storageKey) || undefined;\n        }\n\n        // Cache in memory if found\n        if (storageItem) {\n          this.memoryCache.set(key, storageItem);\n        }\n      }\n\n      if (!storageItem) {\n        return null;\n      }\n\n      // Check expiration\n      if (storageItem.metadata.expires && \n          new Date() > new Date(storageItem.metadata.expires)) {\n        await this.removeItem(key);\n        return null;\n      }\n\n      // Verify integrity\n      const checksum = await this.calculateChecksum(storageItem.value);\n      if (checksum !== storageItem.metadata.checksum) {\n        logger.error(`Integrity check failed for ${key}`);\n        await this.removeItem(key);\n        throw new Error('Data integrity verification failed');\n      }\n\n      let value = storageItem.value;\n\n      // Decrypt if encrypted\n      if (storageItem.metadata.encrypted) {\n        value = await cryptoService.decrypt(value);\n      }\n\n      // Decompress if compressed\n      if (storageItem.metadata.compressed) {\n        value = await this.decompress(value);\n      }\n\n      // Deserialize\n      return JSON.parse(value);\n    } catch {\n      logger.error(`Failed to retrieve item ${key}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Remove an item from storage\n   */\n  async removeItem(key: string): Promise<void> {\n    try {\n      // Remove from memory cache\n      this.memoryCache.delete(key);\n\n      // Remove from localStorage\n      const _storageKey = this.getStorageKey(key);\n      localStorage.removeItem(_storageKey);\n\n      // Remove from IndexedDB\n      await this.removeFromIndexedDB(_storageKey);\n\n      // Log removal event\n      this.logStorageEvent('REMOVE', key);\n    } catch {\n      logger.error(`Failed to remove item ${key}:`, error);\n    }\n  }\n\n  /**\n   * Clear all stored items\n   */\n  async clear(): Promise<void> {\n    try {\n      // Clear memory cache\n      this.memoryCache.clear();\n\n      // Clear localStorage items with our prefix\n      const keysToRemove: string[] = [];\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key?.startsWith(this.STORAGE_PREFIX)) {\n          keysToRemove.push(key);\n        }\n      }\n      keysToRemove.forEach(key => localStorage.removeItem(key));\n\n      // Clear IndexedDB\n      await this.clearIndexedDB();\n\n      // Log clear event\n      this.logStorageEvent('CLEAR', 'all');\n    } catch {\n      logger.error('Failed to clear storage:');\n    }\n  }\n\n  /**\n   * Get all keys in storage\n   */\n  async getAllKeys(): Promise<string[]> {\n    const keys = new Set<string>();\n\n    // Get keys from memory cache\n    this.memoryCache.forEach((_, key) => keys.add(key));\n\n    // Get keys from localStorage\n    for (let i = 0; i < localStorage.length; i++) {\n      const _storageKey = localStorage.key(i);\n      if (_storageKey?.startsWith(this.STORAGE_PREFIX)) {\n        const key = _storageKey.replace(this.STORAGE_PREFIX, '');\n        keys.add(key);\n      }\n    }\n\n    // Get keys from IndexedDB\n    const idbKeys = await this.getKeysFromIndexedDB();\n    idbKeys.forEach(key => keys.add(key.replace(this.STORAGE_PREFIX, '')));\n\n    return Array.from(_keys);\n  }\n\n  /**\n   * Get storage size information\n   */\n  async getStorageInfo(): Promise<{\n    used: number;\n    available: number;\n    quota: number;\n  }> {\n    if ('storage' in navigator && 'estimate' in navigator.storage) {\n      const estimate = await navigator.storage.estimate();\n      return {\n        used: estimate.usage || 0,\n        available: (estimate.quota || 0) - (estimate.usage || 0),\n        quota: estimate.quota || 0,\n      };\n    }\n\n    // Fallback for browsers without storage API\n    let used = 0;\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key) {\n        used += (localStorage.getItem(key) || '').length;\n      }\n    }\n\n    return {\n      used,\n      available: this.MAX_STORAGE_SIZE - used,\n      quota: this.MAX_STORAGE_SIZE,\n    };\n  }\n\n  /**\n   * Private helper methods\n   */\n  private getStorageKey(key: string): string {\n    return `${this.STORAGE_PREFIX}${key}`;\n  }\n\n  private async calculateChecksum(data: string): Promise<string> {\n    const encoder = new TextEncoder();\n    const dataBuffer = encoder.encode(data);\n    const _hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer);\n    const hashArray = Array.from(new Uint8Array(_hashBuffer));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n  }\n\n  private async compress(data: string): Promise<string> {\n    // Simple compression using browser's CompressionStream API if available\n    if ('CompressionStream' in window) {\n      const encoder = new TextEncoder();\n      const stream = new Response(\n        new Blob([encoder.encode(data)])\n          .stream()\n          .pipeThrough(new (window as unknown).CompressionStream('gzip'))\n      );\n      const _compressed = await stream.arrayBuffer();\n      return btoa(String.fromCharCode(...new Uint8Array(_compressed)));\n    }\n    return data; // Return uncompressed if API not available\n  }\n\n  private async decompress(data: string): Promise<string> {\n    try {\n      // Validate base64 input\n      if (!data || typeof data !== 'string') {\n        logger.warn('[SecureStorage] Invalid data for decompression');\n        return '';\n      }\n      \n      // Check if data is already decompressed (not base64)\n      if (!this.isBase64(data)) {\n        return data;\n      }\n      \n      // Decompress using browser's DecompressionStream API if available\n      if ('DecompressionStream' in window) {\n        const _compressed = Uint8Array.from(atob(data), c => c.charCodeAt(0));\n        const stream = new Response(\n          new Blob([_compressed])\n            .stream()\n            .pipeThrough(new (window as unknown).DecompressionStream('gzip'))\n        );\n        const decompressed = await stream.text();\n        return decompressed;\n      }\n      return data; // Return as-is if API not available\n    } catch {\n      logger.error('[SecureStorage] Decompression failed:');\n      return ''; // Return empty string instead of throwing\n    }\n  }\n\n  private isBase64(str: string): boolean {\n    try {\n      // Basic base64 validation\n      return btoa(atob(_str)) === str;\n    } catch {\n      return false;\n    }\n  }\n\n  private async checkStorageQuota(): Promise<void> {\n    const info = await this.getStorageInfo();\n    if (info.available < 1024 * 1024) { // Less than 1MB available\n      // Clean up old items\n      await this.cleanupOldItems();\n      \n      // Check again\n      const newInfo = await this.getStorageInfo();\n      if (newInfo.available < 1024 * 1024) {\n        throw new Error('Storage quota exceeded');\n      }\n    }\n  }\n\n  private async cleanupExpiredItems(): Promise<void> {\n    const keys = await this.getAllKeys();\n    for (const key of keys) {\n      const __item = await this.getItem(key);\n      // getItem automatically removes expired items\n    }\n  }\n\n  private async cleanupOldItems(): Promise<void> {\n    // Remove items older than 30 days that aren't marked as persistent\n    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n    const keys = await this.getAllKeys();\n    \n    for (const key of keys) {\n      const _storageKey = this.getStorageKey(key);\n      const _stored = localStorage.getItem(_storageKey);\n      if (_stored) {\n        const item = JSON.parse(_stored) as StorageItem;\n        if (new Date(item.metadata.created) < thirtyDaysAgo) {\n          await this.removeItem(key);\n        }\n      }\n    }\n  }\n\n  private setupStorageQuotaHandling(): void {\n    window.addEventListener('storage', (event) => {\n      if (event.key && event.key.startsWith(this.STORAGE_PREFIX)) {\n        // Invalidate memory cache for changed items\n        const key = event.key.replace(this.STORAGE_PREFIX, '');\n        this.memoryCache.delete(key);\n      }\n    });\n  }\n\n  private logStorageEvent(\n    action: string,\n    key: string,\n    details?: Record<string, any>\n  ): void {\n    // In production, this would log to audit service\n    logger.debug(`Storage ${action}: ${key}`, 'SecureStorage', details);\n  }\n\n  /**\n   * IndexedDB fallback methods for larger data\n   */\n  private async storeInIndexedDB(key: string, value: StorageItem): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open('SecureStorage', 1);\n      \n      request.onerror = () => reject(request.error);\n      \n      request.onsuccess = () => {\n        const db = request.result;\n        const transaction = db.transaction(['items'], 'readwrite');\n        const store = transaction.objectStore('items');\n        store.put({ key, value });\n        \n        transaction.oncomplete = () => {\n          db.close();\n          resolve();\n        };\n        \n        transaction.onerror = () => {\n          db.close();\n          reject(transaction.error);\n        };\n      };\n      \n      request.onupgradeneeded = () => {\n        const db = request.result;\n        if (!db.objectStoreNames.contains('items')) {\n          db.createObjectStore('items', { keyPath: 'key' });\n        }\n      };\n    });\n  }\n\n  private async getFromIndexedDB(key: string): Promise<StorageItem | null> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open('SecureStorage', 1);\n      \n      request.onerror = () => reject(request.error);\n      \n      request.onsuccess = () => {\n        const db = request.result;\n        \n        if (!db.objectStoreNames.contains('items')) {\n          db.close();\n          resolve(null);\n          return;\n        }\n        \n        const transaction = db.transaction(['items'], 'readonly');\n        const store = transaction.objectStore('items');\n        const getRequest = store.get(key);\n        \n        getRequest.onsuccess = () => {\n          db.close();\n          resolve(getRequest.result?.value || null);\n        };\n        \n        getRequest.onerror = () => {\n          db.close();\n          reject(getRequest.error);\n        };\n      };\n    });\n  }\n\n  private async removeFromIndexedDB(key: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open('SecureStorage', 1);\n      \n      request.onerror = () => reject(request.error);\n      \n      request.onsuccess = () => {\n        const db = request.result;\n        \n        if (!db.objectStoreNames.contains('items')) {\n          db.close();\n          resolve();\n          return;\n        }\n        \n        const transaction = db.transaction(['items'], 'readwrite');\n        const store = transaction.objectStore('items');\n        store.delete(key);\n        \n        transaction.oncomplete = () => {\n          db.close();\n          resolve();\n        };\n        \n        transaction.onerror = () => {\n          db.close();\n          reject(transaction.error);\n        };\n      };\n    });\n  }\n\n  private async getKeysFromIndexedDB(): Promise<string[]> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open('SecureStorage', 1);\n      \n      request.onerror = () => reject(request.error);\n      \n      request.onsuccess = () => {\n        const db = request.result;\n        \n        if (!db.objectStoreNames.contains('items')) {\n          db.close();\n          resolve([]);\n          return;\n        }\n        \n        const transaction = db.transaction(['items'], 'readonly');\n        const store = transaction.objectStore('items');\n        const getAllKeysRequest = store.getAllKeys();\n        \n        getAllKeysRequest.onsuccess = () => {\n          db.close();\n          resolve(getAllKeysRequest.result as string[]);\n        };\n        \n        getAllKeysRequest.onerror = () => {\n          db.close();\n          reject(getAllKeysRequest.error);\n        };\n      };\n    });\n  }\n\n  private async clearIndexedDB(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const deleteRequest = indexedDB.deleteDatabase('SecureStorage');\n      deleteRequest.onsuccess = () => resolve();\n      deleteRequest.onerror = () => reject(deleteRequest.error);\n    });\n  }\n}\n\nexport const secureStorage = SecureStorageService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\security\\securityHeaders.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\security\\securityMonitor.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[679,682],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[679,682],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3668,3671],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3668,3671],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Security Monitoring and Incident Response Service\n * Real-time threat detection, monitoring, and automated incident response\n * HIPAA and SOC 2 compliant security event management\n */\n\nimport { auditLogger } from './auditLogger';\nimport { rateLimiter } from './rateLimiter';\nimport { hipaaService } from '../compliance/hipaaService';\nimport { cryptoService } from './cryptoService';\nimport { logger } from '../../utils/logger';\n\ninterface SecurityEvent {\n  _id: string;\n  timestamp: Date;\n  type: SecurityEventType;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  source: string;\n  target?: string;\n  userId?: string;\n  ipAddress?: string;\n  details: Record<string, any>;\n  indicators: string[];\n  mitigated: boolean;\n  responseActions: string[];\n}\n\ntype SecurityEventType =\n  | 'unauthorized_access'\n  | 'brute_force_attack'\n  | 'sql_injection'\n  | 'xss_attack'\n  | 'csrf_attempt'\n  | 'data_breach'\n  | 'malware_detected'\n  | 'privilege_escalation'\n  | 'suspicious_activity'\n  | 'policy_violation'\n  | 'configuration_change'\n  | 'authentication_failure'\n  | 'session_hijacking'\n  | 'api_abuse'\n  | 'dos_attack';\n\ninterface ThreatIndicator {\n  pattern: string | RegExp;\n  type: SecurityEventType;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  confidence: number; // 0-1\n  description: string;\n}\n\ninterface IncidentResponse {\n  incidentId: string;\n  triggeredBy: SecurityEvent[];\n  startTime: Date;\n  endTime?: Date;\n  status: 'active' | 'contained' | 'resolved' | 'escalated';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  affectedSystems: string[];\n  affectedUsers: string[];\n  responseActions: ResponseAction[];\n  escalationLevel: number;\n  assignedTo?: string;\n  notes: string[];\n}\n\ninterface ResponseAction {\n  actionId: string;\n  type: string;\n  target: string;\n  status: 'pending' | 'in_progress' | 'completed' | 'failed';\n  executedAt?: Date;\n  result?: unknown;\n  error?: string;\n}\n\ninterface SecurityMetrics {\n  totalEvents: number;\n  eventsBySeverity: Record<string, number>;\n  eventsByType: Record<string, number>;\n  activeIncidents: number;\n  meanTimeToDetect: number; // milliseconds\n  meanTimeToRespond: number; // milliseconds\n  falsePositiveRate: number;\n  threatScore: number; // 0-100\n}\n\ninterface PlaybookAction {\n  type: string;\n  target: string;\n  duration?: number;\n}\n\nclass SecurityMonitorService {\n  private static instance: SecurityMonitorService;\n  private events: Map<string, SecurityEvent> = new Map();\n  private incidents: Map<string, IncidentResponse> = new Map();\n  private threatIndicators: ThreatIndicator[] = [];\n  private baselineMetrics: Map<string, unknown> = new Map();\n  private anomalyThresholds: Map<string, number> = new Map();\n  private alertSubscribers: Set<(event: SecurityEvent) => void> = new Set();\n  private monitoringActive: boolean = true;\n  private readonly EVENT_RETENTION_DAYS = 90;\n  private readonly CORRELATION_WINDOW = 300000; // 5 minutes\n\n  private constructor() {\n    this.initializeMonitoring();\n  }\n\n  static getInstance(): SecurityMonitorService {\n    if (!SecurityMonitorService.instance) {\n      SecurityMonitorService.instance = new SecurityMonitorService();\n    }\n    return SecurityMonitorService.instance;\n  }\n\n  private initializeMonitoring(): void {\n    this.setupThreatIndicators();\n    this.establishBaseline();\n    this.startRealtimeMonitoring();\n    this.setupIncidentResponseAutomation();\n  }\n\n  /**\n   * Report a security event\n   */\n  async reportEvent(params: {\n    type: SecurityEventType;\n    severity: 'low' | 'medium' | 'high' | 'critical';\n    source: string;\n    target?: string;\n    userId?: string;\n    ipAddress?: string;\n    details: Record<string, any>;\n  }): Promise<SecurityEvent> {\n    const event: SecurityEvent = {\n      _id: cryptoService.generateSecureUUID(),\n      timestamp: new Date(),\n      type: params.type,\n      severity: params.severity,\n      source: params.source,\n      target: params.target,\n      userId: params.userId,\n      ipAddress: params.ipAddress,\n      details: params.details,\n      indicators: this.extractIndicators(params),\n      mitigated: false,\n      responseActions: [],\n    };\n\n    // Store event\n    this.events.set(event.id, event);\n\n    // Log to audit trail\n    await auditLogger.log({ event: 'SECURITY_ALERT',\n      userId: params.userId,\n      details: {\n        eventId: event._id,\n        type: params.type,\n        severity: params.severity,\n        source: params.source,\n      },\n      severity: params.severity === 'critical' ? 'critical' : 'warning',\n    });\n\n    // Check for correlated events\n    const correlated = this.correlateEvents(event);\n    \n    // Determine if incident response needed\n    if (this.requiresIncidentResponse(event, correlated)) {\n      await this.createIncident(event, correlated);\n    }\n\n    // Execute immediate response actions\n    await this.executeImmediateResponse(event);\n\n    // Notify subscribers\n    this.notifySubscribers(event);\n\n    // Update threat metrics\n    this.updateThreatMetrics(event);\n\n    return event;\n  }\n\n  /**\n   * Detect anomalies in system behavior\n   */\n  async detectAnomalies(metrics: Record<string, number>): Promise<{\n    anomalies: Array<{\n      metric: string;\n      value: number;\n      baseline: number;\n      deviation: number;\n      severity: string;\n    }>;\n    overallRisk: number;\n  }> {\n    const anomalies: unknown[] = [];\n    let totalRisk = 0;\n\n    for (const [metric, value] of Object.entries(metrics)) {\n      const baseline = this.baselineMetrics.get(_metric);\n      if (!baseline) continue;\n\n      const deviation = Math.abs(value - baseline) / baseline;\n      const threshold = this.anomalyThresholds.get(_metric) || 0.5;\n\n      if (deviation > threshold) {\n        const severity = deviation > threshold * 2 ? 'high' : \n                        deviation > threshold * 1.5 ? 'medium' : 'low';\n        \n        anomalies.push({\n          metric,\n          value,\n          baseline,\n          deviation,\n          severity,\n        });\n\n        totalRisk += deviation * (severity === 'high' ? 3 : severity === 'medium' ? 2 : 1);\n      }\n    }\n\n    // Report significant anomalies\n    if (anomalies.length > 0 && totalRisk > 5) {\n      await this.reportEvent({\n        type: 'suspicious_activity',\n        severity: totalRisk > 10 ? 'high' : 'medium',\n        source: 'anomaly_detection',\n        details: { anomalies, totalRisk },\n      });\n    }\n\n    return {\n      anomalies,\n      overallRisk: Math.min(100, totalRisk * 10),\n    };\n  }\n\n  /**\n   * Create and manage incident response\n   */\n  async createIncident(\n    triggerEvent: SecurityEvent,\n    correlatedEvents: SecurityEvent[] = []\n  ): Promise<IncidentResponse> {\n    const incident: IncidentResponse = {\n      incidentId: `INC-${Date.now()}-${cryptoService.generateSecureUUID().substring(0, 8)}`,\n      triggeredBy: [triggerEvent, ...correlatedEvents],\n      startTime: new Date(),\n      status: 'active',\n      severity: this.calculateIncidentSeverity(triggerEvent, correlatedEvents),\n      affectedSystems: this.identifyAffectedSystems([triggerEvent, ...correlatedEvents]),\n      affectedUsers: this.identifyAffectedUsers([triggerEvent, ...correlatedEvents]),\n      responseActions: [],\n      escalationLevel: 0,\n      notes: [`Incident created from ${triggerEvent.type} event`],\n    };\n\n    // Store incident\n    this.incidents.set(incident.incidentId, incident);\n\n    // Log incident creation\n    await auditLogger.log({ event: 'SECURITY_ALERT',\n      details: {\n        incidentId: incident.incidentId,\n        severity: incident.severity,\n        affectedUsers: incident.affectedUsers.length,\n        affectedSystems: incident.affectedSystems.length,\n      },\n      severity: 'critical',\n    });\n\n    // Execute incident response playbook\n    await this.executeIncidentPlaybook(_incident);\n\n    // Check if HIPAA breach notification required\n    if (this.requiresBreachNotification(_incident)) {\n      await this.initiateBreachNotification(_incident);\n    }\n\n    return incident;\n  }\n\n  /**\n   * Execute automated incident response\n   */\n  private async executeIncidentPlaybook(incident: IncidentResponse): Promise<void> {\n    const firstTrigger = incident.triggeredBy[0];\n    if (!firstTrigger) {\n      logger.warn('No trigger found for incident, skipping playbook execution');\n      return;\n    }\n    const playbook = this.getPlaybook(incident.severity, firstTrigger.type);\n    \n    for (const action of playbook) {\n      const responseAction: ResponseAction = {\n        actionId: cryptoService.generateSecureUUID(),\n        type: action.type,\n        target: action.target,\n        status: 'pending',\n      };\n      \n      incident.responseActions.push(responseAction);\n      \n      try {\n        responseAction.status = 'in_progress';\n        responseAction.executedAt = new Date();\n        \n        // Execute action based on type\n        switch (action.type) {\n          case 'block_ip':\n            await rateLimiter.blockIP(action.target, 'Security incident', action.duration);\n            break;\n            \n          case 'disable_account':\n            await this.disableUserAccount(action.target);\n            break;\n            \n          case 'force_logout':\n            await this.forceUserLogout(action.target);\n            break;\n            \n          case 'quarantine_data':\n            await this.quarantineData(action.target);\n            break;\n            \n          case 'notify_admin':\n            await this.notifyAdministrators(_incident);\n            break;\n            \n          case 'escalate':\n            await this.escalateIncident(_incident);\n            break;\n            \n          case 'snapshot_system':\n            await this.createSystemSnapshot();\n            break;\n            \n          default:\n            logger.warn(`Unknown response action: ${action.type}`);\n        }\n        \n        responseAction.status = 'completed';\n        responseAction.result = { success: true };\n        \n      } catch (error) {\n        responseAction.status = 'failed';\n        responseAction.error = error instanceof Error ? error.message : '[Error details unavailable]';\n        logger.error(`Failed to execute response action: ${action.type}`, error);\n      }\n    }\n  }\n\n  /**\n   * Get security metrics\n   */\n  getMetrics(): SecurityMetrics {\n    const events = Array.from(this.events.values());\n    const incidents = Array.from(this.incidents.values());\n    \n    // Calculate metrics\n    const eventsBySeverity: Record<string, number> = {};\n    const eventsByType: Record<string, number> = {};\n    \n    events.forEach(event => {\n      eventsBySeverity[event.severity] = (eventsBySeverity[event.severity] || 0) + 1;\n      eventsByType[event.type] = (eventsByType[event.type] || 0) + 1;\n    });\n    \n    // Calculate MTTD and MTTR\n    let totalDetectTime = 0;\n    let totalResponseTime = 0;\n    let detectionCount = 0;\n    let responseCount = 0;\n    \n    incidents.forEach(incident => {\n      if (incident.triggeredBy.length > 0) {\n        const firstTrigger = incident.triggeredBy[0];\n        if (!firstTrigger) return;\n        const detectTime = incident.startTime.getTime() - firstTrigger.timestamp.getTime();\n        totalDetectTime += detectTime;\n        detectionCount++;\n      }\n      \n      if (incident.endTime) {\n        const responseTime = incident.endTime.getTime() - incident.startTime.getTime();\n        totalResponseTime += responseTime;\n        responseCount++;\n      }\n    });\n    \n    // Calculate threat score (0-100)\n    const threatScore = this.calculateThreatScore(events, incidents);\n    \n    return {\n      totalEvents: events.length,\n      eventsBySeverity,\n      eventsByType,\n      activeIncidents: incidents.filter(i => i.status === 'active').length,\n      meanTimeToDetect: detectionCount > 0 ? totalDetectTime / detectionCount : 0,\n      meanTimeToRespond: responseCount > 0 ? totalResponseTime / responseCount : 0,\n      falsePositiveRate: this.calculateFalsePositiveRate(),\n      threatScore,\n    };\n  }\n\n  /**\n   * Subscribe to security alerts\n   */\n  subscribe(callback: (event: SecurityEvent) => void): () => void {\n    this.alertSubscribers.add(callback);\n    return () => this.alertSubscribers.delete(callback);\n  }\n\n  /**\n   * Private helper methods\n   */\n  private setupThreatIndicators(): void {\n    this.threatIndicators = [\n      // Authentication attacks\n      {\n        pattern: /failed_login.*5.*times/i,\n        type: 'brute_force_attack',\n        severity: 'high',\n        confidence: 0.9,\n        description: 'Multiple failed login attempts',\n      },\n      {\n        pattern: /password.*spray/i,\n        type: 'brute_force_attack',\n        severity: 'high',\n        confidence: 0.85,\n        description: 'Password spray attack detected',\n      },\n      \n      // Injection attacks\n      {\n        pattern: /sql.*injection|union.*select|drop.*table/i,\n        type: 'sql_injection',\n        severity: 'critical',\n        confidence: 0.95,\n        description: 'SQL injection attempt',\n      },\n      {\n        pattern: /<script|javascript:|onerror=/i,\n        type: 'xss_attack',\n        severity: 'high',\n        confidence: 0.9,\n        description: 'Cross-site scripting attempt',\n      },\n      \n      // Data exfiltration\n      {\n        pattern: /bulk.*export|mass.*download/i,\n        type: 'data_breach',\n        severity: 'critical',\n        confidence: 0.8,\n        description: 'Potential data exfiltration',\n      },\n      \n      // Privilege escalation\n      {\n        pattern: /admin.*access.*unauthorized|privilege.*escalation/i,\n        type: 'privilege_escalation',\n        severity: 'critical',\n        confidence: 0.9,\n        description: 'Privilege escalation attempt',\n      },\n      \n      // Session attacks\n      {\n        pattern: /session.*hijack|session.*fixation/i,\n        type: 'session_hijacking',\n        severity: 'high',\n        confidence: 0.85,\n        description: 'Session hijacking attempt',\n      },\n      \n      // API abuse\n      {\n        pattern: /rate.*limit.*exceeded|too.*many.*requests/i,\n        type: 'api_abuse',\n        severity: 'medium',\n        confidence: 0.9,\n        description: 'API rate limit abuse',\n      },\n    ];\n  }\n\n  private extractIndicators(params: unknown): string[] {\n    const indicators: string[] = [];\n    const data = JSON.stringify(params);\n    \n    for (const indicator of this.threatIndicators) {\n      if (typeof indicator.pattern === 'string') {\n        if (data.includes(indicator.pattern)) {\n          indicators.push(indicator.description);\n        }\n      } else if (indicator.pattern.test(data)) {\n        indicators.push(indicator.description);\n      }\n    }\n    \n    return indicators;\n  }\n\n  private correlateEvents(event: SecurityEvent): SecurityEvent[] {\n    const correlated: SecurityEvent[] = [];\n    const correlationWindow = Date.now() - this.CORRELATION_WINDOW;\n    \n    for (const [_id, existingEvent] of this.events) {\n      if (_id === event._id) continue;\n      \n      if (existingEvent.timestamp.getTime() > correlationWindow) {\n        // Check for correlation patterns\n        if (\n          (existingEvent.userId && existingEvent.userId === event.userId) ||\n          (existingEvent.ipAddress && existingEvent.ipAddress === event.ipAddress) ||\n          (existingEvent.target && existingEvent.target === event.target)\n        ) {\n          correlated.push(_existingEvent);\n        }\n      }\n    }\n    \n    return correlated;\n  }\n\n  private requiresIncidentResponse(\n    event: SecurityEvent,\n    correlated: SecurityEvent[]\n  ): boolean {\n    // Critical events always require response\n    if (event.severity === 'critical') return true;\n    \n    // Multiple high severity events\n    if (event.severity === 'high' && correlated.length > 2) return true;\n    \n    // Pattern of attacks\n    if (correlated.length > 5) return true;\n    \n    // Specific event types that require response\n    const criticalTypes: SecurityEventType[] = [\n      'data_breach',\n      'privilege_escalation',\n      'malware_detected',\n    ];\n    \n    return criticalTypes.includes(event.type);\n  }\n\n  private calculateIncidentSeverity(\n    trigger: SecurityEvent,\n    correlated: SecurityEvent[]\n  ): 'low' | 'medium' | 'high' | 'critical' {\n    // Start with trigger severity\n    let severityScore = this.severityToScore(trigger.severity);\n    \n    // Add correlated events\n    correlated.forEach(event => {\n      severityScore += this.severityToScore(event.severity) * 0.5;\n    });\n    \n    // Normalize and convert back\n    if (severityScore >= 4) return 'critical';\n    if (severityScore >= 3) return 'high';\n    if (severityScore >= 2) return 'medium';\n    return 'low';\n  }\n\n  private severityToScore(severity: string): number {\n    switch (severity) {\n      case 'critical': return 4;\n      case 'high': return 3;\n      case 'medium': return 2;\n      case 'low': return 1;\n      default: return 0;\n    }\n  }\n\n  private identifyAffectedSystems(events: SecurityEvent[]): string[] {\n    const systems = new Set<string>();\n    events.forEach(event => {\n      if (event.target) systems.add(event.target);\n      if (event.source) systems.add(event.source);\n    });\n    return Array.from(_systems);\n  }\n\n  private identifyAffectedUsers(events: SecurityEvent[]): string[] {\n    const users = new Set<string>();\n    events.forEach(event => {\n      if (event.userId) users.add(event.userId);\n    });\n    return Array.from(_users);\n  }\n\n  private getPlaybook(severity: string, eventType: SecurityEventType): PlaybookAction[] {\n    const playbooks: Record<string, PlaybookAction[]> = {\n      'critical:data_breach': [\n        { type: 'snapshot_system', target: 'all' },\n        { type: 'quarantine_data', target: 'affected' },\n        { type: 'notify_admin', target: 'all' },\n        { type: 'escalate', target: 'security_team' },\n      ],\n      'high:brute_force_attack': [\n        { type: 'block_ip', target: 'attacker', duration: 3600000 },\n        { type: 'force_logout', target: 'affected_user' },\n        { type: 'notify_admin', target: 'security' },\n      ],\n      'default': [\n        { type: 'notify_admin', target: 'security' },\n      ],\n    };\n    \n    const key = `${severity}:${eventType}`;\n    return playbooks[key] || playbooks['default'] || [];\n  }\n\n  private async executeImmediateResponse(event: SecurityEvent): Promise<void> {\n    // Immediate responses based on event type\n    switch (event.type) {\n      case 'brute_force_attack':\n        if (event.ipAddress) {\n          await rateLimiter.requireCaptcha(event.ipAddress);\n        }\n        break;\n        \n      case 'sql_injection':\n      case 'xss_attack':\n        if (event.ipAddress) {\n          await rateLimiter.blockIP(event.ipAddress, 'Attack detected', 3600000);\n        }\n        break;\n        \n      case 'data_breach':\n        // Immediate containment\n        await this.initiateEmergencyMode();\n        break;\n    }\n    \n    event.mitigated = true;\n    event.responseActions.push('immediate_response_executed');\n  }\n\n  private requiresBreachNotification(incident: IncidentResponse): boolean {\n    // Check if PHI was potentially compromised\n    const phiRelatedTypes: SecurityEventType[] = [\n      'data_breach',\n      'unauthorized_access',\n      'privilege_escalation',\n    ];\n    \n    return incident.triggeredBy.some(event => \n      phiRelatedTypes.includes(event.type) && \n      incident.affectedUsers.length > 0\n    );\n  }\n\n  private async initiateBreachNotification(incident: IncidentResponse): Promise<void> {\n    await hipaaService.reportBreach({\n      discoveredBy: 'security_monitor',\n      affectedUsers: incident.affectedUsers,\n      dataCompromised: ['potential_phi_exposure'],\n      cause: `Security incident: ${incident.incidentId}`,\n      immediateActions: incident.responseActions.map(a => a.type),\n    });\n  }\n\n  private async disableUserAccount(userId: string): Promise<void> {\n    // Implementation would disable user account\n    logger.crisis(`Disabling account due to security incident`, 'high', 'SecurityMonitor', { userId });\n  }\n\n  private async forceUserLogout(userId: string): Promise<void> {\n    // Implementation would force logout\n    logger.warn(`Forcing logout due to security incident`, 'SecurityMonitor', { userId });\n  }\n\n  private async quarantineData(target: string): Promise<void> {\n    // Implementation would quarantine data\n    logger.crisis(`Quarantining data due to security threat`, 'high', 'SecurityMonitor', { target });\n  }\n\n  private async notifyAdministrators(incident: IncidentResponse): Promise<void> {\n    // Implementation would send notifications\n    logger.crisis(`Notifying administrators about security incident`, 'critical', 'SecurityMonitor', { incidentId: incident.incidentId });\n  }\n\n  private async escalateIncident(incident: IncidentResponse): Promise<void> {\n    incident.escalationLevel++;\n    incident.notes.push(`Escalated to level ${incident.escalationLevel}`);\n  }\n\n  private async createSystemSnapshot(): Promise<void> {\n    // Implementation would create system snapshot for forensics\n    logger.info('Creating system snapshot for forensic analysis', 'SecurityMonitor');\n  }\n\n  private async initiateEmergencyMode(): Promise<void> {\n    // Emergency containment mode\n    logger.crisis('EMERGENCY MODE ACTIVATED - Containing potential breach', 'critical', 'SecurityMonitor');\n  }\n\n  private establishBaseline(): void {\n    // Establish baseline metrics for anomaly detection\n    this.baselineMetrics.set('login_attempts_per_minute', 10);\n    this.baselineMetrics.set('api_calls_per_minute', 100);\n    this.baselineMetrics.set('data_exports_per_hour', 5);\n    this.baselineMetrics.set('failed_auth_per_hour', 20);\n    this.baselineMetrics.set('new_users_per_day', 50);\n    \n    // Set anomaly thresholds\n    this.anomalyThresholds.set('login_attempts_per_minute', 2.0); // 200% deviation\n    this.anomalyThresholds.set('api_calls_per_minute', 3.0); // 300% deviation\n    this.anomalyThresholds.set('data_exports_per_hour', 5.0); // 500% deviation\n    this.anomalyThresholds.set('failed_auth_per_hour', 2.5); // 250% deviation\n    this.anomalyThresholds.set('new_users_per_day', 4.0); // 400% deviation\n  }\n\n  private startRealtimeMonitoring(): void {\n    // Start monitoring intervals\n    setInterval(() => {\n      this.performSecurityChecks();\n    }, 60000); // Every minute\n    \n    setInterval(() => {\n      this.cleanupOldEvents();\n    }, 24 * 3600000); // Daily\n  }\n\n  private async performSecurityChecks(): Promise<void> {\n    if (!this.monitoringActive) return;\n    \n    // Perform routine security checks\n    // This would integrate with various system components\n  }\n\n  private cleanupOldEvents(): void {\n    const cutoff = Date.now() - (this.EVENT_RETENTION_DAYS * 24 * 3600000);\n    \n    for (const [_id, event] of this.events) {\n      if (event.timestamp.getTime() < cutoff) {\n        this.events.delete(_id);\n      }\n    }\n  }\n\n  private setupIncidentResponseAutomation(): void {\n    // Set up automated incident response rules\n    logger.info('Incident response automation initialized', 'SecurityMonitor');\n  }\n\n  private notifySubscribers(event: SecurityEvent): void {\n    this.alertSubscribers.forEach(callback => {\n      try {\n        callback(event);\n      } catch {\n        logger.error('Alert subscriber error: ');\n      }\n    });\n  }\n\n  private updateThreatMetrics(_event: SecurityEvent): void {\n    // Update running threat metrics\n    // Implementation would update various threat indicators\n  }\n\n  private calculateThreatScore(events: SecurityEvent[], incidents: IncidentResponse[]): number {\n    let score = 0;\n    \n    // Recent events impact\n    const recentEvents = events.filter(e => \n      e.timestamp.getTime() > Date.now() - 3600000 // Last hour\n    );\n    \n    recentEvents.forEach(event => {\n      score += this.severityToScore(event.severity) * 2;\n    });\n    \n    // Active incidents impact\n    incidents.filter(i => i.status === 'active').forEach(incident => {\n      score += this.severityToScore(incident.severity) * 5;\n    });\n    \n    return Math.min(100, score);\n  }\n\n  private calculateFalsePositiveRate(): number {\n    // Simplified calculation\n    // In production, would track confirmed false positives\n    return 0.05; // 5% false positive rate\n  }\n}\n\nexport const _securityMonitor = SecurityMonitorService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\security\\sessionManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\therapy\\therapeuticContent.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\websocket\\EnhancedWebSocketService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":270,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":270,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8257,8260],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8257,8260],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1116,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1116,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[36952,36955],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[36952,36955],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1123,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1123,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[37183,37186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[37183,37186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Enhanced WebSocket Service for Mental Health Platform\r\n * Implements comprehensive real-time communication with HIPAA compliance\r\n * Features: Crisis support, community interaction, notifications, peer support\r\n */\r\n\r\nimport { io, Socket } from 'socket.io-client';\r\nimport { secureStorage } from '../security/SecureLocalStorage';\r\nimport { logger } from '../../utils/logger';\r\n\r\n// Connection state interface\r\ninterface ConnectionState {\r\n  isConnected: boolean;\r\n  reconnectAttempts: number;\r\n  latency: number;\r\n  connectionQuality: 'excellent' | 'good' | 'fair' | 'poor';\r\n  lastSuccessfulMessage: Date;\r\n  lastError?: Error;\r\n  messagesQueued: number;\r\n  dataUsage: {\r\n    sent: number;\r\n    received: number;\r\n    session: number;\r\n  };\r\n}\r\n\r\n// Enhanced WebSocket Configuration\r\nconst WS_CONFIG = {\r\n  url: import.meta.env.VITE_WS_URL || 'ws://localhost:3002',\r\n  reconnection: true,\r\n  reconnectionDelay: 1000,\r\n  reconnectionDelayMax: 5000,\r\n  reconnectionAttempts: 10,\r\n  timeout: 20000,\r\n  transports: ['websocket', 'polling'],\r\n  auth: {\r\n    token: ''\r\n  },\r\n  secure: true,\r\n  compress: true,\r\n  forceNew: false\r\n};\r\n\r\n// Comprehensive WebSocket Event Types for Mental Health Platform\r\nexport enum WSEventType {\r\n  // Connection Events\r\n  CONNECT = 'connect',\r\n  DISCONNECT = 'disconnect',\r\n  RECONNECT = 'reconnect',\r\n  ERROR = 'error',\r\n  CONNECTION_QUALITY = 'connection:quality',\r\n  \r\n  // Authentication Events\r\n  AUTH_SUCCESS = 'auth:success',\r\n  AUTH_FAILURE = 'auth:failure',\r\n  SESSION_REFRESH = 'session:refresh',\r\n  \r\n  // Crisis Events\r\n  CRISIS_ALERT = 'crisis:alert',\r\n  CRISIS_COUNSELOR_ASSIGNED = 'crisis:counselor_assigned',\r\n  CRISIS_MESSAGE = 'crisis:message',\r\n  CRISIS_SESSION_ENDED = 'crisis:session_ended',\r\n  CRISIS_ESCALATION = 'crisis:escalation',\r\n  CRISIS_TYPING = 'crisis:typing',\r\n  CRISIS_INTERVENTION = 'crisis:intervention',\r\n  CRISIS_FOLLOW_UP = 'crisis:follow_up',\r\n  \r\n  // Community Events\r\n  COMMUNITY_POST_NEW = 'community:post_new',\r\n  COMMUNITY_POST_UPDATED = 'community:post_updated',\r\n  COMMUNITY_POST_LIKED = 'community:post_liked',\r\n  COMMUNITY_COMMENT_NEW = 'community:comment_new',\r\n  COMMUNITY_USER_TYPING = 'community:user_typing',\r\n  COMMUNITY_USER_ONLINE = 'community:user_online',\r\n  COMMUNITY_USER_OFFLINE = 'community:user_offline',\r\n  COMMUNITY_MODERATION = 'community:moderation',\r\n  \r\n  // Peer Support Events\r\n  PEER_SUPPORT_REQUEST = 'peer_support:request',\r\n  PEER_SUPPORT_MATCHED = 'peer_support:matched',\r\n  PEER_SUPPORT_MESSAGE = 'peer_support:message',\r\n  PEER_SUPPORT_ENDED = 'peer_support:ended',\r\n  \r\n  // Notification Events\r\n  NOTIFICATION_APPOINTMENT = '_notification:appointment',\r\n  NOTIFICATION_MEDICATION = '_notification:medication',\r\n  NOTIFICATION_CRISIS_CHECK = '_notification:crisis_check',\r\n  NOTIFICATION_SYSTEM = '_notification:system',\r\n  NOTIFICATION_WELLNESS = '_notification:wellness',\r\n  NOTIFICATION_ACHIEVEMENT = '_notification:achievement',\r\n  NOTIFICATION_REMINDER = '_notification:reminder',\r\n  \r\n  // Presence Events\r\n  PRESENCE_UPDATE = 'presence:update',\r\n  PRESENCE_REQUEST = 'presence:request',\r\n  PRESENCE_MOOD_CHANGE = 'presence:mood_change',\r\n  \r\n  // Therapist Events\r\n  THERAPIST_AVAILABLE = 'therapist:available',\r\n  THERAPIST_BUSY = 'therapist:busy',\r\n  THERAPIST_MESSAGE = 'therapist:message',\r\n  THERAPIST_SESSION_START = 'therapist:session_start',\r\n  THERAPIST_HOMEWORK_ASSIGNED = 'therapist:homework_assigned',\r\n  \r\n  // Group Session Events\r\n  GROUP_SESSION_START = 'group:session_start',\r\n  GROUP_SESSION_END = 'group:session_end',\r\n  GROUP_USER_JOIN = 'group:user_join',\r\n  GROUP_USER_LEAVE = 'group:user_leave',\r\n  GROUP_MESSAGE = 'group:message',\r\n  GROUP_ACTIVITY_START = 'group:activity_start',\r\n  \r\n  // Wellness and Progress Events\r\n  WELLNESS_GOAL_UPDATE = 'wellness:goal_update',\r\n  WELLNESS_MILESTONE = 'wellness:milestone',\r\n  MOOD_PATTERN_ALERT = 'mood:pattern_alert',\r\n  HABIT_STREAK_UPDATE = 'habit:streak_update',\r\n  \r\n  // Real-time Analytics\r\n  ANALYTICS_UPDATE = 'analytics:update',\r\n  INSIGHTS_AVAILABLE = 'insights:available',\r\n  \r\n  // System Events\r\n  MAINTENANCE_MODE = 'system:maintenance',\r\n  FEATURE_UPDATE = 'system:feature_update',\r\n  SECURITY_ALERT = 'system:security_alert'\r\n}\r\n\r\n// Enhanced notification types for mental health platform\r\nexport enum NotificationType {\r\n  // Wellness notifications\r\n  MOOD_REMINDER = 'mood_reminder',\r\n  MEDICATION_REMINDER = 'medication_reminder',\r\n  HYDRATION_REMINDER = 'hydration_reminder',\r\n  EXERCISE_REMINDER = 'exercise_reminder',\r\n  SLEEP_REMINDER = 'sleep_reminder',\r\n  THERAPY_HOMEWORK = 'therapy_homework',\r\n  \r\n  // Crisis and safety\r\n  CRISIS_ALERT = 'crisis_alert',\r\n  SAFETY_CHECK = 'safety_check',\r\n  EMERGENCY_CONTACT = 'emergency_contact',\r\n  PROFESSIONAL_REFERRAL = 'professional_referral',\r\n  \r\n  // Community and social\r\n  NEW_COMMUNITY_POST = 'new_community_post',\r\n  POST_REPLY = 'post_reply',\r\n  POST_LIKED = 'post_liked',\r\n  SUPPORT_GROUP_INVITATION = 'support_group_invitation',\r\n  GROUP_EVENT_REMINDER = 'group_event_reminder',\r\n  PEER_SUPPORT_REQUEST = 'peer_support_request',\r\n  \r\n  // Progress and achievements\r\n  GOAL_MILESTONE = 'goal_milestone',\r\n  STREAK_ACHIEVEMENT = 'streak_achievement',\r\n  WEEKLY_PROGRESS = 'weekly_progress',\r\n  INSIGHT_AVAILABLE = 'insight_available',\r\n  \r\n  // System and updates\r\n  APP_UPDATE = 'app_update',\r\n  FEATURE_ANNOUNCEMENT = 'feature_announcement',\r\n  MAINTENANCE_NOTICE = 'maintenance_notice',\r\n  SECURITY_ALERT = 'security_alert'\r\n}\r\n\r\n// Enhanced interfaces for comprehensive mental health communication\r\nexport interface EnhancedMessage {\r\n  id: string;\r\n  content: string;\r\n  senderId: string;\r\n  timestamp: Date;\r\n  messageType: 'text' | 'image' | 'audio' | 'file' | 'emoji' | 'sticker' | 'poll' | 'crisis_alert';\r\n  metadata?: {\r\n    moodContext?: number;\r\n    isEncrypted?: boolean;\r\n    requiresResponse?: boolean;\r\n    expiresAt?: Date;\r\n    supportLevel?: 'low' | 'medium' | 'high' | 'crisis';\r\n    therapeuticCategory?: 'cbt' | 'dbt' | 'mindfulness' | 'behavioral' | 'emotional';\r\n  };\r\n  reactions?: {\r\n    userId: string;\r\n    reaction: string;\r\n    timestamp: Date;\r\n  }[];\r\n  threadId?: string;\r\n  parentMessageId?: string;\r\n}\r\n\r\nexport interface UserPresence {\r\n  userId: string;\r\n  username: string;\r\n  status: 'online' | 'away' | 'busy' | 'invisible' | 'in-crisis' | 'in-therapy';\r\n  lastSeen: Date;\r\n  currentActivity?: {\r\n    type: 'browsing' | 'journaling' | 'community' | 'therapy' | 'crisis-support';\r\n    details?: string;\r\n  };\r\n  moodStatus?: {\r\n    level: number;\r\n    emoji?: string;\r\n    isPrivate: boolean;\r\n  };\r\n  supportAvailability?: {\r\n    isPeerSupporter: boolean;\r\n    isAvailable: boolean;\r\n    expertiseAreas?: string[];\r\n  };\r\n}\r\n\r\nexport interface PeerSupportSession {\r\n  id: string;\r\n  type: 'crisis' | 'general' | 'specific';\r\n  startTime: Date;\r\n  endTime?: Date;\r\n  participants: string[];\r\n  status: 'seeking-support' | 'matched' | 'in-progress' | 'completed' | 'cancelled';\r\n  metadata?: unknown;\r\n  feedback?: {\r\n    helpful: boolean;\r\n    rating: number;\r\n    comment?: string;\r\n  };\r\n}\r\n\r\nexport interface TypingUser {\r\n  userId: string;\r\n  username: string;\r\n  timestamp: number;\r\n}\r\n\r\n\r\nexport interface QueuedMessage {\r\n  event: string;\r\n  data: unknown;\r\n  timestamp: number;\r\n  retries: number;\r\n}\r\n\r\nexport interface NotificationOptions {\r\n  icon?: string;\r\n  _priority?: 'low' | 'normal' | 'high' | 'critical';\r\n  actions?: { _action: string; title: string }[];\r\n  requireInteraction?: boolean;\r\n  celebrationEffect?: boolean;\r\n  soundType?: 'gentle' | 'urgent' | 'success' | 'none';\r\n  vibrationPattern?: number[];\r\n}\r\n\r\n/**\r\n * Enhanced WebSocket Service Class\r\n * Provides comprehensive real-time communication for mental health platform\r\n */\r\nexport class EnhancedWebSocketService {\r\n  private static instance: EnhancedWebSocketService;\r\n  private socket: Socket | null = null;\r\n  private connectionState: ConnectionState = {\r\n    isConnected: false,\r\n    reconnectAttempts: 0,\r\n    latency: 0,\r\n    connectionQuality: 'poor',\r\n    lastSuccessfulMessage: new Date(),\r\n    messagesQueued: 0,\r\n    dataUsage: {\r\n      sent: 0,\r\n      received: 0,\r\n      session: 0,\r\n    },\r\n  };\r\n  private eventHandlers: Map<string, Set<(...args: any[]) => void>> = new Map();\r\n  private typingUsers: Map<string, TypingUser> = new Map();\r\n  private messageQueue: QueuedMessage[] = [];\r\n  private heartbeatInterval: NodeJS.Timeout | null = null;\r\n  private currentUser: unknown = null;\r\n  private activeRooms: Set<string> = new Set();\r\n  \r\n  // Enhanced real-time features\r\n  private userPresences: Map<string, UserPresence> = new Map();\r\n  private notificationQueue: Notification[] = [];\r\n  private activeNotifications: Map<string, Notification> = new Map();\r\n  private messageThreads: Map<string, EnhancedMessage[]> = new Map();\r\n  private peerSupportSessions: Map<string, PeerSupportSession> = new Map();\r\n  private realTimeAnalytics = {\r\n    messagesExchanged: 0,\r\n    supportSessionsInitiated: 0,\r\n    crisisAlertsHandled: 0,\r\n    communityInteractions: 0,\r\n  };\r\n  \r\n  // Notification system\r\n  private notificationPermission: NotificationPermission = 'default';\r\n  private serviceWorker: ServiceWorker | null = null;\r\n// @ts-expect-error - PushSubscription is a global API\r\n  private pushSubscription: PushSubscription | null = null;\r\n\r\n  private constructor() {\r\n    this.initializeConnectionState();\r\n    this.loadQueuedMessages();\r\n    this.initializeNotificationSystem();\r\n  }\r\n\r\n  // Singleton pattern\r\n  public static getInstance(): EnhancedWebSocketService {\r\n    if (!EnhancedWebSocketService.instance) {\r\n      EnhancedWebSocketService.instance = new EnhancedWebSocketService();\r\n    }\r\n    return EnhancedWebSocketService.instance;\r\n  }\r\n\r\n  private initializeConnectionState(): void {\r\n    this.connectionState = {\r\n      isConnected: false,\r\n      reconnectAttempts: 0,\r\n      latency: 0,\r\n      connectionQuality: 'good',\r\n      lastSuccessfulMessage: new Date(),\r\n      messagesQueued: 0,\r\n      dataUsage: {\r\n        sent: 0,\r\n        received: 0,\r\n        session: 0\r\n      }\r\n    };\r\n  }\r\n  \r\n  private initializeNotificationSystem(): void {\r\n    // Initialize _notification permissions\r\n    if ('Notification' in window) {\r\n      this.notificationPermission = Notification.permission;\r\n      \r\n      if (this.notificationPermission === 'default') {\r\n        Notification.requestPermission().then(permission => {\r\n          this.notificationPermission = permission;\r\n        });\r\n      }\r\n    }\r\n    \r\n    this.loadNotificationPreferences();\r\n  }\r\n  \r\n  private loadNotificationPreferences(): void {\r\n    try {\r\n      const _prefs = secureStorage.getItem('notification_preferences');\r\n      if (_prefs) {\r\n        const preferences = JSON.parse(_prefs);\r\n        logger.debug('Loaded _notification preferences', 'EnhancedWebSocket', preferences);\r\n      }\r\n    } catch {\r\n      logger.error('Failed to load _notification preferences:');\r\n    }\r\n  }\r\n\r\n  // Initialize WebSocket connection with enhanced monitoring\r\n  public connect(token: string, user: unknown): void {\r\n    if (this.socket?.connected) {\r\n      logger.debug('WebSocket already connected', 'EnhancedWebSocket');\r\n      return;\r\n    }\r\n\r\n    this.currentUser = user;\r\n    WS_CONFIG.auth.token = token;\r\n\r\n    // Create socket connection with enhanced configuration\r\n    this.socket = io(WS_CONFIG.url, {\r\n      ...WS_CONFIG,\r\n      auth: WS_CONFIG.auth,\r\n      forceNew: false\r\n    });\r\n\r\n    this.setupEventListeners();\r\n    this.startHeartbeat();\r\n    this.startConnectionMonitoring();\r\n    \r\n    // Initialize user presence\r\n    this.updateUserPresence({\r\n      status: 'online',\r\n      currentActivity: {\r\n        type: 'browsing',\r\n        details: 'Connected to platform'\r\n      }\r\n    });\r\n  }\r\n\r\n  // Disconnect WebSocket\r\n  public disconnect(): void {\r\n    if (this.socket) {\r\n      this.stopHeartbeat();\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n      this.connectionState.isConnected = false;\r\n      this.activeRooms.clear();\r\n      this.typingUsers.clear();\r\n      \r\n      // Update presence to offline\r\n      if (this.currentUser) {\r\n        this.updateUserPresence({ status: 'invisible' });\r\n      }\r\n    }\r\n  }\r\n\r\n  private startConnectionMonitoring(): void {\r\n    setInterval(() => {\r\n      if (this.socket?.connected) {\r\n        const now = Date.now();\r\n        const timeSinceLastMessage = now - this.connectionState.lastSuccessfulMessage.getTime();\r\n        \r\n        // Update connection quality based on latency and recent activity\r\n        if (this.connectionState.latency < 100 && timeSinceLastMessage < 30000) {\r\n          this.connectionState.connectionQuality = 'excellent';\r\n        } else if (this.connectionState.latency < 300 && timeSinceLastMessage < 60000) {\r\n          this.connectionState.connectionQuality = 'good';\r\n        } else if (this.connectionState.latency < 1000) {\r\n          this.connectionState.connectionQuality = 'fair';\r\n        } else {\r\n          this.connectionState.connectionQuality = 'poor';\r\n        }\r\n        \r\n        this.emit(WSEventType.CONNECTION_QUALITY, {\r\n          quality: this.connectionState.connectionQuality,\r\n          latency: this.connectionState.latency,\r\n          messagesQueued: this.messageQueue.length\r\n        });\r\n      }\r\n    }, 10000); // Check every 10 seconds\r\n  }\r\n\r\n  // Setup comprehensive event listeners for mental health platform\r\n  private setupEventListeners(): void {\r\n    if (!this.socket) return;\r\n\r\n    // Connection events with enhanced monitoring\r\n    this.socket.on(WSEventType.CONNECT, () => {\r\n      logger.info('WebSocket connected', 'EnhancedWebSocket');\r\n      this.connectionState.isConnected = true;\r\n      this.connectionState.reconnectAttempts = 0;\r\n      this.connectionState.lastSuccessfulMessage = new Date();\r\n      this.processQueuedMessages();\r\n      this.emit(WSEventType.CONNECT, { timestamp: new Date() });\r\n      \r\n      // Rejoin rooms after reconnection\r\n      this.activeRooms.forEach(_room => {\r\n        this.joinRoom(_room);\r\n      });\r\n      \r\n      // Restore user presence after reconnection\r\n      if (this.currentUser) {\r\n        this.updateUserPresence({ status: 'online' });\r\n      }\r\n      \r\n      // Send any queued notifications\r\n      this.processQueuedNotifications();\r\n    });\r\n\r\n    this.socket.on(WSEventType.DISCONNECT, (reason: unknown) => {\r\n      logger.info('WebSocket disconnected', 'EnhancedWebSocket', { reason });\r\n      this.connectionState.isConnected = false;\r\n      this.emit(WSEventType.DISCONNECT, { reason, timestamp: new Date() });\r\n    });\r\n\r\n    this.socket.on(WSEventType.ERROR, (error: unknown) => {\r\n      logger.error('WebSocket error:', error);\r\n      this.connectionState.lastError = error;\r\n      this.emit(WSEventType.ERROR, { error, timestamp: new Date() });\r\n    });\r\n\r\n    // Setup all event type listeners\r\n    this.setupAuthenticationEventListeners();\r\n    this.setupCrisisEventListeners();\r\n    this.setupCommunityEventListeners();\r\n    this.setupNotificationEventListeners();\r\n    this.setupPresenceEventListeners();\r\n    this.setupPeerSupportEventListeners();\r\n    this.setupTherapistEventListeners();\r\n    this.setupGroupEventListeners();\r\n    this.setupWellnessEventListeners();\r\n  }\r\n\r\n  private setupAuthenticationEventListeners(): void {\r\n    if (!this.socket) return;\r\n\r\n    this.socket.on(WSEventType.AUTH_SUCCESS, (data: unknown) => {\r\n      logger.info('WebSocket authentication successful', 'EnhancedWebSocket');\r\n      this.emit(WSEventType.AUTH_SUCCESS, data);\r\n    });\r\n\r\n    this.socket.on(WSEventType.AUTH_FAILURE, (data: unknown) => {\r\n      logger.error('WebSocket authentication failed:', data);\r\n      this.emit(WSEventType.AUTH_FAILURE, data);\r\n      this.disconnect();\r\n    });\r\n  }\r\n\r\n  // Crisis event listeners with comprehensive support\r\n  private setupCrisisEventListeners(): void {\r\n    if (!this.socket) return;\r\n\r\n    this.socket.on(WSEventType.CRISIS_ALERT, (data: unknown) => {\r\n      logger.crisis('Crisis alert received', 'high', 'EnhancedWebSocket', data);\r\n      this.emit(WSEventType.CRISIS_ALERT, data);\r\n      \r\n      // Auto-join crisis _room if it's for current user\r\n      if (data.userId === this.currentUser?.id) {\r\n        this.joinCrisisSession(data.sessionId);\r\n      }\r\n      \r\n      // Show critical crisis notification\r\n      this.showNotification('Crisis Support Activated', 'Immediate support is available', {\r\n        icon: '🚨',\r\n        _priority: 'critical',\r\n        requireInteraction: true,\r\n        actions: [\r\n          { _action: 'emergency', title: 'Emergency Services' },\r\n          { _action: 'crisis-chat', title: 'Crisis Chat' },\r\n          { _action: 'support', title: 'Find Support' }\r\n        ]\r\n      });\r\n    });\r\n\r\n    this.socket.on(WSEventType.CRISIS_ESCALATION, (data: unknown) => {\r\n      logger.crisis('Crisis escalated', 'critical', 'EnhancedWebSocket', data);\r\n      this.emit(WSEventType.CRISIS_ESCALATION, data);\r\n      this.handleCrisisEscalation(data);\r\n    });\r\n\r\n    this.socket.on(WSEventType.CRISIS_INTERVENTION, (data: unknown) => {\r\n      this.showNotification('Professional Support', 'A crisis counselor is joining your session', {\r\n        icon: '👨⚕️',\r\n        _priority: 'high',\r\n        requireInteraction: true\r\n      });\r\n      this.emit(WSEventType.CRISIS_INTERVENTION, data);\r\n    });\r\n  }\r\n\r\n  // Community event listeners with real-time updates\r\n  private setupCommunityEventListeners(): void {\r\n    if (!this.socket) return;\r\n\r\n    this.socket.on(WSEventType.COMMUNITY_POST_NEW, (data: unknown) => {\r\n      this.emit(WSEventType.COMMUNITY_POST_NEW, data);\r\n      this.realTimeAnalytics.communityInteractions++;\r\n      \r\n      this.showNotification('New Community Post', `${data.author}: \"${data.preview}\"`, {\r\n        icon: '💬',\r\n        actions: [\r\n          { _action: 'view', title: 'View Post' },\r\n          { _action: 'react', title: 'Send Support' }\r\n        ]\r\n      });\r\n    });\r\n\r\n    this.socket.on(WSEventType.COMMUNITY_POST_LIKED, (data: unknown) => {\r\n      if (data.authorId === this.currentUser?.id) {\r\n        this.showNotification('Post Appreciated', 'Someone found your post helpful', {\r\n          icon: '❤️',\r\n          soundType: 'success'\r\n        });\r\n      }\r\n    });\r\n\r\n    this.socket.on(WSEventType.COMMUNITY_MODERATION, (data: unknown) => {\r\n      if (data.userId === this.currentUser?.id) {\r\n        this.showNotification('Community Guidelines', data.message, {\r\n          icon: '⚠️',\r\n          _priority: 'high',\r\n          requireInteraction: true\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  // Enhanced notification event listeners\r\n  private setupNotificationEventListeners(): void {\r\n    if (!this.socket) return;\r\n\r\n    // Wellness notifications\r\n    this.socket.on(WSEventType.NOTIFICATION_MEDICATION, (data: unknown) => {\r\n      this.emit(WSEventType.NOTIFICATION_MEDICATION, data);\r\n      this.showNotification('Medication Reminder', data.payload.message, {\r\n        icon: '💊',\r\n        actions: [\r\n          { _action: 'taken', title: 'Taken' },\r\n          { _action: 'skip', title: 'Skip' },\r\n          { _action: 'snooze', title: 'Remind in 15m' }\r\n        ],\r\n        requireInteraction: true\r\n      });\r\n    });\r\n\r\n    this.socket.on(WSEventType.NOTIFICATION_WELLNESS, (_data: unknown) => {\r\n      this.showNotification('Wellness Check-In', 'How are you feeling right now?', {\r\n        icon: '🌈',\r\n        actions: [\r\n          { _action: 'great', title: '😄 Great' },\r\n          { _action: 'good', title: '😊 Good' },\r\n          { _action: 'okay', title: '😐 Okay' },\r\n          { _action: 'low', title: '😔 Low' }\r\n        ]\r\n      });\r\n    });\r\n\r\n    this.socket.on(WSEventType.NOTIFICATION_ACHIEVEMENT, (data: unknown) => {\r\n      this.showNotification('Achievement Unlocked!', data.title, {\r\n        icon: data.icon || '🏆',\r\n        _celebrationEffect: true,\r\n        soundType: 'success',\r\n        actions: [\r\n          { _action: 'view', title: 'View Progress' },\r\n          { _action: 'share', title: 'Share Achievement' }\r\n        ]\r\n      });\r\n    });\r\n  }\r\n\r\n  // Presence event listeners\r\n  private setupPresenceEventListeners(): void {\r\n    if (!this.socket) return;\r\n\r\n    this.socket.on(WSEventType.PRESENCE_UPDATE, (data: UserPresence) => {\r\n      this.userPresences.set(data.userId, data);\r\n      this.emit(WSEventType.PRESENCE_UPDATE, data);\r\n    });\r\n\r\n    this.socket.on(WSEventType.PRESENCE_MOOD_CHANGE, (data: unknown) => {\r\n      const presence = this.userPresences.get(data.userId);\r\n      if (presence) {\r\n        presence.moodStatus = data.moodStatus;\r\n        this.emit(WSEventType.PRESENCE_MOOD_CHANGE, data);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Peer support event listeners\r\n  private setupPeerSupportEventListeners(): void {\r\n    if (!this.socket) return;\r\n\r\n    this.socket.on(WSEventType.PEER_SUPPORT_REQUEST, (data: unknown) => {\r\n      this.showNotification('Peer Support Request', 'Someone nearby needs support', {\r\n        icon: '🤝',\r\n        _priority: 'high',\r\n        requireInteraction: true,\r\n        actions: [\r\n          { _action: 'accept', title: 'Offer Support' },\r\n          { _action: 'refer', title: 'Refer Professional' }\r\n        ]\r\n      });\r\n      this.emit(WSEventType.PEER_SUPPORT_REQUEST, data);\r\n    });\r\n\r\n    this.socket.on(WSEventType.PEER_SUPPORT_MATCHED, (data: unknown) => {\r\n      const session = this.peerSupportSessions.get(data.sessionId);\r\n      if (session) {\r\n        session.status = 'matched';\r\n        session.participants = data.participants;\r\n      }\r\n      this.emit(WSEventType.PEER_SUPPORT_MATCHED, data);\r\n    });\r\n  }\r\n\r\n  // Therapist event listeners\r\n  private setupTherapistEventListeners(): void {\r\n    if (!this.socket) return;\r\n\r\n    this.socket.on(WSEventType.THERAPIST_HOMEWORK_ASSIGNED, (data: unknown) => {\r\n      this.showNotification('New Therapy Homework', `Your therapist assigned: ${data.title}`, {\r\n        icon: '📚',\r\n        actions: [\r\n          { _action: 'view', title: 'View Assignment' },\r\n          { _action: 'schedule', title: 'Schedule Time' }\r\n        ]\r\n      });\r\n    });\r\n\r\n    this.socket.on(WSEventType.THERAPIST_SESSION_START, (_data: unknown) => {\r\n      this.showNotification('Therapy Session Starting', 'Your therapist is ready', {\r\n        icon: '👨⚕️',\r\n        _priority: 'high',\r\n        requireInteraction: true,\r\n        actions: [{ _action: 'join', title: 'Join Session' }]\r\n      });\r\n    });\r\n  }\r\n\r\n  // Group session event listeners\r\n  private setupGroupEventListeners(): void {\r\n    if (!this.socket) return;\r\n\r\n    this.socket.on(WSEventType.GROUP_SESSION_START, (data: unknown) => {\r\n      this.showNotification('Group Session Starting', `${data.groupName} session is beginning`, {\r\n        icon: '👥',\r\n        actions: [{ _action: 'join', title: 'Join Now' }]\r\n      });\r\n      this.joinGroupSession(data.groupId, data.sessionId);\r\n    });\r\n\r\n    this.socket.on(WSEventType.GROUP_ACTIVITY_START, (data: unknown) => {\r\n      this.showNotification('Group Activity', `${data.activityName} is starting in your group`, {\r\n        icon: '🎯',\r\n        actions: [{ _action: 'participate', title: 'Participate' }]\r\n      });\r\n    });\r\n  }\r\n\r\n  // Wellness event listeners\r\n  private setupWellnessEventListeners(): void {\r\n    if (!this.socket) return;\r\n\r\n    this.socket.on(WSEventType.WELLNESS_MILESTONE, (data: unknown) => {\r\n      this.showNotification('Wellness Milestone!', `You've reached ${data.milestone}!`, {\r\n        icon: '🎉',\r\n        _celebrationEffect: true,\r\n        soundType: 'success'\r\n      });\r\n    });\r\n\r\n    this.socket.on(WSEventType.MOOD_PATTERN_ALERT, (data: unknown) => {\r\n      this.showNotification('Mood Pattern Insight', data.insight, {\r\n        icon: '📈',\r\n        actions: [\r\n          { _action: 'view-insights', title: 'View Insights' },\r\n          { _action: 'adjust-goals', title: 'Adjust Goals' }\r\n        ]\r\n      });\r\n    });\r\n\r\n    this.socket.on(WSEventType.HABIT_STREAK_UPDATE, (data: unknown) => {\r\n      this.showNotification(`${data.habitName} Streak!`, `${data.streakCount} days strong! 🔥`, {\r\n        icon: '🔥',\r\n        soundType: 'success'\r\n      });\r\n    });\r\n  }\r\n\r\n  // Enhanced notification handling\r\n  private showNotification(title: string, message: string, options: NotificationOptions = {}): void {\r\n    const { icon = '🔔', _priority = 'normal', actions = [], requireInteraction = false, _celebrationEffect = false, soundType = 'gentle', vibrationPattern } = options;\r\n\r\n    if (!this.shouldShowNotification(_priority)) return;\r\n\r\n    const notificationId = `notification-${Date.now()}`;\r\n    const notificationData = {\r\n      id: notificationId,\r\n      title,\r\n      message,\r\n      timestamp: new Date(),\r\n      _priority,\r\n      actions,\r\n      isRead: false,\r\n      category: this.categorizeNotification(title, message)\r\n    };\r\n\r\n    this.activeNotifications.set(notificationId, notificationData as unknown);\r\n    this.saveNotificationHistory(_notificationData);\r\n\r\n    if ('Notification' in window && Notification.permission === 'granted') {\r\n      const browserNotification = new Notification(title, {\r\n        body: message,\r\n        icon: this.getNotificationIcon(icon),\r\n        badge: '/icon-72x72.png',\r\n        tag: notificationId,\r\n        requireInteraction: requireInteraction || _priority === 'critical',\r\n        silent: _priority === 'low' || soundType === 'none',\r\n        data: { notificationId, category: notificationData.category }\r\n      });\r\n\r\n      browserNotification.onclick = (event) => {\r\n        this.handleNotificationClick(notificationId, 'click', event);\r\n      };\r\n\r\n      const autoCloseDelay = this.getAutoCloseDelay(_priority);\r\n      if (autoCloseDelay > 0) {\r\n        setTimeout(() => {\r\n          browserNotification.close();\r\n          this.markNotificationAsRead(_notificationId);\r\n        }, autoCloseDelay);\r\n      }\r\n    }\r\n\r\n    if (_celebrationEffect) {\r\n      this.triggerCelebrationEffect();\r\n    }\r\n\r\n    if (vibrationPattern && 'vibrate' in navigator) {\r\n      navigator.vibrate(_vibrationPattern);\r\n    } else {\r\n      const defaultPattern = this.getVibrationPattern(_priority);\r\n      if (defaultPattern && 'vibrate' in navigator) {\r\n        navigator.vibrate(_defaultPattern);\r\n      }\r\n    }\r\n\r\n    this.playNotificationSound(_soundType);\r\n    this.emit('notification:new', notificationData);\r\n  }\r\n\r\n  // Helper methods for notification system\r\n  private shouldShowNotification(_priority: string): boolean {\r\n    if (this.notificationPermission !== 'granted') return false;\r\n\r\n    const now = new Date();\r\n    const currentTime = now.getHours() * 60 + now.getMinutes();\r\n    const quietStart = 22 * 60;\r\n    const quietEnd = 7 * 60;\r\n\r\n    const isQuietHours = currentTime >= quietStart || currentTime <= quietEnd;\r\n    if (isQuietHours && _priority !== 'critical') {\r\n      this.queueNotificationForLater({ _priority } as unknown);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private categorizeNotification(title: string, _message: string): string {\r\n    const lowerTitle = title.toLowerCase();\r\n    if (lowerTitle.includes('crisis') || lowerTitle.includes('emergency')) return 'crisis';\r\n    if (lowerTitle.includes('medication') || lowerTitle.includes('pill')) return 'medication';\r\n    if (lowerTitle.includes('appointment') || lowerTitle.includes('therapy')) return 'healthcare';\r\n    if (lowerTitle.includes('mood') || lowerTitle.includes('feeling')) return 'wellness';\r\n    if (lowerTitle.includes('community') || lowerTitle.includes('post')) return 'social';\r\n    if (lowerTitle.includes('achievement') || lowerTitle.includes('goal')) return 'progress';\r\n    return 'general';\r\n  }\r\n\r\n  private getNotificationIcon(icon: string): string {\r\n    const iconMap: Record<string, string> = {\r\n      '💊': '/icons/medication.png',\r\n      '📅': '/icons/calendar.png',\r\n      '🫂': '/icons/support.png',\r\n      '💬': '/icons/community.png',\r\n      '🏆': '/icons/achievement.png',\r\n      '🌈': '/icons/mood.png',\r\n      '🚨': '/icons/crisis.png',\r\n    };\r\n    return iconMap[icon] || '/icon-192x192.png';\r\n  }\r\n\r\n  private getAutoCloseDelay(_priority: string): number {\r\n    switch (_priority) {\r\n      case 'low': return 3000;\r\n      case 'normal': return 5000;\r\n      case 'high': return 10000;\r\n      case 'critical': return 0;\r\n      default: return 5000;\r\n    }\r\n  }\r\n\r\n  private getVibrationPattern(_priority: string): number[] | null {\r\n    switch (_priority) {\r\n      case 'low': return [100];\r\n      case 'normal': return [200, 100, 200];\r\n      case 'high': return [300, 100, 300, 100, 300];\r\n      case 'critical': return [500, 200, 500, 200, 500, 200, 500];\r\n      default: return null;\r\n    }\r\n  }\r\n\r\n  private playNotificationSound(soundType: string): void {\r\n    logger.debug(`Playing _notification sound: ${soundType}`, 'EnhancedWebSocket');\r\n  }\r\n\r\n  private triggerCelebrationEffect(): void {\r\n    this.emit('_notification:celebration', { type: 'achievement' });\r\n  }\r\n\r\n  private handleNotificationClick(notificationId: string, _action: string, _event: unknown): void {\r\n    const _notification = this.activeNotifications.get(_notificationId);\r\n    if (!_notification) return;\r\n\r\n    this.markNotificationAsRead(_notificationId);\r\n\r\n    switch (_action) {\r\n      case 'click':\r\n        window.focus();\r\n        this.emit('_notification:clicked', { notificationId, _notification });\r\n        break;\r\n      case 'taken':\r\n        this.emit('medication:taken', { notificationId, timestamp: new Date() });\r\n        break;\r\n      case 'support':\r\n        this.emit('support:requested', { notificationId, urgency: (_notification as unknown)._priority });\r\n        break;\r\n    }\r\n  }\r\n\r\n  private markNotificationAsRead(notificationId: string): void {\r\n    const _notification = this.activeNotifications.get(_notificationId);\r\n    if (_notification) {\r\n      (_notification as unknown).isRead = true;\r\n      this.emit('_notification:read', { notificationId });\r\n    }\r\n  }\r\n\r\n  private queueNotificationForLater(_notification: Notification): void {\r\n    this.notificationQueue.push(_notification);\r\n  }\r\n\r\n  private saveNotificationHistory(_notification: unknown): void {\r\n    try {\r\n      const history = JSON.parse(secureStorage.getItem('notification_history') || '[]');\r\n      history.push(_notification);\r\n      \r\n      if (history.length > 100) {\r\n        history.splice(0, history.length - 100);\r\n      }\r\n      \r\n      secureStorage.setItem('notification_history', JSON.stringify(_history));\r\n    } catch {\r\n      logger.error('Failed to save _notification to history:');\r\n    }\r\n  }\r\n\r\n  // Core WebSocket functionality\r\n  private processQueuedNotifications(): void {\r\n    const queuedNotifications = [...this.notificationQueue];\r\n    this.notificationQueue = [];\r\n    \r\n    queuedNotifications.forEach(_notification => {\r\n      if (this.shouldShowNotification((_notification as unknown)._priority)) {\r\n        this.showNotification(\r\n          (_notification as unknown).title,\r\n          (_notification as unknown).body,\r\n          { _priority: (_notification as unknown)._priority }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  // Heartbeat for connection monitoring\r\n  private startHeartbeat(): void {\r\n    this.heartbeatInterval = setInterval(() => {\r\n      if (this.socket?.connected) {\r\n        const start = Date.now();\r\n        this.socket.emit('ping', null, () => {\r\n          this.connectionState.latency = Date.now() - start;\r\n        });\r\n      }\r\n    }, 30000);\r\n  }\r\n\r\n  private stopHeartbeat(): void {\r\n    if (this.heartbeatInterval) {\r\n      clearInterval(this.heartbeatInterval);\r\n      this.heartbeatInterval = null;\r\n    }\r\n  }\r\n\r\n  // Message queue management\r\n  private queueMessage(event: string, data: unknown): void {\r\n    const _queuedMessage: QueuedMessage = {\r\n      event,\r\n      data,\r\n      timestamp: Date.now(),\r\n      retries: 0\r\n    };\r\n\r\n    this.messageQueue.push(_queuedMessage);\r\n    this.connectionState.messagesQueued = this.messageQueue.length;\r\n    this.saveQueuedMessages();\r\n  }\r\n\r\n  private async processQueuedMessages(): Promise<void> {\r\n    if (!this.socket?.connected || this.messageQueue.length === 0) return;\r\n\r\n    const messages = [...this.messageQueue];\r\n    this.messageQueue = [];\r\n\r\n    for (const message of messages) {\r\n      try {\r\n        this.socket.emit(message.event, message.data);\r\n        this.connectionState.lastSuccessfulMessage = new Date();\r\n      } catch {\r\n        logger.error('Failed to send queued message:');\r\n        \r\n        if (Date.now() - message.timestamp < 86400000 && message.retries < 3) {\r\n          message.retries++;\r\n          this.messageQueue.push(message);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.connectionState.messagesQueued = this.messageQueue.length;\r\n    this.saveQueuedMessages();\r\n  }\r\n\r\n  private saveQueuedMessages(): void {\r\n    try {\r\n      secureStorage.setItem('ws_message_queue', JSON.stringify(this.messageQueue));\r\n    } catch {\r\n      logger.error('Failed to save message queue:');\r\n    }\r\n  }\r\n\r\n  private loadQueuedMessages(): void {\r\n    try {\r\n      const _saved = secureStorage.getItem('ws_message_queue');\r\n      if (_saved) {\r\n        this.messageQueue = JSON.parse(_saved);\r\n        this.connectionState.messagesQueued = this.messageQueue.length;\r\n      }\r\n    } catch {\r\n      logger.error('Failed to load message queue:');\r\n      this.messageQueue = [];\r\n    }\r\n  }\r\n\r\n  // Room management\r\n  public joinRoom(_room: string): void {\r\n    if (this.socket?.connected) {\r\n      this.socket.emit('join:_room', { _room });\r\n      this.activeRooms.add(_room);\r\n    }\r\n  }\r\n\r\n  public leaveRoom(_room: string): void {\r\n    if (this.socket?.connected) {\r\n      this.socket.emit('leave:_room', { _room });\r\n      this.activeRooms.delete(_room);\r\n    }\r\n  }\r\n\r\n  // Crisis session management\r\n  public joinCrisisSession(sessionId: string): void {\r\n    const _room = `crisis:${sessionId}`;\r\n    this.joinRoom(_room);\r\n    this.emit('crisis:joined', { sessionId });\r\n  }\r\n\r\n  public escalateCrisisAlert(sessionId: string, escalationLevel: 'professional' | 'emergency' | 'immediate'): void {\r\n    const escalationData = {\r\n      sessionId,\r\n      escalationLevel,\r\n      timestamp: new Date(),\r\n      userId: this.currentUser?.id,\r\n      context: 'user_initiated_escalation'\r\n    };\r\n    \r\n    if (this.socket?.connected) {\r\n      this.socket.emit('crisis:escalate', escalationData);\r\n    }\r\n    \r\n    this.realTimeAnalytics.crisisAlertsHandled++;\r\n    this.logCriticalEvent('crisis_escalation_initiated', escalationData);\r\n    \r\n    this.showNotification('Crisis Support Activated', 'Professional help is being contacted', {\r\n      icon: '🚨',\r\n      _priority: 'critical',\r\n      requireInteraction: true,\r\n      actions: [\r\n        { _action: 'emergency', title: 'Call Emergency' },\r\n        { _action: 'chat', title: 'Crisis Chat' }\r\n      ]\r\n    });\r\n    \r\n    this.emit('crisis:escalated', escalationData);\r\n  }\r\n\r\n  // Peer support session management\r\n  public initiatePeerSupportSession(supportType: 'crisis' | 'general' | 'specific', metadata?: unknown): void {\r\n    const sessionId = `peer-support-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n    const session: PeerSupportSession = {\r\n      id: sessionId,\r\n      type: supportType,\r\n      startTime: new Date(),\r\n      participants: [this.currentUser?.id || 'anonymous'],\r\n      status: 'seeking-support',\r\n      metadata\r\n    };\r\n    \r\n    this.peerSupportSessions.set(sessionId, session);\r\n    \r\n    if (this.socket?.connected) {\r\n      this.socket.emit('peer_support:initiate', {\r\n        sessionId,\r\n        supportType,\r\n        userProfile: {\r\n          preferredSupport: supportType,\r\n          experience: metadata?.experience || 'beginner',\r\n          topics: metadata?.topics || []\r\n        }\r\n      });\r\n    }\r\n    \r\n    this.realTimeAnalytics.supportSessionsInitiated++;\r\n    this.emit('peer_support:session_initiated', { sessionId, session });\r\n  }\r\n\r\n  // Real-time presence management\r\n  public updateUserPresence(presence: Partial<UserPresence>): void {\r\n    if (!this.currentUser) return;\r\n    \r\n    const currentPresence = this.userPresences.get(this.currentUser.id) || {\r\n      userId: this.currentUser.id,\r\n      username: this.currentUser.username || 'Anonymous',\r\n      status: 'online',\r\n      lastSeen: new Date()\r\n    };\r\n    \r\n    const updatedPresence = { ...currentPresence, ...presence, lastSeen: new Date() };\r\n    this.userPresences.set(this.currentUser.id, updatedPresence);\r\n    \r\n    if (this.socket?.connected) {\r\n      this.socket.emit('presence:update', updatedPresence);\r\n    }\r\n    \r\n    this.emit('presence:updated', updatedPresence);\r\n  }\r\n\r\n  // Group session management\r\n  public joinGroupSession(groupId: string, sessionId: string): void {\r\n    const _room = `group:${groupId}:${sessionId}`;\r\n    this.joinRoom(_room);\r\n  }\r\n\r\n  // Event emitter methods\r\n  public on(event: string, handler: (...args: unknown[]) => any): void {\r\n    if (!this.eventHandlers.has(event)) {\r\n      this.eventHandlers.set(event, new Set());\r\n    }\r\n    this.eventHandlers.get(event)!.add(handler);\r\n  }\r\n\r\n  public off(event: string, handler: (...args: unknown[]) => any): void {\r\n    const handlers = this.eventHandlers.get(event);\r\n    if (handlers) {\r\n      handlers.delete(handler);\r\n    }\r\n  }\r\n\r\n  public emit(event: string, data: unknown): void {\r\n    const handlers = this.eventHandlers.get(event);\r\n    if (handlers) {\r\n      handlers.forEach(handler => {\r\n        try {\r\n          handler(data);\r\n        } catch {\r\n          logger.error(`Error in event handler for ${event}`);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Utility methods\r\n  public getConnectionState(): ConnectionState {\r\n    return { ...this.connectionState };\r\n  }\r\n\r\n  public isConnected(): boolean {\r\n    return this.socket?.connected || false;\r\n  }\r\n\r\n  public getRealTimeAnalytics(): typeof this.realTimeAnalytics {\r\n    return { ...this.realTimeAnalytics };\r\n  }\r\n\r\n  // Crisis escalation handling\r\n  private handleCrisisEscalation(event: unknown): void {\r\n    logger.error('CRISIS ESCALATION:', event);\r\n    \r\n    this.showNotification(\r\n      'Emergency Alert',\r\n      'Crisis situation requires immediate attention',\r\n      {\r\n        icon: '🚨',\r\n        _priority: 'critical',\r\n        requireInteraction: true\r\n      }\r\n    );\r\n\r\n    this.emit('crisis:escalation:local', event);\r\n    this.logCriticalEvent('crisis_escalation', event);\r\n  }\r\n\r\n  // Critical event logging\r\n  private logCriticalEvent(type: string, data: unknown): void {\r\n    const logEntry = {\r\n      timestamp: new Date().toISOString(),\r\n      type,\r\n      userId: this.currentUser?.id,\r\n      data: JSON.stringify(data)\r\n    };\r\n\r\n    logger.crisis('Critical Event Log', 'high', 'EnhancedWebSocket', logEntry);\r\n    \r\n    try {\r\n      const logs = JSON.parse(secureStorage.getItem('critical_events') || '[]');\r\n      logs.push(_logEntry);\r\n      \r\n      if (logs.length > 100) {\r\n        logs.splice(0, logs.length - 100);\r\n      }\r\n      \r\n      secureStorage.setItem('critical_events', JSON.stringify(_logs));\r\n    } catch {\r\n      logger.error('Failed to log critical event:');\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const __enhancedWsService = EnhancedWebSocketService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\websocket\\SecureWebSocketClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\websocket\\WebSocketService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3002,3005],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3002,3005],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":573,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":573,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17592,17595],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17592,17595],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":580,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":580,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17816,17819],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17816,17819],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// WebSocket Service for Real-time Features\n// Implements secure, HIPAA-compliant real-time communication\n\nimport { io, Socket } from 'socket.io-client';\nimport {\n  _WebSocketEvent,\n  CrisisWebSocketEvent,\n  CommunityWebSocketEvent,\n  NotificationWebSocketEvent,\n  Message,\n  User\n} from '../api/types';\nimport { secureStorage } from '../security/SecureLocalStorage';\nimport { logger } from '../../utils/logger';\n\n// WebSocket Configuration\nconst WS_CONFIG = {\n  url: import.meta.env.VITE_WS_URL || 'ws://localhost:3002',\n  reconnection: true,\n  reconnectionDelay: 1000,\n  reconnectionDelayMax: 5000,\n  reconnectionAttempts: 10,\n  timeout: 20000,\n  transports: ['websocket', 'polling'],\n  auth: {\n    token: ''\n  }\n};\n\n// WebSocket Event Types\nexport enum WSEventType {\n  // Connection Events\n  CONNECT = 'connect',\n  DISCONNECT = 'disconnect',\n  RECONNECT = 'reconnect',\n  ERROR = 'error',\n  \n  // Authentication Events\n  AUTH_SUCCESS = 'auth:success',\n  AUTH_FAILURE = 'auth:failure',\n  \n  // Crisis Events\n  CRISIS_ALERT = 'crisis:alert',\n  CRISIS_COUNSELOR_ASSIGNED = 'crisis:counselor_assigned',\n  CRISIS_MESSAGE = 'crisis:message',\n  CRISIS_SESSION_ENDED = 'crisis:session_ended',\n  CRISIS_ESCALATION = 'crisis:escalation',\n  CRISIS_TYPING = 'crisis:typing',\n  \n  // Community Events\n  COMMUNITY_POST_NEW = 'community:post_new',\n  COMMUNITY_COMMENT_NEW = 'community:comment_new',\n  COMMUNITY_USER_TYPING = 'community:user_typing',\n  COMMUNITY_USER_ONLINE = 'community:user_online',\n  COMMUNITY_USER_OFFLINE = 'community:user_offline',\n  \n  // Notification Events\n  NOTIFICATION_APPOINTMENT = 'notification:appointment',\n  NOTIFICATION_MEDICATION = 'notification:medication',\n  NOTIFICATION_CRISIS_CHECK = 'notification:crisis_check',\n  NOTIFICATION_SYSTEM = 'notification:system',\n  \n  // Presence Events\n  PRESENCE_UPDATE = 'presence:update',\n  PRESENCE_REQUEST = 'presence:request',\n  \n  // Therapist Events\n  THERAPIST_AVAILABLE = 'therapist:available',\n  THERAPIST_BUSY = 'therapist:busy',\n  THERAPIST_MESSAGE = 'therapist:message',\n  \n  // Group Session Events\n  GROUP_SESSION_START = 'group:session_start',\n  GROUP_SESSION_END = 'group:session_end',\n  GROUP_USER_JOIN = 'group:user_join',\n  GROUP_USER_LEAVE = 'group:user_leave',\n  GROUP_MESSAGE = 'group:message'\n}\n\n// Typing indicator management\ninterface TypingUser {\n  userId: string;\n  username: string;\n  timestamp: number;\n}\n\n// Connection state management\ninterface ConnectionState {\n  isConnected: boolean;\n  reconnectAttempts: number;\n  lastError?: Error;\n  latency: number;\n}\n\n// Message queue for offline support\ninterface QueuedMessage {\n  event: string;\n  data: unknown;\n  timestamp: number;\n  retries: number;\n}\n\n// WebSocket Service Class\nexport class WebSocketService {\n  private static instance: WebSocketService;\n  private socket: Socket | null = null;\n  private connectionState: ConnectionState = {\n    isConnected: false,\n    reconnectAttempts: 0,\n    latency: 0\n  };\n  private eventHandlers: Map<string, Set<(...args: any[]) => void>> = new Map();\n  private typingUsers: Map<string, TypingUser> = new Map();\n  private messageQueue: QueuedMessage[] = [];\n  private heartbeatInterval: NodeJS.Timeout | null = null;\n  private currentUser: User | null = null;\n  private activeRooms: Set<string> = new Set();\n\n  private constructor() {\n    this.loadQueuedMessages();\n  }\n\n  // Singleton pattern\n  public static getInstance(): WebSocketService {\n    if (!WebSocketService.instance) {\n      WebSocketService.instance = new WebSocketService();\n    }\n    return WebSocketService.instance;\n  }\n\n  // Initialize WebSocket connection\n  public connect(token: string, user: User): void {\n    if (this.socket?.connected) {\n      logger.debug('WebSocket already connected', 'WebSocketService');\n      return;\n    }\n\n    this.currentUser = user;\n    WS_CONFIG.auth.token = token;\n\n    // Create socket connection\n    this.socket = io(WS_CONFIG.url, {\n      ...WS_CONFIG,\n      auth: WS_CONFIG.auth\n    });\n\n    this.setupEventListeners();\n    this.startHeartbeat();\n  }\n\n  // Disconnect WebSocket\n  public disconnect(): void {\n    if (this.socket) {\n      this.stopHeartbeat();\n      this.socket.disconnect();\n      this.socket = null;\n      this.connectionState.isConnected = false;\n      this.activeRooms.clear();\n      this.typingUsers.clear();\n    }\n  }\n\n  // Setup core event listeners\n  private setupEventListeners(): void {\n    if (!this.socket) return;\n\n    // Connection events\n    this.socket.on(WSEventType.CONNECT, () => {\n      logger.info('WebSocket connected', 'WebSocketService');\n      this.connectionState.isConnected = true;\n      this.connectionState.reconnectAttempts = 0;\n      this.processQueuedMessages();\n      this.emit(WSEventType.CONNECT, { timestamp: new Date() });\n      \n      // Rejoin rooms after reconnection\n      this.activeRooms.forEach(_room => {\n        this.joinRoom(_room);\n      });\n    });\n\n    this.socket.on(WSEventType.DISCONNECT, (reason: unknown) => {\n      logger.info('WebSocket disconnected', 'WebSocketService', { reason });\n      this.connectionState.isConnected = false;\n      this.emit(WSEventType.DISCONNECT, { reason, timestamp: new Date() });\n    });\n\n    this.socket.on(WSEventType.ERROR, (error: unknown) => {\n      logger.error('WebSocket error:', error);\n      this.connectionState.lastError = error;\n      this.emit(WSEventType.ERROR, { error, timestamp: new Date() });\n    });\n\n    // Authentication events\n    this.socket.on(WSEventType.AUTH_SUCCESS, (data: unknown) => {\n      logger.info('WebSocket authentication successful', 'WebSocketService');\n      this.emit(WSEventType.AUTH_SUCCESS, data);\n    });\n\n    this.socket.on(WSEventType.AUTH_FAILURE, (data: unknown) => {\n      logger.error('WebSocket authentication failed:', data);\n      this.emit(WSEventType.AUTH_FAILURE, data);\n      this.disconnect();\n    });\n\n    // Setup all event type listeners\n    this.setupCrisisEventListeners();\n    this.setupCommunityEventListeners();\n    this.setupNotificationEventListeners();\n    this.setupPresenceEventListeners();\n    this.setupTherapistEventListeners();\n    this.setupGroupEventListeners();\n  }\n\n  // Crisis event listeners\n  private setupCrisisEventListeners(): void {\n    if (!this.socket) return;\n\n    this.socket.on(WSEventType.CRISIS_ALERT, (data: CrisisWebSocketEvent) => {\n      logger.crisis('Crisis alert received', 'high', 'WebSocketService', data);\n      this.emit(WSEventType.CRISIS_ALERT, data);\n      \n      // Auto-join crisis _room if it's for current user\n      if (data.userId === this.currentUser?.id) {\n        this.joinCrisisSession(data.sessionId);\n      }\n    });\n\n    this.socket.on(WSEventType.CRISIS_COUNSELOR_ASSIGNED, (data: CrisisWebSocketEvent) => {\n      logger.crisis('Counselor assigned to crisis session', 'medium', 'WebSocketService', data);\n      this.emit(WSEventType.CRISIS_COUNSELOR_ASSIGNED, data);\n    });\n\n    this.socket.on(WSEventType.CRISIS_MESSAGE, (data: CrisisWebSocketEvent) => {\n      this.emit(WSEventType.CRISIS_MESSAGE, data);\n    });\n\n    this.socket.on(WSEventType.CRISIS_SESSION_ENDED, (data: CrisisWebSocketEvent) => {\n      logger.info('Crisis session ended', 'WebSocketService', data);\n      this.emit(WSEventType.CRISIS_SESSION_ENDED, data);\n      this.leaveCrisisSession(data.sessionId);\n    });\n\n    this.socket.on(WSEventType.CRISIS_ESCALATION, (data: CrisisWebSocketEvent) => {\n      logger.crisis('Crisis escalated', 'critical', 'WebSocketService', data);\n      this.emit(WSEventType.CRISIS_ESCALATION, data);\n      \n      // Trigger emergency protocols\n      this.handleCrisisEscalation(data);\n    });\n\n    this.socket.on(WSEventType.CRISIS_TYPING, (data: { sessionId: string; userId: string; isTyping: boolean }) => {\n      this.handleTypingIndicator(data.sessionId, data.userId, data.isTyping);\n    });\n  }\n\n  // Community event listeners\n  private setupCommunityEventListeners(): void {\n    if (!this.socket) return;\n\n    this.socket.on(WSEventType.COMMUNITY_POST_NEW, (data: CommunityWebSocketEvent) => {\n      this.emit(WSEventType.COMMUNITY_POST_NEW, data);\n    });\n\n    this.socket.on(WSEventType.COMMUNITY_COMMENT_NEW, (data: CommunityWebSocketEvent) => {\n      this.emit(WSEventType.COMMUNITY_COMMENT_NEW, data);\n    });\n\n    this.socket.on(WSEventType.COMMUNITY_USER_TYPING, (data: { groupId: string; user: TypingUser }) => {\n      this.handleTypingIndicator(data.groupId, data.user.userId, true, data.user.username);\n    });\n\n    this.socket.on(WSEventType.COMMUNITY_USER_ONLINE, (data: CommunityWebSocketEvent) => {\n      this.emit(WSEventType.COMMUNITY_USER_ONLINE, data);\n    });\n\n    this.socket.on(WSEventType.COMMUNITY_USER_OFFLINE, (data: CommunityWebSocketEvent) => {\n      this.emit(WSEventType.COMMUNITY_USER_OFFLINE, data);\n    });\n  }\n\n  // Notification event listeners\n  private setupNotificationEventListeners(): void {\n    if (!this.socket) return;\n\n    this.socket.on(WSEventType.NOTIFICATION_APPOINTMENT, (data: NotificationWebSocketEvent) => {\n      this.emit(WSEventType.NOTIFICATION_APPOINTMENT, data);\n      this.showNotification('Appointment Reminder', data.payload.message);\n    });\n\n    this.socket.on(WSEventType.NOTIFICATION_MEDICATION, (data: NotificationWebSocketEvent) => {\n      this.emit(WSEventType.NOTIFICATION_MEDICATION, data);\n      this.showNotification('Medication Reminder', data.payload.message);\n    });\n\n    this.socket.on(WSEventType.NOTIFICATION_CRISIS_CHECK, (data: NotificationWebSocketEvent) => {\n      this.emit(WSEventType.NOTIFICATION_CRISIS_CHECK, data);\n      this.showNotification('Wellness Check-In', data.payload.message);\n    });\n\n    this.socket.on(WSEventType.NOTIFICATION_SYSTEM, (data: NotificationWebSocketEvent) => {\n      this.emit(WSEventType.NOTIFICATION_SYSTEM, data);\n      if (data.priority === 'critical') {\n        this.showNotification('System Alert', data.payload.message, 'critical');\n      }\n    });\n  }\n\n  // Presence event listeners\n  private setupPresenceEventListeners(): void {\n    if (!this.socket) return;\n\n    this.socket.on(WSEventType.PRESENCE_UPDATE, (data: { userId: string; status: string; lastSeen: Date }) => {\n      this.emit(WSEventType.PRESENCE_UPDATE, data);\n    });\n  }\n\n  // Therapist event listeners\n  private setupTherapistEventListeners(): void {\n    if (!this.socket) return;\n\n    this.socket.on(WSEventType.THERAPIST_AVAILABLE, (data: { therapistId: string; available: boolean }) => {\n      this.emit(WSEventType.THERAPIST_AVAILABLE, data);\n    });\n\n    this.socket.on(WSEventType.THERAPIST_MESSAGE, (data: { therapistId: string; message: Message }) => {\n      this.emit(WSEventType.THERAPIST_MESSAGE, data);\n    });\n  }\n\n  // Group session event listeners\n  private setupGroupEventListeners(): void {\n    if (!this.socket) return;\n\n    this.socket.on(WSEventType.GROUP_SESSION_START, (data: { groupId: string; sessionId: string }) => {\n      this.emit(WSEventType.GROUP_SESSION_START, data);\n      this.joinGroupSession(data.groupId, data.sessionId);\n    });\n\n    this.socket.on(WSEventType.GROUP_SESSION_END, (data: { groupId: string; sessionId: string }) => {\n      this.emit(WSEventType.GROUP_SESSION_END, data);\n      this.leaveGroupSession(data.groupId, data.sessionId);\n    });\n\n    this.socket.on(WSEventType.GROUP_MESSAGE, (data: { groupId: string; message: Message }) => {\n      this.emit(WSEventType.GROUP_MESSAGE, data);\n    });\n  }\n\n  // Heartbeat for connection monitoring\n  private startHeartbeat(): void {\n    this.heartbeatInterval = setInterval(() => {\n      if (this.socket?.connected) {\n        const start = Date.now();\n        this.socket.emit('ping', null, () => {\n          this.connectionState.latency = Date.now() - start;\n        });\n      }\n    }, 30000); // Every 30 seconds\n  }\n\n  private stopHeartbeat(): void {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n      this.heartbeatInterval = null;\n    }\n  }\n\n  // Room management\n  public joinRoom(_room: string): void {\n    if (this.socket?.connected) {\n      this.socket.emit('join:_room', { _room });\n      this.activeRooms.add(_room);\n    }\n  }\n\n  public leaveRoom(_room: string): void {\n    if (this.socket?.connected) {\n      this.socket.emit('leave:_room', { _room });\n      this.activeRooms.delete(_room);\n    }\n  }\n\n  // Crisis session management\n  public joinCrisisSession(sessionId: string): void {\n    const _room = `crisis:${sessionId}`;\n    this.joinRoom(_room);\n    this.emit('crisis:joined', { sessionId });\n  }\n\n  public leaveCrisisSession(sessionId: string): void {\n    const _room = `crisis:${sessionId}`;\n    this.leaveRoom(_room);\n    this.typingUsers.delete(_room);\n  }\n\n  public sendCrisisMessage(sessionId: string, message: string): void {\n    const event = {\n      type: WSEventType.CRISIS_MESSAGE,\n      sessionId,\n      payload: {\n        content: message,\n        timestamp: new Date(),\n        senderId: this.currentUser?.id\n      }\n    };\n\n    if (this.socket?.connected) {\n      this.socket.emit(WSEventType.CRISIS_MESSAGE, event);\n    } else {\n      this.queueMessage(WSEventType.CRISIS_MESSAGE, event);\n    }\n  }\n\n  // Group session management\n  public joinGroupSession(groupId: string, sessionId: string): void {\n    const _room = `group:${groupId}:${sessionId}`;\n    this.joinRoom(_room);\n  }\n\n  public leaveGroupSession(groupId: string, sessionId: string): void {\n    const _room = `group:${groupId}:${sessionId}`;\n    this.leaveRoom(_room);\n  }\n\n  // Typing indicators\n  public sendTypingIndicator(_room: string, isTyping: boolean): void {\n    if (this.socket?.connected) {\n      this.socket.emit('typing', {\n        _room,\n        userId: this.currentUser?.id,\n        username: this.currentUser?.username,\n        isTyping\n      });\n    }\n  }\n\n  private handleTypingIndicator(_room: string, userId: string, isTyping: boolean, username?: string): void {\n    if (isTyping && userId !== this.currentUser?.id) {\n      this.typingUsers.set(`${_room}:${userId}`, {\n        userId,\n        username: username || 'User',\n        timestamp: Date.now()\n      });\n    } else {\n      this.typingUsers.delete(`${_room}:${userId}`);\n    }\n\n    // Clean up old typing indicators (> 5 seconds)\n    const now = Date.now();\n    this.typingUsers.forEach((user, key) => {\n      if (now - user.timestamp > 5000) {\n        this.typingUsers.delete(key);\n      }\n    });\n\n    this.emit('typing:update', {\n      _room,\n      typingUsers: Array.from(this.typingUsers.values()).filter(u => \n        u.userId !== this.currentUser?.id\n      )\n    });\n  }\n\n  // Crisis escalation handling\n  private handleCrisisEscalation(event: CrisisWebSocketEvent): void {\n    // Trigger emergency protocols\n    logger.error('CRISIS ESCALATION:', event);\n    \n    // Show critical notification\n    this.showNotification(\n      'Emergency Alert',\n      'Crisis situation requires immediate attention',\n      'critical'\n    );\n\n    // Emit escalation event for UI handling\n    this.emit('crisis:escalation:local', event);\n\n    // Log for audit trail\n    this.logCriticalEvent('crisis_escalation', event);\n  }\n\n  // Message queue management for offline support\n  private queueMessage(event: string, data: unknown): void {\n    const _queuedMessage: QueuedMessage = {\n      event,\n      data,\n      timestamp: Date.now(),\n      retries: 0\n    };\n\n    this.messageQueue.push(_queuedMessage);\n    this.saveQueuedMessages();\n  }\n\n  private async processQueuedMessages(): Promise<void> {\n    if (!this.socket?.connected || this.messageQueue.length === 0) return;\n\n    const messages = [...this.messageQueue];\n    this.messageQueue = [];\n\n    for (const message of messages) {\n      try {\n        this.socket.emit(message.event, message.data);\n      } catch {\n        logger.error('Failed to send queued message:');\n        \n        // Re-queue if not expired (24 hours) and under retry limit\n        if (Date.now() - message.timestamp < 86400000 && message.retries < 3) {\n          message.retries++;\n          this.messageQueue.push(message);\n        }\n      }\n    }\n\n    this.saveQueuedMessages();\n  }\n\n  private saveQueuedMessages(): void {\n    try {\n      secureStorage.setItem('ws_message_queue', JSON.stringify(this.messageQueue));\n    } catch {\n      logger.error('Failed to save message queue:');\n    }\n  }\n\n  private loadQueuedMessages(): void {\n    try {\n      const _saved = secureStorage.getItem('ws_message_queue');\n      if (_saved) {\n        this.messageQueue = JSON.parse(_saved);\n      }\n    } catch {\n      logger.error('Failed to load message queue:');\n      this.messageQueue = [];\n    }\n  }\n\n  // Notification handling\n  private showNotification(title: string, message: string, priority: string = 'normal'): void {\n    // Check if browser supports notifications\n    if (!('Notification' in window)) return;\n\n    // Request permission if needed\n    if (Notification.permission === 'default') {\n      Notification.requestPermission();\n    }\n\n    // Show notification if permitted\n    if (Notification.permission === 'granted') {\n      const notification = new Notification(title, {\n        body: message,\n        icon: '/icon-192x192.png',\n        badge: '/icon-72x72.png',\n        tag: `${priority}-${Date.now()}`,\n        requireInteraction: priority === 'critical',\n        silent: priority === 'low'\n      });\n\n      notification.onclick = () => {\n        window.focus();\n        notification.close();\n      };\n\n      // Auto-close non-critical notifications\n      if (priority !== 'critical') {\n        setTimeout(() => notification.close(), 5000);\n      }\n    }\n  }\n\n  // Event emitter methods\n  public on(event: string, handler: (...args: unknown[]) => any): void {\n    if (!this.eventHandlers.has(event)) {\n      this.eventHandlers.set(event, new Set());\n    }\n    this.eventHandlers.get(event)!.add(handler);\n  }\n\n  public off(event: string, handler: (...args: unknown[]) => any): void {\n    const handlers = this.eventHandlers.get(event);\n    if (handlers) {\n      handlers.delete(handler);\n    }\n  }\n\n  public emit(event: string, data: unknown): void {\n    const handlers = this.eventHandlers.get(event);\n    if (handlers) {\n      handlers.forEach(handler => {\n        try {\n          handler(data);\n        } catch {\n          logger.error(`Error in event handler for ${event}`);\n        }\n      });\n    }\n  }\n\n  // Utility methods\n  public getConnectionState(): ConnectionState {\n    return { ...this.connectionState };\n  }\n\n  public getTypingUsers(_room: string): TypingUser[] {\n    const users: TypingUser[] = [];\n    this.typingUsers.forEach((user, key) => {\n      if (key.startsWith(`${_room}:`)) {\n        users.push(_user);\n      }\n    });\n    return users;\n  }\n\n  public isConnected(): boolean {\n    return this.socket?.connected || false;\n  }\n\n  public getLatency(): number {\n    return this.connectionState.latency;\n  }\n\n  // Critical event logging for audit trail\n  private logCriticalEvent(type: string, data: unknown): void {\n    const logEntry = {\n      timestamp: new Date().toISOString(),\n      type,\n      userId: this.currentUser?.id,\n      data: JSON.stringify(data)\n    };\n\n    // In production, send to secure logging service\n    logger.crisis('Critical Event Log', 'high', 'WebSocketService', logEntry);\n    \n    // Also store locally for offline access\n    try {\n      const logs = JSON.parse(secureStorage.getItem('critical_events') || '[]');\n      logs.push(_logEntry);\n      \n      // Keep only last 100 events\n      if (logs.length > 100) {\n        logs.splice(0, logs.length - 100);\n      }\n      \n      secureStorage.setItem('critical_events', JSON.stringify(_logs));\n    } catch {\n      logger.error('Failed to log critical event:');\n    }\n  }\n}\n\n// Export singleton instance\nexport const _wsService = WebSocketService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\stores\\accessibilityStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\stores\\activityStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\stores\\wellnessStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\styles\\wellness-theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\accessibility\\a11y-crisis.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\accessibility\\accessibility.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\accessibility\\wcag-compliance.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\compatibility\\cross-platform.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\crisis\\CrisisScenarioTesting.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\crisis\\crisis-intervention.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\integration\\crisis-workflow.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\mocks\\server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\performance\\bundle-optimization.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\performance\\crisis-performance.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\performance\\load-performance.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\performance\\performance.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\reports\\test-reporter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\scripts\\run-all-tests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\security\\security.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\types\\ai-insights.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\types\\dashboard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\types\\emergency.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\types\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\types\\websocket-events.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\bundleOptimization\\lazyLoading.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\console\\consoleStyles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\console\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\crisis.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1014,1017],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1014,1017],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":146,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3868,3871],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3868,3871],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5405,5408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5405,5408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Unified Crisis Utilities\r\n * Centralized crisis detection, handling, and logging functionality\r\n */\r\n\r\nimport { \r\n  CrisisLevel, \r\n  CRISIS_KEYWORDS, \r\n  CRISIS_LEVELS, \r\n  EMERGENCY_CONTACTS, \r\n  CRISIS_STORAGE_KEYS,\r\n  CRISIS_EVENTS,\r\n  EmergencyContact,\r\n  CrisisLevelConfig\r\n} from '../constants/crisis';\r\n\r\nimport { _secureStorage } from '../services/security/SecureLocalStorage';\r\nimport { logger } from './logger';\r\n\r\n// Re-export types\r\nexport type { CrisisLevel, EmergencyContact, CrisisLevelConfig };\r\n\r\nexport interface CrisisAssessment {\r\n  id: string;\r\n  timestamp: string;\r\n  level: CrisisLevel;\r\n  confidence: number;\r\n  triggers: string[];\r\n  text?: string;\r\n  context?: {\r\n    location?: GeolocationCoordinates;\r\n    timeOfDay?: string;\r\n    userAgent?: string;\r\n    isOnline?: boolean;\r\n  };\r\n}\r\n\r\nexport interface CrisisInteraction {\r\n  id: string;\r\n  timestamp: string;\r\n  action: string;\r\n  contact?: string;\r\n  level: CrisisLevel;\r\n  successful: boolean;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Detect crisis level from text input using keyword analysis\r\n */\r\nexport function detectCrisisLevel(text: string): CrisisAssessment {\r\n  const normalizedText = text.toLowerCase().trim();\r\n  const words = normalizedText.split(/\\s+/);\r\n  \r\n  let criticalMatches = 0;\r\n  let highMatches = 0;\r\n  let moderateMatches = 0;\r\n  let lowMatches = 0;\r\n  const triggers: string[] = [];\r\n\r\n  // Count _keyword matches\r\n  CRISIS_KEYWORDS.critical.forEach(_keyword => {\r\n    if (normalizedText.includes(_keyword)) {\r\n      criticalMatches++;\r\n      triggers.push(_keyword);\r\n    }\r\n  });\r\n\r\n  CRISIS_KEYWORDS.high.forEach(_keyword => {\r\n    if (normalizedText.includes(_keyword)) {\r\n      highMatches++;\r\n      triggers.push(_keyword);\r\n    }\r\n  });\r\n\r\n  CRISIS_KEYWORDS.moderate.forEach(_keyword => {\r\n    if (normalizedText.includes(_keyword)) {\r\n      moderateMatches++;\r\n      triggers.push(_keyword);\r\n    }\r\n  });\r\n\r\n  CRISIS_KEYWORDS.low.forEach(_keyword => {\r\n    if (normalizedText.includes(_keyword)) {\r\n      lowMatches++;\r\n      triggers.push(_keyword);\r\n    }\r\n  });\r\n\r\n  // Determine crisis level and confidence\r\n  let level: CrisisLevel = 'safe';\r\n  let confidence = 0;\r\n\r\n  if (criticalMatches > 0) {\r\n    level = 'critical';\r\n    confidence = Math.min(0.95, 0.7 + (criticalMatches * 0.1));\r\n  } else if (highMatches >= 2 || (highMatches >= 1 && moderateMatches >= 2)) {\r\n    level = 'high';\r\n    confidence = Math.min(0.85, 0.6 + (highMatches * 0.1) + (moderateMatches * 0.05));\r\n  } else if (highMatches >= 1 || moderateMatches >= 2) {\r\n    level = 'moderate';\r\n    confidence = Math.min(0.75, 0.4 + (highMatches * 0.15) + (moderateMatches * 0.1));\r\n  } else if (moderateMatches >= 1 || lowMatches >= 3) {\r\n    level = 'low';\r\n    confidence = Math.min(0.65, 0.3 + (moderateMatches * 0.1) + (lowMatches * 0.05));\r\n  }\r\n\r\n  // Adjust confidence based on text length and context\r\n  if (words.length < 3) {\r\n    confidence *= 0.7; // Reduce confidence for very short texts\r\n  }\r\n  if (words.length > 50) {\r\n    confidence *= 1.1; // Increase confidence for longer texts\r\n  }\r\n\r\n  const assessment: CrisisAssessment = {\r\n    id: generateId(),\r\n    timestamp: new Date().toISOString(),\r\n    level,\r\n    confidence,\r\n    triggers,\r\n    text: normalizedText,\r\n    context: {\r\n      timeOfDay: new Date().toTimeString().slice(0, 5),\r\n      isOnline: navigator.onLine\r\n    }\r\n  };\r\n\r\n  // Store assessment for trend analysis\r\n  storeCrisisAssessment(_assessment);\r\n\r\n  // Emit crisis level change event\r\n  window.dispatchEvent(new CustomEvent(CRISIS_EVENTS.levelChanged, {\r\n    detail: _assessment\r\n  }));\r\n\r\n  return assessment;\r\n}\r\n\r\n/**\r\n * Handle emergency contact interaction with location sharing\r\n */\r\nexport async function handleEmergencyCall(\r\n  contactId: string, \r\n  location?: GeolocationCoordinates,\r\n  context?: Record<string, any>\r\n): Promise<CrisisInteraction> {\r\n  const contact = EMERGENCY_CONTACTS.find(c => c.id === contactId);\r\n  if (!contact) {\r\n    throw new Error(`Emergency contact not found: ${contactId}`);\r\n  }\r\n\r\n  const interaction: CrisisInteraction = {\r\n    id: generateId(),\r\n    timestamp: new Date().toISOString(),\r\n    action: 'emergency_call',\r\n    contact: contact.id,\r\n    level: 'high', // Assume high level for emergency calls\r\n    successful: false,\r\n    metadata: {\r\n      contactName: contact.name,\r\n      contactNumber: contact.number,\r\n      location: location ? {\r\n        lat: location.latitude,\r\n        lng: location.longitude,\r\n        accuracy: location.accuracy\r\n      } : null,\r\n      isOnline: navigator.onLine,\r\n      ...context\r\n    }\r\n  };\r\n\r\n  try {\r\n    // Attempt to make the call/contact\r\n    window.location.href = contact.contact;\r\n    interaction.successful = true;\r\n\r\n    // Emit action taken event\r\n    window.dispatchEvent(new CustomEvent(CRISIS_EVENTS.actionTaken, {\r\n      detail: interaction\r\n    }));\r\n\r\n  } catch (error) {\r\n    logger.error('Failed to initiate emergency contact:', error);\r\n    interaction.metadata!.error = error instanceof Error ? error.message : '[Error details unavailable]';\r\n  }\r\n\r\n  // Store interaction for offline sync\r\n  await storeCrisisInteraction(interaction);\r\n\r\n  return interaction;\r\n}\r\n\r\n/**\r\n * Log crisis interaction to IndexedDB for offline sync\r\n */\r\nexport async function logCrisisInteraction(\r\n  action: string, \r\n  level: CrisisLevel,\r\n  metadata?: Record<string, any>\r\n): Promise<CrisisInteraction> {\r\n  const interaction: CrisisInteraction = {\r\n    id: generateId(),\r\n    timestamp: new Date().toISOString(),\r\n    action,\r\n    level,\r\n    successful: true,\r\n    metadata: {\r\n      userAgent: navigator.userAgent,\r\n      isOnline: navigator.onLine,\r\n      ...metadata\r\n    }\r\n  };\r\n\r\n  await storeCrisisInteraction(interaction);\r\n\r\n  // Emit action taken event\r\n  window.dispatchEvent(new CustomEvent(CRISIS_EVENTS.actionTaken, {\r\n    detail: interaction\r\n  }));\r\n\r\n  return interaction;\r\n}\r\n\r\n/**\r\n * Get location for emergency services\r\n */\r\nexport function getEmergencyLocation(): Promise<GeolocationCoordinates> {\r\n  return new Promise((resolve, reject) => {\r\n    if (!('geolocation' in navigator)) {\r\n      reject(new Error('Geolocation not supported'));\r\n      return;\r\n    }\r\n\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => resolve(position.coords),\r\n      (_error) => reject(_error),\r\n      {\r\n        enableHighAccuracy: true,\r\n        timeout: 10000,\r\n        maximumAge: 300000 // Cache for 5 minutes\r\n      }\r\n    );\r\n  });\r\n}\r\n\r\n/**\r\n * Get crisis level configuration\r\n */\r\nexport function getCrisisLevelConfig(level: CrisisLevel): CrisisLevelConfig {\r\n  return CRISIS_LEVELS[level];\r\n}\r\n\r\n/**\r\n * Check if crisis level should auto-escalate\r\n */\r\nexport function shouldAutoEscalate(level: CrisisLevel): boolean {\r\n  return CRISIS_LEVELS[level].autoEscalate;\r\n}\r\n\r\n/**\r\n * Get response time limit for crisis level\r\n */\r\nexport function getResponseTimeLimit(level: CrisisLevel): number {\r\n  return CRISIS_LEVELS[level].maxResponseTime;\r\n}\r\n\r\n/**\r\n * Get appropriate emergency contacts for crisis level\r\n */\r\nexport function getRecommendedContacts(level: CrisisLevel): EmergencyContact[] {\r\n  const __config = CRISIS_LEVELS[level];\r\n  \r\n  if (level === 'critical') {\r\n    return EMERGENCY_CONTACTS.filter(c => c.priority <= 2);\r\n  } else if (level === 'high') {\r\n    return EMERGENCY_CONTACTS.filter(c => c.priority <= 3);\r\n  } else {\r\n    return EMERGENCY_CONTACTS;\r\n  }\r\n}\r\n\r\n/**\r\n * Store crisis assessment in IndexedDB\r\n */\r\nasync function storeCrisisAssessment(_assessment: CrisisAssessment): Promise<void> {\r\n  try {\r\n    const db = await openCrisisDB();\r\n    const tx = db.transaction('assessments', 'readwrite');\r\n    await tx.objectStore('assessments').add(_assessment);\r\n  } catch {\r\n    logger.error('Failed to store crisis _assessment:');\r\n    // Fallback to localStorage\r\n    try {\r\n      const _stored = localStorage.getItem(CRISIS_STORAGE_KEYS.lastAssessment) || '[]';\r\n      const assessments = JSON.parse(_stored);\r\n      assessments.push(_assessment);\r\n      // Keep only last 50 assessments\r\n      const _trimmed = assessments.slice(-50);\r\n      localStorage.setItem(CRISIS_STORAGE_KEYS.lastAssessment, JSON.stringify(_trimmed));\r\n    } catch {\r\n    logger.error('Failed to store _assessment in localStorage:', fallbackError);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Store crisis interaction in IndexedDB\r\n */\r\nasync function storeCrisisInteraction(interaction: CrisisInteraction): Promise<void> {\r\n  try {\r\n    const db = await openCrisisDB();\r\n    const tx = db.transaction('interactions', 'readwrite');\r\n    await tx.objectStore('interactions').add(interaction);\r\n  } catch {\r\n    logger.error('Failed to store crisis interaction:');\r\n    // Fallback to localStorage\r\n    try {\r\n      const _stored = localStorage.getItem(CRISIS_STORAGE_KEYS.interactions) || '[]';\r\n      const interactions = JSON.parse(_stored);\r\n      interactions.push(interaction);\r\n      // Keep only last 100 interactions\r\n      const _trimmed = interactions.slice(-100);\r\n      localStorage.setItem(CRISIS_STORAGE_KEYS.interactions, JSON.stringify(_trimmed));\r\n    } catch {\r\n    logger.error('Failed to store interaction in localStorage:', fallbackError);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Open IndexedDB for crisis data\r\n */\r\nfunction openCrisisDB(): Promise<IDBDatabase> {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open('CrisisDB', 1);\r\n    \r\n    request.onerror = () => reject(request.error);\r\n    request.onsuccess = () => resolve(request.result);\r\n    \r\n    request.onupgradeneeded = (event) => {\r\n      const db = (event.target as IDBOpenDBRequest).result;\r\n      \r\n      // Create assessments store\r\n      if (!db.objectStoreNames.contains('assessments')) {\r\n        const assessmentStore = db.createObjectStore('assessments', { \r\n          keyPath: 'id' \r\n        });\r\n        assessmentStore.createIndex('timestamp', 'timestamp');\r\n        assessmentStore.createIndex('level', 'level');\r\n      }\r\n      \r\n      // Create interactions store\r\n      if (!db.objectStoreNames.contains('interactions')) {\r\n        const interactionStore = db.createObjectStore('interactions', { \r\n          keyPath: 'id' \r\n        });\r\n        interactionStore.createIndex('timestamp', 'timestamp');\r\n        interactionStore.createIndex('action', 'action');\r\n        interactionStore.createIndex('level', 'level');\r\n      }\r\n      \r\n      // Create safety plans store\r\n      if (!db.objectStoreNames.contains('safetyPlans')) {\r\n        db.createObjectStore('safetyPlans', { \r\n          keyPath: 'id' \r\n        });\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\n/**\r\n * Generate unique ID for crisis records\r\n */\r\nfunction generateId(): string {\r\n  return `crisis_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\r\n}\r\n\r\n/**\r\n * Get recent crisis assessments\r\n */\r\nexport async function getRecentAssessments(limit: number = 10): Promise<CrisisAssessment[]> {\r\n  try {\r\n    const db = await openCrisisDB();\r\n    const tx = db.transaction('assessments', 'readonly');\r\n    const store = tx.objectStore('assessments');\r\n    const index = store.index('timestamp');\r\n    \r\n    const assessments: CrisisAssessment[] = [];\r\n    const request = index.openCursor(null, 'prev'); // Most recent first\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = (event) => {\r\n        const cursor = (event.target as IDBRequest).result;\r\n        if (cursor && assessments.length < limit) {\r\n          assessments.push(cursor.value);\r\n          cursor.continue();\r\n        } else {\r\n          resolve(_assessments);\r\n        }\r\n      };\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  } catch {\r\n    logger.error('Failed to get recent assessments:');\r\n    // Fallback to localStorage\r\n    try {\r\n      const _stored = localStorage.getItem(CRISIS_STORAGE_KEYS.lastAssessment) || '[]';\r\n      const assessments = JSON.parse(_stored);\r\n      return assessments.slice(-limit).reverse();\r\n    } catch {\r\n    logger.error('Failed to get assessments from localStorage:', fallbackError);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get crisis trend analysis\r\n */\r\nexport async function getCrisisTrends(days: number = 7): Promise<{\r\n  averageLevel: number;\r\n  trendDirection: 'improving' | 'stable' | 'worsening';\r\n  totalAssessments: number;\r\n  criticalIncidents: number;\r\n}> {\r\n  const assessments = await getRecentAssessments(100);\r\n  const cutoffDate = new Date();\r\n  cutoffDate.setDate(cutoffDate.getDate() - days);\r\n  \r\n  const recentAssessments = assessments.filter(a => \r\n    new Date(a.timestamp) > cutoffDate\r\n  );\r\n  \r\n  if (recentAssessments.length === 0) {\r\n    return {\r\n      averageLevel: 1,\r\n      trendDirection: 'stable',\r\n      totalAssessments: 0,\r\n      criticalIncidents: 0\r\n    };\r\n  }\r\n\r\n  // Convert levels to numbers for analysis\r\n  const levelToNumber = {\r\n    safe: 1,\r\n    low: 2,\r\n    moderate: 3,\r\n    high: 4,\r\n    critical: 5\r\n  };\r\n\r\n  const levelNumbers = recentAssessments.map(a => levelToNumber[a.level]);\r\n  const averageLevel = levelNumbers.reduce((sum, level) => sum + level, 0) / levelNumbers.length;\r\n  \r\n  // Calculate trend (compare first half to second half)\r\n  const midpoint = Math.floor(levelNumbers.length / 2);\r\n  const firstHalf = levelNumbers.slice(0, midpoint);\r\n  const secondHalf = levelNumbers.slice(_midpoint);\r\n  \r\n  const firstAvg = firstHalf.reduce((sum, level) => sum + level, 0) / firstHalf.length;\r\n  const secondAvg = secondHalf.reduce((sum, level) => sum + level, 0) / secondHalf.length;\r\n  \r\n  let trendDirection: 'improving' | 'stable' | 'worsening';\r\n  const difference = secondAvg - firstAvg;\r\n  \r\n  if (difference > 0.3) {\r\n    trendDirection = 'worsening';\r\n  } else if (difference < -0.3) {\r\n    trendDirection = 'improving';\r\n  } else {\r\n    trendDirection = 'stable';\r\n  }\r\n\r\n  const criticalIncidents = recentAssessments.filter(a => \r\n    a.level === 'critical' || a.level === 'high'\r\n  ).length;\r\n\r\n  return {\r\n    averageLevel,\r\n    trendDirection,\r\n    totalAssessments: recentAssessments.length,\r\n    criticalIncidents\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\logger.ts","messages":[],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":127,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":127,"endColumn":24,"suggestions":[{"fix":{"range":[4071,4138],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":133,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":133,"endColumn":24,"suggestions":[{"fix":{"range":[4296,4366],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\mobile\\consoleHapticFeedback.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\mobile\\consoleMobilePerformance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\mobile\\touchOptimization.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":535,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":535,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17051,17054],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17051,17054],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '../logger';\n\n/**\r\n * Mobile Touch Optimization Utilities\r\n * Provides enhanced touch interactions, gestures, and mobile-specific optimizations\r\n */\r\n\r\n// Touch event interfaces for better type safety\r\ninterface TouchPoint {\r\n  id: number;\r\n  x: number;\r\n  y: number;\r\n  timestamp: number;\r\n}\r\n\r\ninterface TouchGesture {\r\n  type: 'tap' | 'doubleTap' | 'longPress' | 'swipe' | 'pinch' | 'rotate';\r\n  startTime: number;\r\n  duration: number;\r\n  distance?: number;\r\n  direction?: 'up' | 'down' | 'left' | 'right';\r\n  scale?: number;\r\n  rotation?: number;\r\n  velocity?: number;\r\n  points: TouchPoint[];\r\n}\r\n\r\ninterface TouchOptimizationOptions {\r\n  enableFastClick?: boolean;\r\n  enableSwipeGestures?: boolean;\r\n  enablePinchZoom?: boolean;\r\n  enableRotation?: boolean;\r\n  enableVibration?: boolean;\r\n  doubleTapDelay?: number;\r\n  longPressDelay?: number;\r\n  swipeThreshold?: number;\r\n  pinchThreshold?: number;\r\n  rotationThreshold?: number;\r\n}\r\n\r\nclass TouchOptimizationManager {\r\n  private options: Required<TouchOptimizationOptions>;\r\n  private activeGestures: Map<string, TouchGesture> = new Map();\r\n  private touchHistory: TouchPoint[][] = [];\r\n  private lastTap: { x: number; y: number; timestamp: number } | null = null;\r\n  private longPressTimer: number | null = null;\r\n  private gestureListeners: Map<string, Set<(gesture: TouchGesture) => void>> = new Map();\r\n  private element: HTMLElement;\r\n  private rafId: number | null = null;\r\n\r\n  private readonly defaultOptions: Required<TouchOptimizationOptions> = {\r\n    enableFastClick: true,\r\n    enableSwipeGestures: true,\r\n    enablePinchZoom: true,\r\n    enableRotation: true,\r\n    enableVibration: true,\r\n    doubleTapDelay: 300,\r\n    longPressDelay: 500,\r\n    swipeThreshold: 50,\r\n    pinchThreshold: 1.2,\r\n    rotationThreshold: 15,\r\n  };\r\n\r\n  constructor(element: HTMLElement, options: TouchOptimizationOptions = {}) {\r\n    this.element = element;\r\n    this.options = { ...this.defaultOptions, ...options };\r\n    this.initializeEventListeners();\r\n    this.initializeMobileOptimizations();\r\n  }\r\n\r\n  private initializeEventListeners(): void {\r\n    // Use passive listeners for better performance\r\n    this.element.addEventListener('touchstart', this.handleTouchStart.bind(_this), { passive: true });\r\n    this.element.addEventListener('touchmove', this.handleTouchMove.bind(_this), { passive: false });\r\n    this.element.addEventListener('touchend', this.handleTouchEnd.bind(_this), { passive: true });\r\n    this.element.addEventListener('touchcancel', this.handleTouchCancel.bind(_this), { passive: true });\r\n\r\n    // Prevent default touch behaviors that interfere with custom gestures\r\n    this.element.addEventListener('gesturestart', this.preventDefault, { passive: false });\r\n    this.element.addEventListener('gesturechange', this.preventDefault, { passive: false });\r\n    this.element.addEventListener('gestureend', this.preventDefault, { passive: false });\r\n  }\r\n\r\n  private initializeMobileOptimizations(): void {\r\n    // Optimize touch targets for accessibility\r\n    this.optimizeTouchTargets();\r\n    \r\n    // Enable hardware acceleration for smooth animations\r\n    this.enableHardwareAcceleration();\r\n    \r\n    // Optimize scrolling performance\r\n    this.optimizeScrolling();\r\n    \r\n    // Implement iOS momentum scrolling fix\r\n    this.implementMomentumScrolling();\r\n    \r\n    // Add visual touch feedback\r\n    this.addTouchFeedback();\r\n  }\r\n\r\n  private handleTouchStart(event: TouchEvent): void {\r\n    const touches = Array.from(event.touches);\r\n    const timestamp = performance.now();\r\n\r\n    // Store touch history for gesture recognition\r\n    const _touchPoints: TouchPoint[] = touches.map((touch, _index) => ({\r\n      id: touch.identifier,\r\n      x: touch.clientX,\r\n      y: touch.clientY,\r\n      timestamp,\r\n    }));\r\n\r\n    this.touchHistory.push(_touchPoints);\r\n\r\n    // Handle single touch\r\n    if (touches.length === 1 && touches[0]) {\r\n      const touch = touches[0];\r\n      this.handleSingleTouchStart(touch, timestamp);\r\n    }\r\n\r\n    // Handle multi-touch gestures\r\n    if (touches.length === 2) {\r\n      this.handleMultiTouchStart(touches, timestamp);\r\n    }\r\n\r\n    // Limit touch history to prevent memory leaks\r\n    if (this.touchHistory.length > 10) {\r\n      this.touchHistory.shift();\r\n    }\r\n  }\r\n\r\n  private handleSingleTouchStart(touch: Touch, timestamp: number): void {\r\n    // Setup long press detection\r\n    if (this.longPressTimer) {\r\n      clearTimeout(this.longPressTimer);\r\n    }\r\n\r\n    this.longPressTimer = window.setTimeout(() => {\r\n      this.triggerGesture({\r\n        type: 'longPress',\r\n        startTime: timestamp,\r\n        duration: this.options.longPressDelay,\r\n        points: [{\r\n          id: touch.identifier,\r\n          x: touch.clientX,\r\n          y: touch.clientY,\r\n          timestamp,\r\n        }],\r\n      });\r\n\r\n      // Provide haptic feedback for long press\r\n      if (this.options.enableVibration) {\r\n        this.vibrate([50]);\r\n      }\r\n    }, this.options.longPressDelay);\r\n  }\r\n\r\n  private handleMultiTouchStart(touches: Touch[], timestamp: number): void {\r\n    if (touches.length === 2 && touches[0] && touches[1]) {\r\n      // Initialize pinch/zoom gesture\r\n      const __distance = this.calculateDistance(touches[0], touches[1]);\r\n      const __angle = this.calculateAngle(touches[0], touches[1]);\r\n      \r\n      const gesture: TouchGesture = {\r\n        type: 'pinch',\r\n        startTime: timestamp,\r\n        duration: 0,\r\n        scale: 1,\r\n        rotation: 0,\r\n        points: touches.map((touch) => ({\r\n          id: touch.identifier,\r\n          x: touch.clientX,\r\n          y: touch.clientY,\r\n          timestamp,\r\n        })),\r\n      };\r\n\r\n      this.activeGestures.set('pinch', gesture);\r\n    }\r\n  }\r\n\r\n  private handleTouchMove(event: TouchEvent): void {\r\n    const touches = Array.from(event.touches);\r\n    const timestamp = performance.now();\r\n\r\n    // Cancel long press if touch moves too much\r\n    if (this.longPressTimer && touches.length === 1 && touches[0]) {\r\n      const initialTouch = this.touchHistory[0]?.[0];\r\n      if (initialTouch) {\r\n        const distance = this.calculateDistance(\r\n          { clientX: initialTouch.x, clientY: initialTouch.y } as Touch,\r\n          touches[0]\r\n        );\r\n        \r\n        if (distance > 10) {\r\n          clearTimeout(this.longPressTimer);\r\n          this.longPressTimer = null;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Handle single touch move (potential swipe)\r\n    if (touches.length === 1 && touches[0]) {\r\n      this.handleSwipeGesture(touches[0], timestamp);\r\n    }\r\n\r\n    // Handle multi-touch move (pinch/zoom/rotate)\r\n    if (touches.length === 2) {\r\n      this.handleMultiTouchMove(touches, timestamp);\r\n    }\r\n\r\n    // Prevent default behavior for custom gestures\r\n    if (touches.length > 1) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  private handleSwipeGesture(touch: Touch, timestamp: number): void {\r\n    if (!this.options.enableSwipeGestures) return;\r\n\r\n    const initialTouch = this.touchHistory[0]?.[0];\r\n    if (!initialTouch) return;\r\n\r\n    const deltaX = touch.clientX - initialTouch.x;\r\n    const deltaY = touch.clientY - initialTouch.y;\r\n    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\r\n    const duration = timestamp - initialTouch.timestamp;\r\n\r\n    // Only trigger swipe if distance exceeds threshold\r\n    if (distance > this.options.swipeThreshold && duration < 1000) {\r\n      const velocity = distance / duration;\r\n      let direction: 'up' | 'down' | 'left' | 'right';\r\n\r\n      if (Math.abs(_deltaX) > Math.abs(_deltaY)) {\r\n        direction = deltaX > 0 ? 'right' : 'left';\r\n      } else {\r\n        direction = deltaY > 0 ? 'down' : 'up';\r\n      }\r\n\r\n      // Use RAF for smooth gesture handling\r\n      if (this.rafId) {\r\n        cancelAnimationFrame(this.rafId);\r\n      }\r\n\r\n      this.rafId = requestAnimationFrame(() => {\r\n        this.triggerGesture({\r\n          type: 'swipe',\r\n          startTime: initialTouch.timestamp,\r\n          duration,\r\n          distance,\r\n          direction,\r\n          velocity,\r\n          points: [initialTouch, {\r\n            id: touch.identifier,\r\n            x: touch.clientX,\r\n            y: touch.clientY,\r\n            timestamp,\r\n          }],\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  private handleMultiTouchMove(touches: Touch[], timestamp: number): void {\r\n    if (!this.options.enablePinchZoom && !this.options.enableRotation) return;\r\n\r\n    const pinchGesture = this.activeGestures.get('pinch');\r\n    if (!pinchGesture || touches.length !== 2 || !touches[0] || !touches[1]) return;\r\n\r\n    const currentDistance = this.calculateDistance(touches[0], touches[1]);\r\n    const currentAngle = this.calculateAngle(touches[0], touches[1]);\r\n    \r\n    const point0 = pinchGesture.points[0];\r\n    const point1 = pinchGesture.points[1];\r\n    if (!point0 || !point1) return;\r\n    \r\n    const initialDistance = this.calculateDistance(\r\n      { clientX: point0.x, clientY: point0.y } as Touch,\r\n      { clientX: point1.x, clientY: point1.y } as Touch\r\n    );\r\n    \r\n    const initialAngle = this.calculateAngle(\r\n      { clientX: point0.x, clientY: point0.y } as Touch,\r\n      { clientX: point1.x, clientY: point1.y } as Touch\r\n    );\r\n\r\n    const scale = currentDistance / initialDistance;\r\n    const rotation = currentAngle - initialAngle;\r\n\r\n    // Update gesture data\r\n    pinchGesture.scale = scale;\r\n    pinchGesture.rotation = rotation;\r\n    pinchGesture.duration = timestamp - pinchGesture.startTime;\r\n\r\n    // Trigger pinch gesture if scale threshold is exceeded\r\n    if (this.options.enablePinchZoom && Math.abs(scale - 1) > (this.options.pinchThreshold - 1)) {\r\n      this.triggerGesture({ ...pinchGesture });\r\n    }\r\n\r\n    // Trigger rotation gesture if rotation threshold is exceeded\r\n    if (this.options.enableRotation && Math.abs(_rotation) > this.options.rotationThreshold) {\r\n      this.triggerGesture({ ...pinchGesture, type: 'rotate' });\r\n    }\r\n  }\r\n\r\n  private handleTouchEnd(event: TouchEvent): void {\r\n    const touches = Array.from(event.touches);\r\n    const timestamp = performance.now();\r\n\r\n    // Clear long press timer\r\n    if (this.longPressTimer) {\r\n      clearTimeout(this.longPressTimer);\r\n      this.longPressTimer = null;\r\n    }\r\n\r\n    // Handle tap gestures\r\n    if (touches.length === 0 && event.changedTouches.length === 1 && event.changedTouches[0]) {\r\n      this.handleTapGesture(event.changedTouches[0], timestamp);\r\n    }\r\n\r\n    // Clean up multi-touch gestures\r\n    if (touches.length < 2) {\r\n      this.activeGestures.delete('pinch');\r\n    }\r\n  }\r\n\r\n  private handleTapGesture(touch: Touch, timestamp: number): void {\r\n    const initialTouch = this.touchHistory[0]?.[0];\r\n    if (!initialTouch) return;\r\n\r\n    const distance = this.calculateDistance(\r\n      { clientX: initialTouch.x, clientY: initialTouch.y } as Touch,\r\n      touch\r\n    );\r\n    \r\n    const duration = timestamp - initialTouch.timestamp;\r\n\r\n    // Only register as tap if movement is minimal and duration is short\r\n    if (distance < 10 && duration < 1000) {\r\n      // Check for double tap\r\n      if (this.lastTap && \r\n          timestamp - this.lastTap.timestamp < this.options.doubleTapDelay &&\r\n          this.calculateDistance(\r\n            { clientX: this.lastTap.x, clientY: this.lastTap.y } as Touch,\r\n            touch\r\n          ) < 50) {\r\n        \r\n        this.triggerGesture({\r\n          type: 'doubleTap',\r\n          startTime: this.lastTap.timestamp,\r\n          duration: timestamp - this.lastTap.timestamp,\r\n          points: [\r\n            { id: 0, x: this.lastTap.x, y: this.lastTap.y, timestamp: this.lastTap.timestamp },\r\n            { id: touch.identifier, x: touch.clientX, y: touch.clientY, timestamp },\r\n          ],\r\n        });\r\n\r\n        this.lastTap = null;\r\n      } else {\r\n        // Single tap\r\n        this.triggerGesture({\r\n          type: 'tap',\r\n          startTime: initialTouch.timestamp,\r\n          duration,\r\n          points: [initialTouch, {\r\n            id: touch.identifier,\r\n            x: touch.clientX,\r\n            y: touch.clientY,\r\n            timestamp,\r\n          }],\r\n        });\r\n\r\n        this.lastTap = {\r\n          x: touch.clientX,\r\n          y: touch.clientY,\r\n          timestamp,\r\n        };\r\n      }\r\n\r\n      // Provide haptic feedback for taps\r\n      if (this.options.enableVibration) {\r\n        this.vibrate([25]);\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleTouchCancel(): void {\r\n    // Clean up all active gestures\r\n    this.activeGestures.clear();\r\n    \r\n    if (this.longPressTimer) {\r\n      clearTimeout(this.longPressTimer);\r\n      this.longPressTimer = null;\r\n    }\r\n\r\n    if (this.rafId) {\r\n      cancelAnimationFrame(this.rafId);\r\n      this.rafId = null;\r\n    }\r\n  }\r\n\r\n  private calculateDistance(touch1: Touch, touch2: Touch): number {\r\n    const dx = touch1.clientX - touch2.clientX;\r\n    const dy = touch1.clientY - touch2.clientY;\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n  }\r\n\r\n  private calculateAngle(touch1: Touch, touch2: Touch): number {\r\n    return Math.atan2(touch2.clientY - touch1.clientY, touch2.clientX - touch1.clientX) * 180 / Math.PI;\r\n  }\r\n\r\n  private triggerGesture(gesture: TouchGesture): void {\r\n    const listeners = this.gestureListeners.get(gesture.type);\r\n    if (listeners) {\r\n      listeners.forEach(_callback => {\r\n        try {\r\n          _callback(_gesture);\r\n        } catch {\r\n          logger.error(`Error in gesture listener for ${gesture.type}:`, error);\r\n        }\r\n      });\r\n    }\r\n\r\n    // Also trigger generic gesture listener\r\n    const genericListeners = this.gestureListeners.get('*');\r\n    if (genericListeners) {\r\n      genericListeners.forEach(_callback => {\r\n        try {\r\n          _callback(_gesture);\r\n        } catch {\r\n          logger.error('Error in generic gesture listener:');\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private preventDefault(event: Event): void {\r\n    event.preventDefault();\r\n  }\r\n\r\n  private vibrate(_pattern: number | number[]): void {\r\n    if ('vibrate' in navigator) {\r\n      try {\r\n        navigator.vibrate(_pattern);\r\n      } catch {\n    logger.warn('Vibration not supported or failed:');\r\n      }\r\n    }\r\n  }\r\n\r\n  private optimizeTouchTargets(): void {\r\n    // Ensure minimum touch target size for accessibility\r\n    const minTouchTarget = 44; // 44px minimum as per WCAG guidelines\r\n    \r\n    const clickableElements = this.element.querySelectorAll(\r\n      'button, a, input, select, textarea, [role=\"button\"], [tabindex]'\r\n    );\r\n\r\n    clickableElements.forEach((element) => {\r\n      const rect = element.getBoundingClientRect();\r\n      if (rect.width < minTouchTarget || rect.height < minTouchTarget) {\r\n        (element as HTMLElement).style.minWidth = `${minTouchTarget}px`;\r\n        (element as HTMLElement).style.minHeight = `${minTouchTarget}px`;\r\n      }\r\n    });\r\n  }\r\n\r\n  private enableHardwareAcceleration(): void {\r\n    // Enable hardware acceleration for smooth animations\r\n    this.element.style.transform = 'translateZ(0)';\r\n    this.element.style.backfaceVisibility = 'hidden';\r\n    this.element.style.perspective = '1000px';\r\n  }\r\n\r\n  private optimizeScrolling(): void {\r\n    // Enable smooth scrolling and optimize scroll performance\r\n    this.element.style.scrollBehavior = 'smooth';\r\n    (this.element.style as unknown).webkitOverflowScrolling = 'touch';\r\n    \r\n    // Optimize scroll handling\r\n    this.element.addEventListener('scroll', this.throttleScroll(this.handleScroll.bind(_this), 16), { passive: true });\r\n  }\r\n\r\n  private implementMomentumScrolling(): void {\r\n    // Fix iOS momentum scrolling issues\r\n    if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {\r\n      (this.element.style as unknown).webkitOverflowScrolling = 'touch';\r\n      (this.element.style as unknown).overflowScrolling = 'touch';\r\n    }\r\n  }\r\n\r\n  private addTouchFeedback(): void {\r\n    // Add visual feedback for touch interactions\r\n    const style = document.createElement('style');\r\n    style.textContent = `\r\n      .touch-feedback {\r\n        position: relative;\r\n        overflow: hidden;\r\n      }\r\n      \r\n      .touch-feedback::before {\r\n        content: '';\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        background: radial-gradient(circle, rgba(255,255,255,0.3) 0%, transparent 70%);\r\n        transform: scale(0);\r\n        transition: transform 0.3s ease-out;\r\n        pointer-events: none;\r\n      }\r\n      \r\n      .touch-feedback.active::before {\r\n        transform: scale(1);\r\n      }\r\n      \r\n      .touch-feedback:active {\r\n        transform: scale(0.98);\r\n        transition: transform 0.1s ease-out;\r\n      }\r\n    `;\r\n    document.head.appendChild(style);\r\n\r\n    // Apply touch feedback to interactive elements\r\n    const interactiveElements = this.element.querySelectorAll(\r\n      'button, a, [role=\"button\"], .touch-target'\r\n    );\r\n\r\n    interactiveElements.forEach((element) => {\r\n      element.classList.add('touch-feedback');\r\n    });\r\n  }\r\n\r\n  private throttleScroll<T extends (...args: unknown[]) => any>(func: T, delay: number): T {\r\n    let timeoutId: number | null = null;\r\n    let lastExecTime = 0;\r\n    \r\n    return ((...args: Parameters<T>) => {\r\n      const currentTime = Date.now();\r\n      \r\n      if (currentTime - lastExecTime > delay) {\r\n        func(...args);\r\n        lastExecTime = currentTime;\r\n      } else {\r\n        if (timeoutId) {\r\n          clearTimeout(timeoutId);\r\n        }\r\n        \r\n        timeoutId = window.setTimeout(() => {\r\n          func(...args);\r\n          lastExecTime = Date.now();\r\n        }, delay);\r\n      }\r\n    }) as T;\r\n  }\r\n\r\n  private handleScroll(): void {\r\n    // Optimize scroll performance by reducing expensive operations during scroll\r\n    document.documentElement.classList.add('is-scrolling');\r\n    \r\n    // Remove class after scrolling stops\r\n    clearTimeout(this.scrollTimeout);\r\n    this.scrollTimeout = window.setTimeout(() => {\r\n      document.documentElement.classList.remove('is-scrolling');\r\n    }, 150);\r\n  }\r\n\r\n  private scrollTimeout: number = 0;\r\n\r\n  // Public API methods\r\n  public on(_gestureType: string, _callback: (gesture: TouchGesture) => void): void {\r\n    if (!this.gestureListeners.has(_gestureType)) {\r\n      this.gestureListeners.set(_gestureType, new Set());\r\n    }\r\n    this.gestureListeners.get(_gestureType)!.add(_callback);\r\n  }\r\n\r\n  public off(_gestureType: string, _callback: (gesture: TouchGesture) => void): void {\r\n    const listeners = this.gestureListeners.get(_gestureType);\r\n    if (listeners) {\r\n      listeners.delete(_callback);\r\n    }\r\n  }\r\n\r\n  public destroy(): void {\r\n    // Clean up event listeners\r\n    this.element.removeEventListener('touchstart', this.handleTouchStart);\r\n    this.element.removeEventListener('touchmove', this.handleTouchMove);\r\n    this.element.removeEventListener('touchend', this.handleTouchEnd);\r\n    this.element.removeEventListener('touchcancel', this.handleTouchCancel);\r\n    \r\n    // Clear timers\r\n    if (this.longPressTimer) {\r\n      clearTimeout(this.longPressTimer);\r\n    }\r\n    \r\n    if (this.rafId) {\r\n      cancelAnimationFrame(this.rafId);\r\n    }\r\n    \r\n    if (this.scrollTimeout) {\r\n      clearTimeout(this.scrollTimeout);\r\n    }\r\n    \r\n    // Clear data structures\r\n    this.activeGestures.clear();\r\n    this.gestureListeners.clear();\r\n    this.touchHistory = [];\r\n    this.lastTap = null;\r\n  }\r\n}\r\n\r\n// Export factory function for easy initialization\r\nexport function initializeTouchOptimization(\r\n  element: HTMLElement, \r\n  options?: TouchOptimizationOptions\r\n): TouchOptimizationManager {\r\n  return new TouchOptimizationManager(element, options);\r\n}\r\n\r\n// Export types\r\nexport type { TouchGesture, TouchOptimizationOptions, TouchPoint };\r\nexport { TouchOptimizationManager };\r\n\r\n// Additional mobile optimization utilities\r\nexport const __MobileOptimizationUtils = {\r\n  // Prevent zoom on double-tap\r\n  preventDoubleTapZoom(element: HTMLElement): void {\r\n    element.addEventListener('touchend', (event) => {\r\n      const touch = event.changedTouches[0];\r\n      if (!touch?.target) return;\r\n      const element = touch.target as HTMLElement;\r\n      \r\n      // Prevent zoom on form inputs\r\n      if (['INPUT', 'TEXTAREA', 'SELECT'].includes(element.tagName)) {\r\n        event.preventDefault();\r\n      }\r\n    });\r\n  },\r\n\r\n  // Optimize input focus for iOS\r\n  optimizeIOSInputFocus(): void {\r\n    if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {\r\n      const inputs = document.querySelectorAll('input, textarea');\r\n      \r\n      inputs.forEach((input) => {\r\n        input.addEventListener('focus', () => {\r\n          // Prevent viewport zoom on input focus\r\n          const viewport = document.querySelector('meta[name=\"viewport\"]');\r\n          if (viewport) {\r\n            const currentContent = viewport.getAttribute('content') || '';\r\n            viewport.setAttribute('content', `${currentContent  }, user-scalable=no`);\r\n            \r\n            // Restore after blur\r\n            input.addEventListener('blur', () => {\r\n              viewport.setAttribute('content', currentContent);\r\n            }, { once: true });\r\n          }\r\n        });\r\n      });\r\n    }\r\n  },\r\n\r\n  // Add safe area padding for notched devices\r\n  addSafeAreaSupport(): void {\r\n    const style = document.createElement('style');\r\n    style.textContent = `\r\n      .safe-area-top {\r\n        padding-top: env(safe-area-inset-top);\r\n      }\r\n      \r\n      .safe-area-bottom {\r\n        padding-bottom: env(safe-area-inset-bottom);\r\n      }\r\n      \r\n      .safe-area-left {\r\n        padding-left: env(safe-area-inset-left);\r\n      }\r\n      \r\n      .safe-area-right {\r\n        padding-right: env(safe-area-inset-right);\r\n      }\r\n      \r\n      .safe-area-all {\r\n        padding: \r\n          env(safe-area-inset-top) \r\n          env(safe-area-inset-right) \r\n          env(safe-area-inset-bottom) \r\n          env(safe-area-inset-left);\r\n      }\r\n    `;\r\n    document.head.appendChild(style);\r\n  },\r\n\r\n  // Enable performance optimizations for mobile\r\n  enableMobilePerformanceMode(): void {\r\n    // Reduce motion for better performance\r\n    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {\r\n      document.documentElement.classList.add('reduce-motion');\r\n    }\r\n\r\n    // Add CSS for performance optimizations\r\n    const style = document.createElement('style');\r\n    style.textContent = `\r\n      .reduce-motion * {\r\n        animation-duration: 0.01ms !important;\r\n        animation-iteration-count: 1 !important;\r\n        transition-duration: 0.01ms !important;\r\n      }\r\n      \r\n      .performance-mode .not-critical {\r\n        display: none;\r\n      }\r\n      \r\n      .performance-mode img:not(.critical) {\r\n        visibility: hidden;\r\n      }\r\n    `;\r\n    document.head.appendChild(style);\r\n  }\r\n};","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\performance\\MemoryLeakPrevention.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":205,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5531,5534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5531,5534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":306,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":306,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7963,7966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7963,7966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'cleanupManager.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'cleanupManager.current' to a variable inside the effect, and use that variable in the cleanup function.","line":503,"column":22,"nodeType":"Identifier","endLine":503,"endColumn":29}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-this-alias","severity":2,"message":"Unexpected aliasing of 'this' to local variable.","line":383,"column":5,"nodeType":"Identifier","messageId":"thisAssignment","endLine":383,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Memory Leak Prevention Utilities for CoreV4\n * Provides automatic cleanup, weak references, and memory monitoring\n */\n\nimport { useRef, useEffect } from 'react';\nimport { performanceMonitor } from './performanceMonitor';\nimport { logger } from '../logger';\n\n/**\n * WeakMap-based cache for preventing memory leaks\n */\nexport class WeakCache<K extends object, V> {\n  private cache = new WeakMap<K, V>();\n  private refCount = new WeakMap<K, number>();\n  \n  set(key: K, value: V): void {\n    this.cache.set(key, value);\n    this.refCount.set(key, (this.refCount.get(key) || 0) + 1);\n  }\n  \n  get(key: K): V | undefined {\n    return this.cache.get(key);\n  }\n  \n  has(key: K): boolean {\n    return this.cache.has(key);\n  }\n  \n  delete(key: K): boolean {\n    this.refCount.delete(key);\n    return this.cache.delete(key);\n  }\n  \n  getRefCount(key: K): number {\n    return this.refCount.get(key) || 0;\n  }\n}\n\n/**\n * Automatic cleanup manager for subscriptions and timers\n */\nexport class CleanupManager {\n  private cleanupFunctions: Set<() => void> = new Set();\n  private intervals: Set<number> = new Set();\n  private timeouts: Set<number> = new Set();\n  private animationFrames: Set<number> = new Set();\n// @ts-expect-error - MutationObserver is a global API\n  private observers: Set<MutationObserver | IntersectionObserver | ResizeObserver> = new Set();\n  private eventListeners: Map<EventTarget, Map<string, EventListener>> = new Map();\n  private abortControllers: Set<AbortController> = new Set();\n  \n  /**\n   * Register a cleanup function\n   */\n  register(cleanup: () => void): void {\n    this.cleanupFunctions.add(cleanup);\n  }\n  \n  /**\n   * Create a managed interval\n   */\n  setInterval(callback: () => void, delay: number): number {\n    const id = window.setInterval(callback, delay);\n    this.intervals.add(id);\n    return id;\n  }\n  \n  /**\n   * Create a managed timeout\n   */\n  setTimeout(callback: () => void, delay: number): number {\n    const id = window.setTimeout(() => {\n      callback();\n      this.timeouts.delete(id);\n    }, delay);\n    this.timeouts.add(id);\n    return id;\n  }\n  \n  /**\n   * Create a managed animation frame\n   */\n  requestAnimationFrame(callback: FrameRequestCallback): number {\n    const id = window.requestAnimationFrame((_time) => {\n      callback(_time);\n      this.animationFrames.delete(id);\n    });\n    this.animationFrames.add(id);\n    return id;\n  }\n  \n  /**\n   * Add a managed event listener\n   */\n  addEventListener(\n    target: EventTarget,\n    type: string,\n    listener: EventListener,\n    options?: AddEventListenerOptions\n  ): void {\n    target.addEventListener(type, listener, options);\n    \n    if (!this.eventListeners.has(_target)) {\n      this.eventListeners.set(target, new Map());\n    }\n    this.eventListeners.get(_target)!.set(type, listener);\n  }\n  \n  /**\n   * Create a managed observer\n// @ts-expect-error - MutationObserver is a global API\n// @ts-expect-error - MutationObserver is a global API\n   */\n  createMutationObserver(callback: MutationCallback): MutationObserver {\n    const observer = new MutationObserver(callback);\n    this.observers.add(_observer);\n    return observer;\n  }\n  \n  /**\n   * Create a managed intersection observer\n   */\n// @ts-expect-error - IntersectionObserver is a global API\n// @ts-expect-error - IntersectionObserver is a global API\n  createIntersectionObserver(\n    callback: IntersectionObserverCallback,\n    options?: IntersectionObserverInit\n  ): IntersectionObserver {\n    const observer = new IntersectionObserver(callback, options);\n    this.observers.add(_observer);\n    return observer;\n// @ts-expect-error - ResizeObserver is a global API\n// @ts-expect-error - ResizeObserver is a global API\n  }\n  \n  /**\n   * Create a managed resize observer\n   */\n  createResizeObserver(callback: ResizeObserverCallback): ResizeObserver {\n    const observer = new ResizeObserver(callback);\n    this.observers.add(_observer);\n    return observer;\n  }\n  \n  /**\n   * Create a managed abort controller\n   */\n  createAbortController(): AbortController {\n    const controller = new AbortController();\n    this.abortControllers.add(_controller);\n    return controller;\n  }\n  \n  /**\n   * Clean up all managed resources\n   */\n  cleanup(): void {\n    // Clear intervals\n    this.intervals.forEach(id => clearInterval(id));\n    this.intervals.clear();\n    \n    // Clear timeouts\n    this.timeouts.forEach(id => clearTimeout(id));\n    this.timeouts.clear();\n    \n    // Cancel animation frames\n    this.animationFrames.forEach(id => cancelAnimationFrame(id));\n    this.animationFrames.clear();\n    \n    // Disconnect observers\n    this.observers.forEach(observer => observer.disconnect());\n    this.observers.clear();\n    \n    // Remove event listeners\n    this.eventListeners.forEach((listeners, target) => {\n      listeners.forEach((listener, type) => {\n        target.removeEventListener(type, listener);\n      });\n    });\n    this.eventListeners.clear();\n    \n    // Abort fetch requests\n    this.abortControllers.forEach(controller => controller.abort());\n    this.abortControllers.clear();\n    \n    // Execute cleanup functions\n    this.cleanupFunctions.forEach(cleanup => {\n      try {\n        cleanup();\n      } catch {\n        logger.error('Cleanup function error: ');\n      }\n    });\n    this.cleanupFunctions.clear();\n    \n    // Record cleanup\n    performanceMonitor.recordMetric('memory_cleanup', this.cleanupFunctions.size);\n  }\n}\n\n/**\n * Memory-efficient event emitter\n */\nexport class MemoryEfficientEventEmitter<T extends Record<string, any>> {\n  private listeners = new Map<keyof T, Set<(data: unknown) => void>>();\n  private maxListeners = 10;\n  \n  on<K extends keyof T>(event: K, listener: (data: T[K]) => void): () => void {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, new Set());\n    }\n    \n    const eventListeners = this.listeners.get(event)!;\n    \n    // Warn if too many listeners (potential leak)\n    if (eventListeners.size >= this.maxListeners) {\n      logger.warn(`[Memory] Possible memory leak: ${String(event)} has ${eventListeners.size} listeners`);\n      performanceMonitor.recordMetric('potential_memory_leak', eventListeners.size, {\n        event: String(event)\n      });\n    }\n    \n    eventListeners.add(listener);\n    \n    // Return cleanup function\n    return () => {\n      eventListeners.delete(listener);\n      if (eventListeners.size === 0) {\n        this.listeners.delete(event);\n      }\n    };\n  }\n  \n  emit<K extends keyof T>(event: K, data: T[K]): void {\n    const eventListeners = this.listeners.get(event);\n    if (eventListeners) {\n      eventListeners.forEach(listener => {\n        try {\n          listener(data);\n        } catch {\n          logger.error(`Error in event listener for ${String(event)}:`, error);\n        }\n      });\n    }\n  }\n  \n  removeAllListeners(event?: keyof T): void {\n    if (event) {\n      this.listeners.delete(event);\n    } else {\n      this.listeners.clear();\n    }\n  }\n  \n  listenerCount(event: keyof T): number {\n    return this.listeners.get(event)?.size || 0;\n  }\n}\n\n/**\n * Object pool for reusing objects and reducing garbage collection\n */\nexport class ObjectPool<T> {\n  private pool: T[] = [];\n  private maxSize: number;\n  private createFn: () => T;\n  private resetFn: (_obj: T) => void;\n  \n  constructor(\n    createFn: () => T,\n    resetFn: (_obj: T) => void,\n    maxSize: number = 100\n  ) {\n    this.createFn = createFn;\n    this.resetFn = resetFn;\n    this.maxSize = maxSize;\n  }\n  \n  acquire(): T {\n    if (this.pool.length > 0) {\n      return this.pool.pop()!;\n    }\n    return this.createFn();\n  }\n  \n  release(_obj: T): void {\n    if (this.pool.length < this.maxSize) {\n      this.resetFn(_obj);\n      this.pool.push(_obj);\n    }\n  }\n  \n  clear(): void {\n    this.pool = [];\n  }\n  \n  get size(): number {\n    return this.pool.length;\n  }\n}\n\n/**\n * Debounced function with automatic cleanup\n */\nexport function createDebouncedFunction<T extends (...args: unknown[]) => any>(\n  fn: T,\n  delay: number,\n  options: { leading?: boolean; trailing?: boolean; maxWait?: number } = {}\n): T & { cancel: () => void; flush: () => void } {\n  let timeoutId: number | null = null;\n  let lastCallTime: number | null = null;\n  let lastInvokeTime = 0;\n  let lastArgs: unknown[] | null = null;\n  let lastThis: unknown = null;\n  let result: unknown;\n  \n  const { leading = false, trailing = true, maxWait } = options;\n  \n  function invokeFunc(_time: number) {\n    const args = lastArgs;\n    const thisArg = lastThis;\n    \n    lastArgs = null;\n    lastThis = null;\n    lastInvokeTime = _time;\n    result = fn.apply(thisArg, args!);\n    return result;\n  }\n  \n  function leadingEdge(_time: number) {\n    lastInvokeTime = _time;\n    timeoutId = window.setTimeout(timerExpired, delay);\n    return leading ? invokeFunc(_time) : result;\n  }\n  \n  function timerExpired() {\n    const _time = Date.now();\n    if (shouldInvoke(_time)) {\n      return trailingEdge(_time);\n    }\n    timeoutId = window.setTimeout(timerExpired, remainingWait(_time));\n  }\n  \n  function trailingEdge(_time: number) {\n    timeoutId = null;\n    if (trailing && lastArgs) {\n      return invokeFunc(_time);\n    }\n    lastArgs = null;\n    lastThis = null;\n    return result;\n  }\n  \n  function shouldInvoke(_time: number) {\n    const timeSinceLastCall = lastCallTime ? _time - lastCallTime : 0;\n    const timeSinceLastInvoke = _time - lastInvokeTime;\n    \n    return (\n      lastCallTime === null ||\n      timeSinceLastCall >= delay ||\n      timeSinceLastCall < 0 ||\n      (maxWait !== undefined && timeSinceLastInvoke >= maxWait)\n    );\n  }\n  \n  function remainingWait(_time: number) {\n    const timeSinceLastCall = lastCallTime ? _time - lastCallTime : 0;\n    const timeSinceLastInvoke = _time - lastInvokeTime;\n    const timeWaiting = delay - timeSinceLastCall;\n    \n    return maxWait !== undefined\n      ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n  \n  function debounced(this: unknown, ...args: unknown[]) {\n    const _time = Date.now();\n    const _isInvoking = shouldInvoke(_time);\n    \n    lastArgs = args;\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    lastThis = this;\n    lastCallTime = _time;\n    \n    if (_isInvoking) {\n      if (timeoutId === null) {\n        return leadingEdge(_time);\n      }\n      if (maxWait !== undefined) {\n        timeoutId = window.setTimeout(timerExpired, delay);\n        return invokeFunc(_time);\n      }\n    }\n    \n    if (timeoutId === null) {\n      timeoutId = window.setTimeout(timerExpired, delay);\n    }\n    \n    return result;\n  }\n  \n  debounced.cancel = function() {\n    if (timeoutId !== null) {\n      clearTimeout(_timeoutId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = null;\n    lastCallTime = null;\n    lastThis = null;\n    timeoutId = null;\n  };\n  \n  debounced.flush = function() {\n    return timeoutId === null ? result : trailingEdge(Date.now());\n  };\n  \n  return debounced as T & { cancel: () => void; flush: () => void };\n}\n// @ts-expect-error - IntersectionObserver is a global API\n\n/**\n * Memory-efficient image loader with automatic cleanup\n */\nexport class ImageLoader {\n  private cache = new Map<string, HTMLImageElement>();\n  private loading = new Map<string, Promise<HTMLImageElement>>();\n  private observers = new WeakMap<HTMLImageElement, IntersectionObserver>();\n  \n  async load(src: string): Promise<HTMLImageElement> {\n    // Check cache\n    if (this.cache.has(src)) {\n      return this.cache.get(src)!;\n    }\n    \n    // Check if already loading\n    if (this.loading.has(src)) {\n      return this.loading.get(src)!;\n    }\n    \n    // Start loading\n    const loadPromise = new Promise<HTMLImageElement>((resolve, reject) => {\n      const img = new Image();\n      \n      img.onload = () => {\n        this.cache.set(src, img);\n        this.loading.delete(src);\n        resolve(img);\n      };\n      \n      img.onerror = () => {\n        this.loading.delete(src);\n        reject(new Error(`Failed to load image: ${src}`));\n      };\n      \n// @ts-expect-error - IntersectionObserver is a global API\n      img.src = src;\n    });\n    \n    this.loading.set(src, loadPromise);\n    return loadPromise;\n  }\n  \n  lazyLoad(element: HTMLImageElement, src: string): void {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            this.load(src).then(img => {\n              element.src = img.src;\n              observer.disconnect();\n              this.observers.delete(_element);\n            });\n          }\n        });\n      },\n      { rootMargin: '50px' }\n    );\n    \n    observer.observe(_element);\n    this.observers.set(element, observer);\n  }\n  \n  clear(): void {\n    this.cache.clear();\n    this.loading.clear();\n  }\n  \n  remove(src: string): void {\n    this.cache.delete(src);\n    this.loading.delete(src);\n  }\n}\n\n/**\n * React hook for automatic cleanup\n */\nexport function useCleanup() {\n  const cleanupManager = useRef(new CleanupManager());\n  \n  useEffect(() => {\n    return () => {\n      cleanupManager.current.cleanup();\n    };\n  }, []);\n  \n  return cleanupManager.current;\n}\n\n// Export singleton instances\nexport const globalCleanupManager = new CleanupManager();\nexport const globalImageLoader = new ImageLoader();\n\n// Automatic cleanup on page unload\nif (typeof window !== 'undefined') {\n  window.addEventListener('beforeunload', () => {\n    globalCleanupManager.cleanup();\n    globalImageLoader.clear();\n  });\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\performance\\concurrentFeatures.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":22,"column":13,"nodeType":"Identifier","messageId":"namedExport","endLine":22,"endColumn":27},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":32,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":32,"endColumn":41},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":54,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":54,"endColumn":44},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":71,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":71,"endColumn":30},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":156,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":156,"endColumn":32},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":221,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":221,"endColumn":30},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":251,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":251,"endColumn":31},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":261,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":261,"endColumn":36},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","line":279,"column":6,"nodeType":"Identifier","endLine":279,"endColumn":10},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has missing dependencies: 'computation' and 'priority'. Either include them or remove the dependency array. If 'computation' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":279,"column":6,"nodeType":"Identifier","endLine":279,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [computation, priority]","fix":{"range":[7601,7605],"text":"[computation, priority]"}}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":329,"column":23,"nodeType":"Identifier","messageId":"namedExport","endLine":329,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * React 18/19 Concurrent Features Utilities\n * Leverages advanced React features for optimal performance in mental health app\n */\n\nimport React, {\n  Suspense,\n  startTransition,\n  useDeferredValue,\n  useTransition,\n  lazy,\n  memo,\n  useCallback,\n  _useMemo,\n  ComponentType,\n  ReactNode,\n} from 'react';\n\n/**\n * Priority levels for updates in mental health context\n */\nexport enum UpdatePriority {\n  CRISIS = 'crisis',        // Immediate - crisis intervention\n  HIGH = 'high',           // User interactions\n  MEDIUM = 'medium',       // Data updates\n  LOW = 'low',            // Analytics, background tasks\n}\n\n/**\n * Custom hook for managing transitions with priority\n */\nexport function usePrioritizedTransition(priority: UpdatePriority = UpdatePriority.MEDIUM) {\n  const [_isPending, startTransition] = useTransition();\n  \n  const __prioritizedTransition   = useCallback((callback: () => void) => {\n    if (priority === UpdatePriority.CRISIS) {\n      // Crisis updates run immediately\n      callback();\n    } else if (priority === UpdatePriority.HIGH) {\n      // High priority updates with minimal delay\n      requestAnimationFrame(() => callback());\n    } else {\n      // Lower priority updates use transition\n      startTransition(() => callback());\n    }\n  }, [priority]);\n\n  return [isPending, prioritizedTransition] as const;\n}\n\n/**\n * Deferred value with custom delay based on priority\n */\nexport function usePrioritizedDeferredValue<T>(\n  value: T,\n  priority: UpdatePriority = UpdatePriority.MEDIUM\n): T {\n  const __deferred   = useDeferredValue(_value);\n  \n  // For crisis priority, return immediate value\n  if (priority === UpdatePriority.CRISIS) {\n    return value;\n  }\n  \n  return deferred;\n}\n\n/**\n * Loading fallback components for Suspense boundaries\n */\nexport const LoadingFallbacks = {\n  FullPage: () => (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-purple-50\">\n      <div className=\"text-center\">\n        <div className=\"animate-spin rounded-full h-16 w-16 border-4 border-blue-600 border-t-transparent mx-auto mb-4\"></div>\n        <p className=\"text-gray-600\">Loading your wellness journey...</p>\n      </div>\n    </div>\n  ),\n  \n  Component: () => (\n    <div className=\"flex items-center justify-center p-8\">\n      <div className=\"animate-spin rounded-full h-12 w-12 border-3 border-blue-600 border-t-transparent\"></div>\n    </div>\n  ),\n  \n  Inline: () => (\n    <span className=\"inline-flex items-center\">\n      <span className=\"animate-spin rounded-full h-4 w-4 border-2 border-blue-600 border-t-transparent mr-2\"></span>\n      Loading...\n    </span>\n  ),\n  \n  Skeleton: ({ lines = 3, className = '' }: { lines?: number; className?: string }) => (\n    <div className={`animate-pulse ${className}`}>\n      {Array.from({ length: lines }).map((_, i) => (\n        <div key={i} className=\"h-4 bg-gray-200 rounded mb-2\" style={{ width: `${100 - i * 10}%` }}></div>\n      ))}\n    </div>\n  ),\n  \n  Chart: () => (\n    <div className=\"h-64 bg-gray-100 rounded-lg animate-pulse flex items-center justify-center\">\n      <svg className=\"w-12 h-12 text-gray-300\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n      </svg>\n    </div>\n  ),\n  \n  List: ({ items = 5 }: { items?: number }) => (\n    <div className=\"space-y-4\">\n      {Array.from({ length: items }).map((_, i) => (\n        <div key={i} className=\"bg-white rounded-lg p-4 shadow-sm animate-pulse\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"h-10 w-10 bg-gray-200 rounded-full\"></div>\n            <div className=\"flex-1\">\n              <div className=\"h-4 bg-gray-200 rounded w-1/4 mb-2\"></div>\n              <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  ),\n};\n\n/**\n * Enhanced Suspense wrapper with error boundary\n */\ninterface SuspenseWrapperProps {\n  fallback?: ReactNode;\n  children: ReactNode;\n  priority?: UpdatePriority;\n}\n\nexport function SuspenseWrapper({ \n  fallback = <LoadingFallbacks.Component />, \n  children,\n  priority = UpdatePriority.MEDIUM \n}: SuspenseWrapperProps) {\n  // For crisis priority, render immediately without suspense\n  if (priority === UpdatePriority.CRISIS) {\n    return <>{children}</>;\n  }\n\n  return (\n    <Suspense fallback={fallback}>\n      {children}\n    </Suspense>\n  );\n}\n\n/**\n * Lazy loading with preload support\n */\nexport function lazyWithPreload<T extends ComponentType<unknown>>(\n  importFn: () => Promise<{ default: T }>\n) {\n  let preloadPromise: Promise<{ default: T }> | null = null;\n  \n  const LazyComponent = lazy(() => {\n    if (_preloadPromise) {\n      return preloadPromise;\n    }\n    return importFn();\n  });\n  \n  // Add preload method\n  (LazyComponent as unknown).preload = () => {\n    if (!preloadPromise) {\n      preloadPromise = importFn();\n    }\n    return preloadPromise;\n  };\n  \n  return LazyComponent;\n}\n\n/**\n * Progressive enhancement wrapper for heavy components\n */\ninterface ProgressiveEnhancementProps {\n  children: ReactNode;\n  placeholder?: ReactNode;\n  delay?: number;\n  priority?: UpdatePriority;\n}\n\nexport function ProgressiveEnhancement({\n  children,\n  placeholder = <LoadingFallbacks.Skeleton />,\n  delay = 0,\n  priority = UpdatePriority.LOW,\n}: ProgressiveEnhancementProps) {\n  const [isReady, setIsReady] = React.useState(priority === UpdatePriority.CRISIS);\n  \n  React.useEffect(() => {\n    if (priority === UpdatePriority.CRISIS) {\n      return;\n    }\n    \n    const _timer = setTimeout(() => {\n      startTransition(() => {\n        setIsReady(true);\n      });\n    }, delay);\n    \n    return () => clearTimeout(_timer);\n  }, [delay, priority]);\n  \n  if (!isReady) {\n    return <>{placeholder}</>;\n  }\n  \n  return <>{children}</>;\n}\n\n/**\n * Optimized memo wrapper with custom comparison\n */\nexport function optimizedMemo<P extends object>(\n  Component: React.ComponentType<P>,\n  propsAreEqual?: (prevProps: P, nextProps: P) => boolean\n) {\n  return memo(Component, propsAreEqual || shallowEqual);\n}\n\n/**\n * Shallow equality check for props\n */\nfunction shallowEqual<T extends object>(prevProps: T, nextProps: T): boolean {\n  const prevKeys = Object.keys(_prevProps);\n  const nextKeys = Object.keys(_nextProps);\n  \n  if (prevKeys.length !== nextKeys.length) {\n    return false;\n  }\n  \n  for (const key of prevKeys) {\n    if (prevProps[key as keyof T] !== nextProps[key as keyof T]) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n/**\n * Batch updates for performance\n */\nexport function batchedUpdates(callback: () => void) {\n  // React 18+ automatically batches updates, but we can still use this for explicit control\n  startTransition(() => {\n    callback();\n  });\n}\n\n/**\n * Hook for managing heavy computations\n */\nexport function useHeavyComputation<T>(\n  computation: () => T,\n  deps: React.DependencyList,\n  priority: UpdatePriority = UpdatePriority.LOW\n): T | undefined {\n  const [result, setResult] = React.useState<T>();\n  const [_isPending, startTransition] = useTransition();\n  \n  React.useEffect(() => {\n    if (priority === UpdatePriority.CRISIS) {\n      // Immediate computation for crisis\n      setResult(computation());\n    } else {\n      // Deferred computation for non-critical\n      startTransition(() => {\n        setResult(computation());\n      });\n    }\n  }, deps);\n  \n  return result;\n}\n\n/**\n * Intersection Observer with Suspense integration\n */\nexport function LazyLoad({ \n  children, \n  rootMargin = '50px',\n  fallback = <LoadingFallbacks.Component />\n}: {\n  children: ReactNode;\n  rootMargin?: string;\n  fallback?: ReactNode;\n}) {\n  const [isInView, setIsInView] = React.useState(false);\n  const ref = React.useRef<HTMLDivElement>(null);\n  \n  React.useEffect(() => {\n// @ts-expect-error - IntersectionObserver is a global API\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry?.isIntersecting) {\n          startTransition(() => {\n            setIsInView(true);\n          });\n        }\n      },\n      { rootMargin }\n    );\n    \n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n    \n    return () => observer.disconnect();\n  }, [rootMargin]);\n  \n  return (\n    <div ref={ref}>\n      {isInView ? children : fallback}\n    </div>\n  );\n}\n\n/**\n * Time slicing for expensive operations\n */\nexport async function timeSlice<T>(\n  items: T[],\n  processor: (item: T) => void,\n  chunkSize = 10,\n  delay = 0\n) {\n  for (let i = 0; i < items.length; i += chunkSize) {\n    const chunk = items.slice(i, i + chunkSize);\n    \n    await new Promise(resolve => {\n      startTransition(() => {\n        chunk.forEach(_processor);\n        setTimeout(resolve, delay);\n      });\n    });\n  }\n}\n\n// UpdatePriority is already exported as an enum (both type and value)","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\performance\\gamingOptimizations.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":565,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":565,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18943,18946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18943,18946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Gaming-Grade Performance Optimizations\r\n * Implements console-quality 60fps optimizations for the mental health platform\r\n */\r\n\r\nimport { performanceMonitor } from './performanceMonitor';\r\nimport { logger } from '../logger';\r\n\r\ninterface GamePerformanceConfig {\r\n  targetFPS: number;\r\n  enableGPUAcceleration: boolean;\r\n  enableMemoryOptimization: boolean;\r\n  enableNetworkOptimization: boolean;\r\n  prioritizeCrisisFeatures: boolean;\r\n  adaptiveQuality: boolean;\r\n}\r\n\r\ninterface PerformanceMetrics {\r\n  fps: number;\r\n  memoryUsage: number;\r\n  frameTime: number;\r\n  renderTime: number;\r\n  lastFrameTimestamp: number;\r\n}\r\n\r\nclass GamePerformanceOptimizer {\r\n  private config: GamePerformanceConfig;\r\n  private metrics: PerformanceMetrics;\r\n  private rafId: number | null = null;\r\n  private frameHistory: number[] = [];\r\n  private lastOptimizationCheck: number = 0;\r\n  private performanceLevel: 'high' | 'medium' | 'low' = 'high';\r\n  private observers: Map<string, PerformanceObserver> = new Map();\r\n  \r\n  constructor() {\r\n    this.config = {\r\n      targetFPS: 60,\r\n      enableGPUAcceleration: true,\r\n      enableMemoryOptimization: true,\r\n      enableNetworkOptimization: true,\r\n      prioritizeCrisisFeatures: true,\r\n      adaptiveQuality: true,\r\n    };\r\n    \r\n    this.metrics = {\r\n      fps: 60,\r\n      memoryUsage: 0,\r\n      frameTime: 16.67, // 60fps = 16.67ms per frame\r\n      renderTime: 0,\r\n      lastFrameTimestamp: performance.now(),\r\n    };\r\n    \r\n    this.initialize();\r\n  }\r\n  \r\n  private initialize(): void {\r\n    this.detectDeviceCapabilities();\r\n    this.setupPerformanceMonitoring();\r\n    this.enableGPUOptimizations();\r\n    this.optimizeNetworking();\r\n    this.startFrameRateMonitoring();\r\n    this.setupMemoryManagement();\r\n    this.enableConsoleOptimizations();\r\n    \r\n    logger.info(`Initialized with ${this.performanceLevel} performance profile`, 'GamingOptimizations');\r\n  }\r\n  \r\n  private detectDeviceCapabilities(): void {\r\n    const memory = (navigator as unknown).deviceMemory;\r\n    const cores = navigator.hardwareConcurrency;\r\n    const connection = (navigator as unknown).connection;\r\n    \r\n    // Determine performance level based on device capabilities\r\n    if (memory <= 4 || cores <= 2 || connection?.effectiveType === '2g') {\r\n      this.performanceLevel = 'low';\r\n      this.config.targetFPS = 30;\r\n      this.config.enableGPUAcceleration = false;\r\n    } else if (memory <= 8 || cores <= 4 || connection?.effectiveType === '3g') {\r\n      this.performanceLevel = 'medium';\r\n      this.config.targetFPS = 45;\r\n    } else {\r\n      this.performanceLevel = 'high';\r\n      this.config.targetFPS = 60;\r\n    }\r\n    \r\n    performanceMonitor.recordMetric('device_performance_level', 1, {\r\n      level: this.performanceLevel,\r\n      memory,\r\n      cores,\r\n      networkType: connection?.effectiveType\r\n    });\r\n  }\r\n  \r\n  private setupPerformanceMonitoring(): void {\r\n    // Long task monitoring for detecting blocking operations\r\n    if ('PerformanceObserver' in window && PerformanceObserver.supportedEntryTypes?.includes('longtask')) {\r\n      const longTaskObserver = new PerformanceObserver((list) => {\r\n        for (const entry of list.getEntries()) {\r\n          const longTask = entry as PerformanceEntry;\r\n          if (longTask.duration > 16.67) { // Longer than one frame at 60fps\r\n            this.handleLongTask(longTask);\r\n          }\r\n        }\r\n      });\r\n      \r\n      longTaskObserver.observe({ entryTypes: ['longtask'] });\r\n      this.observers.set('longtask', longTaskObserver);\r\n    }\r\n    \r\n    // Layout shift monitoring\r\n    if ('PerformanceObserver' in window && PerformanceObserver.supportedEntryTypes?.includes('layout-shift')) {\r\n      const layoutShiftObserver = new PerformanceObserver((list) => {\r\n        for (const entry of list.getEntries()) {\r\n          const layoutShift = entry as PerformanceEntry & { value?: number };\r\n          if (layoutShift.value && layoutShift.value > 0.1) { // Significant layout shift\r\n            this.optimizeLayoutStability();\r\n          }\r\n        }\r\n      });\r\n      \r\n      layoutShiftObserver.observe({ entryTypes: ['layout-shift'] });\r\n      this.observers.set('layout-shift', layoutShiftObserver);\r\n    }\r\n    \r\n    // Resource timing for bundle optimization\r\n    if ('PerformanceObserver' in window && PerformanceObserver.supportedEntryTypes?.includes('resource')) {\r\n      const resourceObserver = new PerformanceObserver((list) => {\r\n        for (const entry of list.getEntries()) {\r\n          this.analyzeResourceTiming(entry as PerformanceResourceTiming);\r\n        }\r\n      });\r\n      \r\n      resourceObserver.observe({ entryTypes: ['resource'] });\r\n      this.observers.set('resource', resourceObserver);\r\n    }\r\n  }\r\n  \r\n  private enableGPUOptimizations(): void {\r\n    if (!this.config.enableGPUAcceleration) return;\r\n    \r\n    // Apply GPU acceleration to critical elements\r\n    const applyGPUAcceleration = () => {\r\n      const criticalElements = [\r\n        '[data-console-group]',\r\n        '[role=\"navigation\"]',\r\n        '.console-focusable',\r\n        '.animate-',\r\n        '[data-testid*=\"crisis\"]'\r\n      ];\r\n      \r\n      criticalElements.forEach(selector => {\r\n        document.querySelectorAll(selector).forEach(element => {\r\n          const el = element as HTMLElement;\r\n          el.style.transform = 'translate3d(0, 0, 0)';\r\n          el.style.backfaceVisibility = 'hidden';\r\n          el.style.perspective = '1000px';\r\n          el.style.willChange = 'transform, opacity';\r\n        });\r\n      });\r\n    };\r\n    \r\n    // Apply GPU acceleration after DOM is ready and on route changes\r\n    if (document.readyState === 'complete') {\r\n      applyGPUAcceleration();\r\n    } else {\r\n      window.addEventListener('load', applyGPUAcceleration);\r\n    }\r\n    \r\n    // Apply on navigation changes\r\n    window.addEventListener('popstate', () => {\r\n      setTimeout(applyGPUAcceleration, 100);\r\n    });\r\n    \r\n    // Monitor for new elements\r\n// @ts-expect-error - MutationObserver is a global API\r\n    const observer = new MutationObserver((mutations) => {\r\n      let _shouldOptimize = false;\r\n      mutations.forEach(mutation => {\r\n        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\r\n          _shouldOptimize = true;\r\n        }\r\n      });\r\n      \r\n// @ts-expect-error - requestIdleCallback is a global API\r\n      if (_shouldOptimize) {\r\n        requestIdleCallback(applyGPUAcceleration, { timeout: 1000 });\r\n      }\r\n    });\r\n    \r\n    observer.observe(document.body, { \r\n      childList: true, \r\n      subtree: true \r\n    });\r\n  }\r\n  \r\n  private startFrameRateMonitoring(): void {\r\n    let frameCount = 0;\r\n    let lastTime = performance.now();\r\n    \r\n    const _measureFrame = (timestamp: number) => {\r\n      frameCount++;\r\n      const deltaTime = timestamp - this.metrics.lastFrameTimestamp;\r\n      this.metrics.frameTime = deltaTime;\r\n      this.metrics.lastFrameTimestamp = timestamp;\r\n      \r\n      // Calculate FPS every second\r\n      if (timestamp - lastTime >= 1000) {\r\n        const fps = Math.round((frameCount * 1000) / (timestamp - lastTime));\r\n        this.metrics.fps = fps;\r\n        this.frameHistory.push(fps);\r\n        \r\n        // Keep only last 10 seconds of history\r\n        if (this.frameHistory.length > 10) {\r\n          this.frameHistory.shift();\r\n        }\r\n        \r\n        // Adaptive quality based on performance\r\n        if (this.config.adaptiveQuality) {\r\n          this.adaptQualityBasedOnPerformance(fps);\r\n        }\r\n        \r\n        frameCount = 0;\r\n        lastTime = timestamp;\r\n        \r\n        performanceMonitor.recordMetric('gaming_fps', fps, {\r\n          frameTime: this.metrics.frameTime,\r\n          performanceLevel: this.performanceLevel\r\n        });\r\n      }\r\n      \r\n      this.rafId = requestAnimationFrame(_measureFrame);\r\n    };\r\n    \r\n    this.rafId = requestAnimationFrame(_measureFrame);\r\n  }\r\n  \r\n  private adaptQualityBasedOnPerformance(_currentFPS: number): void {\r\n    const now = Date.now();\r\n    if (now - this.lastOptimizationCheck < 2000) return; // Check every 2 seconds\r\n    \r\n    this.lastOptimizationCheck = now;\r\n    \r\n    const avgFPS = this.frameHistory.reduce((a, b) => a + b, 0) / this.frameHistory.length;\r\n    \r\n    if (avgFPS < this.config.targetFPS * 0.8) {\r\n      // Performance is poor, reduce quality\r\n      this.reduceQuality();\r\n    } else if (avgFPS > this.config.targetFPS * 0.95 && this.performanceLevel !== 'high') {\r\n      // Performance is good, can increase quality\r\n      this.increaseQuality();\r\n    }\r\n  }\r\n  \r\n  private reduceQuality(): void {\r\n    logger.info('Reducing quality due to low FPS', 'GamingOptimizations');\r\n    \r\n    // Disable expensive animations\r\n    document.documentElement.classList.add('performance-mode');\r\n    \r\n    // Reduce animation durations\r\n    document.documentElement.style.setProperty('--animation-duration', '0.1s');\r\n    \r\n    // Disable blur effects\r\n    document.querySelectorAll('[style*=\"backdrop-filter\"], [class*=\"backdrop-blur\"]').forEach(el => {\r\n      (el as HTMLElement).style.backdropFilter = 'none';\r\n    });\r\n    \r\n    // Simplify shadows\r\n    document.documentElement.style.setProperty('--box-shadow-intensity', '0.5');\r\n    \r\n    performanceMonitor.recordMetric('quality_reduced', 1, {\r\n      reason: 'low_fps',\r\n      currentFPS: this.metrics.fps\r\n    });\r\n  }\r\n  \r\n  private increaseQuality(): void {\r\n    logger.info('Increasing quality due to good FPS', 'GamingOptimizations');\r\n    \r\n    // Re-enable animations gradually\r\n    document.documentElement.classList.remove('performance-mode');\r\n    document.documentElement.style.removeProperty('--animation-duration');\r\n    document.documentElement.style.removeProperty('--box-shadow-intensity');\r\n    \r\n    performanceMonitor.recordMetric('quality_increased', 1, {\r\n      reason: 'good_fps',\r\n      currentFPS: this.metrics.fps\r\n    });\r\n  }\r\n  \r\n  private handleLongTask(task: PerformanceEntry): void {\r\n    logger.warn(`[Gaming Performance] Long task detected: ${task.duration}ms`);\r\n    \r\n    // If we're in crisis mode, this is critical\r\n    const inCrisisMode = window.location.pathname.includes('crisis') || \r\n                        document.querySelector('[data-crisis-active=\"true\"]');\r\n    \r\n    if (inCrisisMode && task.duration > 50) {\r\n      // Emergency performance mode for crisis features\r\n      document.documentElement.classList.add('performance-emergency');\r\n      setTimeout(() => {\r\n        document.documentElement.classList.remove('performance-emergency');\r\n      }, 5000);\r\n    }\r\n    \r\n    performanceMonitor.recordMetric('long_task', task.duration, {\r\n      inCrisisMode,\r\n      taskName: task.name,\r\n      startTime: task.startTime\r\n    });\r\n  }\r\n  \r\n  private optimizeLayoutStability(): void {\r\n    logger.info('Optimizing layout stability', 'GamingOptimizations');\r\n    \r\n    // Add contain properties to isolate layouts\r\n    document.querySelectorAll('.console-focusable, [data-console-group]').forEach(el => {\r\n      (el as HTMLElement).style.contain = 'layout style paint';\r\n    });\r\n    \r\n    performanceMonitor.recordMetric('layout_optimized', 1);\r\n  }\r\n  \r\n  private analyzeResourceTiming(entry: PerformanceResourceTiming): void {\r\n    const isCritical = entry.name.includes('crisis') || \r\n                      entry.name.includes('emergency') || \r\n                      entry.name.includes('console');\r\n    \r\n    if (isCritical && entry.duration > 200) {\r\n      logger.warn(`[Gaming Performance] Critical resource slow: ${entry.name}`);\r\n      performanceMonitor.recordMetric('critical_resource_slow', entry.duration, {\r\n        resourceName: entry.name,\r\n        size: entry.encodedBodySize\r\n      });\r\n    }\r\n  }\r\n  \r\n  private setupMemoryManagement(): void {\r\n    if (!this.config.enableMemoryOptimization) return;\r\n    \r\n    // Monitor memory usage\r\n    const checkMemory = () => {\r\n      if ('memory' in performance) {\r\n        const memory = (performance as unknown).memory;\r\n        const usedMB = memory.usedJSHeapSize / 1048576;\r\n        this.metrics.memoryUsage = usedMB;\r\n        \r\n        if (usedMB > 100) { // Over 100MB\r\n          this.triggerGarbageCollection();\r\n        }\r\n        \r\n        performanceMonitor.recordMetric('memory_usage_gaming', usedMB, {\r\n          total: memory.totalJSHeapSize / 1048576,\r\n          limit: memory.jsHeapSizeLimit / 1048576\r\n        });\r\n      }\r\n    };\r\n    \r\n    setInterval(checkMemory, 5000);\r\n    \r\n    // Clean up unused event listeners and observers\r\n    this.setupCleanupScheduler();\r\n  }\r\n  \r\n  private triggerGarbageCollection(): void {\r\n    logger.info('Triggering garbage collection optimizations', 'GamingOptimizations');\r\n    \r\n    // Force garbage collection if available (development only)\r\n    if ('gc' in window && process.env.NODE_ENV === 'development') {\r\n      (window as unknown).gc();\r\n    }\r\n    \r\n    // Clean up performance entries\r\n    if ('clearResourceTimings' in performance) {\r\n      performance.clearResourceTimings();\r\n    }\r\n    \r\n    // Clear old performance marks and measures\r\n    performance.clearMarks();\r\n    performance.clearMeasures();\r\n    \r\n    performanceMonitor.recordMetric('gc_triggered', 1, {\r\n      memoryUsage: this.metrics.memoryUsage\r\n    });\r\n  }\r\n  \r\n  private setupCleanupScheduler(): void {\r\n    // Clean up stale DOM references and event listeners\r\n    setInterval(() => {\r\n      // Remove stale event listeners from removed elements\r\n      document.querySelectorAll('[data-cleanup-scheduled]').forEach(el => {\r\n        if (!document.body.contains(el)) {\r\n          el.remove();\r\n        }\r\n      });\r\n      \r\n      // Clean up intersection observers for elements no longer in viewport\r\n      if ('IntersectionObserver' in window) {\r\n        // This would be implemented based on specific observer usage\r\n      }\r\n    }, 30000); // Every 30 seconds\r\n  }\r\n  \r\n  private optimizeNetworking(): void {\r\n    if (!this.config.enableNetworkOptimization) return;\r\n    \r\n    // Preconnect to critical domains\r\n    const criticalDomains = [\r\n      'https://fonts.googleapis.com',\r\n      'https://fonts.gstatic.com',\r\n    ];\r\n    \r\n    criticalDomains.forEach(domain => {\r\n      const link = document.createElement('link');\r\n      link.rel = 'preconnect';\r\n      link.href = domain;\r\n      link.crossOrigin = 'anonymous';\r\n      document.head.appendChild(link);\r\n    });\r\n    \r\n    // Optimize resource hints for critical resources\r\n    this.setupResourceHints();\r\n  }\r\n  \r\n  private setupResourceHints(): void {\r\n    // Prefetch likely next pages based on user behavior\r\n    const prefetchCandidates = [\r\n      '/wellness',\r\n      '/crisis',\r\n      '/community'\r\n    ];\r\n    \r\n    prefetchCandidates.forEach(path => {\r\n      if (window.location.pathname !== path) {\r\n        const link = document.createElement('link');\r\n        link.rel = 'prefetch';\r\n        link.href = path;\r\n        document.head.appendChild(link);\r\n      }\r\n    });\r\n  }\r\n  \r\n  private enableConsoleOptimizations(): void {\r\n    // Optimize console navigation for 60fps\r\n    document.addEventListener('keydown', this.optimizeKeyboardInput.bind(this), { \r\n      passive: true \r\n    });\r\n    \r\n    // Optimize mouse interactions\r\n    document.addEventListener('mousemove', this.throttleMouseMove.bind(this), { \r\n      passive: true \r\n    });\r\n    \r\n    // Optimize scroll performance\r\n    document.addEventListener('scroll', this.optimizeScrolling.bind(this), { \r\n      passive: true \r\n    });\r\n  }\r\n  \r\n  private optimizeKeyboardInput = (() => {\r\n    let lastInputTime = 0;\r\n    return (event: KeyboardEvent) => {\r\n      const now = performance.now();\r\n      const timeSinceLastInput = now - lastInputTime;\r\n      \r\n      // Throttle rapid key inputs to maintain 60fps\r\n      if (timeSinceLastInput < 16.67) {\r\n        event.preventDefault();\r\n        return;\r\n      }\r\n      \r\n      lastInputTime = now;\r\n    };\r\n  })();\r\n  \r\n  private throttleMouseMove = (() => {\r\n    let lastMoveTime = 0;\r\n    return (_event: MouseEvent) => {\r\n      const now = performance.now();\r\n      const timeSinceLastMove = now - lastMoveTime;\r\n      \r\n      // Throttle mouse events to 60fps\r\n      if (timeSinceLastMove < 16.67) {\r\n        return;\r\n      }\r\n      \r\n      lastMoveTime = now;\r\n      \r\n      // Update console navigation state efficiently\r\n      document.documentElement.classList.add('console-navigation-mouse');\r\n      document.documentElement.classList.remove('console-navigation-keyboard', 'console-navigation-gamepad');\r\n    };\r\n  })();\r\n  \r\n  private optimizeScrolling = (() => {\r\n    let scrollTimeout: number;\r\n    return () => {\r\n      // Use passive scrolling for better performance\r\n      clearTimeout(scrollTimeout);\r\n      scrollTimeout = window.setTimeout(() => {\r\n        // Trigger any scroll-dependent optimizations\r\n        this.updateVisibleElements();\r\n      }, 100);\r\n    };\r\n  })();\r\n  \r\n  private updateVisibleElements(): void {\r\n    // Optimize rendering of off-screen elements\r\n    const viewportHeight = window.innerHeight;\r\n    const buffer = 200; // 200px buffer for smooth scrolling\r\n    \r\n    document.querySelectorAll('.console-focusable').forEach(el => {\r\n      const rect = el.getBoundingClientRect();\r\n      const isVisible = rect.top < viewportHeight + buffer && rect.bottom > -buffer;\r\n      \r\n      if (isVisible) {\r\n        (el as HTMLElement).style.visibility = 'visible';\r\n      } else {\r\n        (el as HTMLElement).style.visibility = 'hidden';\r\n      }\r\n    });\r\n  }\r\n  \r\n  // Public API\r\n  public getMetrics(): PerformanceMetrics {\r\n    return { ...this.metrics };\r\n  }\r\n  \r\n  public getConfig(): GamePerformanceConfig {\r\n    return { ...this.config };\r\n  }\r\n  \r\n  public setConfig(newConfig: Partial<GamePerformanceConfig>): void {\r\n    this.config = { ...this.config, ...newConfig };\r\n    logger.info('Configuration updated', 'GamingOptimizations', newConfig);\r\n  }\r\n  \r\n  public enableCrisisMode(): void {\r\n    logger.crisis('Crisis mode enabled - maximum performance', 'high', 'GamingOptimizations');\r\n    \r\n    // Highest priority for crisis features\r\n    document.documentElement.classList.add('crisis-performance-mode');\r\n    \r\n    // Disable all non-essential animations\r\n    document.documentElement.style.setProperty('--animation-duration', '0s');\r\n    \r\n    // Force highest performance mode\r\n    this.performanceLevel = 'high';\r\n    this.config.targetFPS = 60;\r\n    \r\n    performanceMonitor.recordMetric('crisis_mode_enabled', 1);\r\n  }\r\n  \r\n  public disableCrisisMode(): void {\r\n    logger.info('Crisis mode disabled - restoring normal performance', 'GamingOptimizations');\r\n    \r\n    document.documentElement.classList.remove('crisis-performance-mode');\r\n    document.documentElement.style.removeProperty('--animation-duration');\r\n    \r\n    this.detectDeviceCapabilities(); // Restore appropriate performance level\r\n    \r\n    performanceMonitor.recordMetric('crisis_mode_disabled', 1);\r\n  }\r\n  \r\n  public generatePerformanceReport(): Record<string, any> {\r\n    const avgFPS = this.frameHistory.reduce((a, b) => a + b, 0) / this.frameHistory.length || 0;\r\n    \r\n    return {\r\n      averageFPS: Math.round(avgFPS),\r\n      currentFPS: this.metrics.fps,\r\n      frameTime: this.metrics.frameTime,\r\n      memoryUsage: this.metrics.memoryUsage,\r\n      performanceLevel: this.performanceLevel,\r\n      targetFPS: this.config.targetFPS,\r\n      optimizationsActive: {\r\n        gpuAcceleration: this.config.enableGPUAcceleration,\r\n        memoryOptimization: this.config.enableMemoryOptimization,\r\n        networkOptimization: this.config.enableNetworkOptimization,\r\n        adaptiveQuality: this.config.adaptiveQuality\r\n      },\r\n      frameHistory: [...this.frameHistory]\r\n    };\r\n  }\r\n  \r\n  public destroy(): void {\r\n    if (this.rafId) {\r\n      cancelAnimationFrame(this.rafId);\r\n    }\r\n    \r\n    // Clean up observers\r\n    this.observers.forEach(observer => observer.disconnect());\r\n    this.observers.clear();\r\n    \r\n    logger.info('Performance optimizer destroyed', 'GamingOptimizations');\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const gamePerformanceOptimizer = new GamePerformanceOptimizer();\r\n\r\n// React hook for accessing gaming performance features\r\nexport function useGamePerformance() {\r\n  return {\r\n    getMetrics: gamePerformanceOptimizer.getMetrics.bind(gamePerformanceOptimizer),\r\n    getConfig: gamePerformanceOptimizer.getConfig.bind(gamePerformanceOptimizer),\r\n    setConfig: gamePerformanceOptimizer.setConfig.bind(gamePerformanceOptimizer),\r\n    enableCrisisMode: gamePerformanceOptimizer.enableCrisisMode.bind(gamePerformanceOptimizer),\r\n    disableCrisisMode: gamePerformanceOptimizer.disableCrisisMode.bind(gamePerformanceOptimizer),\r\n    generateReport: gamePerformanceOptimizer.generatePerformanceReport.bind(gamePerformanceOptimizer)\r\n  };\r\n}\r\n\r\n// Initialize on import\r\nexport function initializeGamingPerformance(): void {\r\n  logger.info('Gaming-grade optimizations initialized', 'GamingOptimizations');\r\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\performance\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\performance\\memoryManagement.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'timersRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'timersRef.current' to a variable inside the effect, and use that variable in the cleanup function.","line":246,"column":17,"nodeType":"Identifier","endLine":246,"endColumn":24},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'intervalsRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'intervalsRef.current' to a variable inside the effect, and use that variable in the cleanup function.","line":273,"column":20,"nodeType":"Identifier","endLine":273,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":365,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":365,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9243,9246],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9243,9246],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":395,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":395,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9868,9871],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9868,9871],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Memory Management and Cleanup Utilities\n * Prevents memory leaks and optimizes resource usage in mental health app\n */\n\nimport { RefObject, useEffect, useRef } from 'react';\n\n/**\n * WeakMap-based cache for component data\n */\nexport class WeakCache<K extends object, V> {\n  private cache = new WeakMap<K, V>();\n  \n  set(key: K, value: V): void {\n    this.cache.set(key, value);\n  }\n  \n  get(key: K): V | undefined {\n    return this.cache.get(key);\n  }\n  \n  has(key: K): boolean {\n    return this.cache.has(key);\n  }\n  \n  delete(key: K): boolean {\n    return this.cache.delete(key);\n  }\n}\n\n/**\n * Resource cleanup manager\n */\nclass ResourceManager {\n  private cleanupFunctions: Map<string, () => void> = new Map();\n  private timers: Map<string, number> = new Map();\n  private intervals: Map<string, number> = new Map();\n// @ts-expect-error - IntersectionObserver is a global API\n  private observers: Map<string, IntersectionObserver | MutationObserver | ResizeObserver> = new Map();\n  private eventListeners: Map<string, { element: EventTarget; event: string; handler: EventListener }[]> = new Map();\n  \n  /**\n   * Register a cleanup function\n   */\n  registerCleanup(id: string, cleanup: () => void): void {\n    this.cleanupFunctions.set(id, cleanup);\n  }\n  \n  /**\n   * Register a timer for automatic cleanup\n   */\n  registerTimer(id: string, timerId: number): void {\n    // Clear existing timer if any\n    if (this.timers.has(id)) {\n      clearTimeout(this.timers.get(id)!);\n    }\n    this.timers.set(id, timerId);\n  }\n  \n  /**\n   * Register an interval for automatic cleanup\n   */\n  registerInterval(id: string, intervalId: number): void {\n    // Clear existing interval if any\n    if (this.intervals.has(id)) {\n      clearInterval(this.intervals.get(id)!);\n    }\n    this.intervals.set(id, intervalId);\n  }\n  \n  /**\n   * Register an observer for automatic cleanup\n// @ts-expect-error - IntersectionObserver is a global API\n   */\n  registerObserver(id: string, observer: IntersectionObserver | MutationObserver | ResizeObserver): void {\n    // Disconnect existing observer if any\n    if (this.observers.has(id)) {\n      this.observers.get(id)!.disconnect();\n    }\n    this.observers.set(id, observer);\n  }\n  \n  /**\n   * Register event listener for automatic cleanup\n   */\n  registerEventListener(id: string, element: EventTarget, event: string, handler: EventListener): void {\n    if (!this.eventListeners.has(id)) {\n      this.eventListeners.set(id, []);\n    }\n    this.eventListeners.get(id)!.push({ element, event, handler });\n    element.addEventListener(event, handler);\n  }\n  \n  /**\n   * Clean up specific resource\n   */\n  cleanup(id: string): void {\n    // Run cleanup function\n    const cleanupFn = this.cleanupFunctions.get(id);\n    if (_cleanupFn) {\n      cleanupFn();\n      this.cleanupFunctions.delete(id);\n    }\n    \n    // Clear timer\n    const timer = this.timers.get(id);\n    if (timer) {\n      clearTimeout(timer);\n      this.timers.delete(id);\n    }\n    \n    // Clear interval\n    const interval = this.intervals.get(id);\n    if (interval) {\n      clearInterval(interval);\n      this.intervals.delete(id);\n    }\n    \n    // Disconnect observer\n    const observer = this.observers.get(id);\n    if (observer) {\n      observer.disconnect();\n      this.observers.delete(id);\n    }\n    \n    // Remove event listeners\n    const listeners = this.eventListeners.get(id);\n    if (listeners) {\n      listeners.forEach(({ element, event, handler }) => {\n        element.removeEventListener(event, handler);\n      });\n      this.eventListeners.delete(id);\n    }\n  }\n  \n  /**\n   * Clean up all resources\n   */\n  cleanupAll(): void {\n    // Run all cleanup functions\n    this.cleanupFunctions.forEach(cleanup => cleanup());\n    this.cleanupFunctions.clear();\n    \n    // Clear all timers\n    this.timers.forEach(timer => clearTimeout(timer));\n    this.timers.clear();\n    \n    // Clear all intervals\n    this.intervals.forEach(interval => clearInterval(interval));\n    this.intervals.clear();\n    \n    // Disconnect all observers\n    this.observers.forEach(observer => observer.disconnect());\n    this.observers.clear();\n    \n    // Remove all event listeners\n    this.eventListeners.forEach(listeners => {\n      listeners.forEach(({ element, event, handler }) => {\n        element.removeEventListener(event, handler);\n      });\n    });\n    this.eventListeners.clear();\n  }\n  \n  /**\n   * Get resource stats\n   */\n  getStats() {\n    return {\n      cleanupFunctions: this.cleanupFunctions.size,\n      timers: this.timers.size,\n      intervals: this.intervals.size,\n      observers: this.observers.size,\n      eventListeners: this.eventListeners.size,\n    };\n  }\n}\n\n// Global resource manager instance\nexport const resourceManager = new ResourceManager();\n\n/**\n * Hook for automatic resource cleanup\n */\nexport function useResourceCleanup(componentId: string) {\n  useEffect(() => {\n    return () => {\n      resourceManager.cleanup(componentId);\n    };\n  }, [componentId]);\n  \n  return {\n    registerCleanup: (cleanup: () => void) => resourceManager.registerCleanup(componentId, cleanup),\n    registerTimer: (timerId: number) => resourceManager.registerTimer(componentId, timerId),\n    registerInterval: (intervalId: number) => resourceManager.registerInterval(componentId, intervalId),\n    registerObserver: (observer: unknown) => resourceManager.registerObserver(componentId, observer),\n    registerEventListener: (element: EventTarget, event: string, handler: EventListener) => \n      resourceManager.registerEventListener(componentId, element, event, handler),\n  };\n}\n\n/**\n * Hook for cleaning up DOM event listeners\n */\nexport function useEventListenerCleanup(\n  ref: RefObject<HTMLElement>,\n  event: string,\n  handler: EventListener,\n  options?: AddEventListenerOptions\n) {\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n    \n    element.addEventListener(event, handler, options);\n    \n    return () => {\n      element.removeEventListener(event, handler, options);\n    };\n  }, [ref, event, handler, options]);\n}\n\n/**\n * Hook for cleaning up timers\n */\nexport function useTimerCleanup() {\n  const timersRef = useRef<Set<number>>(new Set());\n  \n  const setTimeout = (callback: () => void, delay: number): number => {\n    const id = window.setTimeout(() => {\n      timersRef.current.delete(id);\n      callback();\n    }, delay);\n    timersRef.current.add(id);\n    return id;\n  };\n  \n  const clearTimeout = (id: number) => {\n    window.clearTimeout(id);\n    timersRef.current.delete(id);\n  };\n  \n  useEffect(() => {\n    return () => {\n      timersRef.current.forEach(id => window.clearTimeout(id));\n      timersRef.current.clear();\n    };\n  }, []);\n  \n  return { setTimeout, clearTimeout };\n}\n\n/**\n * Hook for cleaning up intervals\n */\nexport function useIntervalCleanup() {\n  const intervalsRef = useRef<Set<number>>(new Set());\n  \n  const setInterval = (callback: () => void, delay: number): number => {\n    const id = window.setInterval(callback, delay);\n    intervalsRef.current.add(id);\n    return id;\n  };\n  \n  const clearInterval = (id: number) => {\n    window.clearInterval(id);\n    intervalsRef.current.delete(id);\n  };\n  \n  useEffect(() => {\n    return () => {\n      intervalsRef.current.forEach(id => window.clearInterval(id));\n      intervalsRef.current.clear();\n    };\n  }, []);\n  \n  return { setInterval, clearInterval };\n}\n\n/**\n * Memory-efficient image loader with cleanup\n */\nexport class ImageLoader {\n  private cache = new Map<string, HTMLImageElement>();\n  private loading = new Map<string, Promise<HTMLImageElement>>();\n  \n  async load(src: string): Promise<HTMLImageElement> {\n    // Return cached image\n    if (this.cache.has(src)) {\n      return this.cache.get(src)!;\n    }\n    \n    // Return existing loading promise\n    if (this.loading.has(src)) {\n      return this.loading.get(src)!;\n    }\n    \n    // Start new load\n    const loadPromise = new Promise<HTMLImageElement>((resolve, reject) => {\n      const img = new Image();\n      \n      img.onload = () => {\n        this.cache.set(src, img);\n        this.loading.delete(src);\n        resolve(img);\n      };\n      \n      img.onerror = () => {\n        this.loading.delete(src);\n        reject(new Error(`Failed to load image: ${src}`));\n      };\n      \n      img.src = src;\n    });\n    \n    this.loading.set(src, loadPromise);\n    return loadPromise;\n  }\n  \n  /**\n   * Preload multiple images\n   */\n  async preload(srcs: string[]): Promise<void> {\n    await Promise.all(srcs.map(src => this.load(src).catch(() => {})));\n  }\n  \n  /**\n   * Clear image from cache\n   */\n  clear(src: string): void {\n    const img = this.cache.get(src);\n    if (img) {\n      img.src = ''; // Clear image source\n      this.cache.delete(src);\n    }\n  }\n  \n  /**\n   * Clear all cached images\n   */\n  clearAll(): void {\n    this.cache.forEach(img => {\n      img.src = ''; // Clear image source\n    });\n    this.cache.clear();\n    this.loading.clear();\n  }\n  \n  /**\n   * Get cache stats\n   */\n  getStats() {\n    return {\n      cached: this.cache.size,\n      loading: this.loading.size,\n    };\n  }\n}\n\nexport const __imageLoader = new ImageLoader();\n\n/**\n * Debounce with cleanup\n */\nexport function debounceWithCleanup<T extends (...args: unknown[]) => any>(\n  func: T,\n  delay: number\n): T & { cancel: () => void } {\n  let timeoutId: number | null = null;\n  \n  const debounced = ((...args: Parameters<T>) => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    \n    timeoutId = window.setTimeout(() => {\n      func(...args);\n      timeoutId = null;\n    }, delay);\n  }) as T;\n  \n  (debounced as unknown).cancel = () => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n      timeoutId = null;\n    }\n  };\n  \n  return debounced as T & { cancel: () => void };\n}\n\n/**\n * Throttle with cleanup\n */\nexport function throttleWithCleanup<T extends (...args: unknown[]) => any>(\n  func: T,\n  limit: number\n): T & { cancel: () => void } {\n  let inThrottle = false;\n  let lastArgs: Parameters<T> | null = null;\n  let timeoutId: number | null = null;\n  \n  const throttled = ((...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = true;\n      \n      timeoutId = window.setTimeout(() => {\n        inThrottle = false;\n        if (_lastArgs) {\n          throttled(...lastArgs);\n          lastArgs = null;\n        }\n      }, limit);\n    } else {\n      lastArgs = args;\n    }\n  }) as T;\n  \n  (throttled as unknown).cancel = () => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n      timeoutId = null;\n    }\n    inThrottle = false;\n    lastArgs = null;\n  };\n  \n  return throttled as T & { cancel: () => void };\n}\n\n/**\n * Memory leak detector\n */\nexport class MemoryLeakDetector {\n  private snapshots: unknown[] = [];\n  private maxSnapshots = 10;\n  \n  takeSnapshot(): void {\n    if ('memory' in performance) {\n      const memory = (performance as unknown).memory;\n      this.snapshots.push({\n        timestamp: Date.now(),\n        usedJSHeapSize: memory.usedJSHeapSize,\n        totalJSHeapSize: memory.totalJSHeapSize,\n        jsHeapSizeLimit: memory.jsHeapSizeLimit,\n      });\n      \n      // Keep only recent snapshots\n      if (this.snapshots.length > this.maxSnapshots) {\n        this.snapshots.shift();\n      }\n    }\n  }\n  \n  detectLeak(): boolean {\n    if (this.snapshots.length < 3) return false;\n    \n    // Check if memory is consistently _increasing\n    let _increasing = true;\n    for (let i = 1; i < this.snapshots.length; i++) {\n      if (this.snapshots[i].usedJSHeapSize <= this.snapshots[i - 1].usedJSHeapSize) {\n        _increasing = false;\n        break;\n      }\n    }\n    \n    if (_increasing) {\n      const firstSnapshot = this.snapshots[0];\n      const lastSnapshot = this.snapshots[this.snapshots.length - 1];\n      const increase = lastSnapshot.usedJSHeapSize - firstSnapshot.usedJSHeapSize;\n      const timeElapsed = lastSnapshot.timestamp - firstSnapshot.timestamp;\n      \n      // Leak detected if memory increased by more than 10MB in 1 minute\n      if (increase > 10 * 1024 * 1024 && timeElapsed < 60000) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n  \n  getReport() {\n    return {\n      snapshots: this.snapshots,\n      hasLeak: this.detectLeak(),\n      currentMemory: this.snapshots[this.snapshots.length - 1],\n    };\n  }\n  \n  clear(): void {\n    this.snapshots = [];\n  }\n}\n\nexport const __memoryLeakDetector = new MemoryLeakDetector();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\performance\\performanceMonitor.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1672,1675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1672,1675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":630,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":630,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20954,20957],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20954,20957],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":732,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":732,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23876,23879],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23876,23879],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":733,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":733,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23917,23920],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23917,23920],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Comprehensive Performance Monitoring System for CoreV4\n * Tracks critical metrics including crisis response times, Core Web Vitals, and custom metrics\n */\n\nimport { onCLS, onFCP, onFID, onLCP, onTTFB, type Metric } from 'web-vitals';\nimport { logger } from '../logger';\n\n// Performance thresholds for mental health app\nconst PERFORMANCE_THRESHOLDS = {\n  // Critical crisis response times\n  CRISIS_PAGE_LOAD: 200, // ms - Crisis pages must load in <200ms\n  CRISIS_HOTLINE_ACCESS: 50, // ms - 988 access must be <50ms\n  SAFETY_PLAN_ACCESS: 100, // ms - Safety plan must load in <100ms\n  EMERGENCY_CONTACT_DISPLAY: 50, // ms - Emergency contacts must show in <50ms\n  CRISIS_CHAT_CONNECTION: 500, // ms - Crisis chat must connect in <500ms\n  \n  // Core Web Vitals targets\n  LCP: 2500, // Largest Contentful Paint\n  FID: 100, // First Input Delay\n  CLS: 0.1, // Cumulative Layout Shift\n  FCP: 1800, // First Contentful Paint\n  TTFB: 600, // Time to First Byte\n  TTI: 3500, // Time to Interactive\n  \n  // Mental health specific metrics\n  MOOD_LOG_RESPONSE: 200, // ms\n  DASHBOARD_WIDGET_LOAD: 300, // ms per widget\n  THERAPY_SESSION_LOAD: 500, // ms\n  COMMUNITY_POST_LOAD: 400, // ms\n  PROFESSIONAL_SEARCH: 600, // ms\n  \n  // Memory thresholds\n  MAX_MEMORY_MB: 150, // Maximum memory usage in MB\n  MEMORY_WARNING_MB: 100, // Warning threshold\n  \n  // Bundle size limits (_KB)\n  CRITICAL_BUNDLE_SIZE: 300, // Crisis features bundle\n  MAIN_BUNDLE_SIZE: 500, // Main app bundle\n  VENDOR_BUNDLE_SIZE: 800, // Vendor dependencies\n};\n\n// Performance metrics storage\ninterface PerformanceMetric {\n  name: string;\n  value: number;\n  timestamp: number;\n  context?: Record<string, any>;\n}\n\nclass PerformanceMonitor {\n  private metrics: Map<string, PerformanceMetric[]> = new Map();\n  private observers: Map<string, PerformanceObserver> = new Map();\n  private reportQueue: PerformanceMetric[] = [];\n  private reportTimer: number | null = null;\n  private sessionId: string;\n  private userId: string | null = null;\n  private isLowEndDevice: boolean = false;\n  private networkType: string = 'unknown';\n  \n  constructor() {\n    this.sessionId = this.generateSessionId();\n    this.detectDeviceCapabilities();\n    this.detectNetworkType();\n    this.initializeWebVitals();\n    this.initializePerformanceObservers();\n    this.initializeMemoryMonitoring();\n    this.initializeCrisisMetrics();\n  }\n  \n  /**\n   * Initialize Core Web Vitals monitoring\n   */\n  private initializeWebVitals(): void {\n    // Largest Contentful Paint\n    onLCP((metric: Metric) => this.handleWebVital('LCP', metric));\n    \n    // First Input Delay\n    onFID((metric: Metric) => this.handleWebVital('FID', metric));\n    \n    // Cumulative Layout Shift\n    onCLS((metric: Metric) => this.handleWebVital('CLS', metric));\n    \n    // First Contentful Paint\n    onFCP((metric: Metric) => this.handleWebVital('FCP', metric));\n    \n    // Time to First Byte\n    onTTFB((metric: Metric) => this.handleWebVital('TTFB', metric));\n  }\n  \n  /**\n   * Handle Web Vital metrics\n   */\n  private handleWebVital(name: string, metric: Metric): void {\n    const threshold = PERFORMANCE_THRESHOLDS[name as keyof typeof PERFORMANCE_THRESHOLDS];\n    const isGood = metric.value <= threshold;\n    \n    this.recordMetric(name, metric.value, {\n      rating: metric.rating,\n      isGood,\n      threshold,\n      delta: metric.delta,\n      navigationType: metric.navigationType,\n    });\n    \n    // Alert if critical metrics exceed thresholds\n    if (!isGood && ['LCP', 'FID'].includes(name)) {\n      this.alertPerformanceIssue(name, metric.value, threshold);\n    }\n  }\n  \n  /**\n   * Initialize Performance Observers for detailed monitoring\n   */\n  private initializePerformanceObservers(): void {\n    // Long Task Observer - detect blocking tasks\n    if ('PerformanceObserver' in window && PerformanceObserver.supportedEntryTypes?.includes('longtask')) {\n      const longTaskObserver = new PerformanceObserver((list) => {\n        for (const entry of list.getEntries()) {\n          const longTask = entry as unknown; // PerformanceLongTaskTiming not in all TypeScript versions\n          this.recordMetric('long_task', longTask.duration, {\n            name: longTask.name,\n            startTime: longTask.startTime,\n            attribution: longTask.attribution,\n          });\n          \n          // Alert if long task blocks crisis features\n          if (longTask.duration > 50 && this.isInCrisisFlow()) {\n            this.alertPerformanceIssue('long_task_in_crisis', longTask.duration, 50);\n          }\n        }\n      });\n      \n      longTaskObserver.observe({ entryTypes: ['longtask'] });\n      this.observers.set('longtask', longTaskObserver);\n    }\n    \n    // Navigation timing\n    if ('PerformanceObserver' in window && PerformanceObserver.supportedEntryTypes?.includes('navigation')) {\n      const navObserver = new PerformanceObserver((list) => {\n        for (const entry of list.getEntries()) {\n          const navEntry = entry as PerformanceNavigationTiming;\n          this.recordNavigationMetrics(navEntry);\n        }\n      });\n      \n      navObserver.observe({ entryTypes: ['navigation'] });\n      this.observers.set('navigation', navObserver);\n    }\n    \n    // Resource timing for bundle monitoring\n    if ('PerformanceObserver' in window && PerformanceObserver.supportedEntryTypes?.includes('resource')) {\n      const resourceObserver = new PerformanceObserver((list) => {\n        for (const entry of list.getEntries()) {\n          const resourceEntry = entry as PerformanceResourceTiming;\n          this.analyzeResourceLoading(resourceEntry);\n        }\n      });\n      \n      resourceObserver.observe({ entryTypes: ['resource'] });\n      this.observers.set('resource', resourceObserver);\n    }\n  }\n  \n  /**\n   * Initialize memory monitoring for leak detection\n   */\n  private initializeMemoryMonitoring(): void {\n    if ('memory' in performance) {\n      // Monitor memory usage every 10 seconds\n      setInterval(() => {\n        const memory = (performance as unknown).memory;\n        const usedMemoryMB = memory.usedJSHeapSize / 1048576;\n        const totalMemoryMB = memory.totalJSHeapSize / 1048576;\n        const limitMemoryMB = memory.jsHeapSizeLimit / 1048576;\n        \n        this.recordMetric('memory_usage', usedMemoryMB, {\n          total: totalMemoryMB,\n          limit: limitMemoryMB,\n          percentage: (usedMemoryMB / limitMemoryMB) * 100,\n        });\n        \n        // Detect potential memory leaks\n        if (usedMemoryMB > PERFORMANCE_THRESHOLDS.MAX_MEMORY_MB) {\n          this.alertMemoryIssue(usedMemoryMB);\n        }\n        \n        // Track memory growth rate\n        this.detectMemoryLeaks(usedMemoryMB);\n      }, 10000);\n    }\n  }\n  \n  /**\n   * Initialize crisis-specific performance metrics\n   */\n  private initializeCrisisMetrics(): void {\n    // Monitor crisis button response time\n    this.measureCrisisButtonPerformance();\n    \n    // Monitor 988 hotline access speed\n    this.measure988AccessTime();\n    \n    // Monitor safety plan loading\n    this.measureSafetyPlanAccess();\n    \n    // Monitor emergency contacts display\n    this.measureEmergencyContactsDisplay();\n  }\n  \n  /**\n   * Measure crisis button click to modal display time\n   */\n  private measureCrisisButtonPerformance(): void {\n    // Override crisis button click handler to measure performance\n    document.addEventListener('click', (event) => {\n      const target = event.target as HTMLElement;\n      if (target.closest('[aria-label*=\"Crisis\"]')) {\n        performance.mark('crisis_button_clicked');\n        \n        // Use MutationObserver to detect when modal appears\n// @ts-expect-error - MutationObserver is a global API\n        const observer = new MutationObserver((mutations) => {\n          for (const mutation of mutations) {\n            if (mutation.type === 'childList') {\n              const modal = document.querySelector('[role=\"dialog\"][aria-labelledby*=\"crisis\"]');\n              if (modal) {\n                performance.mark('crisis_modal_displayed');\n                performance.measure('crisis_response_time', 'crisis_button_clicked', 'crisis_modal_displayed');\n                \n                const measure = performance.getEntriesByName('crisis_response_time')[0];\n                if (!measure) continue;\n                this.recordMetric('crisis_response_time', measure.duration, {\n                  timestamp: Date.now(),\n                  userAgent: navigator.userAgent,\n                });\n                \n                // Alert if response time exceeds threshold\n                if (measure?.duration && measure.duration > PERFORMANCE_THRESHOLDS.CRISIS_PAGE_LOAD) {\n                  this.alertCriticalPerformanceIssue('crisis_response_slow', measure.duration);\n                }\n                \n                observer.disconnect();\n                break;\n              }\n            }\n          }\n        });\n        \n        observer.observe(document.body, { childList: true, subtree: true });\n        \n        // Cleanup observer after 5 seconds\n        setTimeout(() => observer.disconnect(), 5000);\n      }\n    });\n  }\n  \n  /**\n   * Measure 988 hotline access time\n   */\n  private measure988AccessTime(): void {\n    // Monitor tel:988 link clicks\n    document.addEventListener('click', (event) => {\n      const target = event.target as HTMLElement;\n      const telLink = target.closest('a[href^=\"tel:988\"]');\n      \n      if (telLink) {\n        const clickTime = performance.now();\n        this.recordMetric('988_access_time', clickTime, {\n          immediate: clickTime < PERFORMANCE_THRESHOLDS.CRISIS_HOTLINE_ACCESS,\n        });\n      }\n    });\n  }\n  \n  /**\n   * Measure safety plan access time\n   */\n  private measureSafetyPlanAccess(): void {\n    // Monitor safety plan component loading\n    const measureSafetyPlan = (startMark: string) => {\n      performance.mark(startMark);\n      \n      const checkSafetyPlan = () => {\n        const safetyPlanElement = document.querySelector('[data-testid=\"safety-plan\"]');\n        if (safetyPlanElement) {\n          performance.mark('safety_plan_loaded');\n          performance.measure('safety_plan_load_time', startMark, 'safety_plan_loaded');\n          \n          const measure = performance.getEntriesByName('safety_plan_load_time')[0];\n          if (!measure) return;\n          this.recordMetric('safety_plan_access', measure.duration, {\n            withinThreshold: measure.duration < PERFORMANCE_THRESHOLDS.SAFETY_PLAN_ACCESS,\n          });\n        } else {\n          requestAnimationFrame(checkSafetyPlan);\n        }\n      };\n      \n      checkSafetyPlan();\n    };\n    \n    // Hook into router navigation to safety plan\n    window.addEventListener('popstate', () => {\n      if (window.location.pathname.includes('safety-plan')) {\n        measureSafetyPlan('safety_plan_navigation_start');\n      }\n    });\n  }\n  \n  /**\n   * Measure emergency contacts display time\n   */\n  private measureEmergencyContactsDisplay(): void {\n    const measureContacts = () => {\n      performance.mark('emergency_contacts_start');\n      \n      const checkContacts = () => {\n        const contactsElement = document.querySelector('[data-testid=\"emergency-contacts\"]');\n        if (contactsElement && contactsElement.children.length > 0) {\n          performance.mark('emergency_contacts_displayed');\n          performance.measure('emergency_contacts_time', 'emergency_contacts_start', 'emergency_contacts_displayed');\n          \n          const measure = performance.getEntriesByName('emergency_contacts_time')[0];\n          if (!measure) return;\n          this.recordMetric('emergency_contacts_display', measure.duration, {\n            count: contactsElement.children.length,\n            fast: measure.duration < PERFORMANCE_THRESHOLDS.EMERGENCY_CONTACT_DISPLAY,\n          });\n        }\n      };\n      \n      // Check periodically\n      const interval = setInterval(() => {\n        checkContacts();\n        if (document.querySelector('[data-testid=\"emergency-contacts\"]')) {\n          clearInterval(interval);\n        }\n      }, 100);\n      \n      // Stop checking after 5 seconds\n      setTimeout(() => clearInterval(interval), 5000);\n    };\n    \n    // Monitor emergency contacts section\n    document.addEventListener('click', (event) => {\n      const target = event.target as HTMLElement;\n      if (target.textContent?.includes('Emergency Contacts')) {\n        measureContacts();\n      }\n    });\n  }\n  \n  /**\n   * Record navigation timing metrics\n   */\n  private recordNavigationMetrics(entry: PerformanceNavigationTiming): void {\n    const metrics = {\n      dns: entry.domainLookupEnd - entry.domainLookupStart,\n      tcp: entry.connectEnd - entry.connectStart,\n      ttfb: entry.responseStart - entry.requestStart,\n      download: entry.responseEnd - entry.responseStart,\n      domInteractive: entry.domInteractive - entry.fetchStart,\n      domComplete: entry.domComplete - entry.fetchStart,\n      loadComplete: entry.loadEventEnd - entry.fetchStart,\n    };\n    \n    this.recordMetric('navigation_timing', metrics.loadComplete, metrics);\n    \n    // Check if page load is too slow\n    if (metrics.loadComplete > 3000) {\n      this.alertPerformanceIssue('slow_page_load', metrics.loadComplete, 3000);\n    }\n  }\n  \n  /**\n   * Analyze resource loading for bundle optimization\n   */\n  private analyzeResourceLoading(entry: PerformanceResourceTiming): void {\n    const isJavaScript = entry.name.endsWith('.js');\n    const isCSS = entry.name.endsWith('.css');\n    const isCriticalResource = entry.name.includes('crisis') || entry.name.includes('emergency');\n    \n    if (isJavaScript || isCSS) {\n      const loadTime = entry.responseEnd - entry.startTime;\n      const size = entry.encodedBodySize;\n      \n      this.recordMetric('resource_load', loadTime, {\n        name: entry.name,\n        type: isJavaScript ? 'js' : 'css',\n        size: size / 1024, // KB\n        critical: isCriticalResource,\n        cached: entry.transferSize === 0,\n      });\n      \n      // Alert if critical resources are slow\n      if (isCriticalResource && loadTime > 200) {\n        this.alertCriticalPerformanceIssue('slow_critical_resource', loadTime);\n      }\n      \n      // Alert if bundles are too large\n      if (isJavaScript && size > PERFORMANCE_THRESHOLDS.CRITICAL_BUNDLE_SIZE * 1024) {\n        this.alertBundleSizeIssue(entry.name, size / 1024);\n      }\n    }\n  }\n  \n  /**\n   * Detect potential memory leaks\n   */\n  private memoryHistory: number[] = [];\n  private detectMemoryLeaks(currentMemoryMB: number): void {\n    this.memoryHistory.push(currentMemoryMB);\n    \n    // Keep only last 6 measurements (1 minute of data)\n    if (this.memoryHistory.length > 6) {\n      this.memoryHistory.shift();\n    }\n    \n    // Check for consistent memory growth\n    if (this.memoryHistory.length === 6) {\n      let isGrowing = true;\n      for (let i = 1; i < this.memoryHistory.length; i++) {\n        const current = this.memoryHistory[i];\n        const previous = this.memoryHistory[i - 1];\n        if (current != null && previous != null && current <= previous) {\n          isGrowing = false;\n          break;\n        }\n      }\n      \n      if (isGrowing) {\n        const recent = this.memoryHistory[5];\n        const initial = this.memoryHistory[0];\n        if (recent == null || initial == null) return;\n        const growthRate = recent - initial;\n        this.alertMemoryLeak(growthRate);\n      }\n    }\n  }\n  \n  /**\n   * Detect device capabilities for optimization decisions\n   */\n  private detectDeviceCapabilities(): void {\n    // Check for low-end device indicators\n    const memory = (navigator as unknown).deviceMemory;\n    const cpuCores = navigator.hardwareConcurrency;\n    \n    this.isLowEndDevice = (\n      (memory && memory <= 4) || // 4GB RAM or less\n      (cpuCores && cpuCores <= 2) || // 2 cores or less\n      /Android.*(Mobile|Tablet).*Chrome\\/[.0-9]* (?!Mobile)/i.test(navigator.userAgent) || // Older Android\n      /iPhone OS [6-9]_/i.test(navigator.userAgent) // Older iPhone\n    );\n    \n    if (this.isLowEndDevice) {\n      logger.info('Low-end device detected, enabling optimizations', 'PerformanceMonitor');\n      this.enableLowEndOptimizations();\n    }\n  }\n  \n  /**\n   * Detect network type for adaptive loading\n   */\n  private detectNetworkType(): void {\n    const connection = (navigator as unknown).connection || (navigator as unknown).mozConnection || (navigator as unknown).webkitConnection;\n    \n    if (connection) {\n      this.networkType = connection.effectiveType || 'unknown';\n      \n      // Monitor network changes\n      connection.addEventListener('change', () => {\n        this.networkType = connection.effectiveType || 'unknown';\n        this.recordMetric('network_change', 0, {\n          type: this.networkType,\n          downlink: connection.downlink,\n          rtt: connection.rtt,\n        });\n      });\n    }\n  }\n  \n  /**\n   * Enable optimizations for low-end devices\n   */\n  private enableLowEndOptimizations(): void {\n    // Reduce animation complexity\n    document.documentElement.classList.add('reduce-motion');\n    \n    // Disable non-critical features\n    localStorage.setItem('performance_mode', 'low');\n    \n    // Reduce image quality\n    document.documentElement.style.setProperty('--image-quality', 'low');\n    \n    // Record optimization activation\n    this.recordMetric('low_end_optimizations', 1, {\n      memory: (navigator as unknown).deviceMemory,\n      cores: navigator.hardwareConcurrency,\n    });\n  }\n  \n  /**\n   * Check if user is in crisis flow\n   */\n  private isInCrisisFlow(): boolean {\n    return (\n      window.location.pathname.includes('crisis') ||\n      document.querySelector('[role=\"dialog\"][aria-labelledby*=\"crisis\"]') !== null ||\n      document.querySelector('[data-crisis-active=\"true\"]') !== null\n    );\n  }\n  \n  /**\n   * Alert for performance issues\n   */\n  private alertPerformanceIssue(metric: string, value: number, threshold: number): void {\n    logger.warn(`[Performance] ${metric} exceeded threshold: ${value}ms (threshold: ${threshold}ms)`);\n    \n    // Send to analytics\n    this.reportMetric({\n      name: 'performance_issue',\n      value,\n      timestamp: Date.now(),\n      context: {\n        metric,\n        threshold,\n        severity: 'warning',\n      },\n    });\n  }\n  \n  /**\n   * Alert for critical performance issues (crisis features)\n   */\n  private alertCriticalPerformanceIssue(metric: string, value: number): void {\n    logger.error(`[Performance Critical] ${metric}: ${value}ms - Crisis feature performance degraded!`);\n    \n    // Immediately report critical issues\n    this.reportMetric({\n      name: 'critical_performance_issue',\n      value,\n      timestamp: Date.now(),\n      context: {\n        metric,\n        severity: 'critical',\n        inCrisisFlow: this.isInCrisisFlow(),\n      },\n    });\n    \n    // Trigger immediate optimizations\n    this.triggerEmergencyOptimizations();\n  }\n  \n  /**\n   * Trigger emergency optimizations for critical performance issues\n   */\n  private triggerEmergencyOptimizations(): void {\n    // Pause non-critical operations\n    document.documentElement.classList.add('crisis-performance-mode');\n    \n    // Stop animations\n    document.documentElement.style.setProperty('--animation-duration', '0');\n    \n    // Defer non-critical network requests\n    window.dispatchEvent(new CustomEvent('performance:emergency'));\n    \n    logger.warn('Emergency performance optimizations activated', 'PerformanceMonitor');\n  }\n  \n  /**\n   * Alert for memory issues\n   */\n  private alertMemoryIssue(memoryMB: number): void {\n    logger.warn(`[Memory] High memory usage: ${memoryMB.toFixed(2)}MB`);\n    \n    // Trigger garbage collection hint\n    if ('gc' in window) {\n      (window as unknown).gc();\n    }\n    \n    // Report memory issue\n    this.reportMetric({\n      name: 'memory_warning',\n      value: memoryMB,\n      timestamp: Date.now(),\n      context: {\n        threshold: PERFORMANCE_THRESHOLDS.MAX_MEMORY_MB,\n      },\n    });\n  }\n  \n  /**\n   * Alert for potential memory leak\n   */\n  private alertMemoryLeak(growthRateMB: number): void {\n    logger.error(`[Memory] Potential memory leak detected! Growth rate: ${growthRateMB.toFixed(2)}MB/minute`);\n    \n    this.reportMetric({\n      name: 'memory_leak_detected',\n      value: growthRateMB,\n      timestamp: Date.now(),\n      context: {\n        history: this.memoryHistory,\n      },\n    });\n  }\n  \n  /**\n   * Alert for bundle size issues\n   */\n  private alertBundleSizeIssue(bundleName: string, sizeKB: number): void {\n    logger.warn(`[Bundle] Large bundle detected: ${bundleName} (${sizeKB.toFixed(2)}KB)`);\n    \n    this.reportMetric({\n      name: 'bundle_size_warning',\n      value: sizeKB,\n      timestamp: Date.now(),\n      context: {\n        bundle: bundleName,\n        threshold: PERFORMANCE_THRESHOLDS.CRITICAL_BUNDLE_SIZE,\n      },\n    });\n  }\n  \n  /**\n   * Record a performance metric\n   */\n  public recordMetric(name: string, value: number, context?: Record<string, any>): void {\n    const metric: PerformanceMetric = {\n      name,\n      value,\n      timestamp: Date.now(),\n      context: {\n        ...context,\n        sessionId: this.sessionId,\n        userId: this.userId,\n        isLowEndDevice: this.isLowEndDevice,\n        networkType: this.networkType,\n        url: window.location.pathname,\n      },\n    };\n    \n    // Store metric\n    if (!this.metrics.has(name)) {\n      this.metrics.set(name, []);\n    }\n    this.metrics.get(name)!.push(metric);\n    \n    // Add to report queue\n    this.reportQueue.push(metric);\n    \n    // Schedule batch reporting\n    this.scheduleReport();\n  }\n  \n  /**\n   * Report metric to analytics service\n   */\n  private reportMetric(metric: PerformanceMetric): void {\n    // Immediate reporting for critical metrics\n    if (metric.context?.severity === 'critical') {\n      this.sendMetrics([metric]);\n    } else {\n      this.reportQueue.push(metric);\n      this.scheduleReport();\n    }\n  }\n  \n  /**\n   * Schedule batch reporting of metrics\n   */\n  private scheduleReport(): void {\n    if (this.reportTimer) return;\n    \n    this.reportTimer = window.setTimeout(() => {\n      this.sendMetrics(this.reportQueue);\n      this.reportQueue = [];\n      this.reportTimer = null;\n    }, 5000); // Batch report every 5 seconds\n  }\n  \n  /**\n   * Send metrics to analytics service\n   */\n  private async sendMetrics(metrics: PerformanceMetric[]): Promise<void> {\n    // DISABLED: No external API calls - only local storage in production\n    if (metrics.length === 0) return;\n    \n    try {\n      // Production: Store locally only, no network calls\n      if (process.env.NODE_ENV === 'production') {\n        try {\n          const storedMetrics = localStorage.getItem('performance_metrics') || '[]';\n          const existingMetrics = JSON.parse(storedMetrics);\n          const updatedMetrics = [...existingMetrics, ...metrics].slice(-100);\n          localStorage.setItem('performance_metrics', JSON.stringify(updatedMetrics));\n          logger.debug('Metrics stored locally', 'PerformanceMonitor', { count: metrics.length });\n        } catch (localError) {\n          logger.debug('LocalStorage unavailable', 'PerformanceMonitor', { error: localError });\n        }\n        return; // Exit early - no network calls\n      }\n      \n      // Development: Console logging only\n      if (process.env.NODE_ENV === 'development') {\n        logger.info('Performance Metrics', 'PerformanceMonitor', metrics);\n      }\n    } catch {\n      logger.error('[Performance] Failed to process metrics:');\n    }\n  }\n  \n  /**\n   * Generate session ID\n   */\n  private generateSessionId(): string {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n  \n  /**\n   * Set user ID for metric tracking\n   */\n  public setUserId(userId: string): void {\n    this.userId = userId;\n  }\n  \n  /**\n   * Get performance summary\n   */\n  public getPerformanceSummary(): Record<string, any> {\n    const summary: Record<string, any> = {};\n    \n    for (const [name, metrics] of this.metrics.entries()) {\n      const values = metrics.map(m => m.value);\n      summary[name] = {\n        count: values.length,\n        min: Math.min(...values),\n        max: Math.max(...values),\n        avg: values.reduce((a, b) => a + b, 0) / values.length,\n        latest: values[values.length - 1],\n      };\n    }\n    \n    return summary;\n  }\n  \n  /**\n   * Clean up observers and timers\n   */\n  public destroy(): void {\n    // Clean up observers\n    for (const observer of this.observers.values()) {\n      observer.disconnect();\n    }\n    this.observers.clear();\n    \n    // Clear timers\n    if (this.reportTimer) {\n      clearTimeout(this.reportTimer);\n    }\n    \n    // Send remaining metrics\n    this.sendMetrics(this.reportQueue);\n  }\n\n  /**\n   * Get performance metrics for analysis\n   */\n  public getMetrics(): Map<string, PerformanceMetric[]> {\n    return new Map(this.metrics);\n  }\n\n  /**\n   * Start performance measurement\n   */\n  public measureStart(label: string): void {\n    performance.mark(`${label}-start`);\n  }\n\n  /**\n   * End performance measurement\n   */\n  public measureEnd(label: string): number | undefined {\n    const endMark = `${label}-end`;\n    const startMark = `${label}-start`;\n    \n    try {\n      performance.mark(endMark);\n      performance.measure(label, startMark, endMark);\n      \n      const measure = performance.getEntriesByName(label, 'measure')[0];\n      if (measure) {\n        this.recordMetric(label, measure.duration);\n        return measure.duration;\n      }\n    } catch {\n    logger.warn(`Failed to measure ${label}:`, error);\n    }\n    \n    return undefined;\n  }\n\n  /**\n   * Cleanup method for compatibility\n   */\n  public cleanup(): void {\n    this.destroy();\n  }\n}\n\n// Export singleton instance\nexport const performanceMonitor = new PerformanceMonitor();\n\n// Export additional instances for compatibility\nexport const __memoryMonitor = performanceMonitor;\nexport const __frameRateMonitor = performanceMonitor;\n\n// Export class for direct instantiation if needed\nexport { PerformanceMonitor };\n\n// Export types\nexport type { PerformanceMetric };\nexport { PERFORMANCE_THRESHOLDS };","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\pwa\\pwaManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\responsiveTest.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\runtimeGuards.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[809,812],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[809,812],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '../utils/logger';\n/**\n * Runtime Guards - Defensive Programming Patterns\n * Prevents common runtime errors and lexical declaration issues\n */\n\n// Safe variable accessor to prevent undefined access\nexport function safeAccess<T>(obj: unknown, path: string, defaultValue?: T): T | undefined {\n  try {\n    const keys = path.split('.');\n    let result = obj;\n    \n    for (const key of keys) {\n      if (result == null || typeof result !== 'object') {\n        return defaultValue;\n      }\n      result = result[key];\n    }\n    \n    return result !== undefined ? result : defaultValue;\n  } catch {\n    logger.warn('Safe access failed:', path, e);\n    return defaultValue;\n  }\n}\n\n// Safe function caller to prevent call stack issues\nexport function safeCall<T extends (...args: unknown[]) => any>(\n  fn: T | undefined | null,\n  defaultValue?: ReturnType<T>,\n  ...args: Parameters<T>\n): ReturnType<T> | undefined {\n  try {\n    if (typeof fn === 'function') {\n      return fn(...args);\n    }\n    return defaultValue;\n  } catch {\n    logger.error('Safe call failed:', e);\n    return defaultValue;\n  }\n}\n\n// Guard against temporal dead zone violations\nexport function initializeVariable<T>(\n  getter: () => T,\n  defaultValue: T,\n  varName?: string\n): T {\n  try {\n    const result = getter();\n    return result !== undefined ? result : defaultValue;\n  } catch {\n    if (e instanceof ReferenceError && e.message.includes('before initialization')) {\n      logger.warn(`Temporal dead zone detected for ${varName || 'variable'} })(), using default:`, defaultValue);\n      return defaultValue;\n    }\n    throw e; // Re-throw other errors\n  }\n}\n\n// Safe module loader to prevent circular dependency issues\nexport function safeImport<T>(\n  importPromise: Promise<T>,\n  fallback: T\n): Promise<T> {\n  return importPromise.catch((error) => {\n    logger.error('Module import failed, using fallback:', error);\n    return fallback;\n  });\n}\n\n// Global error handler setup\nexport function setupRuntimeGuards() {\n  // Prevent unhandled errors from crashing the app\n  window.addEventListener('error', (event) => {\n    logger.error('🚨 Runtime Error Caught:', {\n      message: event.message,\n      filename: event.filename,\n      lineno: event.lineno,\n      colno: event.colno,\n      error: event.error,\n      timestamp: new Date().toISOString()\n    });\n    \n    // Log to storage for analysis\n    try {\n      const errorLog = JSON.parse(localStorage.getItem('runtime_errors') || '[]');\n      errorLog.push({\n        type: 'script_error',\n        message: event.message,\n        filename: event.filename,\n        lineno: event.lineno,\n        colno: event.colno,\n        stack: event.error?.stack,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Keep only last 50 errors\n      const _recentErrors = errorLog.slice(-50);\n      localStorage.setItem('runtime_errors', JSON.stringify(_recentErrors));\n    } catch {\n      logger.warn('Failed to log runtime error: ', e);\n    }\n    \n    // Don't prevent default error handling\n    return false;\n  });\n  \n  // Prevent unhandled promise rejections\n  window.addEventListener('unhandledrejection', (event) => {\n    logger.error('🚨 Unhandled Promise Rejection:', {\n      reason: event.reason,\n      promise: event.promise,\n      timestamp: new Date().toISOString()\n    });\n    \n    // Log promise rejections\n    try {\n      const rejectionLog = JSON.parse(localStorage.getItem('promise_rejections') || '[]');\n      rejectionLog.push({\n        reason: event.reason?.toString(),\n        stack: event.reason?.stack,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Keep only last 30 rejections\n      const _recentRejections = rejectionLog.slice(-30);\n      localStorage.setItem('promise_rejections', JSON.stringify(_recentRejections));\n    } catch {\n    logger.warn('Failed to log promise rejection:', e);\n    }\n    \n    // Prevent the rejection from being logged to console\n    event.preventDefault();\n  });\n  \n  logger.info('✅ Runtime guards initialized');\n}\n\n// Memory leak prevention\nexport class MemoryLeakGuard {\n  private static instance: MemoryLeakGuard;\n  private observers: Set<unknown> = new Set();\n  private timers: Set<unknown> = new Set();\n  private listeners: Map<EventTarget, Map<string, EventListener>> = new Map();\n  \n  static getInstance(): MemoryLeakGuard {\n    if (!MemoryLeakGuard.instance) {\n      MemoryLeakGuard.instance = new MemoryLeakGuard();\n    }\n    return MemoryLeakGuard.instance;\n  }\n  \n  // Track observers for cleanup\n  trackObserver(observer: unknown) {\n    this.observers.add(_observer);\n    return observer;\n  }\n  \n  // Track timers for cleanup\n  trackTimer(_timerId: unknown) {\n    this.timers.add(_timerId);\n    return _timerId;\n  }\n  \n  // Track event listeners for cleanup\n  trackListener(element: EventTarget, event: string, listener: EventListener) {\n    if (!this.listeners.has(_element)) {\n      this.listeners.set(element, new Map());\n    }\n    this.listeners.get(_element)!.set(event, listener);\n  }\n  \n  // Clean up all tracked resources\n  cleanup() {\n    // Disconnect observers\n    this.observers.forEach(observer => {\n      try {\n        if (observer.disconnect) observer.disconnect();\n        if (observer.unobserve) observer.unobserve();\n      } catch {\n    logger.warn('Failed to disconnect observer:', e);\n      }\n    });\n    this.observers.clear();\n    \n    // Clear timers\n    this.timers.forEach(_timerId => {\n      try {\n        clearTimeout(_timerId);\n        clearInterval(_timerId);\n      } catch {\n    logger.warn('Failed to clear timer:', e);\n      }\n    });\n    this.timers.clear();\n    \n    // Remove event listeners\n    this.listeners.forEach((events, element) => {\n      events.forEach((listener, event) => {\n        try {\n          element.removeEventListener(event, listener);\n        } catch {\n    logger.warn('Failed to remove event listener:', e);\n        }\n      });\n    });\n    this.listeners.clear();\n  }\n}\n\n// Performance monitoring guard\nexport class PerformanceGuard {\n  private static metrics: Map<string, number> = new Map();\n  \n  static startMeasurement(name: string) {\n    this.metrics.set(name, performance.now());\n  }\n  \n  static endMeasurement(name: string, warnThreshold = 1000) {\n    const start = this.metrics.get(name);\n    if (_start) {\n      const duration = performance.now() - start;\n      this.metrics.delete(name);\n      \n      if (duration > warnThreshold) {\n        logger.warn(`⚠️ Performance warning: ${name} took ${duration.toFixed(2)}ms`);\n      }\n      \n      return duration;\n    }\n    return 0;\n  }\n}\n\n// Initialize guards when module loads\nif (typeof window !== 'undefined') {\n  setupRuntimeGuards();\n}\n\nexport default {\n  safeAccess,\n  safeCall,\n  initializeVariable,\n  safeImport,\n  setupRuntimeGuards,\n  MemoryLeakGuard,\n  PerformanceGuard\n};","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\supportiveLanguage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\workers\\chartProcessor.worker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
