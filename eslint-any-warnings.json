[{"filePath":"H:\\Astral Core\\CoreV4\\backend\\dist\\routes\\auth-simple.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\backend\\dist\\routes\\auth.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\backend\\dist\\routes\\crisis-simple.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\backend\\dist\\routes\\crisis.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\backend\\dist\\server-minimal.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\backend\\dist\\server.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\backend\\src\\routes\\auth-simple.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\backend\\src\\routes\\auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\backend\\src\\routes\\crisis-simple.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\backend\\src\\routes\\crisis.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\backend\\src\\server-minimal.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\backend\\src\\server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\continue-no-undef-fixes.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\count-errors.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\count-final.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\e2e\\crisis-flow.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4645,4648],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4645,4648],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// End-to-End Tests for Crisis Flow\r\nimport { test, expect } from '@playwright/test';\r\n\r\n// Crisis response must be under 200ms\r\nconst CRISIS_RESPONSE_THRESHOLD = 200;\r\n\r\ntest.describe('Crisis Intervention Flow', () => {\r\n  test.beforeEach(async ({ page }) => {\r\n    await page.goto('/');\r\n    // Wait for app to be fully loaded\r\n    await page.waitForSelector('[data-testid=\"app-ready\"]', { timeout: 5000 });\r\n  });\r\n\r\n  test('should display crisis button prominently on all pages', async ({ page }) => {\r\n    // Check crisis button on home page\r\n    const crisisButton = page.locator('[data-testid=\"crisis-button\"]');\r\n    await expect(crisisButton).toBeVisible();\r\n    await expect(crisisButton).toHaveCSS('position', 'fixed');\r\n    \r\n    // Navigate to different pages and verify button persists\r\n    const pages = ['/dashboard', '/wellness', '/community', '/professionals'];\r\n    \r\n    for (const route of pages) {\r\n      await page.goto(route);\r\n      await expect(crisisButton).toBeVisible();\r\n      \r\n      // Verify button is always accessible (z-index)\r\n      const zIndex = await crisisButton.evaluate(el => \r\n        window.getComputedStyle(el).zIndex\r\n      );\r\n      expect(parseInt(zIndex)).toBeGreaterThan(1000);\r\n    }\r\n  });\r\n\r\n  test('should respond to crisis trigger within 200ms', async ({ page }) => {\r\n    const crisisButton = page.locator('[data-testid=\"crisis-button\"]');\r\n    \r\n    // Measure response time\r\n    const startTime = Date.now();\r\n    await crisisButton.click();\r\n    \r\n    // Wait for crisis modal to appear\r\n    await page.waitForSelector('[data-testid=\"crisis-modal\"]');\r\n    const responseTime = Date.now() - startTime;\r\n    \r\n    expect(responseTime).toBeLessThan(CRISIS_RESPONSE_THRESHOLD);\r\n    \r\n    // Verify crisis resources are immediately visible\r\n    await expect(page.locator('text=988')).toBeVisible();\r\n    await expect(page.locator('text=Crisis Text Line')).toBeVisible();\r\n  });\r\n\r\n  test('should provide multiple crisis contact methods', async ({ page }) => {\r\n    await page.click('[data-testid=\"crisis-button\"]');\r\n    \r\n    // Phone hotline\r\n    const hotlineLink = page.locator('a[href=\"tel:988\"]');\r\n    await expect(hotlineLink).toBeVisible();\r\n    await expect(hotlineLink).toHaveText(/988/);\r\n    \r\n    // Text support\r\n    const textSupport = page.locator('text=Text HOME to 741741');\r\n    await expect(textSupport).toBeVisible();\r\n    \r\n    // Online chat option\r\n    const chatOption = page.locator('[data-testid=\"crisis-chat\"]');\r\n    await expect(chatOption).toBeVisible();\r\n    \r\n    // Local emergency resources\r\n    const localResources = page.locator('[data-testid=\"local-resources\"]');\r\n    await expect(localResources).toBeVisible();\r\n  });\r\n\r\n  test('should work offline with cached crisis resources', async ({ page, context }) => {\r\n    // Load page first to cache resources\r\n    await page.goto('/');\r\n    await page.click('[data-testid=\"crisis-button\"]');\r\n    await page.click('[data-testid=\"crisis-close\"]');\r\n    \r\n    // Go offline\r\n    await context.setOffline(true);\r\n    \r\n    // Crisis button should still work\r\n    await page.click('[data-testid=\"crisis-button\"]');\r\n    \r\n    // Offline crisis resources should be available\r\n    await expect(page.locator('text=988')).toBeVisible();\r\n    await expect(page.locator('text=Offline Resources Available')).toBeVisible();\r\n    \r\n    // Verify cached resources\r\n    const resources = await page.locator('[data-testid=\"offline-resources\"]').textContent();\r\n    expect(resources).toContain('988');\r\n    expect(resources).toContain('741741');\r\n  });\r\n\r\n  test('should alert professionals when crisis is triggered', async ({ page }) => {\r\n    // Login as a user with professional support enabled\r\n    await page.goto('/login');\r\n    await page.fill('[name=\"email\"]', 'patient@example.com');\r\n    await page.fill('[name=\"password\"]', 'Test123!');\r\n    await page.click('[type=\"submit\"]');\r\n    \r\n    await page.waitForURL('/dashboard');\r\n    \r\n    // Trigger crisis\r\n    await page.click('[data-testid=\"crisis-button\"]');\r\n    \r\n    // Verify professional alert notification\r\n    await expect(page.locator('text=Professional support has been notified')).toBeVisible();\r\n    \r\n    // Check for professional response indicator\r\n    await expect(page.locator('[data-testid=\"professional-responding\"]')).toBeVisible();\r\n  });\r\n\r\n  test('should track crisis events for safety monitoring', async ({ page }) => {\r\n    // Enable analytics tracking\r\n    await page.evaluate(() => {\r\n      window.localStorage.setItem('analytics_consent', 'true');\r\n    });\r\n    \r\n    // Intercept analytics calls\r\n    const analyticsRequests: any[] = [];\r\n    await page.route('**/api/analytics/event', async route => {\r\n      const request = route.request();\r\n      analyticsRequests.push(await request.postDataJSON());\r\n      await route.fulfill({ status: 200, body: '{\"tracked\": true}' });\r\n    });\r\n    \r\n    // Trigger crisis\r\n    await page.click('[data-testid=\"crisis-button\"]');\r\n    \r\n    // Verify analytics event was sent\r\n    await page.waitForTimeout(100);\r\n    const crisisEvent = analyticsRequests.find(r => r.category === 'crisis');\r\n    expect(crisisEvent).toBeDefined();\r\n    expect(crisisEvent.action).toBe('button_clicked');\r\n    expect(crisisEvent.timestamp).toBeDefined();\r\n  });\r\n\r\n  test('should provide crisis text alternatives for accessibility', async ({ page }) => {\r\n    await page.click('[data-testid=\"crisis-button\"]');\r\n    \r\n    // Check for screen reader announcements\r\n    const ariaLive = page.locator('[aria-live=\"assertive\"]');\r\n    await expect(ariaLive).toContainText(/crisis support/i);\r\n    \r\n    // Verify all crisis options have text alternatives\r\n    const images = page.locator('[data-testid=\"crisis-modal\"] img');\r\n    const imageCount = await images.count();\r\n    \r\n    for (let i = 0; i < imageCount; i++) {\r\n      const img = images.nth(i);\r\n      const altText = await img.getAttribute('alt');\r\n      expect(altText).toBeTruthy();\r\n    }\r\n    \r\n    // Check keyboard navigation\r\n    await page.keyboard.press('Tab');\r\n    const focusedElement = await page.evaluate(() => document.activeElement?.getAttribute('data-testid'));\r\n    expect(focusedElement).toBeTruthy();\r\n  });\r\n\r\n  test('should handle crisis escalation workflow', async ({ page }) => {\r\n    await page.click('[data-testid=\"crisis-button\"]');\r\n    \r\n    // Initial self-help resources\r\n    await expect(page.locator('[data-testid=\"self-help-resources\"]')).toBeVisible();\r\n    \r\n    // Escalate to professional support\r\n    await page.click('[data-testid=\"need-more-help\"]');\r\n    await expect(page.locator('[data-testid=\"professional-options\"]')).toBeVisible();\r\n    \r\n    // Further escalate to emergency\r\n    await page.click('[data-testid=\"emergency-help\"]');\r\n    await expect(page.locator('[data-testid=\"emergency-resources\"]')).toBeVisible();\r\n    await expect(page.locator('text=Call 911')).toBeVisible();\r\n  });\r\n\r\n  test('should maintain crisis state across page navigation', async ({ page }) => {\r\n    // Trigger crisis mode\r\n    await page.click('[data-testid=\"crisis-button\"]');\r\n    await page.click('[data-testid=\"activate-crisis-mode\"]');\r\n    \r\n    // Navigate to different page\r\n    await page.goto('/wellness');\r\n    \r\n    // Crisis mode should persist\r\n    await expect(page.locator('[data-testid=\"crisis-mode-active\"]')).toBeVisible();\r\n    \r\n    // Crisis resources should remain easily accessible\r\n    const crisisBar = page.locator('[data-testid=\"crisis-resource-bar\"]');\r\n    await expect(crisisBar).toBeVisible();\r\n    await expect(crisisBar).toContainText('988');\r\n  });\r\n\r\n  test('should validate crisis response on mobile devices', async ({ _page, browser }) => {\r\n    // Create mobile context\r\n    const iPhone = {\r\n      viewport: { width: 375, height: 667 },\r\n      userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)',\r\n      hasTouch: true,\r\n      isMobile: true,\r\n    };\r\n    \r\n    const context = await browser.newContext(iPhone);\r\n    const mobilePage = await context.newPage();\r\n    \r\n    await mobilePage.goto('/');\r\n    \r\n    // Crisis button should be thumb-reachable\r\n    const crisisButton = mobilePage.locator('[data-testid=\"crisis-button\"]');\r\n    const buttonBox = await crisisButton.boundingBox();\r\n    \r\n    // Button should be in lower portion of screen for thumb reach\r\n    expect(buttonBox?.y).toBeGreaterThan(400);\r\n    \r\n    // Minimum touch target size (44x44 pixels)\r\n    expect(buttonBox?.width).toBeGreaterThanOrEqual(44);\r\n    expect(buttonBox?.height).toBeGreaterThanOrEqual(44);\r\n    \r\n    // Test touch interaction\r\n    await crisisButton.tap();\r\n    await expect(mobilePage.locator('[data-testid=\"crisis-modal\"]')).toBeVisible();\r\n    \r\n    await context.close();\r\n  });\r\n});\r\n\r\ntest.describe('Crisis Recovery and Follow-up', () => {\r\n  test('should provide post-crisis check-in', async ({ page }) => {\r\n    // Simulate crisis event\r\n    await page.goto('/');\r\n    await page.click('[data-testid=\"crisis-button\"]');\r\n    await page.click('[data-testid=\"crisis-resolved\"]');\r\n    \r\n    // Wait for follow-up prompt (simulated delay)\r\n    await page.waitForTimeout(2000);\r\n    \r\n    // Check-in notification should appear\r\n    await expect(page.locator('[data-testid=\"crisis-checkin\"]')).toBeVisible();\r\n    await expect(page.locator('text=How are you feeling now?')).toBeVisible();\r\n    \r\n    // Provide feedback\r\n    await page.click('[data-testid=\"feeling-better\"]');\r\n    \r\n    // Verify support resources are offered\r\n    await expect(page.locator('[data-testid=\"follow-up-resources\"]')).toBeVisible();\r\n  });\r\n\r\n  test('should save crisis intervention history for professionals', async ({ page }) => {\r\n    // Login as professional\r\n    await page.goto('/login');\r\n    await page.fill('[name=\"email\"]', 'professional@example.com');\r\n    await page.fill('[name=\"password\"]', 'Test123!');\r\n    await page.click('[type=\"submit\"]');\r\n    \r\n    await page.goto('/professional/dashboard');\r\n    \r\n    // View crisis interventions\r\n    await page.click('[data-testid=\"crisis-interventions\"]');\r\n    \r\n    // Verify intervention history is displayed\r\n    const interventions = page.locator('[data-testid=\"intervention-item\"]');\r\n    await expect(interventions).toHaveCount(3); // Based on mock data\r\n    \r\n    // Check intervention details\r\n    await interventions.first().click();\r\n    await expect(page.locator('[data-testid=\"intervention-details\"]')).toBeVisible();\r\n    await expect(page.locator('text=Response Time')).toBeVisible();\r\n    await expect(page.locator('text=Outcome')).toBeVisible();\r\n  });\r\n});\r\n\r\ntest.describe('Crisis System Performance', () => {\r\n  test('should handle multiple simultaneous crisis triggers', async ({ browser }) => {\r\n    const contexts = [];\r\n    const pages = [];\r\n    \r\n    // Create 10 concurrent users\r\n    for (let i = 0; i < 10; i++) {\r\n      const context = await browser.newContext();\r\n      const page = await context.newPage();\r\n      contexts.push(context);\r\n      pages.push(page);\r\n      await page.goto('/');\r\n    }\r\n    \r\n    // Trigger crisis simultaneously\r\n    const promises = pages.map(async page => {\r\n      const startTime = Date.now();\r\n      await page.click('[data-testid=\"crisis-button\"]');\r\n      await page.waitForSelector('[data-testid=\"crisis-modal\"]');\r\n      return Date.now() - startTime;\r\n    });\r\n    \r\n    const responseTimes = await Promise.all(promises);\r\n    \r\n    // All responses should be under threshold\r\n    responseTimes.forEach(time => {\r\n      expect(time).toBeLessThan(CRISIS_RESPONSE_THRESHOLD * 2); // Allow some overhead for concurrent requests\r\n    });\r\n    \r\n    // Cleanup\r\n    for (const context of contexts) {\r\n      await context.close();\r\n    }\r\n  });\r\n\r\n  test('should prioritize crisis requests over other operations', async ({ page }) => {\r\n    // Start a heavy operation\r\n    await page.goto('/analytics');\r\n    await page.click('[data-testid=\"generate-report\"]'); // Long-running operation\r\n    \r\n    // Immediately trigger crisis\r\n    const startTime = Date.now();\r\n    await page.click('[data-testid=\"crisis-button\"]');\r\n    await page.waitForSelector('[data-testid=\"crisis-modal\"]');\r\n    const responseTime = Date.now() - startTime;\r\n    \r\n    // Crisis should interrupt and respond quickly\r\n    expect(responseTime).toBeLessThan(CRISIS_RESPONSE_THRESHOLD);\r\n    \r\n    // Verify heavy operation was paused\r\n    await expect(page.locator('text=Report generation paused')).toBeVisible();\r\n  });\r\n});","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\e2e\\crisis-intervention.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":282,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":282,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9732,9735],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9732,9735],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":296,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":296,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10325,10328],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10325,10328],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { test, expect, Page } from '@playwright/test';\r\nimport AxeBuilder from '@axe-core/playwright';\r\n\r\n/**\r\n * E2E Tests for Crisis Intervention Flow\r\n * Critical path testing for mental health emergencies\r\n */\r\n\r\ntest.describe('Crisis Intervention E2E', () => {\r\n  let page: Page;\r\n\r\n  test.beforeEach(async ({ page: testPage }) => {\r\n    page = testPage;\r\n    await page.goto('/');\r\n    \r\n    // Set up performance monitoring\r\n    await page.evaluateOnNewDocument(() => {\r\n      window.performanceMarks = new Map();\r\n      window.markPerformance = (name: string) => {\r\n        window.performanceMarks.set(name, performance.now());\r\n      };\r\n    });\r\n  });\r\n\r\n  test('Crisis button responds within 200ms requirement', async () => {\r\n    // Navigate to dashboard\r\n    await page.goto('/dashboard');\r\n    \r\n    // Start performance measurement\r\n    await page.evaluate(() => window.markPerformance('crisis-start'));\r\n    \r\n    // Click crisis button\r\n    await page.click('button:has-text(\"Crisis Help\")', { timeout: 1000 });\r\n    \r\n    // Wait for crisis modal\r\n    await expect(page.locator('text=Crisis Resources')).toBeVisible({ timeout: 200 });\r\n    \r\n    // Measure response time\r\n    const responseTime = await page.evaluate(() => {\r\n      window.markPerformance('crisis-end');\r\n      const start = window.performanceMarks.get('crisis-start');\r\n      const end = window.performanceMarks.get('crisis-end');\r\n      return end - start;\r\n    });\r\n    \r\n    expect(responseTime).toBeLessThan(200);\r\n  });\r\n\r\n  test('Complete crisis intervention flow', async () => {\r\n    await page.goto('/dashboard');\r\n    \r\n    // Step 1: User indicates crisis\r\n    await page.click('button:has-text(\"Crisis Help\")');\r\n    \r\n    // Step 2: Crisis resources should appear immediately\r\n    await expect(page.locator('text=988')).toBeVisible();\r\n    await expect(page.locator('text=Crisis Text Line')).toBeVisible();\r\n    await expect(page.locator('text=Text HOME to 741741')).toBeVisible();\r\n    \r\n    // Step 3: Verify professional notification\r\n    await expect(page.locator('text=Professional support notified')).toBeVisible({ timeout: 5000 });\r\n    \r\n    // Step 4: Test hotline link\r\n    const [popup] = await Promise.all([\r\n      page.waitForEvent('popup'),\r\n      page.click('a[href^=\"tel:988\"]')\r\n    ]);\r\n    \r\n    // Verify tel: protocol handling\r\n    expect(popup).toBeDefined();\r\n  });\r\n\r\n  test('Crisis resources remain available offline', async () => {\r\n    await page.goto('/dashboard');\r\n    \r\n    // Go offline\r\n    await page.context().setOffline(true);\r\n    \r\n    // Click crisis button\r\n    await page.click('button:has-text(\"Crisis Help\")');\r\n    \r\n    // Offline resources should still be available\r\n    await expect(page.locator('text=Offline Crisis Resources')).toBeVisible();\r\n    await expect(page.locator('text=988')).toBeVisible();\r\n    await expect(page.locator('text=Text HOME to 741741')).toBeVisible();\r\n    \r\n    // Go back online\r\n    await page.context().setOffline(false);\r\n  });\r\n\r\n  test('Low mood triggers crisis support automatically', async () => {\r\n    await page.goto('/wellness/mood');\r\n    \r\n    // Set very low mood (crisis level)\r\n    const slider = page.locator('input[type=\"range\"]');\r\n    await slider.fill('2');\r\n    \r\n    // Add concerning notes\r\n    await page.fill('textarea[placeholder*=\"Add notes\"]', 'Feeling hopeless');\r\n    \r\n    // Submit mood\r\n    await page.click('button:has-text(\"Log Mood\")');\r\n    \r\n    // Crisis support should be triggered\r\n    await expect(page.locator('text=Crisis Support Available')).toBeVisible();\r\n    await expect(page.locator('text=988')).toBeVisible();\r\n  });\r\n\r\n  test('Crisis intervention is keyboard accessible', async () => {\r\n    await page.goto('/dashboard');\r\n    \r\n    // Navigate to crisis button using keyboard\r\n    await page.keyboard.press('Tab');\r\n    await page.keyboard.press('Tab');\r\n    await page.keyboard.press('Tab');\r\n    \r\n    // Activate crisis button with Enter\r\n    await page.keyboard.press('Enter');\r\n    \r\n    // Modal should be accessible\r\n    await expect(page.locator('text=Crisis Resources')).toBeVisible();\r\n    \r\n    // Tab through resources\r\n    await page.keyboard.press('Tab');\r\n    const focusedElement = await page.evaluate(() => document.activeElement?.tagName);\r\n    expect(focusedElement).toBeTruthy();\r\n    \r\n    // Close with Escape\r\n    await page.keyboard.press('Escape');\r\n    await expect(page.locator('text=Crisis Resources')).not.toBeVisible();\r\n  });\r\n\r\n  test('Crisis support works on mobile devices', async ({ browser }) => {\r\n    // Create mobile context\r\n    const context = await browser.newContext({\r\n      ...devices['iPhone 12'],\r\n      permissions: ['geolocation'],\r\n      geolocation: { latitude: 37.7749, longitude: -122.4194 }\r\n    });\r\n    \r\n    const mobilePage = await context.newPage();\r\n    await mobilePage.goto('/dashboard');\r\n    \r\n    // Test touch interaction\r\n    await mobilePage.tap('button:has-text(\"Crisis Help\")');\r\n    \r\n    // Resources should be mobile-optimized\r\n    await expect(mobilePage.locator('text=988')).toBeVisible();\r\n    \r\n    // Test tel: link on mobile\r\n    const telLink = mobilePage.locator('a[href^=\"tel:988\"]');\r\n    await expect(telLink).toHaveAttribute('href', 'tel:988');\r\n    \r\n    await context.close();\r\n  });\r\n\r\n  test('Crisis data is encrypted and secure', async () => {\r\n    await page.goto('/dashboard');\r\n    \r\n    // Monitor network requests\r\n    const encryptedRequests: boolean[] = [];\r\n    \r\n    page.on('request', request => {\r\n      if (request.url().includes('/api/crisis')) {\r\n        const headers = request.headers();\r\n        encryptedRequests.push(headers['content-type'] === 'application/json');\r\n      }\r\n    });\r\n    \r\n    // Trigger crisis\r\n    await page.click('button:has-text(\"Crisis Help\")');\r\n    \r\n    // Wait for API call\r\n    await page.waitForTimeout(1000);\r\n    \r\n    // Check localStorage for encrypted data\r\n    const storageData = await page.evaluate(() => {\r\n      const data = localStorage.getItem('crisis_session');\r\n      return data ? !data.startsWith('{') : false; // Should not be plain JSON\r\n    });\r\n    \r\n    expect(storageData).toBeTruthy();\r\n  });\r\n\r\n  test('Professional connection during crisis', async () => {\r\n    await page.goto('/dashboard');\r\n    \r\n    // Trigger crisis\r\n    await page.click('button:has-text(\"Crisis Help\")');\r\n    \r\n    // Wait for professional notification\r\n    await expect(page.locator('text=Professional support notified')).toBeVisible();\r\n    \r\n    // Check for connection status\r\n    const connectionStatus = await page.locator('[data-testid=\"professional-status\"]');\r\n    \r\n    if (await connectionStatus.isVisible()) {\r\n      const statusText = await connectionStatus.textContent();\r\n      expect(['Available', 'Connecting', 'In Queue']).toContain(statusText);\r\n    }\r\n  });\r\n\r\n  test('Crisis intervention meets WCAG 2.1 AA standards', async () => {\r\n    await page.goto('/dashboard');\r\n    \r\n    // Open crisis modal\r\n    await page.click('button:has-text(\"Crisis Help\")');\r\n    await page.waitForSelector('text=Crisis Resources');\r\n    \r\n    // Run accessibility scan\r\n    const accessibilityScanResults = await new AxeBuilder({ page })\r\n      .withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])\r\n      .analyze();\r\n    \r\n    expect(accessibilityScanResults.violations).toEqual([]);\r\n  });\r\n\r\n  test('Crisis follow-up is scheduled after intervention', async () => {\r\n    await page.goto('/dashboard');\r\n    \r\n    // Trigger and complete crisis intervention\r\n    await page.click('button:has-text(\"Crisis Help\")');\r\n    await expect(page.locator('text=Crisis Resources')).toBeVisible();\r\n    \r\n    // Close modal\r\n    await page.click('button:has-text(\"Close\")');\r\n    \r\n    // Check for follow-up scheduling\r\n    const followUpScheduled = await page.evaluate(() => {\r\n      return sessionStorage.getItem('crisis_follow_up') !== null;\r\n    });\r\n    \r\n    expect(followUpScheduled).toBeTruthy();\r\n    \r\n    // Verify follow-up reminder appears\r\n    await page.reload();\r\n    await expect(page.locator('text=Check-in scheduled')).toBeVisible({ timeout: 5000 });\r\n  });\r\n\r\n  test('Crisis history is tracked for pattern detection', async () => {\r\n    await page.goto('/wellness/mood');\r\n    \r\n    // Log multiple low moods\r\n    for (let i = 0; i < 3; i++) {\r\n      const slider = page.locator('input[type=\"range\"]');\r\n      await slider.fill('3');\r\n      await page.click('button:has-text(\"Log Mood\")');\r\n      await page.waitForTimeout(500);\r\n    }\r\n    \r\n    // Pattern warning should appear\r\n    await expect(page.locator('text=mood has been declining')).toBeVisible();\r\n    await expect(page.locator('text=Consider reaching out')).toBeVisible();\r\n  });\r\n\r\n  test('Multi-language crisis support', async () => {\r\n    // Set Spanish language preference\r\n    await page.goto('/settings');\r\n    await page.selectOption('select[name=\"language\"]', 'es');\r\n    await page.click('button:has-text(\"Save\")');\r\n    \r\n    // Navigate to dashboard\r\n    await page.goto('/dashboard');\r\n    \r\n    // Crisis button should be in Spanish\r\n    const crisisButton = await page.locator('button:has-text(\"Ayuda de Crisis\")');\r\n    \r\n    if (await crisisButton.isVisible()) {\r\n      await crisisButton.click();\r\n      \r\n      // Resources should include Spanish options\r\n      await expect(page.locator('text=988')).toBeVisible();\r\n      await expect(page.locator('text=Línea de Crisis')).toBeVisible();\r\n    }\r\n  });\r\n\r\n  test('Performance monitoring during crisis', async () => {\r\n    await page.goto('/dashboard');\r\n    \r\n    // Collect performance metrics\r\n    const metrics = await page.evaluate(() => {\r\n      const navigation = performance.getEntriesByType('navigation')[0] as any;\r\n      return {\r\n        domContentLoaded: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,\r\n        loadComplete: navigation.loadEventEnd - navigation.loadEventStart,\r\n      };\r\n    });\r\n    \r\n    // Page should load quickly\r\n    expect(metrics.domContentLoaded).toBeLessThan(1000);\r\n    expect(metrics.loadComplete).toBeLessThan(2000);\r\n    \r\n    // Measure crisis button interaction\r\n    const interactionMetrics = await page.evaluate(async () => {\r\n      const start = performance.now();\r\n      (document.querySelector('button:has-text(\"Crisis Help\")') as any)?.click();\r\n      await new Promise(resolve => setTimeout(resolve, 100));\r\n      const end = performance.now();\r\n      return end - start;\r\n    });\r\n    \r\n    expect(interactionMetrics).toBeLessThan(200);\r\n  });\r\n});\r\n\r\n// Declare global window extensions for TypeScript\r\ndeclare global {\r\n  interface Window {\r\n    performanceMarks: Map<string, number>;\r\n    markPerformance: (name: string) => void;\r\n  }\r\n}\r\n\r\nconst devices = {\r\n  'iPhone 12': {\r\n    viewport: { width: 390, height: 844 },\r\n    userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15',\r\n    deviceScaleFactor: 3,\r\n    isMobile: true,\r\n    hasTouch: true,\r\n  }\r\n};","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\final-comprehensive-fix.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\final-eslint-fix.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\fix-all-eslint-errors.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\fix-catch-errors.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\fix-undefined-errors.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\fix-unused-vars.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\public\\comprehensive-lexical-fix.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\public\\emergency-app.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\public\\emergency-fix-E.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\public\\emergency-react-init.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\public\\react-diagnostic.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\public\\runtime-debug.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\public\\service-worker.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\public\\sw-enhanced.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\scripts\\fix-eslint-issues.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\ErrorBoundary.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":136,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":136,"endColumn":20},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":387,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":387,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":391,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":391,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13732,13735],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13732,13735],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":409,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":409,"endColumn":38},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":423,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":423,"endColumn":33},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":430,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":430,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":455,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":455,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":478,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":478,"endColumn":20}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unified Error Boundary Component\n * Combines crisis-aware features, multiple fallback options, and comprehensive error handling\n * Ensures users never lose access to critical crisis intervention resources during errors\n */\n\nimport React, { Component, ErrorInfo, ReactNode } from 'react';\nimport { AlertTriangle, Phone, MessageCircle, Home, RefreshCw } from 'lucide-react';\nimport { logError } from '../utils/logger';\nimport { logger } from '../services/logging/logger';\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error: Error | null;\n  errorInfo: ErrorInfo | null;\n  errorId: string;\n}\n\ninterface ErrorBoundaryProps {\n  children: ReactNode;\n  fallback?: ReactNode;\n  FallbackComponent?: React.ComponentType<unknown>;\n  fallbackRender?: (props: { error: Error; resetErrorBoundary: () => void }) => ReactNode;\n  onError?: (error: Error, errorInfo: ErrorInfo) => void;\n  onReset?: () => void;\n  showCrisisResources?: boolean;\n}\n\nexport class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  private retryCount = 0;\n  private maxRetries = 3;\n\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    \n    this.state = {\n      hasError: false,\n      error: null,\n      errorInfo: null,\n      errorId: this.generateErrorId()\n    };\n  }\n\n  private generateErrorId(): string {\n    return `err_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  static getDerivedStateFromError(error: Error): Partial<ErrorBoundaryState> {\n    return {\n      hasError: true,\n      error,\n      errorId: `err_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n    };\n  }\n\n  override componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    // Update state with error info\n    this.setState({ error, errorInfo });\n    \n    // Log error with multiple logging systems\n    logError('Component error caught by ErrorBoundary', 'ErrorBoundary', { error, errorInfo });\n    \n    // Log to crisis-aware logging system if available\n    if (logger?.logCrisisIntervention) {\n      logger.logCrisisIntervention('component_error', undefined, {\n        error: error.message,\n        component: errorInfo.componentStack,\n        severity: 'high',\n        emergency_resources_available: true,\n        errorId: this.state.errorId\n      });\n    }\n\n    // Log error details for debugging\n    logger.error('🚨 ERROR BOUNDARY CAUGHT:', {\n      error: error.message,\n      stack: error.stack,\n      componentStack: errorInfo.componentStack,\n      errorId: this.state.errorId,\n      timestamp: new Date().toISOString(),\n      userAgent: navigator.userAgent,\n      url: window.location.href\n    });\n\n    // Send error to monitoring service\n    this.reportError(error, errorInfo);\n\n    // Call custom error handler\n    if (this.props.onError) {\n      this.props.onError(error, errorInfo);\n    }\n  }\n\n  private reportError = async (error: Error, errorInfo: ErrorInfo) => {\n    try {\n      // Store error in localStorage for analysis\n      const _errorReport = {\n        errorId: this.state.errorId,\n        message: error.message,\n        stack: error.stack,\n        componentStack: errorInfo.componentStack,\n        timestamp: new Date().toISOString(),\n        url: window.location.href,\n        userAgent: navigator.userAgent\n      };\n\n      localStorage.setItem(`error_${this.state.errorId}`, JSON.stringify(_errorReport));\n\n      // Send to monitoring service in production\n      if (import.meta.env.PROD) {\n        try {\n          fetch('/api/monitoring/crisis-error', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(_errorReport),\n          }).catch(() => {\n            // Fail silently - don't let monitoring failures affect crisis support\n          });\n        } catch {\n          // Fail silently\n        }\n      }\n\n      // Send to Sentry if available\n      if ((window as unknown).Sentry) {\n        (window as unknown).Sentry.captureException(error, {\n          tags: {\n            component: 'ErrorBoundary',\n            errorId: this.state.errorId\n          },\n          extra: {\n            componentStack: errorInfo.componentStack\n          }\n        });\n      }\n    } catch (_error) {\n      logger.error('Failed to report error');\n    }\n  };\n\n  private handleReset = () => {\n    if (this.retryCount < this.maxRetries) {\n      this.retryCount++;\n      logger.info(`Retrying... (${this.retryCount}/${this.maxRetries})`, 'ErrorBoundary');\n      \n      this.setState({\n        hasError: false,\n        error: null,\n        errorInfo: null,\n        errorId: this.generateErrorId()\n      });\n      \n      // Call onReset callback if provided\n      if (this.props.onReset) {\n        this.props.onReset();\n      }\n    } else {\n      logger.error('❌ Maximum retry attempts reached');\n    }\n  };\n\n  private handleReload = () => {\n    window.location.reload();\n  };\n\n  private handleEmergencyCall = (number: string) => {\n    if (logger?.logCrisisIntervention) {\n      logger.logCrisisIntervention('emergency_call_from_error_boundary', undefined, {\n        number,\n        error_context: this.state.error?.message\n      });\n    }\n    \n    // Try to initiate call\n    window.open(`tel:${number}`, '_self');\n  };\n\n  private renderCrisisResources = () => (\n    <div className=\"bg-red-50 border-l-4 border-red-500 p-4 mb-6\">\n      <div className=\"flex items-center mb-3\">\n        <AlertTriangle className=\"h-6 w-6 text-red-600 mr-2\" />\n        <h3 className=\"text-lg font-semibold text-red-800\">\n          Emergency Resources Available\n        </h3>\n      </div>\n      \n      <p className=\"text-red-700 mb-4\">\n        Even though there&apos;s a technical issue, your safety is our priority. \n        These resources are always available:\n      </p>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n        <button\n          onClick={() => this.handleEmergencyCall('911')}\n          className=\"flex items-center justify-center px-4 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors\"\n        >\n          <Phone className=\"h-5 w-5 mr-2\" />\n          Emergency: 911\n        </button>\n        \n        <button\n          onClick={() => this.handleEmergencyCall('988')}\n          className=\"flex items-center justify-center px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n        >\n          <Phone className=\"h-5 w-5 mr-2\" />\n          Crisis Hotline: 988\n        </button>\n        \n        <button\n          onClick={() => window.open('sms:741741', '_self')}\n          className=\"flex items-center justify-center px-4 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\n        >\n          <MessageCircle className=\"h-5 w-5 mr-2\" />\n          Crisis Text: 741741\n        </button>\n        \n        <button\n          onClick={() => window.location.href = '/crisis'}\n          className=\"flex items-center justify-center px-4 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors\"\n        >\n          <AlertTriangle className=\"h-5 w-5 mr-2\" />\n          Crisis Resources\n        </button>\n      </div>\n    </div>\n  );\n\n  private renderErrorUI() {\n    const { error, errorInfo, errorId } = this.state;\n    const canRetry = this.retryCount < this.maxRetries;\n\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-red-50 to-orange-50 p-4\">\n        <div className=\"max-w-2xl w-full bg-white rounded-2xl shadow-xl overflow-hidden\">\n          <div className=\"bg-gradient-to-r from-red-600 to-orange-600 px-6 py-4\">\n            <div className=\"flex items-center\">\n              <AlertTriangle className=\"h-8 w-8 text-white mr-3\" />\n              <div>\n                <h1 className=\"text-xl font-bold text-white\">\n                  Technical Issue Detected\n                </h1>\n                <p className=\"text-red-100\">\n                  Your safety resources remain available\n                </p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"p-6\">\n            {(this.props.showCrisisResources !== false) && this.renderCrisisResources()}\n            \n            <div className=\"bg-gray-50 rounded-lg p-4 mb-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                What happened?\n              </h3>\n              <p className=\"text-gray-700 mb-3\">\n                A component on this page encountered an unexpected error. \n                This doesn&apos;t affect the safety and crisis support features of the application.\n              </p>\n              \n              {import.meta.env.DEV && error && (\n                <details className=\"mt-4\">\n                  <summary className=\"cursor-pointer text-sm text-gray-600 hover:text-gray-800 mb-2\">\n                    Technical Details (Development Mode)\n                  </summary>\n                  <div className=\"bg-gray-100 rounded p-3 text-xs font-mono overflow-auto max-h-48\">\n                    <div className=\"text-red-600 font-semibold mb-2\">Error:</div>\n                    <div className=\"mb-3\">{error.message}</div>\n                    {error.stack && (\n                      <>\n                        <div className=\"text-red-600 font-semibold mb-2\">Stack Trace:</div>\n                        <pre className=\"whitespace-pre-wrap\">{error.stack}</pre>\n                      </>\n                    )}\n                    {errorInfo?.componentStack && (\n                      <>\n                        <div className=\"text-red-600 font-semibold mb-2 mt-3\">Component Stack:</div>\n                        <pre className=\"whitespace-pre-wrap\">{errorInfo.componentStack}</pre>\n                      </>\n                    )}\n                  </div>\n                </details>\n              )}\n              \n              <div className=\"text-sm text-gray-500 mt-2\">\n                Error ID: {errorId}\n              </div>\n            </div>\n\n            <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n              {canRetry && (\n                <button\n                  onClick={this.handleReset}\n                  className=\"flex items-center justify-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n                >\n                  <RefreshCw className=\"h-5 w-5 mr-2\" />\n                  Try Again ({this.maxRetries - this.retryCount} left)\n                </button>\n              )}\n              \n              <button\n                onClick={() => window.location.href = '/'}\n                className=\"flex items-center justify-center px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors\"\n              >\n                <Home className=\"h-5 w-5 mr-2\" />\n                Go to Home\n              </button>\n              \n              <button\n                onClick={this.handleReload}\n                className=\"flex items-center justify-center px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\n              >\n                <RefreshCw className=\"h-5 w-5 mr-2\" />\n                Reload Page\n              </button>\n              \n              <button\n                onClick={() => window.location.href = '/crisis'}\n                className=\"flex items-center justify-center px-6 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors\"\n              >\n                <AlertTriangle className=\"h-5 w-5 mr-2\" />\n                Crisis Support\n              </button>\n            </div>\n            \n            <div className=\"mt-6 pt-6 border-t border-gray-200\">\n              <p className=\"text-sm text-gray-600 text-center\">\n                If you&apos;re experiencing a mental health emergency, please contact emergency services immediately. \n                Technical issues never prevent access to crisis support resources.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  override render() {\n    if (this.state.hasError) {\n      // Support react-error-boundary fallbackRender prop\n      if (this.props.fallbackRender && this.state.error) {\n        return this.props.fallbackRender({\n          error: this.state.error,\n          resetErrorBoundary: this.handleReset\n        });\n      }\n\n      // Support react-error-boundary FallbackComponent prop\n      if (this.props.FallbackComponent && this.state.error) {\n        const FallbackComponent = this.props.FallbackComponent;\n        return <FallbackComponent error={this.state.error} resetErrorBoundary={this.handleReset} />;\n      }\n\n      // Support our own fallback prop\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      // Render default error UI with crisis resources\n      return this.renderErrorUI();\n    }\n\n    return this.props.children;\n  }\n}\n\n// Export alias for backward compatibility\nexport class EmergencyErrorBoundary extends ErrorBoundary {}\nexport class CrisisErrorBoundary extends ErrorBoundary {}\n\n/**\n * Higher-Order Component for Crisis Error Boundaries\n * Automatically wraps crisis-related components with error boundaries\n */\nexport interface WithErrorBoundaryOptions {\n  showCrisisResources?: boolean;\n  fallback?: React.ReactNode;\n  FallbackComponent?: React.ComponentType<unknown>;\n  fallbackRender?: (props: { error: Error; resetErrorBoundary: () => void }) => ReactNode;\n  onError?: (error: Error, errorInfo: ErrorInfo) => void;\n  onReset?: () => void;\n}\n\n/**\n * HOC that wraps components with error boundary\n */\nexport function withErrorBoundary<P extends object>(\n  Component: React.ComponentType<P>,\n  options: WithErrorBoundaryOptions = {}\n) {\n  const WrappedComponent = React.forwardRef<any, P & React.RefAttributes<unknown>>((props, ref) => {\n    const { ...componentProps } = props;\n    return (\n      <ErrorBoundary {...options}>\n        <Component {...componentProps as P} ref={ref} />\n      </ErrorBoundary>\n    );\n  });\n\n  // Set display name for debugging\n  WrappedComponent.displayName = `withErrorBoundary(${Component.displayName || Component.name})`;\n\n  return WrappedComponent;\n}\n\n/**\n * Alias for crisis-aware error boundary HOC\n */\nexport const _withCrisisErrorBoundary = withErrorBoundary;\n\n/**\n * Decorator version for class components\n */\nexport function CrisisProtected(options: WithErrorBoundaryOptions = {}) {\n  return function <P extends object>(Component: React.ComponentType<P>) {\n    return withErrorBoundary(Component, options);\n  };\n}\n\n/**\n * Hook version for functional components\n */\nexport function useErrorBoundary() {\n  return React.useCallback((component: React.ComponentType<unknown>, options?: WithErrorBoundaryOptions) => {\n    return withErrorBoundary(component, options);\n  }, []);\n}\n\n// Global error handler for uncaught errors\nexport const setupGlobalErrorHandling = () => {\n  // Handle uncaught JavaScript errors\n  window.addEventListener('error', (event) => {\n    logger.error('🚨 UNCAUGHT ERROR:', {\n      message: event.message,\n      source: event.filename,\n      line: event.lineno,\n      column: event.colno,\n      error: event.error?.stack,\n      timestamp: new Date().toISOString()\n    });\n\n    // Store error for analysis\n    const _errorReport = {\n      type: 'uncaught_error',\n      message: event.message,\n      source: event.filename,\n      line: event.lineno,\n      column: event.colno,\n      stack: event.error?.stack,\n      timestamp: new Date().toISOString()\n    };\n\n    try {\n      localStorage.setItem(`uncaught_error_${Date.now()}`, JSON.stringify(_errorReport));\n    } catch (_error) {\n      logger.error('Failed to store error report');\n    }\n  });\n\n  // Handle unhandled promise rejections\n  window.addEventListener('unhandledrejection', (event) => {\n    logger.error('🚨 UNHANDLED PROMISE REJECTION:', {\n      reason: event.reason,\n      promise: event.promise,\n      timestamp: new Date().toISOString()\n    });\n\n    // Store rejection for analysis\n    const _rejectionReport = {\n      type: 'unhandled_rejection',\n      reason: event.reason?.toString(),\n      stack: event.reason?.stack,\n      timestamp: new Date().toISOString()\n    };\n\n    try {\n      localStorage.setItem(`rejection_${Date.now()}`, JSON.stringify(_rejectionReport));\n    } catch (_error) {\n      logger.error('Failed to store rejection report');\n    }\n  });\n\n  logger.info('Global error handling initialized', 'ErrorBoundary');\n};\n\nexport default ErrorBoundary;","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\accessibility\\AccessibilityControlPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":59,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":79,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":97,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":97,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":109,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":109,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":137,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":137,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":149,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":149,"endColumn":20}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport {\r\n  Mic,\r\n  MicOff,\r\n  Eye,\r\n  EyeOff,\r\n  Volume2,\r\n  Contrast,\r\n  Settings,\r\n  CheckCircle,\r\n  AlertTriangle,\r\n  Play,\r\n  RotateCcw,\r\n  Zap\r\n} from 'lucide-react';\r\nimport { logger } from '../../utils/logger';\r\nimport {\r\n  advancedAccessibilityService,\r\n  AccessibilityProfile,\r\n  VoiceNavigationAction\r\n} from '../../services/accessibility/AdvancedAccessibilityService';\r\n\r\ninterface AccessibilityControlPanelProps {\r\n  className?: string;\r\n}\r\n\r\nexport const AccessibilityControlPanel: React.FC<AccessibilityControlPanelProps> = ({\r\n  className = ''\r\n}) => {\r\n  const [profile, setProfile] = useState<AccessibilityProfile | null>(null);\r\n  const [isVoiceActive, setIsVoiceActive] = useState(false);\r\n  const [isEyeTrackingActive, setIsEyeTrackingActive] = useState(false);\r\n  const [availableCommands, setAvailableCommands] = useState<VoiceNavigationAction[]>([]);\r\n  const [_isLoading, setIsLoading] = useState(true);\r\n  const [testingSpeech, setTestingSpeech] = useState(false);\r\n  const [calibratingEyeTracking, setCalibratingEyeTracking] = useState(false);\r\n\r\n  useEffect(() => {\r\n    initializeAccessibility();\r\n  }, []);\r\n\r\n  const initializeAccessibility = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      \r\n      // Load user profile\r\n      const _userProfile = await advancedAccessibilityService.loadAccessibilityProfile();\r\n      setProfile(_userProfile);\r\n      \r\n      // Get available voice _commands\r\n      const _commands = advancedAccessibilityService.getAvailableCommands();\r\n      setAvailableCommands(_commands);\r\n      \r\n      // Update active states\r\n      setIsVoiceActive(advancedAccessibilityService.isVoiceNavigationActive());\r\n      setIsEyeTrackingActive(advancedAccessibilityService.isEyeTrackingEnabled());\r\n      \r\n    } catch (_error) {\r\n      logger.error('Failed to initialize accessibility:');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const toggleVoiceNavigation = async () => {\r\n    try {\r\n      if (_isVoiceActive) {\r\n        advancedAccessibilityService.stopVoiceNavigation();\r\n        setIsVoiceActive(false);\r\n        await updateProfile({ voiceNavigation: false });\r\n      } else {\r\n        const _success = await advancedAccessibilityService.startVoiceNavigation();\r\n        if (_success) {\r\n          setIsVoiceActive(true);\r\n          await updateProfile({ voiceNavigation: true });\r\n        }\r\n      }\r\n    } catch (_error) {\r\n      logger.error('Failed to toggle voice navigation:');\r\n    }\r\n  };\r\n\r\n  const toggleEyeTracking = async () => {\r\n    try {\r\n      if (_isEyeTrackingActive) {\r\n        advancedAccessibilityService.stopEyeTracking();\r\n        setIsEyeTrackingActive(false);\r\n        await updateProfile({ eyeTracking: false });\r\n      } else {\r\n        const _success = await advancedAccessibilityService.startEyeTracking();\r\n        if (_success) {\r\n          setIsEyeTrackingActive(true);\r\n          await updateProfile({ eyeTracking: true });\r\n        }\r\n      }\r\n    } catch (_error) {\r\n      logger.error('Failed to toggle eye tracking:');\r\n    }\r\n  };\r\n\r\n  const testSpeech = async () => {\r\n    try {\r\n      setTestingSpeech(true);\r\n      await advancedAccessibilityService.speak(\r\n        'Voice accessibility is working correctly. You can now use voice _commands to navigate the application.',\r\n        'normal'\r\n      );\r\n    } catch (_error) {\r\n      logger.error('Speech test failed:');\r\n    } finally {\r\n      setTestingSpeech(false);\r\n    }\r\n  };\r\n\r\n  const calibrateEyeTracking = async () => {\r\n    try {\r\n      setCalibratingEyeTracking(true);\r\n      await advancedAccessibilityService.speak(\r\n        'Eye tracking calibration started. Please look at each corner of the screen when prompted.',\r\n        'normal'\r\n      );\r\n      \r\n      // Simulate calibration process\r\n      await new Promise(resolve => setTimeout(resolve, 3000));\r\n      \r\n      await updateProfile({\r\n        eyeTrackingCalibration: {\r\n          ...profile!.preferences.eyeTrackingCalibration,\r\n          isCalibrated: true,\r\n          calibrationTimestamp: Date.now()\r\n        }\r\n      });\r\n      \r\n      await advancedAccessibilityService.speak('Eye tracking calibration completed successfully.');\r\n      \r\n    } catch (_error) {\r\n      logger.error('Eye tracking calibration failed:');\r\n    } finally {\r\n      setCalibratingEyeTracking(false);\r\n    }\r\n  };\r\n\r\n  const updateProfile = async (_updates: Partial<AccessibilityProfile['preferences']>) => {\r\n    try {\r\n      await advancedAccessibilityService.updateProfile(_updates);\r\n      const _updatedProfile = advancedAccessibilityService.getProfile();\r\n      setProfile(_updatedProfile);\r\n    } catch (_error) {\r\n      logger.error('Failed to update profile:');\r\n    }\r\n  };\r\n\r\n  const toggleHighContrast = async () => {\r\n    const newValue = !profile?.preferences.highContrast;\r\n    await updateProfile({ highContrast: newValue });\r\n  };\r\n\r\n  const toggleReducedMotion = async () => {\r\n    const newValue = !profile?.preferences.reducedMotion;\r\n    await updateProfile({ reducedMotion: newValue });\r\n  };\r\n\r\n  const toggleTextToSpeech = async () => {\r\n    const newValue = !profile?.preferences.textToSpeech;\r\n    await updateProfile({ textToSpeech: newValue });\r\n  };\r\n\r\n  const setVoiceCommandSensitivity = async (sensitivity: 'low' | 'medium' | 'high') => {\r\n    await updateProfile({ voiceCommandSensitivity: sensitivity });\r\n  };\r\n\r\n  if (_isLoading) {\r\n    return (\r\n      <div className={`bg-white rounded-xl shadow-lg p-6 ${className}`}>\r\n        <div className=\"flex items-center justify-center space-x-3\">\r\n          <div className=\"w-6 h-6 border-2 border-purple-600 border-t-transparent rounded-full animate-spin\"></div>\r\n          <span className=\"text-gray-600\">Loading accessibility settings...</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const _commandsByPriority = availableCommands.reduce((acc, cmd) => {\r\n    if (!acc[cmd.priority]) acc[cmd.priority] = [];\r\n    acc[cmd.priority]!.push(_cmd);\r\n    return acc;\r\n  }, {} as Record<string, VoiceNavigationAction[]>);\r\n\r\n  return (\r\n    <div className={`bg-white rounded-xl shadow-lg overflow-hidden ${className}`}>\r\n      {/* Header */}\r\n      <div className=\"bg-gradient-to-r from-indigo-500 to-purple-600 p-6 text-white\">\r\n        <div className=\"flex items-center space-x-3\">\r\n          <Settings className=\"w-8 h-8\" />\r\n          <div>\r\n            <h2 className=\"text-xl font-bold\">Accessibility Control Panel</h2>\r\n            <p className=\"text-indigo-100 text-sm\">\r\n              Advanced accessibility features and voice navigation\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main Controls */}\r\n      <div className=\"p-6 space-y-6\">\r\n        {/* Voice Navigation */}\r\n        <motion.div\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          className=\"border rounded-lg p-4\"\r\n        >\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <div className=\"flex items-center space-x-3\">\r\n              <div className={`p-2 rounded-lg ${isVoiceActive ? 'bg-green-100 text-green-600' : 'bg-gray-100 text-gray-600'}`}>\r\n                {isVoiceActive ? <Mic className=\"w-5 h-5\" /> : <MicOff className=\"w-5 h-5\" />}\r\n              </div>\r\n              <div>\r\n                <h3 className=\"font-semibold text-gray-900\">Voice Navigation</h3>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  {isVoiceActive ? 'Listening for voice _commands' : 'Voice _commands disabled'}\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <button\r\n              onClick={toggleVoiceNavigation}\r\n              className={`px-4 py-2 rounded-lg font-medium transition-colors ${\r\n                isVoiceActive\r\n                  ? 'bg-green-100 text-green-700 hover:bg-green-200'\r\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n              }`}\r\n            >\r\n              {isVoiceActive ? 'Disable' : 'Enable'}\r\n            </button>\r\n          </div>\r\n\r\n          {profile?.capabilities.hasVoiceRecognition && (\r\n            <div className=\"space-y-3\">\r\n              {/* Voice Sensitivity */}\r\n              <div className=\"flex items-center space-x-4\">\r\n                <span className=\"text-sm font-medium text-gray-700\">Sensitivity:</span>\r\n                <div className=\"flex space-x-2\">\r\n                  {['low', 'medium', 'high'].map((level) => (\r\n                    <button\r\n                      key={level}\r\n                      onClick={() => setVoiceCommandSensitivity(level as 'low' | 'medium' | 'high')}\r\n                      className={`px-3 py-1 text-xs rounded-full ${\r\n                        profile?.preferences.voiceCommandSensitivity === level\r\n                          ? 'bg-purple-100 text-purple-700'\r\n                          : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\r\n                      }`}\r\n                    >\r\n                      {level}\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Test Speech */}\r\n              <button\r\n                onClick={testSpeech}\r\n                disabled={testingSpeech}\r\n                className=\"flex items-center space-x-2 px-3 py-2 bg-blue-50 text-blue-700 rounded-lg hover:bg-blue-100 transition-colors disabled:opacity-50\"\r\n              >\r\n                {testingSpeech ? (\r\n                  <>\r\n                    <Volume2 className=\"w-4 h-4 animate-pulse\" />\r\n                    <span>Testing...</span>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <Play className=\"w-4 h-4\" />\r\n                    <span>Test Speech</span>\r\n                  </>\r\n                )}\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n          {!profile?.capabilities.hasVoiceRecognition && (\r\n            <div className=\"flex items-center space-x-2 p-3 bg-yellow-50 rounded-lg\">\r\n              <AlertTriangle className=\"w-5 h-5 text-yellow-600\" />\r\n              <span className=\"text-sm text-yellow-700\">\r\n                Voice recognition not available in this browser\r\n              </span>\r\n            </div>\r\n          )}\r\n        </motion.div>\r\n\r\n        {/* Eye Tracking */}\r\n        <motion.div\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ delay: 0.1 }}\r\n          className=\"border rounded-lg p-4\"\r\n        >\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <div className=\"flex items-center space-x-3\">\r\n              <div className={`p-2 rounded-lg ${isEyeTrackingActive ? 'bg-blue-100 text-blue-600' : 'bg-gray-100 text-gray-600'}`}>\r\n                {isEyeTrackingActive ? <Eye className=\"w-5 h-5\" /> : <EyeOff className=\"w-5 h-5\" />}\r\n              </div>\r\n              <div>\r\n                <h3 className=\"font-semibold text-gray-900\">Eye Tracking</h3>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  {isEyeTrackingActive ? 'Tracking eye movements' : 'Eye tracking disabled'}\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <button\r\n              onClick={toggleEyeTracking}\r\n              className={`px-4 py-2 rounded-lg font-medium transition-colors ${\r\n                isEyeTrackingActive\r\n                  ? 'bg-blue-100 text-blue-700 hover:bg-blue-200'\r\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n              }`}\r\n            >\r\n              {isEyeTrackingActive ? 'Disable' : 'Enable'}\r\n            </button>\r\n          </div>\r\n\r\n          {profile?.capabilities.hasEyeTracking && (\r\n            <div className=\"space-y-3\">\r\n              {/* Calibration Status */}\r\n              <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\r\n                <div className=\"flex items-center space-x-2\">\r\n                  {profile.preferences.eyeTrackingCalibration?.isCalibrated ? (\r\n                    <>\r\n                      <CheckCircle className=\"w-5 h-5 text-green-600\" />\r\n                      <span className=\"text-sm text-green-700\">Calibrated</span>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <AlertTriangle className=\"w-5 h-5 text-orange-600\" />\r\n                      <span className=\"text-sm text-orange-700\">Needs calibration</span>\r\n                    </>\r\n                  )}\r\n                </div>\r\n                <button\r\n                  onClick={calibrateEyeTracking}\r\n                  disabled={calibratingEyeTracking}\r\n                  className=\"px-3 py-2 bg-purple-100 text-purple-700 rounded-lg hover:bg-purple-200 transition-colors disabled:opacity-50\"\r\n                >\r\n                  {calibratingEyeTracking ? (\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <RotateCcw className=\"w-4 h-4 animate-spin\" />\r\n                      <span>Calibrating...</span>\r\n                    </div>\r\n                  ) : (\r\n                    'Calibrate'\r\n                  )}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {!profile?.capabilities.hasEyeTracking && (\r\n            <div className=\"flex items-center space-x-2 p-3 bg-yellow-50 rounded-lg\">\r\n              <AlertTriangle className=\"w-5 h-5 text-yellow-600\" />\r\n              <span className=\"text-sm text-yellow-700\">\r\n                Eye tracking requires camera access and compatible browser\r\n              </span>\r\n            </div>\r\n          )}\r\n        </motion.div>\r\n\r\n        {/* Visual Accessibility */}\r\n        <motion.div\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ delay: 0.2 }}\r\n          className=\"border rounded-lg p-4\"\r\n        >\r\n          <h3 className=\"font-semibold text-gray-900 mb-4 flex items-center space-x-2\">\r\n            <Contrast className=\"w-5 h-5\" />\r\n            <span>Visual Settings</span>\r\n          </h3>\r\n\r\n          <div className=\"space-y-4\">\r\n            {/* High Contrast */}\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <span className=\"font-medium text-gray-900\">High Contrast Mode</span>\r\n                <p className=\"text-sm text-gray-600\">Increase contrast for better visibility</p>\r\n              </div>\r\n              <button\r\n                onClick={toggleHighContrast}\r\n                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\r\n                  profile?.preferences.highContrast ? 'bg-purple-600' : 'bg-gray-300'\r\n                }`}\r\n              >\r\n                <span\r\n                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\r\n                    profile?.preferences.highContrast ? 'translate-x-6' : 'translate-x-1'\r\n                  }`}\r\n                />\r\n              </button>\r\n            </div>\r\n\r\n            {/* Reduced Motion */}\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <span className=\"font-medium text-gray-900\">Reduced Motion</span>\r\n                <p className=\"text-sm text-gray-600\">Minimize animations and transitions</p>\r\n              </div>\r\n              <button\r\n                onClick={toggleReducedMotion}\r\n                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\r\n                  profile?.preferences.reducedMotion ? 'bg-purple-600' : 'bg-gray-300'\r\n                }`}\r\n              >\r\n                <span\r\n                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\r\n                    profile?.preferences.reducedMotion ? 'translate-x-6' : 'translate-x-1'\r\n                  }`}\r\n                />\r\n              </button>\r\n            </div>\r\n\r\n            {/* Text to Speech */}\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <span className=\"font-medium text-gray-900\">Text to Speech</span>\r\n                <p className=\"text-sm text-gray-600\">Read page content aloud</p>\r\n              </div>\r\n              <button\r\n                onClick={toggleTextToSpeech}\r\n                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\r\n                  profile?.preferences.textToSpeech ? 'bg-purple-600' : 'bg-gray-300'\r\n                }`}\r\n              >\r\n                <span\r\n                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\r\n                    profile?.preferences.textToSpeech ? 'translate-x-6' : 'translate-x-1'\r\n                  }`}\r\n                />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </motion.div>\r\n\r\n        {/* Voice Commands Reference */}\r\n        {availableCommands.length > 0 && (\r\n          <motion.div\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ delay: 0.3 }}\r\n            className=\"border rounded-lg p-4\"\r\n          >\r\n            <h3 className=\"font-semibold text-gray-900 mb-4 flex items-center space-x-2\">\r\n              <Zap className=\"w-5 h-5\" />\r\n              <span>Available Voice Commands</span>\r\n            </h3>\r\n\r\n            <div className=\"space-y-4\">\r\n              {Object.entries(_commandsByPriority).map(([priority, _commands]) => (\r\n                <div key={priority} className=\"space-y-2\">\r\n                  <h4 className={`text-sm font-medium ${\r\n                    priority === 'crisis' ? 'text-red-700' :\r\n                    priority === 'high' ? 'text-orange-700' :\r\n                    priority === 'medium' ? 'text-blue-700' : 'text-gray-700'\r\n                  }`}>\r\n                    {priority.charAt(0).toUpperCase() + priority.slice(1)} Priority\r\n                  </h4>\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\r\n                    {_commands.slice(0, 6).map((cmd, index) => (\r\n                      <div\r\n                        key={`${cmd.command}-${index}`}\r\n                        className={`p-2 rounded text-xs ${\r\n                          priority === 'crisis' ? 'bg-red-50 text-red-700' :\r\n                          priority === 'high' ? 'bg-orange-50 text-orange-700' :\r\n                          priority === 'medium' ? 'bg-blue-50 text-blue-700' : 'bg-gray-50 text-gray-700'\r\n                        }`}\r\n                      >\r\n                        <div className=\"font-medium\">&ldquo;{cmd.command}&rdquo;</div>\r\n                        <div className=\"text-xs opacity-75\">{cmd.description}</div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </motion.div>\r\n        )}\r\n\r\n        {/* Capabilities Status */}\r\n        <motion.div\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ delay: 0.4 }}\r\n          className=\"bg-gray-50 rounded-lg p-4\"\r\n        >\r\n          <h3 className=\"font-semibold text-gray-900 mb-3\">System Capabilities</h3>\r\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              {profile?.capabilities.hasVoiceRecognition ? (\r\n                <CheckCircle className=\"w-4 h-4 text-green-600\" />\r\n              ) : (\r\n                <AlertTriangle className=\"w-4 h-4 text-red-600\" />\r\n              )}\r\n              <span>Voice Recognition</span>\r\n            </div>\r\n            <div className=\"flex items-center space-x-2\">\r\n              {profile?.capabilities.canSpeak ? (\r\n                <CheckCircle className=\"w-4 h-4 text-green-600\" />\r\n              ) : (\r\n                <AlertTriangle className=\"w-4 h-4 text-red-600\" />\r\n              )}\r\n              <span>Text to Speech</span>\r\n            </div>\r\n            <div className=\"flex items-center space-x-2\">\r\n              {profile?.capabilities.hasEyeTracking ? (\r\n                <CheckCircle className=\"w-4 h-4 text-green-600\" />\r\n              ) : (\r\n                <AlertTriangle className=\"w-4 h-4 text-yellow-600\" />\r\n              )}\r\n              <span>Eye Tracking</span>\r\n            </div>\r\n            <div className=\"flex items-center space-x-2\">\r\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\r\n              <span>Keyboard Navigation</span>\r\n            </div>\r\n          </div>\r\n        </motion.div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccessibilityControlPanel;","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\accessibility\\VoiceNavigation.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":179,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":179,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":213,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":213,"endColumn":22}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Voice Navigation Component\n * Advanced accessibility feature for hands-free navigation\n * Especially critical for users in crisis situations or with motor impairments\n */\n\nimport React, { useEffect, useState, useCallback, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAccessibilityStore } from '../../stores/accessibilityStore';\nimport { logger } from '../../utils/logger';\n\ninterface VoiceCommand {\n  phrase: string;\n  action: () => void;\n  priority: 'high' | 'medium' | 'low';\n  description: string;\n}\n\nexport const VoiceNavigation: React.FC = () => {\n  const navigate = useNavigate();\n  const { settings } = useAccessibilityStore();\n  const [isListening, setIsListening] = useState(false);\n  const [recognition, setRecognition] = useState<unknown>(null);\n  const [confidence, setConfidence] = useState(0);\n  \n  // Voice commands with crisis-focused priority\n  // Announce actions using speech synthesis\n  const announceAction = useCallback((message: string) => {\n    if ('speechSynthesis' in window && settings.voiceFeedback) {\n      const utterance = new (window as unknown).SpeechSynthesisUtterance(message);\n      utterance.rate = 0.8;\n      utterance.pitch = 1;\n      utterance.volume = 0.7;\n      (window as unknown).speechSynthesis.speak(utterance);\n    }\n  }, [settings.voiceFeedback]);\n\n  const commands: VoiceCommand[] = useMemo(() => [\n    // CRISIS COMMANDS - HIGHEST PRIORITY\n    {\n      phrase: 'crisis help',\n      action: () => navigate('/crisis'),\n      priority: 'high',\n      description: 'Navigate to crisis intervention resources'\n    },\n    {\n      phrase: 'emergency',\n      action: () => navigate('/crisis'),\n      priority: 'high', \n      description: 'Access emergency mental health support'\n    },\n    {\n      phrase: 'call nine eight eight',\n      action: () => window.location.href = 'tel:988',\n      priority: 'high',\n      description: 'Call crisis lifeline'\n    },\n    {\n      phrase: 'help me now',\n      action: () => navigate('/crisis'),\n      priority: 'high',\n      description: 'Immediate crisis assistance'\n    },\n    \n    // NAVIGATION COMMANDS\n    {\n      phrase: 'go home',\n      action: () => navigate('/'),\n      priority: 'medium',\n      description: 'Navigate to home dashboard'\n    },\n    {\n      phrase: 'dashboard',\n      action: () => navigate('/dashboard'),\n      priority: 'medium',\n      description: 'Navigate to main dashboard'\n    },\n    {\n      phrase: 'wellness',\n      action: () => navigate('/wellness'),\n      priority: 'medium',\n      description: 'Navigate to wellness tracking'\n    },\n    {\n      phrase: 'community',\n      action: () => navigate('/community'),\n      priority: 'medium',\n      description: 'Navigate to community support'\n    },\n    {\n      phrase: 'professional',\n      action: () => navigate('/professional'),\n      priority: 'medium',\n      description: 'Navigate to professional resources'\n    },\n    \n    // ACCESSIBILITY COMMANDS\n    {\n      phrase: 'high contrast',\n      action: () => useAccessibilityStore.getState().toggleHighContrast(),\n      priority: 'low',\n      description: 'Toggle high contrast mode'\n    },\n    {\n      phrase: 'larger text',\n      action: () => useAccessibilityStore.getState().increaseFontSize(),\n      priority: 'low',\n      description: 'Increase text size'\n    },\n    {\n      phrase: 'smaller text',\n      action: () => useAccessibilityStore.getState().decreaseFontSize(),\n      priority: 'low',\n      description: 'Decrease text size'\n    },\n    {\n      phrase: 'stop voice',\n      action: () => setIsListening(false),\n      priority: 'medium',\n      description: 'Stop voice recognition'\n    }\n  ], [navigate]);\n\n  // Initialize speech recognition\n  useEffect(() => {\n    if (!settings.voiceNavigation || !('webkitSpeechRecognition' in window || 'SpeechRecognition' in window)) {\n      return;\n    }\n\n    const SpeechRecognition = (window as unknown).SpeechRecognition || (window as unknown).webkitSpeechRecognition;\n    const recognitionInstance = new SpeechRecognition();\n    \n    recognitionInstance.continuous = true;\n    recognitionInstance.interimResults = false;\n    recognitionInstance.lang = 'en-US';\n    recognitionInstance.maxAlternatives = 3;\n\n    recognitionInstance.onresult = (event: unknown) => {\n      const lastResult = event.results[event.results.length - 1];\n      if (lastResult.isFinal) {\n        const transcript = lastResult[0].transcript.toLowerCase().trim();\n        const confidence = lastResult[0].confidence;\n        \n        setConfidence(confidence);\n        \n        // Find matching command (prioritize high-priority commands)\n        const sortedCommands = commands.sort((a, b) => {\n          const priorityOrder = { high: 3, medium: 2, low: 1 };\n          return priorityOrder[b.priority] - priorityOrder[a.priority];\n        });\n        \n        for (const command of sortedCommands) {\n          if (transcript.includes(command.phrase)) {\n            // Higher confidence threshold for crisis commands for safety\n            const requiredConfidence = command.priority === 'high' ? 0.7 : 0.6;\n            \n            if (confidence >= requiredConfidence) {\n              // Announce what action is being taken\n              announceAction(command.description);\n              command.action();\n              break;\n            }\n          }\n        }\n      }\n    };\n\n    recognitionInstance.onstart = () => {\n      setIsListening(true);\n    };\n\n    recognitionInstance.onend = () => {\n      setIsListening(false);\n      // Auto-restart for continuous listening if enabled\n      if (settings.voiceNavigation) {\n        setTimeout(() => {\n          try {\n            recognitionInstance.start();\n          } catch (_error) {\n    logger.warn('Voice recognition restart failed:');\n          }\n        }, 1000);\n      }\n    };\n\n    recognitionInstance.onerror = (event: unknown) => {\n      logger.warn('Voice recognition error:', event.error);\n      if (event.error === 'no-speech' || event.error === 'audio-capture') {\n        // These are expected errors, don&apos;t show to user\n        return;\n      }\n      setIsListening(false);\n    };\n\n    setRecognition(recognitionInstance);\n\n    return () => {\n      recognitionInstance.stop();\n    };\n  }, [settings.voiceNavigation, navigate, commands, announceAction]);\n\n  // Start/stop voice recognition\n  const toggleVoiceRecognition = useCallback(() => {\n    if (!recognition) return;\n\n    if (isListening) {\n      recognition.stop();\n      announceAction('Voice navigation stopped');\n    } else {\n      try {\n        recognition.start();\n        announceAction('Voice navigation started. Say \"crisis help\" for emergency assistance.');\n      } catch (_error) {\n        logger.error('Failed to start voice recognition:');\n      }\n    }\n  }, [recognition, isListening, announceAction]);\n\n  // Don't render if voice navigation is disabled\n  if (!settings.voiceNavigation) {\n    return null;\n  }\n\n  return (\n    <div className=\"fixed bottom-4 right-4 z-50\">\n      <button\n        onClick={toggleVoiceRecognition}\n        className={`\n          flex items-center justify-center w-14 h-14 rounded-full shadow-lg\n          transition-all duration-200 transform hover:scale-105 focus:scale-105\n          ${isListening \n            ? 'bg-red-600 hover:bg-red-700 animate-pulse' \n            : 'bg-blue-600 hover:bg-blue-700'\n          }\n          text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\n        `}\n        aria-label={isListening ? 'Stop voice navigation' : 'Start voice navigation'}\n        title={isListening ? 'Voice navigation active - click to stop' : 'Click to start voice navigation'}\n      >\n        {isListening ? (\n          <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n            <path d=\"M12 14c1.66 0 3-1.34 3-3V5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3z\"/>\n            <path d=\"M17 11c0 2.76-2.24 5-5 5s-5-2.24-5-5H5c0 3.53 2.61 6.43 6 6.92V21h2v-3.08c3.39-.49 6-3.39 6-6.92h-2z\"/>\n          </svg>\n        ) : (\n          <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n            <path d=\"M12 14c1.66 0 3-1.34 3-3V5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3z\"/>\n            <path d=\"M17 11c0 2.76-2.24 5-5 5s-5-2.24-5-5H5c0 3.53 2.61 6.43 6 6.92V21h2v-3.08c3.39-.49 6-3.39 6-6.92h-2z\"/>\n          </svg>\n        )}\n      </button>\n      \n      {/* Voice recognition status indicator */}\n      {isListening && (\n        <div className=\"absolute -top-12 left-1/2 transform -translate-x-1/2\">\n          <div className=\"bg-black bg-opacity-75 text-white px-3 py-1 rounded-full text-sm whitespace-nowrap\">\n            Listening... {confidence > 0 && `(${Math.round(confidence * 100)}%)`}\n          </div>\n        </div>\n      )}\n      \n      {/* Available commands help */}\n      <div className=\"absolute bottom-16 right-0 hidden group-hover:block\">\n        <div className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg p-4 max-w-xs\">\n          <h3 className=\"font-semibold text-sm mb-2\">Voice Commands</h3>\n          <div className=\"space-y-1 text-xs\">\n            <div className=\"text-red-600 font-medium\">Crisis Commands:</div>\n            <div>&quot;crisis help&quot;, &quot;emergency&quot;, &quot;help me now&quot;</div>\n            <div className=\"text-blue-600 font-medium mt-2\">Navigation:</div>\n            <div>&quot;dashboard&quot;, &quot;wellness&quot;, &quot;community&quot;</div>\n            <div className=\"text-gray-600 font-medium mt-2\">Accessibility:</div>\n            <div>&quot;high contrast&quot;, &quot;larger text&quot;, &quot;stop voice&quot;</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Type declarations for Speech Recognition API\n// Speech recognition types are declared in src/types/globals.d.ts\n\n// Speech Recognition interfaces\ninterface SpeechRecognitionResult {\n  transcript: string;\n  confidence: number;\n}\n\ninterface _SpeechRecognitionAlternative {\n  transcript: string;\n  confidence: number;\n}\n\ninterface SpeechRecognitionResultList {\n  length: number;\n  item(index: number): SpeechRecognitionResult;\n  [index: number]: SpeechRecognitionResult;\n}\n\ninterface _SpeechRecognitionEvent extends Event {\n  results: SpeechRecognitionResultList;\n  resultIndex: number;\n}\n\ninterface _SpeechRecognitionErrorEvent extends Event {\n  error: string;\n  message: string;\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\ai\\AITherapyHub.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\ai\\TherapistChat.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\ai\\TherapistSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\analytics\\MentalHealthAnalyticsDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":156,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":156,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Mental Health Analytics Dashboard\r\n * \r\n * Comprehensive analytics for tracking mental health progress\r\n * Privacy-first approach with local data processing\r\n * Evidence-based metrics and visualizations\r\n */\r\n\r\nimport { useState, useEffect, useMemo } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { logger } from '../../utils/logger';\r\nimport {\r\n  TrendingUp, TrendingDown, Activity, Heart, Brain,\r\n  Target, BarChart3,\r\n  LineChart, AlertCircle, CheckCircle,\r\n  Download, Eye, EyeOff\r\n} from 'lucide-react';\r\n\r\ninterface AnalyticsData {\r\n  userId: string;\r\n  timeframe: 'week' | 'month' | 'quarter' | 'year';\r\n  metrics: MentalHealthMetric[];\r\n  trends: TrendAnalysis[];\r\n  insights: AnalyticsInsight[];\r\n  goals: GoalProgress[];\r\n  interventions: InterventionEffectiveness[];\r\n  riskFactors: RiskFactor[];\r\n  lastUpdated: Date;\r\n}\r\n\r\ninterface MentalHealthMetric {\r\n  id: string;\r\n  name: string;\r\n  category: 'mood' | 'anxiety' | 'stress' | 'sleep' | 'activity' | 'social' | 'crisis';\r\n  value: number;\r\n  unit: string;\r\n  trend: 'improving' | 'stable' | 'declining';\r\n  trendPercentage: number;\r\n  benchmarkComparison: 'above' | 'within' | 'below';\r\n  clinicalRelevance: 'low' | 'medium' | 'high';\r\n  dataPoints: DataPoint[];\r\n  confidenceInterval: [number, number];\r\n}\r\n\r\ninterface DataPoint {\r\n  timestamp: Date;\r\n  value: number;\r\n  context?: string;\r\n  quality: 'high' | 'medium' | 'low';\r\n}\r\n\r\ninterface TrendAnalysis {\r\n  metric: string;\r\n  direction: 'improving' | 'stable' | 'declining';\r\n  magnitude: number;\r\n  significance: 'statistical' | 'clinical' | 'personal';\r\n  timeframe: string;\r\n  predictedContinuation: 'likely' | 'uncertain' | 'unlikely';\r\n  contributingFactors: string[];\r\n}\r\n\r\ninterface AnalyticsInsight {\r\n  id: string;\r\n  type: 'pattern' | 'correlation' | 'achievement' | 'concern' | 'recommendation';\r\n  title: string;\r\n  description: string;\r\n  impact: 'low' | 'medium' | 'high';\r\n  actionable: boolean;\r\n  recommendations: string[];\r\n  confidence: number;\r\n  relevantMetrics: string[];\r\n}\r\n\r\ninterface GoalProgress {\r\n  goalId: string;\r\n  name: string;\r\n  category: string;\r\n  targetValue: number;\r\n  currentValue: number;\r\n  progress: number; // 0-1\r\n  trajectory: 'on-track' | 'behind' | 'ahead' | 'at-risk';\r\n  milestones: Milestone[];\r\n  estimatedCompletion: Date;\r\n}\r\n\r\ninterface Milestone {\r\n  name: string;\r\n  targetDate: Date;\r\n  status: 'completed' | 'in-progress' | 'upcoming' | 'at-risk';\r\n  value?: number;\r\n}\r\n\r\ninterface InterventionEffectiveness {\r\n  intervention: string;\r\n  category: 'therapy' | 'medication' | 'lifestyle' | 'digital' | 'social';\r\n  effectiveness: number; // 0-1\r\n  usageFrequency: number;\r\n  adherence: number; // 0-1\r\n  sideEffects: string[];\r\n  costBenefit: 'high' | 'medium' | 'low';\r\n  evidenceLevel: 'strong' | 'moderate' | 'limited';\r\n}\r\n\r\ninterface RiskFactor {\r\n  name: string;\r\n  category: 'environmental' | 'behavioral' | 'social' | 'biological' | 'cognitive';\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  trend: 'improving' | 'stable' | 'worsening';\r\n  modifiable: boolean;\r\n  interventions: string[];\r\n}\r\n\r\nexport function MentalHealthAnalyticsDashboard() {\r\n  const [analyticsData, setAnalyticsData] = useState<AnalyticsData | null>(null);\r\n  const [timeframe, setTimeframe] = useState<'week' | 'month' | 'quarter' | 'year'>('month');\r\n  const [_selectedMetrics, _setSelectedMetrics] = useState<string[]>([]);\r\n  const [privacyMode, setPrivacyMode] = useState(false);\r\n  const [_loading, setLoading] = useState(true);\r\n  const [activeTab, setActiveTab] = useState<'overview' | 'trends' | 'goals' | 'insights' | 'interventions'>('overview');\r\n\r\n  // Fetch analytics _data\r\n  useEffect(() => {\r\n    fetchAnalyticsData(timeframe);\r\n  }, [timeframe]);\r\n\r\n  // Memoized calculations for performance\r\n  const overallWellnessScore = useMemo(() => {\r\n    if (!analyticsData) return null;\r\n    \r\n    const scores = analyticsData.metrics.map(metric => {\r\n      // Normalize different metrics to 0-100 scale\r\n      const normalized = normalizeMetricValue(metric);\r\n      const weight = getMetricWeight(metric.category);\r\n      return normalized * weight;\r\n    });\r\n    \r\n    const totalWeight = analyticsData.metrics.reduce((sum, metric) => \r\n      sum + getMetricWeight(metric.category), 0\r\n    );\r\n    \r\n    return scores.reduce((sum, score) => sum + score, 0) / totalWeight;\r\n  }, [analyticsData]);\r\n\r\n  const criticalInsights = useMemo(() => {\r\n    return analyticsData?.insights.filter(insight => \r\n      insight.impact === 'high' && insight.type === 'concern'\r\n    ) || [];\r\n  }, [analyticsData]);\r\n\r\n  const fetchAnalyticsData = async (timeframe: string) => {\r\n    setLoading(true);\r\n    try {\r\n      // In production, this would call the analytics service\r\n      const _data = await generateMockAnalyticsData(timeframe);\r\n      setAnalyticsData(_data);\r\n    } catch (_error) {\r\n      logger.error('Failed to fetch analytics _data:');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (_loading) {\r\n    return <AnalyticsDashboardSkeleton />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 dark:from-gray-900 dark:to-gray-800\">\r\n      {/* Privacy Notice */}\r\n      <div className=\"bg-green-50 dark:bg-green-900 border-b border-green-200 dark:border-green-700 px-4 py-2\">\r\n        <div className=\"flex items-center justify-between max-w-7xl mx-auto\">\r\n          <div className=\"flex items-center space-x-2\">\r\n            <CheckCircle className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\r\n            <span className=\"text-sm text-green-800 dark:text-green-200\">\r\n              All analytics processed locally - your data never leaves your device\r\n            </span>\r\n          </div>\r\n          <button\r\n            onClick={() => setPrivacyMode(!privacyMode)}\r\n            className=\"flex items-center space-x-2 px-3 py-1 bg-green-100 dark:bg-green-800 rounded-full hover:bg-green-200 dark:hover:bg-green-700 transition-colors\"\r\n          >\r\n            {privacyMode ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\r\n            <span className=\"text-sm font-medium\">\r\n              {privacyMode ? 'Privacy Mode' : 'Full View'}\r\n            </span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n        {/* Header */}\r\n        <div className=\"flex items-center justify-between mb-8\">\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\r\n              Mental Health Analytics\r\n            </h1>\r\n            <p className=\"text-gray-600 dark:text-gray-300 mt-2\">\r\n              Track your wellness journey with privacy-first insights\r\n            </p>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center space-x-4\">\r\n            {/* Timeframe Selector */}\r\n            <select\r\n              value={timeframe}\r\n              onChange={(e) => setTimeframe(e.target.value as unknown)}\r\n              className=\"px-4 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500\"\r\n            >\r\n              <option value=\"week\">Past Week</option>\r\n              <option value=\"month\">Past Month</option>\r\n              <option value=\"quarter\">Past Quarter</option>\r\n              <option value=\"year\">Past Year</option>\r\n            </select>\r\n\r\n            {/* Export Button */}\r\n            <button className=\"flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\">\r\n              <Download className=\"h-4 w-4\" />\r\n              <span>Export</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Wellness Score Overview */}\r\n        {overallWellnessScore && (\r\n          <motion.div\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-8 mb-8\"\r\n          >\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\r\n                  Overall Wellness Score\r\n                </h2>\r\n                <p className=\"text-gray-600 dark:text-gray-300\">\r\n                  Comprehensive measure of your mental health progress\r\n                </p>\r\n              </div>\r\n              \r\n              <div className=\"text-right\">\r\n                <div className=\"text-6xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-green-400 to-blue-500\">\r\n                  {privacyMode ? '••' : Math.round(_overallWellnessScore)}\r\n                </div>\r\n                <div className=\"text-sm text-gray-500 dark:text-gray-400 mt-2\">\r\n                  out of 100\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Score Breakdown */}\r\n            <div className=\"mt-6 grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n              {analyticsData?.metrics.slice(0, 4).map((metric, _index) => (\r\n                <div key={metric.id} className=\"text-center\">\r\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400 mb-1\">\r\n                    {metric.name}\r\n                  </div>\r\n                  <div className=\"text-xl font-semibold text-gray-900 dark:text-white\">\r\n                    {privacyMode ? '••' : Math.round(metric.value)}\r\n                  </div>\r\n                  <div className={`text-xs flex items-center justify-center mt-1 ${\r\n                    metric.trend === 'improving' ? 'text-green-600' :\r\n                    metric.trend === 'declining' ? 'text-red-600' : 'text-gray-500'\r\n                  }`}>\r\n                    {metric.trend === 'improving' ? <TrendingUp className=\"h-3 w-3 mr-1\" /> :\r\n                     metric.trend === 'declining' ? <TrendingDown className=\"h-3 w-3 mr-1\" /> :\r\n                     <Activity className=\"h-3 w-3 mr-1\" />}\r\n                    {metric.trend}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </motion.div>\r\n        )}\r\n\r\n        {/* Critical Insights Alert */}\r\n        {criticalInsights.length > 0 && (\r\n          <motion.div\r\n            initial={{ opacity: 0, x: -20 }}\r\n            animate={{ opacity: 1, x: 0 }}\r\n            className=\"bg-yellow-50 dark:bg-yellow-900 border-l-4 border-yellow-400 p-4 mb-8 rounded-lg\"\r\n          >\r\n            <div className=\"flex items-start\">\r\n              <AlertCircle className=\"h-6 w-6 text-yellow-600 dark:text-yellow-400 flex-shrink-0\" />\r\n              <div className=\"ml-3\">\r\n                <h3 className=\"text-lg font-medium text-yellow-800 dark:text-yellow-200\">\r\n                  Important Insights Detected\r\n                </h3>\r\n                <div className=\"mt-2 space-y-2\">\r\n                  {criticalInsights.map((insight) => (\r\n                    <div key={insight.id} className=\"text-sm text-yellow-700 dark:text-yellow-300\">\r\n                      <strong>{insight.title}:</strong> {insight.description}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </motion.div>\r\n        )}\r\n\r\n        {/* Navigation Tabs */}\r\n        <div className=\"border-b border-gray-200 dark:border-gray-700 mb-8\">\r\n          <nav className=\"flex space-x-8\">\r\n            {[\r\n              { id: 'overview', label: 'Overview', icon: BarChart3 },\r\n              { id: 'trends', label: 'Trends', icon: TrendingUp },\r\n              { id: 'goals', label: 'Goals', icon: Target },\r\n              { id: 'insights', label: 'Insights', icon: Brain },\r\n              { id: 'interventions', label: 'Interventions', icon: Heart }\r\n            ].map((tab) => {\r\n              const Icon = tab.icon;\r\n              return (\r\n                <button\r\n                  key={tab.id}\r\n                  onClick={() => setActiveTab(tab.id as unknown)}\r\n                  className={`flex items-center space-x-2 py-4 px-1 border-b-2 font-medium text-sm transition-colors ${\r\n                    activeTab === tab.id\r\n                      ? 'border-blue-500 text-blue-600 dark:text-blue-400'\r\n                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\r\n                  }`}\r\n                >\r\n                  <Icon className=\"h-5 w-5\" />\r\n                  <span>{tab.label}</span>\r\n                </button>\r\n              );\r\n            })}\r\n          </nav>\r\n        </div>\r\n\r\n        {/* Tab Content */}\r\n        <AnimatePresence mode=\"wait\">\r\n          <motion.div\r\n            key={activeTab}\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: -20 }}\r\n            transition={{ duration: 0.2 }}\r\n          >\r\n            {activeTab === 'overview' && (\r\n              <AnalyticsOverview \r\n                _data={analyticsData} \r\n                privacyMode={privacyMode} \r\n              />\r\n            )}\r\n            \r\n            {activeTab === 'trends' && (\r\n              <TrendsAnalysis \r\n                trends={analyticsData?.trends || []}\r\n                metrics={analyticsData?.metrics || []}\r\n                privacyMode={privacyMode}\r\n              />\r\n            )}\r\n            \r\n            {activeTab === 'goals' && (\r\n              <GoalsProgress \r\n                goals={analyticsData?.goals || []}\r\n                privacyMode={privacyMode}\r\n              />\r\n            )}\r\n            \r\n            {activeTab === 'insights' && (\r\n              <InsightsPanel \r\n                insights={analyticsData?.insights || []}\r\n                privacyMode={privacyMode}\r\n              />\r\n            )}\r\n            \r\n            {activeTab === 'interventions' && (\r\n              <InterventionsAnalysis \r\n                interventions={analyticsData?.interventions || []}\r\n                privacyMode={privacyMode}\r\n              />\r\n            )}\r\n          </motion.div>\r\n        </AnimatePresence>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Helper components\r\nfunction AnalyticsDashboardSkeleton() {\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 dark:from-gray-900 dark:to-gray-800\">\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n        <div className=\"animate-pulse\">\r\n          <div className=\"h-8 bg-gray-300 rounded w-1/3 mb-4\"></div>\r\n          <div className=\"h-4 bg-gray-300 rounded w-1/4 mb-8\"></div>\r\n          <div className=\"bg-white rounded-2xl p-8 mb-8\">\r\n            <div className=\"h-6 bg-gray-300 rounded w-1/2 mb-4\"></div>\r\n            <div className=\"h-16 bg-gray-300 rounded mb-4\"></div>\r\n            <div className=\"grid grid-cols-4 gap-4\">\r\n              {[1, 2, 3, 4].map(i => (\r\n                <div key={i} className=\"h-16 bg-gray-300 rounded\"></div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction AnalyticsOverview({ _data, privacyMode }: { _data: AnalyticsData | null; privacyMode: boolean }) {\r\n  if (!_data) return null;\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Key Metrics Grid */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n        {_data.metrics.map((metric) => (\r\n          <div key={metric.id} className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm p-6\">\r\n            <div className=\"flex items-center justify-between mb-4\">\r\n              <h3 className=\"font-semibold text-gray-900 dark:text-white\">\r\n                {metric.name}\r\n              </h3>\r\n              <div className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n                metric.clinicalRelevance === 'high' ? 'bg-red-100 text-red-800' :\r\n                metric.clinicalRelevance === 'medium' ? 'bg-yellow-100 text-yellow-800' :\r\n                'bg-green-100 text-green-800'\r\n              }`}>\r\n                {metric.clinicalRelevance} priority\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\r\n              {privacyMode ? '••' : `${metric.value}${metric.unit}`}\r\n            </div>\r\n            \r\n            <div className={`flex items-center text-sm ${\r\n              metric.trend === 'improving' ? 'text-green-600' :\r\n              metric.trend === 'declining' ? 'text-red-600' : 'text-gray-500'\r\n            }`}>\r\n              {metric.trend === 'improving' ? <TrendingUp className=\"h-4 w-4 mr-1\" /> :\r\n               metric.trend === 'declining' ? <TrendingDown className=\"h-4 w-4 mr-1\" /> :\r\n               <Activity className=\"h-4 w-4 mr-1\" />}\r\n              {metric.trendPercentage > 0 ? '+' : ''}{metric.trendPercentage}% vs last period\r\n            </div>\r\n            \r\n            {/* Mini chart would go here */}\r\n            <div className=\"mt-4 h-16 bg-gray-100 dark:bg-gray-700 rounded-lg flex items-center justify-center text-gray-500 dark:text-gray-400\">\r\n              <LineChart className=\"h-8 w-8\" />\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Additional component implementations would continue here...\r\nfunction TrendsAnalysis({ _trends, _metrics, _privacyMode }: unknown) {\r\n  return <div>Trends Analysis Component</div>;\r\n}\r\n\r\nfunction GoalsProgress({ _goals, _privacyMode }: unknown) {\r\n  return <div>Goals Progress Component</div>;\r\n}\r\n\r\nfunction InsightsPanel({ _insights, _privacyMode }: unknown) {\r\n  return <div>Insights Panel Component</div>;\r\n}\r\n\r\nfunction InterventionsAnalysis({ _interventions, _privacyMode }: unknown) {\r\n  return <div>Interventions Analysis Component</div>;\r\n}\r\n\r\n// Helper functions\r\nfunction normalizeMetricValue(metric: MentalHealthMetric): number {\r\n  // Normalize different metric types to 0-100 scale\r\n  switch (metric.category) {\r\n    case 'mood': return Math.max(0, Math.min(100, metric.value * 10));\r\n    case 'anxiety': return Math.max(0, Math.min(100, 100 - metric.value * 10));\r\n    case 'sleep': return Math.max(0, Math.min(100, (metric.value / 8) * 100));\r\n    default: return Math.max(0, Math.min(100, metric.value));\r\n  }\r\n}\r\n\r\nfunction getMetricWeight(category: string): number {\r\n  // Weight different categories by clinical importance\r\n  const weights = {\r\n    'crisis': 1.0,\r\n    'mood': 0.9,\r\n    'anxiety': 0.8,\r\n    'sleep': 0.7,\r\n    'stress': 0.7,\r\n    'social': 0.6,\r\n    'activity': 0.5\r\n  };\r\n  return weights[category as keyof typeof weights] || 0.5;\r\n}\r\n\r\nasync function generateMockAnalyticsData(timeframe: string): Promise<AnalyticsData> {\r\n  // Mock _data generation for development\r\n  // In production, this would fetch real analytics _data\r\n  return {\r\n    userId: 'mock-user',\r\n    timeframe: timeframe as unknown,\r\n    metrics: [\r\n      {\r\n        id: 'mood-score',\r\n        name: 'Mood Score',\r\n        category: 'mood',\r\n        value: 7.2,\r\n        unit: '/10',\r\n        trend: 'improving',\r\n        trendPercentage: 12,\r\n        benchmarkComparison: 'within',\r\n        clinicalRelevance: 'medium',\r\n        dataPoints: [],\r\n        confidenceInterval: [6.8, 7.6]\r\n      },\r\n      {\r\n        id: 'anxiety-level',\r\n        name: 'Anxiety Level',\r\n        category: 'anxiety',\r\n        value: 3.1,\r\n        unit: '/10',\r\n        trend: 'improving',\r\n        trendPercentage: -8,\r\n        benchmarkComparison: 'below',\r\n        clinicalRelevance: 'high',\r\n        dataPoints: [],\r\n        confidenceInterval: [2.8, 3.4]\r\n      }\r\n    ],\r\n    trends: [],\r\n    insights: [],\r\n    goals: [],\r\n    interventions: [],\r\n    riskFactors: [],\r\n    lastUpdated: new Date()\r\n  };\r\n}\r\n\r\nexport default MentalHealthAnalyticsDashboard;","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\community\\CommunityEvents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\community\\CommunityFeed.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\community\\CommunityPosts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\community\\Forums.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\community\\ModerationDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":266,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":266,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useMemo } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { Shield, AlertTriangle, Flag, CheckCircle, XCircle, Clock, TrendingUp, Users, MessageSquare, Activity, Ban, Eye } from 'lucide-react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { toast } from 'react-hot-toast';\nimport { communityService } from '../../services/community/communityService';\nimport { websocketService } from '../../services/realtime/websocketService';\nimport { useAuth } from '../../hooks/useAuth';\n\ninterface ModerationItem {\n  id: string;\n  _type: 'post' | 'comment' | 'message' | 'user';\n  contentId: string;\n  content: string;\n  reportedBy: string[];\n  reportReasons: string[];\n  userId: string;\n  username: string;\n  timestamp: Date;\n  status: 'pending' | 'reviewed' | 'resolved';\n  _priority: 'low' | 'medium' | 'high' | 'critical';\n  crisisDetected: boolean;\n  autoFlagged: boolean;\n  actionTaken?: {\n    action: string;\n    moderator: string;\n    timestamp: Date;\n    notes?: string;\n  };\n}\n\ninterface _ModeratorStats {\n  itemsReviewed: number;\n  averageResponseTime: number;\n  accuracyRate: number;\n  activeToday: boolean;\n}\n\nfunction ModerationCard({ item, onAction }: { item: ModerationItem; onAction: (action: string, notes?: string) => void }) {\n  const [showDetails, setShowDetails] = useState(false);\n  const [actionNotes, setActionNotes] = useState('');\n\n  const getPriorityColor = (_priority: string) => {\n    switch (_priority) {\n      case 'critical': return 'bg-red-100 text-red-700 border-red-200';\n      case 'high': return 'bg-orange-100 text-orange-700 border-orange-200';\n      case 'medium': return 'bg-yellow-100 text-yellow-700 border-yellow-200';\n      default: return 'bg-gray-100 text-gray-700 border-gray-200';\n    }\n  };\n\n  const getTypeIcon = (_type: string) => {\n    switch (_type) {\n      case 'post': return MessageSquare;\n      case 'comment': return MessageSquare;\n      case 'user': return Users;\n      default: return Flag;\n    }\n  };\n\n  const TypeIcon = getTypeIcon(item.type);\n\n  return (\n    <div className={`bg-white rounded-lg shadow-sm border-2 ${getPriorityColor(item._priority)}`}>\n      <div className=\"p-4\">\n        {/* Header */}\n        <div className=\"flex items-start justify-between mb-3\">\n          <div className=\"flex items-center space-x-3\">\n            <div className={`p-2 rounded-lg ${getPriorityColor(item._priority)}`}>\n              <TypeIcon className=\"h-5 w-5\" />\n            </div>\n            <div>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"font-semibold text-gray-900\">{item.username}</span>\n                {item.crisisDetected && (\n                  <span className=\"px-2 py-0.5 bg-red-500 text-white text-xs rounded-full\">Crisis</span>\n                )}\n                {item.autoFlagged && (\n                  <span className=\"px-2 py-0.5 bg-purple-500 text-white text-xs rounded-full\">Auto-flagged</span>\n                )}\n              </div>\n              <p className=\"text-xs text-gray-500\">\n                {formatDistanceToNow(item.timestamp, { addSuffix: true })}\n              </p>\n            </div>\n          </div>\n          <button\n            onClick={() => setShowDetails(!showDetails)}\n            className=\"text-gray-400 hover:text-gray-600\"\n          >\n            <Eye className=\"h-4 w-4\" />\n          </button>\n        </div>\n\n        {/* Content Preview */}\n        <div className=\"mb-3\">\n          <p className=\"text-sm text-gray-700 line-clamp-2\">{item.content}</p>\n        </div>\n\n        {/* Report Reasons */}\n        <div className=\"flex flex-wrap gap-2 mb-3\">\n          {item.reportReasons.map((reason, index) => (\n            <span key={index} className=\"px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded\">\n              {reason}\n            </span>\n          ))}\n          <span className=\"px-2 py-1 bg-blue-100 text-blue-600 text-xs rounded\">\n            {item.reportedBy.length} reports\n          </span>\n        </div>\n\n        {/* Expanded Details */}\n        {showDetails && (\n          <div className=\"border-t pt-3 mt-3 space-y-3\">\n            <div>\n              <label htmlFor={`full-content-${item.id}`} className=\"block text-xs font-medium text-gray-700 mb-1\">Full Content</label>\n              <div id={`full-content-${item.id}`} className=\"p-2 bg-gray-50 rounded text-sm text-gray-700\">\n                {item.content}\n              </div>\n            </div>\n            \n            <div>\n              <label htmlFor={`mod-notes-${item.id}`} className=\"block text-xs font-medium text-gray-700 mb-1\">Moderation Notes</label>\n              <textarea\n                id={`mod-notes-${item.id}`}\n                value={actionNotes}\n                onChange={(e) => setActionNotes(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"Add notes about your decision...\"\n                rows={2}\n              />\n            </div>\n          </div>\n        )}\n\n        {/* Actions */}\n        <div className=\"flex items-center justify-between mt-4 pt-3 border-t\">\n          {item.crisisDetected ? (\n            <button\n              onClick={() => onAction('escalate-crisis', actionNotes)}\n              className=\"px-3 py-1.5 bg-red-600 text-white text-sm rounded-lg hover:bg-red-700 transition-colors\"\n            >\n              Escalate to Crisis Team\n            </button>\n          ) : (\n            <div className=\"flex items-center space-x-2\">\n              <button\n                onClick={() => onAction('approve', actionNotes)}\n                className=\"px-3 py-1.5 bg-green-600 text-white text-sm rounded-lg hover:bg-green-700 transition-colors flex items-center space-x-1\"\n              >\n                <CheckCircle className=\"h-4 w-4\" />\n                <span>Approve</span>\n              </button>\n              <button\n                onClick={() => onAction('remove', actionNotes)}\n                className=\"px-3 py-1.5 bg-orange-600 text-white text-sm rounded-lg hover:bg-orange-700 transition-colors flex items-center space-x-1\"\n              >\n                <XCircle className=\"h-4 w-4\" />\n                <span>Remove</span>\n              </button>\n              <button\n                onClick={() => onAction('ban', actionNotes)}\n                className=\"px-3 py-1.5 bg-red-600 text-white text-sm rounded-lg hover:bg-red-700 transition-colors flex items-center space-x-1\"\n              >\n                <Ban className=\"h-4 w-4\" />\n                <span>Ban User</span>\n              </button>\n            </div>\n          )}\n          \n          <button\n            onClick={() => onAction('defer', actionNotes)}\n            className=\"px-3 py-1.5 border border-gray-300 text-gray-700 text-sm rounded-lg hover:bg-gray-50 transition-colors\"\n          >\n            Defer\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport function ModerationDashboard() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [selectedFilter, setSelectedFilter] = useState<'all' | 'crisis' | 'auto-flagged' | 'user-reported'>('all');\n  const [selectedPriority, setSelectedPriority] = useState<'all' | 'critical' | 'high' | 'medium' | 'low'>('all');\n  const [stats, setStats] = useState({\n    pendingItems: 0,\n    criticalItems: 0,\n    averageWaitTime: 0,\n    activeModerators: 0,\n  });\n\n  // Mock moderation queue (in production, this would come from the API)\n  const moderationQueue: ModerationItem[] = useMemo(() => [\n    {\n      id: '1',\n      _type: 'post',\n      contentId: 'post-123',\n      content: 'I\\'m feeling really overwhelmed and don\\'t know if I can continue like this...',\n      reportedBy: ['user1', 'user2'],\n      reportReasons: ['Concerning content', 'Potential self-harm'],\n      userId: 'user-456',\n      username: 'AnxiousUser123',\n      timestamp: new Date(Date.now() - 1000 * 60 * 15), // 15 minutes ago\n      status: 'pending',\n      _priority: 'high',\n      crisisDetected: true,\n      autoFlagged: true,\n    },\n    {\n      id: '2',\n      _type: 'comment',\n      contentId: 'comment-789',\n      content: 'This advice is completely wrong and could be harmful to people...',\n      reportedBy: ['user3'],\n      reportReasons: ['Misinformation'],\n      userId: 'user-789',\n      username: 'ConcernedMember',\n      timestamp: new Date(Date.now() - 1000 * 60 * 30), // 30 minutes ago\n      status: 'pending',\n      _priority: 'medium',\n      crisisDetected: false,\n      autoFlagged: false,\n    },\n  ], []);\n\n  // Set up WebSocket listeners for real-time moderation alerts\n  useEffect(() => {\n    const handleModerationAlert = (data: unknown) => {\n      toast.error(`New ${data._priority} priority item in moderation queue`, {\n        duration: 5000,\n        icon: '🚨',\n      });\n      queryClient.invalidateQueries({ queryKey: ['moderation-queue'] });\n    };\n\n    const handleCrisisAlert = (_data: unknown) => {\n      toast.error('Crisis content detected - immediate review needed', {\n        duration: 10000,\n        icon: '🆘',\n      });\n    };\n\n    websocketService.on('moderation:alert', handleModerationAlert);\n    websocketService.on('crisis:detected', handleCrisisAlert);\n\n    return () => {\n      websocketService.off('moderation:alert', handleModerationAlert);\n      websocketService.off('crisis:detected', handleCrisisAlert);\n    };\n  }, [queryClient]);\n\n  // Handle moderation actions\n  const handleAction = async (itemId: string, action: string, notes?: string) => {\n    try {\n      await communityService.moderateContent(itemId, action as unknown, notes);\n      toast.success(`Action \"${action}\" completed successfully`);\n      queryClient.invalidateQueries({ queryKey: ['moderation-queue'] });\n      \n      // If crisis escalation, send immediate alert\n      if (action === 'escalate-crisis') {\n        websocketService.getSocket()?.emit('crisis:escalate', { itemId, notes });\n      }\n    } catch (_error) {\n      toast.error('Failed to complete moderation action');\n    }\n  };\n\n  // Filter moderation items\n  const filteredItems = moderationQueue.filter(item => {\n    if (selectedFilter === 'crisis' && !item.crisisDetected) return false;\n    if (selectedFilter === 'auto-flagged' && !item.autoFlagged) return false;\n    if (selectedFilter === 'user-reported' && item.autoFlagged) return false;\n    \n    if (selectedPriority !== 'all' && item._priority !== selectedPriority) return false;\n    \n    return true;\n  });\n\n  // Calculate stats\n  useEffect(() => {\n    const pending = moderationQueue.filter(item => item.status === 'pending').length;\n    const critical = moderationQueue.filter(item => item._priority === 'critical').length;\n    const _avgWait = moderationQueue.reduce((acc, item) => {\n      return acc + (Date.now() - item.timestamp.getTime());\n    }, 0) / moderationQueue.length / 1000 / 60; // in minutes\n\n    setStats({\n      pendingItems: pending,\n      criticalItems: critical,\n      averageWaitTime: Math.round(_avgWait),\n      activeModerators: 3, // Mock value\n    });\n  }, [moderationQueue]);\n\n  // Since this is an anonymous platform, we'll check for moderation permissions differently\n  // For now, we'll allow access to demonstrate the UI, but in production you'd check against\n  // specific user permissions or a moderation flag\n  if (!user) {\n    return (\n      <div className=\"text-center py-12\">\n        <Shield className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n        <p className=\"text-gray-600\">Please refresh the page to access this area.</p>\n      </div>\n    );\n  }\n  \n  // For demo purposes, show the moderation dashboard\n  // In production, you'd implement proper permission checking\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">Moderation Dashboard</h1>\n            <p className=\"text-gray-600 mt-1\">Keep our community safe and supportive</p>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm font-medium flex items-center space-x-1\">\n              <Activity className=\"h-3 w-3\" />\n              <span>Active</span>\n            </span>\n          </div>\n        </div>\n\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Pending Items</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.pendingItems}</p>\n              </div>\n              <Clock className=\"h-8 w-8 text-gray-400\" />\n            </div>\n          </div>\n          \n          <div className=\"bg-red-50 rounded-lg p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-red-600\">Critical Items</p>\n                <p className=\"text-2xl font-bold text-red-900\">{stats.criticalItems}</p>\n              </div>\n              <AlertTriangle className=\"h-8 w-8 text-red-400\" />\n            </div>\n          </div>\n          \n          <div className=\"bg-blue-50 rounded-lg p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-blue-600\">Avg Wait Time</p>\n                <p className=\"text-2xl font-bold text-blue-900\">{stats.averageWaitTime}m</p>\n              </div>\n              <TrendingUp className=\"h-8 w-8 text-blue-400\" />\n            </div>\n          </div>\n          \n          <div className=\"bg-green-50 rounded-lg p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-green-600\">Active Mods</p>\n                <p className=\"text-2xl font-bold text-green-900\">{stats.activeModerators}</p>\n              </div>\n              <Users className=\"h-8 w-8 text-green-400\" />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4\">\n        <div className=\"flex flex-wrap items-center gap-4\">\n          <div className=\"flex items-center space-x-2\">\n            <label htmlFor=\"moderation-filter\" className=\"text-sm font-medium text-gray-700\">Filter:</label>\n            <select\n              id=\"moderation-filter\"\n              value={selectedFilter}\n              onChange={(e) => setSelectedFilter(e.target.value as unknown)}\n              className=\"px-3 py-1 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            >\n              <option value=\"all\">All Items</option>\n              <option value=\"crisis\">Crisis Content</option>\n              <option value=\"auto-flagged\">Auto-flagged</option>\n              <option value=\"user-reported\">User Reported</option>\n            </select>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <label htmlFor=\"moderation-priority\" className=\"text-sm font-medium text-gray-700\">Priority:</label>\n            <select\n              id=\"moderation-priority\"\n              value={selectedPriority}\n              onChange={(e) => setSelectedPriority(e.target.value as unknown)}\n              className=\"px-3 py-1 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            >\n              <option value=\"all\">All Priorities</option>\n              <option value=\"critical\">Critical</option>\n              <option value=\"high\">High</option>\n              <option value=\"medium\">Medium</option>\n              <option value=\"low\">Low</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* Moderation Queue */}\n      <div className=\"space-y-4\">\n        {filteredItems.length > 0 ? (\n          filteredItems.map((item) => (\n            <ModerationCard\n              key={item.id}\n              item={item}\n              onAction={(action, notes) => handleAction(item.id, action, notes)}\n            />\n          ))\n        ) : (\n          <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-12 text-center\">\n            <CheckCircle className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\n            <p className=\"text-gray-600\">No items in the moderation queue</p>\n            <p className=\"text-sm text-gray-500 mt-2\">Great job keeping the community safe!</p>\n          </div>\n        )}\n      </div>\n\n      {/* Quick Guidelines */}\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n        <h3 className=\"text-sm font-medium text-blue-900 mb-2\">Moderation Guidelines</h3>\n        <ul className=\"text-xs text-blue-700 space-y-1\">\n          <li>• Always prioritize user safety, especially in crisis situations</li>\n          <li>• Document your decisions with clear notes for transparency</li>\n          <li>• Escalate crisis content immediately to trained professionals</li>\n          <li>• Be empathetic but firm when enforcing community guidelines</li>\n          <li>• When in doubt, consult with senior moderators</li>\n        </ul>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\community\\SupportGroups.tsx","messages":[{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":204,"column":15,"nodeType":"JSXOpeningElement","endLine":204,"endColumn":79},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":220,"column":15,"nodeType":"JSXOpeningElement","endLine":220,"endColumn":79},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":236,"column":15,"nodeType":"JSXOpeningElement","endLine":236,"endColumn":79},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must have accessible text.","line":261,"column":15,"nodeType":"JSXOpeningElement","endLine":261,"endColumn":62},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must have accessible text.","line":274,"column":15,"nodeType":"JSXOpeningElement","endLine":274,"endColumn":62},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must have accessible text.","line":292,"column":15,"nodeType":"JSXOpeningElement","endLine":292,"endColumn":62},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must have accessible text.","line":308,"column":15,"nodeType":"JSXOpeningElement","endLine":308,"endColumn":62},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must have accessible text.","line":324,"column":15,"nodeType":"JSXOpeningElement","endLine":324,"endColumn":62},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must have accessible text.","line":340,"column":15,"nodeType":"JSXOpeningElement","endLine":340,"endColumn":62},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":359,"column":15,"nodeType":"JSXOpeningElement","endLine":359,"endColumn":79}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Users, Lock, Globe, UserPlus, Settings, _Calendar, MessageSquare, TrendingUp, Shield, Heart } from 'lucide-react';\nimport { toast } from 'react-hot-toast';\nimport { communityService, SupportGroup, CreateGroupDto } from '../../services/community/communityService';\nimport { useAuth } from '../../hooks/useAuth';\n\ninterface GroupCardProps {\n  group: SupportGroup;\n  onJoin: (_groupId: string) => void;\n  onLeave: (_groupId: string) => void;\n  onManage: (group: SupportGroup) => void;\n}\n\nfunction GroupCard({ group, onJoin, onLeave, onManage }: GroupCardProps) {\n  const { user } = useAuth();\n  const isOwner = user?.id === group.createdBy;\n  const isModerator = group.moderators.includes(user?.id || '');\n\n  const getCategoryColor = (category: string) => {\n    const colors: Record<string, string> = {\n      anxiety: 'bg-purple-100 text-purple-700',\n      depression: 'bg-blue-100 text-blue-700',\n      trauma: 'bg-red-100 text-red-700',\n      addiction: 'bg-orange-100 text-orange-700',\n      grief: 'bg-gray-100 text-gray-700',\n      relationships: 'bg-pink-100 text-pink-700',\n      'self-esteem': 'bg-green-100 text-green-700',\n      other: 'bg-indigo-100 text-indigo-700',\n    };\n    return colors[category] || colors.other;\n  };\n\n  return (\n    <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 hover:shadow-lg transition-all duration-200\">\n      {/* Cover Image */}\n      <div className=\"h-32 bg-gradient-to-br from-blue-400 via-purple-500 to-pink-500 rounded-t-xl relative\">\n        {group.isPrivate && (\n          <div className=\"absolute top-3 right-3 bg-white/90 backdrop-blur-sm px-2 py-1 rounded-full flex items-center space-x-1\">\n            <Lock className=\"h-3 w-3 text-gray-700\" />\n            <span className=\"text-xs font-medium text-gray-700\">Private</span>\n          </div>\n        )}\n      </div>\n\n      <div className=\"p-6\">\n        {/* Group Info */}\n        <div className=\"mb-4\">\n          <div className=\"flex items-start justify-between mb-2\">\n            <h3 className=\"text-lg font-bold text-gray-900\">{group.name}</h3>\n            {(isOwner || isModerator) && (\n              <button\n                onClick={() => onManage(group)}\n                className=\"p-1 text-gray-400 hover:text-gray-600 transition-colors\"\n                aria-label=\"Manage group\"\n              >\n                <Settings className=\"h-4 w-4\" />\n              </button>\n            )}\n          </div>\n          \n          <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium ${getCategoryColor(group.category)}`}>\n            {group.category}\n          </span>\n          \n          <p className=\"text-sm text-gray-600 mt-3 line-clamp-2\">{group.description}</p>\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-2 gap-4 mb-4 py-3 border-y border-gray-100\">\n          <div className=\"flex items-center space-x-2\">\n            <Users className=\"h-4 w-4 text-gray-400\" />\n            <span className=\"text-sm text-gray-600\">\n              <span className=\"font-semibold text-gray-900\">{group.memberCount}</span> members\n            </span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <MessageSquare className=\"h-4 w-4 text-gray-400\" />\n            <span className=\"text-sm text-gray-600\">\n              <span className=\"font-semibold text-gray-900\">{group.postCount}</span> posts\n            </span>\n          </div>\n        </div>\n\n        {/* Features */}\n        <div className=\"flex flex-wrap gap-2 mb-4\">\n          {group.settings?.allowAnonymous && (\n            <span className=\"inline-flex items-center space-x-1 px-2 py-1 bg-gray-50 text-gray-600 text-xs rounded-full\">\n              <Shield className=\"h-3 w-3\" />\n              <span>Anonymous posts</span>\n            </span>\n          )}\n          {group.settings?.peerSupport && (\n            <span className=\"inline-flex items-center space-x-1 px-2 py-1 bg-green-50 text-green-600 text-xs rounded-full\">\n              <Heart className=\"h-3 w-3\" />\n              <span>Peer support</span>\n            </span>\n          )}\n          {group.settings?.crisisSupport && (\n            <span className=\"inline-flex items-center space-x-1 px-2 py-1 bg-red-50 text-red-600 text-xs rounded-full\">\n              <Shield className=\"h-3 w-3\" />\n              <span>Crisis support</span>\n            </span>\n          )}\n        </div>\n\n        {/* Action Button */}\n        {group.isMember ? (\n          <div className=\"flex items-center justify-between\">\n            <button\n              onClick={() => onLeave(group.id)}\n              className=\"flex-1 mr-2 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\n            >\n              Leave Group\n            </button>\n            <button\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n            >\n              View Group\n            </button>\n          </div>\n        ) : (\n          <button\n            onClick={() => onJoin(group.id)}\n            className=\"w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2\"\n          >\n            <UserPlus className=\"h-4 w-4\" />\n            <span>{group.requiresApproval ? 'Request to Join' : 'Join Group'}</span>\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\ninterface CreateGroupModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nfunction CreateGroupModal({ isOpen, onClose }: CreateGroupModalProps) {\n  const queryClient = useQueryClient();\n  const [formData, setFormData] = useState<CreateGroupDto>({\n    name: '',\n    description: '',\n    category: 'other' as unknown,\n    isPrivate: false,\n    requiresApproval: false,\n    guidelines: [],\n    settings: {\n      allowAnonymous: true,\n      autoModeration: true,\n      crisisSupport: true,\n      peerSupport: true,\n    },\n  });\n  const [guidelineInput, setGuidelineInput] = useState('');\n\n  const mutation = useMutation({\n    mutationFn: (data: CreateGroupDto) => communityService.createGroup(data),\n    onSuccess: () => {\n      toast.success('Support group created successfully!');\n      queryClient.invalidateQueries({ queryKey: ['groups'] });\n      onClose();\n    },\n    onError: (_error: unknown) => {\n      toast._error(_error.message || 'Failed to create group');\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    mutation.mutate(formData);\n  };\n\n  const addGuideline = () => {\n    if (guidelineInput.trim()) {\n      setFormData(prev => ({\n        ...prev,\n        guidelines: [...(prev.guidelines || []), guidelineInput.trim()],\n      }));\n      setGuidelineInput('');\n    }\n  };\n\n  const removeGuideline = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      guidelines: prev.guidelines?.filter((_, i) => i !== index),\n    }));\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white rounded-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"p-6\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Create Support Group</h2>\n\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {/* Name */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Group Name <span className=\"text-red-500\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                value={formData.name}\n                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"e.g., Anxiety Support Circle\"\n                required\n                maxLength={100}\n              />\n            </div>\n\n            {/* Description */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Description <span className=\"text-red-500\">*</span>\n              </label>\n              <textarea\n                value={formData.description}\n                onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"Describe the purpose and focus of your support group...\"\n                rows={3}\n                required\n                maxLength={500}\n              />\n            </div>\n\n            {/* Category */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Category <span className=\"text-red-500\">*</span>\n              </label>\n              <select\n                value={formData.category}\n                onChange={(e) => setFormData(prev => ({ ...prev, category: e.target.value as unknown }))}\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                required\n              >\n                <option value=\"\">Select a category...</option>\n                <option value=\"anxiety\">Anxiety</option>\n                <option value=\"depression\">Depression</option>\n                <option value=\"trauma\">Trauma & PTSD</option>\n                <option value=\"addiction\">Addiction Recovery</option>\n                <option value=\"grief\">Grief & Loss</option>\n                <option value=\"relationships\">Relationships</option>\n                <option value=\"self-esteem\">Self-Esteem</option>\n                <option value=\"other\">Other</option>\n              </select>\n            </div>\n\n            {/* Privacy Settings */}\n            <div className=\"space-y-3 p-4 bg-gray-50 rounded-lg\">\n              <h3 className=\"text-sm font-medium text-gray-900\">Privacy Settings</h3>\n              \n              <label className=\"flex items-center space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.isPrivate}\n                  onChange={(e) => setFormData(prev => ({ ...prev, isPrivate: e.target.checked }))}\n                  className=\"h-4 w-4 text-blue-600 rounded focus:ring-blue-500\"\n                />\n                <div>\n                  <span className=\"text-sm font-medium text-gray-700\">Private Group</span>\n                  <p className=\"text-xs text-gray-500\">Only members can see posts and activities</p>\n                </div>\n              </label>\n\n              <label className=\"flex items-center space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.requiresApproval}\n                  onChange={(e) => setFormData(prev => ({ ...prev, requiresApproval: e.target.checked }))}\n                  className=\"h-4 w-4 text-blue-600 rounded focus:ring-blue-500\"\n                />\n                <div>\n                  <span className=\"text-sm font-medium text-gray-700\">Require Approval</span>\n                  <p className=\"text-xs text-gray-500\">New members must be approved by moderators</p>\n                </div>\n              </label>\n            </div>\n\n            {/* Features */}\n            <div className=\"space-y-3 p-4 bg-gray-50 rounded-lg\">\n              <h3 className=\"text-sm font-medium text-gray-900\">Group Features</h3>\n              \n              <label className=\"flex items-center space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.settings?.allowAnonymous}\n                  onChange={(e) => setFormData(prev => ({\n                    ...prev,\n                    settings: { ...prev.settings!, allowAnonymous: e.target.checked },\n                  }))}\n                  className=\"h-4 w-4 text-blue-600 rounded focus:ring-blue-500\"\n                />\n                <div>\n                  <span className=\"text-sm font-medium text-gray-700\">Allow Anonymous Posts</span>\n                  <p className=\"text-xs text-gray-500\">Members can post without revealing their identity</p>\n                </div>\n              </label>\n\n              <label className=\"flex items-center space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.settings?.autoModeration}\n                  onChange={(e) => setFormData(prev => ({\n                    ...prev,\n                    settings: { ...prev.settings!, autoModeration: e.target.checked },\n                  }))}\n                  className=\"h-4 w-4 text-blue-600 rounded focus:ring-blue-500\"\n                />\n                <div>\n                  <span className=\"text-sm font-medium text-gray-700\">Auto-Moderation</span>\n                  <p className=\"text-xs text-gray-500\">Automatically filter harmful content</p>\n                </div>\n              </label>\n\n              <label className=\"flex items-center space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.settings?.crisisSupport}\n                  onChange={(e) => setFormData(prev => ({\n                    ...prev,\n                    settings: { ...prev.settings!, crisisSupport: e.target.checked },\n                  }))}\n                  className=\"h-4 w-4 text-blue-600 rounded focus:ring-blue-500\"\n                />\n                <div>\n                  <span className=\"text-sm font-medium text-gray-700\">Crisis Support Integration</span>\n                  <p className=\"text-xs text-gray-500\">Enable crisis detection and support features</p>\n                </div>\n              </label>\n\n              <label className=\"flex items-center space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.settings?.peerSupport}\n                  onChange={(e) => setFormData(prev => ({\n                    ...prev,\n                    settings: { ...prev.settings!, peerSupport: e.target.checked },\n                  }))}\n                  className=\"h-4 w-4 text-blue-600 rounded focus:ring-blue-500\"\n                />\n                <div>\n                  <span className=\"text-sm font-medium text-gray-700\">Peer Support Matching</span>\n                  <p className=\"text-xs text-gray-500\">Connect members with similar experiences</p>\n                </div>\n              </label>\n            </div>\n\n            {/* Guidelines */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Community Guidelines\n              </label>\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <input\n                  type=\"text\"\n                  value={guidelineInput}\n                  onChange={(e) => setGuidelineInput(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addGuideline())}\n                  className=\"flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"Add a guideline...\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={addGuideline}\n                  className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n                >\n                  Add\n                </button>\n              </div>\n              <ul className=\"space-y-1\">\n                {formData.guidelines?.map((guideline, index) => (\n                  <li key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                    <span className=\"text-sm text-gray-700\">{guideline}</span>\n                    <button\n                      type=\"button\"\n                      onClick={() => removeGuideline(index)}\n                      className=\"text-red-500 hover:text-red-700\"\n                    >\n                      ×\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <button\n                type=\"button\"\n                onClick={onClose}\n                className=\"px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\n              >\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                disabled={mutation.isPending}\n                className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {mutation.isPending ? 'Creating...' : 'Create Group'}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport function SupportGroups() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [searchQuery, setSearchQuery] = useState('');\n\n  // Fetch groups\n  const { data, _isLoading, _error } = useQuery({\n    queryKey: ['groups', selectedCategory, searchQuery],\n    queryFn: () => communityService.getGroups({\n      category: selectedCategory === 'all' ? undefined : selectedCategory,\n      search: searchQuery || undefined,\n      limit: 12,\n    }),\n  });\n\n  // Join group mutation\n  const joinMutation = useMutation({\n    mutationFn: (_groupId: string) => communityService.joinGroup(_groupId),\n    onSuccess: () => {\n      toast.success('Successfully joined the group!');\n      queryClient.invalidateQueries({ queryKey: ['groups'] });\n    },\n    onError: () => {\n      toast._error('Failed to join group');\n    },\n  });\n\n  // Leave group mutation\n  const leaveMutation = useMutation({\n    mutationFn: (_groupId: string) => communityService.leaveGroup(_groupId),\n    onSuccess: () => {\n      toast.success('You have left the group');\n      queryClient.invalidateQueries({ queryKey: ['groups'] });\n    },\n    onError: () => {\n      toast._error('Failed to leave group');\n    },\n  });\n\n  const handleManageGroup = (group: SupportGroup) => {\n    // Navigate to group management page\n    window.location.href = `/community/groups/${group.id}/manage`;\n  };\n\n  const categories = [\n    { value: 'all', label: 'All Groups', icon: Globe },\n    { value: 'anxiety', label: 'Anxiety', icon: Heart },\n    { value: 'depression', label: 'Depression', icon: Heart },\n    { value: 'trauma', label: 'Trauma', icon: Shield },\n    { value: 'addiction', label: 'Addiction', icon: Heart },\n    { value: 'grief', label: 'Grief', icon: Heart },\n    { value: 'relationships', label: 'Relationships', icon: Users },\n    { value: 'self-esteem', label: 'Self-Esteem', icon: TrendingUp },\n  ];\n\n  if (_isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  if (_error) {\n    return (\n      <div className=\"text-center py-12\">\n        <p className=\"text-red-600\">Failed to load support groups. Please try again later.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold text-gray-900\">Support Groups</h2>\n        {user && (\n          <button\n            onClick={() => setShowCreateModal(true)}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2\"\n          >\n            <UserPlus className=\"h-4 w-4\" />\n            <span>Create Group</span>\n          </button>\n        )}\n      </div>\n\n      {/* Search and Filters */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center space-x-4\">\n          <input\n            type=\"text\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            placeholder=\"Search groups...\"\n            className=\"flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          />\n        </div>\n\n        <div className=\"flex items-center space-x-2 overflow-x-auto pb-2\">\n          {categories.map((category) => {\n            const Icon = category.icon;\n            return (\n              <button\n                key={category.value}\n                onClick={() => setSelectedCategory(category.value)}\n                className={`flex items-center space-x-2 px-4 py-2 rounded-lg text-sm font-medium whitespace-nowrap transition-colors ${\n                  selectedCategory === category.value\n                    ? 'bg-blue-100 text-blue-700'\n                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n                }`}\n              >\n                <Icon className=\"h-4 w-4\" />\n                <span>{category.label}</span>\n              </button>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Groups Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {data?.groups && data.groups.length > 0 ? (\n          data.groups.map((group) => (\n            <GroupCard\n              key={group.id}\n              group={group}\n              onJoin={joinMutation.mutate}\n              onLeave={leaveMutation.mutate}\n              onManage={handleManageGroup}\n            />\n          ))\n        ) : (\n          <div className=\"col-span-full text-center py-12 bg-gray-50 rounded-lg\">\n            <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <p className=\"text-gray-600\">No groups found. Create one to get started!</p>\n          </div>\n        )}\n      </div>\n\n      {/* Create Group Modal */}\n      <CreateGroupModal\n        isOpen={showCreateModal}\n        onClose={() => setShowCreateModal(false)}\n      />\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\console\\ConsoleBootSequence.tsx","messages":[{"ruleId":"jsx-a11y/no-static-element-interactions","severity":2,"message":"Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.","line":302,"column":9,"nodeType":"JSXOpeningElement","endLine":311,"endColumn":11}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { Sparkles, Heart, Shield, Zap } from 'lucide-react';\r\nimport { useConsoleSound } from '../../services/console/ConsoleSoundSystem';\r\n\r\ninterface ConsoleBootSequenceProps {\r\n  onBootComplete: () => void;\r\n  skipBoot?: boolean;\r\n}\r\n\r\nexport function ConsoleBootSequence({ onBootComplete, skipBoot = false }: ConsoleBootSequenceProps) {\r\n  const [bootStage, setBootStage] = useState(0);\r\n  const [showSkip, setShowSkip] = useState(false);\r\n  const { playSound } = useConsoleSound();\r\n\r\n  // Boot sequence stages - wrapped in useMemo to prevent recreating on every render\r\n  const bootStages = useMemo(() => [\r\n    { id: 0, duration: 1500, name: 'initializing' },\r\n    { id: 1, duration: 2000, name: 'logo' },\r\n    { id: 2, duration: 1500, name: 'loading' },\r\n    { id: 3, duration: 1000, name: 'ready' },\r\n  ], []);\r\n\r\n  useEffect(() => {\r\n    if (skipBoot) {\r\n      onBootComplete();\r\n      return;\r\n    }\r\n\r\n    // Show skip button after 2 seconds\r\n    const _skipTimer = setTimeout(() => {\r\n      setShowSkip(true);\r\n    }, 2000);\r\n\r\n    // Play startup sound\r\n    playSound('startup');\r\n\r\n    // Progress through boot stages\r\n    const _timer = setTimeout(() => {\r\n      if (bootStage < bootStages.length - 1) {\r\n        setBootStage(bootStage + 1);\r\n      } else {\r\n        // Boot complete\r\n        setTimeout(onBootComplete, 500);\r\n      }\r\n    }, bootStages[bootStage]?.duration || 1000);\r\n\r\n    return () => {\r\n      clearTimeout(_timer);\r\n      clearTimeout(_skipTimer);\r\n    };\r\n  }, [bootStage, onBootComplete, skipBoot, playSound, bootStages]);\r\n\r\n  const handleSkip = () => {\r\n    onBootComplete();\r\n  };\r\n\r\n  if (skipBoot) return null;\r\n\r\n  return (\r\n    <AnimatePresence>\r\n      <motion.div\r\n        initial={{ opacity: 0 }}\r\n        animate={{ opacity: 1 }}\r\n        exit={{ opacity: 0 }}\r\n        className=\"fixed inset-0 z-50 bg-black flex items-center justify-center overflow-hidden\"\r\n      >\r\n        {/* Dynamic background */}\r\n        <div className=\"absolute inset-0\">\r\n          <motion.div\r\n            animate={{\r\n              background: [\r\n                'radial-gradient(circle at 30% 40%, #1a1a1a 0%, #000000 70%)',\r\n                'radial-gradient(circle at 70% 60%, #1e3a8a 0%, #000000 70%)',\r\n                'radial-gradient(circle at 50% 50%, #7c3aed 0%, #000000 70%)',\r\n                'radial-gradient(circle at 50% 50%, #059669 0%, #000000 70%)',\r\n              ]\r\n            }}\r\n            transition={{\r\n              duration: 6,\r\n              ease: 'easeInOut',\r\n            }}\r\n            className=\"w-full h-full\"\r\n          />\r\n          \r\n          {/* Animated particles */}\r\n          {Array.from({ length: 20 }).map((_, i) => (\r\n            <motion.div\r\n              key={i}\r\n              initial={{\r\n                x: Math.random() * window.innerWidth,\r\n                y: Math.random() * window.innerHeight,\r\n                opacity: 0,\r\n              }}\r\n              animate={{\r\n                x: Math.random() * window.innerWidth,\r\n                y: Math.random() * window.innerHeight,\r\n                opacity: [0, 1, 0],\r\n              }}\r\n              transition={{\r\n                duration: 4 + Math.random() * 4,\r\n                repeat: Infinity,\r\n                delay: Math.random() * 2,\r\n              }}\r\n              className=\"absolute w-1 h-1 bg-blue-400 rounded-full blur-sm\"\r\n            />\r\n          ))}\r\n        </div>\r\n\r\n        {/* Boot sequence content */}\r\n        <div className=\"relative z-10 text-center\">\r\n          {bootStage === 0 && (\r\n            <motion.div\r\n              initial={{ opacity: 0, scale: 0.5 }}\r\n              animate={{ opacity: 1, scale: 1 }}\r\n              exit={{ opacity: 0, scale: 1.5 }}\r\n              transition={{ duration: 1 }}\r\n            >\r\n              <div className=\"text-white font-mono text-sm mb-4 opacity-60\">\r\n                INITIALIZING ASTRAL CORE SYSTEM...\r\n              </div>\r\n              <motion.div\r\n                animate={{ rotate: 360 }}\r\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\r\n                className=\"w-12 h-12 border-2 border-blue-500/30 border-t-blue-500 rounded-full mx-auto\"\r\n              />\r\n            </motion.div>\r\n          )}\r\n\r\n          {bootStage === 1 && (\r\n            <motion.div\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              exit={{ opacity: 0, y: -20 }}\r\n              transition={{ duration: 0.8 }}\r\n              className=\"text-center\"\r\n            >\r\n              {/* Logo animation */}\r\n              <motion.div\r\n                initial={{ scale: 0.3, opacity: 0 }}\r\n                animate={{ scale: 1, opacity: 1 }}\r\n                transition={{\r\n                  type: 'spring',\r\n                  stiffness: 200,\r\n                  damping: 20,\r\n                  delay: 0.2\r\n                }}\r\n                className=\"mb-8\"\r\n              >\r\n                <div className=\"relative\">\r\n                  <motion.div\r\n                    animate={{\r\n                      boxShadow: [\r\n                        '0 0 20px rgba(59, 130, 246, 0.5)',\r\n                        '0 0 40px rgba(139, 92, 246, 0.7)',\r\n                        '0 0 20px rgba(59, 130, 246, 0.5)',\r\n                      ]\r\n                    }}\r\n                    transition={{ duration: 2, repeat: Infinity }}\r\n                    className=\"w-24 h-24 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-6\"\r\n                  >\r\n                    <Sparkles className=\"w-12 h-12 text-white\" />\r\n                  </motion.div>\r\n                  \r\n                  {/* Orbital rings */}\r\n                  <motion.div\r\n                    animate={{ rotate: 360 }}\r\n                    transition={{ duration: 10, repeat: Infinity, ease: 'linear' }}\r\n                    className=\"absolute inset-0 w-32 h-32 -m-4 mx-auto\"\r\n                  >\r\n                    <div className=\"w-full h-full border border-blue-400/30 rounded-full\" />\r\n                  </motion.div>\r\n                  \r\n                  <motion.div\r\n                    animate={{ rotate: -360 }}\r\n                    transition={{ duration: 15, repeat: Infinity, ease: 'linear' }}\r\n                    className=\"absolute inset-0 w-40 h-40 -m-8 mx-auto\"\r\n                  >\r\n                    <div className=\"w-full h-full border border-purple-400/20 rounded-full\" />\r\n                  </motion.div>\r\n                </div>\r\n              </motion.div>\r\n\r\n              <motion.div\r\n                initial={{ opacity: 0 }}\r\n                animate={{ opacity: 1 }}\r\n                transition={{ delay: 1 }}\r\n              >\r\n                <h1 className=\"text-4xl font-bold text-white mb-2\">\r\n                  ASTRAL CORE\r\n                </h1>\r\n                <p className=\"text-blue-300 text-lg font-light tracking-wide\">\r\n                  Mental Health Console\r\n                </p>\r\n              </motion.div>\r\n            </motion.div>\r\n          )}\r\n\r\n          {bootStage === 2 && (\r\n            <motion.div\r\n              initial={{ opacity: 0 }}\r\n              animate={{ opacity: 1 }}\r\n              exit={{ opacity: 0 }}\r\n              className=\"text-center\"\r\n            >\r\n              <div className=\"text-white text-2xl font-bold mb-6\">\r\n                Loading Your Wellness Profile\r\n              </div>\r\n              \r\n              {/* Progress indicators */}\r\n              <div className=\"space-y-4 mb-8\">\r\n                {[\r\n                  { icon: <Heart className=\"w-5 h-5\" />, label: 'Wellness Data', delay: 0 },\r\n                  { icon: <Shield className=\"w-5 h-5\" />, label: 'Security Protocols', delay: 0.5 },\r\n                  { icon: <Zap className=\"w-5 h-5\" />, label: 'System Ready', delay: 1 },\r\n                ].map((item, index) => (\r\n                  <motion.div\r\n                    key={index}\r\n                    initial={{ opacity: 0, x: -20 }}\r\n                    animate={{ opacity: 1, x: 0 }}\r\n                    transition={{ delay: item.delay }}\r\n                    className=\"flex items-center justify-center space-x-3 text-gray-300\"\r\n                  >\r\n                    <motion.div\r\n                      animate={{ scale: [1, 1.2, 1] }}\r\n                      transition={{ \r\n                        delay: item.delay + 0.5,\r\n                        duration: 0.5\r\n                      }}\r\n                      className=\"text-green-400\"\r\n                    >\r\n                      {item.icon}\r\n                    </motion.div>\r\n                    <span>{item.label}</span>\r\n                    <motion.div\r\n                      initial={{ opacity: 0 }}\r\n                      animate={{ opacity: 1 }}\r\n                      transition={{ delay: item.delay + 0.8 }}\r\n                      className=\"text-green-400 font-bold\"\r\n                    >\r\n                      ✓\r\n                    </motion.div>\r\n                  </motion.div>\r\n                ))}\r\n              </div>\r\n\r\n              {/* Loading bar */}\r\n              <div className=\"w-80 h-2 bg-gray-800 rounded-full mx-auto overflow-hidden\">\r\n                <motion.div\r\n                  initial={{ width: '0%' }}\r\n                  animate={{ width: '100%' }}\r\n                  transition={{ duration: 1.2, ease: 'easeInOut' }}\r\n                  className=\"h-full bg-gradient-to-r from-blue-500 to-green-500 rounded-full\"\r\n                />\r\n              </div>\r\n            </motion.div>\r\n          )}\r\n\r\n          {bootStage === 3 && (\r\n            <motion.div\r\n              initial={{ opacity: 0, scale: 0.8 }}\r\n              animate={{ opacity: 1, scale: 1 }}\r\n              transition={{ type: 'spring', stiffness: 200, damping: 20 }}\r\n              className=\"text-center\"\r\n            >\r\n              <motion.div\r\n                animate={{\r\n                  textShadow: [\r\n                    '0 0 10px rgba(34, 197, 94, 0.5)',\r\n                    '0 0 20px rgba(34, 197, 94, 0.8)',\r\n                    '0 0 10px rgba(34, 197, 94, 0.5)',\r\n                  ]\r\n                }}\r\n                transition={{ duration: 1, repeat: 3 }}\r\n                className=\"text-6xl font-bold text-green-400 mb-4\"\r\n              >\r\n                READY\r\n              </motion.div>\r\n              <p className=\"text-white text-xl\">\r\n                Welcome to your mental wellness console\r\n              </p>\r\n            </motion.div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Skip button */}\r\n        <AnimatePresence>\r\n          {showSkip && (\r\n            <motion.button\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              exit={{ opacity: 0 }}\r\n              onClick={handleSkip}\r\n              className=\"fixed bottom-8 right-8 px-4 py-2 bg-gray-800/80 hover:bg-gray-700/80 text-white rounded-lg border border-gray-600/50 hover:border-gray-500/50 transition-all duration-200 backdrop-blur-md text-sm\"\r\n            >\r\n              Press SPACE to skip\r\n            </motion.button>\r\n          )}\r\n        </AnimatePresence>\r\n\r\n        {/* Handle spacebar skip */}\r\n        <div\r\n          className=\"fixed inset-0 z-0\"\r\n          onKeyDown={(e) => {\r\n            if (e.code === 'Space' && showSkip) {\r\n              e.preventDefault();\r\n              handleSkip();\r\n            }\r\n          }}\r\n          tabIndex={-1}\r\n        />\r\n      </motion.div>\r\n    </AnimatePresence>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\console\\ConsoleFocusable.tsx","messages":[{"ruleId":"jsx-a11y/no-noninteractive-tabindex","severity":2,"message":"`tabIndex` should only be declared on interactive elements.","line":70,"column":7,"nodeType":"JSXAttribute","endLine":70,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useEffect } from 'react';\r\nimport { useConsoleNavigation } from '../../hooks/useConsoleNavigation';\r\n\r\ninterface ConsoleFocusableProps {\r\n  id: string;\r\n  group: string;\r\n  priority?: number;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  onFocus?: () => void;\r\n  onActivate?: () => void;\r\n}\r\n\r\nexport function ConsoleFocusable({\r\n  id,\r\n  group,\r\n  priority = 0,\r\n  children,\r\n  className = '',\r\n  onFocus,\r\n  onActivate,\r\n}: ConsoleFocusableProps) {\r\n  const elementRef = useRef<HTMLDivElement>(null);\r\n  const { registerFocusable, unregisterFocusable } = useConsoleNavigation();\r\n\r\n  useEffect(() => {\r\n    if (elementRef.current) {\r\n      registerFocusable({\r\n        id,\r\n        element: elementRef.current,\r\n        priority,\r\n        group,\r\n      });\r\n\r\n      // Add console navigation classes\r\n      elementRef.current.classList.add('console-focusable');\r\n      \r\n      return () => {\r\n        unregisterFocusable(_id);\r\n      };\r\n    }\r\n  }, [id, group, priority, registerFocusable, unregisterFocusable]);\r\n\r\n  // Handle focus events\r\n  useEffect(() => {\r\n    const element = elementRef.current;\r\n    if (!element) return;\r\n\r\n    const handleFocus = () => {\r\n      onFocus?.();\r\n    };\r\n\r\n    const handleClick = () => {\r\n      onActivate?.();\r\n    };\r\n\r\n    element.addEventListener('focus', handleFocus);\r\n    element.addEventListener('click', handleClick);\r\n\r\n    return () => {\r\n      element.removeEventListener('focus', handleFocus);\r\n      element.removeEventListener('click', handleClick);\r\n    };\r\n  }, [onFocus, onActivate]);\r\n\r\n  return (\r\n    <div\r\n      ref={elementRef}\r\n      className={`console-focusable ${className}`}\r\n      tabIndex={0}\r\n      data-console-id={id}\r\n      data-console-group={group}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Add console focus styles\r\nconst consoleStyles = `\r\n.console-focusable {\r\n  transition: all 0.2s ease-out;\r\n  position: relative;\r\n}\r\n\r\n.console-focused {\r\n  transform: scale(1.02);\r\n  box-shadow: 0 0 20px rgba(59, 130, 246, 0.4), 0 0 40px rgba(59, 130, 246, 0.2) !important;\r\n  border-color: rgb(59 130 246 / 0.5) !important;\r\n  z-index: 10;\r\n}\r\n\r\n.console-focused::before {\r\n  content: '';\r\n  position: absolute;\r\n  inset: -2px;\r\n  background: linear-gradient(45deg, #3b82f6, #8b5cf6, #3b82f6);\r\n  border-radius: inherit;\r\n  z-index: -1;\r\n  animation: console-pulse 2s linear infinite;\r\n}\r\n\r\n.console-activated {\r\n  transform: scale(0.98);\r\n  transition: transform 0.1s ease-out;\r\n}\r\n\r\n@keyframes console-pulse {\r\n  0%, 100% { opacity: 0.5; }\r\n  50% { opacity: 0.8; }\r\n}\r\n\r\n/* Gamepad mode indicators */\r\n.console-navigation-gamepad .console-focusable {\r\n  border: 2px solid transparent;\r\n}\r\n\r\n.console-navigation-gamepad .console-focused {\r\n  border-color: rgb(59 130 246);\r\n  background: rgba(59, 130, 246, 0.1) !important;\r\n}\r\n\r\n/* Keyboard mode styling */\r\n.console-navigation-keyboard .console-focused {\r\n  outline: 2px solid rgb(59 130 246);\r\n  outline-offset: 2px;\r\n}\r\n`;\r\n\r\n// Inject styles when component is first imported\r\nif (typeof document !== 'undefined') {\r\n  const styleElement = document.createElement('style');\r\n  styleElement.textContent = consoleStyles;\r\n  document.head.appendChild(styleElement);\r\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\ConsoleCrisisSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\CrisisButton.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\CrisisButton.tsx","messages":[{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called in function \"_CrisisButton: React.FC<CrisisButtonProps>\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":43,"column":31,"nodeType":"Identifier","endLine":43,"endColumn":39},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called in function \"_CrisisButton: React.FC<CrisisButtonProps>\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":44,"column":37,"nodeType":"Identifier","endLine":44,"endColumn":45},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called in function \"_CrisisButton: React.FC<CrisisButtonProps>\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":45,"column":37,"nodeType":"Identifier","endLine":45,"endColumn":45},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called in function \"_CrisisButton: React.FC<CrisisButtonProps>\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":46,"column":29,"nodeType":"Identifier","endLine":46,"endColumn":37},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called in function \"_CrisisButton: React.FC<CrisisButtonProps>\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":47,"column":57,"nodeType":"Identifier","endLine":47,"endColumn":65},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useRef\" is called in function \"_CrisisButton: React.FC<CrisisButtonProps>\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":48,"column":23,"nodeType":"Identifier","endLine":48,"endColumn":29},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useRef\" is called in function \"_CrisisButton: React.FC<CrisisButtonProps>\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":49,"column":21,"nodeType":"Identifier","endLine":49,"endColumn":27},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useRef\" is called in function \"_CrisisButton: React.FC<CrisisButtonProps>\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":50,"column":20,"nodeType":"Identifier","endLine":50,"endColumn":26},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useAnalytics\" is called in function \"_CrisisButton: React.FC<CrisisButtonProps>\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":51,"column":26,"nodeType":"Identifier","endLine":51,"endColumn":38},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallback\" is called in function \"_CrisisButton: React.FC<CrisisButtonProps>\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":67,"column":29,"nodeType":"Identifier","endLine":67,"endColumn":40},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" is called in function \"_CrisisButton: React.FC<CrisisButtonProps>\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":124,"column":3,"nodeType":"Identifier","endLine":124,"endColumn":12},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" is called in function \"_CrisisButton: React.FC<CrisisButtonProps>\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":136,"column":3,"nodeType":"Identifier","endLine":136,"endColumn":12},{"ruleId":"jsx-a11y/no-redundant-roles","severity":2,"message":"The element a has an implicit role of link. Defining this explicitly is redundant and should be avoided.","line":220,"column":25,"nodeType":"JSXOpeningElement","endLine":227,"endColumn":26}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useRef, useEffect } from 'react';\nimport { AlertCircle, Phone, MessageCircle, MapPin, Heart, Loader2 } from 'lucide-react';\nimport axios from 'axios';\nimport { useAnalytics } from '../../hooks/useAnalytics';\nimport { logger } from '@/utils/logger';\n\ninterface CrisisResource {\n  name: string;\n  number?: string;\n  text?: string;\n  address?: string;\n  distance?: string;\n  url?: string;\n  available?: boolean;\n}\n\ninterface CrisisResources {\n  hotlines: CrisisResource[];\n  localResources: CrisisResource[];\n  onlineSupport: CrisisResource[];\n}\n\ninterface CrisisButtonProps {\n  className?: string;\n  size?: 'small' | 'medium' | 'large';\n  variant?: 'primary' | 'secondary';\n  onCrisisActivated?: () => void;\n}\n\nconst OFFLINE_RESOURCES: CrisisResource[] = [\n  { name: '988 Suicide & Crisis Lifeline', number: '988', available: true },\n  { name: 'Crisis Text Line', text: 'Text HOME to 741741', available: true },\n  { name: 'Veterans Crisis Line', number: '1-800-273-8255', available: true },\n  { name: 'SAMHSA National Helpline', number: '1-800-662-4357', available: true },\n];\n\nconst _CrisisButton: React.FC<CrisisButtonProps> = ({ \n  className = '', \n  size = 'medium',\n  variant = 'primary',\n  onCrisisActivated\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [resources, setResources] = useState<CrisisResources | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [professionalAlerted, setProfessionalAlerted] = useState(false);\n  const debounceRef = useRef<NodeJS.Timeout | null>(null);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const modalRef = useRef<HTMLDivElement>(null);\n  const { trackEvent } = useAnalytics();\n\n  // Size classes for button\n  const sizeClasses = {\n    small: 'px-3 py-1.5 text-sm min-w-[44px] min-h-[44px]',\n    medium: 'px-4 py-2 text-base min-w-[44px] min-h-[44px]',\n    large: 'px-6 py-3 text-lg min-w-[44px] min-h-[44px]'\n  };\n\n  // Variant classes for button\n  const variantClasses = {\n    primary: 'bg-red-600 hover:bg-red-700 text-white active:bg-red-800',\n    secondary: 'bg-red-100 hover:bg-red-200 text-red-700 active:bg-red-300'\n  };\n\n  // Handle crisis button click with debouncing\n  const handleCrisisClick = useCallback(async () => {\n    // Clear any existing debounce\n    if (debounceRef.current) {\n      clearTimeout(debounceRef.current);\n    }\n\n    // Debounce rapid clicks\n    debounceRef.current = setTimeout(async () => {\n      setIsOpen(true);\n      setIsLoading(true);\n      setError(null);\n      setProfessionalAlerted(false);\n\n      // Track crisis button usage\n      try {\n        await trackEvent({\n          category: 'crisis',\n          action: 'button_clicked',\n          label: 'crisis_support_activated'\n        });\n      } catch (error) {\n        logger.error('Failed to track event', 'CrisisButton', error);\n      }\n\n      // Trigger crisis callback if provided\n      if (onCrisisActivated) {\n        onCrisisActivated();\n      }\n\n      try {\n        // Make crisis alert API call\n        const [alertResponse, resourcesResponse] = await Promise.all([\n          axios.post('/api/crisis/alert', {\n            severity: 'high',\n            timestamp: Date.now(),\n            userAgent: navigator.userAgent\n          }),\n          axios.get('/api/crisis/resources')\n        ]);\n\n        setResources(resourcesResponse.data);\n        setProfessionalAlerted(alertResponse.data.professionalAlerted);\n        setIsLoading(false);\n      } catch (error) {\n        logger.error('Crisis API error', 'CrisisButton', error);\n        setError('Network undefined - showing offline resources');\n        setResources({\n          hotlines: OFFLINE_RESOURCES,\n          localResources: [],\n          onlineSupport: []\n        });\n        setIsLoading(false);\n      }\n    }, 100); // 100ms debounce\n  }, [onCrisisActivated, trackEvent]);\n\n  // Handle keyboard accessibility\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isOpen && e.key === 'Escape') {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen]);\n\n  // Focus management for accessibility\n  useEffect(() => {\n    if (isOpen && modalRef.current) {\n      const firstFocusable = modalRef.current.querySelector('[tabindex]:not([tabindex=\"-1\"])') as HTMLElement;\n      if (firstFocusable) {\n        firstFocusable.focus();\n      }\n    }\n  }, [isOpen, isLoading]);\n\n  return (\n    <>\n      <button\n        ref={buttonRef}\n        onClick={handleCrisisClick}\n        className={`\n          inline-flex items-center gap-2 font-semibold rounded-lg\n          transition-all duration-200 focus:outline-none focus:ring-2 \n          focus:ring-red-500 focus:ring-offset-2 touch-manipulation\n          ${sizeClasses[size]}\n          ${variantClasses[variant]}\n          ${className}\n        `}\n        aria-label=\"Crisis Help - Get immediate support\"\n        aria-describedby=\"crisis-description\"\n        aria-haspopup=\"dialog\"\n        aria-expanded={isOpen}\n      >\n        <AlertCircle className={size === 'small' ? 'w-4 h-4' : size === 'large' ? 'w-6 h-6' : 'w-5 h-5'} />\n        <span>Crisis Help</span>\n      </button>\n\n      <span id=\"crisis-description\" className=\"sr-only\">\n        Activate this button to get immediate crisis support resources including hotlines, text support, and local emergency services\n      </span>\n\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 p-4\"\n          role=\"dialog\"\n          aria-modal=\"true\"\n          aria-labelledby=\"crisis-modal-title\"\n        >\n          <div \n            ref={modalRef}\n            className=\"bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto\"\n            role=\"document\"\n          >\n            <div className=\"p-6\">\n              <div role=\"alert\" aria-live=\"assertive\" className=\"mb-4\">\n                <h2 id=\"crisis-modal-title\" className=\"text-2xl font-bold text-gray-900 mb-2\">\n                  {isLoading ? 'Connecting to Crisis Support...' : 'Crisis Resources'}\n                </h2>\n                \n                {professionalAlerted && (\n                  <div className=\"bg-green-50 border border-green-200 rounded-lg p-3 mb-4\">\n                    <p className=\"text-green-800 font-medium\">\n                      <Heart className=\"inline w-5 h-5 mr-2\" />\n                      Professional support notified - Help is on the way\n                    </p>\n                  </div>\n                )}\n\n                {error && (\n                  <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3 mb-4\">\n                    <p className=\"text-yellow-800\">Offline Crisis Resources</p>\n                  </div>\n                )}\n              </div>\n\n              {isLoading ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <Loader2 className=\"w-8 h-8 animate-spin text-red-600\" />\n                  <span className=\"ml-3 text-lg\">Connecting to crisis support...</span>\n                </div>\n              ) : (\n                <div className=\"space-y-6\">\n                  {/* Hotlines Section */}\n                  <div>\n                    <h3 className=\"text-lg font-semibold mb-3 flex items-center\">\n                      <Phone className=\"w-5 h-5 mr-2 text-red-600\" />\n                      Emergency Hotlines\n                    </h3>\n                    <div className=\"space-y-2\">\n                      {(resources?.hotlines || OFFLINE_RESOURCES).map((hotline: CrisisResource, index: number) => (\n                        <a\n                          key={index}\n                          href={`tel:${hotline.number?.replace(/\\D/g, '')}`}\n                          className=\"block p-3 bg-red-50 rounded-lg hover:bg-red-100 transition-colors\"\n                          tabIndex={0}\n                          role=\"link\"\n                          aria-label={`Call ${hotline.name} at ${hotline.number || hotline.text}`}\n                        >\n                          <div className=\"font-semibold text-red-900\">{hotline.name}</div>\n                          <div className=\"text-red-700 text-2xl font-bold\">\n                            {hotline.number || hotline.text}\n                          </div>\n                          {hotline.available && (\n                            <span className=\"text-sm text-green-600\">Available 24/7</span>\n                          )}\n                        </a>\n                      ))}\n                      \n                      {/* Text Support */}\n                      <div className=\"p-3 bg-blue-50 rounded-lg\">\n                        <div className=\"flex items-center mb-2\">\n                          <MessageCircle className=\"w-5 h-5 mr-2 text-blue-600\" />\n                          <span className=\"font-semibold text-blue-900\">Crisis Text Line</span>\n                        </div>\n                        <div className=\"text-blue-700 text-xl font-bold\">\n                          Text HOME to 741741\n                        </div>\n                        <span className=\"text-sm text-blue-600\">Free 24/7 text support</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Local Resources Section */}\n                  {resources?.localResources && resources.localResources.length > 0 && (\n                    <div>\n                      <h3 className=\"text-lg font-semibold mb-3 flex items-center\">\n                        <MapPin className=\"w-5 h-5 mr-2 text-red-600\" />\n                        Local Emergency Resources\n                      </h3>\n                      <div className=\"space-y-2\">\n                        {resources.localResources.map((resource: CrisisResource, index: number) => (\n                          <div key={index} className=\"p-3 bg-gray-50 rounded-lg\">\n                            <div className=\"font-semibold text-gray-900\">{resource.name}</div>\n                            <div className=\"text-gray-600\">{resource.address}</div>\n                            <div className=\"text-sm text-gray-500\">{resource.distance}</div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Online Support Section */}\n                  {resources?.onlineSupport && resources.onlineSupport.length > 0 && (\n                    <div>\n                      <h3 className=\"text-lg font-semibold mb-3\">Online Support Resources</h3>\n                      <div className=\"space-y-2\">\n                        {resources.onlineSupport.map((support: CrisisResource, index: number) => (\n                          <a\n                            key={index}\n                            href={support.url}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className=\"block p-3 bg-purple-50 rounded-lg hover:bg-purple-100 transition-colors\"\n                            tabIndex={0}\n                          >\n                            <div className=\"font-semibold text-purple-900\">{support.name}</div>\n                            <div className=\"text-purple-600 text-sm\">{support.url}</div>\n                          </a>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Emergency Number */}\n                  <div className=\"mt-6 p-4 bg-red-600 text-white rounded-lg\">\n                    <div className=\"font-bold text-xl mb-1\">Emergency: Call 911</div>\n                    <div className=\"text-sm opacity-90\">If you are in immediate danger</div>\n                  </div>\n                </div>\n              )}\n\n              <div className=\"mt-6 flex justify-end\">\n                <button\n                  onClick={() => setIsOpen(false)}\n                  className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors focus:outline-none focus:ring-2 focus:ring-gray-500\"\n                  tabIndex={0}\n                >\n                  Close\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\n// Export memoized component for critical performance\nexport default React.memo(_CrisisButton);","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\CrisisChat.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\CrisisDemonstrationHub.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'stats' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":110,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":110,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'results' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":128,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":128,"endColumn":20}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '@/utils/logger';\r\n// Crisis Infrastructure Demonstration Hub - Showcases all crisis system capabilities\r\n// CRITICAL: This demonstrates life-safety systems for stakeholder review\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { \r\n  Shield, Phone, MessageSquare, _MapPin, Brain, TestTube, WifiOff,\r\n  AlertTriangle, Heart, _Clock, _CheckCircle, _XCircle,\r\n  BarChart3, Activity\r\n} from 'lucide-react';\r\nimport { EnhancedCrisisChat } from './EnhancedCrisisChat';\r\nimport { EmergencyServicesInterface } from './EmergencyServicesInterface';\r\nimport { mockWebSocketAdapter } from '../../services/crisis/MockWebSocketAdapter';\r\nimport { crisisScenarioTester, CrisisTestScenario, CRISIS_TEST_SCENARIOS } from '../../test/crisis/CrisisScenarioTesting';\r\nimport { offlineCrisisResources } from '../../services/crisis/OfflineCrisisResources';\r\nimport { assessCrisisSeverity } from '../../services/crisis/emergencyServices';\r\nimport { toast } from 'react-hot-toast';\r\n\r\ninterface SystemStatus {\r\n  crisisChat: 'online' | 'offline' | 'testing';\r\n  emergencyServices: 'active' | 'inactive';\r\n  offlineResources: 'available' | 'unavailable';\r\n  locationServices: 'enabled' | 'disabled';\r\n  assessmentAlgorithm: 'operational' | 'error';\r\n}\r\n\r\ninterface DemoStats {\r\n  totalTests: number;\r\n  passedTests: number;\r\n  avgResponseTime: number;\r\n  emergencyProtocolsActive: number;\r\n  activeResources: number;\r\n}\r\n\r\ninterface TestReport {\r\n  totalTests: number;\r\n  passedTests: number;\r\n  failedTests: number;\r\n  totalDuration: number;\r\n  scenarios: Array<{\r\n    name: string;\r\n    passed: boolean;\r\n    duration: number;\r\n    error?: string;\r\n  }>;\r\n}\r\n\r\nexport function CrisisDemonstrationHub() {\r\n  const [activeDemo, setActiveDemo] = useState<string>('overview');\r\n  const [_systemStatus, setSystemStatus] = useState<SystemStatus>({\r\n    crisisChat: 'offline',\r\n    emergencyServices: 'inactive',\r\n    offlineResources: 'unavailable',\r\n    locationServices: 'disabled',\r\n    assessmentAlgorithm: 'operational'\r\n  });\r\n  const [isRunningTests, setIsRunningTests] = useState(false);\r\n  const [testResults, setTestResults] = useState<TestReport | null>(null);\r\n  const [demoStats, setDemoStats] = useState<DemoStats>({\r\n    totalTests: 0,\r\n    passedTests: 0,\r\n    avgResponseTime: 0,\r\n    emergencyProtocolsActive: 0,\r\n    activeResources: 0\r\n  });\r\n  const [simulatedScenario, setSimulatedScenario] = useState<CrisisTestScenario | null>(null);\r\n\r\n  // Initialize demonstration systems\r\n  useEffect(() => {\r\n    initializeDemoSystems();\r\n    updateSystemStatus();\r\n    loadDemoStats();\r\n  }, []);\r\n\r\n  // Initialize all demo systems\r\n  const initializeDemoSystems = async () => {\r\n    try {\r\n      // Initialize WebSocket adapter\r\n      await mockWebSocketAdapter.connect('demo-user', 'demo-token');\r\n      \r\n      // Check offline resources\r\n      const offlineStatus = offlineCrisisResources.isAvailableOffline();\r\n      \r\n      // Check location services\r\n      const locationAvailable = 'geolocation' in navigator;\r\n      \r\n      setSystemStatus(prev => ({\r\n        ...prev,\r\n        crisisChat: 'online',\r\n        offlineResources: offlineStatus ? 'available' : 'unavailable',\r\n        locationServices: locationAvailable ? 'enabled' : 'disabled',\r\n        emergencyServices: 'active'\r\n      }));\r\n      \r\n      toast.success('Crisis demonstration systems initialized');\r\n    } catch (error) {\r\n      logger.error('Demo initialization failed', 'CrisisDemonstrationHub', error);\r\n      toast.error('Some demo systems failed to initialize');\r\n    }\r\n  };\r\n\r\n  // Update system status - DISABLED: No periodic updates to prevent alerts\r\n  const updateSystemStatus = () => {\r\n    // DISABLED: Demo mode interval removed to prevent beeping/alerts\r\n    // Originally ran every 5000ms but caused unwanted notification sounds\r\n  };\r\n\r\n  // Load demonstration statistics\r\n  const loadDemoStats = () => {\r\n    const stats = mockWebSocketAdapter.getServerStats();\r\n    const offlineStats = offlineCrisisResources.getConnectionStatus();\r\n    \r\n    setDemoStats({\r\n      totalTests: CRISIS_TEST_SCENARIOS.length,\r\n      passedTests: 0, // Will be updated by tests\r\n      avgResponseTime: 150, // Simulated\r\n      emergencyProtocolsActive: 4,\r\n      activeResources: offlineStats.resourceCount\r\n    });\r\n  };\r\n\r\n  // Run crisis system tests\r\n  const runSystemTests = async () => {\r\n    setIsRunningTests(true);\r\n    toast.loading('Running comprehensive crisis system tests...');\r\n    \r\n    try {\r\n      const results = await crisisScenarioTester.runAllScenarios();\r\n      const report = crisisScenarioTester.generateReport();\r\n      \r\n      setTestResults(report);\r\n      setDemoStats(prev => ({\r\n        ...prev,\r\n        totalTests: report.totalTests,\r\n        passedTests: report.passedTests,\r\n        avgResponseTime: report.totalDuration / report.totalTests\r\n      }));\r\n      \r\n      toast.dismiss();\r\n      if (report.passedTests === report.totalTests) {\r\n        toast.success('All crisis system tests passed! ✅');\r\n      } else {\r\n        toast.error(`${report.failedTests} tests failed - Review required`);\r\n      }\r\n    } catch (error) {\r\n      toast.dismiss();\r\n      toast.error('Test execution failed');\r\n      logger.error('Test failed', 'CrisisDemonstrationHub', error);\r\n    } finally {\r\n      setIsRunningTests(false);\r\n    }\r\n  };\r\n\r\n  // Simulate crisis scenario\r\n  const simulateScenario = (scenario: CrisisTestScenario) => {\r\n    setSimulatedScenario(_scenario);\r\n    setActiveDemo('crisis-simulation');\r\n    \r\n    // Show scenario details\r\n    toast.success(`Simulating: ${scenario.name}`, {\r\n      duration: 5000,\r\n      icon: '🎭'\r\n    });\r\n  };\r\n\r\n  // Test emergency protocols\r\n  const testEmergencyProtocols = (type: 'suicide_risk' | 'medical_emergency' | 'connection_loss') => {\r\n    mockWebSocketAdapter.testEmergencyProtocol(type);\r\n    toast.success(`Testing ${type.replace('_', ' ')} protocol`);\r\n  };\r\n\r\n  // Get status indicator color\r\n  const getStatusColor = (status: string, type: string): string => {\r\n    const statusMap: { [key: string]: { [key: string]: string } } = {\r\n      crisisChat: {\r\n        online: 'bg-green-500',\r\n        offline: 'bg-red-500',\r\n        testing: 'bg-yellow-500'\r\n      },\r\n      default: {\r\n        active: 'bg-green-500',\r\n        operational: 'bg-green-500',\r\n        available: 'bg-green-500',\r\n        enabled: 'bg-green-500',\r\n        inactive: 'bg-gray-500',\r\n        error: 'bg-red-500',\r\n        unavailable: 'bg-red-500',\r\n        disabled: 'bg-gray-500'\r\n      }\r\n    };\r\n    \r\n    return statusMap[type]?.[status] || statusMap.default?.[status] || 'bg-gray-500';\r\n  };\r\n\r\n  // Render system status panel\r\n  const renderSystemStatus = () => (\r\n    <div className=\"bg-white rounded-xl shadow-lg p-6\">\r\n      <h3 className=\"text-xl font-bold text-gray-900 mb-4 flex items-center\">\r\n        <Activity className=\"h-6 w-6 mr-2\" />\r\n        System Status\r\n      </h3>\r\n      \r\n      <div className=\"space-y-3\">\r\n        {Object.entries(_systemStatus).map(([system, status]) => (\r\n          <div key={system} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\r\n            <div className=\"flex items-center space-x-3\">\r\n              <div className={`h-3 w-3 rounded-full ${getStatusColor(status, system)}`}></div>\r\n              <span className=\"font-medium capitalize\">{system.replace(/([A-Z])/g, ' $1').trim()}</span>\r\n            </div>\r\n            <span className=\"text-sm text-gray-600 capitalize\">{status}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      \r\n      <div className=\"mt-6 grid grid-cols-2 gap-4\">\r\n        <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\r\n          <div className=\"text-2xl font-bold text-blue-600\">{demoStats.activeResources}</div>\r\n          <div className=\"text-xs text-blue-600\">Offline Resources</div>\r\n        </div>\r\n        <div className=\"text-center p-3 bg-green-50 rounded-lg\">\r\n          <div className=\"text-2xl font-bold text-green-600\">{demoStats.avgResponseTime.toFixed(0)}ms</div>\r\n          <div className=\"text-xs text-green-600\">Avg Response Time</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // Render demo navigation\r\n  const renderDemoNavigation = () => (\r\n    <div className=\"bg-white rounded-xl shadow-lg p-6\">\r\n      <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Crisis System Demonstrations</h3>\r\n      \r\n      <div className=\"grid grid-cols-1 gap-3\">\r\n        {[\r\n          { id: 'overview', label: 'System Overview', icon: BarChart3, description: 'Complete system status and capabilities' },\r\n          { id: 'crisis-chat', label: 'Crisis Chat Demo', icon: MessageSquare, description: 'AI counselor chat simulation' },\r\n          { id: 'emergency-services', label: 'Emergency Services', icon: Phone, description: 'GPS location & 911 dispatch' },\r\n          { id: 'offline-resources', label: 'Offline Resources', icon: WifiOff, description: 'Offline crisis support tools' },\r\n          { id: 'assessment-demo', label: 'Risk Assessment', icon: Brain, description: 'AI-powered crisis assessment' },\r\n          { id: 'testing-suite', label: 'Testing Suite', icon: TestTube, description: 'Comprehensive system testing' }\r\n        ].map((demo) => (\r\n          <button\r\n            key={demo.id}\r\n            onClick={() => setActiveDemo(demo.id)}\r\n            className={`p-4 rounded-lg text-left transition-colors ${\r\n              activeDemo === demo.id\r\n                ? 'bg-red-100 border-2 border-red-500'\r\n                : 'bg-gray-50 border-2 border-transparent hover:bg-red-50'\r\n            }`}\r\n          >\r\n            <div className=\"flex items-center space-x-3\">\r\n              <demo.icon className=\"h-6 w-6 text-red-600\" />\r\n              <div>\r\n                <div className=\"font-semibold text-gray-900\">{demo.label}</div>\r\n                <div className=\"text-sm text-gray-600\">{demo.description}</div>\r\n              </div>\r\n            </div>\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // Render test scenarios\r\n  const renderTestScenarios = () => (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <h3 className=\"text-xl font-bold text-gray-900\">Crisis Test Scenarios</h3>\r\n        <button\r\n          onClick={runSystemTests}\r\n          disabled={isRunningTests}\r\n          className=\"bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors disabled:opacity-50 flex items-center space-x-2\"\r\n        >\r\n          {isRunningTests ? (\r\n            <>\r\n              <div className=\"animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full\"></div>\r\n              <span>Running Tests...</span>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <TestTube className=\"h-4 w-4\" />\r\n              <span>Run All Tests</span>\r\n            </>\r\n          )}\r\n        </button>\r\n      </div>\r\n\r\n      {testResults && (\r\n        <div className=\"bg-white rounded-lg p-4 border-2 border-gray-200\">\r\n          <div className=\"grid grid-cols-4 gap-4 mb-4\">\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-green-600\">{testResults.passedTests}</div>\r\n              <div className=\"text-sm text-gray-600\">Passed</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-red-600\">{testResults.failedTests}</div>\r\n              <div className=\"text-sm text-gray-600\">Failed</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-blue-600\">{testResults.totalTests}</div>\r\n              <div className=\"text-sm text-gray-600\">Total</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-purple-600\">{testResults.totalDuration.toFixed(0)}ms</div>\r\n              <div className=\"text-sm text-gray-600\">Duration</div>\r\n            </div>\r\n          </div>\r\n          <div className=\"text-center font-semibold p-3 rounded-lg bg-gray-50\">\r\n            {testResults.summary}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n        {CRISIS_TEST_SCENARIOS.map((scenario) => (\r\n          <div key={scenario.id} className=\"bg-white rounded-lg p-4 border-2 border-gray-200\">\r\n            <div className=\"flex items-center justify-between mb-2\">\r\n              <h4 className=\"font-semibold text-gray-900\">{scenario.name}</h4>\r\n              <div className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n                scenario.severity === 'critical' ? 'bg-red-100 text-red-800' :\r\n                scenario.severity === 'high' ? 'bg-orange-100 text-orange-800' :\r\n                scenario.severity === 'medium' ? 'bg-yellow-100 text-yellow-800' :\r\n                'bg-green-100 text-green-800'\r\n              }`}>\r\n                {scenario.severity}\r\n              </div>\r\n            </div>\r\n            <p className=\"text-sm text-gray-600 mb-3\">{scenario.description}</p>\r\n            <div className=\"flex space-x-2\">\r\n              <button\r\n                onClick={() => simulateScenario(_scenario)}\r\n                className=\"flex-1 bg-blue-600 text-white px-3 py-2 rounded-lg text-sm hover:bg-blue-700 transition-colors\"\r\n              >\r\n                Simulate\r\n              </button>\r\n              <button className=\"px-3 py-2 bg-gray-100 text-gray-700 rounded-lg text-sm hover:bg-gray-200 transition-colors\">\r\n                Details\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // Render active demonstration content\r\n  const renderActiveDemo = () => {\r\n    switch (_activeDemo) {\r\n      case 'overview':\r\n        return (\r\n          <div className=\"space-y-6\">\r\n            <div className=\"bg-gradient-to-r from-red-600 to-red-800 text-white rounded-xl p-8\">\r\n              <div className=\"flex items-center space-x-4\">\r\n                <Shield className=\"h-12 w-12\" />\r\n                <div>\r\n                  <h2 className=\"text-3xl font-bold\">Crisis Infrastructure System</h2>\r\n                  <p className=\"text-red-100 text-lg\">24/7 Life-Safety Mental Health Support Platform</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n              <div className=\"bg-white rounded-xl shadow-lg p-6 text-center\">\r\n                <MessageSquare className=\"h-12 w-12 text-purple-600 mx-auto mb-3\" />\r\n                <h3 className=\"font-bold text-gray-900 mb-2\">AI Crisis Chat</h3>\r\n                <p className=\"text-sm text-gray-600\">Real-time counselor simulation with emergency escalation</p>\r\n              </div>\r\n              \r\n              <div className=\"bg-white rounded-xl shadow-lg p-6 text-center\">\r\n                <Phone className=\"h-12 w-12 text-red-600 mx-auto mb-3\" />\r\n                <h3 className=\"font-bold text-gray-900 mb-2\">Emergency Services</h3>\r\n                <p className=\"text-sm text-gray-600\">GPS location sharing with 911 dispatch simulation</p>\r\n              </div>\r\n              \r\n              <div className=\"bg-white rounded-xl shadow-lg p-6 text-center\">\r\n                <Brain className=\"h-12 w-12 text-blue-600 mx-auto mb-3\" />\r\n                <h3 className=\"font-bold text-gray-900 mb-2\">Risk Assessment</h3>\r\n                <p className=\"text-sm text-gray-600\">AI-powered suicide risk evaluation with clinical accuracy</p>\r\n              </div>\r\n              \r\n              <div className=\"bg-white rounded-xl shadow-lg p-6 text-center\">\r\n                <WifiOff className=\"h-12 w-12 text-green-600 mx-auto mb-3\" />\r\n                <h3 className=\"font-bold text-gray-900 mb-2\">Offline Resources</h3>\r\n                <p className=\"text-sm text-gray-600\">Critical support tools available without internet</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'crisis-chat':\r\n        return (\r\n          <div>\r\n            <div className=\"mb-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\r\n              <div className=\"flex items-start space-x-2\">\r\n                <AlertTriangle className=\"h-5 w-5 text-yellow-600 mt-0.5\" />\r\n                <div>\r\n                  <h4 className=\"font-semibold text-yellow-800\">Demonstration Mode</h4>\r\n                  <p className=\"text-sm text-yellow-700\">This is a realistic simulation of crisis chat. In production, users would be connected to certified crisis counselors.</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <EnhancedCrisisChat />\r\n          </div>\r\n        );\r\n\r\n      case 'emergency-services':\r\n        return <EmergencyServicesInterface \r\n          crisisProfile={{\r\n            userId: 'demo',\r\n            riskLevel: 'elevated',\r\n            indicators: ['stress', 'anxiety'],\r\n            patterns: [],\r\n            recommendations: [],\r\n            lastUpdated: new Date()\r\n          }}\r\n        />;\r\n\r\n      case 'offline-resources':\r\n        return (\r\n          <div className=\"space-y-6\">\r\n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\r\n              <div className=\"flex items-start space-x-2\">\r\n                <WifiOff className=\"h-5 w-5 text-green-600 mt-0.5\" />\r\n                <div>\r\n                  <h4 className=\"font-semibold text-green-800\">Offline Mode Active</h4>\r\n                  <p className=\"text-sm text-green-700\">These resources remain available even without internet connection.</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n              <div className=\"bg-white rounded-xl shadow-lg p-6\">\r\n                <h3 className=\"font-bold text-gray-900 mb-4 flex items-center\">\r\n                  <Phone className=\"h-5 w-5 mr-2 text-red-600\" />\r\n                  Emergency Contacts\r\n                </h3>\r\n                {offlineCrisisResources.getEmergencyContacts().slice(0, 4).map(contact => (\r\n                  <div key={contact.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg mb-2\">\r\n                    <div>\r\n                      <div className=\"font-semibold text-sm\">{contact.name}</div>\r\n                      <div className=\"text-xs text-gray-600\">{contact.phone}</div>\r\n                    </div>\r\n                    <button\r\n                      onClick={() => window.location.href = `tel:${contact.phone}`}\r\n                      className=\"px-3 py-1 bg-red-600 text-white text-xs rounded-lg\"\r\n                    >\r\n                      Call\r\n                    </button>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n\r\n              <div className=\"bg-white rounded-xl shadow-lg p-6\">\r\n                <h3 className=\"font-bold text-gray-900 mb-4 flex items-center\">\r\n                  <Heart className=\"h-5 w-5 mr-2 text-purple-600\" />\r\n                  Immediate Resources\r\n                </h3>\r\n                {offlineCrisisResources.getImmediateCrisisResources().slice(0, 4).map(resource => (\r\n                  <div key={resource.id} className=\"p-3 bg-gray-50 rounded-lg mb-2\">\r\n                    <div className=\"font-semibold text-sm\">{resource.title}</div>\r\n                    <div className=\"text-xs text-gray-600\">{resource.content.substring(0, 80)}...</div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'assessment-demo':\r\n        return (\r\n          <div className=\"space-y-6\">\r\n            <div className=\"bg-white rounded-xl shadow-lg p-6\">\r\n              <h3 className=\"text-xl font-bold text-gray-900 mb-4\">AI-Powered Crisis Risk Assessment</h3>\r\n              <div className=\"space-y-4\">\r\n                {CRISIS_TEST_SCENARIOS.slice(0, 3).map(scenario => (\r\n                  <div key={scenario.id} className=\"border-2 border-gray-200 rounded-lg p-4\">\r\n                    <h4 className=\"font-semibold text-gray-900 mb-2\">{scenario.name}</h4>\r\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\r\n                      <div>\r\n                        <span className=\"font-medium\">Expected Severity:</span>\r\n                        <span className={`ml-2 px-2 py-1 rounded-full text-xs ${\r\n                          scenario.expectedOutcome.severity === 'critical' ? 'bg-red-100 text-red-800' :\r\n                          scenario.expectedOutcome.severity === 'high' ? 'bg-orange-100 text-orange-800' :\r\n                          scenario.expectedOutcome.severity === 'medium' ? 'bg-yellow-100 text-yellow-800' :\r\n                          'bg-green-100 text-green-800'\r\n                        }`}>\r\n                          {scenario.expectedOutcome.severity}\r\n                        </span>\r\n                      </div>\r\n                      <div>\r\n                        <span className=\"font-medium\">Immediate Response:</span>\r\n                        <span className={`ml-2 ${scenario.expectedOutcome.requiresImmediate ? 'text-red-600' : 'text-green-600'}`}>\r\n                          {scenario.expectedOutcome.requiresImmediate ? 'Required' : 'Not Required'}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <button\r\n                      onClick={() => {\r\n                        const result = assessCrisisSeverity(scenario.responses);\r\n                        toast.success(`Assessment Complete: ${result.severity} risk level`, {\r\n                          duration: 3000\r\n                        });\r\n                      }}\r\n                      className=\"mt-3 bg-blue-600 text-white px-4 py-2 rounded-lg text-sm hover:bg-blue-700 transition-colors\"\r\n                    >\r\n                      Run Assessment\r\n                    </button>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'testing-suite':\r\n        return renderTestScenarios();\r\n\r\n      case 'crisis-simulation':\r\n        return simulatedScenario ? (\r\n          <div className=\"space-y-6\">\r\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\r\n              <h3 className=\"font-bold text-red-800 mb-2\">Simulating: {simulatedScenario.name}</h3>\r\n              <p className=\"text-sm text-red-700\">{simulatedScenario.description}</p>\r\n            </div>\r\n            <EnhancedCrisisChat />\r\n          </div>\r\n        ) : null;\r\n\r\n      default:\r\n        return <div>Select a demonstration from the menu</div>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-blue-50\">\r\n      {/* Header */}\r\n      <div className=\"bg-white shadow-sm border-b\">\r\n        <div className=\"max-w-7xl mx-auto px-4 py-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center space-x-4\">\r\n              <Shield className=\"h-8 w-8 text-red-600\" />\r\n              <div>\r\n                <h1 className=\"text-2xl font-bold text-gray-900\">Crisis Infrastructure Demo</h1>\r\n                <p className=\"text-sm text-gray-600\">Comprehensive Mental Health Crisis Support System</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-center space-x-4\">\r\n              <div className=\"flex space-x-2\">\r\n                <button\r\n                  onClick={() => testEmergencyProtocols('suicide_risk')}\r\n                  className=\"px-3 py-2 bg-red-600 text-white text-sm rounded-lg hover:bg-red-700 transition-colors\"\r\n                >\r\n                  Test 988 Protocol\r\n                </button>\r\n                <button\r\n                  onClick={() => testEmergencyProtocols('medical_emergency')}\r\n                  className=\"px-3 py-2 bg-orange-600 text-white text-sm rounded-lg hover:bg-orange-700 transition-colors\"\r\n                >\r\n                  Test 911 Protocol\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main Content */}\r\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\r\n          {/* Left Sidebar */}\r\n          <div className=\"space-y-6\">\r\n            {renderDemoNavigation()}\r\n            {renderSystemStatus()}\r\n          </div>\r\n\r\n          {/* Main Content Area */}\r\n          <div className=\"lg:col-span-3\">\r\n            {renderActiveDemo()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Emergency Banner */}\r\n      <div className=\"fixed bottom-0 left-0 right-0 bg-red-600 text-white p-2\">\r\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between text-sm\">\r\n          <div className=\"flex items-center space-x-2\">\r\n            <AlertTriangle className=\"h-4 w-4\" />\r\n            <span>Crisis Support Available 24/7</span>\r\n          </div>\r\n          <div className=\"flex space-x-4\">\r\n            <button\r\n              onClick={() => window.location.href = 'tel:988'}\r\n              className=\"px-3 py-1 bg-white text-red-600 rounded font-semibold hover:bg-red-50 transition-colors\"\r\n            >\r\n              Call 988\r\n            </button>\r\n            <button\r\n              onClick={() => window.location.href = 'tel:911'}\r\n              className=\"px-3 py-1 bg-white text-red-600 rounded font-semibold hover:bg-red-50 transition-colors\"\r\n            >\r\n              Call 911\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\CrisisInterventionSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\CrisisResources.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":126,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { MapPin, Phone, Globe, Clock, Search, Navigation, ExternalLink } from 'lucide-react';\nimport { logger } from '@/utils/logger';\n\ninterface Resource {\n  id: string;\n  name: string;\n  type: 'hospital' | 'clinic' | 'therapist' | 'support_group' | 'crisis_center' | 'emergency';\n  phone?: string;\n  website?: string;\n  _address?: string;\n  distance?: number;\n  hours?: string;\n  services: string[];\n  acceptsInsurance?: boolean;\n  walkIn?: boolean;\n  rating?: number;\n  lat?: number;\n  lng?: number;\n}\n\nconst MOCK_RESOURCES: Resource[] = [\n  {\n    id: '1',\n    name: 'Community Crisis Center',\n    type: 'crisis_center',\n    phone: '555-0100',\n    website: 'https://example.com/crisis',\n    _address: '123 Main St, City, State 12345',\n    distance: 2.3,\n    hours: '24/7',\n    services: ['Crisis Intervention', 'Emergency Assessment', 'Safety Planning', 'Referrals'],\n    walkIn: true,\n    rating: 4.8\n  },\n  {\n    id: '2',\n    name: 'Regional Medical Center - Emergency Psychiatric Services',\n    type: 'hospital',\n    phone: '555-0200',\n    _address: '456 Hospital Blvd, City, State 12345',\n    distance: 3.7,\n    hours: '24/7',\n    services: ['Emergency Psychiatric Care', 'Inpatient Services', 'Crisis Stabilization'],\n    acceptsInsurance: true,\n    walkIn: true,\n    rating: 4.5\n  },\n  {\n    id: '3',\n    name: 'Mental Health Associates',\n    type: 'clinic',\n    phone: '555-0300',\n    website: 'https://example.com/mha',\n    _address: '789 Wellness Ave, City, State 12345',\n    distance: 5.1,\n    hours: 'Mon-Fri 8am-6pm, Sat 9am-2pm',\n    services: ['Therapy', 'Psychiatry', 'Group Therapy', 'Crisis Counseling'],\n    acceptsInsurance: true,\n    walkIn: false,\n    rating: 4.7\n  },\n  {\n    id: '4',\n    name: 'Peer Support Network',\n    type: 'support_group',\n    phone: '555-0400',\n    website: 'https://example.com/support',\n    _address: '321 Community Center, City, State 12345',\n    distance: 4.2,\n    hours: 'Various meeting times',\n    services: ['Peer Support Groups', 'Recovery Programs', 'Family Support'],\n    walkIn: true,\n    rating: 4.9\n  }\n];\n\ninterface CrisisResourcesProps {\n  location?: GeolocationPosition | null;\n}\n\nexport function CrisisResources({ location }: CrisisResourcesProps) {\n  const [resources, setResources] = useState<Resource[]>(_MOCK_RESOURCES);\n  const [filteredResources, setFilteredResources] = useState<Resource[]>(_MOCK_RESOURCES);\n  const [selectedType, setSelectedType] = useState<string>('all');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [showMap, setShowMap] = useState(false);\n\n  // Filter resources based on type and search _query\n  useEffect(() => {\n    let filtered = resources;\n\n    if (selectedType !== 'all') {\n      filtered = filtered.filter(r => r.type === selectedType);\n    }\n\n    if (searchQuery) {\n      const _query = searchQuery.toLowerCase();\n      filtered = filtered.filter(r => \n        r.name.toLowerCase().includes(_query) ||\n        r.services.some(s => s.toLowerCase().includes(_query)) ||\n        r._address?.toLowerCase().includes(_query)\n      );\n    }\n\n    // Sort by distance if location is available\n    if (location) {\n      filtered.sort((a, b) => (a.distance || 999) - (b.distance || 999));\n    }\n\n    setFilteredResources(_filtered);\n  }, [resources, selectedType, searchQuery, location]);\n\n  // Fetch real resources (in production, this would call an API)\n  const fetchNearbyResources = useCallback(async (lat: number, lng: number) => {\n    setIsLoading(true);\n    try {\n      // In production, this would make an API call to fetch real resources\n      // For now, we'll simulate with mock data and calculated distances\n      const _resourcesWithDistance = MOCK_RESOURCES.map(resource => ({\n        ...resource,\n        distance: calculateDistance(lat, lng, resource.lat || 0, resource.lng || 0)\n      }));\n      setResources(_resourcesWithDistance);\n    } catch (_error) {\n      logger.error('Error fetching resources:');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (location) {\n      fetchNearbyResources(location.coords.latitude, location.coords.longitude);\n    }\n  }, [location, fetchNearbyResources]);\n\n  const calculateDistance = (_lat1: number, _lon1: number, _lat2: number, _lon2: number) => {\n    // Simple distance calculation (in production, use proper geospatial calculations)\n    return Math.random() * 10; // Mock distance in miles\n  };\n\n  const handleCallResource = (phone: string) => {\n    window.location.href = `tel:${phone.replace(/\\D/g, '')}`;\n  };\n\n  const handleGetDirections = (_address: string) => {\n    const encodedAddress = encodeURIComponent(_address);\n    window.open(`https://maps.google.com/maps?q=${encodedAddress}`, '_blank');\n  };\n\n  const resourceTypes = [\n    { value: 'all', label: 'All Resources', icon: Globe },\n    { value: 'emergency', label: 'Emergency', icon: Phone },\n    { value: 'hospital', label: 'Hospitals', icon: MapPin },\n    { value: 'crisis_center', label: 'Crisis Centers', icon: MapPin },\n    { value: 'clinic', label: 'Clinics', icon: MapPin },\n    { value: 'support_group', label: 'Support Groups', icon: MapPin }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Search and Filter Bar */}\n      <div className=\"bg-white p-4 rounded-xl shadow-md\">\n        <div className=\"flex flex-col md:flex-row gap-4\">\n          <div className=\"flex-1 relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n            <input\n              type=\"text\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              placeholder=\"Search resources, services, or locations...\"\n              className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            />\n          </div>\n          <div className=\"flex gap-2\">\n            <select\n              value={selectedType}\n              onChange={(e) => setSelectedType(e.target.value)}\n              className=\"px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            >\n              {resourceTypes.map(type => (\n                <option key={type.value} value={type.value}>{type.label}</option>\n              ))}\n            </select>\n            <button\n              onClick={() => setShowMap(!showMap)}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2\"\n            >\n              <MapPin className=\"h-4 w-4\" />\n              <span>{showMap ? 'List' : 'Map'}</span>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Location Status */}\n      {location && (\n        <div className=\"bg-green-50 border border-green-200 rounded-lg p-3 flex items-center space-x-2\">\n          <Navigation className=\"h-5 w-5 text-green-600\" />\n          <span className=\"text-sm text-green-700\">\n            Showing resources near your location\n          </span>\n        </div>\n      )}\n\n      {/* Loading State */}\n      {isLoading && (\n        <div className=\"text-center py-8\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Finding resources near you...</p>\n        </div>\n      )}\n\n      {/* Resources List */}\n      {!isLoading && !showMap && (\n        <div className=\"space-y-4\">\n          {filteredResources.length === 0 ? (\n            <div className=\"text-center py-8 bg-gray-50 rounded-xl\">\n              <p className=\"text-gray-600\">No resources found matching your criteria.</p>\n              <button\n                onClick={() => {\n                  setSelectedType('all');\n                  setSearchQuery('');\n                }}\n                className=\"mt-4 text-blue-600 hover:text-blue-700 font-medium\"\n              >\n                Clear filters\n              </button>\n            </div>\n          ) : (\n            filteredResources.map(resource => (\n              <ResourceCard\n                key={resource.id}\n                resource={resource}\n                onCall={handleCallResource}\n                onGetDirections={handleGetDirections}\n              />\n            ))\n          )}\n        </div>\n      )}\n\n      {/* Map View (_Placeholder) */}\n      {!isLoading && showMap && (\n        <div className=\"bg-gray-100 rounded-xl h-96 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <MapPin className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <p className=\"text-gray-600\">Interactive map view coming soon</p>\n            <p className=\"text-sm text-gray-500 mt-2\">\n              Use list view to see available resources\n            </p>\n          </div>\n        </div>\n      )}\n\n      {/* National Hotlines Footer */}\n      <div className=\"bg-blue-50 rounded-xl p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">National Crisis Hotlines</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <HotlineCard\n            name=\"988 Suicide & Crisis Lifeline\"\n            number=\"988\"\n            description=\"24/7 crisis support\"\n            onCall={() => handleCallResource('988')}\n          />\n          <HotlineCard\n            name=\"Crisis Text Line\"\n            number=\"741741\"\n            description=\"Text HOME to 741741\"\n            onCall={() => window.location.href = 'sms:741741?body=HOME'}\n          />\n          <HotlineCard\n            name=\"SAMHSA National Helpline\"\n            number=\"1-800-662-4357\"\n            description=\"Treatment referral and information\"\n            onCall={() => handleCallResource('18006624357')}\n          />\n          <HotlineCard\n            name=\"Veterans Crisis Line\"\n            number=\"1-800-273-8255\"\n            description=\"Press 1 for veterans\"\n            onCall={() => handleCallResource('18002738255')}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Resource Card Component\ninterface ResourceCardProps {\n  resource: Resource;\n  onCall: (phone: string) => void;\n  onGetDirections: (_address: string) => void;\n}\n\nfunction ResourceCard({ resource, onCall, onGetDirections }: ResourceCardProps) {\n  const getTypeColor = (type: string) => {\n    const colors: Record<string, string> = {\n      emergency: 'bg-red-100 text-red-700',\n      hospital: 'bg-blue-100 text-blue-700',\n      crisis_center: 'bg-purple-100 text-purple-700',\n      clinic: 'bg-green-100 text-green-700',\n      support_group: 'bg-yellow-100 text-yellow-700',\n      therapist: 'bg-indigo-100 text-indigo-700'\n    };\n    return colors[type] || 'bg-gray-100 text-gray-700';\n  };\n\n  return (\n    <div className=\"bg-white rounded-xl shadow-md p-6 hover:shadow-lg transition-shadow\">\n      <div className=\"flex items-start justify-between mb-4\">\n        <div>\n          <div className=\"flex items-center space-x-3 mb-2\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">{resource.name}</h3>\n            <span className={`px-2 py-1 rounded-full text-xs font-medium ${getTypeColor(resource.type)}`}>\n              {resource.type.replace('_', ' ').toUpperCase()}\n            </span>\n          </div>\n          {resource.distance && (\n            <div className=\"flex items-center space-x-1 text-sm text-gray-600\">\n              <MapPin className=\"h-4 w-4\" />\n              <span>{resource.distance.toFixed(1)} miles away</span>\n            </div>\n          )}\n        </div>\n        {resource.rating && (\n          <div className=\"flex items-center space-x-1\">\n            <span className=\"text-yellow-500\">★</span>\n            <span className=\"text-sm font-medium text-gray-700\">{resource.rating}</span>\n          </div>\n        )}\n      </div>\n\n      {resource._address && (\n        <p className=\"text-gray-600 mb-2\">{resource._address}</p>\n      )}\n\n      <div className=\"flex flex-wrap gap-2 mb-4\">\n        {resource.hours && (\n          <div className=\"flex items-center space-x-1 text-sm text-gray-600\">\n            <Clock className=\"h-4 w-4\" />\n            <span>{resource.hours}</span>\n          </div>\n        )}\n        {resource.walkIn && (\n          <span className=\"px-2 py-1 bg-green-100 text-green-700 rounded-full text-xs font-medium\">\n            Walk-ins Welcome\n          </span>\n        )}\n        {resource.acceptsInsurance && (\n          <span className=\"px-2 py-1 bg-blue-100 text-blue-700 rounded-full text-xs font-medium\">\n            Accepts Insurance\n          </span>\n        )}\n      </div>\n\n      {resource.services.length > 0 && (\n        <div className=\"mb-4\">\n          <p className=\"text-sm font-medium text-gray-700 mb-1\">Services:</p>\n          <div className=\"flex flex-wrap gap-1\">\n            {resource.services.map((service, index) => (\n              <span key={index} className=\"px-2 py-1 bg-gray-100 text-gray-600 rounded text-xs\">\n                {service}\n              </span>\n            ))}\n          </div>\n        </div>\n      )}\n\n      <div className=\"flex gap-3\">\n        {resource.phone && (\n          <button\n            onClick={() => onCall(resource.phone)}\n            className=\"flex-1 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors flex items-center justify-center space-x-2\"\n          >\n            <Phone className=\"h-4 w-4\" />\n            <span>Call</span>\n          </button>\n        )}\n        {resource._address && (\n          <button\n            onClick={() => onGetDirections(resource._address)}\n            className=\"flex-1 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2\"\n          >\n            <Navigation className=\"h-4 w-4\" />\n            <span>Directions</span>\n          </button>\n        )}\n        {resource.website && (\n          <button\n            onClick={() => window.open(resource.website, '_blank')}\n            className=\"flex-1 bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors flex items-center justify-center space-x-2\"\n          >\n            <ExternalLink className=\"h-4 w-4\" />\n            <span>Website</span>\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Hotline Card Component\ninterface HotlineCardProps {\n  name: string;\n  number: string;\n  description: string;\n  onCall: () => void;\n}\n\nfunction HotlineCard({ name, number, description, onCall }: HotlineCardProps) {\n  return (\n    <div className=\"bg-white rounded-lg p-4 flex items-center justify-between\">\n      <div>\n        <h4 className=\"font-semibold text-gray-900\">{name}</h4>\n        <p className=\"text-sm text-gray-600\">{description}</p>\n        <p className=\"text-lg font-bold text-blue-600 mt-1\">{number}</p>\n      </div>\n      <button\n        onClick={onCall}\n        className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors\"\n      >\n        <Phone className=\"h-5 w-5\" />\n      </button>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\EmergencyContacts.tsx","messages":[{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":252,"column":13,"nodeType":"JSXOpeningElement","endLine":259,"endColumn":14},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":2,"message":"Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.","line":252,"column":13,"nodeType":"JSXOpeningElement","endLine":259,"endColumn":14},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":266,"column":19,"nodeType":"JSXOpeningElement","endLine":266,"endColumn":83},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":278,"column":19,"nodeType":"JSXOpeningElement","endLine":278,"endColumn":83},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":290,"column":19,"nodeType":"JSXOpeningElement","endLine":290,"endColumn":83},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":302,"column":19,"nodeType":"JSXOpeningElement","endLine":302,"endColumn":83}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Phone, Plus, Edit2, Trash2, User, Star, Clock } from 'lucide-react';\nimport { toast } from 'react-hot-toast';\nimport { secureStorage } from '../../services/security/SecureLocalStorage';\n\ninterface EmergencyContact {\n  id: string;\n  name: string;\n  phone: string;\n  relationship: string;\n  isPrimary: boolean;\n  lastContacted?: string;\n  notes?: string;\n}\n\nexport function EmergencyContacts() {\n  const [contacts, setContacts] = useState<EmergencyContact[]>([]);\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [editingContact, setEditingContact] = useState<EmergencyContact | null>(null);\n  const [formData, setFormData] = useState({\n    name: '',\n    phone: '',\n    relationship: '',\n    notes: ''\n  });\n\n  // Load contacts from localStorage on mount\n  useEffect(() => {\n    const _savedContacts = secureStorage.getItem('emergencyContacts');\n    if (_savedContacts) {\n      setContacts(JSON.parse(_savedContacts));\n    } else {\n      // Set default emergency contacts if none exist\n      const _defaultContacts: EmergencyContact[] = [\n        {\n          id: 'default-988',\n          name: '988 Suicide & Crisis Lifeline',\n          phone: '988',\n          relationship: 'Crisis Support',\n          isPrimary: true,\n          notes: 'Available 24/7 for crisis support'\n        },\n        {\n          id: 'default-crisis-text',\n          name: 'Crisis Text Line',\n          phone: '741741',\n          relationship: 'Text Support',\n          isPrimary: true,\n          notes: 'Text HOME to 741741'\n        }\n      ];\n      setContacts(_defaultContacts);\n      secureStorage.setItem('emergencyContacts', JSON.stringify(_defaultContacts));\n    }\n  }, []);\n\n  // Save contacts to localStorage whenever they change\n  useEffect(() => {\n    if (contacts.length > 0) {\n      secureStorage.setItem('emergencyContacts', JSON.stringify(contacts));\n    }\n  }, [contacts]);\n\n  const handleAddContact = () => {\n    if (!formData.name || !formData.phone) return;\n\n    const newContact: EmergencyContact = {\n      id: `contact-${Date.now()}`,\n      name: formData.name,\n      phone: formData.phone.replace(/\\D/g, ''), // Remove non-numeric characters\n      relationship: formData.relationship,\n      isPrimary: contacts.length === 0,\n      notes: formData.notes\n    };\n\n    setContacts([...contacts, newContact]);\n    setFormData({ name: '', phone: '', relationship: '', notes: '' });\n    setShowAddForm(false);\n  };\n\n  const handleUpdateContact = () => {\n    if (!editingContact || !formData.name || !formData.phone) return;\n\n    const _updatedContacts = contacts.map(contact =>\n      contact.id === editingContact.id\n        ? {\n            ...contact,\n            name: formData.name,\n            phone: formData.phone.replace(/\\D/g, ''),\n            relationship: formData.relationship,\n            notes: formData.notes\n          }\n        : contact\n    );\n\n    setContacts(_updatedContacts);\n    setEditingContact(null);\n    setFormData({ name: '', phone: '', relationship: '', notes: '' });\n  };\n\n  const handleDeleteContact = (id: string) => {\n    // Don't allow deletion of default crisis lines\n    if (id.startsWith('default-')) {\n      toast.error('Default crisis support contacts cannot be deleted.');\n      return;\n    }\n\n    if (window.confirm('Are you sure you want to delete this contact?')) {\n      setContacts(contacts.filter(c => c.id !== id));\n      toast.success('Contact deleted successfully');\n    }\n  };\n\n  const handleCallContact = (contact: EmergencyContact) => {\n    // Update last contacted time\n    const _updatedContacts = contacts.map(c =>\n      c.id === contact.id\n        ? { ...c, lastContacted: new Date().toISOString() }\n        : c\n    );\n    setContacts(_updatedContacts);\n\n    // Initiate call\n    window.location.href = `tel:${contact.phone}`;\n  };\n\n  const togglePrimary = (id: string) => {\n    const _updatedContacts = contacts.map(contact =>\n      contact.id === id\n        ? { ...contact, isPrimary: !contact.isPrimary }\n        : contact\n    );\n    setContacts(_updatedContacts);\n  };\n\n  const formatPhoneNumber = (phone: string) => {\n    // Format US phone numbers\n    if (phone.length === 10) {\n      return `(${phone.slice(0, 3)}) ${phone.slice(3, 6)}-${phone.slice(6)}`;\n    } else if (phone.length === 11 && phone.startsWith('1')) {\n      return `+1 (${phone.slice(1, 4)}) ${phone.slice(4, 7)}-${phone.slice(7)}`;\n    }\n    return phone;\n  };\n\n  return (\n    <div className=\"bg-white rounded-xl shadow-lg p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Emergency Contacts</h2>\n          <p className=\"text-gray-600 mt-1\">Quick access to your support network</p>\n        </div>\n        <button\n          onClick={() => setShowAddForm(true)}\n          className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2\"\n        >\n          <Plus className=\"h-5 w-5\" />\n          <span>Add Contact</span>\n        </button>\n      </div>\n\n      {/* Contact List */}\n      <div className=\"space-y-3\">\n        {contacts.map((contact) => (\n          <div\n            key={contact.id}\n            className={`border rounded-lg p-4 ${\n              contact.isPrimary ? 'border-blue-300 bg-blue-50' : 'border-gray-200'\n            }`}\n          >\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"bg-gray-100 p-3 rounded-full\">\n                  <User className=\"h-6 w-6 text-gray-600\" />\n                </div>\n                <div>\n                  <div className=\"flex items-center space-x-2\">\n                    <h3 className=\"font-semibold text-gray-900\">{contact.name}</h3>\n                    {contact.isPrimary && (\n                      <Star className=\"h-4 w-4 text-yellow-500 fill-current\" />\n                    )}\n                  </div>\n                  <p className=\"text-sm text-gray-600\">{contact.relationship}</p>\n                  <p className=\"text-sm font-medium text-blue-600\">\n                    {formatPhoneNumber(contact.phone)}\n                  </p>\n                  {contact.notes && (\n                    <p className=\"text-sm text-gray-500 mt-1\">{contact.notes}</p>\n                  )}\n                  {contact.lastContacted && (\n                    <div className=\"flex items-center space-x-1 mt-1\">\n                      <Clock className=\"h-3 w-3 text-gray-400\" />\n                      <p className=\"text-xs text-gray-400\">\n                        Last contacted: {new Date(contact.lastContacted).toLocaleDateString()}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <button\n                  onClick={() => handleCallContact(contact)}\n                  className=\"bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors flex items-center space-x-2\"\n                  aria-label={`Call ${contact.name}`}\n                >\n                  <Phone className=\"h-4 w-4\" />\n                  <span>Call</span>\n                </button>\n                {!contact.id.startsWith('default-') && (\n                  <>\n                    <button\n                      onClick={() => {\n                        setEditingContact(contact);\n                        setFormData({\n                          name: contact.name,\n                          phone: contact.phone,\n                          relationship: contact.relationship,\n                          notes: contact.notes || ''\n                        });\n                      }}\n                      className=\"p-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors\"\n                      aria-label={`Edit ${contact.name}`}\n                    >\n                      <Edit2 className=\"h-4 w-4\" />\n                    </button>\n                    <button\n                      onClick={() => togglePrimary(contact.id)}\n                      className=\"p-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors\"\n                      aria-label={`Toggle primary for ${contact.name}`}\n                    >\n                      <Star className={`h-4 w-4 ${contact.isPrimary ? 'fill-current text-yellow-500' : ''}`} />\n                    </button>\n                    <button\n                      onClick={() => handleDeleteContact(contact.id)}\n                      className=\"p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors\"\n                      aria-label={`Delete ${contact.name}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </button>\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Add/Edit Contact Form */}\n      {(showAddForm || editingContact) && (\n        <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n          <div className=\"flex items-center justify-center min-h-screen px-4\">\n            <div\n              className=\"fixed inset-0 bg-black opacity-50\"\n              onClick={() => {\n                setShowAddForm(false);\n                setEditingContact(null);\n                setFormData({ name: '', phone: '', relationship: '', notes: '' });\n              }}\n            ></div>\n            <div className=\"relative bg-white rounded-xl max-w-md w-full p-6 shadow-xl\">\n              <h3 className=\"text-xl font-bold text-gray-900 mb-4\">\n                {editingContact ? 'Edit Contact' : 'Add Emergency Contact'}\n              </h3>\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Name *\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.name}\n                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"Contact name\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Phone Number *\n                  </label>\n                  <input\n                    type=\"tel\"\n                    value={formData.phone}\n                    onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"(555) 123-4567\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Relationship\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.relationship}\n                    onChange={(e) => setFormData({ ...formData, relationship: e.target.value })}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"Friend, Family, Therapist, etc.\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Notes\n                  </label>\n                  <textarea\n                    value={formData.notes}\n                    onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    rows={3}\n                    placeholder=\"Additional information...\"\n                  />\n                </div>\n              </div>\n              <div className=\"flex space-x-3 mt-6\">\n                <button\n                  onClick={editingContact ? handleUpdateContact : handleAddContact}\n                  className=\"flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors\"\n                >\n                  {editingContact ? 'Update' : 'Add'} Contact\n                </button>\n                <button\n                  onClick={() => {\n                    setShowAddForm(false);\n                    setEditingContact(null);\n                    setFormData({ name: '', phone: '', relationship: '', notes: '' });\n                  }}\n                  className=\"flex-1 bg-gray-200 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-300 transition-colors\"\n                >\n                  Cancel\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\EmergencyServicesInterface.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isLoadingServices' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":38,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":62,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":83,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":109,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":109,"endColumn":20}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '@/utils/logger';\nimport React, { useState, useEffect } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { \r\n  MapPin, \r\n  Phone, \r\n  MessageCircle, \r\n  Clock, \r\n  Star, \r\n  Navigation,\r\n  Shield,\r\n  AlertTriangle,\r\n  CheckCircle,\r\n  Loader\r\n} from 'lucide-react';\r\nimport { geolocationEmergencyService, EmergencyServiceProvider } from '../../services/emergency/GeolocationEmergencyService';\r\nimport { CrisisProfile } from '../../types/ai-insights';\r\nimport { LocationCoordinates, GeolocationPermission } from '../../types/emergency';\r\n\r\ninterface EmergencyServicesInterfaceProps {\r\n  crisisProfile: CrisisProfile;\r\n  onEmergencyTriggered?: (service: EmergencyServiceProvider) => void;\r\n  className?: string;\r\n}\r\n\r\nexport const EmergencyServicesInterface: React.FC<EmergencyServicesInterfaceProps> = ({\r\n  crisisProfile,\r\n  onEmergencyTriggered,\r\n  className = ''\r\n}) => {\r\n  const [nearbyServices, setNearbyServices] = useState<EmergencyServiceProvider[]>([]);\r\n  const [currentLocation, setCurrentLocation] = useState<LocationCoordinates | null>(null);\r\n  const [permissionStatus, setPermissionStatus] = useState<GeolocationPermission>({\r\n    granted: false,\r\n    accuracy: 'denied',\r\n    timestamp: 0\r\n  });\r\n  const [isLoadingServices, setIsLoadingServices] = useState(false);\r\n  const [isRequestingLocation, setIsRequestingLocation] = useState(false);\r\n  const [emergencyTriggered, setEmergencyTriggered] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    initializeEmergencyServices();\r\n  }, []);\r\n\r\n  const initializeEmergencyServices = async () => {\r\n    try {\r\n      setIsLoadingServices(true);\r\n      \r\n      // Get current permission status\r\n      const permission = geolocationEmergencyService.getPermissionStatus();\r\n      setPermissionStatus(permission);\r\n      \r\n      // Get current _location if available\r\n      const _location = geolocationEmergencyService.getCurrentLocation();\r\n      setCurrentLocation(_location);\r\n      \r\n      // Load nearby _services\r\n      const _services = await geolocationEmergencyService.findNearbyEmergencyServices();\r\n      setNearbyServices(_services);\r\n      \r\n    } catch (_error) {\r\n      logger.error('Failed to initialize emergency _services:');\r\n    } finally {\r\n      setIsLoadingServices(false);\r\n    }\r\n  };\r\n\r\n  const requestLocationPermission = async () => {\r\n    setIsRequestingLocation(true);\r\n    try {\r\n      const permission = await geolocationEmergencyService.requestLocationPermission();\r\n      setPermissionStatus(permission);\r\n      \r\n      if (permission.granted) {\r\n        const _location = geolocationEmergencyService.getCurrentLocation();\r\n        setCurrentLocation(_location);\r\n        \r\n        // Refresh nearby _services with new _location\r\n        const _services = await geolocationEmergencyService.findNearbyEmergencyServices();\r\n        setNearbyServices(_services);\r\n      }\r\n    } catch (_error) {\r\n      logger.error('Location permission request failed:');\r\n    } finally {\r\n      setIsRequestingLocation(false);\r\n    }\r\n  };\r\n\r\n\r\n  const triggerEmergencyResponse = async (service: EmergencyServiceProvider) => {\r\n    try {\r\n      setEmergencyTriggered(service.id);\r\n      \r\n      const response = await geolocationEmergencyService.triggerEmergencyResponse(\r\n        crisisProfile,\r\n        service\r\n      );\r\n      \r\n      if (response.success) {\r\n        onEmergencyTriggered?.(_service);\r\n        \r\n        // For critical situations, auto-initiate call\r\n        if (crisisProfile.riskLevel === 'critical' || service.phone === '911') {\r\n          window._location.href = `tel:${service.phone}`;\r\n        }\r\n      }\r\n      \r\n    } catch (_error) {\r\n      logger.error('Emergency response failed:');\r\n    } finally {\r\n      setTimeout(() => setEmergencyTriggered(null), 3000);\r\n    }\r\n  };\r\n\r\n  const getServiceIcon = (_type: EmergencyServiceProvider['type']) => {\r\n    switch (_type) {\r\n      case 'crisis_center': return MessageCircle;\r\n      case 'hospital': return Shield;\r\n      case 'ems': case 'police': case 'fire': return Phone;\r\n      default: return AlertTriangle;\r\n    }\r\n  };\r\n\r\n  const getServiceColor = (_type: EmergencyServiceProvider['type']) => {\r\n    switch (_type) {\r\n      case 'crisis_center': return 'from-purple-500 to-indigo-600';\r\n      case 'hospital': return 'from-blue-500 to-cyan-600';\r\n      case 'ems': return 'from-red-500 to-pink-600';\r\n      default: return 'from-orange-500 to-yellow-600';\r\n    }\r\n  };\r\n\r\n  const formatDistance = (distance?: number) => {\r\n    if (!distance || distance === 0) return 'Available now';\r\n    if (distance < 1) return `${Math.round(distance * 1000)}m away`;\r\n    return `${distance.toFixed(1)}km away`;\r\n  };\r\n\r\n  const formatResponseTime = (responseTime?: number) => {\r\n    if (!responseTime || responseTime === 0) return 'Immediate';\r\n    return `~${responseTime}min response`;\r\n  };\r\n\r\n  if (_isLoadingServices) {\r\n    return (\r\n      <div className={`bg-white rounded-xl shadow-lg p-6 ${className}`}>\r\n        <div className=\"flex items-center justify-center space-x-3\">\r\n          <Loader className=\"w-6 h-6 animate-spin text-purple-600\" />\r\n          <span className=\"text-gray-600\">Finding nearby emergency services...</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`bg-white rounded-xl shadow-lg overflow-hidden ${className}`}>\r\n      {/* Header */}\r\n      <div className=\"bg-gradient-to-r from-red-500 to-pink-600 p-6 text-white\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"flex items-center space-x-3\">\r\n            <Shield className=\"w-8 h-8\" />\r\n            <div>\r\n              <h2 className=\"text-xl font-bold\">Emergency Services</h2>\r\n              <p className=\"text-red-100 text-sm\">\r\n                {crisisProfile.riskLevel === 'critical' \r\n                  ? 'CRITICAL - Immediate help available'\r\n                  : 'Help is available 24/7'\r\n                }\r\n              </p>\r\n            </div>\r\n          </div>\r\n          \r\n          {!permissionStatus.granted && (\r\n            <button\r\n              onClick={requestLocationPermission}\r\n              disabled={isRequestingLocation}\r\n              className=\"bg-white/20 hover:bg-white/30 px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors\"\r\n            >\r\n              <MapPin className=\"w-4 h-4\" />\r\n              <span>{isRequestingLocation ? 'Getting...' : 'Share Location'}</span>\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Location Status */}\r\n      {permissionStatus.granted && currentLocation && (\r\n        <div className=\"bg-green-50 border-b border-green-200 p-4\">\r\n          <div className=\"flex items-center space-x-2 text-green-700\">\r\n            <CheckCircle className=\"w-5 h-5\" />\r\n            <span className=\"text-sm font-medium\">\r\n              Location shared - Emergency _services can find you\r\n            </span>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Emergency Services List */}\r\n      <div className=\"divide-y divide-gray-200\">{nearbyServices.map((service, index) => {\r\n          const ServiceIcon = getServiceIcon(service._type);\r\n          const isTriggered = emergencyTriggered === service.id;\r\n          \r\n          return (\r\n            <motion.div\r\n              key={service.id}\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              transition={{ delay: index * 0.1 }}\r\n              className=\"p-6 hover:bg-gray-50 transition-colors\"\r\n            >\r\n              <div className=\"flex items-start justify-between\">\r\n                <div className=\"flex items-start space-x-4 flex-1\">\r\n                  {/* Service Icon */}\r\n                  <div className={`p-3 rounded-xl bg-gradient-to-r ${getServiceColor(service._type)} text-white flex-shrink-0`}>\r\n                    <ServiceIcon className=\"w-6 h-6\" />\r\n                  </div>\r\n                  \r\n                  {/* Service Info */}\r\n                  <div className=\"flex-1 min-w-0\">\r\n                    <div className=\"flex items-center space-x-2 mb-1\">\r\n                      <h3 className=\"font-semibold text-gray-900 truncate\">{service.name}</h3>\r\n                      {service.rating && (\r\n                        <div className=\"flex items-center space-x-1\">\r\n                          <Star className=\"w-4 h-4 text-yellow-500 fill-current\" />\r\n                          <span className=\"text-sm text-gray-600\">{service.rating}</span>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                    \r\n                    <p className=\"text-gray-600 text-sm mb-2\">{service.address}</p>\r\n                    \r\n                    {/* Service Details */}\r\n                    <div className=\"flex flex-wrap items-center gap-4 text-sm text-gray-500 mb-3\">\r\n                      <div className=\"flex items-center space-x-1\">\r\n                        <Clock className=\"w-4 h-4\" />\r\n                        <span>{service.availability}</span>\r\n                      </div>\r\n                      \r\n                      <div className=\"flex items-center space-x-1\">\r\n                        <Navigation className=\"w-4 h-4\" />\r\n                        <span>{formatDistance(service.distance)}</span>\r\n                      </div>\r\n                      \r\n                      <div className=\"flex items-center space-x-1\">\r\n                        <Phone className=\"w-4 h-4\" />\r\n                        <span>{formatResponseTime(service.responseTime)}</span>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Specialties */}\r\n                    <div className=\"flex flex-wrap gap-2\">\r\n                      {service.specialties.slice(0, 3).map(specialty => (\r\n                        <span\r\n                          key={specialty}\r\n                          className=\"px-2 py-1 bg-gray-100 text-gray-700 rounded-full text-xs\"\r\n                        >\r\n                          {specialty.replace('_', ' ')}\r\n                        </span>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                {/* Action Button */}\r\n                <div className=\"flex flex-col space-y-2 ml-4\">\r\n                  <button\r\n                    onClick={() => triggerEmergencyResponse(_service)}\r\n                    disabled={isTriggered}\r\n                    className={`px-6 py-3 rounded-lg font-medium transition-all duration-200 ${\r\n                      service._type === 'crisis_center'\r\n                        ? 'bg-gradient-to-r from-purple-500 to-indigo-600 hover:from-purple-600 hover:to-indigo-700 text-white shadow-lg hover:shadow-xl'\r\n                        : service.phone === '911'\r\n                          ? 'bg-gradient-to-r from-red-500 to-pink-600 hover:from-red-600 hover:to-pink-700 text-white shadow-lg hover:shadow-xl'\r\n                          : 'bg-gradient-to-r from-blue-500 to-cyan-600 hover:from-blue-600 hover:to-cyan-700 text-white shadow-lg hover:shadow-xl'\r\n                    } ${\r\n                      isTriggered ? 'opacity-50 cursor-not-allowed' : ''\r\n                    }`}\r\n                  >\r\n                    {isTriggered ? (\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <Loader className=\"w-4 h-4 animate-spin\" />\r\n                        <span>Connecting...</span>\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <Phone className=\"w-4 h-4\" />\r\n                        <span>Call {service.phone}</span>\r\n                      </div>\r\n                    )}\r\n                  </button>\r\n                  \r\n                  {service._type === 'crisis_center' && service.specialties.includes('text_support') && (\r\n                    <button\r\n                      onClick={() => window.open(`sms:${service.phone}`, '_blank')}\r\n                      className=\"px-4 py-2 border border-purple-300 text-purple-700 hover:bg-purple-50 rounded-lg text-sm font-medium transition-colors\"\r\n                    >\r\n                      <MessageCircle className=\"w-4 h-4 inline mr-1\" />\r\n                      Text\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </motion.div>\r\n          );\r\n        })}</div>\r\n\r\n      {/* Emergency Notice */}\r\n      <div className=\"bg-red-50 border-t border-red-200 p-4\">\r\n        <div className=\"flex items-start space-x-3\">\r\n          <AlertTriangle className=\"w-5 h-5 text-red-600 flex-shrink-0 mt-0.5\" />\r\n          <div className=\"text-sm text-red-700\">\r\n            <p className=\"font-medium mb-1\">If this is a life-threatening emergency:</p>\r\n            <p>Call <strong>911</strong> immediately or go to your nearest emergency room. These services are available to support you through any crisis.</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmergencyServicesInterface;","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\EnhancedCrisisChat.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\MobileCrisisInterface.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\RealTimeCrisisChat.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'initializeCrisisChat'. Either include it or remove the dependency array.","line":93,"column":6,"nodeType":"ArrayExpression","endLine":93,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [initializeCrisisChat]","fix":{"range":[2872,2874],"text":"[initializeCrisisChat]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Real-Time Crisis Chat System\r\n * \r\n * Secure, encrypted chat for crisis intervention\r\n * Connects to peer supporters and professional counselors\r\n * Privacy-first with end-to-end encryption\r\n */\r\n\r\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport {\r\n  Send, Phone, Shield, Lock,\r\n  AlertCircle, UserCheck,\r\n  MessageSquare, Volume2, VolumeX\r\n} from 'lucide-react';\r\nimport { logger } from '../../utils/logger';\r\n\r\ninterface ChatMessage {\r\n  id: string;\r\n  senderId: string;\r\n  senderName: string;\r\n  senderRole: 'user' | 'peer' | 'professional' | 'moderator' | 'system';\r\n  content: string;\r\n  timestamp: Date;\r\n  type: 'text' | 'voice' | 'image' | 'system' | 'crisis-alert';\r\n  encrypted: boolean;\r\n  readStatus: 'sent' | 'delivered' | 'read';\r\n  supportLevel?: 'info' | 'support' | 'intervention';\r\n  metadata?: Record<string, unknown>;\r\n}\r\n\r\ninterface ChatParticipant {\r\n  id: string;\r\n  name: string;\r\n  role: 'user' | 'peer' | 'professional' | 'moderator';\r\n  status: 'online' | 'away' | 'offline';\r\n  avatar?: string;\r\n  credentials?: string;\r\n  specializations?: string[];\r\n  responseTime: string;\r\n  rating?: number;\r\n  isTyping: boolean;\r\n}\r\n\r\ninterface ChatRoom {\r\n  id: string;\r\n  type: 'crisis' | 'peer-support' | 'group' | 'professional';\r\n  participants: ChatParticipant[];\r\n  messages: ChatMessage[];\r\n  isActive: boolean;\r\n  isEncrypted: boolean;\r\n  moderationLevel: 'light' | 'standard' | 'strict';\r\n  emergencyProtocols: boolean;\r\n  created: Date;\r\n  lastActivity: Date;\r\n}\r\n\r\ninterface CrisisProtocol {\r\n  id: string;\r\n  trigger: string;\r\n  action: 'alert' | 'escalate' | 'emergency' | 'resources';\r\n  automated: boolean;\r\n  priority: 'low' | 'medium' | 'high' | 'critical';\r\n}\r\n\r\nexport function RealTimeCrisisChat() {\r\n  const [_currentRoom, _setCurrentRoom] = useState<ChatRoom | null>(null);\r\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [availableSupport, setAvailableSupport] = useState<ChatParticipant[]>([]);\r\n  const [_chatType, _setChatType] = useState<'crisis' | 'peer' | 'professional'>('crisis');\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [soundEnabled, setSoundEnabled] = useState(true);\r\n  const [_chatSettings, _setChatSettings] = useState({\r\n    notifications: true,\r\n    readReceipts: true,\r\n    autoConnect: true,\r\n    emergencySharing: true\r\n  });\r\n\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const chatContainerRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Initialize crisis chat connection\r\n  useEffect(() => {\r\n    initializeCrisisChat();\r\n    return () => {\r\n      disconnectFromChat();\r\n    };\r\n     \r\n  }, []);\r\n\r\n  // Auto-scroll to latest message\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  // Handle typing indicators\r\n  const handleTyping = useCallback(() => {\r\n    if (!isTyping) {\r\n      setIsTyping(true);\r\n      // Send typing indicator to other participants\r\n      // sendTypingIndicator(true);\r\n      \r\n      // Clear typing indicator after 3 seconds of inactivity\r\n      setTimeout(() => {\r\n        setIsTyping(false);\r\n        // sendTypingIndicator(false);\r\n      }, 3000);\r\n    }\r\n  }, [isTyping]);\r\n\r\n  const initializeCrisisChat = async () => {\r\n    try {\r\n      // Connect to crisis chat service\r\n      await connectToCrisisService();\r\n      \r\n      // Load available support options\r\n      const supporters = await loadAvailableSupport();\r\n      setAvailableSupport(supporters);\r\n      \r\n      // Set up emergency protocols\r\n      setupEmergencyProtocols();\r\n      \r\n      setIsConnected(true);\r\n      \r\n      // Send system welcome message\r\n      addSystemMessage(\r\n        'Crisis support is now available. You are connected to trained volunteers and professionals.',\r\n        'info'\r\n      );\r\n\r\n    } catch (error) {\r\n      logger.error('Failed to initialize crisis chat', 'RealTimeCrisisChat', error);\r\n      addSystemMessage(\r\n        'Having trouble connecting to chat. Emergency hotlines are still available: 988',\r\n        'crisis-alert'\r\n      );\r\n    }\r\n  };\r\n\r\n  const connectToCrisisService = async () => {\r\n    // In production, this would establish WebSocket connection\r\n    // with end-to-end encryption for crisis support\r\n    return new Promise(resolve => setTimeout(resolve, 1000));\r\n  };\r\n\r\n  const loadAvailableSupport = async (): Promise<ChatParticipant[]> => {\r\n    // Mock data - in production, would load from crisis support API\r\n    return [\r\n      {\r\n        id: 'peer-1',\r\n        name: 'Sarah',\r\n        role: 'peer',\r\n        status: 'online',\r\n        responseTime: '< 2 min',\r\n        rating: 4.9,\r\n        isTyping: false\r\n      },\r\n      {\r\n        id: 'pro-1',\r\n        name: 'Dr. Martinez',\r\n        role: 'professional',\r\n        status: 'online',\r\n        credentials: 'Licensed Clinical Social Worker',\r\n        specializations: ['Crisis Intervention', 'Trauma'],\r\n        responseTime: '< 5 min',\r\n        rating: 4.95,\r\n        isTyping: false\r\n      },\r\n      {\r\n        id: 'peer-2',\r\n        name: 'Alex',\r\n        role: 'peer',\r\n        status: 'online',\r\n        responseTime: '< 3 min',\r\n        rating: 4.8,\r\n        isTyping: false\r\n      }\r\n    ];\r\n  };\r\n\r\n  const setupEmergencyProtocols = () => {\r\n    // Configure automated crisis detection and response\r\n    const protocols: CrisisProtocol[] = [\r\n      {\r\n        id: 'suicide-keywords',\r\n        trigger: 'suicide|kill myself|end it all',\r\n        action: 'emergency',\r\n        automated: true,\r\n        priority: 'critical'\r\n      },\r\n      {\r\n        id: 'immediate-danger',\r\n        trigger: 'going to hurt|about to|right now',\r\n        action: 'escalate',\r\n        automated: true,\r\n        priority: 'critical'\r\n      }\r\n    ];\r\n    \r\n    // Set up keyword monitoring for crisis escalation\r\n    protocols.forEach(_protocol => {\r\n      // In production, this would configure server-side monitoring\r\n    });\r\n  };\r\n\r\n  const sendMessage = async () => {\r\n    if (!newMessage.trim() || !_currentRoom) return;\r\n\r\n    const message: ChatMessage = {\r\n      id: generateMessageId(),\r\n      senderId: 'current-user',\r\n      senderName: 'You',\r\n      senderRole: 'user',\r\n      content: newMessage,\r\n      timestamp: new Date(),\r\n      type: 'text',\r\n      encrypted: true,\r\n      readStatus: 'sent',\r\n      supportLevel: 'support'\r\n    };\r\n\r\n    // Add message to local state immediately\r\n    setMessages(prev => [...prev, message]);\r\n    setNewMessage('');\r\n\r\n    // Check for crisis indicators\r\n    await checkCrisisIndicators(message);\r\n\r\n    // Send to chat service\r\n    await sendToParticipants(message);\r\n\r\n    // Play send sound if enabled\r\n    if (_soundEnabled) {\r\n      playNotificationSound('send');\r\n    }\r\n\r\n    // Request response from available supporters\r\n    if (availableSupport.length > 0) {\r\n      requestSupportResponse(message);\r\n    }\r\n  };\r\n\r\n  const checkCrisisIndicators = async (message: ChatMessage) => {\r\n    const crisisKeywords = [\r\n      'suicide', 'kill myself', 'end it all', 'no hope', 'better off dead',\r\n      'can\\'t go on', 'hurt myself', 'give up', 'no point living'\r\n    ];\r\n\r\n    const content = message.content.toLowerCase();\r\n    const _hasCrisisIndicators = crisisKeywords.some(_keyword => \r\n      content.includes(_keyword)\r\n    );\r\n\r\n    if (_hasCrisisIndicators) {\r\n      // Immediate crisis response\r\n      await triggerCrisisProtocol('critical', message);\r\n      \r\n      // Add crisis resources message\r\n      addSystemMessage(\r\n        '🚨 Crisis support activated. Professional help is connecting now. For immediate help: Call 988 or text HOME to 741741',\r\n        'crisis-alert'\r\n      );\r\n\r\n      // Auto-connect to professional counselor\r\n      await connectToProfessional();\r\n    }\r\n  };\r\n\r\n  const triggerCrisisProtocol = async (priority: string, _message: ChatMessage) => {\r\n    // Log crisis event (_anonymized)\r\n    logger.crisis('Crisis protocol triggered', priority as 'low' | 'medium' | 'high' | 'critical', 'RealTimeCrisisChat', { priority, timestamp: new Date() });\r\n    \r\n    // In production, this would:\r\n    // 1. Alert crisis intervention team\r\n    // 2. Initiate emergency protocols if needed\r\n    // 3. Connect to appropriate level of support\r\n    \r\n    if (priority === 'critical') {\r\n      // Show emergency resources immediately\r\n      showEmergencyResources();\r\n    }\r\n  };\r\n\r\n  const connectToProfessional = async () => {\r\n    const professional = availableSupport.find(p => p.role === 'professional');\r\n    if (_professional) {\r\n      // Simulate professional joining chat\r\n      setTimeout(() => {\r\n        const welcomeMessage: ChatMessage = {\r\n          id: generateMessageId(),\r\n          senderId: professional.id,\r\n          senderName: professional.name,\r\n          senderRole: 'professional',\r\n          content: `Hi, I&apos;m ${professional.name}, a ${professional.credentials}. I&apos;m here to help and support you through this difficult time. You&apos;re not alone.`,\r\n          timestamp: new Date(),\r\n          type: 'text',\r\n          encrypted: true,\r\n          readStatus: 'delivered',\r\n          supportLevel: 'intervention'\r\n        };\r\n        \r\n        setMessages(prev => [...prev, welcomeMessage]);\r\n        \r\n        if (_soundEnabled) {\r\n          playNotificationSound('professional');\r\n        }\r\n      }, 2000);\r\n    }\r\n  };\r\n\r\n  const addSystemMessage = (content: string, level: 'info' | 'crisis-alert' = 'info') => {\r\n    const systemMessage: ChatMessage = {\r\n      id: generateMessageId(),\r\n      senderId: 'system',\r\n      senderName: 'Crisis Support System',\r\n      senderRole: 'system',\r\n      content,\r\n      timestamp: new Date(),\r\n      type: 'system',\r\n      encrypted: false,\r\n      readStatus: 'delivered',\r\n      supportLevel: level === 'crisis-alert' ? 'intervention' : 'info'\r\n    };\r\n\r\n    setMessages(prev => [...prev, systemMessage]);\r\n  };\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  const playNotificationSound = (type: 'send' | 'receive' | 'professional' | 'alert') => {\r\n    if (!soundEnabled) return;\r\n    \r\n    // In production, would play appropriate notification sounds\r\n    logger.info(`Playing ${type} notification sound`, 'RealTimeCrisisChat');\r\n  };\r\n\r\n  const showEmergencyResources = () => {\r\n    const emergencyMessage: ChatMessage = {\r\n      id: generateMessageId(),\r\n      senderId: 'system',\r\n      senderName: 'Emergency Resources',\r\n      senderRole: 'system',\r\n      content: `🆘 IMMEDIATE HELP AVAILABLE:\r\n\r\n📞 National Crisis Line: 988\r\n💬 Crisis Text Line: Text HOME to 741741\r\n🚑 Emergency: 911\r\n\r\nProfessional counselors are joining this chat now. You matter and help is here.`,\r\n      timestamp: new Date(),\r\n      type: 'crisis-alert',\r\n      encrypted: false,\r\n      readStatus: 'delivered',\r\n      supportLevel: 'intervention'\r\n    };\r\n\r\n    setMessages(prev => [...prev, emergencyMessage]);\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      sendMessage();\r\n    }\r\n  };\r\n\r\n  const generateMessageId = () => {\r\n    return `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  };\r\n\r\n  // Placeholder functions for full implementation\r\n  const sendToParticipants = async (_message: ChatMessage) => {\r\n    // Implementation for sending message to chat participants\r\n  };\r\n\r\n  const requestSupportResponse = (_message: ChatMessage) => {\r\n    // Implementation for requesting response from supporters\r\n  };\r\n\r\n  const _sendTypingIndicator = (_typing: boolean) => {\r\n    // Implementation for sending typing indicators\r\n  };\r\n\r\n  const disconnectFromChat = () => {\r\n    // Implementation for clean disconnect\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-screen bg-gradient-to-br from-blue-50 to-purple-50 dark:from-gray-900 dark:to-gray-800\">\r\n      {/* Crisis Chat Header */}\r\n      <div className=\"bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-6 py-4\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"flex items-center space-x-3\">\r\n            <div className=\"relative\">\r\n              <MessageSquare className=\"h-8 w-8 text-red-500\" />\r\n              {isConnected && (\r\n                <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full animate-pulse\"></div>\r\n              )}\r\n            </div>\r\n            <div>\r\n              <h1 className=\"text-xl font-bold text-gray-900 dark:text-white\">\r\n                Crisis Support Chat\r\n              </h1>\r\n              <div className=\"flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400\">\r\n                <Shield className=\"h-4 w-4 text-green-500\" />\r\n                <span>End-to-end encrypted</span>\r\n                <span>•</span>\r\n                <span>{availableSupport.length} supporters online</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center space-x-2\">\r\n            {/* Emergency Call Button */}\r\n            <button\r\n              onClick={() => window.location.href = 'tel:988'}\r\n              className=\"flex items-center space-x-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors\"\r\n            >\r\n              <Phone className=\"h-4 w-4\" />\r\n              <span>Call 988</span>\r\n            </button>\r\n            \r\n            {/* Sound Toggle */}\r\n            <button\r\n              onClick={() => setSoundEnabled(!soundEnabled)}\r\n              className=\"p-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700\"\r\n            >\r\n              {soundEnabled ? <Volume2 className=\"h-5 w-5\" /> : <VolumeX className=\"h-5 w-5\" />}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Chat Messages Area */}\r\n      <div \r\n        ref={chatContainerRef}\r\n        className=\"flex-1 overflow-y-auto px-6 py-4 space-y-4\"\r\n      >\r\n        <AnimatePresence>\r\n          {messages.map((message) => (\r\n            <motion.div\r\n              key={message.id}\r\n              initial={{ opacity: 0, y: 10 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              className={`flex ${\r\n                message.senderRole === 'user' ? 'justify-end' : 'justify-start'\r\n              }`}\r\n            >\r\n              <div className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${\r\n                message.senderRole === 'user' \r\n                  ? 'bg-blue-500 text-white'\r\n                  : message.type === 'crisis-alert'\r\n                  ? 'bg-red-50 border-2 border-red-200 text-red-800'\r\n                  : message.senderRole === 'system'\r\n                  ? 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200'\r\n                  : message.senderRole === 'professional'\r\n                  ? 'bg-green-50 dark:bg-green-900 text-green-800 dark:text-green-200 border-l-4 border-green-500'\r\n                  : 'bg-white dark:bg-gray-800 text-gray-900 dark:text-white border border-gray-200 dark:border-gray-700'\r\n              }`}>\r\n                {message.senderRole !== 'user' && (\r\n                  <div className=\"flex items-center space-x-2 mb-1\">\r\n                    {message.senderRole === 'professional' && (\r\n                      <UserCheck className=\"h-4 w-4 text-green-600\" />\r\n                    )}\r\n                    <span className=\"text-sm font-medium\">\r\n                      {message.senderName}\r\n                    </span>\r\n                    {message.senderRole === 'professional' && (\r\n                      <span className=\"text-xs bg-green-100 text-green-800 px-2 py-0.5 rounded-full\">\r\n                        Licensed Professional\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                )}\r\n                \r\n                <div className=\"whitespace-pre-wrap\">{message.content}</div>\r\n                \r\n                <div className=\"flex items-center justify-between mt-2 text-xs opacity-70\">\r\n                  <span>{message.timestamp.toLocaleTimeString()}</span>\r\n                  {message.encrypted && (\r\n                    <Lock className=\"h-3 w-3\" />\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </motion.div>\r\n          ))}\r\n        </AnimatePresence>\r\n        \r\n        {/* Typing Indicators */}\r\n        {availableSupport.some(p => p.isTyping) && (\r\n          <motion.div\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            className=\"flex justify-start\"\r\n          >\r\n            <div className=\"bg-gray-100 dark:bg-gray-700 rounded-lg px-4 py-2\">\r\n              <div className=\"flex items-center space-x-2 text-gray-600 dark:text-gray-400\">\r\n                <div className=\"flex space-x-1\">\r\n                  <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse\"></div>\r\n                  <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse delay-100\"></div>\r\n                  <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse delay-200\"></div>\r\n                </div>\r\n                <span className=\"text-sm\">Support is typing...</span>\r\n              </div>\r\n            </div>\r\n          </motion.div>\r\n        )}\r\n        \r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      {/* Message Input Area */}\r\n      <div className=\"bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 px-6 py-4\">\r\n        <div className=\"flex items-center space-x-4\">\r\n          <div className=\"flex-1\">\r\n            <input\r\n              ref={inputRef}\r\n              type=\"text\"\r\n              value={newMessage}\r\n              onChange={(e) => {\r\n                setNewMessage(e.target.value);\r\n                handleTyping();\r\n              }}\r\n              onKeyPress={handleKeyPress}\r\n              placeholder=\"Type your message... Press Enter to send\"\r\n              className=\"w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n              disabled={!isConnected}\r\n            />\r\n          </div>\r\n          \r\n          <button\r\n            onClick={sendMessage}\r\n            disabled={!newMessage.trim() || !isConnected}\r\n            className=\"flex items-center space-x-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n          >\r\n            <Send className=\"h-5 w-5\" />\r\n            <span>Send</span>\r\n          </button>\r\n        </div>\r\n        \r\n        <div className=\"mt-2 flex items-center justify-between text-xs text-gray-500 dark:text-gray-400\">\r\n          <div className=\"flex items-center space-x-4\">\r\n            <span>🔒 Messages are encrypted end-to-end</span>\r\n            <span>•</span>\r\n            <span>Crisis support available 24/7</span>\r\n          </div>\r\n          \r\n          {!isConnected && (\r\n            <div className=\"flex items-center space-x-1 text-red-500\">\r\n              <AlertCircle className=\"h-4 w-4\" />\r\n              <span>Reconnecting...</span>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RealTimeCrisisChat;","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\SafetyPlan.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\SafetyPlanGenerator.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":158,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":158,"endColumn":22},{"ruleId":"no-redeclare","severity":2,"message":"'SafetyPlanSection' is already defined.","line":485,"column":7,"nodeType":"Identifier","messageId":"redeclared","endLine":485,"endColumn":58}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '@/utils/logger';\n/**\r\n * Safety Plan Generator Component\r\n * Creates personalized crisis safety plans with evidence-based interventions\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport {\r\n  Shield, Heart, Phone, _MessageSquare, _MapPin, Activity,\r\n  Brain, _Users, _Home, _Sun, _Moon, _Coffee, _Book, _Music,\r\n  _Zap, AlertTriangle, CheckCircle, Edit, Save, Download,\r\n  Plus, X, _ChevronRight, _Lock, _Unlock\r\n} from 'lucide-react';\r\nimport { secureStorage } from '../../services/security/SecureLocalStorage';\r\nimport { _detectCrisisLevel } from '../../utils/crisis';\r\n\r\ninterface SafetyPlanSection {\r\n  id: string;\r\n  title: string;\r\n  icon: React.ElementType;\r\n  items: string[];\r\n  customizable: boolean;\r\n  required: boolean;\r\n}\r\n\r\ninterface PersonalizedSafetyPlan {\r\n  id: string;\r\n  userId?: string;\r\n  createdAt: Date;\r\n  lastUpdated: Date;\r\n  warningSignals: string[];\r\n  copingStrategies: string[];\r\n  distractionTechniques: string[];\r\n  supportPeople: {\r\n    name: string;\r\n    phone: string;\r\n    relationship: string;\r\n    available: string;\r\n  }[];\r\n  safePlaces: {\r\n    location: string;\r\n    why: string;\r\n    howToGet: string;\r\n  }[];\r\n  professionalContacts: {\r\n    name: string;\r\n    role: string;\r\n    phone: string;\r\n    email?: string;\r\n    available: string;\r\n  }[];\r\n  reasonsToLive: string[];\r\n  selfCareActivities: string[];\r\n  emergencyNumbers: {\r\n    service: string;\r\n    number: string;\r\n    available: string;\r\n  }[];\r\n  personalNotes?: string;\r\n  isLocked: boolean;\r\n}\r\n\r\nconst _DEFAULT_SAFETY_PLAN: PersonalizedSafetyPlan = {\r\n  id: `safety-plan-${Date.now()}`,\r\n  createdAt: new Date(),\r\n  lastUpdated: new Date(),\r\n  warningSignals: [\r\n    'Feeling overwhelmed or hopeless',\r\n    'Isolating from friends and family',\r\n    'Changes in sleep patterns',\r\n    'Difficulty concentrating',\r\n    'Increased anxiety or panic'\r\n  ],\r\n  copingStrategies: [\r\n    'Deep breathing exercises (4-7-8 technique)',\r\n    'Progressive muscle relaxation',\r\n    'Mindfulness meditation',\r\n    'Grounding techniques (5-4-3-2-1)',\r\n    'Cold water on face or ice pack',\r\n    'Physical exercise or walking'\r\n  ],\r\n  distractionTechniques: [\r\n    'Listen to calming music',\r\n    'Watch funny videos',\r\n    'Draw or color',\r\n    'Play with a pet',\r\n    'Count backwards from 100',\r\n    'Name items in categories'\r\n  ],\r\n  supportPeople: [],\r\n  safePlaces: [\r\n    {\r\n      location: 'Local park',\r\n      why: 'Nature helps me feel calm',\r\n      howToGet: 'Walk or short drive'\r\n    },\r\n    {\r\n      location: 'Library',\r\n      why: 'Quiet and peaceful environment',\r\n      howToGet: 'Public transportation'\r\n    }\r\n  ],\r\n  professionalContacts: [],\r\n  reasonsToLive: [\r\n    'My future goals and dreams',\r\n    'People who care about me',\r\n    'Things I want to experience',\r\n    'My values and beliefs',\r\n    'Small joys in daily life'\r\n  ],\r\n  selfCareActivities: [\r\n    'Take a warm bath or shower',\r\n    'Prepare a healthy meal',\r\n    'Get 8 hours of sleep',\r\n    'Spend time in nature',\r\n    'Practice gratitude',\r\n    'Engage in a hobby'\r\n  ],\r\n  emergencyNumbers: [\r\n    {\r\n      service: '988 Suicide & Crisis Lifeline',\r\n      number: '988',\r\n      available: '24/7'\r\n    },\r\n    {\r\n      service: 'Crisis Text Line',\r\n      number: 'Text HOME to 741741',\r\n      available: '24/7'\r\n    },\r\n    {\r\n      service: 'Emergency Services',\r\n      number: '911',\r\n      available: '24/7'\r\n    }\r\n  ],\r\n  isLocked: false\r\n};\r\n\r\nexport const SafetyPlanGenerator: React.FC = () => {\r\n  const [safetyPlan, setSafetyPlan] = useState<PersonalizedSafetyPlan>(_DEFAULT_SAFETY_PLAN);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [_activeSection, _setActiveSection] = useState<string | null>(null);\r\n  const [showSuccess, setShowSuccess] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState<string[]>([]);\r\n\r\n  // Load saved safety plan on mount\r\n  useEffect(() => {\r\n    const _savedPlan = secureStorage.getItem('personalSafetyPlan');\r\n    if (_savedPlan) {\r\n      try {\r\n        const parsed = JSON.parse(_savedPlan);\r\n        setSafetyPlan({\r\n          ...parsed,\r\n          createdAt: new Date(parsed.createdAt),\r\n          lastUpdated: new Date(parsed.lastUpdated)\r\n        });\r\n      } catch (_error) {\r\n        logger.error('Failed to load safety plan:');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const saveSafetyPlan = () => {\r\n    // Validate required fields\r\n    const errors = [];\r\n    if (safetyPlan.warningSignals.length === 0) {\r\n      errors.push('Please add at least one warning signal');\r\n    }\r\n    if (safetyPlan.copingStrategies.length === 0) {\r\n      errors.push('Please add at least one coping strategy');\r\n    }\r\n    if (safetyPlan.emergencyNumbers.length === 0) {\r\n      errors.push('Please add at least one emergency contact');\r\n    }\r\n\r\n    if (errors.length > 0) {\r\n      setValidationErrors(_errors);\r\n      return;\r\n    }\r\n\r\n    // Save to secure storage\r\n    const _updatedPlan = {\r\n      ...safetyPlan,\r\n      lastUpdated: new Date()\r\n    };\r\n    \r\n    secureStorage.setItem('personalSafetyPlan', JSON.stringify(_updatedPlan));\r\n    setSafetyPlan(_updatedPlan);\r\n    setIsEditing(false);\r\n    setShowSuccess(true);\r\n    setValidationErrors([]);\r\n    \r\n    setTimeout(() => setShowSuccess(false), 3000);\r\n  };\r\n\r\n  const exportSafetyPlan = () => {\r\n    const planText = generatePlanText();\r\n    const _blob = new Blob([planText], { type: 'text/plain' });\r\n    const url = URL.createObjectURL(_blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `safety-plan-${new Date().toISOString().split('T')[0]}.txt`;\r\n    a.click();\r\n    URL.revokeObjectURL(_url);\r\n  };\r\n\r\n  const generatePlanText = () => {\r\n    let text = '=== MY PERSONAL SAFETY PLAN ===\\n\\n';\r\n    text += `Created: ${safetyPlan.createdAt.toLocaleDateString()}\\n`;\r\n    text += `Last Updated: ${safetyPlan.lastUpdated.toLocaleDateString()}\\n\\n`;\r\n    \r\n    text += '1. WARNING SIGNALS (Signs I need to use my plan):\\n';\r\n    safetyPlan.warningSignals.forEach(signal => {\r\n      text += `   • ${signal}\\n`;\r\n    });\r\n    \r\n    text += '\\n2. COPING STRATEGIES (Things I can do on my own):\\n';\r\n    safetyPlan.copingStrategies.forEach(strategy => {\r\n      text += `   • ${strategy}\\n`;\r\n    });\r\n    \r\n    text += '\\n3. DISTRACTION TECHNIQUES:\\n';\r\n    safetyPlan.distractionTechniques.forEach(technique => {\r\n      text += `   • ${technique}\\n`;\r\n    });\r\n    \r\n    if (safetyPlan.supportPeople.length > 0) {\r\n      text += '\\n4. SUPPORT PEOPLE:\\n';\r\n      safetyPlan.supportPeople.forEach(person => {\r\n        text += `   • ${person.name} (${person.relationship})\\n`;\r\n        text += `     Phone: ${person.phone}\\n`;\r\n        text += `     Available: ${person.available}\\n`;\r\n      });\r\n    }\r\n    \r\n    if (safetyPlan.safePlaces.length > 0) {\r\n      text += '\\n5. SAFE PLACES:\\n';\r\n      safetyPlan.safePlaces.forEach(place => {\r\n        text += `   • ${place.location}\\n`;\r\n        text += `     Why it helps: ${place.why}\\n`;\r\n        text += `     How to get there: ${place.howToGet}\\n`;\r\n      });\r\n    }\r\n    \r\n    text += '\\n6. REASONS TO LIVE:\\n';\r\n    safetyPlan.reasonsToLive.forEach(reason => {\r\n      text += `   • ${reason}\\n`;\r\n    });\r\n    \r\n    text += '\\n7. EMERGENCY CONTACTS:\\n';\r\n    safetyPlan.emergencyNumbers.forEach(contact => {\r\n      text += `   • ${contact.service}: ${contact.number} (${contact.available})\\n`;\r\n    });\r\n    \r\n    if (safetyPlan.personalNotes) {\r\n      text += `\\nPERSONAL NOTES:\\n${safetyPlan.personalNotes}\\n`;\r\n    }\r\n    \r\n    text += '\\n=== REMEMBER: You are not alone. Help is always available. ===';\r\n    \r\n    return text;\r\n  };\r\n\r\n  const addItem = (section: keyof PersonalizedSafetyPlan, item: unknown) => {\r\n    setSafetyPlan(prev => ({\r\n      ...prev,\r\n      [section]: Array.isArray(prev[section]) \r\n        ? [...(prev[section] as unknown[]), item]\r\n        : item\r\n    }));\r\n  };\r\n\r\n  const removeItem = (section: keyof PersonalizedSafetyPlan, index: number) => {\r\n    setSafetyPlan(prev => ({\r\n      ...prev,\r\n      [section]: (prev[section] as unknown[]).filter((_, i) => i !== index)\r\n    }));\r\n  };\r\n\r\n  const updateItem = (section: keyof PersonalizedSafetyPlan, index: number, value: unknown) => {\r\n    setSafetyPlan(prev => ({\r\n      ...prev,\r\n      [section]: (prev[section] as unknown[]).map((item, i) => i === index ? value : item)\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 p-6\">\r\n      {/* Header */}\r\n      <motion.div\r\n        initial={{ opacity: 0, y: -20 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        className=\"max-w-4xl mx-auto mb-8\"\r\n      >\r\n        <div className=\"flex items-center justify-between mb-4\">\r\n          <div className=\"flex items-center space-x-3\">\r\n            <div className=\"bg-gradient-to-r from-green-400 to-emerald-500 p-3 rounded-xl\">\r\n              <Shield className=\"h-8 w-8 text-white\" />\r\n            </div>\r\n            <div>\r\n              <h1 className=\"text-3xl font-bold text-white\">Personal Safety Plan</h1>\r\n              <p className=\"text-gray-300\">Your personalized crisis prevention toolkit</p>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center space-x-3\">\r\n            {!isEditing ? (\r\n              <>\r\n                <button\r\n                  onClick={() => setIsEditing(true)}\r\n                  className=\"px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors flex items-center space-x-2\"\r\n                >\r\n                  <Edit className=\"h-4 w-4\" />\r\n                  <span>Edit Plan</span>\r\n                </button>\r\n                <button\r\n                  onClick={exportSafetyPlan}\r\n                  className=\"px-4 py-2 bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition-colors flex items-center space-x-2\"\r\n                >\r\n                  <Download className=\"h-4 w-4\" />\r\n                  <span>Export</span>\r\n                </button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <button\r\n                  onClick={saveSafetyPlan}\r\n                  className=\"px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors flex items-center space-x-2\"\r\n                >\r\n                  <Save className=\"h-4 w-4\" />\r\n                  <span>Save Changes</span>\r\n                </button>\r\n                <button\r\n                  onClick={() => {\r\n                    setIsEditing(false);\r\n                    setValidationErrors([]);\r\n                  }}\r\n                  className=\"px-4 py-2 bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition-colors\"\r\n                >\r\n                  Cancel\r\n                </button>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Success Message */}\r\n        <AnimatePresence>\r\n          {showSuccess && (\r\n            <motion.div\r\n              initial={{ opacity: 0, y: -10 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              exit={{ opacity: 0, y: -10 }}\r\n              className=\"bg-green-500/20 border border-green-400 text-green-300 px-4 py-2 rounded-lg flex items-center space-x-2\"\r\n            >\r\n              <CheckCircle className=\"h-5 w-5\" />\r\n              <span>Safety plan saved successfully!</span>\r\n            </motion.div>\r\n          )}\r\n        </AnimatePresence>\r\n\r\n        {/* Validation Errors */}\r\n        {validationErrors.length > 0 && (\r\n          <div className=\"bg-red-500/20 border border-red-400 text-red-300 px-4 py-2 rounded-lg mt-4\">\r\n            {validationErrors.map((error, index) => (\r\n              <div key={index} className=\"flex items-center space-x-2\">\r\n                <AlertTriangle className=\"h-4 w-4\" />\r\n                <span>{error}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </motion.div>\r\n\r\n      {/* Safety Plan Sections */}\r\n      <div className=\"max-w-4xl mx-auto space-y-6\">\r\n        {/* Warning Signals */}\r\n        <SafetyPlanSection\r\n          title=\"Warning Signals\"\r\n          subtitle=\"Early signs that I need to use my safety plan\"\r\n          icon={AlertTriangle}\r\n          items={safetyPlan.warningSignals}\r\n          isEditing={isEditing}\r\n          onAdd={(item) => addItem('warningSignals', item)}\r\n          onRemove={(index) => removeItem('warningSignals', index)}\r\n          onUpdate={(index, value) => updateItem('warningSignals', index, value)}\r\n          placeholder=\"e.g., Feeling overwhelmed, isolating myself\"\r\n          color=\"from-orange-400 to-red-500\"\r\n        />\r\n\r\n        {/* Coping Strategies */}\r\n        <SafetyPlanSection\r\n          title=\"Coping Strategies\"\r\n          subtitle=\"Things I can do on my own to feel better\"\r\n          icon={Brain}\r\n          items={safetyPlan.copingStrategies}\r\n          isEditing={isEditing}\r\n          onAdd={(item) => addItem('copingStrategies', item)}\r\n          onRemove={(index) => removeItem('copingStrategies', index)}\r\n          onUpdate={(index, value) => updateItem('copingStrategies', index, value)}\r\n          placeholder=\"e.g., Deep breathing, go for a walk\"\r\n          color=\"from-blue-400 to-indigo-500\"\r\n        />\r\n\r\n        {/* Distraction Techniques */}\r\n        <SafetyPlanSection\r\n          title=\"Distraction Techniques\"\r\n          subtitle=\"Activities to shift my focus\"\r\n          icon={Activity}\r\n          items={safetyPlan.distractionTechniques}\r\n          isEditing={isEditing}\r\n          onAdd={(item) => addItem('distractionTechniques', item)}\r\n          onRemove={(index) => removeItem('distractionTechniques', index)}\r\n          onUpdate={(index, value) => updateItem('distractionTechniques', index, value)}\r\n          placeholder=\"e.g., Listen to music, watch a movie\"\r\n          color=\"from-purple-400 to-pink-500\"\r\n        />\r\n\r\n        {/* Reasons to Live */}\r\n        <SafetyPlanSection\r\n          title=\"Reasons to Live\"\r\n          subtitle=\"What makes life worth living for me\"\r\n          icon={Heart}\r\n          items={safetyPlan.reasonsToLive}\r\n          isEditing={isEditing}\r\n          onAdd={(item) => addItem('reasonsToLive', item)}\r\n          onRemove={(index) => removeItem('reasonsToLive', index)}\r\n          onUpdate={(index, value) => updateItem('reasonsToLive', index, value)}\r\n          placeholder=\"e.g., My family, future goals, my pet\"\r\n          color=\"from-pink-400 to-red-500\"\r\n        />\r\n\r\n        {/* Emergency Contacts - Always Visible */}\r\n        <motion.div className=\"bg-gray-800/50 rounded-2xl p-6 border border-gray-700/50\">\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <div className=\"flex items-center space-x-3\">\r\n              <div className=\"bg-gradient-to-r from-red-500 to-red-600 p-2 rounded-lg\">\r\n                <Phone className=\"h-6 w-6 text-white\" />\r\n              </div>\r\n              <div>\r\n                <h2 className=\"text-xl font-semibold text-white\">Emergency Contacts</h2>\r\n                <p className=\"text-gray-400 text-sm\">Available 24/7 for immediate support</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"space-y-3\">\r\n            {safetyPlan.emergencyNumbers.map((contact, index) => (\r\n              <div key={index} className=\"bg-gray-900/50 rounded-lg p-4 flex items-center justify-between\">\r\n                <div>\r\n                  <div className=\"text-white font-medium\">{contact.service}</div>\r\n                  <div className=\"text-gray-300\">{contact.number}</div>\r\n                  <div className=\"text-gray-400 text-sm\">{contact.available}</div>\r\n                </div>\r\n                <button\r\n                  onClick={() => window.location.href = `tel:${contact.number.replace(/\\D/g, '')}`}\r\n                  className=\"bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors\"\r\n                >\r\n                  Call Now\r\n                </button>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </motion.div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Reusable Section Component\r\ninterface SafetyPlanSectionProps {\r\n  title: string;\r\n  subtitle: string;\r\n  icon: React.ElementType;\r\n  items: string[];\r\n  isEditing: boolean;\r\n  onAdd: (item: string) => void;\r\n  onRemove: (index: number) => void;\r\n  onUpdate: (index: number, value: string) => void;\r\n  placeholder: string;\r\n  color: string;\r\n}\r\n\r\nconst SafetyPlanSection: React.FC<SafetyPlanSectionProps> = ({\r\n  title,\r\n  subtitle,\r\n  icon: Icon,\r\n  items,\r\n  isEditing,\r\n  onAdd,\r\n  onRemove,\r\n  onUpdate,\r\n  placeholder,\r\n  color\r\n}) => {\r\n  const [newItem, setNewItem] = useState('');\r\n\r\n  const handleAdd = () => {\r\n    if (newItem.trim()) {\r\n      onAdd(newItem.trim());\r\n      setNewItem('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0, y: 20 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      className=\"bg-gray-800/50 rounded-2xl p-6 border border-gray-700/50\"\r\n    >\r\n      <div className=\"flex items-center justify-between mb-4\">\r\n        <div className=\"flex items-center space-x-3\">\r\n          <div className={`bg-gradient-to-r ${color} p-2 rounded-lg`}>\r\n            <Icon className=\"h-6 w-6 text-white\" />\r\n          </div>\r\n          <div>\r\n            <h2 className=\"text-xl font-semibold text-white\">{title}</h2>\r\n            <p className=\"text-gray-400 text-sm\">{subtitle}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"space-y-2\">\r\n        {items.map((item, index) => (\r\n          <div key={index} className=\"flex items-center justify-between bg-gray-900/30 rounded-lg p-3\">\r\n            {isEditing ? (\r\n              <>\r\n                <input\r\n                  type=\"text\"\r\n                  value={item}\r\n                  onChange={(e) => onUpdate(index, e.target.value)}\r\n                  className=\"flex-1 bg-transparent text-gray-300 outline-none\"\r\n                />\r\n                <button\r\n                  onClick={() => onRemove(_index)}\r\n                  className=\"text-red-400 hover:text-red-300 ml-2\"\r\n                >\r\n                  <X className=\"h-4 w-4\" />\r\n                </button>\r\n              </>\r\n            ) : (\r\n              <span className=\"text-gray-300\">{item}</span>\r\n            )}\r\n          </div>\r\n        ))}\r\n        \r\n        {isEditing && (\r\n          <div className=\"flex items-center space-x-2 mt-3\">\r\n            <input\r\n              type=\"text\"\r\n              value={newItem}\r\n              onChange={(e) => setNewItem(e.target.value)}\r\n              onKeyPress={(e) => e.key === 'Enter' && handleAdd()}\r\n              placeholder={placeholder}\r\n              className=\"flex-1 bg-gray-900/50 text-white placeholder-gray-500 px-3 py-2 rounded-lg outline-none focus:ring-2 focus:ring-blue-500\"\r\n            />\r\n            <button\r\n              onClick={handleAdd}\r\n              className=\"bg-blue-500 text-white p-2 rounded-lg hover:bg-blue-600 transition-colors\"\r\n            >\r\n              <Plus className=\"h-5 w-5\" />\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default SafetyPlanGenerator;","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\UnifiedCrisisButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":109,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":109,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '@/utils/logger';\n/**\r\n * Unified Crisis Button Component\r\n * Consolidates all crisis button implementations with theming, haptic feedback, and accessibility\r\n */\r\n\r\nimport React, { useState, useRef, useCallback, useEffect } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { Phone, MessageSquare, Shield, AlertTriangle, Heart, MapPin } from 'lucide-react';\r\nimport { useVibration } from '../../hooks/useVibration';\r\nimport { useNetworkStatus } from '../../hooks/useNetworkStatus';\r\nimport { \r\n  handleEmergencyCall, \r\n  logCrisisInteraction, \r\n  getEmergencyLocation,\r\n  getRecommendedContacts\r\n} from '../../utils/crisis';\r\nimport { \r\n  CRISIS_ACTIONS, \r\n  _EMERGENCY_CONTACTS, \r\n  HAPTIC_PATTERNS, \r\n  CRISIS_THEMES,\r\n  CrisisLevel,\r\n  CrisisTheme\r\n} from '../../constants/crisis';\r\n\r\ninterface UnifiedCrisisButtonProps {\r\n  variant?: 'primary' | 'floating' | 'quick' | 'emergency';\r\n  theme?: CrisisTheme;\r\n  crisisLevel?: CrisisLevel;\r\n  size?: 'sm' | 'md' | 'lg' | 'xl';\r\n  showLabel?: boolean;\r\n  showSubtext?: boolean;\r\n  disabled?: boolean;\r\n  className?: string;\r\n  onActionTaken?: (action: string) => void;\r\n}\r\n\r\nconst iconMap = {\r\n  Phone,\r\n  MessageSquare,\r\n  Shield,\r\n  AlertTriangle,\r\n  Heart,\r\n  MapPin\r\n};\r\n\r\nexport function UnifiedCrisisButton({\r\n  variant = 'primary',\r\n  theme = 'therapeutic',\r\n  crisisLevel = 'moderate',\r\n  size = 'lg',\r\n  showLabel = true,\r\n  showSubtext = true,\r\n  disabled = false,\r\n  className = '',\r\n  onActionTaken\r\n}: UnifiedCrisisButtonProps) {\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const [location, _setLocation] = useState<GeolocationCoordinates | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const longPressTimer = useRef<NodeJS.Timeout | null>(null);\r\n  const { consoleVibrate } = useVibration();\r\n  const { isOnline } = useNetworkStatus();\r\n\r\n  // Get location on mount for emergency services\r\n  useEffect(() => {\r\n    if (variant === 'emergency' || crisisLevel === 'critical') {\r\n      getEmergencyLocation()\r\n        .then(_setLocation)\r\n        .catch(error => logger.warn('Could not get location:', error));\r\n    }\r\n  }, [variant, crisisLevel]);\r\n\r\n  const handleAction = useCallback(async (actionId: string) => {\r\n    setIsLoading(true);\r\n    consoleVibrate('activation', HAPTIC_PATTERNS.urgent);\r\n\r\n    try {\r\n      const action = CRISIS_ACTIONS.find(a => a.id === actionId);\r\n      if (!action) return;\r\n\r\n      // Log the action\r\n      await logCrisisInteraction(actionId, crisisLevel, {\r\n        variant,\r\n        theme,\r\n        location: location ? {\r\n          lat: location.latitude,\r\n          lng: location.longitude\r\n        } : null\r\n      });\r\n\r\n      // Handle different action types\r\n      if (typeof action.action === 'string') {\r\n        if (action.action.startsWith('tel:') || action.action.startsWith('sms:')) {\r\n          // Emergency contact\r\n          const contactId = actionId.includes('988') ? '988' : \r\n                           actionId.includes('911') ? '911' : \r\n                           actionId.includes('text') ? 'crisis-text' : 'samhsa';\r\n          \r\n          await handleEmergencyCall(contactId, location || undefined);\r\n        } else {\r\n          // Navigate to internal route\r\n          window.location.href = action.action;\r\n        }\r\n      }\r\n\r\n      onActionTaken?.(_actionId);\r\n    } catch (_error) {\r\n      logger.error('Crisis action failed:');\r\n      consoleVibrate('undefined', HAPTIC_PATTERNS.undefined);\r\n    } finally {\r\n      setIsLoading(false);\r\n      setIsExpanded(false);\r\n    }\r\n  }, [crisisLevel, location, variant, theme, consoleVibrate, onActionTaken]);\r\n\r\n  const handleLongPressStart = useCallback(() => {\r\n    longPressTimer.current = setTimeout(() => {\r\n      handleAction('call-988'); // Default long press action\r\n    }, 800);\r\n  }, [handleAction]);\r\n\r\n  const handleLongPressEnd = useCallback(() => {\r\n    if (longPressTimer.current) {\r\n      clearTimeout(longPressTimer.current);\r\n      longPressTimer.current = null;\r\n    }\r\n  }, []);\r\n\r\n  const getThemeClasses = () => {\r\n    const themes = CRISIS_THEMES[theme];\r\n    return {\r\n      primary: themes.crisis,\r\n      emergency: themes.emergency,\r\n      safe: themes.safe,\r\n      accent: themes.accent\r\n    };\r\n  };\r\n\r\n  const getSizeClasses = () => {\r\n    const sizes = {\r\n      sm: 'w-12 h-12 text-sm',\r\n      md: 'w-16 h-16 text-base',\r\n      lg: 'w-20 h-20 text-lg',\r\n      xl: 'w-24 h-24 text-xl'\r\n    };\r\n    return sizes[size];\r\n  };\r\n\r\n  if (variant === 'primary') {\r\n    return (\r\n      <motion.button\r\n        whileTap={{ scale: 0.95 }}\r\n        onClick={() => handleAction('call-988')}\r\n        onMouseDown={handleLongPressStart}\r\n        onMouseUp={handleLongPressEnd}\r\n        onMouseLeave={handleLongPressEnd}\r\n        onTouchStart={handleLongPressStart}\r\n        onTouchEnd={handleLongPressEnd}\r\n        disabled={disabled || isLoading}\r\n        className={`\r\n          relative w-full p-6 rounded-2xl shadow-lg transition-all duration-300\r\n          ${getThemeClasses().primary} text-white\r\n          ${disabled ? 'opacity-50 cursor-not-allowed' : 'active:shadow-inner hover:shadow-xl'}\r\n          ${crisisLevel === 'critical' ? 'animate-pulse' : ''}\r\n          ${className}\r\n        `}\r\n        aria-label=\"Call 988 Suicide & Crisis Lifeline for immediate help\"\r\n      >\r\n        <div className=\"flex flex-col items-center space-y-3\">\r\n          <div className=\"relative\">\r\n            <Phone className=\"h-10 w-10\" />\r\n            {isLoading && (\r\n              <motion.div\r\n                animate={{ rotate: 360 }}\r\n                transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\r\n                className=\"absolute inset-0 border-2 border-white/30 border-t-white rounded-full\"\r\n              />\r\n            )}\r\n          </div>\r\n          \r\n          {showLabel && (\r\n            <div className=\"text-center\">\r\n              <span className=\"text-xl font-bold block\">Call 988</span>\r\n              {showSubtext && (\r\n                <span className=\"text-white/80 text-sm block mt-1\">\r\n                  Suicide & Crisis Lifeline\r\n                </span>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Urgent indicator */}\r\n        {(crisisLevel === 'critical' || crisisLevel === 'high') && (\r\n          <div className=\"absolute top-3 right-3\">\r\n            <motion.span \r\n              className=\"flex h-4 w-4\"\r\n              animate={{ scale: [1, 1.2, 1] }}\r\n              transition={{ duration: 1, repeat: Infinity }}\r\n            >\r\n              <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-white opacity-75\"></span>\r\n              <span className=\"relative inline-flex rounded-full h-4 w-4 bg-white\"></span>\r\n            </motion.span>\r\n          </div>\r\n        )}\r\n      </motion.button>\r\n    );\r\n  }\r\n\r\n  if (variant === 'floating') {\r\n    return (\r\n      <div className=\"fixed bottom-20 right-4 z-50\">\r\n        <AnimatePresence>\r\n          {isExpanded && (\r\n            <motion.div\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              exit={{ opacity: 0, y: 20 }}\r\n              className=\"absolute bottom-16 right-0 space-y-2 mb-2\"\r\n            >\r\n              {getRecommendedContacts(_crisisLevel).slice(0, 3).map((contact) => {\r\n                const IconComponent = iconMap[contact.type === 'phone' ? 'Phone' : 'MessageSquare'];\r\n                return (\r\n                  <motion.button\r\n                    key={contact.id}\r\n                    whileTap={{ scale: 0.95 }}\r\n                    onClick={() => handleAction(\r\n                      contact.id === '988' ? 'call-988' : \r\n                      contact.id === 'crisis-text' ? 'text-home' : 'call-911'\r\n                    )}\r\n                    className={`\r\n                      w-14 h-14 rounded-full shadow-lg flex items-center justify-center text-white\r\n                      ${contact.priority === 1 ? getThemeClasses().emergency : getThemeClasses().primary}\r\n                    `}\r\n                    aria-label={`${contact.name}: ${contact.description}`}\r\n                  >\r\n                    <IconComponent className=\"h-6 w-6\" />\r\n                  </motion.button>\r\n                );\r\n              })}\r\n            </motion.div>\r\n          )}\r\n        </AnimatePresence>\r\n        \r\n        <motion.button\r\n          whileTap={{ scale: 0.9 }}\r\n          onClick={() => setIsExpanded(!isExpanded)}\r\n          onMouseDown={handleLongPressStart}\r\n          onMouseUp={handleLongPressEnd}\r\n          onMouseLeave={handleLongPressEnd}\r\n          onTouchStart={handleLongPressStart}\r\n          onTouchEnd={handleLongPressEnd}\r\n          className={`\r\n            ${getSizeClasses()} ${getThemeClasses().emergency} \r\n            rounded-full shadow-2xl flex items-center justify-center text-white relative\r\n            transition-all duration-300 hover:scale-105\r\n          `}\r\n          aria-label=\"Emergency crisis support options\"\r\n        >\r\n          <AlertTriangle className=\"h-8 w-8\" />\r\n          <motion.span \r\n            className=\"absolute -top-1 -right-1 flex h-4 w-4\"\r\n            animate={{ scale: [1, 1.3, 1] }}\r\n            transition={{ duration: 1, repeat: Infinity }}\r\n          >\r\n            <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75\"></span>\r\n            <span className=\"relative inline-flex rounded-full h-4 w-4 bg-red-400\"></span>\r\n          </motion.span>\r\n        </motion.button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (variant === 'quick') {\r\n    return (\r\n      <motion.button\r\n        whileTap={{ scale: 0.95 }}\r\n        onClick={() => handleAction('call-988')}\r\n        disabled={disabled || isLoading}\r\n        className={`\r\n          relative ${getSizeClasses()} ${getThemeClasses().primary}\r\n          rounded-xl shadow-lg flex items-center justify-center text-white\r\n          transition-all duration-300 \r\n          ${disabled ? 'opacity-50 cursor-not-allowed' : 'hover:scale-105 active:scale-95'}\r\n          ${className}\r\n        `}\r\n        aria-label=\"Quick crisis support\"\r\n      >\r\n        <AlertTriangle className={`${size === 'sm' ? 'h-5 w-5' : 'h-6 w-6'}`} />\r\n        \r\n        {!isOnline && (\r\n          <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-yellow-500 rounded-full border-2 border-white\" />\r\n        )}\r\n      </motion.button>\r\n    );\r\n  }\r\n\r\n  if (variant === 'emergency') {\r\n    return (\r\n      <div className=\"space-y-4\">\r\n        {/* Primary Emergency Actions */}\r\n        <motion.button\r\n          whileTap={{ scale: 0.95 }}\r\n          onClick={() => handleAction('call-988')}\r\n          disabled={disabled}\r\n          className={`\r\n            w-full p-6 rounded-2xl shadow-lg transition-all\r\n            ${getThemeClasses().emergency} text-white\r\n            ${crisisLevel === 'critical' ? 'animate-pulse' : ''}\r\n            ${disabled ? 'opacity-50 cursor-not-allowed' : 'active:shadow-inner'}\r\n          `}\r\n          aria-label=\"Call 988 Suicide & Crisis Lifeline - Primary emergency contact\"\r\n        >\r\n          <div className=\"flex items-center space-x-4\">\r\n            <div className=\"flex-shrink-0\">\r\n              <Phone className=\"h-10 w-10\" />\r\n            </div>\r\n            <div className=\"text-left\">\r\n              <div className=\"text-xl font-bold\">Call 988</div>\r\n              <div className=\"text-white/80 text-sm\">Suicide & Crisis Lifeline • Available 24/7</div>\r\n            </div>\r\n          </div>\r\n        </motion.button>\r\n\r\n        {/* Secondary Actions Grid */}\r\n        <div className=\"grid grid-cols-2 gap-4\">\r\n          <motion.button\r\n            whileTap={{ scale: 0.95 }}\r\n            onClick={() => handleAction('text-home')}\r\n            disabled={disabled}\r\n            className={`\r\n              p-4 rounded-xl shadow transition-all\r\n              ${getThemeClasses().primary} text-white\r\n              ${disabled ? 'opacity-50 cursor-not-allowed' : 'hover:shadow-lg'}\r\n            `}\r\n            aria-label=\"Text HOME to 741741 for crisis support\"\r\n          >\r\n            <MessageSquare className=\"h-8 w-8 mx-auto mb-2\" />\r\n            <div className=\"text-sm font-semibold\">Text Help</div>\r\n            <div className=\"text-xs text-white/80\">741741</div>\r\n          </motion.button>\r\n\r\n          <motion.button\r\n            whileTap={{ scale: 0.95 }}\r\n            onClick={() => handleAction('call-911')}\r\n            disabled={disabled}\r\n            className={`\r\n              p-4 rounded-xl shadow transition-all\r\n              ${getThemeClasses().emergency} text-white\r\n              ${disabled ? 'opacity-50 cursor-not-allowed' : 'hover:shadow-lg'}\r\n            `}\r\n            aria-label=\"Call 911 for emergency services\"\r\n          >\r\n            <Shield className=\"h-8 w-8 mx-auto mb-2\" />\r\n            <div className=\"text-sm font-semibold\">Call 911</div>\r\n            <div className=\"text-xs text-white/80\">Emergency</div>\r\n          </motion.button>\r\n        </div>\r\n\r\n        {/* Location Status */}\r\n        {location && (\r\n          <div className=\"text-xs text-gray-600 text-center\">\r\n            📍 Location available for emergency services\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\crisis\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\DashboardOnboarding.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'completedSteps' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":31,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showWelcome' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":32,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setShowWelcome' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":32,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":37}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  X, ChevronRight, ChevronLeft, Check, \n  Shield, Brain, _Heart, _Users, _Target, \n  Sparkles, _Bell, _MapPin, Phone, Settings,\n  _HelpCircle, Award, TrendingUp\n} from 'lucide-react';\nimport { useAnalytics } from '../../hooks/useAnalytics';\nimport { useAuth } from '../../hooks/useAuth';\n\ninterface OnboardingStep {\n  id: string;\n  title: string;\n  description: string;\n  icon: React.ComponentType<unknown>;\n  content: React.ReactNode;\n  action?: () => void;\n  actionLabel?: string;\n}\n\ninterface DashboardOnboardingProps {\n  onComplete: () => void;\n  onSkip?: () => void;\n}\n\nexport function DashboardOnboarding({ onComplete, onSkip }: DashboardOnboardingProps) {\n  const { user } = useAuth();\n  const { trackEvent } = useAnalytics();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [completedSteps, setCompletedSteps] = useState<Set<string>>(new Set());\n  const [showWelcome, setShowWelcome] = useState(true);\n\n  const steps: OnboardingStep[] = [\n    {\n      id: 'welcome',\n      title: 'Welcome to Your Personal Dashboard',\n      description: 'Your mental health journey starts here',\n      icon: Sparkles,\n      content: (\n        <div className=\"space-y-4\">\n          <p className=\"text-gray-600\">\n            Hi {user?.name?.split(' ')[0] || 'there'}! Your new dashboard is designed to support your mental wellness journey with powerful tools and insights.\n          </p>\n          <div className=\"grid grid-cols-2 gap-3\">\n            <div className=\"flex items-center space-x-2 p-3 bg-green-50 rounded-lg\">\n              <Check className=\"h-5 w-5 text-green-600\" />\n              <span className=\"text-sm\">24/7 Crisis Support</span>\n            </div>\n            <div className=\"flex items-center space-x-2 p-3 bg-blue-50 rounded-lg\">\n              <Check className=\"h-5 w-5 text-blue-600\" />\n              <span className=\"text-sm\">AI-Powered Insights</span>\n            </div>\n            <div className=\"flex items-center space-x-2 p-3 bg-purple-50 rounded-lg\">\n              <Check className=\"h-5 w-5 text-purple-600\" />\n              <span className=\"text-sm\">Activity Tracking</span>\n            </div>\n            <div className=\"flex items-center space-x-2 p-3 bg-orange-50 rounded-lg\">\n              <Check className=\"h-5 w-5 text-orange-600\" />\n              <span className=\"text-sm\">Professional Care</span>\n            </div>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 'crisis',\n      title: 'Crisis Support Always Available',\n      description: 'Get help when you need it most',\n      icon: Shield,\n      content: (\n        <div className=\"space-y-4\">\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n            <div className=\"flex items-start space-x-3\">\n              <Phone className=\"h-6 w-6 text-red-600 mt-1\" />\n              <div>\n                <h4 className=\"font-semibold text-red-900\">Emergency Hotline: 988</h4>\n                <p className=\"text-sm text-red-700 mt-1\">\n                  Available 24/7 for immediate crisis support. This number is always accessible, even offline.\n                </p>\n              </div>\n            </div>\n          </div>\n          <div className=\"space-y-2\">\n            <p className=\"text-sm text-gray-600\">Your crisis panel includes:</p>\n            <ul className=\"space-y-1\">\n              <li className=\"flex items-center space-x-2\">\n                <Check className=\"h-4 w-4 text-green-600\" />\n                <span className=\"text-sm\">Real-time risk assessment</span>\n              </li>\n              <li className=\"flex items-center space-x-2\">\n                <Check className=\"h-4 w-4 text-green-600\" />\n                <span className=\"text-sm\">One-tap emergency contacts</span>\n              </li>\n              <li className=\"flex items-center space-x-2\">\n                <Check className=\"h-4 w-4 text-green-600\" />\n                <span className=\"text-sm\">Location sharing for emergencies</span>\n              </li>\n              <li className=\"flex items-center space-x-2\">\n                <Check className=\"h-4 w-4 text-green-600\" />\n                <span className=\"text-sm\">Personalized safety plan</span>\n              </li>\n            </ul>\n          </div>\n        </div>\n      ),\n      actionLabel: 'Set Up Safety Plan',\n      action: () => {\n        window.location.href = '/crisis/safety-plan';\n      }\n    },\n    {\n      id: 'tracking',\n      title: 'Track Your Progress',\n      description: 'Monitor your wellness journey',\n      icon: TrendingUp,\n      content: (\n        <div className=\"space-y-4\">\n          <p className=\"text-gray-600\">\n            Track your mood, activities, and wellness goals all in one place.\n          </p>\n          <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-4\">\n            <div className=\"grid grid-cols-3 gap-4 text-center\">\n              <div>\n                <div className=\"text-2xl font-bold text-purple-600\">7</div>\n                <div className=\"text-xs text-gray-600\">Day Streak</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-blue-600\">85%</div>\n                <div className=\"text-xs text-gray-600\">Goal Progress</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-green-600\">+12</div>\n                <div className=\"text-xs text-gray-600\">Mood Trend</div>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2 p-3 bg-yellow-50 rounded-lg\">\n            <Award className=\"h-5 w-5 text-yellow-600\" />\n            <span className=\"text-sm\">Earn achievements as you progress!</span>\n          </div>\n        </div>\n      ),\n      actionLabel: 'Log First Mood',\n      action: () => {\n        window.location.href = '/wellness/mood';\n      }\n    },\n    {\n      id: 'ai-insights',\n      title: 'AI-Powered Insights',\n      description: 'Get personalized recommendations',\n      icon: Brain,\n      content: (\n        <div className=\"space-y-4\">\n          <p className=\"text-gray-600\">\n            Our AI analyzes your patterns to provide personalized insights and recommendations.\n          </p>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-start space-x-3 p-3 bg-purple-50 rounded-lg\">\n              <Sparkles className=\"h-5 w-5 text-purple-600 mt-0.5\" />\n              <div>\n                <h4 className=\"text-sm font-semibold\">Pattern Recognition</h4>\n                <p className=\"text-xs text-gray-600 mt-1\">\n                  Identifies triggers and positive influences in your daily life\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-start space-x-3 p-3 bg-blue-50 rounded-lg\">\n              <Brain className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n              <div>\n                <h4 className=\"text-sm font-semibold\">Smart Recommendations</h4>\n                <p className=\"text-xs text-gray-600 mt-1\">\n                  Suggests activities and coping strategies based on your needs\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-start space-x-3 p-3 bg-green-50 rounded-lg\">\n              <TrendingUp className=\"h-5 w-5 text-green-600 mt-0.5\" />\n              <div>\n                <h4 className=\"text-sm font-semibold\">Progress Predictions</h4>\n                <p className=\"text-xs text-gray-600 mt-1\">\n                  Forecasts your wellness trajectory and celebrates achievements\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 'customize',\n      title: 'Make It Yours',\n      description: 'Customize your dashboard',\n      icon: Settings,\n      content: (\n        <div className=\"space-y-4\">\n          <p className=\"text-gray-600\">\n            Personalize your dashboard to match your needs and preferences.\n          </p>\n          <div className=\"space-y-3\">\n            <div className=\"p-3 border border-gray-200 rounded-lg\">\n              <h4 className=\"text-sm font-semibold mb-2\">Widget Layout</h4>\n              <p className=\"text-xs text-gray-600\">\n                Drag and drop widgets to arrange your perfect dashboard\n              </p>\n            </div>\n            <div className=\"p-3 border border-gray-200 rounded-lg\">\n              <h4 className=\"text-sm font-semibold mb-2\">Notification Preferences</h4>\n              <p className=\"text-xs text-gray-600\">\n                Choose when and how you want to receive reminders\n              </p>\n            </div>\n            <div className=\"p-3 border border-gray-200 rounded-lg\">\n              <h4 className=\"text-sm font-semibold mb-2\">Privacy Settings</h4>\n              <p className=\"text-xs text-gray-600\">\n                Control your data sharing and visibility preferences\n              </p>\n            </div>\n          </div>\n        </div>\n      ),\n      actionLabel: 'Open Settings',\n      action: () => {\n        window.location.href = '/settings';\n      }\n    }\n  ];\n\n  useEffect(() => {\n    trackEvent('onboarding_started', {\n      userId: user?.id,\n      totalSteps: steps.length\n    });\n  }, [trackEvent, user?.id, steps.length]);\n\n  const handleNext = () => {\n    const step = steps[currentStep];\n    if (!step) return;\n    \n    setCompletedSteps(_prev => new Set(_prev).add(step.id));\n    \n    trackEvent('onboarding_step_completed', {\n      stepId: step.id,\n      stepIndex: currentStep\n    });\n\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(currentStep + 1);\n    } else {\n      handleComplete();\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleComplete = () => {\n    localStorage.setItem('dashboard_onboarding_completed', 'true');\n    trackEvent('onboarding_completed', {\n      userId: user?.id,\n      _completedSteps: Array.from(_completedSteps)\n    });\n    onComplete();\n  };\n\n  const handleSkip = () => {\n    trackEvent('onboarding_skipped', {\n      userId: user?.id,\n      skippedAtStep: currentStep\n    });\n    if (_onSkip) {\n      onSkip();\n    } else {\n      handleComplete();\n    }\n  };\n\n  const currentStepData = steps[currentStep];\n  const progress = ((currentStep + 1) / steps.length) * 100;\n\n  // Early return if no current step data\n  if (!currentStepData) {\n    return null;\n  }\n\n  return (\n    <AnimatePresence>\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\"\n      >\n        <motion.div\n          initial={{ scale: 0.9, opacity: 0 }}\n          animate={{ scale: 1, opacity: 1 }}\n          exit={{ scale: 0.9, opacity: 0 }}\n          className=\"bg-white rounded-xl shadow-2xl max-w-lg w-full max-h-[90vh] overflow-hidden\"\n        >\n          {/* Header */}\n          <div className=\"relative bg-gradient-to-r from-primary-500 to-purple-600 p-6 text-white\">\n            <button\n              onClick={handleSkip}\n              className=\"absolute top-4 right-4 p-1 hover:bg-white/20 rounded-lg transition-colors\"\n              aria-label=\"Skip onboarding\"\n            >\n              <X className=\"h-5 w-5\" />\n            </button>\n            \n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-3 bg-white/20 rounded-lg\">\n                <currentStepData.icon className=\"h-6 w-6\" />\n              </div>\n              <div>\n                <h2 className=\"text-xl font-bold\">{currentStepData.title}</h2>\n                <p className=\"text-sm text-white/80\">{currentStepData.description}</p>\n              </div>\n            </div>\n            \n            {/* Progress bar */}\n            <div className=\"mt-4\">\n              <div className=\"flex justify-between text-xs mb-1\">\n                <span>Step {currentStep + 1} of {steps.length}</span>\n                <span>{Math.round(progress)}%</span>\n              </div>\n              <div className=\"w-full bg-white/20 rounded-full h-2\">\n                <motion.div\n                  className=\"bg-white rounded-full h-2\"\n                  initial={{ width: 0 }}\n                  animate={{ width: `${progress}%` }}\n                  transition={{ duration: 0.3 }}\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Content */}\n          <div className=\"p-6 max-h-[400px] overflow-y-auto\">\n            <AnimatePresence mode=\"wait\">\n              <motion.div\n                key={currentStep}\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: -20 }}\n                transition={{ duration: 0.3 }}\n              >\n                {currentStepData.content}\n              </motion.div>\n            </AnimatePresence>\n          </div>\n\n          {/* Footer */}\n          <div className=\"border-t border-gray-200 p-6 bg-gray-50\">\n            <div className=\"flex justify-between items-center\">\n              <button\n                onClick={currentStep === 0 ? handleSkip : handlePrevious}\n                className=\"px-4 py-2 text-gray-600 hover:text-gray-900 transition-colors flex items-center space-x-1\"\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n                <span>{currentStep === 0 ? 'Skip' : 'Back'}</span>\n              </button>\n              \n              <div className=\"flex space-x-3\">\n                {currentStepData.action && (\n                  <button\n                    onClick={currentStepData.action}\n                    className=\"px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors\"\n                  >\n                    {currentStepData.actionLabel}\n                  </button>\n                )}\n                \n                <button\n                  onClick={handleNext}\n                  className=\"px-6 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors flex items-center space-x-1\"\n                >\n                  <span>{currentStep === steps.length - 1 ? 'Get Started' : 'Next'}</span>\n                  <ChevronRight className=\"h-4 w-4\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </motion.div>\n    </AnimatePresence>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\DashboardWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\KeyboardShortcutsHelp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\ProfessionalCareDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\console\\ConsoleDashboard.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":189,"column":20,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[7124,7179],"text":"\r\n              Today&apos;s Wellness Insights\r\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[7124,7179],"text":"\r\n              Today&lsquo;s Wellness Insights\r\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[7124,7179],"text":"\r\n              Today&#39;s Wellness Insights\r\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[7124,7179],"text":"\r\n              Today&rsquo;s Wellness Insights\r\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { Heart, Users, Stethoscope, AlertTriangle, _Clock, _Shield } from 'lucide-react';\r\nimport { ConsoleWelcomeBar } from './ConsoleWelcomeBar';\r\nimport { ConsoleGrid } from './ConsoleGrid';\r\nimport { ConsoleTile } from './ConsoleTile';\r\nimport { ConsoleUserStats } from './ConsoleUserStats';\r\nimport { ConsoleQuickLinks } from './ConsoleQuickLinks';\r\nimport { useConsoleNavigation } from '../../../hooks/useConsoleNavigation';\r\nimport { useMobileFeatures } from '../../../hooks/useMobileFeatures';\r\n\r\nexport function ConsoleDashboard() {\r\n  const { navigationMode, isPerformanceMode } = useConsoleNavigation();\r\n  const { _deviceInfo, isMobileDevice, isSmallScreen } = useMobileFeatures();\r\n\r\n  // Apply navigation mode class to body for styling\r\n  useEffect(() => {\r\n    document.body.className = `console-navigation-${navigationMode}`;\r\n    return () => {\r\n      document.body.className = '';\r\n    };\r\n  }, [navigationMode]);\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 relative overflow-hidden console-dashboard\">\r\n      {/* Dynamic Background Effects */}\r\n      <div className=\"fixed inset-0 pointer-events-none\">\r\n        {/* Floating orbs */}\r\n        <motion.div\r\n          animate={{\r\n            x: [0, 100, 0],\r\n            y: [0, -50, 0],\r\n          }}\r\n          transition={{\r\n            duration: 20,\r\n            repeat: Infinity,\r\n            ease: 'linear',\r\n          }}\r\n          className=\"absolute top-1/4 left-1/4 w-96 h-96 bg-gradient-to-r from-blue-500/10 to-purple-500/10 rounded-full blur-3xl\"\r\n        />\r\n        <motion.div\r\n          animate={{\r\n            x: [0, -150, 0],\r\n            y: [0, 100, 0],\r\n          }}\r\n          transition={{\r\n            duration: 25,\r\n            repeat: Infinity,\r\n            ease: 'linear',\r\n          }}\r\n          className=\"absolute bottom-1/4 right-1/3 w-80 h-80 bg-gradient-to-r from-green-500/10 to-blue-500/10 rounded-full blur-3xl\"\r\n        />\r\n        <motion.div\r\n          animate={{\r\n            x: [0, 80, 0],\r\n            y: [0, -80, 0],\r\n          }}\r\n          transition={{\r\n            duration: 15,\r\n            repeat: Infinity,\r\n            ease: 'linear',\r\n          }}\r\n          className=\"absolute top-3/4 left-1/2 w-64 h-64 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-full blur-3xl\"\r\n        />\r\n      </div>\r\n\r\n      {/* Main Content - Mobile Optimized */}\r\n      <div className={`\r\n        relative z-10 mx-auto py-4\r\n        ${isMobileDevice \r\n          ? 'px-3 sm:px-4 max-w-full' \r\n          : 'px-4 sm:px-6 lg:px-8 max-w-7xl'\r\n        }\r\n        ${isSmallScreen ? 'py-2' : 'py-8'}\r\n      `}>\r\n        {/* Console Welcome Bar */}\r\n        <ConsoleWelcomeBar />\r\n\r\n        {/* User Stats & Progress - Mobile Responsive */}\r\n        <div className={isMobileDevice ? 'mb-4' : 'mb-8'}>\r\n          <ConsoleUserStats />\r\n        </div>\r\n\r\n        {/* Quick Links Section - Mobile Optimized */}\r\n        <motion.div\r\n          initial={{ opacity: 0, y: isSmallScreen ? 10 : 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ delay: isPerformanceMode ? 0.2 : 0.8 }}\r\n          className={`\r\n            ${isMobileDevice ? 'mb-4 p-4' : 'mb-8 p-6'} \r\n            rounded-2xl bg-gradient-to-br from-gray-800/90 to-gray-900/90 \r\n            border border-gray-700/50 backdrop-blur-md shadow-console-depth\r\n            ${isSmallScreen ? 'rounded-xl' : ''}\r\n          `}\r\n        >\r\n          <div className={isMobileDevice ? 'mb-4' : 'mb-6'}>\r\n            <h2 className={`font-bold text-white mb-2 ${\r\n              isSmallScreen ? 'text-xl' : 'text-2xl'\r\n            }`}>Quick Access</h2>\r\n            <p className={`text-gray-300 ${\r\n              isSmallScreen ? 'text-sm' : 'text-base'\r\n            }`}>Your most-used features at your fingertips</p>\r\n          </div>\r\n          <ConsoleQuickLinks />\r\n        </motion.div>\r\n\r\n        {/* Main Feature Tiles - Mobile Touch Optimized */}\r\n        <ConsoleGrid className={`\r\n          ${isMobileDevice ? 'mb-4' : 'mb-8'}\r\n          ${isSmallScreen ? 'grid-mobile-optimized' : ''}\r\n        `}>\r\n          {/* Crisis Support - Always Prominent */}\r\n          <ConsoleTile\r\n            title=\"🆘 Crisis Support\"\r\n            description=\"Immediate help available 24/7\"\r\n            icon={<AlertTriangle className=\"h-6 w-6 text-white\" />}\r\n            gradient=\"crisis\"\r\n            size=\"medium\"\r\n            to=\"/crisis\"\r\n            status=\"24/7 Available\"\r\n            delay={5}\r\n          />\r\n\r\n          {/* Wellness Hub */}\r\n          <ConsoleTile\r\n            title=\"🧘 Wellness Hub\"\r\n            description=\"Your complete mental wellness toolkit\"\r\n            icon={<Heart className=\"h-6 w-6 text-white\" />}\r\n            gradient=\"wellness\"\r\n            size=\"medium\"\r\n            to=\"/wellness\"\r\n            showProgress\r\n            progressValue={75}\r\n            delay={6}\r\n          />\r\n\r\n          {/* Community */}\r\n          <ConsoleTile\r\n            title=\"💬 Community\"\r\n            description=\"Connect with supportive peers\"\r\n            icon={<Users className=\"h-6 w-6 text-white\" />}\r\n            gradient=\"community\"\r\n            size=\"small\"\r\n            to=\"/community\"\r\n            status=\"247 Online\"\r\n            delay={7}\r\n          />\r\n\r\n          {/* Professionals */}\r\n          <ConsoleTile\r\n            title=\"👨‍⚕️ Professionals\"\r\n            description=\"Licensed therapists & counselors\"\r\n            icon={<Stethoscope className=\"h-6 w-6 text-white\" />}\r\n            gradient=\"professional\"\r\n            size=\"small\"\r\n            to=\"/professional\"\r\n            status=\"500+ Available\"\r\n            delay={8}\r\n          />\r\n        </ConsoleGrid>\r\n\r\n        {/* Today's Wellness Section - Mobile Responsive */}\r\n        <motion.div\r\n          initial={{ opacity: 0, y: isSmallScreen ? 20 : 40 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ \r\n            delay: isPerformanceMode ? 0.4 : 0.8, \r\n            duration: isPerformanceMode ? 0.3 : 0.6 \r\n          }}\r\n          className={`\r\n            ${isMobileDevice ? 'p-4' : 'p-8'} \r\n            ${isSmallScreen ? 'rounded-xl' : 'rounded-2xl'}\r\n            bg-gradient-to-r from-gray-800/90 to-gray-900/90 \r\n            border border-gray-700/50 backdrop-blur-md relative overflow-hidden\r\n          `}\r\n        >\r\n          {/* Background Pattern */}\r\n          <div className=\"absolute inset-0 opacity-5\">\r\n            <div className=\"absolute top-4 left-4 w-32 h-32 rounded-full bg-gradient-to-r from-blue-400/30 to-transparent blur-2xl\" />\r\n            <div className=\"absolute bottom-4 right-4 w-24 h-24 rounded-full bg-gradient-to-r from-purple-400/30 to-transparent blur-xl\" />\r\n          </div>\r\n\r\n          <div className=\"relative z-10\">\r\n            <h2 className={`\r\n              font-bold text-white flex items-center\r\n              ${isSmallScreen ? 'text-xl mb-4' : 'text-2xl mb-6'}\r\n            `}>\r\n              <span className={isSmallScreen ? 'mr-2' : 'mr-3'}>✨</span>\r\n              Today's Wellness Insights\r\n            </h2>\r\n            \r\n            <div className={`\r\n              grid gap-4\r\n              ${isSmallScreen \r\n                ? 'grid-cols-1' \r\n                : 'grid-cols-1 sm:grid-cols-3'\r\n              }\r\n              ${isMobileDevice ? 'gap-4' : 'gap-6'}\r\n            `}>\r\n              {/* Morning Motivation */}\r\n              <motion.div\r\n                initial={{ opacity: 0, y: 20 }}\r\n                animate={{ opacity: 1, y: 0 }}\r\n                transition={{ delay: 1.0, duration: 0.5 }}\r\n                className={`\r\n                  text-center rounded-xl bg-gradient-to-br from-blue-500/10 to-blue-600/10 border border-blue-500/20\r\n                  ${isSmallScreen ? 'p-4' : 'p-6'}\r\n                `}\r\n              >\r\n                <div className=\"text-4xl mb-3\">\r\n                  🌅\r\n                </div>\r\n                <div className=\"text-lg font-semibold text-white mb-2\">Start Your Day</div>\r\n                <div className=\"text-gray-300 text-sm\">\r\n                  Take 5 minutes for morning meditation and set positive intentions\r\n                </div>\r\n              </motion.div>\r\n\r\n              {/* Self-Care Reminder */}\r\n              <motion.div\r\n                initial={{ opacity: 0, y: 20 }}\r\n                animate={{ opacity: 1, y: 0 }}\r\n                transition={{ delay: 1.1, duration: 0.5 }}\r\n                className={`\r\n                  text-center rounded-xl bg-gradient-to-br from-pink-500/10 to-red-600/10 border border-pink-500/20\r\n                  ${isSmallScreen ? 'p-4' : 'p-6'}\r\n                `}\r\n              >\r\n                <div className=\"text-4xl mb-3\">\r\n                  💝\r\n                </div>\r\n                <div className=\"text-lg font-semibold text-white mb-2\">Self-Care Reminder</div>\r\n                <div className=\"text-gray-300 text-sm\">\r\n                  You deserve kindness, especially from yourself\r\n                </div>\r\n              </motion.div>\r\n\r\n              {/* Support Network */}\r\n              <motion.div\r\n                initial={{ opacity: 0, y: 20 }}\r\n                animate={{ opacity: 1, y: 0 }}\r\n                transition={{ delay: 1.2, duration: 0.5 }}\r\n                className={`\r\n                  text-center rounded-xl bg-gradient-to-br from-green-500/10 to-green-600/10 border border-green-500/20\r\n                  ${isSmallScreen ? 'p-4' : 'p-6'}\r\n                `}\r\n              >\r\n                <div className=\"text-4xl mb-3\">\r\n                  🌟\r\n                </div>\r\n                <div className=\"text-lg font-semibold text-white mb-2\">You&apos;re Not Alone</div>\r\n                <div className=\"text-gray-300 text-sm\">\r\n                  Thousands of people are here to support you on your journey\r\n                </div>\r\n              </motion.div>\r\n            </div>\r\n          </div>\r\n        </motion.div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\console\\ConsoleGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\console\\ConsoleQuickLinks.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\console\\ConsoleTile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\console\\ConsoleUserStats.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setCurrentStreak' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":46,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setTotalSessions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":47,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setWellnessLevel' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":48,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":41}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, _useEffect } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { \r\n  _Calendar, \r\n  _TrendingUp, \r\n  Heart, \r\n  _Target, \r\n  Award, \r\n  Flame, \r\n  _Star, \r\n  _Clock,\r\n  Activity,\r\n  _Zap,\r\n  _Shield,\r\n  Sunrise,\r\n  Brain,\r\n  Smile\r\n} from 'lucide-react';\r\nimport { useAuth } from '../../../hooks/useAuth';\r\n\r\ninterface MentalHealthStat {\r\n  id: string;\r\n  label: string;\r\n  value: number;\r\n  maxValue: number;\r\n  unit: string;\r\n  icon: React.ReactNode;\r\n  color: string;\r\n  trend: 'up' | 'down' | 'stable';\r\n  description: string;\r\n}\r\n\r\ninterface Achievement {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  icon: React.ReactNode;\r\n  unlocked: boolean;\r\n  progress: number;\r\n  maxProgress: number;\r\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\r\n}\r\n\r\nexport function ConsoleUserStats() {\r\n  const { user } = useAuth();\r\n  const [currentStreak, setCurrentStreak] = useState(7);\r\n  const [totalSessions, setTotalSessions] = useState(42);\r\n  const [wellnessLevel, setWellnessLevel] = useState(15);\r\n  \r\n  // Mock user stats (in real app, this would come from user data)\r\n  const mentalHealthStats: MentalHealthStat[] = [\r\n    {\r\n      id: 'mood-average',\r\n      label: 'Mood Average',\r\n      value: 7.2,\r\n      maxValue: 10,\r\n      unit: '/10',\r\n      icon: <Smile className=\"h-5 w-5\" />,\r\n      color: 'from-green-400 to-emerald-500',\r\n      trend: 'up',\r\n      description: '7-day rolling average'\r\n    },\r\n    {\r\n      id: 'mindfulness-minutes',\r\n      label: 'Mindfulness',\r\n      value: 485,\r\n      maxValue: 600,\r\n      unit: ' min',\r\n      icon: <Brain className=\"h-5 w-5\" />,\r\n      color: 'from-purple-400 to-indigo-500',\r\n      trend: 'up',\r\n      description: 'This week'\r\n    },\r\n    {\r\n      id: 'sleep-quality',\r\n      label: 'Sleep Quality',\r\n      value: 8.4,\r\n      maxValue: 10,\r\n      unit: '/10',\r\n      icon: <Sunrise className=\"h-5 w-5\" />,\r\n      color: 'from-blue-400 to-cyan-500',\r\n      trend: 'stable',\r\n      description: 'Average rating'\r\n    },\r\n    {\r\n      id: 'stress-level',\r\n      label: 'Stress Level',\r\n      value: 3.2,\r\n      maxValue: 10,\r\n      unit: '/10',\r\n      icon: <Activity className=\"h-5 w-5\" />,\r\n      color: 'from-yellow-400 to-orange-500',\r\n      trend: 'down',\r\n      description: 'Lower is better'\r\n    }\r\n  ];\r\n\r\n  const achievements: Achievement[] = [\r\n    {\r\n      id: 'week-warrior',\r\n      title: 'Week Warrior',\r\n      description: 'Complete wellness activities for 7 days straight',\r\n      icon: <Flame className=\"h-6 w-6\" />,\r\n      unlocked: true,\r\n      progress: 7,\r\n      maxProgress: 7,\r\n      rarity: 'rare'\r\n    },\r\n    {\r\n      id: 'mindful-master',\r\n      title: 'Mindful Master',\r\n      description: 'Complete 30 meditation sessions',\r\n      icon: <Brain className=\"h-6 w-6\" />,\r\n      unlocked: true,\r\n      progress: 30,\r\n      maxProgress: 30,\r\n      rarity: 'epic'\r\n    },\r\n    {\r\n      id: 'mood-tracker',\r\n      title: 'Mood Tracker',\r\n      description: 'Log your mood 100 times',\r\n      icon: <Heart className=\"h-6 w-6\" />,\r\n      unlocked: false,\r\n      progress: 67,\r\n      maxProgress: 100,\r\n      rarity: 'common'\r\n    },\r\n    {\r\n      id: 'wellness-champion',\r\n      title: 'Wellness Champion',\r\n      description: 'Reach wellness level 25',\r\n      icon: <Award className=\"h-6 w-6\" />,\r\n      unlocked: false,\r\n      progress: 15,\r\n      maxProgress: 25,\r\n      rarity: 'legendary'\r\n    }\r\n  ];\r\n\r\n  const rarityColors = {\r\n    common: 'from-gray-400 to-gray-500',\r\n    rare: 'from-blue-400 to-blue-500',\r\n    epic: 'from-purple-400 to-purple-500',\r\n    legendary: 'from-yellow-400 to-yellow-500'\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-8\">\r\n      {/* User Level & Experience */}\r\n      <motion.div\r\n        initial={{ opacity: 0, y: 20 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        className=\"p-6 rounded-2xl bg-gradient-to-br from-gray-800/90 to-gray-900/90 border border-gray-700/50 backdrop-blur-md shadow-console-depth relative overflow-hidden\"\r\n      >\r\n        {/* Background glow */}\r\n        <div className=\"absolute inset-0 bg-gradient-to-r from-blue-500/5 via-transparent to-purple-500/5 pointer-events-none\" />\r\n        \r\n        <div className=\"relative z-10\">\r\n          <div className=\"flex items-center justify-between mb-6\">\r\n            <div className=\"flex items-center space-x-4\">\r\n              <div className=\"w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-600 rounded-console-lg flex items-center justify-center shadow-console-glow\">\r\n                <span className=\"text-2xl font-bold text-white\">{wellnessLevel}</span>\r\n              </div>\r\n              <div>\r\n                <h3 className=\"text-2xl font-bold text-white mb-1\">\r\n                  Welcome back, {user?.name || user?.nickname || 'friend'}!\r\n                </h3>\r\n                <p className=\"text-gray-300\">Wellness Level {wellnessLevel} • Mind Guardian</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"text-right\">\r\n              <p className=\"text-sm text-gray-400\">Current Streak</p>\r\n              <div className=\"flex items-center space-x-2\">\r\n                <Flame className=\"h-5 w-5 text-orange-400\" />\r\n                <span className=\"text-2xl font-bold text-orange-400\">{currentStreak}</span>\r\n                <span className=\"text-gray-400\">days</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Experience Bar */}\r\n          <div className=\"mb-4\">\r\n            <div className=\"flex justify-between text-sm text-gray-400 mb-2\">\r\n              <span>Progress to Level {wellnessLevel + 1}</span>\r\n              <span>2,450 / 3,000 XP</span>\r\n            </div>\r\n            <div className=\"h-3 bg-gray-700/50 rounded-full overflow-hidden\">\r\n              <motion.div\r\n                initial={{ width: '0%' }}\r\n                animate={{ width: '81.7%' }}\r\n                transition={{ duration: 2, ease: 'easeOut' }}\r\n                className=\"h-full bg-gradient-to-r from-blue-500 to-purple-500 rounded-full relative\"\r\n              >\r\n                <div className=\"absolute inset-0 bg-white/20 animate-pulse\" />\r\n              </motion.div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Quick Stats */}\r\n          <div className=\"grid grid-cols-3 gap-4\">\r\n            <div className=\"text-center p-3 bg-gray-700/30 rounded-console\">\r\n              <p className=\"text-2xl font-bold text-white\">{totalSessions}</p>\r\n              <p className=\"text-xs text-gray-400\">Total Sessions</p>\r\n            </div>\r\n            <div className=\"text-center p-3 bg-gray-700/30 rounded-console\">\r\n              <p className=\"text-2xl font-bold text-green-400\">96%</p>\r\n              <p className=\"text-xs text-gray-400\">Wellness Score</p>\r\n            </div>\r\n            <div className=\"text-center p-3 bg-gray-700/30 rounded-console\">\r\n              <p className=\"text-2xl font-bold text-purple-400\">12h</p>\r\n              <p className=\"text-xs text-gray-400\">This Week</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </motion.div>\r\n\r\n      {/* Mental Health Stats Grid */}\r\n      <motion.div\r\n        initial={{ opacity: 0, y: 20 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        transition={{ delay: 0.2 }}\r\n        className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\"\r\n      >\r\n        {mentalHealthStats.map((stat, index) => (\r\n          <motion.div\r\n            key={stat.id}\r\n            initial={{ opacity: 0, scale: 0.9 }}\r\n            animate={{ opacity: 1, scale: 1 }}\r\n            transition={{ delay: 0.3 + index * 0.1 }}\r\n            className=\"p-6 rounded-console-lg bg-gradient-to-br from-gray-800/90 to-gray-900/90 border border-gray-700/50 backdrop-blur-md shadow-console-card hover:shadow-console-hover transition-all duration-300 relative overflow-hidden group\"\r\n          >\r\n            {/* Background glow */}\r\n            <div className={`absolute inset-0 bg-gradient-to-r ${stat.color} opacity-5 group-hover:opacity-10 transition-opacity duration-300`} />\r\n            \r\n            <div className=\"relative z-10\">\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <div className={`p-3 rounded-console bg-gradient-to-r ${stat.color} bg-opacity-20 group-hover:scale-110 transition-transform duration-300`}>\r\n                  <div className=\"text-white\">\r\n                    {stat.icon}\r\n                  </div>\r\n                </div>\r\n                <div className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n                  stat.trend === 'up' ? 'bg-green-500/20 text-green-400' :\r\n                  stat.trend === 'down' ? 'bg-red-500/20 text-red-400' :\r\n                  'bg-gray-500/20 text-gray-400'\r\n                }`}>\r\n                  {stat.trend === 'up' && '↗'}{stat.trend === 'down' && '↘'}{stat.trend === 'stable' && '→'}\r\n                </div>\r\n              </div>\r\n              \r\n              <h4 className=\"text-lg font-semibold text-white mb-1\">{stat.label}</h4>\r\n              <p className=\"text-3xl font-bold text-white mb-2\">\r\n                {stat.value}{stat.unit}\r\n              </p>\r\n              <p className=\"text-xs text-gray-400\">{stat.description}</p>\r\n\r\n              {/* Progress bar for stats with max values */}\r\n              {stat.maxValue && (\r\n                <div className=\"mt-3\">\r\n                  <div className=\"h-2 bg-gray-700/50 rounded-full overflow-hidden\">\r\n                    <motion.div\r\n                      initial={{ width: '0%' }}\r\n                      animate={{ width: `${(stat.value / stat.maxValue) * 100}%` }}\r\n                      transition={{ duration: 1.5, delay: 0.5 + index * 0.1 }}\r\n                      className={`h-full bg-gradient-to-r ${stat.color} rounded-full`}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </motion.div>\r\n        ))}\r\n      </motion.div>\r\n\r\n      {/* Recent Achievements */}\r\n      <motion.div\r\n        initial={{ opacity: 0, y: 20 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        transition={{ delay: 0.6 }}\r\n        className=\"p-6 rounded-2xl bg-gradient-to-br from-gray-800/90 to-gray-900/90 border border-gray-700/50 backdrop-blur-md shadow-console-depth\"\r\n      >\r\n        <div className=\"flex items-center space-x-3 mb-6\">\r\n          <div className=\"p-3 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-console-lg shadow-console-glow\">\r\n            <Award className=\"h-6 w-6 text-white\" />\r\n          </div>\r\n          <div>\r\n            <h3 className=\"text-xl font-bold text-white\">Achievements</h3>\r\n            <p className=\"text-gray-400\">Your wellness milestones</p>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n          {achievements.map((achievement, index) => (\r\n            <motion.div\r\n              key={achievement.id}\r\n              initial={{ opacity: 0, x: -20 }}\r\n              animate={{ opacity: 1, x: 0 }}\r\n              transition={{ delay: 0.7 + index * 0.1 }}\r\n              className={`p-4 rounded-console-lg border transition-all duration-300 ${\r\n                achievement.unlocked\r\n                  ? 'bg-gradient-to-r from-yellow-500/10 to-orange-500/10 border-yellow-400/30 shadow-yellow-500/20'\r\n                  : 'bg-gray-700/30 border-gray-600/50'\r\n              }`}\r\n            >\r\n              <div className=\"flex items-start space-x-4\">\r\n                <div className={`p-3 rounded-console ${\r\n                  achievement.unlocked \r\n                    ? `bg-gradient-to-r ${rarityColors[achievement.rarity]}` \r\n                    : 'bg-gray-600/50'\r\n                } ${achievement.unlocked ? 'shadow-console-glow' : ''}`}>\r\n                  <div className=\"text-white\">\r\n                    {achievement.icon}\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <div className=\"flex items-center justify-between mb-2\">\r\n                    <h4 className={`font-semibold ${achievement.unlocked ? 'text-white' : 'text-gray-400'}`}>\r\n                      {achievement.title}\r\n                    </h4>\r\n                    {achievement.unlocked && (\r\n                      <div className={`px-2 py-1 rounded-full text-xs font-bold text-white bg-gradient-to-r ${rarityColors[achievement.rarity]}`}>\r\n                        {achievement.rarity.toUpperCase()}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <p className=\"text-sm text-gray-400 mb-3\">{achievement.description}</p>\r\n                  \r\n                  {/* Progress bar */}\r\n                  <div className=\"space-y-1\">\r\n                    <div className=\"flex justify-between text-xs text-gray-400\">\r\n                      <span>Progress</span>\r\n                      <span>{achievement.progress}/{achievement.maxProgress}</span>\r\n                    </div>\r\n                    <div className=\"h-2 bg-gray-700/50 rounded-full overflow-hidden\">\r\n                      <motion.div\r\n                        initial={{ width: '0%' }}\r\n                        animate={{ width: `${(achievement.progress / achievement.maxProgress) * 100}%` }}\r\n                        transition={{ duration: 1.5, delay: 0.8 + index * 0.1 }}\r\n                        className={`h-full rounded-full ${\r\n                          achievement.unlocked \r\n                            ? `bg-gradient-to-r ${rarityColors[achievement.rarity]}` \r\n                            : 'bg-gray-500'\r\n                        }`}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </motion.div>\r\n          ))}\r\n        </div>\r\n      </motion.div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\console\\ConsoleWelcomeBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\AIInsightsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\ActivityAnalytics.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'getDateRange'. Either include it or remove the dependency array.","line":89,"column":6,"nodeType":"ArrayExpression","endLine":89,"endColumn":70,"suggestions":[{"desc":"Update the dependencies array to be: [getDateRange, activityHistory, selectedCategory]","fix":{"range":[2316,2380],"text":"[getDateRange, activityHistory, selectedCategory]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'getDateRange'. Either include it or remove the dependency array.","line":186,"column":6,"nodeType":"ArrayExpression","endLine":186,"endColumn":55,"suggestions":[{"desc":"Update the dependencies array to be: [getDateRange, filteredActivities]","fix":{"range":[5548,5597],"text":"[getDateRange, filteredActivities]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useMemo } from 'react';\nimport { motion } from 'framer-motion';\nimport {\n  TrendingUp,\n  TrendingDown,\n  Activity,\n  _Calendar,\n  BarChart3,\n  _PieChart,\n  Clock,\n  Zap,\n  Heart,\n  Brain,\n  Users,\n  X,\n  Sun,\n  Moon,\n  Cloud,\n  Award,\n  AlertCircle,\n  _Filter,\n  Download,\n  ChevronLeft,\n  ChevronRight,\n  _Info\n} from 'lucide-react';\nimport { useActivityStore } from '../../../stores/activityStore';\nimport { format, startOfWeek, _endOfWeek, eachDayOfInterval, subDays, addDays, isToday } from 'date-fns';\n\ninterface ActivityAnalyticsProps {\n  _onExportData?: () => void;\n  _onViewDetails?: (activityId: string) => void;\n}\n\nexport function ActivityAnalytics({\n  _onExportData,\n  _onViewDetails\n}: ActivityAnalyticsProps) {\n  const {\n    activityHistory,\n    _activities,\n    _goals,\n    _habits,\n    correlateActivitiesWithMood,\n    _analyzeActivityEffectiveness,\n    exportProgressReport\n  } = useActivityStore();\n\n  const [selectedPeriod, setSelectedPeriod] = useState<'week' | 'month' | 'year'>('week');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [showInsights, setShowInsights] = useState(true);\n\n  // Get date range based on selected period\n  const getDateRange = () => {\n    const end = currentDate;\n    let start;\n    \n    switch (_selectedPeriod) {\n      case 'week':\n        start = startOfWeek(currentDate);\n        break;\n      case 'month':\n        start = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n        break;\n      case 'year':\n        start = new Date(currentDate.getFullYear(), 0, 1);\n        break;\n      default:\n        start = subDays(currentDate, 7);\n    }\n    \n    return { start, end };\n  };\n\n  // Filter activities by date range and category\n  const filteredActivities = useMemo(() => {\n    const { start, end } = getDateRange();\n    \n    return activityHistory.filter(activity => {\n      const activityDate = activity.completedAt ? new Date(activity.completedAt) : null;\n      if (!activityDate) return false;\n      \n      const inDateRange = activityDate >= start && activityDate <= end;\n      const inCategory = selectedCategory === 'all' || activity.category === selectedCategory;\n      \n      return inDateRange && inCategory;\n    });\n  }, [activityHistory, selectedPeriod, selectedCategory, currentDate]);\n\n  // Calculate statistics\n  const stats = useMemo(() => {\n    const completed = filteredActivities.filter(a => a.completed).length;\n    const total = filteredActivities.length;\n    const completionRate = total > 0 ? (completed / total) * 100 : 0;\n    \n    const moodImpacts = filteredActivities\n      .filter(a => a.actualMoodImpact !== undefined)\n      .map(a => a.actualMoodImpact!);\n    \n    const avgMoodImpact = moodImpacts.length > 0\n      ? moodImpacts.reduce((sum, impact) => sum + impact, 0) / moodImpacts.length\n      : 0;\n    \n    const totalTime = filteredActivities\n      .filter(a => a.duration)\n      .reduce((sum, a) => sum + (a.duration || 0), 0);\n    \n    // Category breakdown\n    const categoryBreakdown = new Map<string, number>();\n    filteredActivities.forEach(activity => {\n      const count = categoryBreakdown.get(activity.category) || 0;\n      categoryBreakdown.set(activity.category, count + 1);\n    });\n    \n    // Time of day analysis\n    const timeOfDayBreakdown = {\n      morning: 0, // 6-12\n      afternoon: 0, // 12-18\n      evening: 0, // 18-24\n      night: 0 // 0-6\n    };\n    \n    filteredActivities.forEach(activity => {\n      if (activity.scheduledTime) {\n        const hour = new Date(activity.scheduledTime).getHours();\n        if (hour >= 6 && hour < 12) timeOfDayBreakdown.morning++;\n        else if (hour >= 12 && hour < 18) timeOfDayBreakdown.afternoon++;\n        else if (hour >= 18 && hour < 24) timeOfDayBreakdown.evening++;\n        else timeOfDayBreakdown.night++;\n      }\n    });\n    \n    // Energy level analysis\n    const energyBreakdown = {\n      low: filteredActivities.filter(a => a.energyLevel === 'low').length,\n      medium: filteredActivities.filter(a => a.energyLevel === 'medium').length,\n      high: filteredActivities.filter(a => a.energyLevel === 'high').length,\n    };\n    \n    return {\n      completed,\n      total,\n      completionRate,\n      avgMoodImpact,\n      totalTime,\n      categoryBreakdown,\n      timeOfDayBreakdown,\n      energyBreakdown\n    };\n  }, [filteredActivities]);\n\n  // Get mood correlations\n  const moodCorrelations = useMemo(() => {\n    return correlateActivitiesWithMood().slice(0, 5);\n  }, [correlateActivitiesWithMood]);\n\n  // Get daily activity data for chart\n  const dailyData = useMemo(() => {\n    const { start, end } = getDateRange();\n    const days = eachDayOfInterval({ start, end });\n    \n    return days.map(day => {\n      const dayActivities = filteredActivities.filter(activity => {\n        if (!activity.completedAt) return false;\n        const activityDate = new Date(activity.completedAt);\n        return activityDate.toDateString() === day.toDateString();\n      });\n      \n      const completed = dayActivities.filter(a => a.completed).length;\n      const moodImpacts = dayActivities\n        .filter(a => a.actualMoodImpact !== undefined)\n        .map(a => a.actualMoodImpact!);\n      \n      const avgMood = moodImpacts.length > 0\n        ? moodImpacts.reduce((sum, impact) => sum + impact, 0) / moodImpacts.length\n        : 0;\n      \n      return {\n        date: day,\n        completed,\n        avgMood,\n        isToday: isToday(_day)\n      };\n    });\n  }, [filteredActivities, selectedPeriod, currentDate]);\n\n  // Get insights\n  const insights = useMemo(() => {\n    const insights = [];\n    \n    // Completion rate insight\n    if (stats.completionRate >= 80) {\n      insights.push({\n        type: 'success',\n        title: 'Excellent Completion Rate',\n        message: `You&apos;re completing ${Math.round(stats.completionRate)}% of your activities!`,\n        icon: Award\n      });\n    } else if (stats.completionRate < 50) {\n      insights.push({\n        type: 'warning',\n        title: 'Low Completion Rate',\n        message: 'Consider reducing _activities or adjusting your schedule',\n        icon: AlertCircle\n      });\n    }\n    \n    // Mood impact insight\n    if (stats.avgMoodImpact > 2) {\n      insights.push({\n        type: 'success',\n        title: 'Positive Mood Impact',\n        message: 'Your _activities are significantly improving your mood',\n        icon: Heart\n      });\n    } else if (stats.avgMoodImpact < -1) {\n      insights.push({\n        type: 'warning',\n        title: 'Negative Mood Trend',\n        message: 'Some _activities may be affecting your mood negatively',\n        icon: TrendingDown\n      });\n    }\n    \n    // Time of day insight\n    const maxTimeOfDay = Object.entries(stats.timeOfDayBreakdown)\n      .reduce((max, [time, count]) => count > max.count ? { time, count } : max, { time: '', count: 0 });\n    \n    if (maxTimeOfDay.count > 0) {\n      insights.push({\n        type: 'info',\n        title: 'Peak Activity Time',\n        message: `You&apos;re most active in the ${maxTimeOfDay.time}`,\n        icon: Clock\n      });\n    }\n    \n    // Energy distribution insight\n    if (stats.energyBreakdown.low > stats.energyBreakdown.high * 2) {\n      insights.push({\n        type: 'info',\n        title: 'Low Energy Pattern',\n        message: 'Most _activities are low energy - consider adding energizing _activities',\n        icon: Zap\n      });\n    }\n    \n    return insights;\n  }, [stats]);\n\n  // Navigate dates\n  const navigateDate = (direction: 'prev' | 'next') => {\n    const days = selectedPeriod === 'week' ? 7 : selectedPeriod === 'month' ? 30 : 365;\n    setCurrentDate(prev => direction === 'prev' ? subDays(prev, days) : addDays(prev, days));\n  };\n\n  // Export data\n  const handleExport = () => {\n    const report = exportProgressReport();\n    const _blob = new Blob([report], { type: 'application/json' });\n    const url = URL.createObjectURL(_blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `activity-report-${format(new Date(), 'yyyy-MM-dd')}.json`;\n    a.click();\n    URL.revokeObjectURL(_url);\n  };\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Header */}\n      <div className=\"mb-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-2 bg-primary-100 rounded-lg\">\n              <BarChart3 className=\"h-5 w-5 text-primary-600\" />\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-gray-900\">Activity Analytics</h3>\n              <p className=\"text-sm text-gray-600\">\n                {format(getDateRange().start, 'MMM d')} - {format(getDateRange().end, 'MMM d, yyyy')}\n              </p>\n            </div>\n          </div>\n          \n          <button\n            onClick={handleExport}\n            className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n            aria-label=\"Export data\"\n          >\n            <Download className=\"h-5 w-5 text-gray-600\" />\n          </button>\n        </div>\n\n        {/* Period Selection & Navigation */}\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex space-x-2\">\n            {(['week', 'month', 'year'] as const).map((period) => (\n              <button\n                key={period}\n                onClick={() => setSelectedPeriod(_period)}\n                className={`px-3 py-1 rounded-lg text-sm font-medium transition-colors ${\n                  selectedPeriod === period\n                    ? 'bg-primary-100 text-primary-700'\n                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n                }`}\n              >\n                {period.charAt(0).toUpperCase() + period.slice(1)}\n              </button>\n            ))}\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <button\n              onClick={() => navigateDate('prev')}\n              className=\"p-1 hover:bg-gray-100 rounded transition-colors\"\n            >\n              <ChevronLeft className=\"h-4 w-4 text-gray-600\" />\n            </button>\n            <button\n              onClick={() => setCurrentDate(new Date())}\n              className=\"px-2 py-1 text-xs bg-gray-100 hover:bg-gray-200 rounded transition-colors\"\n            >\n              Today\n            </button>\n            <button\n              onClick={() => navigateDate('next')}\n              className=\"p-1 hover:bg-gray-100 rounded transition-colors\"\n            >\n              <ChevronRight className=\"h-4 w-4 text-gray-600\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-4 gap-2 mb-3\">\n          <div className=\"p-2 bg-blue-50 rounded-lg text-center\">\n            <div className=\"text-lg font-bold text-blue-600\">{stats.completed}</div>\n            <div className=\"text-xs text-blue-700\">Completed</div>\n          </div>\n          <div className=\"p-2 bg-green-50 rounded-lg text-center\">\n            <div className=\"text-lg font-bold text-green-600\">\n              {Math.round(stats.completionRate)}%\n            </div>\n            <div className=\"text-xs text-green-700\">Success Rate</div>\n          </div>\n          <div className=\"p-2 bg-purple-50 rounded-lg text-center\">\n            <div className=\"text-lg font-bold text-purple-600\">\n              {stats.avgMoodImpact > 0 ? '+' : ''}{stats.avgMoodImpact.toFixed(1)}\n            </div>\n            <div className=\"text-xs text-purple-700\">Avg Mood</div>\n          </div>\n          <div className=\"p-2 bg-orange-50 rounded-lg text-center\">\n            <div className=\"text-lg font-bold text-orange-600\">\n              {Math.round(stats.totalTime / 60)}h\n            </div>\n            <div className=\"text-xs text-orange-700\">Total Time</div>\n          </div>\n        </div>\n\n        {/* Category _Filter */}\n        <div className=\"flex space-x-2 overflow-x-auto pb-2\">\n          <button\n            onClick={() => setSelectedCategory('all')}\n            className={`px-3 py-1 rounded-full text-xs font-medium whitespace-nowrap transition-colors ${\n              selectedCategory === 'all'\n                ? 'bg-primary-100 text-primary-700'\n                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n            }`}\n          >\n            All ({stats.total})\n          </button>\n          {Array.from(stats.categoryBreakdown.entries()).map(([category, count]) => (\n            <button\n              key={category}\n              onClick={() => setSelectedCategory(_category)}\n              className={`px-3 py-1 rounded-full text-xs font-medium whitespace-nowrap transition-colors ${\n                selectedCategory === category\n                  ? 'bg-primary-100 text-primary-700'\n                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n              }`}\n            >\n              {category.charAt(0).toUpperCase() + category.slice(1)} ({count})\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Charts Section */}\n      <div className=\"flex-1 overflow-y-auto space-y-4\">\n        {/* Daily Activity Chart */}\n        <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n          <h4 className=\"font-medium text-gray-900 mb-3\">Daily Activity Pattern</h4>\n          <div className=\"space-y-2\">\n            {dailyData.map((day, index) => (\n              <div key={index} className=\"flex items-center space-x-3\">\n                <div className=\"w-16 text-xs text-gray-600\">\n                  {format(day.date, 'EEE, MMM d')}\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"flex-1 bg-gray-100 rounded-full h-6 relative\">\n                      <motion.div\n                        className=\"bg-gradient-to-r from-primary-500 to-primary-600 h-6 rounded-full flex items-center justify-end pr-2\"\n                        initial={{ width: 0 }}\n                        animate={{ width: `${(day.completed / Math.max(...dailyData.map(d => d.completed), 1)) * 100}%` }}\n                        transition={{ duration: 0.5, delay: index * 0.05 }}\n                      >\n                        <span className=\"text-xs text-white font-medium\">{day.completed}</span>\n                      </motion.div>\n                    </div>\n                    {day.avgMood !== 0 && (\n                      <span className={`text-xs font-medium ${\n                        day.avgMood > 0 ? 'text-green-600' : 'text-red-600'\n                      }`}>\n                        {day.avgMood > 0 ? '+' : ''}{day.avgMood.toFixed(1)}\n                      </span>\n                    )}\n                    {day.isToday && (\n                      <span className=\"px-2 py-0.5 bg-primary-100 text-primary-700 text-xs rounded-full\">\n                        Today\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Category Distribution */}\n        <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n          <h4 className=\"font-medium text-gray-900 mb-3\">Category Distribution</h4>\n          <div className=\"space-y-2\">\n            {Array.from(stats.categoryBreakdown.entries()).map(([category, count]) => {\n              const _percentage = (count / stats.total) * 100;\n              const getCategoryIcon = () => {\n                switch (_category) {\n                  case 'therapy': return Brain;\n                  case 'wellness': return Heart;\n                  case 'social': return Users;\n                  case 'professional': return Activity;\n                  default: return Zap;\n                }\n              };\n              const Icon = getCategoryIcon();\n              \n              return (\n                <div key={category} className=\"flex items-center space-x-3\">\n                  <Icon className=\"h-4 w-4 text-gray-500\" />\n                  <div className=\"w-20 text-sm text-gray-600\">\n                    {category.charAt(0).toUpperCase() + category.slice(1)}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"bg-gray-100 rounded-full h-4 relative\">\n                      <motion.div\n                        className={`h-4 rounded-full ${\n                          category === 'therapy' ? 'bg-purple-500' :\n                          category === 'wellness' ? 'bg-green-500' :\n                          category === 'social' ? 'bg-blue-500' :\n                          category === 'professional' ? 'bg-orange-500' :\n                          'bg-gray-500'\n                        }`}\n                        initial={{ width: 0 }}\n                        animate={{ width: `${_percentage}%` }}\n                        transition={{ duration: 0.5 }}\n                      />\n                    </div>\n                  </div>\n                  <span className=\"text-sm text-gray-700 font-medium\">\n                    {count} ({Math.round(_percentage)}%)\n                  </span>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Time of Day Analysis */}\n        <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n          <h4 className=\"font-medium text-gray-900 mb-3\">Activity by Time of Day</h4>\n          <div className=\"grid grid-cols-4 gap-2\">\n            {Object.entries(stats.timeOfDayBreakdown).map(([time, count]) => {\n              const getTimeIcon = () => {\n                switch (_time) {\n                  case 'morning': return Sun;\n                  case 'afternoon': return Sun;\n                  case 'evening': return Cloud;\n                  case 'night': return Moon;\n                  default: return Clock;\n                }\n              };\n              const Icon = getTimeIcon();\n              const _percentage = stats.total > 0 ? (count / stats.total) * 100 : 0;\n              \n              return (\n                <div key={time} className=\"text-center p-2 bg-gray-50 rounded-lg\">\n                  <Icon className=\"h-6 w-6 text-gray-500 mx-auto mb-1\" />\n                  <div className=\"text-xs text-gray-600 mb-1\">\n                    {time.charAt(0).toUpperCase() + time.slice(1)}\n                  </div>\n                  <div className=\"text-lg font-bold text-gray-900\">{count}</div>\n                  <div className=\"text-xs text-gray-500\">{Math.round(_percentage)}%</div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Energy Level Distribution */}\n        <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n          <h4 className=\"font-medium text-gray-900 mb-3\">Energy Level Distribution</h4>\n          <div className=\"space-y-2\">\n            {Object.entries(stats.energyBreakdown).map(([level, count]) => {\n              const _percentage = stats.total > 0 ? (count / stats.total) * 100 : 0;\n              const getColor = () => {\n                switch (_level) {\n                  case 'low': return 'bg-blue-500';\n                  case 'medium': return 'bg-yellow-500';\n                  case 'high': return 'bg-red-500';\n                  default: return 'bg-gray-500';\n                }\n              };\n              \n              return (\n                <div key={level} className=\"flex items-center space-x-3\">\n                  <Zap className={`h-4 w-4 ${\n                    level === 'low' ? 'text-blue-500' :\n                    level === 'medium' ? 'text-yellow-500' :\n                    'text-red-500'\n                  }`} />\n                  <div className=\"w-16 text-sm text-gray-600\">\n                    {level.charAt(0).toUpperCase() + level.slice(1)}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"bg-gray-100 rounded-full h-4 relative\">\n                      <motion.div\n                        className={`h-4 rounded-full ${getColor()}`}\n                        initial={{ width: 0 }}\n                        animate={{ width: `${_percentage}%` }}\n                        transition={{ duration: 0.5 }}\n                      />\n                    </div>\n                  </div>\n                  <span className=\"text-sm text-gray-700 font-medium\">\n                    {count} ({Math.round(_percentage)}%)\n                  </span>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Mood Correlations */}\n        {moodCorrelations.length > 0 && (\n          <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n            <h4 className=\"font-medium text-gray-900 mb-3\">Activities with Strongest Mood Impact</h4>\n            <div className=\"space-y-2\">\n              {moodCorrelations.map((correlation, index) => (\n                <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded-lg\">\n                  <span className=\"text-sm text-gray-700\">{correlation.activity}</span>\n                  <div className=\"flex items-center space-x-2\">\n                    {correlation.correlation > 0 ? (\n                      <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                    ) : (\n                      <TrendingDown className=\"h-4 w-4 text-red-500\" />\n                    )}\n                    <span className={`text-sm font-medium ${\n                      correlation.correlation > 0 ? 'text-green-600' : 'text-red-600'\n                    }`}>\n                      {correlation.correlation > 0 ? '+' : ''}{correlation.correlation.toFixed(1)}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Insights */}\n        {showInsights && insights.length > 0 && (\n          <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <h4 className=\"font-medium text-gray-900\">Insights & Recommendations</h4>\n              <button\n                onClick={() => setShowInsights(false)}\n                className=\"text-gray-400 hover:text-gray-600\"\n              >\n                <X className=\"h-4 w-4\" />\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              {insights.map((insight, index) => {\n                const Icon = insight.icon;\n                return (\n                  <div\n                    key={index}\n                    className={`p-3 rounded-lg flex items-start space-x-3 ${\n                      insight.type === 'success' ? 'bg-green-50' :\n                      insight.type === 'warning' ? 'bg-yellow-50' :\n                      'bg-blue-50'\n                    }`}\n                  >\n                    <Icon className={`h-5 w-5 mt-0.5 ${\n                      insight.type === 'success' ? 'text-green-600' :\n                      insight.type === 'warning' ? 'text-yellow-600' :\n                      'text-blue-600'\n                    }`} />\n                    <div>\n                      <h5 className={`font-medium text-sm ${\n                        insight.type === 'success' ? 'text-green-800' :\n                        insight.type === 'warning' ? 'text-yellow-800' :\n                        'text-blue-800'\n                      }`}>\n                        {insight.title}\n                      </h5>\n                      <p className={`text-xs mt-0.5 ${\n                        insight.type === 'success' ? 'text-green-700' :\n                        insight.type === 'warning' ? 'text-yellow-700' :\n                        'text-blue-700'\n                      }`}>\n                        {insight.message}\n                      </p>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\ActivityTracker.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedDate' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":50,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":39},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":142,"column":64,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4543,4561],"text":"Today&apos;s Activities"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4543,4561],"text":"Today&lsquo;s Activities"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4543,4561],"text":"Today&#39;s Activities"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4543,4561],"text":"Today&rsquo;s Activities"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":346,"column":31,"nodeType":"JSXOpeningElement","endLine":346,"endColumn":84},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":373,"column":31,"nodeType":"JSXOpeningElement","endLine":373,"endColumn":84},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":440,"column":43,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[18538,18638],"text":"\n                      These activities don&apos;t match your current energy _level:\n                    "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[18538,18638],"text":"\n                      These activities don&lsquo;t match your current energy _level:\n                    "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[18538,18638],"text":"\n                      These activities don&#39;t match your current energy _level:\n                    "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[18538,18638],"text":"\n                      These activities don&rsquo;t match your current energy _level:\n                    "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Calendar,\n  CheckCircle2,\n  Circle,\n  Clock,\n  Activity as ActivityIcon,\n  Zap,\n  Heart,\n  Brain,\n  Users,\n  Target,\n  TrendingUp,\n  AlertCircle,\n  ChevronRight,\n  Plus,\n  _Edit2,\n  _X,\n  Star,\n  Award\n} from 'lucide-react';\nimport { useActivityStore } from '../../../stores/activityStore';\nimport { format, _isToday, isPast, _isFuture, _differenceInMinutes, addDays } from 'date-fns';\n\ninterface ActivityTrackerProps {\n  onActivityClick?: (activity: unknown) => void;\n  onAddActivity?: () => void;\n  energyLevel?: 'low' | 'medium' | 'high';\n  currentMood?: number;\n}\n\nexport function ActivityTracker({ \n  onActivityClick, \n  onAddActivity,\n  energyLevel = 'medium',\n  currentMood = 5 \n}: ActivityTrackerProps) {\n  const {\n    activities,\n    _dailySchedule,\n    completeActivity,\n    rescheduleActivity,\n    getActivityRecommendations,\n    suggestReschedule,\n    adaptScheduleForBadDay,\n    generateDailySchedule\n  } = useActivityStore();\n\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [showRecommendations, setShowRecommendations] = useState(false);\n  const [editingActivity, setEditingActivity] = useState<string | null>(null);\n  const [completionNote, setCompletionNote] = useState('');\n  const [moodImpact, setMoodImpact] = useState<number>(0);\n  const [adaptedForLowEnergy, setAdaptedForLowEnergy] = useState(false);\n\n  // Generate daily schedule on mount and date change\n  useEffect(() => {\n    generateDailySchedule(_selectedDate);\n  }, [selectedDate, generateDailySchedule]);\n\n  // Get today's activities\n  const todayActivities = activities.filter(activity => {\n    if (!activity.scheduledTime) return false;\n    const activityDate = new Date(activity.scheduledTime);\n    return activityDate.toDateString() === selectedDate.toDateString();\n  }).sort((a, b) => {\n    if (!a.scheduledTime || !b.scheduledTime) return 0;\n    return new Date(a.scheduledTime).getTime() - new Date(b.scheduledTime).getTime();\n  });\n\n  // Get recommended activities based on energy and mood\n  const recommendations = getActivityRecommendations(energyLevel, currentMood);\n  const rescheduleSuggestions = suggestReschedule(energyLevel);\n\n  // Calculate completion stats\n  const completedCount = todayActivities.filter(a => a.completed).length;\n  const totalCount = todayActivities.length;\n  const completionPercentage = totalCount > 0 ? (completedCount / totalCount) * 100 : 0;\n\n  // Get activity icon based on category\n  const getActivityIcon = (_category: string) => {\n    switch (_category) {\n      case 'therapy': return Brain;\n      case 'wellness': return Heart;\n      case 'social': return Users;\n      case 'professional': return Target;\n      case 'self-care': return ActivityIcon;\n      default: return Circle;\n    }\n  };\n\n  // Get energy indicator color\n  const getEnergyColor = (_level: string) => {\n    switch (_level) {\n      case 'low': return 'text-blue-500 bg-blue-50';\n      case 'medium': return 'text-yellow-500 bg-yellow-50';\n      case 'high': return 'text-red-500 bg-red-50';\n      default: return 'text-gray-500 bg-gray-50';\n    }\n  };\n\n  // Get mood impact color\n  const getMoodImpactColor = (impact: number) => {\n    if (impact > 2) return 'text-green-600';\n    if (impact > 0) return 'text-green-500';\n    if (impact < -2) return 'text-red-600';\n    if (impact < 0) return 'text-red-500';\n    return 'text-gray-500';\n  };\n\n  // Handle activity completion\n  const handleCompleteActivity = (activityId: string) => {\n    completeActivity(activityId, moodImpact || undefined, completionNote || undefined);\n    setEditingActivity(null);\n    setCompletionNote('');\n    setMoodImpact(0);\n  };\n\n  // Handle reschedule\n  const handleReschedule = (activityId: string, newDate: Date) => {\n    rescheduleActivity(activityId, newDate);\n  };\n\n  // Handle adapt for low energy\n  const handleAdaptForLowEnergy = () => {\n    adaptScheduleForBadDay();\n    setAdaptedForLowEnergy(true);\n    setTimeout(() => setAdaptedForLowEnergy(false), 3000);\n  };\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Header with Stats */}\n      <div className=\"mb-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-2 bg-primary-100 rounded-lg\">\n              <ActivityIcon className=\"h-5 w-5 text-primary-600\" />\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-gray-900\">Today's Activities</h3>\n              <p className=\"text-sm text-gray-600\">\n                {completedCount} of {totalCount} completed\n              </p>\n            </div>\n          </div>\n          \n          <button\n            onClick={onAddActivity}\n            className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n            aria-label=\"Add activity\"\n          >\n            <Plus className=\"h-5 w-5 text-gray-600\" />\n          </button>\n        </div>\n\n        {/* Progress Bar */}\n        <div className=\"w-full bg-gray-200 rounded-full h-2 mb-3\">\n          <motion.div\n            className=\"bg-gradient-to-r from-primary-500 to-primary-600 h-2 rounded-full\"\n            initial={{ width: 0 }}\n            animate={{ width: `${completionPercentage}%` }}\n            transition={{ duration: 0.5, ease: \"easeOut\" }}\n          />\n        </div>\n\n        {/* Energy Level Indicator */}\n        <div className=\"flex items-center justify-between text-sm\">\n          <div className=\"flex items-center space-x-2\">\n            <Zap className=\"h-4 w-4 text-gray-500\" />\n            <span className=\"text-gray-600\">Energy Level:</span>\n            <span className={`px-2 py-1 rounded-full text-xs font-medium ${getEnergyColor(energyLevel)}`}>\n              {energyLevel.charAt(0).toUpperCase() + energyLevel.slice(1)}\n            </span>\n          </div>\n          \n          {energyLevel === 'low' && !adaptedForLowEnergy && (\n            <button\n              onClick={handleAdaptForLowEnergy}\n              className=\"text-xs text-primary-600 hover:text-primary-700 font-medium\"\n            >\n              Adapt for low energy\n            </button>\n          )}\n          \n          {adaptedForLowEnergy && (\n            <span className=\"text-xs text-green-600 font-medium\">\n              Schedule adapted ✓\n            </span>\n          )}\n        </div>\n      </div>\n\n      {/* Activity List */}\n      <div className=\"flex-1 overflow-y-auto space-y-2 mb-3\">\n        <AnimatePresence mode=\"popLayout\">\n          {todayActivities.length === 0 ? (\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              className=\"text-center py-8\"\n            >\n              <Calendar className=\"h-12 w-12 text-gray-300 mx-auto mb-3\" />\n              <p className=\"text-gray-500 mb-3\">No activities scheduled for today</p>\n              <button\n                onClick={onAddActivity}\n                className=\"text-primary-600 hover:text-primary-700 font-medium text-sm\"\n              >\n                Add your first activity\n              </button>\n            </motion.div>\n          ) : (\n            todayActivities.map((activity) => {\n              const Icon = getActivityIcon(activity._category);\n              const isPastDue = activity.scheduledTime && isPast(new Date(activity.scheduledTime)) && !activity.completed;\n              const isEditing = editingActivity === activity.id;\n              \n              return (\n                <motion.div\n                  key={activity.id}\n                  layout\n                  initial={{ opacity: 0, y: 10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, x: -20 }}\n                  className={`\n                    p-3 rounded-lg border transition-all cursor-pointer\n                    ${activity.completed \n                      ? 'bg-green-50 border-green-200' \n                      : isPastDue\n                      ? 'bg-red-50 border-red-200'\n                      : 'bg-white border-gray-200 hover:border-primary-300'\n                    }\n                    ${isEditing ? 'ring-2 ring-primary-500' : ''}\n                  `}\n                  onClick={() => !isEditing && onActivityClick?.(activity)}\n                >\n                  <div className=\"flex items-start space-x-3\">\n                    {/* Completion Checkbox */}\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        if (!activity.completed) {\n                          setEditingActivity(activity.id);\n                        }\n                      }}\n                      className=\"mt-0.5\"\n                    >\n                      {activity.completed ? (\n                        <CheckCircle2 className=\"h-5 w-5 text-green-600\" />\n                      ) : (\n                        <Circle className=\"h-5 w-5 text-gray-400 hover:text-primary-600\" />\n                      )}\n                    </button>\n\n                    {/* Activity Details */}\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Icon className=\"h-4 w-4 text-gray-500\" />\n                            <h4 className={`font-medium ${activity.completed ? 'line-through text-gray-500' : 'text-gray-900'}`}>\n                              {activity.title}\n                            </h4>\n                            {activity.therapyHomework && (\n                              <span className=\"px-2 py-0.5 bg-purple-100 text-purple-700 text-xs rounded-full\">\n                                Therapy\n                              </span>\n                            )}\n                          </div>\n                          \n                          {activity.description && (\n                            <p className=\"text-sm text-gray-600 mt-1\">{activity.description}</p>\n                          )}\n                          \n                          <div className=\"flex items-center space-x-3 mt-2 text-xs\">\n                            {activity.scheduledTime && (\n                              <span className=\"flex items-center text-gray-500\">\n                                <Clock className=\"h-3 w-3 mr-1\" />\n                                {format(new Date(activity.scheduledTime), 'h:mm a')}\n                              </span>\n                            )}\n                            \n                            {activity.duration && (\n                              <span className=\"text-gray-500\">\n                                {activity.duration} min\n                              </span>\n                            )}\n                            \n                            {activity.energyLevel && (\n                              <span className={`px-2 py-0.5 rounded-full text-xs ${getEnergyColor(activity.energyLevel)}`}>\n                                {activity.energyLevel} energy\n                              </span>\n                            )}\n                            \n                            {activity.moodImpact && (\n                              <span className={`flex items-center ${getMoodImpactColor(activity.moodImpact)}`}>\n                                <TrendingUp className=\"h-3 w-3 mr-1\" />\n                                {activity.moodImpact > 0 ? '+' : ''}{activity.moodImpact}\n                              </span>\n                            )}\n                          </div>\n\n                          {/* Actual mood impact if completed */}\n                          {activity.completed && activity.actualMoodImpact !== undefined && (\n                            <div className=\"mt-2 flex items-center space-x-1 text-xs\">\n                              <span className=\"text-gray-500\">Mood impact:</span>\n                              <span className={`font-medium ${getMoodImpactColor(activity.actualMoodImpact)}`}>\n                                {activity.actualMoodImpact > 0 ? '+' : ''}{activity.actualMoodImpact}\n                              </span>\n                              {activity.actualMoodImpact > activity.moodImpact! && (\n                                <Star className=\"h-3 w-3 text-yellow-500\" />\n                              )}\n                            </div>\n                          )}\n                        </div>\n\n                        {/* Actions */}\n                        {!activity.completed && isPastDue && (\n                          <div className=\"flex items-center space-x-1\">\n                            <AlertCircle className=\"h-4 w-4 text-red-500\" />\n                            <button\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                handleReschedule(activity.id, addDays(new Date(), 1));\n                              }}\n                              className=\"text-xs text-red-600 hover:text-red-700 font-medium\"\n                            >\n                              Reschedule\n                            </button>\n                          </div>\n                        )}\n                      </div>\n\n                      {/* Completion Form */}\n                      {isEditing && (\n                        <motion.div\n                          initial={{ opacity: 0, height: 0 }}\n                          animate={{ opacity: 1, height: 'auto' }}\n                          exit={{ opacity: 0, height: 0 }}\n                          className=\"mt-3 p-3 bg-gray-50 rounded-lg\"\n                          onClick={(e) => e.stopPropagation()}\n                        >\n                          <div className=\"space-y-3\">\n                            <div>\n                              <label className=\"text-sm font-medium text-gray-700\">\n                                How did this activity affect your mood?\n                              </label>\n                              <div className=\"flex items-center space-x-2 mt-1\">\n                                {[-3, -2, -1, 0, 1, 2, 3].map((impact) => (\n                                  <button\n                                    key={impact}\n                                    onClick={() => setMoodImpact(_impact)}\n                                    className={`\n                                      px-3 py-1 rounded-lg text-sm font-medium transition-colors\n                                      ${moodImpact === impact \n                                        ? impact > 0 \n                                          ? 'bg-green-500 text-white' \n                                          : impact < 0\n                                          ? 'bg-red-500 text-white'\n                                          : 'bg-gray-500 text-white'\n                                        : 'bg-white border border-gray-300 hover:border-gray-400'\n                                      }\n                                    `}\n                                  >\n                                    {impact > 0 ? '+' : ''}{impact}\n                                  </button>\n                                ))}\n                              </div>\n                            </div>\n\n                            <div>\n                              <label className=\"text-sm font-medium text-gray-700\">\n                                Notes (_optional)\n                              </label>\n                              <textarea\n                                value={completionNote}\n                                onChange={(e) => setCompletionNote(e.target.value)}\n                                className=\"w-full mt-1 px-3 py-2 border border-gray-300 rounded-lg text-sm resize-none\"\n                                rows={2}\n                                placeholder=\"How did it go? Any observations?\"\n                              />\n                            </div>\n\n                            <div className=\"flex justify-end space-x-2\">\n                              <button\n                                onClick={() => {\n                                  setEditingActivity(null);\n                                  setCompletionNote('');\n                                  setMoodImpact(0);\n                                }}\n                                className=\"px-3 py-1 text-sm text-gray-600 hover:text-gray-700\"\n                              >\n                                Cancel\n                              </button>\n                              <button\n                                onClick={() => handleCompleteActivity(activity.id)}\n                                className=\"px-3 py-1 bg-primary-500 text-white text-sm rounded-lg hover:bg-primary-600\"\n                              >\n                                Complete\n                              </button>\n                            </div>\n                          </div>\n                        </motion.div>\n                      )}\n                    </div>\n                  </div>\n                </motion.div>\n              );\n            })\n          )}\n        </AnimatePresence>\n      </div>\n\n      {/* Recommendations Section */}\n      {(recommendations.length > 0 || rescheduleSuggestions.length > 0) && (\n        <div className=\"border-t pt-3\">\n          <button\n            onClick={() => setShowRecommendations(!showRecommendations)}\n            className=\"flex items-center justify-between w-full text-sm font-medium text-gray-700 hover:text-gray-900\"\n          >\n            <span className=\"flex items-center space-x-2\">\n              <Award className=\"h-4 w-4\" />\n              <span>Suggestions for you</span>\n            </span>\n            <ChevronRight className={`h-4 w-4 transition-transform ${showRecommendations ? 'rotate-90' : ''}`} />\n          </button>\n\n          <AnimatePresence>\n            {showRecommendations && (\n              <motion.div\n                initial={{ opacity: 0, height: 0 }}\n                animate={{ opacity: 1, height: 'auto' }}\n                exit={{ opacity: 0, height: 0 }}\n                className=\"mt-3 space-y-2\"\n              >\n                {rescheduleSuggestions.length > 0 && (\n                  <div className=\"p-2 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                    <p className=\"text-xs text-yellow-800 mb-1\">\n                      These activities don't match your current energy _level:\n                    </p>\n                    {rescheduleSuggestions.slice(0, 2).map((activity) => (\n                      <div key={activity.id} className=\"flex items-center justify-between text-xs mt-1\">\n                        <span className=\"text-yellow-700\">{activity.title}</span>\n                        <button\n                          onClick={() => handleReschedule(activity.id, addDays(new Date(), 1))}\n                          className=\"text-yellow-600 hover:text-yellow-700 font-medium\"\n                        >\n                          Postpone\n                        </button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n\n                {recommendations.length > 0 && (\n                  <div className=\"p-2 bg-green-50 border border-green-200 rounded-lg\">\n                    <p className=\"text-xs text-green-800 mb-1\">\n                      Recommended activities for your energy _level:\n                    </p>\n                    {recommendations.slice(0, 3).map((activity) => (\n                      <div key={activity.id} className=\"flex items-center justify-between text-xs mt-1\">\n                        <span className=\"text-green-700\">{activity.title}</span>\n                        <span className=\"text-green-600\">\n                          {activity.moodImpact && activity.moodImpact > 0 ? '+' : ''}{activity.moodImpact} mood\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\BehavioralActivation.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1342,1345],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1342,1345],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":304,"column":15,"nodeType":"JSXOpeningElement","endLine":304,"endColumn":68}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Sparkles,\n  _Target,\n  _TrendingUp,\n  _Award,\n  _ChevronRight,\n  _Plus,\n  RefreshCw,\n  Calendar,\n  Clock,\n  Zap,\n  Heart,\n  Brain,\n  Users,\n  Coffee,\n  Music,\n  Book,\n  Palette,\n  Move,\n  Home,\n  Gamepad2,\n  Camera,\n  ShoppingBag,\n  Utensils,\n  TreePine,\n  _Star,\n  Info,\n  _CheckCircle,\n  AlertCircle\n} from 'lucide-react';\nimport { useActivityStore } from '../../../stores/activityStore';\nimport { _format, addDays } from 'date-fns';\n\ninterface BehavioralActivationProps {\n  currentMood?: number;\n  energyLevel?: 'low' | 'medium' | 'high';\n  onScheduleActivity?: (activity: unknown) => void;\n  onStartExperiment?: (_experiment: unknown) => void;\n}\n\nexport function BehavioralActivation({\n  currentMood = 5,\n  energyLevel = 'medium',\n  onScheduleActivity,\n  onStartExperiment\n}: BehavioralActivationProps) {\n  const {\n    _activities,\n    addActivity,\n    getActivityRecommendations,\n    adaptScheduleForBadDay\n  } = useActivityStore();\n\n  const [selectedDifficulty, setSelectedDifficulty] = useState<'easy' | 'medium' | 'hard'>('easy');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [showExperiment, setShowExperiment] = useState(false);\n  const [selectedActivities, setSelectedActivities] = useState<any[]>([]);\n  const [experimentNotes, setExperimentNotes] = useState('');\n\n  // Pleasant activities library\n  const pleasantActivities = [\n    // Physical\n    { id: 'walk', title: 'Take a walk', category: 'physical', icon: Move, _difficulty: 'easy', energyLevel: 'low', duration: 15, moodImpact: 2 },\n    { id: 'stretch', title: 'Gentle stretching', category: 'physical', icon: Move, _difficulty: 'easy', energyLevel: 'low', duration: 10, moodImpact: 1 },\n    { id: 'dance', title: 'Dance to favorite music', category: 'physical', icon: Music, _difficulty: 'medium', energyLevel: 'medium', duration: 20, moodImpact: 3 },\n    { id: 'yoga', title: 'Yoga session', category: 'physical', icon: Heart, _difficulty: 'medium', energyLevel: 'medium', duration: 30, moodImpact: 3 },\n    { id: 'exercise', title: 'Full workout', category: 'physical', icon: Zap, _difficulty: 'hard', energyLevel: 'high', duration: 45, moodImpact: 4 },\n    \n    // Creative\n    { id: 'draw', title: 'Draw or doodle', category: 'creative', icon: Palette, _difficulty: 'easy', energyLevel: 'low', duration: 20, moodImpact: 2 },\n    { id: 'music', title: 'Listen to music', category: 'creative', icon: Music, _difficulty: 'easy', energyLevel: 'low', duration: 15, moodImpact: 2 },\n    { id: 'write', title: 'Creative writing', category: 'creative', icon: Book, _difficulty: 'medium', energyLevel: 'medium', duration: 30, moodImpact: 3 },\n    { id: 'photo', title: 'Take photos', category: 'creative', icon: Camera, _difficulty: 'easy', energyLevel: 'medium', duration: 20, moodImpact: 2 },\n    { id: 'craft', title: 'Arts and crafts', category: 'creative', icon: Palette, _difficulty: 'medium', energyLevel: 'medium', duration: 45, moodImpact: 3 },\n    \n    // Social\n    { id: 'call', title: 'Call a friend', category: 'social', icon: Users, _difficulty: 'easy', energyLevel: 'low', duration: 20, moodImpact: 3 },\n    { id: 'text', title: 'Send caring messages', category: 'social', icon: Heart, _difficulty: 'easy', energyLevel: 'low', duration: 10, moodImpact: 2 },\n    { id: 'coffee', title: 'Coffee with friend', category: 'social', icon: Coffee, _difficulty: 'medium', energyLevel: 'medium', duration: 60, moodImpact: 4 },\n    { id: 'game', title: 'Play online game with friends', category: 'social', icon: Gamepad2, _difficulty: 'medium', energyLevel: 'medium', duration: 45, moodImpact: 3 },\n    { id: 'volunteer', title: 'Volunteer activity', category: 'social', icon: Heart, _difficulty: 'hard', energyLevel: 'high', duration: 120, moodImpact: 5 },\n    \n    // Self-care\n    { id: 'bath', title: 'Relaxing bath', category: 'self-care', icon: Home, _difficulty: 'easy', energyLevel: 'low', duration: 30, moodImpact: 3 },\n    { id: 'tea', title: 'Make favorite tea/coffee', category: 'self-care', icon: Coffee, _difficulty: 'easy', energyLevel: 'low', duration: 10, moodImpact: 1 },\n    { id: 'read', title: 'Read a book', category: 'self-care', icon: Book, _difficulty: 'easy', energyLevel: 'low', duration: 30, moodImpact: 2 },\n    { id: 'meditate', title: 'Meditation', category: 'self-care', icon: Brain, _difficulty: 'medium', energyLevel: 'low', duration: 15, moodImpact: 3 },\n    { id: 'nature', title: 'Time in nature', category: 'self-care', icon: TreePine, _difficulty: 'easy', energyLevel: 'medium', duration: 30, moodImpact: 4 },\n    \n    // Productive\n    { id: 'organize', title: 'Organize one small area', category: 'productive', icon: Home, _difficulty: 'easy', energyLevel: 'low', duration: 15, moodImpact: 2 },\n    { id: 'cook', title: 'Cook favorite meal', category: 'productive', icon: Utensils, _difficulty: 'medium', energyLevel: 'medium', duration: 45, moodImpact: 3 },\n    { id: 'shop', title: 'Browse favorite shop', category: 'productive', icon: ShoppingBag, _difficulty: 'medium', energyLevel: 'medium', duration: 30, moodImpact: 2 },\n    { id: 'learn', title: 'Learn something new', category: 'productive', icon: Brain, _difficulty: 'medium', energyLevel: 'medium', duration: 30, moodImpact: 3 },\n    { id: 'plan', title: 'Plan something exciting', category: 'productive', icon: Calendar, _difficulty: 'easy', energyLevel: 'low', duration: 20, moodImpact: 2 },\n  ];\n\n  // Filter activities based on current state\n  const filteredActivities = pleasantActivities.filter(activity => {\n    const difficultyMatch = selectedDifficulty === 'easy' ? activity._difficulty === 'easy' :\n                           selectedDifficulty === 'medium' ? activity._difficulty !== 'hard' :\n                           true;\n    \n    const energyMatch = energyLevel === 'low' ? activity.energyLevel === 'low' :\n                        energyLevel === 'medium' ? activity.energyLevel !== 'high' :\n                        true;\n    \n    const categoryMatch = selectedCategory === 'all' || activity.category === selectedCategory;\n    \n    return difficultyMatch && energyMatch && categoryMatch;\n  });\n\n  // Get mastery and pleasure ratings\n  const getMasteryLevel = (_difficulty: string) => {\n    switch (_difficulty) {\n      case 'easy': return 1;\n      case 'medium': return 2;\n      case 'hard': return 3;\n      default: return 1;\n    }\n  };\n\n  const getPleasureLevel = (moodImpact: number) => {\n    if (moodImpact >= 4) return 3;\n    if (moodImpact >= 2) return 2;\n    return 1;\n  };\n\n  // Activity experiment setup\n  const createExperiment = () => {\n    if (selectedActivities.length === 0) return;\n    \n    const _experiment = {\n      id: `exp-${Date.now()}`,\n      _activities: selectedActivities,\n      hypothesis: `Testing if these activities improve mood from ${currentMood}/10`,\n      startMood: currentMood,\n      startEnergy: energyLevel,\n      notes: experimentNotes,\n      date: new Date()\n    };\n    \n    onStartExperiment?.(_experiment);\n    setShowExperiment(false);\n    setSelectedActivities([]);\n    setExperimentNotes('');\n  };\n\n  // Schedule activity\n  const scheduleActivity = (activity: unknown) => {\n    const _newActivity = {\n      ...activity,\n      scheduledTime: addDays(new Date(), 0), // Today\n      flexibility: 'flexible',\n      behavioralActivation: true\n    };\n    \n    addActivity(_newActivity);\n    onScheduleActivity?.(_newActivity);\n  };\n\n  // Toggle activity selection for experiment\n  const toggleActivitySelection = (activity: unknown) => {\n    setSelectedActivities(prev => {\n      const _exists = prev.find(a => a.id === activity.id);\n      if (_exists) {\n        return prev.filter(a => a.id !== activity.id);\n      }\n      return [...prev, activity];\n    });\n  };\n\n  // Get motivational message based on mood\n  const getMotivationalMessage = () => {\n    if (currentMood <= 3) {\n      return \"Starting small is still starting. Every activity counts!\";\n    } else if (currentMood <= 6) {\n      return \"You're doing great! Let's build on this momentum.\";\n    } else {\n      return \"Fantastic mood! Let's keep it going with engaging _activities.\";\n    }\n  };\n\n  // Get activity recommendations\n  const _recommendations = getActivityRecommendations(energyLevel, currentMood);\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Header */}\n      <div className=\"mb-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-2 bg-primary-100 rounded-lg\">\n              <Sparkles className=\"h-5 w-5 text-primary-600\" />\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-gray-900\">Behavioral Activation</h3>\n              <p className=\"text-sm text-gray-600\">Pleasant activity scheduling</p>\n            </div>\n          </div>\n          \n          <button\n            onClick={() => setShowExperiment(!showExperiment)}\n            className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n            aria-label=\"Start experiment\"\n          >\n            <Brain className=\"h-5 w-5 text-gray-600\" />\n          </button>\n        </div>\n\n        {/* Motivational Message */}\n        <div className=\"p-3 bg-gradient-to-r from-primary-50 to-secondary-50 rounded-lg mb-3\">\n          <div className=\"flex items-start space-x-2\">\n            <Info className=\"h-4 w-4 text-primary-600 mt-0.5\" />\n            <div>\n              <p className=\"text-sm text-gray-700\">{getMotivationalMessage()}</p>\n              <div className=\"flex items-center space-x-3 mt-1 text-xs text-gray-600\">\n                <span>Mood: {currentMood}/10</span>\n                <span>Energy: {energyLevel}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Difficulty Selection */}\n        <div className=\"flex space-x-2 mb-3\">\n          <button\n            onClick={() => setSelectedDifficulty('easy')}\n            className={`flex-1 py-2 rounded-lg text-sm font-medium transition-colors ${\n              selectedDifficulty === 'easy'\n                ? 'bg-green-100 text-green-700'\n                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n            }`}\n          >\n            Easy Start\n          </button>\n          <button\n            onClick={() => setSelectedDifficulty('medium')}\n            className={`flex-1 py-2 rounded-lg text-sm font-medium transition-colors ${\n              selectedDifficulty === 'medium'\n                ? 'bg-yellow-100 text-yellow-700'\n                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n            }`}\n          >\n            Moderate\n          </button>\n          <button\n            onClick={() => setSelectedDifficulty('hard')}\n            className={`flex-1 py-2 rounded-lg text-sm font-medium transition-colors ${\n              selectedDifficulty === 'hard'\n                ? 'bg-red-100 text-red-700'\n                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n            }`}\n          >\n            Challenge\n          </button>\n        </div>\n\n        {/* Category Filters */}\n        <div className=\"flex space-x-2 overflow-x-auto pb-2\">\n          <button\n            onClick={() => setSelectedCategory('all')}\n            className={`px-3 py-1 rounded-full text-xs font-medium whitespace-nowrap transition-colors ${\n              selectedCategory === 'all'\n                ? 'bg-primary-100 text-primary-700'\n                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n            }`}\n          >\n            All Activities\n          </button>\n          {['physical', 'creative', 'social', 'self-care', 'productive'].map(category => (\n            <button\n              key={category}\n              onClick={() => setSelectedCategory(_category)}\n              className={`px-3 py-1 rounded-full text-xs font-medium whitespace-nowrap transition-colors ${\n                selectedCategory === category\n                  ? 'bg-primary-100 text-primary-700'\n                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n              }`}\n            >\n              {category.charAt(0).toUpperCase() + category.slice(1).replace('-', ' ')}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Activity Experiment Mode */}\n      <AnimatePresence>\n        {showExperiment && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            className=\"mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\"\n          >\n            <h4 className=\"font-medium text-blue-900 mb-2\">Activity Experiment</h4>\n            <p className=\"text-sm text-blue-700 mb-3\">\n              Select activities to test their impact on your mood\n            </p>\n            \n            <div className=\"mb-3\">\n              <label className=\"text-sm font-medium text-blue-800\">Hypothesis/Notes</label>\n              <textarea\n                value={experimentNotes}\n                onChange={(e) => setExperimentNotes(e.target.value)}\n                className=\"w-full mt-1 px-3 py-2 border border-blue-300 rounded-lg text-sm resize-none\"\n                rows={2}\n                placeholder=\"What do you expect to happen?\"\n              />\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-blue-700\">\n                {selectedActivities.length} activities selected\n              </span>\n              <div className=\"flex space-x-2\">\n                <button\n                  onClick={() => {\n                    setShowExperiment(false);\n                    setSelectedActivities([]);\n                    setExperimentNotes('');\n                  }}\n                  className=\"px-3 py-1 text-sm text-blue-600 hover:text-blue-700\"\n                >\n                  Cancel\n                </button>\n                <button\n                  onClick={createExperiment}\n                  disabled={selectedActivities.length === 0}\n                  className={`px-3 py-1 text-sm rounded-lg ${\n                    selectedActivities.length > 0\n                      ? 'bg-blue-600 text-white hover:bg-blue-700'\n                      : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                  }`}\n                >\n                  Start Experiment\n                </button>\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Activities Grid */}\n      <div className=\"flex-1 overflow-y-auto\">\n        <div className=\"grid grid-cols-1 gap-2\">\n          <AnimatePresence mode=\"popLayout\">\n            {filteredActivities.map((activity, index) => {\n              const Icon = activity.icon;\n              const mastery = getMasteryLevel(activity._difficulty);\n              const pleasure = getPleasureLevel(activity.moodImpact);\n              const isSelected = selectedActivities.find(a => a.id === activity.id);\n              \n              return (\n                <motion.div\n                  key={activity.id}\n                  layout\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  exit={{ opacity: 0, x: 20 }}\n                  transition={{ delay: index * 0.05 }}\n                  className={`\n                    p-3 rounded-lg border transition-all cursor-pointer\n                    ${isSelected ? 'bg-blue-50 border-blue-300 ring-2 ring-blue-500' : 'bg-white border-gray-200 hover:border-primary-300'}\n                  `}\n                  onClick={() => {\n                    if (_showExperiment) {\n                      toggleActivitySelection(_activity);\n                    } else {\n                      scheduleActivity(_activity);\n                    }\n                  }}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={`p-2 rounded-lg ${\n                        isSelected ? 'bg-blue-100' : 'bg-gray-100'\n                      }`}>\n                        <Icon className={`h-4 w-4 ${\n                          isSelected ? 'text-blue-600' : 'text-gray-600'\n                        }`} />\n                      </div>\n                      \n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-gray-900\">{activity.title}</h4>\n                        <div className=\"flex items-center space-x-3 mt-1 text-xs\">\n                          <span className=\"text-gray-500\">\n                            <Clock className=\"h-3 w-3 inline mr-1\" />\n                            {activity.duration} min\n                          </span>\n                          \n                          <span className={`px-2 py-0.5 rounded-full ${\n                            activity.energyLevel === 'low' ? 'bg-blue-100 text-blue-700' :\n                            activity.energyLevel === 'medium' ? 'bg-yellow-100 text-yellow-700' :\n                            'bg-red-100 text-red-700'\n                          }`}>\n                            {activity.energyLevel} energy\n                          </span>\n                          \n                          <span className=\"text-gray-500\">\n                            +{activity.moodImpact} mood\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-right\">\n                      {/* Mastery & Pleasure Ratings */}\n                      <div className=\"flex flex-col space-y-1\">\n                        <div className=\"flex items-center space-x-1\">\n                          <span className=\"text-xs text-gray-500\">M:</span>\n                          {[1, 2, 3].map(level => (\n                            <div\n                              key={level}\n                              className={`w-2 h-2 rounded-full ${\n                                level <= mastery ? 'bg-purple-500' : 'bg-gray-300'\n                              }`}\n                            />\n                          ))}\n                        </div>\n                        <div className=\"flex items-center space-x-1\">\n                          <span className=\"text-xs text-gray-500\">P:</span>\n                          {[1, 2, 3].map(level => (\n                            <div\n                              key={level}\n                              className={`w-2 h-2 rounded-full ${\n                                level <= pleasure ? 'bg-green-500' : 'bg-gray-300'\n                              }`}\n                            />\n                          ))}\n                        </div>\n                      </div>\n                      \n                      {!showExperiment && (\n                        <button\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            scheduleActivity(_activity);\n                          }}\n                          className=\"mt-2 text-xs text-primary-600 hover:text-primary-700 font-medium\"\n                        >\n                          Schedule\n                        </button>\n                      )}\n                    </div>\n                  </div>\n                </motion.div>\n              );\n            })}\n          </AnimatePresence>\n        </div>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"border-t pt-3 mt-3\">\n        <div className=\"grid grid-cols-2 gap-2\">\n          <button\n            onClick={() => {\n              adaptScheduleForBadDay();\n            }}\n            className=\"py-2 bg-blue-50 text-blue-700 rounded-lg hover:bg-blue-100 text-sm font-medium flex items-center justify-center space-x-2\"\n          >\n            <RefreshCw className=\"h-4 w-4\" />\n            <span>Adapt for Low Energy</span>\n          </button>\n          \n          <button\n            onClick={() => {\n              const _randomActivity = filteredActivities[Math.floor(Math.random() * filteredActivities.length)];\n              if (_randomActivity) {\n                scheduleActivity(_randomActivity);\n              }\n            }}\n            className=\"py-2 bg-green-50 text-green-700 rounded-lg hover:bg-green-100 text-sm font-medium flex items-center justify-center space-x-2\"\n          >\n            <Sparkles className=\"h-4 w-4\" />\n            <span>Surprise Me!</span>\n          </button>\n        </div>\n        \n        {/* Procrastination Breakthrough */}\n        {currentMood <= 4 && (\n          <div className=\"mt-2 p-2 bg-yellow-50 border border-yellow-200 rounded-lg\">\n            <div className=\"flex items-center space-x-2\">\n              <AlertCircle className=\"h-4 w-4 text-yellow-600\" />\n              <p className=\"text-xs text-yellow-800\">\n                Feeling stuck? Try the 2-minute rule: Do any activity for just 2 minutes!\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\CareTeamDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\CommunityFeedWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\CrisisPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\CrisisPanelWidget.tsx","messages":[{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":168,"column":13,"nodeType":"JSXOpeningElement","endLine":176,"endColumn":14},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":2,"message":"Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.","line":168,"column":13,"nodeType":"JSXOpeningElement","endLine":176,"endColumn":14}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Phone, MessageCircle, AlertTriangle, Shield, Clock, ChevronRight } from 'lucide-react';\nimport { CrisisPanelData } from '../../../types/dashboard';\nimport { useNavigate } from 'react-router-dom';\nimport { motion, AnimatePresence } from 'framer-motion';\n\ninterface CrisisPanelWidgetProps {\n  data?: CrisisPanelData;\n  error?: string;\n}\n\nexport function CrisisPanelWidget({ data, error }: CrisisPanelWidgetProps) {\n  const navigate = useNavigate();\n  const [showAllContacts, setShowAllContacts] = useState(false);\n\n  if (_error) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <p className=\"text-red-600\">{error}</p>\n      </div>\n    );\n  }\n\n  if (!data) {\n    return (\n      <div className=\"animate-pulse space-y-3\">\n        <div className=\"h-20 bg-gray-200 rounded-lg\"></div>\n        <div className=\"h-16 bg-gray-200 rounded-lg\"></div>\n      </div>\n    );\n  }\n\n  const getRiskLevelColor = () => {\n    switch (data.currentRiskLevel) {\n      case 'critical':\n        return 'bg-red-600 text-white';\n      case 'high':\n        return 'bg-orange-500 text-white';\n      case 'moderate':\n        return 'bg-yellow-500 text-white';\n      default:\n        return 'bg-green-500 text-white';\n    }\n  };\n\n  const formatLastCheckIn = () => {\n    if (!data.lastCheckIn) return 'Never';\n    \n    const now = new Date();\n    const checkIn = new Date(data.lastCheckIn);\n    const hours = Math.floor((now.getTime() - checkIn.getTime()) / (1000 * 60 * 60));\n    \n    if (hours < 1) return 'Just now';\n    if (hours === 1) return '1 hour ago';\n    if (hours < 24) return `${hours} hours ago`;\n    \n    const days = Math.floor(hours / 24);\n    if (days === 1) return '1 day ago';\n    return `${days} days ago`;\n  };\n\n  return (\n    <div className=\"space-y-3\">\n      {/* Risk Level Indicator */}\n      <div className={`rounded-lg p-3 ${getRiskLevelColor()}`}>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Shield className=\"h-5 w-5\" />\n            <span className=\"font-medium\">Current Risk Level</span>\n          </div>\n          <span className=\"font-bold uppercase\">{data.currentRiskLevel}</span>\n        </div>\n        <div className=\"mt-2 flex items-center text-sm opacity-90\">\n          <Clock className=\"h-3 w-3 mr-1\" />\n          Last check-in: {formatLastCheckIn()}\n        </div>\n      </div>\n\n      {/* Crisis Button */}\n      <motion.button\n        whileHover={{ scale: 1.02 }}\n        whileTap={{ scale: 0.98 }}\n        onClick={() => navigate('/crisis')}\n        className=\"w-full bg-red-600 hover:bg-red-700 text-white rounded-lg p-4 flex items-center justify-between transition-colors\"\n      >\n        <div className=\"flex items-center space-x-3\">\n          <AlertTriangle className=\"h-6 w-6\" />\n          <div className=\"text-left\">\n            <p className=\"font-semibold\">Need Immediate Help?</p>\n            <p className=\"text-sm opacity-90\">Get crisis support now</p>\n          </div>\n        </div>\n        <ChevronRight className=\"h-5 w-5\" />\n      </motion.button>\n\n      {/* Emergency Contacts */}\n      {data.emergencyContacts && data.emergencyContacts.length > 0 && (\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <h4 className=\"text-sm font-medium text-gray-700\">Emergency Contacts</h4>\n            <button\n              onClick={() => setShowAllContacts(!showAllContacts)}\n              className=\"text-xs text-primary-600 hover:text-primary-700\"\n            >\n              {showAllContacts ? 'Show Less' : 'Show All'}\n            </button>\n          </div>\n          \n          <AnimatePresence>\n            {data.emergencyContacts\n              .slice(0, showAllContacts ? undefined : 1)\n              .map((contact, index) => (\n                <motion.div\n                  key={contact.id}\n                  initial={{ opacity: 0, height: 0 }}\n                  animate={{ opacity: 1, height: 'auto' }}\n                  exit={{ opacity: 0, height: 0 }}\n                  transition={{ delay: index * 0.1 }}\n                  className=\"bg-white border border-gray-200 rounded-lg p-3\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium text-gray-900\">{contact.name}</p>\n                      <p className=\"text-xs text-gray-600\">{contact.relationship}</p>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      {contact.preferredContact !== 'text' && (\n                        <button\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            window.location.href = `tel:${contact.phone}`;\n                          }}\n                          className=\"p-2 bg-green-100 text-green-600 rounded-lg hover:bg-green-200\"\n                        >\n                          <Phone className=\"h-4 w-4\" />\n                        </button>\n                      )}\n                      {contact.preferredContact !== 'call' && (\n                        <button\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            window.location.href = `sms:${contact.phone}`;\n                          }}\n                          className=\"p-2 bg-blue-100 text-blue-600 rounded-lg hover:bg-blue-200\"\n                        >\n                          <MessageCircle className=\"h-4 w-4\" />\n                        </button>\n                      )}\n                    </div>\n                  </div>\n                  {contact.isAvailable && (\n                    <div className=\"mt-2 flex items-center text-xs text-green-600\">\n                      <div className=\"w-2 h-2 bg-green-600 rounded-full mr-1\"></div>\n                      Available now\n                    </div>\n                  )}\n                </motion.div>\n              ))}\n          </AnimatePresence>\n        </div>\n      )}\n\n      {/* Crisis Hotlines */}\n      {data.hotlines && data.hotlines.length > 0 && (\n        <div className=\"space-y-2\">\n          <h4 className=\"text-sm font-medium text-gray-700\">24/7 Crisis Hotlines</h4>\n          {data.hotlines.slice(0, 2).map((hotline) => (\n            <div\n              key={hotline.id}\n              className=\"bg-gray-50 rounded-lg p-3 cursor-pointer hover:bg-gray-100\"\n              onClick={() => {\n                if (hotline.type === 'hotline') {\n                  window.location.href = `tel:${hotline.contact}`;\n                }\n              }}\n            >\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <p className=\"font-medium text-gray-900 text-sm\">{hotline.name}</p>\n                  <p className=\"text-xs text-gray-600 mt-1\">{hotline.description}</p>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"font-bold text-primary-600\">{hotline.contact}</p>\n                  {hotline.available247 && (\n                    <p className=\"text-xs text-green-600\">24/7</p>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Safety Plan Link */}\n      <button\n        onClick={() => navigate('/crisis/safety-plan')}\n        className=\"w-full bg-primary-100 text-primary-700 rounded-lg p-3 flex items-center justify-between hover:bg-primary-200 transition-colors\"\n      >\n        <div className=\"flex items-center space-x-2\">\n          <Shield className=\"h-4 w-4\" />\n          <span className=\"text-sm font-medium\">View Safety Plan</span>\n        </div>\n        <ChevronRight className=\"h-4 w-4\" />\n      </button>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\CrisisPreventionDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setTriggers' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":66,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":31},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":822,"column":26,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[37605,37658],"text":"\n                      You&apos;ve successfully prevented "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[37605,37658],"text":"\n                      You&lsquo;ve successfully prevented "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[37605,37658],"text":"\n                      You&#39;ve successfully prevented "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[37605,37658],"text":"\n                      You&rsquo;ve successfully prevented "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, _useEffect, useMemo } from 'react';\nimport { \n  TrendingUp, TrendingDown, AlertTriangle, Activity, \n  Calendar, Clock, Target, Shield, Brain, Heart,\n  Zap, _AlertCircle, CheckCircle, _Info, ChevronRight,\n  _BarChart3, _LineChart, _PieChart, Eye, EyeOff, Users\n} from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { _Line, _Bar, _Radar, _Area } from 'recharts';\nimport { useAuth } from '../../../hooks/useAuth';\nimport { logger, LogCategory } from '../../../services/logging/logger';\n\ninterface TriggerPattern {\n  id: string;\n  name: string;\n  category: 'environmental' | 'social' | 'physical' | 'emotional' | 'behavioral';\n  frequency: number;\n  impact: 'low' | 'medium' | 'high';\n  lastOccurrence: Date;\n  trend: 'increasing' | 'stable' | 'decreasing';\n  description: string;\n  preventionStrategies: string[];\n}\n\ninterface WarningSign {\n  id: string;\n  sign: string;\n  severity: 'mild' | 'moderate' | 'severe';\n  detected: boolean;\n  confidence: number; // 0-100\n  lastDetected?: Date;\n  actionRequired: boolean;\n}\n\ninterface _CrisisTimeline {\n  timestamp: Date;\n  event: string;\n  type: 'trigger' | 'warning' | 'intervention' | 'resolution';\n  severity: 'low' | 'medium' | 'high';\n  outcome?: string;\n}\n\ninterface PreventionMetrics {\n  preventedCrises: number;\n  earlyInterventions: number;\n  successRate: number;\n  averageResponseTime: number; // in minutes\n  riskReduction: number; // percentage\n}\n\ninterface PatternRecognition {\n  timeOfDay: { morning: number; afternoon: number; evening: number; night: number };\n  dayOfWeek: { [key: string]: number };\n  seasonal: { spring: number; summer: number; fall: number; winter: number };\n  weatherCorrelation: { sunny: number; cloudy: number; rainy: number };\n  socialContext: { alone: number; withOthers: number; crowded: number };\n}\n\nexport function CrisisPreventionDashboard() {\n  const { _user } = useAuth();\n  const [activeView, setActiveView] = useState<'overview' | 'patterns' | 'timeline' | 'prevention'>('overview');\n  const [showSensitiveData, setShowSensitiveData] = useState(true);\n  const [selectedTimeRange, setSelectedTimeRange] = useState<'week' | 'month' | 'quarter' | 'year'>('month');\n  \n  // State for pattern recognition data\n  const [triggers, setTriggers] = useState<TriggerPattern[]>([\n    {\n      id: '1',\n      name: 'Work Stress',\n      category: 'environmental',\n      frequency: 8,\n      impact: 'high',\n      lastOccurrence: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n      trend: 'increasing',\n      description: 'Deadline pressure and workload',\n      preventionStrategies: ['Time management', 'Delegation', 'Regular breaks']\n    },\n    {\n      id: '2',\n      name: 'Social Isolation',\n      category: 'social',\n      frequency: 5,\n      impact: 'medium',\n      lastOccurrence: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),\n      trend: 'stable',\n      description: 'Extended periods without social contact',\n      preventionStrategies: ['Schedule social activities', 'Join support groups', 'Regular check-ins']\n    },\n    {\n      id: '3',\n      name: 'Sleep Disruption',\n      category: 'physical',\n      frequency: 12,\n      impact: 'high',\n      lastOccurrence: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),\n      trend: 'increasing',\n      description: 'Poor sleep quality or insomnia',\n      preventionStrategies: ['Sleep hygiene', 'Relaxation techniques', 'Consistent schedule']\n    }\n  ]);\n\n  const [warningSignsChecklist, setWarningSignsChecklist] = useState<WarningSign[]>([\n    {\n      id: '1',\n      sign: 'Increased irritability or mood swings',\n      severity: 'moderate',\n      detected: true,\n      confidence: 75,\n      lastDetected: new Date(),\n      actionRequired: true\n    },\n    {\n      id: '2',\n      sign: 'Withdrawal from social activities',\n      severity: 'moderate',\n      detected: true,\n      confidence: 60,\n      lastDetected: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),\n      actionRequired: false\n    },\n    {\n      id: '3',\n      sign: 'Changes in sleep patterns',\n      severity: 'mild',\n      detected: true,\n      confidence: 85,\n      lastDetected: new Date(),\n      actionRequired: true\n    },\n    {\n      id: '4',\n      sign: 'Difficulty concentrating',\n      severity: 'mild',\n      detected: false,\n      confidence: 0,\n      actionRequired: false\n    },\n    {\n      id: '5',\n      sign: 'Hopelessness or despair',\n      severity: 'severe',\n      detected: false,\n      confidence: 0,\n      actionRequired: false\n    }\n  ]);\n\n  const [preventionMetrics] = useState<PreventionMetrics>({\n    preventedCrises: 7,\n    earlyInterventions: 23,\n    successRate: 82,\n    averageResponseTime: 15,\n    riskReduction: 65\n  });\n\n  const [patternData] = useState<PatternRecognition>({\n    timeOfDay: { morning: 20, afternoon: 35, evening: 60, night: 85 },\n    dayOfWeek: { \n      Monday: 70, Tuesday: 60, Wednesday: 55, Thursday: 50, \n      Friday: 45, Saturday: 30, Sunday: 40 \n    },\n    seasonal: { spring: 40, summer: 30, fall: 50, winter: 70 },\n    weatherCorrelation: { sunny: 25, cloudy: 50, rainy: 75 },\n    socialContext: { alone: 80, withOthers: 30, crowded: 45 }\n  });\n\n  // Calculate overall risk score based on warning signs and triggers\n  const overallRiskScore = useMemo(() => {\n    const activeWarnings = warningSignsChecklist.filter(w => w.detected);\n    const warningScore = activeWarnings.reduce((sum, w) => {\n      const severityMultiplier = w.severity === 'severe' ? 3 : w.severity === 'moderate' ? 2 : 1;\n      return sum + (w.confidence / 100) * severityMultiplier * 20;\n    }, 0);\n\n    const triggerScore = triggers.reduce((sum, t) => {\n      const impactMultiplier = t.impact === 'high' ? 3 : t.impact === 'medium' ? 2 : 1;\n      const trendMultiplier = t.trend === 'increasing' ? 1.5 : t.trend === 'stable' ? 1 : 0.5;\n      return sum + (t.frequency * impactMultiplier * trendMultiplier);\n    }, 0);\n\n    return Math.min(100, (warningScore + triggerScore) / 2);\n  }, [warningSignsChecklist, triggers]);\n\n  // Generate prevention suggestions based on current patterns\n  const preventionSuggestions = useMemo(() => {\n    const suggestions = [];\n    \n    // Time-based suggestions\n    const highRiskTimes = Object.entries(patternData.timeOfDay)\n      .filter(([_, risk]) => risk > 60)\n      .map(([time]) => time);\n    \n    if (highRiskTimes.length > 0) {\n      suggestions.push({\n        type: 'schedule',\n        priority: 'high',\n        title: `High-risk times: ${highRiskTimes.join(', ')}`,\n        action: 'Schedule supportive activities during these periods',\n        icon: Clock\n      });\n    }\n\n    // Trigger-based suggestions\n    const increasingTriggers = triggers.filter(t => t.trend === 'increasing' && t.impact === 'high');\n    if (increasingTriggers.length > 0) {\n      suggestions.push({\n        type: 'trigger',\n        priority: 'high',\n        title: `Rising trigger: ${increasingTriggers[0]?.name || 'Unknown'}`,\n        action: increasingTriggers[0]?.preventionStrategies?.[0] || 'No strategy available',\n        icon: TrendingUp\n      });\n    }\n\n    // Warning sign suggestions\n    const severeWarnings = warningSignsChecklist.filter(w => w.detected && w.severity === 'severe');\n    if (severeWarnings.length > 0) {\n      suggestions.push({\n        type: 'warning',\n        priority: 'critical',\n        title: 'Severe warning signs detected',\n        action: 'Contact your therapist or crisis support immediately',\n        icon: AlertTriangle\n      });\n    }\n\n    return suggestions;\n  }, [patternData, triggers, warningSignsChecklist]);\n\n  // Handle warning sign checkbox changes\n  const toggleWarningSign = (signId: string) => {\n    setWarningSignsChecklist(prev => prev.map(sign => {\n      if (sign.id === signId) {\n        const newDetected = !sign.detected;\n        return {\n          ...sign,\n          detected: newDetected,\n          confidence: newDetected ? 75 : 0,\n          lastDetected: newDetected ? new Date() : sign.lastDetected,\n          actionRequired: newDetected && sign.severity !== 'mild'\n        };\n      }\n      return sign;\n    }));\n\n    // Log the change for tracking\n    logger.info('Warning sign status changed', { \n      category: LogCategory.CRISIS,\n      signId,\n      newStatus: !warningSignsChecklist.find(s => s.id === signId)?.detected\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with Risk Overview */}\n      <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-6\">\n        <div className=\"flex items-start justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Crisis Prevention Center</h2>\n            <p className=\"text-gray-600\">Early detection and intervention system</p>\n          </div>\n          \n          {/* Overall Risk Indicator */}\n          <div className=\"text-center\">\n            <div className={`relative w-24 h-24 rounded-full ${\n              overallRiskScore > 70 ? 'bg-red-100' : \n              overallRiskScore > 40 ? 'bg-yellow-100' : 'bg-green-100'\n            }`}>\n              <svg className=\"absolute inset-0 w-24 h-24 transform -rotate-90\">\n                <circle\n                  cx=\"48\"\n                  cy=\"48\"\n                  r=\"36\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"8\"\n                  fill=\"none\"\n                  className={\n                    overallRiskScore > 70 ? 'text-red-500' : \n                    overallRiskScore > 40 ? 'text-yellow-500' : 'text-green-500'\n                  }\n                  strokeDasharray={`${(overallRiskScore / 100) * 226} 226`}\n                />\n              </svg>\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <span className=\"text-2xl font-bold\">{Math.round(_overallRiskScore)}%</span>\n              </div>\n            </div>\n            <p className=\"text-sm text-gray-600 mt-2\">Risk Level</p>\n          </div>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4 mt-6\">\n          <div className=\"bg-white bg-opacity-70 rounded-lg p-3\">\n            <div className=\"flex items-center space-x-2\">\n              <Shield className=\"h-5 w-5 text-green-600\" />\n              <div>\n                <p className=\"text-2xl font-bold text-gray-900\">{preventionMetrics.preventedCrises}</p>\n                <p className=\"text-xs text-gray-600\">Crises Prevented</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-white bg-opacity-70 rounded-lg p-3\">\n            <div className=\"flex items-center space-x-2\">\n              <Zap className=\"h-5 w-5 text-blue-600\" />\n              <div>\n                <p className=\"text-2xl font-bold text-gray-900\">{preventionMetrics.earlyInterventions}</p>\n                <p className=\"text-xs text-gray-600\">Early Interventions</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-white bg-opacity-70 rounded-lg p-3\">\n            <div className=\"flex items-center space-x-2\">\n              <Target className=\"h-5 w-5 text-purple-600\" />\n              <div>\n                <p className=\"text-2xl font-bold text-gray-900\">{preventionMetrics.successRate}%</p>\n                <p className=\"text-xs text-gray-600\">Success Rate</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-white bg-opacity-70 rounded-lg p-3\">\n            <div className=\"flex items-center space-x-2\">\n              <Clock className=\"h-5 w-5 text-orange-600\" />\n              <div>\n                <p className=\"text-2xl font-bold text-gray-900\">{preventionMetrics.averageResponseTime}m</p>\n                <p className=\"text-xs text-gray-600\">Avg Response</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Tabs */}\n      <div className=\"bg-white rounded-xl shadow-sm\">\n        <div className=\"border-b border-gray-200\">\n          <nav className=\"flex -mb-px\">\n            {[\n              { id: 'overview', label: 'Overview', icon: Activity },\n              { id: 'patterns', label: 'Patterns', icon: Brain },\n              { id: 'timeline', label: 'Timeline', icon: Calendar },\n              { id: 'prevention', label: 'Prevention', icon: Shield }\n            ].map((tab) => (\n              <button\n                key={tab.id}\n                onClick={() => setActiveView(tab.id as unknown)}\n                className={`flex-1 py-3 px-4 flex items-center justify-center space-x-2 font-medium text-sm transition-colors ${\n                  activeView === tab.id\n                    ? 'border-b-2 border-primary-500 text-primary-700 bg-primary-50'\n                    : 'text-gray-500 hover:text-gray-700 hover:bg-gray-50'\n                }`}\n              >\n                <tab.icon className=\"h-4 w-4\" />\n                <span>{tab.label}</span>\n              </button>\n            ))}\n          </nav>\n        </div>\n\n        <div className=\"p-6\">\n          <AnimatePresence mode=\"wait\">\n            {/* Overview Tab */}\n            {activeView === 'overview' && (\n              <motion.div\n                key=\"overview\"\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: -20 }}\n                className=\"space-y-6\"\n              >\n                {/* Warning Signs Checklist */}\n                <div>\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-lg font-semibold text-gray-900\">Warning Signs Checklist</h3>\n                    <button\n                      onClick={() => setShowSensitiveData(!showSensitiveData)}\n                      className=\"text-sm text-gray-600 hover:text-gray-900\"\n                    >\n                      {showSensitiveData ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                    </button>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    {warningSignsChecklist.map((sign) => (\n                      <div\n                        key={sign.id}\n                        className={`p-3 rounded-lg border ${\n                          sign.detected \n                            ? sign.severity === 'severe' ? 'border-red-300 bg-red-50' :\n                              sign.severity === 'moderate' ? 'border-yellow-300 bg-yellow-50' :\n                              'border-blue-300 bg-blue-50'\n                            : 'border-gray-200 bg-white'\n                        }`}\n                      >\n                        <div className=\"flex items-start\">\n                          <input\n                            type=\"checkbox\"\n                            checked={sign.detected}\n                            onChange={() => toggleWarningSign(sign.id)}\n                            className=\"mt-1 h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded\"\n                          />\n                          <div className=\"ml-3 flex-1\">\n                            <div className=\"flex items-center justify-between\">\n                              <label className=\"font-medium text-gray-900\">\n                                {showSensitiveData ? sign.sign : '••••••••'}\n                              </label>\n                              <div className=\"flex items-center space-x-2\">\n                                {sign.actionRequired && (\n                                  <span className=\"px-2 py-1 text-xs bg-orange-100 text-orange-700 rounded\">\n                                    Action Required\n                                  </span>\n                                )}\n                                <span className={`px-2 py-1 text-xs rounded ${\n                                  sign.severity === 'severe' ? 'bg-red-100 text-red-700' :\n                                  sign.severity === 'moderate' ? 'bg-yellow-100 text-yellow-700' :\n                                  'bg-blue-100 text-blue-700'\n                                }`}>\n                                  {sign.severity}\n                                </span>\n                              </div>\n                            </div>\n                            {sign.detected && sign.confidence > 0 && (\n                              <div className=\"mt-2\">\n                                <div className=\"flex items-center justify-between text-sm text-gray-600\">\n                                  <span>Confidence: {sign.confidence}%</span>\n                                  {sign.lastDetected && (\n                                    <span>Last: {new Date(sign.lastDetected).toLocaleDateString()}</span>\n                                  )}\n                                </div>\n                                <div className=\"mt-1 w-full bg-gray-200 rounded-full h-2\">\n                                  <div \n                                    className={`h-2 rounded-full ${\n                                      sign.severity === 'severe' ? 'bg-red-500' :\n                                      sign.severity === 'moderate' ? 'bg-yellow-500' :\n                                      'bg-blue-500'\n                                    }`}\n                                    style={{ width: `${sign.confidence}%` }}\n                                  />\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Prevention Suggestions */}\n                {preventionSuggestions.length > 0 && (\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Immediate Actions</h3>\n                    <div className=\"space-y-3\">\n                      {preventionSuggestions.map((suggestion, idx) => (\n                        <motion.div\n                          key={idx}\n                          initial={{ opacity: 0, x: -20 }}\n                          animate={{ opacity: 1, x: 0 }}\n                          transition={{ delay: idx * 0.1 }}\n                          className={`p-4 rounded-lg border ${\n                            suggestion.priority === 'critical' ? 'border-red-300 bg-red-50' :\n                            suggestion.priority === 'high' ? 'border-orange-300 bg-orange-50' :\n                            'border-blue-300 bg-blue-50'\n                          }`}\n                        >\n                          <div className=\"flex items-start space-x-3\">\n                            <suggestion.icon className={`h-5 w-5 mt-0.5 ${\n                              suggestion.priority === 'critical' ? 'text-red-600' :\n                              suggestion.priority === 'high' ? 'text-orange-600' :\n                              'text-blue-600'\n                            }`} />\n                            <div className=\"flex-1\">\n                              <p className=\"font-medium text-gray-900\">{suggestion.title}</p>\n                              <p className=\"text-sm text-gray-600 mt-1\">{suggestion.action}</p>\n                            </div>\n                            <ChevronRight className=\"h-4 w-4 text-gray-400\" />\n                          </div>\n                        </motion.div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </motion.div>\n            )}\n\n            {/* Patterns Tab */}\n            {activeView === 'patterns' && (\n              <motion.div\n                key=\"patterns\"\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: -20 }}\n                className=\"space-y-6\"\n              >\n                {/* Trigger Patterns */}\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Identified Trigger Patterns</h3>\n                  <div className=\"grid gap-4\">\n                    {triggers.map((trigger) => (\n                      <div key={trigger.id} className=\"bg-gray-50 rounded-lg p-4\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2 mb-2\">\n                              <h4 className=\"font-medium text-gray-900\">{trigger.name}</h4>\n                              <span className={`px-2 py-1 text-xs rounded ${\n                                trigger.impact === 'high' ? 'bg-red-100 text-red-700' :\n                                trigger.impact === 'medium' ? 'bg-yellow-100 text-yellow-700' :\n                                'bg-green-100 text-green-700'\n                              }`}>\n                                {trigger.impact} impact\n                              </span>\n                              <span className=\"flex items-center text-xs text-gray-600\">\n                                {trigger.trend === 'increasing' ? (\n                                  <><TrendingUp className=\"h-3 w-3 text-red-500 mr-1\" /> Increasing</>\n                                ) : trigger.trend === 'decreasing' ? (\n                                  <><TrendingDown className=\"h-3 w-3 text-green-500 mr-1\" /> Decreasing</>\n                                ) : (\n                                  <>Stable</>\n                                )}\n                              </span>\n                            </div>\n                            <p className=\"text-sm text-gray-600 mb-2\">{trigger.description}</p>\n                            <div className=\"flex items-center space-x-4 text-sm\">\n                              <span className=\"text-gray-500\">\n                                Frequency: {trigger.frequency} times/month\n                              </span>\n                              <span className=\"text-gray-500\">\n                                Last: {new Date(trigger.lastOccurrence).toLocaleDateString()}\n                              </span>\n                            </div>\n                            \n                            {/* Prevention Strategies */}\n                            <div className=\"mt-3 pt-3 border-t border-gray-200\">\n                              <p className=\"text-xs font-medium text-gray-700 mb-2\">Prevention Strategies:</p>\n                              <div className=\"flex flex-wrap gap-2\">\n                                {trigger.preventionStrategies.map((strategy, idx) => (\n                                  <span key={idx} className=\"px-2 py-1 text-xs bg-white rounded border border-gray-200\">\n                                    {strategy}\n                                  </span>\n                                ))}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Pattern Analysis */}\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Risk Pattern Analysis</h3>\n                  \n                  {/* Time of Day Patterns */}\n                  <div className=\"mb-6\">\n                    <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Risk by Time of Day</h4>\n                    <div className=\"grid grid-cols-4 gap-2\">\n                      {Object.entries(patternData.timeOfDay).map(([time, risk]) => (\n                        <div key={time} className=\"text-center\">\n                          <div className=\"relative h-20 bg-gray-100 rounded\">\n                            <div \n                              className={`absolute bottom-0 left-0 right-0 rounded transition-all ${\n                                risk > 60 ? 'bg-red-400' : risk > 30 ? 'bg-yellow-400' : 'bg-green-400'\n                              }`}\n                              style={{ height: `${risk}%` }}\n                            />\n                          </div>\n                          <p className=\"text-xs text-gray-600 mt-1 capitalize\">{time}</p>\n                          <p className=\"text-xs font-medium\">{risk}%</p>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Day of Week Patterns */}\n                  <div className=\"mb-6\">\n                    <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Risk by Day of Week</h4>\n                    <div className=\"space-y-2\">\n                      {Object.entries(patternData.dayOfWeek).map(([day, risk]) => (\n                        <div key={day} className=\"flex items-center space-x-3\">\n                          <span className=\"text-sm text-gray-600 w-20\">{day.slice(0, 3)}</span>\n                          <div className=\"flex-1 bg-gray-200 rounded-full h-4 relative\">\n                            <div \n                              className={`absolute left-0 top-0 h-4 rounded-full ${\n                                risk > 60 ? 'bg-red-400' : risk > 30 ? 'bg-yellow-400' : 'bg-green-400'\n                              }`}\n                              style={{ width: `${risk}%` }}\n                            />\n                          </div>\n                          <span className=\"text-sm font-medium text-gray-700 w-12 text-right\">{risk}%</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Environmental Correlations */}\n                  <div>\n                    <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Environmental Factors</h4>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <p className=\"text-xs text-gray-600 mb-2\">Weather Impact</p>\n                        <div className=\"space-y-2\">\n                          {Object.entries(patternData.weatherCorrelation).map(([weather, risk]) => (\n                            <div key={weather} className=\"flex items-center justify-between\">\n                              <span className=\"text-sm capitalize\">{weather}</span>\n                              <span className={`text-sm font-medium ${\n                                risk > 60 ? 'text-red-600' : risk > 30 ? 'text-yellow-600' : 'text-green-600'\n                              }`}>{risk}%</span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                      <div>\n                        <p className=\"text-xs text-gray-600 mb-2\">Social Context</p>\n                        <div className=\"space-y-2\">\n                          {Object.entries(patternData.socialContext).map(([context, risk]) => (\n                            <div key={context} className=\"flex items-center justify-between\">\n                              <span className=\"text-sm capitalize\">{context}</span>\n                              <span className={`text-sm font-medium ${\n                                risk > 60 ? 'text-red-600' : risk > 30 ? 'text-yellow-600' : 'text-green-600'\n                              }`}>{risk}%</span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n\n            {/* Timeline Tab */}\n            {activeView === 'timeline' && (\n              <motion.div\n                key=\"timeline\"\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: -20 }}\n                className=\"space-y-6\"\n              >\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-lg font-semibold text-gray-900\">Crisis Timeline</h3>\n                  <select\n                    value={selectedTimeRange}\n                    onChange={(e) => setSelectedTimeRange(e.target.value as unknown)}\n                    className=\"px-3 py-1 border border-gray-300 rounded-lg text-sm\"\n                  >\n                    <option value=\"week\">Past Week</option>\n                    <option value=\"month\">Past Month</option>\n                    <option value=\"quarter\">Past Quarter</option>\n                    <option value=\"year\">Past Year</option>\n                  </select>\n                </div>\n\n                {/* Timeline visualization would go here */}\n                <div className=\"relative\">\n                  <div className=\"absolute left-4 top-0 bottom-0 w-0.5 bg-gray-300\"></div>\n                  <div className=\"space-y-6\">\n                    {[\n                      {\n                        date: new Date(),\n                        type: 'intervention',\n                        title: 'Early intervention successful',\n                        description: 'Recognized warning signs and used coping strategies',\n                        severity: 'low'\n                      },\n                      {\n                        date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),\n                        type: 'warning',\n                        title: 'Multiple warning signs detected',\n                        description: 'Sleep disruption and social withdrawal observed',\n                        severity: 'medium'\n                      },\n                      {\n                        date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n                        type: 'trigger',\n                        title: 'Work stress trigger identified',\n                        description: 'Project deadline causing increased anxiety',\n                        severity: 'medium'\n                      },\n                      {\n                        date: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000),\n                        type: 'resolution',\n                        title: 'Crisis resolved',\n                        description: 'Successfully managed crisis with support system',\n                        severity: 'low'\n                      }\n                    ].map((event, idx) => (\n                      <div key={idx} className=\"relative flex items-start ml-10\">\n                        <div className={`absolute -left-7 w-4 h-4 rounded-full border-2 ${\n                          event.type === 'trigger' ? 'bg-yellow-500 border-yellow-300' :\n                          event.type === 'warning' ? 'bg-orange-500 border-orange-300' :\n                          event.type === 'intervention' ? 'bg-blue-500 border-blue-300' :\n                          'bg-green-500 border-green-300'\n                        }`}></div>\n                        <div className=\"flex-1 bg-white border border-gray-200 rounded-lg p-4\">\n                          <div className=\"flex items-start justify-between\">\n                            <div>\n                              <p className=\"font-medium text-gray-900\">{event.title}</p>\n                              <p className=\"text-sm text-gray-600 mt-1\">{event.description}</p>\n                            </div>\n                            <span className={`px-2 py-1 text-xs rounded ${\n                              event.severity === 'high' ? 'bg-red-100 text-red-700' :\n                              event.severity === 'medium' ? 'bg-yellow-100 text-yellow-700' :\n                              'bg-green-100 text-green-700'\n                            }`}>\n                              {event.type}\n                            </span>\n                          </div>\n                          <p className=\"text-xs text-gray-500 mt-2\">\n                            {event.date.toLocaleDateString()} at {event.date.toLocaleTimeString()}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </motion.div>\n            )}\n\n            {/* Prevention Tab */}\n            {activeView === 'prevention' && (\n              <motion.div\n                key=\"prevention\"\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: -20 }}\n                className=\"space-y-6\"\n              >\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Prevention Toolkit</h3>\n                  \n                  {/* Prevention Actions */}\n                  <div className=\"grid gap-4\">\n                    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                      <div className=\"flex items-start space-x-3\">\n                        <Brain className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-gray-900\">Cognitive Strategies</h4>\n                          <p className=\"text-sm text-gray-600 mt-1\">\n                            Challenge negative thoughts, practice mindfulness, use grounding techniques\n                          </p>\n                          <button className=\"mt-2 text-sm text-blue-600 hover:text-blue-700 font-medium\">\n                            Learn techniques →\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                      <div className=\"flex items-start space-x-3\">\n                        <Heart className=\"h-5 w-5 text-green-600 mt-0.5\" />\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-gray-900\">Self-Care Activities</h4>\n                          <p className=\"text-sm text-gray-600 mt-1\">\n                            Regular exercise, healthy sleep schedule, balanced nutrition, relaxation\n                          </p>\n                          <button className=\"mt-2 text-sm text-green-600 hover:text-green-700 font-medium\">\n                            View activities →\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-4\">\n                      <div className=\"flex items-start space-x-3\">\n                        <Users className=\"h-5 w-5 text-purple-600 mt-0.5\" />\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-gray-900\">Social Support</h4>\n                          <p className=\"text-sm text-gray-600 mt-1\">\n                            Connect with support network, join groups, schedule regular check-ins\n                          </p>\n                          <button className=\"mt-2 text-sm text-purple-600 hover:text-purple-700 font-medium\">\n                            Build network →\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-4\">\n                      <div className=\"flex items-start space-x-3\">\n                        <Shield className=\"h-5 w-5 text-orange-600 mt-0.5\" />\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-gray-900\">Professional Support</h4>\n                          <p className=\"text-sm text-gray-600 mt-1\">\n                            Regular therapy sessions, medication management, crisis planning\n                          </p>\n                          <button className=\"mt-2 text-sm text-orange-600 hover:text-orange-700 font-medium\">\n                            Find providers →\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Prevention Success Metrics */}\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Your Prevention Success</h3>\n                  <div className=\"bg-gradient-to-r from-green-50 to-blue-50 rounded-lg p-6\">\n                    <div className=\"grid grid-cols-2 gap-6\">\n                      <div>\n                        <p className=\"text-sm text-gray-600 mb-1\">Risk Reduction</p>\n                        <div className=\"flex items-baseline space-x-2\">\n                          <span className=\"text-3xl font-bold text-green-600\">\n                            {preventionMetrics.riskReduction}%\n                          </span>\n                          <TrendingDown className=\"h-5 w-5 text-green-500\" />\n                        </div>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-600 mb-1\">Success Rate</p>\n                        <div className=\"flex items-baseline space-x-2\">\n                          <span className=\"text-3xl font-bold text-blue-600\">\n                            {preventionMetrics.successRate}%\n                          </span>\n                          <CheckCircle className=\"h-5 w-5 text-blue-500\" />\n                        </div>\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-gray-700 mt-4\">\n                      You've successfully prevented {preventionMetrics.preventedCrises} potential crises \n                      through early intervention and proactive self-care. Keep up the great work!\n                    </p>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\CrisisSupportNetwork.tsx","messages":[{"ruleId":"no-redeclare","severity":2,"message":"'logger' is already defined.","line":11,"column":10,"nodeType":"Identifier","messageId":"redeclared","endLine":11,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showAddContact' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":69,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedContact' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":70,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSupportGroups' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":130,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":130,"endColumn":41}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\nimport { logger } from '../utils/logger';\nimport { \n  Users, Phone, MessageCircle, Video, CheckCircle, \n  Clock, MapPin, Star, _AlertCircle, Plus, Edit2,\n  _UserPlus, Shield, Heart, Globe, Wifi, WifiOff,\n  Calendar, Bell, _ChevronRight, Circle, Settings\n} from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useAuth } from '../../../hooks/useAuth';\nimport { logger, LogCategory } from '../../../services/logging/logger';\n\ninterface SupportContact {\n  id: string;\n  name: string;\n  relationship: 'family' | 'friend' | 'therapist' | 'counselor' | 'doctor' | 'peer' | 'sponsor';\n  phone: string;\n  email?: string;\n  preferredContact: 'call' | 'text' | 'video' | 'any';\n  availability: {\n    status: 'available' | 'busy' | 'offline' | 'emergency-only';\n    lastSeen?: Date;\n    timezone?: string;\n    schedule?: {\n      day: string;\n      start: string;\n      end: string;\n    }[];\n  };\n  trustLevel: 1 | 2 | 3 | 4 | 5;\n  specializations?: string[];\n  notes?: string;\n  lastContact?: Date;\n  contactFrequency?: 'daily' | 'weekly' | 'monthly' | 'as-needed';\n  isProfessional: boolean;\n  isEmergencyContact: boolean;\n}\n\ninterface SupportGroup {\n  id: string;\n  name: string;\n  type: 'peer' | 'therapy' | 'recovery' | 'crisis' | 'community';\n  memberCount: number;\n  isActive: boolean;\n  nextMeeting?: Date;\n  meetingFrequency: string;\n  isOnline: boolean;\n  location?: string;\n  moderators: string[];\n  description: string;\n  joinUrl?: string;\n}\n\ninterface CrisisBuddy {\n  id: string;\n  buddyId: string;\n  name: string;\n  status: 'paired' | 'available' | 'busy';\n  lastCheckIn: Date;\n  sharedSafetyPlan: boolean;\n  mutualSupport: boolean;\n  timezone: string;\n}\n\nexport function CrisisSupportNetwork() {\n  const { _user } = useAuth();\n  const [activeTab, setActiveTab] = useState<'contacts' | 'groups' | 'buddy' | 'professional'>('contacts');\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [showAddContact, setShowAddContact] = useState(false);\n  const [selectedContact, setSelectedContact] = useState<SupportContact | null>(null);\n  \n  // Support contacts state\n  const [supportContacts, setSupportContacts] = useState<SupportContact[]>([\n    {\n      id: '1',\n      name: 'Dr. Sarah Johnson',\n      relationship: 'therapist',\n      phone: '555-0100',\n      email: 'sarah.johnson@therapy.com',\n      preferredContact: 'call',\n      availability: {\n        status: 'available',\n        timezone: 'EST',\n        schedule: [\n          { day: 'Monday', start: '9:00', end: '17:00' },\n          { day: 'Wednesday', start: '9:00', end: '17:00' },\n          { day: 'Friday', start: '9:00', end: '14:00' }\n        ]\n      },\n      trustLevel: 5,\n      specializations: ['Anxiety', 'Depression', 'Trauma'],\n      isProfessional: true,\n      isEmergencyContact: true,\n      lastContact: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000)\n    },\n    {\n      id: '2',\n      name: 'Mom',\n      relationship: 'family',\n      phone: '555-0101',\n      preferredContact: 'any',\n      availability: {\n        status: 'available',\n        lastSeen: new Date()\n      },\n      trustLevel: 5,\n      isProfessional: false,\n      isEmergencyContact: true,\n      contactFrequency: 'weekly'\n    },\n    {\n      id: '3',\n      name: 'Alex Chen',\n      relationship: 'friend',\n      phone: '555-0102',\n      email: 'alex@email.com',\n      preferredContact: 'text',\n      availability: {\n        status: 'busy',\n        lastSeen: new Date(Date.now() - 2 * 60 * 60 * 1000)\n      },\n      trustLevel: 4,\n      isProfessional: false,\n      isEmergencyContact: false,\n      notes: 'Great listener, understands anxiety'\n    }\n  ]);\n\n  // Support groups state\n  const [supportGroups, setSupportGroups] = useState<SupportGroup[]>([\n    {\n      id: '1',\n      name: 'Anxiety Support Circle',\n      type: 'peer',\n      memberCount: 24,\n      isActive: true,\n      nextMeeting: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000),\n      meetingFrequency: 'Weekly on Thursdays',\n      isOnline: true,\n      moderators: ['Jane Doe', 'John Smith'],\n      description: 'A safe space for sharing experiences with anxiety',\n      joinUrl: 'https://meet.example.com/anxiety-support'\n    },\n    {\n      id: '2',\n      name: 'Mindfulness & Recovery',\n      type: 'recovery',\n      memberCount: 18,\n      isActive: true,\n      nextMeeting: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n      meetingFrequency: 'Twice weekly',\n      isOnline: false,\n      location: 'Community Center, Room 204',\n      moderators: ['Dr. Williams'],\n      description: 'Combining mindfulness practices with recovery support'\n    }\n  ]);\n\n  // Crisis buddy state\n  const [crisisBuddy, setCrisisBuddy] = useState<CrisisBuddy | null>({\n    id: '1',\n    buddyId: 'buddy123',\n    name: 'Jordan Taylor',\n    status: 'paired',\n    lastCheckIn: new Date(Date.now() - 6 * 60 * 60 * 1000),\n    sharedSafetyPlan: true,\n    mutualSupport: true,\n    timezone: 'EST'\n  });\n\n  // Monitor online status\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n    \n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    \n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  // Get available contacts count\n  const availableContactsCount = supportContacts.filter(\n    c => c.availability.status === 'available'\n  ).length;\n\n  // Get emergency contacts\n  const emergencyContacts = supportContacts.filter(c => c.isEmergencyContact);\n  const professionalContacts = supportContacts.filter(c => c.isProfessional);\n\n  // Contact action handlers\n  const handleContactAction = useCallback((contact: SupportContact, action: 'call' | 'text' | 'video') => {\n    logger.info('Support network contact initiated', {\n      category: LogCategory.CRISIS,\n      contactId: contact.id,\n      action,\n      relationship: contact.relationship\n    });\n\n    // Update last contact time\n    setSupportContacts(prev => prev.map(c => \n      c.id === contact.id ? { ...c, lastContact: new Date() } : c\n    ));\n\n    // Perform action based on type\n    switch (_action) {\n      case 'call':\n        window.location.href = `tel:${contact.phone}`;\n        break;\n      case 'text':\n        window.location.href = `sms:${contact.phone}`;\n        break;\n      case 'video':\n        // Would integrate with video call service\n        logger.info('Starting video call with', contact.name);\n        break;\n    }\n  }, []);\n\n  // Check-in with crisis buddy\n  const handleBuddyCheckIn = useCallback(() => {\n    if (_crisisBuddy) {\n      setCrisisBuddy(prev => prev ? { ...prev, lastCheckIn: new Date() } : null);\n      logger.info('Crisis buddy check-in completed', {\n        category: LogCategory.CRISIS,\n        buddyId: crisisBuddy.buddyId\n      });\n    }\n  }, [crisisBuddy]);\n\n  // Join support group\n  const handleJoinGroup = useCallback((group: SupportGroup) => {\n    if (group.isOnline && group.joinUrl) {\n      window.open(group.joinUrl, '_blank');\n    } else {\n      // Show group details/location\n      logger.info('Group details:', group);\n    }\n  }, []);\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Network Overview */}\n      <div className=\"bg-gradient-to-r from-purple-50 to-blue-50 rounded-xl p-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900\">Your Support Network</h3>\n            <p className=\"text-sm text-gray-600\">\n              {availableContactsCount} contacts available now\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            {isOnline ? (\n              <div className=\"flex items-center text-green-600\">\n                <Wifi className=\"h-4 w-4 mr-1\" />\n                <span className=\"text-xs\">Online</span>\n              </div>\n            ) : (\n              <div className=\"flex items-center text-orange-600\">\n                <WifiOff className=\"h-4 w-4 mr-1\" />\n                <span className=\"text-xs\">Offline</span>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-4 gap-2\">\n          <div className=\"bg-white bg-opacity-70 rounded-lg p-2 text-center\">\n            <Users className=\"h-5 w-5 text-purple-600 mx-auto mb-1\" />\n            <p className=\"text-lg font-bold\">{supportContacts.length}</p>\n            <p className=\"text-xs text-gray-600\">Contacts</p>\n          </div>\n          <div className=\"bg-white bg-opacity-70 rounded-lg p-2 text-center\">\n            <Shield className=\"h-5 w-5 text-red-600 mx-auto mb-1\" />\n            <p className=\"text-lg font-bold\">{emergencyContacts.length}</p>\n            <p className=\"text-xs text-gray-600\">Emergency</p>\n          </div>\n          <div className=\"bg-white bg-opacity-70 rounded-lg p-2 text-center\">\n            <Globe className=\"h-5 w-5 text-blue-600 mx-auto mb-1\" />\n            <p className=\"text-lg font-bold\">{supportGroups.length}</p>\n            <p className=\"text-xs text-gray-600\">Groups</p>\n          </div>\n          <div className=\"bg-white bg-opacity-70 rounded-lg p-2 text-center\">\n            <Heart className=\"h-5 w-5 text-pink-600 mx-auto mb-1\" />\n            <p className=\"text-lg font-bold\">{crisisBuddy ? 1 : 0}</p>\n            <p className=\"text-xs text-gray-600\">Buddy</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Tabs */}\n      <div className=\"bg-white rounded-xl shadow-sm\">\n        <div className=\"border-b border-gray-200\">\n          <nav className=\"flex -mb-px\">\n            {[\n              { id: 'contacts', label: 'Contacts', icon: Users, count: supportContacts.length },\n              { id: 'groups', label: 'Groups', icon: Globe, count: supportGroups.length },\n              { id: 'buddy', label: 'Crisis Buddy', icon: Heart, count: crisisBuddy ? 1 : 0 },\n              { id: 'professional', label: 'Professional', icon: Shield, count: professionalContacts.length }\n            ].map((tab) => (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id as unknown)}\n                className={`flex-1 py-3 px-2 flex items-center justify-center space-x-1 font-medium text-sm transition-colors relative ${\n                  activeTab === tab.id\n                    ? 'border-b-2 border-primary-500 text-primary-700 bg-primary-50'\n                    : 'text-gray-500 hover:text-gray-700 hover:bg-gray-50'\n                }`}\n              >\n                <tab.icon className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">{tab.label}</span>\n                {tab.count > 0 && (\n                  <span className=\"ml-1 px-1.5 py-0.5 text-xs rounded-full bg-gray-200 text-gray-600\">\n                    {tab.count}\n                  </span>\n                )}\n              </button>\n            ))}\n          </nav>\n        </div>\n\n        <div className=\"p-4\">\n          <AnimatePresence mode=\"wait\">\n            {/* Contacts Tab */}\n            {activeTab === 'contacts' && (\n              <motion.div\n                key=\"contacts\"\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                className=\"space-y-3\"\n              >\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h4 className=\"text-sm font-semibold text-gray-700 uppercase tracking-wider\">\n                    Personal Contacts\n                  </h4>\n                  <button\n                    onClick={() => setShowAddContact(true)}\n                    className=\"flex items-center space-x-1 text-sm text-primary-600 hover:text-primary-700\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                    <span>Add Contact</span>\n                  </button>\n                </div>\n\n                <div className=\"space-y-2\">\n                  {supportContacts.map((contact) => (\n                    <motion.div\n                      key={contact.id}\n                      whileHover={{ scale: 1.02 }}\n                      className=\"bg-gray-50 rounded-lg p-3 hover:bg-gray-100 transition-colors\"\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-start space-x-3\">\n                          {/* Availability Indicator */}\n                          <div className=\"relative\">\n                            <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                              contact.availability.status === 'available' ? 'bg-green-100' :\n                              contact.availability.status === 'busy' ? 'bg-yellow-100' :\n                              contact.availability.status === 'emergency-only' ? 'bg-orange-100' :\n                              'bg-gray-100'\n                            }`}>\n                              <Users className={`h-5 w-5 ${\n                                contact.availability.status === 'available' ? 'text-green-600' :\n                                contact.availability.status === 'busy' ? 'text-yellow-600' :\n                                contact.availability.status === 'emergency-only' ? 'text-orange-600' :\n                                'text-gray-400'\n                              }`} />\n                            </div>\n                            <span className={`absolute -bottom-1 -right-1 w-3 h-3 rounded-full border-2 border-white ${\n                              contact.availability.status === 'available' ? 'bg-green-500' :\n                              contact.availability.status === 'busy' ? 'bg-yellow-500' :\n                              contact.availability.status === 'emergency-only' ? 'bg-orange-500' :\n                              'bg-gray-400'\n                            }`}></span>\n                          </div>\n\n                          {/* Contact Info */}\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2\">\n                              <p className=\"font-medium text-gray-900\">{contact.name}</p>\n                              {contact.isEmergencyContact && (\n                                <span className=\"px-1.5 py-0.5 text-xs bg-red-100 text-red-700 rounded\">\n                                  Emergency\n                                </span>\n                              )}\n                              {contact.isProfessional && (\n                                <span className=\"px-1.5 py-0.5 text-xs bg-blue-100 text-blue-700 rounded\">\n                                  Professional\n                                </span>\n                              )}\n                            </div>\n                            <p className=\"text-sm text-gray-600 capitalize\">{contact.relationship}</p>\n                            \n                            {/* Trust Level */}\n                            <div className=\"flex items-center space-x-1 mt-1\">\n                              {[...Array(5)].map((_, i) => (\n                                <Star\n                                  key={i}\n                                  className={`h-3 w-3 ${\n                                    i < contact.trustLevel \n                                      ? 'text-yellow-400 fill-current' \n                                      : 'text-gray-300'\n                                  }`}\n                                />\n                              ))}\n                              <span className=\"text-xs text-gray-500 ml-1\">Trust</span>\n                            </div>\n\n                            {/* Specializations */}\n                            {contact.specializations && contact.specializations.length > 0 && (\n                              <div className=\"flex flex-wrap gap-1 mt-2\">\n                                {contact.specializations.map((spec, idx) => (\n                                  <span key={idx} className=\"px-2 py-0.5 text-xs bg-purple-100 text-purple-700 rounded\">\n                                    {spec}\n                                  </span>\n                                ))}\n                              </div>\n                            )}\n\n                            {/* Last Contact */}\n                            {contact.lastContact && (\n                              <p className=\"text-xs text-gray-500 mt-2\">\n                                Last contact: {new Date(contact.lastContact).toLocaleDateString()}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n\n                        {/* Contact Actions */}\n                        <div className=\"flex items-center space-x-1\">\n                          {(contact.preferredContact === 'call' || contact.preferredContact === 'any') && (\n                            <button\n                              onClick={() => handleContactAction(contact, 'call')}\n                              className=\"p-2 text-gray-600 hover:bg-white rounded-lg transition-colors\"\n                              aria-label={`Call ${contact.name}`}\n                            >\n                              <Phone className=\"h-4 w-4\" />\n                            </button>\n                          )}\n                          {(contact.preferredContact === 'text' || contact.preferredContact === 'any') && (\n                            <button\n                              onClick={() => handleContactAction(contact, 'text')}\n                              className=\"p-2 text-gray-600 hover:bg-white rounded-lg transition-colors\"\n                              aria-label={`Text ${contact.name}`}\n                            >\n                              <MessageCircle className=\"h-4 w-4\" />\n                            </button>\n                          )}\n                          {(contact.preferredContact === 'video' || contact.preferredContact === 'any') && (\n                            <button\n                              onClick={() => handleContactAction(contact, 'video')}\n                              className=\"p-2 text-gray-600 hover:bg-white rounded-lg transition-colors\"\n                              aria-label={`Video call ${contact.name}`}\n                            >\n                              <Video className=\"h-4 w-4\" />\n                            </button>\n                          )}\n                          <button\n                            onClick={() => setSelectedContact(contact)}\n                            className=\"p-2 text-gray-600 hover:bg-white rounded-lg transition-colors\"\n                            aria-label={`Edit ${contact.name}`}\n                          >\n                            <Edit2 className=\"h-4 w-4\" />\n                          </button>\n                        </div>\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n\n                {supportContacts.length === 0 && (\n                  <div className=\"text-center py-8\">\n                    <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-3\" />\n                    <p className=\"text-gray-600 mb-4\">No contacts added yet</p>\n                    <button\n                      onClick={() => setShowAddContact(true)}\n                      className=\"px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700\"\n                    >\n                      Add Your First Contact\n                    </button>\n                  </div>\n                )}\n              </motion.div>\n            )}\n\n            {/* Groups Tab */}\n            {activeTab === 'groups' && (\n              <motion.div\n                key=\"groups\"\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                className=\"space-y-3\"\n              >\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h4 className=\"text-sm font-semibold text-gray-700 uppercase tracking-wider\">\n                    Support Groups\n                  </h4>\n                  <button className=\"flex items-center space-x-1 text-sm text-primary-600 hover:text-primary-700\">\n                    <Plus className=\"h-4 w-4\" />\n                    <span>Find Groups</span>\n                  </button>\n                </div>\n\n                <div className=\"space-y-3\">\n                  {supportGroups.map((group) => (\n                    <div key={group.id} className=\"bg-white border border-gray-200 rounded-lg p-4\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2 mb-1\">\n                            <h4 className=\"font-medium text-gray-900\">{group.name}</h4>\n                            {group.isActive && (\n                              <span className=\"px-2 py-0.5 text-xs bg-green-100 text-green-700 rounded\">\n                                Active\n                              </span>\n                            )}\n                            {group.isOnline ? (\n                              <span className=\"px-2 py-0.5 text-xs bg-blue-100 text-blue-700 rounded\">\n                                Online\n                              </span>\n                            ) : (\n                              <span className=\"px-2 py-0.5 text-xs bg-gray-100 text-gray-700 rounded\">\n                                In-Person\n                              </span>\n                            )}\n                          </div>\n                          \n                          <p className=\"text-sm text-gray-600 mb-2\">{group.description}</p>\n                          \n                          <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                            <span className=\"flex items-center\">\n                              <Users className=\"h-3 w-3 mr-1\" />\n                              {group.memberCount} members\n                            </span>\n                            <span className=\"flex items-center\">\n                              <Calendar className=\"h-3 w-3 mr-1\" />\n                              {group.meetingFrequency}\n                            </span>\n                          </div>\n\n                          {group.nextMeeting && (\n                            <div className=\"mt-2 p-2 bg-yellow-50 rounded-lg\">\n                              <p className=\"text-sm font-medium text-yellow-900\">\n                                Next Meeting: {new Date(group.nextMeeting).toLocaleDateString()} \n                                at {new Date(group.nextMeeting).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                              </p>\n                              {group.location && !group.isOnline && (\n                                <p className=\"text-xs text-yellow-700 mt-1\">\n                                  <MapPin className=\"h-3 w-3 inline mr-1\" />\n                                  {group.location}\n                                </p>\n                              )}\n                            </div>\n                          )}\n\n                          <div className=\"mt-3 flex items-center space-x-2\">\n                            <button\n                              onClick={() => handleJoinGroup(group)}\n                              className=\"px-3 py-1 bg-primary-600 text-white text-sm rounded-lg hover:bg-primary-700\"\n                            >\n                              {group.isOnline ? 'Join Online' : 'View Details'}\n                            </button>\n                            <button className=\"px-3 py-1 border border-gray-300 text-gray-700 text-sm rounded-lg hover:bg-gray-50\">\n                              Set Reminder\n                            </button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {supportGroups.length === 0 && (\n                  <div className=\"text-center py-8\">\n                    <Globe className=\"h-12 w-12 text-gray-400 mx-auto mb-3\" />\n                    <p className=\"text-gray-600 mb-4\">No groups joined yet</p>\n                    <button className=\"px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700\">\n                      Browse Support Groups\n                    </button>\n                  </div>\n                )}\n              </motion.div>\n            )}\n\n            {/* Crisis Buddy Tab */}\n            {activeTab === 'buddy' && (\n              <motion.div\n                key=\"buddy\"\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                className=\"space-y-4\"\n              >\n                <h4 className=\"text-sm font-semibold text-gray-700 uppercase tracking-wider\">\n                  Crisis Buddy System\n                </h4>\n\n                {crisisBuddy ? (\n                  <div className=\"bg-gradient-to-r from-pink-50 to-purple-50 rounded-lg p-4\">\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div>\n                        <h4 className=\"font-medium text-gray-900\">Your Crisis Buddy</h4>\n                        <p className=\"text-2xl font-bold text-purple-700 mt-1\">{crisisBuddy.name}</p>\n                      </div>\n                      <div className={`px-3 py-1 rounded-full text-sm font-medium ${\n                        crisisBuddy.status === 'paired' ? 'bg-green-100 text-green-700' :\n                        crisisBuddy.status === 'busy' ? 'bg-yellow-100 text-yellow-700' :\n                        'bg-gray-100 text-gray-700'\n                      }`}>\n                        {crisisBuddy.status === 'paired' ? 'Active' : crisisBuddy.status}\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                      <div className=\"bg-white bg-opacity-70 rounded-lg p-3\">\n                        <Clock className=\"h-5 w-5 text-purple-600 mb-1\" />\n                        <p className=\"text-sm text-gray-600\">Last Check-in</p>\n                        <p className=\"font-medium\">\n                          {new Date(crisisBuddy.lastCheckIn).toLocaleTimeString([], { \n                            hour: '2-digit', \n                            minute: '2-digit' \n                          })}\n                        </p>\n                      </div>\n                      <div className=\"bg-white bg-opacity-70 rounded-lg p-3\">\n                        <Globe className=\"h-5 w-5 text-purple-600 mb-1\" />\n                        <p className=\"text-sm text-gray-600\">Timezone</p>\n                        <p className=\"font-medium\">{crisisBuddy.timezone}</p>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2 mb-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        {crisisBuddy.sharedSafetyPlan ? (\n                          <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                        ) : (\n                          <Circle className=\"h-4 w-4 text-gray-400\" />\n                        )}\n                        <span className=\"text-sm text-gray-700\">Safety plans shared</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        {crisisBuddy.mutualSupport ? (\n                          <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                        ) : (\n                          <Circle className=\"h-4 w-4 text-gray-400\" />\n                        )}\n                        <span className=\"text-sm text-gray-700\">Mutual support agreement</span>\n                      </div>\n                    </div>\n\n                    <div className=\"flex space-x-2\">\n                      <button\n                        onClick={handleBuddyCheckIn}\n                        className=\"flex-1 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 font-medium\"\n                      >\n                        Check In Now\n                      </button>\n                      <button className=\"flex-1 py-2 border border-purple-600 text-purple-600 rounded-lg hover:bg-purple-50 font-medium\">\n                        Send Message\n                      </button>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Heart className=\"h-12 w-12 text-gray-400 mx-auto mb-3\" />\n                    <p className=\"text-gray-600 mb-4\">No crisis buddy paired yet</p>\n                    <p className=\"text-sm text-gray-500 mb-4\">\n                      A crisis buddy provides mutual support during difficult times\n                    </p>\n                    <button className=\"px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700\">\n                      Find a Crisis Buddy\n                    </button>\n                  </div>\n                )}\n\n                {/* Buddy Benefits */}\n                <div className=\"bg-blue-50 rounded-lg p-4\">\n                  <h5 className=\"font-medium text-blue-900 mb-2\">Benefits of a Crisis Buddy</h5>\n                  <ul className=\"space-y-1 text-sm text-blue-800\">\n                    <li className=\"flex items-start space-x-2\">\n                      <CheckCircle className=\"h-4 w-4 mt-0.5 flex-shrink-0\" />\n                      <span>24/7 peer support from someone who understands</span>\n                    </li>\n                    <li className=\"flex items-start space-x-2\">\n                      <CheckCircle className=\"h-4 w-4 mt-0.5 flex-shrink-0\" />\n                      <span>Regular check-ins to prevent crisis escalation</span>\n                    </li>\n                    <li className=\"flex items-start space-x-2\">\n                      <CheckCircle className=\"h-4 w-4 mt-0.5 flex-shrink-0\" />\n                      <span>Shared safety plans and coping strategies</span>\n                    </li>\n                    <li className=\"flex items-start space-x-2\">\n                      <CheckCircle className=\"h-4 w-4 mt-0.5 flex-shrink-0\" />\n                      <span>Accountability and motivation for wellness goals</span>\n                    </li>\n                  </ul>\n                </div>\n              </motion.div>\n            )}\n\n            {/* Professional Tab */}\n            {activeTab === 'professional' && (\n              <motion.div\n                key=\"professional\"\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                className=\"space-y-3\"\n              >\n                <h4 className=\"text-sm font-semibold text-gray-700 uppercase tracking-wider\">\n                  Professional Support Team\n                </h4>\n\n                <div className=\"space-y-3\">\n                  {professionalContacts.map((contact) => (\n                    <div key={contact.id} className=\"bg-blue-50 rounded-lg p-4\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2 mb-1\">\n                            <Shield className=\"h-5 w-5 text-blue-600\" />\n                            <h4 className=\"font-medium text-gray-900\">{contact.name}</h4>\n                            <span className=\"px-2 py-0.5 text-xs bg-blue-100 text-blue-700 rounded capitalize\">\n                              {contact.relationship}\n                            </span>\n                          </div>\n\n                          {/* Specializations */}\n                          {contact.specializations && contact.specializations.length > 0 && (\n                            <div className=\"flex flex-wrap gap-1 mt-2 mb-3\">\n                              {contact.specializations.map((spec, idx) => (\n                                <span key={idx} className=\"px-2 py-0.5 text-xs bg-white text-gray-700 rounded\">\n                                  {spec}\n                                </span>\n                              ))}\n                            </div>\n                          )}\n\n                          {/* Availability Schedule */}\n                          {contact.availability.schedule && (\n                            <div className=\"mb-3\">\n                              <p className=\"text-sm font-medium text-gray-700 mb-1\">Available Hours:</p>\n                              <div className=\"grid grid-cols-3 gap-1 text-xs\">\n                                {contact.availability.schedule.map((slot, idx) => (\n                                  <div key={idx} className=\"bg-white rounded px-2 py-1\">\n                                    <span className=\"font-medium\">{slot.day.slice(0, 3)}:</span> {slot.start}-{slot.end}\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n\n                          {/* Contact Information */}\n                          <div className=\"flex items-center space-x-4 text-sm\">\n                            <a \n                              href={`tel:${contact.phone}`}\n                              className=\"flex items-center space-x-1 text-blue-600 hover:text-blue-700\"\n                            >\n                              <Phone className=\"h-4 w-4\" />\n                              <span>{contact.phone}</span>\n                            </a>\n                            {contact.email && (\n                              <a \n                                href={`mailto:${contact.email}`}\n                                className=\"flex items-center space-x-1 text-blue-600 hover:text-blue-700\"\n                              >\n                                <MessageCircle className=\"h-4 w-4\" />\n                                <span>Email</span>\n                              </a>\n                            )}\n                          </div>\n\n                          {/* Last Contact */}\n                          {contact.lastContact && (\n                            <p className=\"text-xs text-gray-600 mt-2\">\n                              Last appointment: {new Date(contact.lastContact).toLocaleDateString()}\n                            </p>\n                          )}\n                        </div>\n\n                        <div className=\"flex flex-col space-y-1\">\n                          <button className=\"p-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\">\n                            <Calendar className=\"h-4 w-4\" />\n                          </button>\n                          <button\n                            onClick={() => handleContactAction(contact, 'call')}\n                            className=\"p-2 bg-white text-blue-600 rounded-lg hover:bg-blue-100\"\n                          >\n                            <Phone className=\"h-4 w-4\" />\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {professionalContacts.length === 0 && (\n                  <div className=\"text-center py-8\">\n                    <Shield className=\"h-12 w-12 text-gray-400 mx-auto mb-3\" />\n                    <p className=\"text-gray-600 mb-4\">No professional contacts added</p>\n                    <button className=\"px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700\">\n                      Add Professional Contact\n                    </button>\n                  </div>\n                )}\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </div>\n\n      {/* Quick Support Actions */}\n      <div className=\"bg-gradient-to-r from-green-50 to-blue-50 rounded-lg p-4\">\n        <p className=\"text-sm font-medium text-gray-700 mb-3\">Quick Support Actions</p>\n        <div className=\"grid grid-cols-3 gap-2\">\n          <button className=\"py-2 px-3 bg-white text-gray-700 rounded-lg hover:bg-gray-50 text-sm font-medium\">\n            <Bell className=\"h-4 w-4 mx-auto mb-1\" />\n            Alert Network\n          </button>\n          <button className=\"py-2 px-3 bg-white text-gray-700 rounded-lg hover:bg-gray-50 text-sm font-medium\">\n            <MessageCircle className=\"h-4 w-4 mx-auto mb-1\" />\n            Group Message\n          </button>\n          <button className=\"py-2 px-3 bg-white text-gray-700 rounded-lg hover:bg-gray-50 text-sm font-medium\">\n            <Settings className=\"h-4 w-4 mx-auto mb-1\" />\n            Settings\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\DailyActivityPlanner.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedDate' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":81,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showAddActivity' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":84,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setShowAddActivity' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":84,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'editingActivity' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":85,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":85,"endColumn":25},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'initializeTimeSlots'. Either include it or remove the dependency array.","line":106,"column":6,"nodeType":"ArrayExpression","endLine":106,"endColumn":56,"suggestions":[{"desc":"Update the dependencies array to be: [selectedDate, moodEntries, generateDailySchedule, initializeTimeSlots]","fix":{"range":[3110,3160],"text":"[selectedDate, moodEntries, generateDailySchedule, initializeTimeSlots]"}}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Calendar,\n  Clock,\n  Battery,\n  Brain,\n  Heart,\n  _AlertCircle,\n  CheckCircle,\n  _XCircle,\n  _ChevronRight,\n  Plus,\n  Edit2,\n  Trash2,\n  _RefreshCw,\n  Zap,\n  Cloud,\n  Sun,\n  Moon,\n  Coffee,\n  Target,\n  TrendingUp,\n  Sparkles\n} from 'lucide-react';\nimport { format, _addMinutes, isSameDay, _isToday, _isTomorrow } from 'date-fns';\nimport { useActivityStore } from '../../../stores/activityStore';\nimport { useWellnessStore } from '../../../stores/wellnessStore';\n\ninterface TimeSlot {\n  time: string;\n  activity?: {\n    id: string;\n    title: string;\n    category: string;\n    duration: number;\n    energyLevel: 'low' | 'medium' | 'high';\n    flexibility: 'fixed' | 'flexible' | 'optional';\n    moodImpact?: number;\n  };\n}\n\nconst ENERGY_ICONS = {\n  low: Battery,\n  medium: Zap,\n  high: Sparkles\n};\n\nconst ENERGY_COLORS = {\n  low: 'text-blue-500',\n  medium: 'text-yellow-500',\n  high: 'text-red-500'\n};\n\nconst CATEGORY_COLORS = {\n  therapy: 'bg-purple-100 dark:bg-purple-900/20 text-purple-700 dark:text-purple-300',\n  wellness: 'bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-300',\n  social: 'bg-blue-100 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300',\n  professional: 'bg-orange-100 dark:bg-orange-900/20 text-orange-700 dark:text-orange-300',\n  personal: 'bg-pink-100 dark:bg-pink-900/20 text-pink-700 dark:text-pink-300',\n  'self-care': 'bg-indigo-100 dark:bg-indigo-900/20 text-indigo-700 dark:text-indigo-300'\n};\n\nexport const DailyActivityPlanner: React.FC = () => {\n  const {\n    activities,\n    _dailySchedule,\n    addActivity,\n    _updateActivity,\n    deleteActivity,\n    completeActivity,\n    rescheduleActivity,\n    getActivityRecommendations,\n    suggestReschedule,\n    adaptScheduleForBadDay,\n    generateDailySchedule\n  } = useActivityStore();\n  \n  const { moodEntries } = useWellnessStore();\n  \n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [currentEnergyLevel, setCurrentEnergyLevel] = useState<'low' | 'medium' | 'high'>('medium');\n  const [currentMood, setCurrentMood] = useState(5);\n  const [showAddActivity, setShowAddActivity] = useState(false);\n  const [editingActivity, setEditingActivity] = useState<string | null>(null);\n  const [showRecommendations, setShowRecommendations] = useState(false);\n  const [adaptiveMode, setAdaptiveMode] = useState(false);\n  const [timeSlots, setTimeSlots] = useState<TimeSlot[]>([]);\n  \n  // Initialize time slots and load schedule\n  useEffect(() => {\n    generateDailySchedule(_selectedDate);\n    initializeTimeSlots();\n    \n    // Get current mood from recent entries\n    const todayMood = moodEntries.find(entry => \n      isSameDay(new Date(entry.timestamp), new Date())\n    );\n    if (todayMood) {\n      setCurrentMood(todayMood.moodScore);\n      // Determine energy level based on mood\n      if (todayMood.moodScore <= 3) setCurrentEnergyLevel('low');\n      else if (todayMood.moodScore <= 7) setCurrentEnergyLevel('medium');\n      else setCurrentEnergyLevel('high');\n    }\n  }, [selectedDate, moodEntries, generateDailySchedule]);\n  \n  // Initialize time slots for the day\n  const initializeTimeSlots = () => {\n    const slots: TimeSlot[] = [];\n    const startHour = 6; // 6 AM\n    const endHour = 22; // 10 PM\n    \n    for (let hour = startHour; hour < endHour; hour++) {\n      for (let minute = 0; minute < 60; minute += 30) {\n        const time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n        slots.push({ time });\n      }\n    }\n    \n    // Map activities to time slots\n    const dayActivities = activities.filter(activity => \n      activity.scheduledTime && isSameDay(new Date(activity.scheduledTime), selectedDate)\n    );\n    \n    dayActivities.forEach(activity => {\n      if (activity.scheduledTime) {\n        const time = format(new Date(activity.scheduledTime), 'HH:mm');\n        const slotIndex = slots.findIndex(slot => slot.time === time);\n        if (slotIndex !== -1 && slots[slotIndex]) {\n          slots[slotIndex]!.activity = {\n            id: activity.id,\n            title: activity.title,\n            category: activity.category,\n            duration: activity.duration || 30,\n            energyLevel: activity.energyLevel || 'medium',\n            flexibility: activity.flexibility || 'flexible',\n            moodImpact: activity.moodImpact\n          };\n        }\n      }\n    });\n    \n    setTimeSlots(_slots);\n  };\n  \n  // Handle bad mental health day adaptation\n  const handleBadDayAdaptation = () => {\n    setAdaptiveMode(true);\n    adaptScheduleForBadDay();\n    \n    // Show supportive message\n    setTimeout(() => {\n      setAdaptiveMode(false);\n    }, 3000);\n  };\n  \n  // Get activity recommendations\n  const recommendations = getActivityRecommendations(currentEnergyLevel, currentMood);\n  const rescheduleingSuggestions = suggestReschedule(_currentEnergyLevel);\n  \n  // Quick add activity\n  const quickAddActivity = (slot: TimeSlot) => {\n    const timeParts = slot.time.split(':').map(_Number);\n    const hours = timeParts[0] ?? 9;\n    const minutes = timeParts[1] ?? 0;\n    const scheduledTime = new Date(_selectedDate);\n    scheduledTime.setHours(hours, minutes, 0, 0);\n    \n    addActivity({\n      title: 'New Activity',\n      category: 'personal',\n      type: 'task',\n      scheduledTime,\n      duration: 30,\n      energyLevel: currentEnergyLevel,\n      completed: false,\n      flexibility: 'flexible'\n    });\n    \n    initializeTimeSlots();\n  };\n  \n  // Complete activity\n  const handleCompleteActivity = (_activityId: string, moodImpact?: number) => {\n    completeActivity(_activityId, moodImpact);\n    initializeTimeSlots();\n  };\n  \n  // Delete activity\n  const handleDeleteActivity = (_activityId: string) => {\n    deleteActivity(_activityId);\n    initializeTimeSlots();\n  };\n  \n  // Reschedule activity\n  const _handleReschedule = (_activityId: string, newTime: string) => {\n    const timeParts = newTime.split(':').map(_Number);\n    const hours = timeParts[0] ?? 9;\n    const minutes = timeParts[1] ?? 0;\n    const newScheduledTime = new Date(_selectedDate);\n    newScheduledTime.setHours(hours, minutes, 0, 0);\n    \n    rescheduleActivity(_activityId, newScheduledTime);\n    initializeTimeSlots();\n  };\n  \n  // Get time period of day\n  const getTimePeriod = (time: string) => {\n    const hourStr = time.split(':')[0];\n    const hour = hourStr ? parseInt(_hourStr) : 9;\n    if (hour < 6) return { name: 'Early Morning', icon: Moon, color: 'from-indigo-500 to-purple-500' };\n    if (hour < 12) return { name: 'Morning', icon: Sun, color: 'from-yellow-400 to-orange-400' };\n    if (hour < 14) return { name: 'Noon', icon: Sun, color: 'from-orange-400 to-red-400' };\n    if (hour < 18) return { name: 'Afternoon', icon: Coffee, color: 'from-blue-400 to-cyan-400' };\n    if (hour < 21) return { name: 'Evening', icon: Cloud, color: 'from-purple-400 to-pink-400' };\n    return { name: 'Night', icon: Moon, color: 'from-indigo-600 to-purple-600' };\n  };\n  \n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h3 className=\"text-xl font-bold text-gray-900 dark:text-white flex items-center gap-2\">\n            <Calendar className=\"w-5 h-5\" />\n            Daily Activity Planner\n          </h3>\n          <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n            Smart scheduling based on your energy and mood\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          {/* Energy Level Selector */}\n          <div className=\"flex items-center gap-1 bg-gray-100 dark:bg-gray-700 rounded-lg p-1\">\n            {(['low', 'medium', 'high'] as const).map(level => {\n              const Icon = ENERGY_ICONS[level];\n              return (\n                <button\n                  key={level}\n                  onClick={() => setCurrentEnergyLevel(_level)}\n                  className={`p-2 rounded transition-all ${\n                    currentEnergyLevel === level\n                      ? 'bg-white dark:bg-gray-600 shadow-sm'\n                      : 'hover:bg-gray-200 dark:hover:bg-gray-600'\n                  }`}\n                  title={`Energy: ${level}`}\n                >\n                  <Icon className={`w-4 h-4 ${ENERGY_COLORS[level]}`} />\n                </button>\n              );\n            })}\n          </div>\n          \n          {/* Bad Day Button */}\n          <motion.button\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={handleBadDayAdaptation}\n            className=\"p-2 bg-red-100 dark:bg-red-900/20 text-red-600 dark:text-red-400 rounded-lg hover:bg-red-200 dark:hover:bg-red-900/30 transition-colors\"\n            title=\"Adapt for difficult day\"\n          >\n            <Heart className=\"w-4 h-4\" />\n          </motion.button>\n          \n          {/* Recommendations Toggle */}\n          <motion.button\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={() => setShowRecommendations(!showRecommendations)}\n            className=\"p-2 bg-blue-100 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400 rounded-lg hover:bg-blue-200 dark:hover:bg-blue-900/30 transition-colors\"\n          >\n            <Brain className=\"w-4 h-4\" />\n          </motion.button>\n        </div>\n      </div>\n      \n      {/* Adaptive Mode Message */}\n      <AnimatePresence>\n        {adaptiveMode && (\n          <motion.div\n            initial={{ opacity: 0, y: -20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            className=\"mb-4 p-4 bg-gradient-to-r from-purple-100 to-pink-100 dark:from-purple-900/20 dark:to-pink-900/20 rounded-lg\"\n          >\n            <div className=\"flex items-center gap-2\">\n              <Heart className=\"w-5 h-5 text-purple-600 dark:text-purple-400\" />\n              <p className=\"text-purple-700 dark:text-purple-300\">\n                Schedule adapted for a difficult day. Optional activities moved to tomorrow. Take care of yourself!\n              </p>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      {/* Recommendations Panel */}\n      <AnimatePresence>\n        {showRecommendations && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            className=\"mb-6 p-4 bg-blue-50 dark:bg-blue-900/10 rounded-lg border border-blue-200 dark:border-blue-800\"\n          >\n            <h4 className=\"font-semibold text-blue-900 dark:text-blue-300 mb-3 flex items-center gap-2\">\n              <Sparkles className=\"w-4 h-4\" />\n              AI Recommendations for Your Current State\n            </h4>\n            \n            {/* Activity Recommendations */}\n            <div className=\"space-y-2 mb-4\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Based on your {currentEnergyLevel} energy and mood score of {currentMood}:\n              </p>\n              {recommendations.slice(0, 3).map((activity, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center justify-between p-2 bg-white dark:bg-gray-800 rounded\"\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Target className=\"w-4 h-4 text-blue-500\" />\n                    <span className=\"text-sm font-medium\">{activity.title}</span>\n                    <span className={`text-xs px-2 py-1 rounded ${CATEGORY_COLORS[activity.category as keyof typeof CATEGORY_COLORS] || 'bg-gray-100 text-gray-700'}`}>\n                      {activity.category}\n                    </span>\n                  </div>\n                  {activity.moodImpact && (\n                    <div className=\"flex items-center gap-1\">\n                      <TrendingUp className=\"w-3 h-3 text-green-500\" />\n                      <span className=\"text-xs text-green-600 dark:text-green-400\">\n                        +{activity.moodImpact} mood\n                      </span>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n            \n            {/* Rescheduling Suggestions */}\n            {rescheduleingSuggestions.length > 0 && (\n              <div className=\"pt-3 border-t border-blue-200 dark:border-blue-800\">\n                <p className=\"text-sm text-orange-600 dark:text-orange-400 mb-2\">\n                  These activities might be challenging with your current energy:\n                </p>\n                {rescheduleingSuggestions.map(activity => (\n                  <div\n                    key={activity.id}\n                    className=\"flex items-center justify-between p-2 bg-orange-50 dark:bg-orange-900/10 rounded mb-1\"\n                  >\n                    <span className=\"text-sm\">{activity.title}</span>\n                    <button\n                      onClick={() => {\n                        const tomorrow = new Date(_selectedDate);\n                        tomorrow.setDate(tomorrow.getDate() + 1);\n                        rescheduleActivity(activity.id, tomorrow);\n                      }}\n                      className=\"text-xs px-2 py-1 bg-orange-200 dark:bg-orange-800 rounded hover:bg-orange-300 dark:hover:bg-orange-700\"\n                    >\n                      Move to tomorrow\n                    </button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      {/* Schedule Grid */}\n      <div className=\"space-y-2 max-h-[600px] overflow-y-auto custom-scrollbar\">\n        {timeSlots.map((slot, index) => {\n          const period = getTimePeriod(slot.time);\n          const showPeriodHeader = index === 0 || getTimePeriod(timeSlots[index - 1]?.time || '09:00').name !== period.name;\n          \n          return (\n            <React.Fragment key={slot.time}>\n              {showPeriodHeader && (\n                <div className={`flex items-center gap-2 px-3 py-2 rounded-lg bg-gradient-to-r ${period.color} text-white`}>\n                  <period.icon className=\"w-4 h-4\" />\n                  <span className=\"font-semibold text-sm\">{period.name}</span>\n                </div>\n              )}\n              \n              <motion.div\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ delay: index * 0.02 }}\n                className={`flex items-center gap-4 p-3 rounded-lg transition-all ${\n                  slot.activity\n                    ? 'bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-700 dark:to-gray-600'\n                    : 'hover:bg-gray-50 dark:hover:bg-gray-700'\n                }`}\n              >\n                {/* Time */}\n                <div className=\"w-16 text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  {slot.time}\n                </div>\n                \n                {/* Activity or Empty Slot */}\n                {slot.activity ? (\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        {/* Completion Status */}\n                        <button\n                          onClick={() => handleCompleteActivity(slot.activity!.id)}\n                          className=\"text-gray-400 hover:text-green-500 transition-colors\"\n                        >\n                          <CheckCircle className=\"w-5 h-5\" />\n                        </button>\n                        \n                        {/* Activity Details */}\n                        <div>\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"font-medium text-gray-900 dark:text-white\">\n                              {slot.activity.title}\n                            </span>\n                            <span className={`text-xs px-2 py-1 rounded ${CATEGORY_COLORS[slot.activity.category as keyof typeof CATEGORY_COLORS] || 'bg-gray-100 text-gray-700'}`}>\n                              {slot.activity.category}\n                            </span>\n                            {slot.activity.flexibility === 'fixed' && (\n                              <span className=\"text-xs px-2 py-1 bg-red-100 dark:bg-red-900/20 text-red-600 dark:text-red-400 rounded\">\n                                Fixed\n                              </span>\n                            )}\n                          </div>\n                          <div className=\"flex items-center gap-3 mt-1\">\n                            <span className=\"text-xs text-gray-500 flex items-center gap-1\">\n                              <Clock className=\"w-3 h-3\" />\n                              {slot.activity.duration} min\n                            </span>\n                            <span className={`text-xs flex items-center gap-1 ${ENERGY_COLORS[slot.activity.energyLevel]}`}>\n                              {(() => {\n                                const Icon = ENERGY_ICONS[slot.activity.energyLevel];\n                                return Icon ? <Icon className=\"w-3 h-3\" /> : null;\n                              })()}\n                              {slot.activity.energyLevel} energy\n                            </span>\n                            {slot.activity.moodImpact && (\n                              <span className=\"text-xs text-green-600 dark:text-green-400 flex items-center gap-1\">\n                                <TrendingUp className=\"w-3 h-3\" />\n                                +{slot.activity.moodImpact} mood\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      {/* Actions */}\n                      <div className=\"flex items-center gap-1\">\n                        <button\n                          onClick={() => setEditingActivity(slot.activity!.id)}\n                          className=\"p-1 text-gray-400 hover:text-blue-500 transition-colors\"\n                        >\n                          <Edit2 className=\"w-4 h-4\" />\n                        </button>\n                        <button\n                          onClick={() => handleDeleteActivity(slot.activity!.id)}\n                          className=\"p-1 text-gray-400 hover:text-red-500 transition-colors\"\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <button\n                    onClick={() => quickAddActivity(_slot)}\n                    className=\"flex-1 flex items-center justify-center gap-2 py-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg hover:border-gray-400 dark:hover:border-gray-500 transition-all\"\n                  >\n                    <Plus className=\"w-4 h-4\" />\n                    <span className=\"text-sm\">Add activity</span>\n                  </button>\n                )}\n              </motion.div>\n            </React.Fragment>\n          );\n        })}\n      </div>\n      \n      {/* Footer Stats */}\n      <div className=\"mt-6 pt-4 border-t border-gray-200 dark:border-gray-700\">\n        <div className=\"grid grid-cols-3 gap-4\">\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n              {activities.filter(a => a.scheduledTime && isSameDay(new Date(a.scheduledTime), selectedDate)).length}\n            </p>\n            <p className=\"text-xs text-gray-600 dark:text-gray-400\">Activities</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n              {activities.filter(a => a.completed && a.scheduledTime && isSameDay(new Date(a.scheduledTime), selectedDate)).length}\n            </p>\n            <p className=\"text-xs text-gray-600 dark:text-gray-400\">Completed</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\n              {Math.round(\n                activities\n                  .filter(a => a.scheduledTime && isSameDay(new Date(a.scheduledTime), selectedDate))\n                  .reduce((sum, a) => sum + (a.duration || 0), 0) / 60\n              )}h\n            </p>\n            <p className=\"text-xs text-gray-600 dark:text-gray-400\">Scheduled</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\EnhancedCrisisPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showFullPlan' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":111,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":111,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setShowFullPlan' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":111,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":111,"endColumn":39},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":679,"column":43,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[28337,28465],"text":" You are stronger than you know. \n          Help is always available, and it&apos;s okay to reach out when you need support.\n        "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[28337,28465],"text":" You are stronger than you know. \n          Help is always available, and it&lsquo;s okay to reach out when you need support.\n        "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[28337,28465],"text":" You are stronger than you know. \n          Help is always available, and it&#39;s okay to reach out when you need support.\n        "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[28337,28465],"text":" You are stronger than you know. \n          Help is always available, and it&rsquo;s okay to reach out when you need support.\n        "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useMemo } from 'react';\nimport { \n  Phone, MessageCircle, AlertTriangle, Heart, Shield, MapPin, \n  Activity, Users, _Clock, ChevronRight, _Bell, Wifi, WifiOff,\n  Brain, _TrendingUp, _TrendingDown, AlertCircle, CheckCircle,\n  Navigation, Zap, HelpCircle, MessageSquare\n} from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { CrisisPanelData } from '../../../types/dashboard';\nimport { useAuth } from '../../../hooks/useAuth';\nimport { useCrisisAssessment } from '../../../hooks/useCrisisAssessment';\nimport { useGeolocation } from '../../../hooks/useGeolocation';\nimport { logger, _LogCategory } from '../../../services/logging/logger';\n\ninterface EnhancedCrisisPanelProps {\n  data?: CrisisPanelData;\n  onEmergencyCall?: (contact: string, service: string) => void;\n  onOpenSafetyPlan?: () => void;\n  onStartCrisisChat?: () => void;\n  onLocationShare?: (location: GeolocationPosition) => void;\n}\n\n// Real-time risk factors to monitor\ninterface RiskFactors {\n  moodPattern: number; // 0-100 scale\n  behaviorChanges: number;\n  socialWithdrawal: number;\n  sleepDisturbance: number;\n  substanceUse: number;\n  thoughtPatterns: number;\n  physicalSymptoms: number;\n}\n\n// Crisis escalation levels with detailed metadata\ninterface CrisisLevel {\n  level: 'safe' | 'low' | 'moderate' | 'high' | 'critical';\n  score: number;\n  color: string;\n  bgColor: string;\n  borderColor: string;\n  message: string;\n  recommendations: string[];\n  urgency: 'none' | 'low' | 'medium' | 'high' | 'immediate';\n}\n\nconst CRISIS_LEVELS = {\n  safe: {\n    level: 'safe' as const,\n    score: 0,\n    color: 'text-green-700',\n    bgColor: 'bg-green-50',\n    borderColor: 'border-green-400',\n    message: 'You\\'re in a good place',\n    recommendations: ['Continue your wellness routine', 'Keep using coping strategies'],\n    urgency: 'none' as const\n  },\n  low: {\n    level: 'low' as const,\n    score: 25,\n    color: 'text-yellow-700',\n    bgColor: 'bg-yellow-50',\n    borderColor: 'border-yellow-400',\n    message: 'Mild stress detected',\n    recommendations: ['Try breathing exercises', 'Reach out to a friend', 'Take a break'],\n    urgency: 'low' as const\n  },\n  moderate: {\n    level: 'moderate' as const,\n    score: 50,\n    color: 'text-orange-700',\n    bgColor: 'bg-orange-50',\n    borderColor: 'border-orange-400',\n    message: 'Support recommended',\n    recommendations: ['Contact your therapist', 'Use your safety plan', 'Call a support person'],\n    urgency: 'medium' as const\n  },\n  high: {\n    level: 'high' as const,\n    score: 75,\n    color: 'text-red-700',\n    bgColor: 'bg-red-50',\n    borderColor: 'border-red-400',\n    message: 'Immediate support needed',\n    recommendations: ['Call crisis hotline', 'Go to emergency room', 'Contact emergency contact'],\n    urgency: 'high' as const\n  },\n  critical: {\n    level: 'critical' as const,\n    score: 90,\n    color: 'text-red-900',\n    bgColor: 'bg-red-100',\n    borderColor: 'border-red-600',\n    message: 'Emergency - Get help now',\n    recommendations: ['Call 988 immediately', 'Call 911 if in danger', 'Go to nearest ER'],\n    urgency: 'immediate' as const\n  }\n};\n\nexport function EnhancedCrisisPanel({ \n  data, \n  onEmergencyCall, \n  onOpenSafetyPlan,\n  onStartCrisisChat,\n  onLocationShare \n}: EnhancedCrisisPanelProps) {\n  const { _user } = useAuth();\n  const { location, error: _locationError } = useGeolocation();\n  const { assessmentData, _updateAssessment } = useCrisisAssessment();\n  \n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [showFullPlan, setShowFullPlan] = useState(false);\n  const [activeTab, setActiveTab] = useState<'emergency' | 'safety' | 'network' | 'resources'>('emergency');\n  const [riskFactors, setRiskFactors] = useState<RiskFactors>({\n    moodPattern: 0,\n    behaviorChanges: 0,\n    socialWithdrawal: 0,\n    sleepDisturbance: 0,\n    substanceUse: 0,\n    thoughtPatterns: 0,\n    physicalSymptoms: 0\n  });\n  const [crisisLevel, setCrisisLevel] = useState<CrisisLevel>(() => CRISIS_LEVELS.safe);\n  const [pulseAnimation, setPulseAnimation] = useState(false);\n\n  // Calculate real-time risk assessment\n  const calculateRiskLevel = useCallback((): CrisisLevel => {\n    const factors = Object.values(_riskFactors);\n    const avgScore = factors.reduce((sum, val) => sum + val, 0) / factors.length;\n    \n    // Add weight for critical factors\n    const criticalFactorWeight = (\n      riskFactors.thoughtPatterns * 2 + \n      riskFactors.substanceUse * 1.5\n    ) / 3.5;\n    \n    const finalScore = (avgScore * 0.7) + (criticalFactorWeight * 0.3);\n    \n    // Determine crisis level\n    if (finalScore >= 75) return CRISIS_LEVELS.critical;\n    if (finalScore >= 50) return CRISIS_LEVELS.high;\n    if (finalScore >= 35) return CRISIS_LEVELS.moderate;\n    if (finalScore >= 20) return CRISIS_LEVELS.low;\n    return CRISIS_LEVELS.safe;\n  }, [riskFactors]);\n\n  // Monitor online/offline status\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n    \n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    \n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  // Update crisis level when risk factors change\n  useEffect(() => {\n    const newLevel = calculateRiskLevel();\n    setCrisisLevel(newLevel);\n    \n    // Trigger pulse animation for high/critical levels\n    if (newLevel.urgency === 'high' || newLevel.urgency === 'immediate') {\n      setPulseAnimation(true);\n      // Log critical event\n      logger.logCrisisIntervention('risk_level_elevated', undefined, {\n        level: newLevel.level,\n        score: newLevel.score,\n        factors: riskFactors\n      });\n    }\n  }, [riskFactors, calculateRiskLevel]);\n\n  // Simulate real-time risk monitoring (in production, this would come from actual data)\n  useEffect(() => {\n    const _interval = setInterval(() => {\n      // This would be replaced with actual data from mood tracking, behavior patterns, etc.\n      if (assessmentData) {\n        setRiskFactors(prev => ({\n          ...prev,\n          moodPattern: assessmentData.moodScore || prev.moodPattern,\n          thoughtPatterns: assessmentData.thoughtScore || prev.thoughtPatterns\n        }));\n      }\n    }, 30000); // Check every 30 seconds\n    \n    return () => clearInterval(_interval);\n  }, [assessmentData]);\n\n  // Emergency call handler with location sharing\n  const handleEmergencyCallWithLocation = useCallback((contact: string, service: string) => {\n    // Share location if available\n    if (location && onLocationShare) {\n      onLocationShare(_location);\n    }\n    \n    // Log emergency call\n    logger.logCrisisIntervention('emergency_call_with_location', undefined, {\n      service,\n      contact,\n      hasLocation: !!location,\n      timestamp: new Date().toISOString()\n    });\n    \n    // Make the call\n    onEmergencyCall?.(contact, service);\n  }, [location, onLocationShare, onEmergencyCall]);\n\n  // Quick access emergency numbers\n  const emergencyNumbers = useMemo(() => [\n    { \n      id: '988', \n      name: '988 Suicide & Crisis Lifeline', \n      contact: '988', \n      type: 'hotline' as const,\n      icon: Phone,\n      color: 'bg-red-500',\n      description: '24/7 crisis support'\n    },\n    { \n      id: 'text', \n      name: 'Crisis Text Line', \n      contact: 'Text HOME to 741741', \n      type: 'text' as const,\n      icon: MessageCircle,\n      color: 'bg-blue-500',\n      description: 'Text-based support'\n    },\n    { \n      id: '911', \n      name: 'Emergency Services', \n      contact: '911', \n      type: 'emergency' as const,\n      icon: Shield,\n      color: 'bg-red-600',\n      description: 'Immediate emergency'\n    }\n  ], []);\n\n  // Personalized coping strategies based on risk level\n  const copingStrategies = useMemo(() => {\n    const baseStrategies = data?.safetyPlan?.copingStrategiesText ? [data.safetyPlan.copingStrategiesText] : [];\n    const additionalStrategies = crisisLevel.recommendations;\n    return [...baseStrategies, ...additionalStrategies];\n  }, [data?.safetyPlan, crisisLevel]);\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Connection Status Bar */}\n      <div className=\"flex items-center justify-between p-2 rounded-lg bg-gray-50\">\n        <div className=\"flex items-center space-x-2\">\n          {isOnline ? (\n            <>\n              <Wifi className=\"h-4 w-4 text-green-600\" />\n              <span className=\"text-sm text-green-700\">Connected</span>\n            </>\n          ) : (\n            <>\n              <WifiOff className=\"h-4 w-4 text-orange-600\" />\n              <span className=\"text-sm text-orange-700\">Offline Mode</span>\n            </>\n          )}\n        </div>\n        {location && (\n          <div className=\"flex items-center space-x-1 text-sm text-gray-600\">\n            <MapPin className=\"h-3 w-3\" />\n            <span>Location ready</span>\n          </div>\n        )}\n      </div>\n\n      {/* Real-time Risk Assessment Display */}\n      <motion.div \n        className={`p-4 rounded-lg border-2 ${crisisLevel.borderColor} ${crisisLevel.bgColor} ${\n          pulseAnimation ? 'animate-pulse' : ''\n        }`}\n        initial={{ scale: 0.95 }}\n        animate={{ scale: 1 }}\n        transition={{ duration: 0.3 }}\n      >\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Brain className={`h-5 w-5 ${crisisLevel.color}`} />\n              <h3 className={`font-semibold ${crisisLevel.color}`}>\n                {crisisLevel.message}\n              </h3>\n            </div>\n            \n            {/* Risk Factor Indicators */}\n            <div className=\"grid grid-cols-3 gap-2 mt-3\">\n              {Object.entries(_riskFactors).slice(0, 3).map(([factor, value]) => (\n                <div key={factor} className=\"flex items-center space-x-1\">\n                  <div className=\"relative w-full h-2 bg-gray-200 rounded-full overflow-hidden\">\n                    <motion.div \n                      className={`absolute left-0 top-0 h-full ${\n                        value > 60 ? 'bg-red-500' : value > 30 ? 'bg-yellow-500' : 'bg-green-500'\n                      }`}\n                      initial={{ width: 0 }}\n                      animate={{ width: `${value}%` }}\n                      transition={{ duration: 0.5 }}\n                    />\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Quick Recommendations */}\n            {crisisLevel.urgency !== 'none' && (\n              <div className=\"mt-3 space-y-1\">\n                {crisisLevel.recommendations.slice(0, 2).map((rec, idx) => (\n                  <div key={idx} className=\"flex items-start space-x-1\">\n                    <ChevronRight className=\"h-3 w-3 mt-0.5 flex-shrink-0\" />\n                    <span className=\"text-xs\">{rec}</span>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Risk Level Indicator */}\n          <div className=\"flex flex-col items-center ml-4\">\n            <div className={`relative w-16 h-16 rounded-full ${crisisLevel.bgColor} border-4 ${crisisLevel.borderColor}`}>\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                {crisisLevel.urgency === 'immediate' ? (\n                  <AlertTriangle className={`h-8 w-8 ${crisisLevel.color} animate-pulse`} />\n                ) : crisisLevel.urgency === 'high' ? (\n                  <AlertCircle className={`h-8 w-8 ${crisisLevel.color}`} />\n                ) : (\n                  <Activity className={`h-8 w-8 ${crisisLevel.color}`} />\n                )}\n              </div>\n            </div>\n            <span className={`text-xs font-medium mt-1 ${crisisLevel.color}`}>\n              Risk: {Math.round(crisisLevel.score)}%\n            </span>\n          </div>\n        </div>\n      </motion.div>\n\n      {/* Emergency Quick Actions - Always Visible */}\n      {(crisisLevel.urgency === 'high' || crisisLevel.urgency === 'immediate') && (\n        <motion.div \n          className=\"grid grid-cols-3 gap-2\"\n          initial={{ opacity: 0, y: -10 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3 }}\n        >\n          {emergencyNumbers.map((emergency) => (\n            <motion.button\n              key={emergency.id}\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={() => handleEmergencyCallWithLocation(emergency.contact, emergency.name)}\n              className={`p-3 ${emergency.color} text-white rounded-lg shadow-lg hover:shadow-xl transition-all`}\n              aria-label={`Contact ${emergency.name}`}\n            >\n              <emergency.icon className=\"h-6 w-6 mx-auto mb-1\" />\n              <span className=\"text-xs font-bold block\">{emergency.contact}</span>\n            </motion.button>\n          ))}\n        </motion.div>\n      )}\n\n      {/* Tabbed Interface */}\n      <div className=\"bg-white rounded-lg border border-gray-200\">\n        <div className=\"flex border-b border-gray-200\">\n          {[\n            { id: 'emergency', label: 'Emergency', icon: Phone },\n            { id: 'safety', label: 'Safety Plan', icon: Shield },\n            { id: 'network', label: 'Support Network', icon: Users },\n            { id: 'resources', label: 'Resources', icon: MapPin }\n          ].map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id as unknown)}\n              className={`flex-1 py-2 px-3 flex items-center justify-center space-x-1 text-sm font-medium transition-colors ${\n                activeTab === tab.id\n                  ? 'bg-primary-50 text-primary-700 border-b-2 border-primary-500'\n                  : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'\n              }`}\n            >\n              <tab.icon className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">{tab.label}</span>\n            </button>\n          ))}\n        </div>\n\n        <div className=\"p-4\">\n          <AnimatePresence mode=\"wait\">\n            {/* Emergency Contacts Tab */}\n            {activeTab === 'emergency' && (\n              <motion.div\n                key=\"emergency\"\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                className=\"space-y-3\"\n              >\n                <h4 className=\"text-sm font-semibold text-gray-700 uppercase tracking-wider\">\n                  24/7 Crisis Support\n                </h4>\n                {emergencyNumbers.map((emergency) => (\n                  <button\n                    key={emergency.id}\n                    onClick={() => handleEmergencyCallWithLocation(emergency.contact, emergency.name)}\n                    className=\"w-full flex items-center justify-between p-3 bg-red-50 hover:bg-red-100 rounded-lg transition-colors group\"\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <emergency.icon className=\"h-5 w-5 text-red-600\" />\n                      <div className=\"text-left\">\n                        <p className=\"font-medium text-gray-900\">{emergency.name}</p>\n                        <p className=\"text-sm text-gray-600\">{emergency.description}</p>\n                      </div>\n                    </div>\n                    <Zap className=\"h-4 w-4 text-red-400 group-hover:text-red-600\" />\n                  </button>\n                ))}\n\n                {/* Crisis Chat Option */}\n                <button\n                  onClick={onStartCrisisChat}\n                  className=\"w-full flex items-center justify-between p-3 bg-purple-50 hover:bg-purple-100 rounded-lg transition-colors\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <MessageSquare className=\"h-5 w-5 text-purple-600\" />\n                    <div className=\"text-left\">\n                      <p className=\"font-medium text-gray-900\">Live Crisis Chat</p>\n                      <p className=\"text-sm text-gray-600\">Chat with a counselor</p>\n                    </div>\n                  </div>\n                  <ChevronRight className=\"h-4 w-4 text-purple-400\" />\n                </button>\n              </motion.div>\n            )}\n\n            {/* Safety Plan Tab */}\n            {activeTab === 'safety' && (\n              <motion.div\n                key=\"safety\"\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                className=\"space-y-3\"\n              >\n                {data?.safetyPlan ? (\n                  <>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h4 className=\"text-sm font-semibold text-gray-700 uppercase tracking-wider\">\n                        My Safety Plan\n                      </h4>\n                      <button\n                        onClick={onOpenSafetyPlan}\n                        className=\"text-sm text-primary-600 hover:text-primary-700\"\n                      >\n                        Edit\n                      </button>\n                    </div>\n\n                    {/* Warning Signals */}\n                    <div className=\"bg-yellow-50 p-3 rounded-lg\">\n                      <p className=\"font-medium text-yellow-900 mb-2\">Warning Signals</p>\n                      <ul className=\"space-y-1 text-sm text-yellow-800\">\n                        {data.safetyPlan.warningSignsText && data.safetyPlan.warningSignsText.split(',').slice(0, 3).map((signal, idx) => (\n                          <li key={idx} className=\"flex items-start space-x-1\">\n                            <AlertCircle className=\"h-3 w-3 mt-0.5 flex-shrink-0\" />\n                            <span>{signal}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n\n                    {/* Coping Strategies */}\n                    <div className=\"bg-blue-50 p-3 rounded-lg\">\n                      <p className=\"font-medium text-blue-900 mb-2\">Coping Strategies</p>\n                      <ul className=\"space-y-1 text-sm text-blue-800\">\n                        {copingStrategies.slice(0, 4).map((strategy, idx) => (\n                          <li key={idx} className=\"flex items-start space-x-1\">\n                            <CheckCircle className=\"h-3 w-3 mt-0.5 flex-shrink-0\" />\n                            <span>{strategy}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n\n                    {/* Reasons to Live */}\n                    {data.safetyPlan.reasonsToLiveText && (\n                      <div className=\"bg-green-50 p-3 rounded-lg\">\n                        <p className=\"font-medium text-green-900 mb-2\">My Reasons</p>\n                        <ul className=\"space-y-1 text-sm text-green-800\">\n                          {data.safetyPlan.reasonsToLiveText.split(',').slice(0, 3).map((reason, idx) => (\n                            <li key={idx} className=\"flex items-start space-x-1\">\n                              <Heart className=\"h-3 w-3 mt-0.5 flex-shrink-0\" />\n                              <span>{reason}</span>\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n                  </>\n                ) : (\n                  <div className=\"text-center py-6\">\n                    <Shield className=\"h-12 w-12 text-gray-400 mx-auto mb-3\" />\n                    <p className=\"text-gray-600 mb-4\">Create your personalized safety plan</p>\n                    <button\n                      onClick={onOpenSafetyPlan}\n                      className=\"px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700\"\n                    >\n                      Create Safety Plan\n                    </button>\n                  </div>\n                )}\n              </motion.div>\n            )}\n\n            {/* Support Network Tab */}\n            {activeTab === 'network' && (\n              <motion.div\n                key=\"network\"\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                className=\"space-y-3\"\n              >\n                <h4 className=\"text-sm font-semibold text-gray-700 uppercase tracking-wider\">\n                  Personal Support Network\n                </h4>\n                \n                {data?.emergencyContacts && data.emergencyContacts.length > 0 ? (\n                  <div className=\"space-y-2\">\n                    {data.emergencyContacts.map((contact) => (\n                      <button\n                        key={contact.id}\n                        onClick={() => handleEmergencyCallWithLocation(contact.phone, contact.name)}\n                        className=\"w-full flex items-center justify-between p-3 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors\"\n                        disabled={!contact.isAvailable}\n                      >\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"relative\">\n                            <Users className=\"h-5 w-5 text-gray-600\" />\n                            {contact.isAvailable && (\n                              <span className=\"absolute -top-1 -right-1 w-2 h-2 bg-green-500 rounded-full\"></span>\n                            )}\n                          </div>\n                          <div className=\"text-left\">\n                            <p className=\"font-medium text-gray-900\">{contact.name}</p>\n                            <p className=\"text-sm text-gray-600\">{contact.relationship}</p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          {contact.preferredContact === 'call' && <Phone className=\"h-4 w-4 text-gray-400\" />}\n                          {contact.preferredContact === 'text' && <MessageCircle className=\"h-4 w-4 text-gray-400\" />}\n                          {contact.preferredContact === 'both' && (\n                            <>\n                              <Phone className=\"h-4 w-4 text-gray-400\" />\n                              <MessageCircle className=\"h-4 w-4 text-gray-400\" />\n                            </>\n                          )}\n                        </div>\n                      </button>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-6\">\n                    <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-3\" />\n                    <p className=\"text-gray-600 mb-4\">Add your trusted contacts</p>\n                    <button className=\"px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700\">\n                      Add Contacts\n                    </button>\n                  </div>\n                )}\n\n                {/* Professional Contacts */}\n                {data?.safetyPlan?.professionalContactsText && (\n                  <>\n                    <h4 className=\"text-sm font-semibold text-gray-700 uppercase tracking-wider mt-4\">\n                      Professional Support\n                    </h4>\n                    <div className=\"bg-blue-50 p-3 rounded-lg\">\n                      <div className=\"flex items-start space-x-3\">\n                        <HelpCircle className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n                        <div className=\"text-left\">\n                          <p className=\"font-medium text-blue-900 mb-1\">Professional Contacts</p>\n                          <p className=\"text-sm text-blue-800\">{data.safetyPlan.professionalContactsText}</p>\n                        </div>\n                      </div>\n                    </div>\n                  </>\n                )}\n              </motion.div>\n            )}\n\n            {/* Resources Tab */}\n            {activeTab === 'resources' && (\n              <motion.div\n                key=\"resources\"\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                className=\"space-y-3\"\n              >\n                <h4 className=\"text-sm font-semibold text-gray-700 uppercase tracking-wider\">\n                  Nearby Crisis Resources\n                </h4>\n                \n                {location ? (\n                  <div className=\"space-y-2\">\n                    <button className=\"w-full flex items-center justify-between p-3 bg-indigo-50 hover:bg-indigo-100 rounded-lg transition-colors\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Navigation className=\"h-5 w-5 text-indigo-600\" />\n                        <div className=\"text-left\">\n                          <p className=\"font-medium text-gray-900\">Nearest Hospital</p>\n                          <p className=\"text-sm text-gray-600\">2.3 miles away</p>\n                        </div>\n                      </div>\n                      <ChevronRight className=\"h-4 w-4 text-indigo-400\" />\n                    </button>\n                    \n                    <button className=\"w-full flex items-center justify-between p-3 bg-indigo-50 hover:bg-indigo-100 rounded-lg transition-colors\">\n                      <div className=\"flex items-center space-x-3\">\n                        <MapPin className=\"h-5 w-5 text-indigo-600\" />\n                        <div className=\"text-left\">\n                          <p className=\"font-medium text-gray-900\">Crisis Center</p>\n                          <p className=\"text-sm text-gray-600\">4.1 miles away</p>\n                        </div>\n                      </div>\n                      <ChevronRight className=\"h-4 w-4 text-indigo-400\" />\n                    </button>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-6\">\n                    <MapPin className=\"h-12 w-12 text-gray-400 mx-auto mb-3\" />\n                    <p className=\"text-gray-600 mb-4\">Enable location for nearby resources</p>\n                    <button \n                      onClick={() => navigator.geolocation.getCurrentPosition(() => {})}\n                      className=\"px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700\"\n                    >\n                      Enable Location\n                    </button>\n                  </div>\n                )}\n\n                {/* Online Resources */}\n                <h4 className=\"text-sm font-semibold text-gray-700 uppercase tracking-wider mt-4\">\n                  Online Resources\n                </h4>\n                <div className=\"space-y-2\">\n                  <a \n                    href=\"https://www.crisistextline.org\" \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"block p-3 bg-purple-50 hover:bg-purple-100 rounded-lg transition-colors\"\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <MessageSquare className=\"h-5 w-5 text-purple-600\" />\n                        <div className=\"text-left\">\n                          <p className=\"font-medium text-gray-900\">Crisis Text Line</p>\n                          <p className=\"text-sm text-gray-600\">Free 24/7 text support</p>\n                        </div>\n                      </div>\n                      <ChevronRight className=\"h-4 w-4 text-purple-400\" />\n                    </div>\n                  </a>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </div>\n\n      {/* Motivational Footer */}\n      <div className=\"mt-4 p-3 bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg\">\n        <p className=\"text-sm text-gray-700\">\n          <span className=\"font-medium\">Remember:</span> You are stronger than you know. \n          Help is always available, and it's okay to reach out when you need support.\n        </p>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\GoalProgressDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\GoalsProgressWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\HabitTracker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\HealthRecordsIntegration.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\InsightsWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\MedicationManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\MedicationTrackerWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\MoodTrendsWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\ProviderCommunication.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\QuickActions.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2067,2070],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2067,2070],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { motion } from 'framer-motion';\nimport { \n  Brain, Heart, Edit3, Phone, Calendar, MessageSquare, \n  Activity, Pill, Book, Users, Sparkles, Music\n} from 'lucide-react';\nimport { QuickAction } from '../../../types/dashboard';\n\ninterface QuickActionsProps {\n  actions?: QuickAction[];\n  onActionClick?: (action: QuickAction) => void;\n}\n\nexport function QuickActions({ actions, onActionClick }: QuickActionsProps) {\n  // Default quick actions if none provided\n  const defaultActions: QuickAction[] = [\n    {\n      id: '1',\n      label: 'Log Mood',\n      icon: 'mood',\n      description: 'Track how you\\'re feeling',\n      action: '/wellness/mood',\n      color: 'bg-purple-500',\n      category: 'tracking',\n      keyboard: 'alt+m',\n    },\n    {\n      id: '2',\n      label: 'Meditate',\n      icon: 'meditation',\n      description: '5-minute guided session',\n      action: '/wellness/meditation',\n      color: 'bg-blue-500',\n      category: 'wellness',\n      keyboard: 'alt+d',\n    },\n    {\n      id: '3',\n      label: 'Journal',\n      icon: 'journal',\n      description: 'Write your thoughts',\n      action: '/wellness/journal',\n      color: 'bg-green-500',\n      category: 'tracking',\n      keyboard: 'alt+j',\n    },\n    {\n      id: '4',\n      label: 'Crisis Help',\n      icon: 'emergency',\n      description: 'Get immediate support',\n      action: '/crisis',\n      color: 'bg-red-500',\n      category: 'crisis',\n      isEmergency: true,\n      keyboard: 'alt+h',\n    },\n    {\n      id: '5',\n      label: 'Breathe',\n      icon: 'breathe',\n      description: 'Breathing exercise',\n      action: '/wellness/breathe',\n      color: 'bg-cyan-500',\n      category: 'wellness',\n    },\n    {\n      id: '6',\n      label: 'Connect',\n      icon: 'community',\n      description: 'Join support group',\n      action: '/community',\n      color: 'bg-indigo-500',\n      category: 'social',\n    },\n  ];\n\n  const quickActions = actions || defaultActions;\n\n  // Get icon component based on icon string\n  const getIconComponent = (iconName: string) => {\n    const icons: Record<string, any> = {\n      mood: Brain,\n      meditation: Heart,\n      journal: Edit3,\n      emergency: Phone,\n      schedule: Calendar,\n      message: MessageSquare,\n      breathe: Activity,\n      medication: Pill,\n      resources: Book,\n      community: Users,\n      insights: Sparkles,\n      music: Music,\n    };\n    return icons[iconName] || Brain;\n  };\n\n  // Group actions by category\n  const groupedActions = quickActions.reduce((acc, action) => {\n    if (!acc[action.category]) {\n      acc[action.category] = [];\n    }\n    acc[action.category]!.push(action);\n    return acc;\n  }, {} as Record<string, QuickAction[]>);\n\n  // Category display names\n  const categoryNames: Record<string, string> = {\n    crisis: 'Emergency',\n    wellness: 'Wellness',\n    tracking: 'Track & Record',\n    social: 'Connect',\n    professional: 'Professional',\n  };\n\n  // Category order (crisis first)\n  const categoryOrder = ['crisis', 'wellness', 'tracking', 'social', 'professional'];\n  const sortedCategories = categoryOrder.filter(cat => groupedActions[cat]);\n\n  return (\n    <div className=\"space-y-4\">\n      {sortedCategories.map((category) => (\n        <div key={category} className=\"space-y-2\">\n          {category !== 'crisis' && (\n            <h4 className=\"text-xs font-semibold text-gray-500 uppercase tracking-wider\">\n              {categoryNames[category]}\n            </h4>\n          )}\n          \n          <div className={`grid ${category === 'crisis' ? 'grid-cols-1' : 'grid-cols-2'} gap-2`}>\n            {groupedActions[category]?.map((action, index) => {\n              const Icon = getIconComponent(action.icon);\n              \n              return (\n                <motion.button\n                  key={action.id}\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: index * 0.05 }}\n                  onClick={() => onActionClick?.(action)}\n                  className={`\n                    relative overflow-hidden group\n                    ${action.isEmergency \n                      ? 'p-4 bg-gradient-to-r from-red-500 to-red-600 text-white shadow-lg hover:shadow-xl' \n                      : 'p-3 bg-white hover:bg-gray-50 border border-gray-200 text-gray-900'\n                    } \n                    rounded-lg transition-all duration-200\n                    ${category === 'crisis' ? 'flex items-center justify-center space-x-3' : 'flex flex-col items-center'}\n                  `}\n                  aria-label={action.label}\n                  title={action.keyboard ? `Keyboard shortcut: ${action.keyboard}` : action.description}\n                >\n                  {/* Background decoration for non-emergency buttons */}\n                  {!action.isEmergency && action.color && (\n                    <div \n                      className={`absolute inset-0 opacity-0 group-hover:opacity-10 transition-opacity ${action.color}`}\n                    />\n                  )}\n                  \n                  {/* Icon */}\n                  <div className={`\n                    ${action.isEmergency \n                      ? '' \n                      : `p-2 rounded-lg ${action.color} bg-opacity-10 group-hover:bg-opacity-20`\n                    }\n                    transition-all\n                  `}>\n                    <Icon className={`\n                      ${action.isEmergency \n                        ? 'h-6 w-6' \n                        : `h-5 w-5 ${action.color?.replace('bg-', 'text-')}`\n                      }\n                    `} />\n                  </div>\n                  \n                  {/* Label and description */}\n                  <div className={category === 'crisis' ? 'text-left' : 'text-center mt-2'}>\n                    <p className={`\n                      font-medium \n                      ${action.isEmergency ? 'text-base' : 'text-sm'}\n                    `}>\n                      {action.label}\n                    </p>\n                    {action.description && (\n                      <p className={`\n                        text-xs mt-0.5\n                        ${action.isEmergency ? 'text-red-100' : 'text-gray-500'}\n                      `}>\n                        {action.description}\n                      </p>\n                    )}\n                  </div>\n                  \n                  {/* Keyboard shortcut indicator */}\n                  {action.keyboard && !action.isEmergency && (\n                    <div className=\"absolute top-1 right-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                      <span className=\"text-xs bg-gray-100 text-gray-500 px-1.5 py-0.5 rounded\">\n                        {action.keyboard}\n                      </span>\n                    </div>\n                  )}\n                  \n                  {/* Emergency pulse animation */}\n                  {action.isEmergency && (\n                    <div className=\"absolute inset-0 -z-10\">\n                      <div className=\"absolute inset-0 bg-red-400 opacity-20 animate-ping\" />\n                    </div>\n                  )}\n                </motion.button>\n              );\n            })}\n          </div>\n        </div>\n      ))}\n      \n      {/* Keyboard shortcuts help */}\n      <div className=\"mt-4 p-2 bg-gray-50 rounded-lg\">\n        <p className=\"text-xs text-gray-500 text-center\">\n          Tip: Use keyboard shortcuts for quick access (Alt + key)\n        </p>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\QuickActionsWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\TherapyProgressWidget.tsx","messages":[{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":143,"column":15,"nodeType":"JSXOpeningElement","endLine":147,"endColumn":16},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":2,"message":"Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.","line":143,"column":15,"nodeType":"JSXOpeningElement","endLine":147,"endColumn":16}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Users, Calendar, _Target, CheckCircle, Clock, ChevronRight } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { motion } from 'framer-motion';\n\ninterface TherapySession {\n  id: string;\n  date: Date;\n  therapistName: string;\n  type: string;\n  topics: string[];\n  homework: unknown[];\n  progress: number;\n  notes?: string;\n}\n\ninterface TherapyProgressWidgetProps {\n  progress?: TherapySession[];\n  error?: string;\n}\n\nexport function TherapyProgressWidget({ progress, error }: TherapyProgressWidgetProps) {\n  const navigate = useNavigate();\n\n  if (_error) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <p className=\"text-red-600\">{error}</p>\n      </div>\n    );\n  }\n\n  if (!progress || progress.length === 0) {\n    return (\n      <div className=\"flex flex-col items-center justify-center h-full py-8\">\n        <Users className=\"h-12 w-12 text-gray-300 mb-3\" />\n        <p className=\"text-gray-500 text-center\">No therapy sessions yet</p>\n        <button\n          onClick={() => navigate('/professional/therapy')}\n          className=\"mt-3 text-sm text-primary-600 hover:text-primary-700\"\n        >\n          Schedule a session\n        </button>\n      </div>\n    );\n  }\n\n  const latestSession = progress[0];\n  const totalSessions = progress.length;\n  const completedHomework = progress.reduce((acc, session) => \n    acc + session.homework.filter((hw: unknown) => hw.completed).length, 0\n  );\n  const totalHomework = progress.reduce((acc, session) => \n    acc + session.homework.length, 0\n  );\n\n  return (\n    <div className=\"space-y-3\">\n      {/* Session Summary */}\n      <div className=\"bg-primary-50 rounded-lg p-3\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <span className=\"text-sm font-medium text-primary-900\">Therapy Progress</span>\n          <span className=\"text-xs text-primary-700\">{totalSessions} sessions</span>\n        </div>\n        <div className=\"grid grid-cols-2 gap-3\">\n          <div>\n            <p className=\"text-xs text-primary-700\">Next Session</p>\n            <p className=\"text-sm font-medium text-primary-900\">\n              {latestSession ? new Date(latestSession.date).toLocaleDateString() : 'Not scheduled'}\n            </p>\n          </div>\n          <div>\n            <p className=\"text-xs text-primary-700\">Homework</p>\n            <p className=\"text-sm font-medium text-primary-900\">\n              {completedHomework}/{totalHomework} completed\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Latest Session Details */}\n      {latestSession && (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-3\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <div className=\"flex items-center space-x-2\">\n              <Calendar className=\"h-4 w-4 text-gray-400\" />\n              <span className=\"text-sm font-medium text-gray-900\">\n                Last Session\n              </span>\n            </div>\n            <span className=\"text-xs text-gray-500\">\n              {new Date(latestSession.date).toLocaleDateString()}\n            </span>\n          </div>\n          \n          <p className=\"text-sm text-gray-700 mb-2\">\n            with {latestSession.therapistName}\n          </p>\n\n          {/* Topics Covered */}\n          {latestSession.topics.length > 0 && (\n            <div className=\"mb-2\">\n              <p className=\"text-xs text-gray-600 mb-1\">Topics discussed:</p>\n              <div className=\"flex flex-wrap gap-1\">\n                {latestSession.topics.slice(0, 3).map((topic, index) => (\n                  <span\n                    key={index}\n                    className=\"px-2 py-1 bg-gray-100 text-gray-700 rounded-md text-xs\"\n                  >\n                    {topic}\n                  </span>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Progress Bar */}\n          <div className=\"mt-3\">\n            <div className=\"flex items-center justify-between mb-1\">\n              <span className=\"text-xs text-gray-600\">Session Progress</span>\n              <span className=\"text-xs font-medium text-primary-600\">\n                {latestSession.progress}%\n              </span>\n            </div>\n            <div className=\"w-full bg-gray-200 rounded-full h-1.5\">\n              <motion.div\n                className=\"bg-primary-600 h-1.5 rounded-full\"\n                initial={{ width: 0 }}\n                animate={{ width: `${latestSession.progress}%` }}\n                transition={{ duration: 0.5 }}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Homework Items */}\n      {progress.some(s => s.homework.length > 0) && (\n        <div className=\"space-y-2\">\n          <p className=\"text-sm font-medium text-gray-700\">Active Homework</p>\n          {progress.slice(0, 2).map(session => \n            session.homework.filter((hw: unknown) => !hw.completed).slice(0, 2).map((hw: unknown) => (\n              <div\n                key={hw.id}\n                className=\"flex items-center justify-between p-2 bg-gray-50 rounded-lg cursor-pointer hover:bg-gray-100\"\n                onClick={() => navigate('/wellness/activities')}\n              >\n                <div className=\"flex items-center space-x-2\">\n                  {hw.completed ? (\n                    <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  ) : (\n                    <Clock className=\"h-4 w-4 text-gray-400\" />\n                  )}\n                  <span className=\"text-sm text-gray-700\">{hw.title}</span>\n                </div>\n                <ChevronRight className=\"h-4 w-4 text-gray-400\" />\n              </div>\n            ))\n          )}\n        </div>\n      )}\n\n      {/* View Details Link */}\n      <button\n        onClick={() => navigate('/professional/therapy')}\n        className=\"w-full bg-primary-100 text-primary-700 rounded-lg p-3 flex items-center justify-between hover:bg-primary-200 transition-colors\"\n      >\n        <span className=\"text-sm font-medium\">View Therapy Details</span>\n        <ChevronRight className=\"h-4 w-4\" />\n      </button>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\TherapySessionWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\TodaySchedule.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":255,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8387,8390],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8387,8390],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Clock, Video, MapPin, Pill, Calendar, CheckCircle, XCircle, AlertCircle } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { ScheduleItem } from '../../../types/dashboard';\n\ninterface TodayScheduleProps {\n  scheduleItems?: ScheduleItem[];\n  onItemClick?: (item: ScheduleItem) => void;\n  onReschedule?: (item: ScheduleItem) => void;\n  onMarkComplete?: (item: ScheduleItem) => void;\n}\n\nexport function TodaySchedule({ \n  scheduleItems = [], \n  onItemClick, \n  onReschedule,\n  onMarkComplete \n}: TodayScheduleProps) {\n  \n  // Group items by time period\n  const groupItemsByPeriod = () => {\n    const now = new Date();\n    const groups: Record<string, ScheduleItem[]> = {\n      overdue: [],\n      current: [],\n      upcoming: [],\n      later: [],\n    };\n\n    scheduleItems.forEach(item => {\n      const itemTime = new Date(item.time);\n      const diffMinutes = (itemTime.getTime() - now.getTime()) / (1000 * 60);\n      \n      if (item._status === 'completed') {\n        // Skip completed items or show them separately\n      } else if (item.status === 'missed' || diffMinutes < -30) {\n        groups.overdue!.push(item);\n      } else if (diffMinutes >= -30 && diffMinutes <= 30) {\n        groups.current!.push(item);\n      } else if (diffMinutes > 30 && diffMinutes <= 180) {\n        groups.upcoming!.push(item);\n      } else {\n        groups.later!.push(item);\n      }\n    });\n\n    return groups;\n  };\n\n  const groups = groupItemsByPeriod();\n\n  // Get icon for schedule item type\n  const getItemIcon = (_type: ScheduleItem['type']) => {\n    switch (_type) {\n      case 'therapy':\n        return Video;\n      case 'medication':\n        return Pill;\n      case 'appointment':\n        return Calendar;\n      default:\n        return Clock;\n    }\n  };\n\n  // Get status color\n  const getStatusColor = (_status: ScheduleItem['status'], priority: ScheduleItem['priority']) => {\n    if (_status === 'missed') return 'border-red-500 bg-red-50';\n    if (_status === 'ongoing') return 'border-green-500 bg-green-50 animate-pulse';\n    if (_status === 'completed') return 'border-gray-300 bg-gray-50';\n    if (priority === 'high') return 'border-orange-500 bg-orange-50';\n    return 'border-gray-300 bg-white';\n  };\n\n  // Get status icon\n  const StatusIcon = ({ _status }: { _status: ScheduleItem['_status'] }) => {\n    switch (_status) {\n      case 'completed':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'missed':\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      case 'cancelled':\n        return <XCircle className=\"h-4 w-4 text-gray-400\" />;\n      case 'ongoing':\n        return <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />;\n      default:\n        return null;\n    }\n  };\n\n  // Format time display\n  const formatTime = (_date: Date) => {\n    return new Date(_date).toLocaleTimeString('en-US', { \n      hour: 'numeric', \n      minute: '2-digit',\n      hour12: true \n    });\n  };\n\n  // Calculate time until\n  const getTimeUntil = (_date: Date) => {\n    const now = new Date();\n    const itemTime = new Date(_date);\n    const diffMinutes = Math.floor((itemTime.getTime() - now.getTime()) / (1000 * 60));\n    \n    if (diffMinutes < 0) return 'Overdue';\n    if (diffMinutes === 0) return 'Now';\n    if (diffMinutes < 60) return `In ${diffMinutes} min`;\n    if (diffMinutes < 120) return 'In 1 hour';\n    return `In ${Math.floor(diffMinutes / 60)} hours`;\n  };\n\n  // Empty state\n  if (scheduleItems.length === 0) {\n    return (\n      <div className=\"text-center py-8\">\n        <Calendar className=\"h-12 w-12 text-gray-300 mx-auto mb-3\" />\n        <p className=\"text-gray-500\">No scheduled items for today</p>\n        <p className=\"text-sm text-gray-400 mt-1\">Your schedule will appear here</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Overdue Items */}\n      {groups.overdue!.length > 0 && (\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center space-x-2\">\n            <AlertCircle className=\"h-4 w-4 text-red-500\" />\n            <h4 className=\"text-sm font-semibold text-red-700\">Overdue</h4>\n          </div>\n          <div className=\"space-y-2\">\n            {groups.overdue!.map((item) => (\n              <ScheduleItemCard\n                key={item.id}\n                item={item}\n                onClick={onItemClick}\n                onReschedule={onReschedule}\n                onMarkComplete={onMarkComplete}\n                getItemIcon={getItemIcon}\n                formatTime={formatTime}\n                getStatusColor={getStatusColor}\n                StatusIcon={StatusIcon}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Current/Ongoing Items */}\n      {groups.current!.length > 0 && (\n        <div className=\"space-y-2\">\n          <h4 className=\"text-sm font-semibold text-green-700\">Happening Now</h4>\n          <div className=\"space-y-2\">\n            {groups.current!.map((item) => (\n              <ScheduleItemCard\n                key={item.id}\n                item={item}\n                onClick={onItemClick}\n                onReschedule={onReschedule}\n                onMarkComplete={onMarkComplete}\n                getItemIcon={getItemIcon}\n                formatTime={formatTime}\n                getStatusColor={getStatusColor}\n                StatusIcon={StatusIcon}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Upcoming Items */}\n      {groups.upcoming!.length > 0 && (\n        <div className=\"space-y-2\">\n          <h4 className=\"text-sm font-semibold text-gray-700\">Coming Up</h4>\n          <div className=\"space-y-2\">\n            {groups.upcoming!.map((item) => (\n              <ScheduleItemCard\n                key={item.id}\n                item={item}\n                onClick={onItemClick}\n                onReschedule={onReschedule}\n                onMarkComplete={onMarkComplete}\n                getItemIcon={getItemIcon}\n                formatTime={formatTime}\n                getStatusColor={getStatusColor}\n                StatusIcon={StatusIcon}\n                showTimeUntil\n                getTimeUntil={getTimeUntil}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Later Today */}\n      {groups.later!.length > 0 && (\n        <div className=\"space-y-2\">\n          <h4 className=\"text-sm font-semibold text-gray-500\">Later Today</h4>\n          <div className=\"space-y-2\">\n            {groups.later!.slice(0, 3).map((item) => (\n              <ScheduleItemCard\n                key={item.id}\n                item={item}\n                onClick={onItemClick}\n                onReschedule={onReschedule}\n                onMarkComplete={onMarkComplete}\n                getItemIcon={getItemIcon}\n                formatTime={formatTime}\n                getStatusColor={getStatusColor}\n                StatusIcon={StatusIcon}\n                compact\n              />\n            ))}\n          </div>\n          {groups.later!.length > 3 && (\n            <button className=\"text-sm text-primary-600 hover:text-primary-700\">\n              View {groups.later!.length - 3} more items\n            </button>\n          )}\n        </div>\n      )}\n\n      {/* Quick Stats */}\n      <div className=\"mt-4 pt-4 border-t border-gray-200\">\n        <div className=\"grid grid-cols-3 gap-2 text-center\">\n          <div>\n            <p className=\"text-2xl font-bold text-gray-900\">{scheduleItems.length}</p>\n            <p className=\"text-xs text-gray-500\">Total</p>\n          </div>\n          <div>\n            <p className=\"text-2xl font-bold text-green-600\">\n              {scheduleItems.filter(i => i._status === 'completed').length}\n            </p>\n            <p className=\"text-xs text-gray-500\">Completed</p>\n          </div>\n          <div>\n            <p className=\"text-2xl font-bold text-orange-600\">\n              {scheduleItems.filter(i => i._status === 'upcoming').length}\n            </p>\n            <p className=\"text-xs text-gray-500\">Remaining</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Individual Schedule Item Card Component\ninterface ScheduleItemCardProps {\n  item: ScheduleItem;\n  onClick?: (item: ScheduleItem) => void;\n  onReschedule?: (item: ScheduleItem) => void;\n  onMarkComplete?: (item: ScheduleItem) => void;\n  getItemIcon: (_type: ScheduleItem['_type']) => any;\n  formatTime: (_date: Date) => string;\n  getStatusColor: (_status: ScheduleItem['_status'], priority: ScheduleItem['priority']) => string;\n  StatusIcon: ({ _status }: { _status: ScheduleItem['_status'] }) => JSX.Element | null;\n  compact?: boolean;\n  showTimeUntil?: boolean;\n  getTimeUntil?: (_date: Date) => string;\n}\n\nfunction ScheduleItemCard({\n  item,\n  onClick,\n  onReschedule,\n  onMarkComplete,\n  getItemIcon,\n  formatTime,\n  getStatusColor,\n  StatusIcon,\n  compact = false,\n  showTimeUntil = false,\n  getTimeUntil,\n}: ScheduleItemCardProps) {\n  const Icon = getItemIcon(item._type);\n\n  return (\n    <motion.div\n      whileHover={{ scale: 1.02 }}\n      whileTap={{ scale: 0.98 }}\n      className={`\n        p-3 rounded-lg border-l-4 cursor-pointer transition-all\n        ${getStatusColor(item._status, item.priority)}\n        ${compact ? 'py-2' : ''}\n      `}\n      onClick={() => onClick?.(item)}\n    >\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex items-start space-x-3 flex-1\">\n          <Icon className={`h-5 w-5 mt-0.5 ${compact ? 'h-4 w-4' : ''} text-gray-600`} />\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center space-x-2\">\n              <p className={`font-medium text-gray-900 ${compact ? 'text-sm' : ''}`}>\n                {item.title}\n              </p>\n              <StatusIcon status={item._status} />\n            </div>\n            {!compact && (\n              <>\n                <p className=\"text-sm text-gray-600 mt-0.5\">\n                  {formatTime(item.time)}\n                  {item.duration && ` • ${item.duration} min`}\n                  {showTimeUntil && getTimeUntil && (\n                    <span className=\"text-primary-600 font-medium ml-2\">\n                      {getTimeUntil(item.time)}\n                    </span>\n                  )}\n                </p>\n                {item.location && (\n                  <p className=\"text-xs text-gray-500 mt-1 flex items-center\">\n                    {item.isVirtual ? (\n                      <Video className=\"h-3 w-3 mr-1\" />\n                    ) : (\n                      <MapPin className=\"h-3 w-3 mr-1\" />\n                    )}\n                    {item.location}\n                  </p>\n                )}\n                {item.provider && (\n                  <p className=\"text-xs text-gray-500\">\n                    With {item.provider}\n                  </p>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n        \n        {!compact && item._status === 'upcoming' && (\n          <div className=\"flex flex-col space-y-1 ml-2\">\n            {onMarkComplete && (\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onMarkComplete(item);\n                }}\n                className=\"text-xs px-2 py-1 bg-green-100 text-green-700 rounded hover:bg-green-200\"\n              >\n                Complete\n              </button>\n            )}\n            {onReschedule && (\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onReschedule(item);\n                }}\n                className=\"text-xs px-2 py-1 bg-gray-100 text-gray-700 rounded hover:bg-gray-200\"\n              >\n                Reschedule\n              </button>\n            )}\n          </div>\n        )}\n      </div>\n    </motion.div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\TodaysScheduleWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\TreatmentPlanProgress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\WellnessStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\WellnessStatusWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\quickActions\\AccessibilityCommandCenter.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'customPresetName' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":26,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setCustomPresetName' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":26,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":47}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, _useEffect, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Eye, _EyeOff, Volume2, _VolumeX, Type, Palette, _Monitor,\n  Moon, _Sun, _Zap, ZapOff, Globe, Keyboard, Mouse,\n  Smartphone, Headphones, _Settings, _Check, _X,\n  _ChevronRight, _ChevronDown, RefreshCw, _Download,\n  _Upload, HelpCircle, _Info, AlertCircle, Brain, Mic,\n  MessageSquare, Edit3, Clock, Layout, Book\n} from 'lucide-react';\nimport { useAccessibilityStore, type AccessibilitySettings } from '../../../../stores/accessibilityStore';\n\ninterface AccessibilityCommandCenterProps {\n  onSettingChange?: (setting: string, value: unknown) => void;\n  _showCompactView?: boolean;\n}\n\nexport function AccessibilityCommandCenter({\n  onSettingChange,\n  _showCompactView = false\n}: AccessibilityCommandCenterProps) {\n  const { settings, updateSetting, _presets, applyPreset, resetToDefaults } = useAccessibilityStore();\n  \n  const [activeSection, setActiveSection] = useState<string>('visual');\n  const [showPresetMenu, setShowPresetMenu] = useState(false);\n  const [customPresetName, setCustomPresetName] = useState('');\n  const [showHelp, setShowHelp] = useState(false);\n  const [testMode, setTestMode] = useState(false);\n\n  // Accessibility sections configuration\n  const sections = [\n    {\n      id: 'visual',\n      label: 'Visual',\n      icon: Eye,\n      description: 'Display and contrast settings'\n    },\n    {\n      id: 'audio',\n      label: 'Audio',\n      icon: Volume2,\n      description: 'Sound and voice settings'\n    },\n    {\n      id: 'interaction',\n      label: 'Interaction',\n      icon: Mouse,\n      description: 'Navigation and input methods'\n    },\n    {\n      id: 'cognitive',\n      label: 'Cognitive',\n      icon: Brain,\n      description: 'Simplification and focus aids'\n    },\n    {\n      id: 'language',\n      label: 'Language',\n      icon: Globe,\n      description: 'Translation and localization'\n    }\n  ];\n\n  // Visual accessibility settings\n  const visualSettings = [\n    {\n      id: 'highContrast',\n      label: 'High Contrast Mode',\n      description: 'Increase contrast for better visibility',\n      type: 'toggle',\n      value: settings.highContrast,\n      icon: Palette\n    },\n    {\n      id: 'darkMode',\n      label: 'Dark Mode',\n      description: 'Reduce eye strain in low light',\n      type: 'select',\n      value: settings.darkMode,\n      options: ['auto', 'light', 'dark'],\n      icon: Moon\n    },\n    {\n      id: 'fontSize',\n      label: 'Text Size',\n      description: 'Adjust text size for readability',\n      type: 'slider',\n      value: settings.fontSize,\n      min: 80,\n      max: 200,\n      step: 10,\n      unit: '%',\n      icon: Type\n    },\n    {\n      id: 'lineSpacing',\n      label: 'Line Spacing',\n      description: 'Increase space between lines',\n      type: 'slider',\n      value: settings.lineSpacing,\n      min: 1,\n      max: 3,\n      step: 0.25,\n      icon: Type\n    },\n    {\n      id: 'colorBlindMode',\n      label: 'Color Blind Mode',\n      description: 'Adjust colors for color vision deficiency',\n      type: 'select',\n      value: settings.colorBlindMode || 'none',\n      options: ['none', 'protanopia', 'deuteranopia', 'tritanopia', 'achromatopsia'],\n      icon: Palette\n    },\n    {\n      id: 'focusIndicator',\n      label: 'Focus Indicators',\n      description: 'Highlight focused elements',\n      type: 'select',\n      value: settings.focusIndicator || 'default',\n      options: ['default', 'bold', 'animated', 'custom'],\n      icon: Eye\n    }\n  ];\n\n  // Audio accessibility settings\n  const audioSettings = [\n    {\n      id: 'screenReader',\n      label: 'Screen Reader',\n      description: 'Enable text-to-speech for content',\n      type: 'toggle',\n      value: settings.screenReader,\n      icon: Headphones\n    },\n    {\n      id: 'voiceSpeed',\n      label: 'Voice Speed',\n      description: 'Adjust screen reader speech rate',\n      type: 'slider',\n      value: settings.voiceSpeed,\n      min: 0.5,\n      max: 2,\n      step: 0.1,\n      icon: Volume2\n    },\n    {\n      id: 'voicePitch',\n      label: 'Voice Pitch',\n      description: 'Adjust voice pitch preference',\n      type: 'slider',\n      value: settings.voicePitch,\n      min: 0.5,\n      max: 2,\n      step: 0.1,\n      icon: Volume2\n    },\n    {\n      id: 'soundEffects',\n      label: 'Sound Effects',\n      description: 'Enable audio feedback for actions',\n      type: 'toggle',\n      value: settings.soundEffects !== false,\n      icon: Volume2\n    },\n    {\n      id: 'voiceCommands',\n      label: 'Voice Commands',\n      description: 'Control app with voice',\n      type: 'toggle',\n      value: settings.voiceCommands,\n      icon: Mic\n    },\n    {\n      id: 'captions',\n      label: 'Auto Captions',\n      description: 'Show captions for audio content',\n      type: 'toggle',\n      value: settings.captions,\n      icon: MessageSquare\n    }\n  ];\n\n  // Interaction accessibility settings\n  const interactionSettings = [\n    {\n      id: 'keyboardNavigation',\n      label: 'Keyboard Navigation',\n      description: 'Navigate without mouse',\n      type: 'toggle',\n      value: settings.keyboardNavigation !== false,\n      icon: Keyboard\n    },\n    {\n      id: 'stickyKeys',\n      label: 'Sticky Keys',\n      description: 'Press shortcuts one key at a time',\n      type: 'toggle',\n      value: settings.stickyKeys,\n      icon: Keyboard\n    },\n    {\n      id: 'mouseKeys',\n      label: 'Mouse Keys',\n      description: 'Control mouse with keyboard',\n      type: 'toggle',\n      value: settings.mouseKeys,\n      icon: Mouse\n    },\n    {\n      id: 'touchTargetSize',\n      label: 'Touch Target Size',\n      description: 'Increase button and link sizes',\n      type: 'select',\n      value: settings.touchTargetSize,\n      options: ['default', 'large', 'extra-large'],\n      icon: Smartphone\n    },\n    {\n      id: 'gestureControl',\n      label: 'Gesture Control',\n      description: 'Use swipes and gestures',\n      type: 'toggle',\n      value: settings.gestureControl !== false,\n      icon: Smartphone\n    },\n    {\n      id: 'dwellClicking',\n      label: 'Dwell Clicking',\n      description: 'Click by hovering',\n      type: 'toggle',\n      value: settings.dwellClicking,\n      icon: Mouse\n    }\n  ];\n\n  // Cognitive accessibility settings\n  const cognitiveSettings = [\n    {\n      id: 'reducedMotion',\n      label: 'Reduced Motion',\n      description: 'Minimize animations',\n      type: 'toggle',\n      value: settings.reducedMotion,\n      icon: ZapOff\n    },\n    {\n      id: 'simplifiedUI',\n      label: 'Simplified Interface',\n      description: 'Hide complex features',\n      type: 'toggle',\n      value: settings.simplifiedUI,\n      icon: Layout\n    },\n    {\n      id: 'readingMode',\n      label: 'Reading Mode',\n      description: 'Focus on content only',\n      type: 'toggle',\n      value: settings.readingMode,\n      icon: Book\n    },\n    {\n      id: 'autoComplete',\n      label: 'Auto Complete',\n      description: 'Suggest text as you type',\n      type: 'toggle',\n      value: settings.autoComplete !== false,\n      icon: Edit3\n    },\n    {\n      id: 'timeouts',\n      label: 'Extended Timeouts',\n      description: 'More time for actions',\n      type: 'toggle',\n      value: settings.extendedTimeouts,\n      icon: Clock\n    },\n    {\n      id: 'errorPrevention',\n      label: 'Error Prevention',\n      description: 'Confirm important actions',\n      type: 'toggle',\n      value: settings.errorPrevention !== false,\n      icon: AlertCircle\n    }\n  ];\n\n  // Get settings for active section\n  const getActiveSettings = () => {\n    switch (_activeSection) {\n      case 'visual': return visualSettings;\n      case 'audio': return audioSettings;\n      case 'interaction': return interactionSettings;\n      case 'cognitive': return cognitiveSettings;\n      default: return visualSettings;\n    }\n  };\n\n  // Handle setting change\n  const handleSettingChange = useCallback((settingId: string, value: unknown) => {\n    updateSetting(settingId as keyof AccessibilitySettings, value);\n    onSettingChange?.(settingId, value);\n    \n    // Announce change for screen readers\n    if (settings.screenReader) {\n      const _utterance = new SpeechSynthesisUtterance(`${settingId} changed to ${value}`);\n      window.speechSynthesis.speak(_utterance);\n    }\n  }, [updateSetting, onSettingChange, settings.screenReader]);\n\n  // Render setting control based on type\n  const renderSettingControl = (setting: unknown) => {\n    switch (setting.type) {\n      case 'toggle':\n        return (\n          <button\n            onClick={() => handleSettingChange(setting.id, !setting.value)}\n            className={`\n              relative inline-flex h-6 w-11 items-center rounded-full transition-colors\n              ${setting.value ? 'bg-blue-600' : 'bg-gray-300'}\n              focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\n            `}\n            role=\"switch\"\n            aria-checked={setting.value}\n            aria-label={`${setting.label}: ${setting.value ? 'On' : 'Off'}`}\n          >\n            <span\n              className={`\n                inline-block h-4 w-4 transform rounded-full bg-white transition-transform\n                ${setting.value ? 'translate-x-6' : 'translate-x-1'}\n              `}\n            />\n          </button>\n        );\n        \n      case 'select':\n        return (\n          <select\n            value={setting.value}\n            onChange={(e) => handleSettingChange(setting.id, e.target.value)}\n            className=\"px-3 py-1 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            aria-label={setting.label}\n          >\n            {setting.options.map((option: string) => (\n              <option key={option} value={option}>\n                {option.charAt(0).toUpperCase() + option.slice(1)}\n              </option>\n            ))}\n          </select>\n        );\n        \n      case 'slider':\n        return (\n          <div className=\"flex items-center space-x-2\">\n            <input\n              type=\"range\"\n              min={setting.min}\n              max={setting.max}\n              step={setting.step}\n              value={setting.value}\n              onChange={(e) => handleSettingChange(setting.id, parseFloat(e.target.value))}\n              className=\"flex-1\"\n              aria-label={setting.label}\n              aria-valuenow={setting.value}\n              aria-valuemin={setting.min}\n              aria-valuemax={setting.max}\n            />\n            <span className=\"text-sm font-medium w-12 text-right\">\n              {setting.value}{setting.unit || ''}\n            </span>\n          </div>\n        );\n        \n      default:\n        return null;\n    }\n  };\n\n  // Accessibility presets\n  const accessibilityPresets = [\n    {\n      id: 'low-vision',\n      name: 'Low Vision',\n      description: 'Optimized for users with low vision',\n      settings: {\n        highContrast: true,\n        fontSize: 150,\n        lineSpacing: 2,\n        focusIndicator: 'bold'\n      }\n    },\n    {\n      id: 'dyslexia',\n      name: 'Dyslexia Friendly',\n      description: 'Easier reading for dyslexia',\n      settings: {\n        fontSize: 120,\n        lineSpacing: 2,\n        fontFamily: 'OpenDyslexic',\n        backgroundColor: '#FFFBF0'\n      }\n    },\n    {\n      id: 'motor',\n      name: 'Motor Impairment',\n      description: 'Easier interaction for motor difficulties',\n      settings: {\n        touchTargetSize: 'extra-large',\n        stickyKeys: true,\n        dwellClicking: true,\n        extendedTimeouts: true\n      }\n    },\n    {\n      id: 'cognitive',\n      name: 'Cognitive Support',\n      description: 'Simplified and focused interface',\n      settings: {\n        simplifiedUI: true,\n        reducedMotion: true,\n        errorPrevention: true,\n        autoComplete: true\n      }\n    }\n  ];\n\n  if (_showCompactView) {\n    // Compact view for quick access\n    return (\n      <div className=\"p-4 bg-white rounded-lg shadow-sm border border-gray-200\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h3 className=\"text-sm font-semibold text-gray-900\">Quick Accessibility</h3>\n          <button\n            onClick={() => setShowHelp(!showHelp)}\n            className=\"p-1 hover:bg-gray-100 rounded\"\n            aria-label=\"Accessibility help\"\n          >\n            <HelpCircle className=\"h-4 w-4 text-gray-500\" />\n          </button>\n        </div>\n        \n        <div className=\"grid grid-cols-2 gap-2\">\n          <button\n            onClick={() => handleSettingChange('highContrast', !settings.highContrast)}\n            className={`\n              p-2 rounded-lg border text-sm font-medium transition-all\n              ${settings.highContrast \n                ? 'bg-black text-white border-black' \n                : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'\n              }\n            `}\n          >\n            High Contrast\n          </button>\n          \n          <button\n            onClick={() => handleSettingChange('screenReader', !settings.screenReader)}\n            className={`\n              p-2 rounded-lg border text-sm font-medium transition-all\n              ${settings.screenReader \n                ? 'bg-blue-500 text-white border-blue-500' \n                : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'\n              }\n            `}\n          >\n            Screen Reader\n          </button>\n          \n          <button\n            onClick={() => handleSettingChange('fontSize', settings.fontSize === 100 ? 150 : 100)}\n            className=\"p-2 rounded-lg border border-gray-300 text-sm font-medium hover:bg-gray-50\"\n          >\n            Text: {settings.fontSize}%\n          </button>\n          \n          <button\n            onClick={() => handleSettingChange('reducedMotion', !settings.reducedMotion)}\n            className={`\n              p-2 rounded-lg border text-sm font-medium transition-all\n              ${settings.reducedMotion \n                ? 'bg-purple-500 text-white border-purple-500' \n                : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'\n              }\n            `}\n          >\n            Reduced Motion\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  // Full command center view\n  return (\n    <div className=\"bg-white rounded-xl shadow-lg overflow-hidden\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 p-6 text-white\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold mb-2\">Accessibility Command Center</h2>\n            <p className=\"text-blue-100\">Customize your experience for better accessibility</p>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <button\n              onClick={() => setShowPresetMenu(!showPresetMenu)}\n              className=\"px-4 py-2 bg-white bg-opacity-20 rounded-lg hover:bg-opacity-30 transition-colors\"\n            >\n              Presets\n            </button>\n            \n            <button\n              onClick={resetToDefaults}\n              className=\"p-2 bg-white bg-opacity-20 rounded-lg hover:bg-opacity-30 transition-colors\"\n              aria-label=\"Reset to defaults\"\n            >\n              <RefreshCw className=\"h-5 w-5\" />\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Preset menu */}\n      {showPresetMenu && (\n        <div className=\"p-4 bg-blue-50 border-b border-blue-200\">\n          <h3 className=\"text-sm font-semibold text-gray-900 mb-3\">Quick Presets</h3>\n          <div className=\"grid grid-cols-2 gap-2\">\n            {accessibilityPresets.map(preset => (\n              <button\n                key={preset.id}\n                onClick={() => {\n                  applyPreset(preset.settings as Partial<AccessibilitySettings>);\n                  setShowPresetMenu(false);\n                }}\n                className=\"p-3 bg-white rounded-lg hover:shadow-md transition-all text-left\"\n              >\n                <div className=\"font-medium text-sm\">{preset.name}</div>\n                <div className=\"text-xs text-gray-500 mt-1\">{preset.description}</div>\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Section tabs */}\n      <div className=\"flex border-b border-gray-200 overflow-x-auto\">\n        {sections.map(section => {\n          const Icon = section.icon;\n          return (\n            <button\n              key={section.id}\n              onClick={() => setActiveSection(section.id)}\n              className={`\n                flex items-center space-x-2 px-4 py-3 border-b-2 transition-colors whitespace-nowrap\n                ${activeSection === section.id \n                  ? 'border-blue-500 text-blue-600 bg-blue-50' \n                  : 'border-transparent text-gray-600 hover:text-gray-900 hover:bg-gray-50'\n                }\n              `}\n              aria-selected={activeSection === section.id}\n              role=\"tab\"\n            >\n              <Icon className=\"h-4 w-4\" />\n              <span className=\"font-medium\">{section.label}</span>\n            </button>\n          );\n        })}\n      </div>\n\n      {/* _Settings content */}\n      <div className=\"p-6\">\n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={activeSection}\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            className=\"space-y-4\"\n          >\n            {getActiveSettings().map(setting => {\n              const Icon = setting.icon;\n              return (\n                <div\n                  key={setting.id}\n                  className=\"flex items-start space-x-4 p-4 rounded-lg hover:bg-gray-50 transition-colors\"\n                >\n                  <div className=\"p-2 bg-gray-100 rounded-lg\">\n                    <Icon className=\"h-5 w-5 text-gray-600\" />\n                  </div>\n                  \n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <label className=\"font-medium text-gray-900\">\n                        {setting.label}\n                      </label>\n                      {renderSettingControl(setting)}\n                    </div>\n                    <p className=\"text-sm text-gray-500\">{setting.description}</p>\n                  </div>\n                </div>\n              );\n            })}\n          </motion.div>\n        </AnimatePresence>\n      </div>\n\n      {/* Test mode */}\n      <div className=\"px-6 pb-6\">\n        <button\n          onClick={() => setTestMode(!testMode)}\n          className=\"w-full px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors\"\n        >\n          {testMode ? 'Exit Test Mode' : 'Test Accessibility _Settings'}\n        </button>\n        \n        {testMode && (\n          <div className=\"mt-4 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n            <p className=\"text-sm text-yellow-800\">\n              Test mode active. Navigate the interface to experience your accessibility settings.\n              All changes are applied in real-time.\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Help overlay */}\n      {showHelp && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-xl p-6 max-w-md\">\n            <h3 className=\"text-lg font-semibold mb-3\">Accessibility Help</h3>\n            <div className=\"space-y-3 text-sm text-gray-600\">\n              <p>• Use Tab to navigate between controls</p>\n              <p>• Press Space or Enter to activate buttons</p>\n              <p>• Use arrow keys to adjust sliders</p>\n              <p>• Screen reader users: Enable screen reader mode for audio feedback</p>\n              <p>• Keyboard shortcuts are available for most actions</p>\n            </div>\n            <button\n              onClick={() => setShowHelp(false)}\n              className=\"mt-4 w-full px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600\"\n            >\n              Close Help\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\quickActions\\ActionRecommendationEngine.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\quickActions\\CrisisQuickActionsHub.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'activeAction' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":54,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Phone, MessageSquare, MapPin, Shield, Heart, Users,\n  AlertCircle, Activity, Brain, _Headphones, _Navigation,\n  _Clock, CheckCircle, _XCircle, ChevronRight, _Volume2,\n  _Zap, _Send, _Copy, Share2, ExternalLink, _Wifi, WifiOff, X\n} from 'lucide-react';\nimport { useCrisisAssessment } from '../../../../hooks/useCrisisAssessment';\nimport { useGeolocation } from '../../../../hooks/useGeolocation';\n\ninterface CrisisQuickActionsHubProps {\n  _userId: string;\n  onActionTaken?: (action: string, details?: unknown) => void;\n  emergencyContacts?: EmergencyContact[];\n  safetyPlan?: SafetyPlan;\n}\n\ninterface EmergencyContact {\n  id: string;\n  name: string;\n  phone: string;\n  relationship: string;\n  isAvailable?: boolean;\n  isPrimary?: boolean;\n}\n\ninterface SafetyPlan {\n  warningSignals: string[];\n  copingStrategies: string[];\n  safetyContacts: EmergencyContact[];\n  professionalContacts: ProfessionalContact[];\n  safeLocations: string[];\n  reasonsToLive: string[];\n}\n\ninterface ProfessionalContact {\n  id: string;\n  name: string;\n  role: string;\n  phone: string;\n  available247?: boolean;\n}\n\nexport function CrisisQuickActionsHub({\n  _userId,\n  onActionTaken,\n  emergencyContacts = [],\n  safetyPlan\n}: CrisisQuickActionsHubProps) {\n  const { assessmentData, _isAssessing, _updateAssessment } = useCrisisAssessment();\n  const { location, error: _locationError, loading } = useGeolocation();\n  \n  const [activeAction, setActiveAction] = useState<string | null>(null);\n  const [showSafetyPlan, setShowSafetyPlan] = useState(false);\n  const [showGroundingExercise, setShowGroundingExercise] = useState(false);\n  const [breathingActive, setBreathingActive] = useState(false);\n  const [emergencyCallInProgress, setEmergencyCallInProgress] = useState(false);\n  const [copiedToClipboard, setCopiedToClipboard] = useState<string | null>(null);\n  const [offlineMode, setOfflineMode] = useState(!navigator.onLine);\n\n  // Emergency hotlines\n  const emergencyHotlines = [\n    {\n      id: '988',\n      name: '988 Suicide & Crisis Lifeline',\n      number: '988',\n      description: '24/7 crisis support',\n      type: 'crisis',\n      available247: true\n    },\n    {\n      id: 'crisis-text',\n      name: 'Crisis Text Line',\n      number: '741741',\n      description: 'Text HOME to 741741',\n      type: 'text',\n      available247: true\n    },\n    {\n      id: '911',\n      name: 'Emergency Services',\n      number: '911',\n      description: 'Immediate emergency help',\n      type: 'emergency',\n      available247: true\n    }\n  ];\n\n  // Monitor online/offline status\n  useEffect(() => {\n    const handleOnline = () => setOfflineMode(false);\n    const handleOffline = () => setOfflineMode(true);\n    \n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    \n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  // Handle emergency call\n  const handleEmergencyCall = useCallback((number: string, name: string) => {\n    setEmergencyCallInProgress(true);\n    setActiveAction('calling');\n    \n    // Attempt to make call\n    window.location.href = `tel:${number}`;\n    \n    // Log action\n    onActionTaken?.('emergency_call', {\n      number,\n      name,\n      timestamp: new Date().toISOString(),\n      location\n    });\n    \n    // Reset after delay\n    setTimeout(() => {\n      setEmergencyCallInProgress(false);\n      setActiveAction(null);\n    }, 3000);\n  }, [location, onActionTaken]);\n\n  // Handle text crisis line\n  const handleCrisisText = useCallback((number: string) => {\n    setActiveAction('texting');\n    \n    // Attempt to open SMS\n    window.location.href = `sms:${number}?body=HOME`;\n    \n    onActionTaken?.('crisis_text', {\n      number,\n      timestamp: new Date().toISOString()\n    });\n    \n    setTimeout(() => setActiveAction(null), 3000);\n  }, [onActionTaken]);\n\n  // Share location for emergency\n  const shareEmergencyLocation = useCallback(async () => {\n    if (location) {\n      const googleMapsUrl = `https://www.google.com/maps?q=${location.coords.latitude},${location.coords.longitude}`;\n      const _message = `Emergency: I need help. My location: ${googleMapsUrl}`;\n      \n      // Copy to clipboard\n      navigator.clipboard.writeText(_message);\n      setCopiedToClipboard('location');\n      \n      onActionTaken?.('location_shared', {\n        location,\n        timestamp: new Date().toISOString()\n      });\n      \n      setTimeout(() => setCopiedToClipboard(null), 3000);\n    }\n  }, [location, onActionTaken]);\n\n  // Start grounding exercise\n  const startGroundingExercise = useCallback(() => {\n    setShowGroundingExercise(true);\n    setActiveAction('grounding');\n    \n    onActionTaken?.('grounding_started', {\n      timestamp: new Date().toISOString()\n    });\n  }, [onActionTaken]);\n\n  // Start breathing exercise\n  const startBreathingExercise = useCallback(() => {\n    setBreathingActive(true);\n    setActiveAction('breathing');\n    \n    onActionTaken?.('breathing_started', {\n      timestamp: new Date().toISOString()\n    });\n  }, [onActionTaken]);\n\n  // Get crisis level color based on assessment data\n  const getCrisisLevelColor = () => {\n    if (!assessmentData?.overallRisk) return 'blue';\n    \n    if (assessmentData.overallRisk >= 8) return 'red';      // Critical\n    if (assessmentData.overallRisk >= 6) return 'orange';   // High\n    if (assessmentData.overallRisk >= 4) return 'yellow';   // Moderate\n    return 'green';                                         // Low\n  };\n\n  return (\n    <div className=\"bg-white rounded-xl shadow-xl overflow-hidden\">\n      {/* Crisis Level Header */}\n      <div className={`bg-gradient-to-r from-${getCrisisLevelColor()}-500 to-${getCrisisLevelColor()}-600 p-4 text-white`}>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <AlertCircle className=\"h-6 w-6 animate-pulse\" />\n            <div>\n              <h2 className=\"text-lg font-bold\">Crisis Support Hub</h2>\n              <p className=\"text-sm opacity-90\">Immediate help available 24/7</p>\n            </div>\n          </div>\n          \n          {offlineMode && (\n            <div className=\"flex items-center space-x-1 px-2 py-1 bg-white bg-opacity-20 rounded-lg\">\n              <WifiOff className=\"h-4 w-4\" />\n              <span className=\"text-xs\">Offline Mode</span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Emergency Hotlines - Always Visible */}\n      <div className=\"p-4 bg-red-50 border-b border-red-200\">\n        <h3 className=\"text-sm font-semibold text-red-900 mb-3\">Emergency Hotlines</h3>\n        <div className=\"space-y-2\">\n          {emergencyHotlines.map(hotline => (\n            <motion.button\n              key={hotline.id}\n              whileHover={{ scale: 1.02 }}\n              whileTap={{ scale: 0.98 }}\n              onClick={() => {\n                if (hotline.type === 'text') {\n                  handleCrisisText(hotline.number);\n                } else {\n                  handleEmergencyCall(hotline.number, hotline.name);\n                }\n              }}\n              className={`\n                w-full p-3 rounded-lg flex items-center justify-between\n                ${hotline.type === 'emergency' \n                  ? 'bg-red-600 text-white hover:bg-red-700' \n                  : 'bg-white border border-red-300 hover:border-red-400 text-gray-900'\n                }\n                transition-all shadow-sm hover:shadow-md\n              `}\n              disabled={emergencyCallInProgress}\n            >\n              <div className=\"flex items-center space-x-3\">\n                {hotline.type === 'text' ? (\n                  <MessageSquare className=\"h-5 w-5\" />\n                ) : (\n                  <Phone className=\"h-5 w-5\" />\n                )}\n                <div className=\"text-left\">\n                  <div className=\"font-semibold\">{hotline.name}</div>\n                  <div className={`text-xs ${hotline.type === 'emergency' ? 'text-red-100' : 'text-gray-500'}`}>\n                    {hotline.description}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <span className=\"font-bold text-lg\">{hotline.number}</span>\n                {hotline.available247 && (\n                  <span className={`text-xs px-1.5 py-0.5 rounded-full ${\n                    hotline.type === 'emergency' \n                      ? 'bg-red-700 text-red-100' \n                      : 'bg-green-100 text-green-700'\n                  }`}>\n                    24/7\n                  </span>\n                )}\n              </div>\n            </motion.button>\n          ))}\n        </div>\n      </div>\n\n      {/* Quick Crisis Actions */}\n      <div className=\"p-4 space-y-3\">\n        {/* GPS Location Sharing */}\n        <motion.button\n          whileHover={{ scale: 1.02 }}\n          whileTap={{ scale: 0.98 }}\n          onClick={shareEmergencyLocation}\n          disabled={loading}\n          className=\"w-full p-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-all flex items-center justify-between\"\n        >\n          <div className=\"flex items-center space-x-3\">\n            <MapPin className=\"h-5 w-5\" />\n            <div className=\"text-left\">\n              <div className=\"font-semibold\">Share Emergency Location</div>\n              <div className=\"text-xs text-blue-100\">Send GPS coordinates to contacts</div>\n            </div>\n          </div>\n          \n          {copiedToClipboard === 'location' ? (\n            <CheckCircle className=\"h-5 w-5\" />\n          ) : loading ? (\n            <div className=\"animate-spin rounded-full h-5 w-5 border-2 border-white border-t-transparent\" />\n          ) : (\n            <Share2 className=\"h-5 w-5\" />\n          )}\n        </motion.button>\n\n        {/* Crisis Buddy Contact */}\n        {emergencyContacts.length > 0 && (\n          <div className=\"space-y-2\">\n            <h4 className=\"text-sm font-semibold text-gray-700\">Crisis Buddies</h4>\n            {emergencyContacts.slice(0, 2).map(contact => (\n              <motion.button\n                key={contact.id}\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n                onClick={() => handleEmergencyCall(contact.phone, contact.name)}\n                className=\"w-full p-3 bg-white border border-gray-300 rounded-lg hover:border-blue-400 transition-all\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Users className=\"h-5 w-5 text-blue-500\" />\n                    <div className=\"text-left\">\n                      <div className=\"font-medium\">{contact.name}</div>\n                      <div className=\"text-xs text-gray-500\">{contact.relationship}</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Phone className=\"h-4 w-4 text-gray-400\" />\n                    {contact.isAvailable && (\n                      <span className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                    )}\n                  </div>\n                </div>\n              </motion.button>\n            ))}\n          </div>\n        )}\n\n        {/* Safety Plan Access */}\n        <motion.button\n          whileHover={{ scale: 1.02 }}\n          whileTap={{ scale: 0.98 }}\n          onClick={() => setShowSafetyPlan(!showSafetyPlan)}\n          className=\"w-full p-3 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-all flex items-center justify-between\"\n        >\n          <div className=\"flex items-center space-x-3\">\n            <Shield className=\"h-5 w-5\" />\n            <div className=\"text-left\">\n              <div className=\"font-semibold\">Safety Plan</div>\n              <div className=\"text-xs text-purple-100\">Access your personalized safety plan</div>\n            </div>\n          </div>\n          <ChevronRight className={`h-5 w-5 transform transition-transform ${showSafetyPlan ? 'rotate-90' : ''}`} />\n        </motion.button>\n\n        {/* Grounding Techniques */}\n        <div className=\"grid grid-cols-2 gap-2\">\n          <motion.button\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={startGroundingExercise}\n            className=\"p-3 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-all\"\n          >\n            <Brain className=\"h-5 w-5 mx-auto mb-1\" />\n            <div className=\"text-xs font-semibold\">Grounding</div>\n            <div className=\"text-xs opacity-80\">5-4-3-2-1</div>\n          </motion.button>\n          \n          <motion.button\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={startBreathingExercise}\n            className=\"p-3 bg-cyan-500 text-white rounded-lg hover:bg-cyan-600 transition-all\"\n          >\n            <Activity className=\"h-5 w-5 mx-auto mb-1\" />\n            <div className=\"text-xs font-semibold\">Breathe</div>\n            <div className=\"text-xs opacity-80\">4-7-8 Pattern</div>\n          </motion.button>\n        </div>\n\n        {/* Crisis Chat */}\n        <motion.button\n          whileHover={{ scale: 1.02 }}\n          whileTap={{ scale: 0.98 }}\n          onClick={() => {\n            onActionTaken?.('crisis_chat_opened', { timestamp: new Date().toISOString() });\n          }}\n          className=\"w-full p-3 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 transition-all flex items-center justify-between\"\n        >\n          <div className=\"flex items-center space-x-3\">\n            <MessageSquare className=\"h-5 w-5\" />\n            <div className=\"text-left\">\n              <div className=\"font-semibold\">Crisis Chat</div>\n              <div className=\"text-xs text-indigo-100\">Connect with a counselor online</div>\n            </div>\n          </div>\n          <ExternalLink className=\"h-4 w-4\" />\n        </motion.button>\n      </div>\n\n      {/* Safety Plan Expansion */}\n      <AnimatePresence>\n        {showSafetyPlan && safetyPlan && (\n          <motion.div\n            initial={{ height: 0, opacity: 0 }}\n            animate={{ height: 'auto', opacity: 1 }}\n            exit={{ height: 0, opacity: 0 }}\n            className=\"px-4 pb-4 space-y-3\"\n          >\n            <div className=\"p-3 bg-yellow-50 rounded-lg\">\n              <h4 className=\"text-sm font-semibold text-yellow-900 mb-2\">Warning Signals</h4>\n              <ul className=\"text-xs text-yellow-700 space-y-1\">\n                {safetyPlan.warningSignals.slice(0, 3).map((signal, idx) => (\n                  <li key={idx} className=\"flex items-start\">\n                    <span className=\"mr-2\">•</span>\n                    <span>{signal}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n            \n            <div className=\"p-3 bg-green-50 rounded-lg\">\n              <h4 className=\"text-sm font-semibold text-green-900 mb-2\">Coping Strategies</h4>\n              <ul className=\"text-xs text-green-700 space-y-1\">\n                {safetyPlan.copingStrategies.slice(0, 3).map((strategy, idx) => (\n                  <li key={idx} className=\"flex items-start\">\n                    <CheckCircle className=\"h-3 w-3 mr-2 mt-0.5 flex-shrink-0\" />\n                    <span>{strategy}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n            \n            <div className=\"p-3 bg-blue-50 rounded-lg\">\n              <h4 className=\"text-sm font-semibold text-blue-900 mb-2\">Reasons to Live</h4>\n              <ul className=\"text-xs text-blue-700 space-y-1\">\n                {safetyPlan.reasonsToLive.slice(0, 3).map((reason, idx) => (\n                  <li key={idx} className=\"flex items-start\">\n                    <Heart className=\"h-3 w-3 mr-2 mt-0.5 flex-shrink-0 text-red-500\" />\n                    <span>{reason}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Grounding Exercise Modal */}\n      {showGroundingExercise && (\n        <GroundingExerciseModal\n          onClose={() => {\n            setShowGroundingExercise(false);\n            setActiveAction(null);\n          }}\n          onComplete={() => {\n            onActionTaken?.('grounding_completed', { timestamp: new Date().toISOString() });\n          }}\n        />\n      )}\n\n      {/* Breathing Exercise Overlay */}\n      {breathingActive && (\n        <BreathingExerciseOverlay\n          onClose={() => {\n            setBreathingActive(false);\n            setActiveAction(null);\n          }}\n          onComplete={() => {\n            onActionTaken?.('breathing_completed', { timestamp: new Date().toISOString() });\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\n// Grounding Exercise Modal Component\nfunction GroundingExerciseModal({ onClose, onComplete }: { onClose: () => void; onComplete: () => void }) {\n  const [step, setStep] = useState(0);\n  const steps = [\n    { sense: 'See', count: 5, instruction: 'Name 5 things you can see around you' },\n    { sense: 'Touch', count: 4, instruction: 'Name 4 things you can touch' },\n    { sense: 'Hear', count: 3, instruction: 'Name 3 things you can hear' },\n    { sense: 'Smell', count: 2, instruction: 'Name 2 things you can smell' },\n    { sense: 'Taste', count: 1, instruction: 'Name 1 thing you can taste' }\n  ];\n\n  const nextStep = () => {\n    if (step < steps.length - 1) {\n      setStep(step + 1);\n    } else {\n      onComplete();\n      onClose();\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <motion.div\n        initial={{ scale: 0.9, opacity: 0 }}\n        animate={{ scale: 1, opacity: 1 }}\n        className=\"bg-white rounded-xl p-6 max-w-md w-full\"\n      >\n        <h3 className=\"text-xl font-bold mb-4\">5-4-3-2-1 Grounding Exercise</h3>\n        \n        <div className=\"mb-6\">\n          <div className=\"flex justify-between mb-2\">\n            {steps.map((_, idx) => (\n              <div\n                key={idx}\n                className={`h-2 flex-1 mx-0.5 rounded-full ${\n                  idx <= step ? 'bg-green-500' : 'bg-gray-200'\n                }`}\n              />\n            ))}\n          </div>\n          \n          <div className=\"text-center py-8\">\n            {steps[step] && (\n              <>\n                <div className=\"text-4xl font-bold text-green-600 mb-2\">\n                  {steps[step].count}\n                </div>\n                <div className=\"text-lg font-semibold mb-2\">{steps[step].sense}</div>\n                <p className=\"text-gray-600\">{steps[step].instruction}</p>\n              </>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"flex space-x-3\">\n          <button\n            onClick={onClose}\n            className=\"flex-1 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={nextStep}\n            className=\"flex-1 px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600\"\n          >\n            {step < steps.length - 1 ? 'Next' : 'Complete'}\n          </button>\n        </div>\n      </motion.div>\n    </div>\n  );\n}\n\n// Breathing Exercise Overlay Component\nfunction BreathingExerciseOverlay({ onClose, onComplete }: { onClose: () => void; onComplete: () => void }) {\n  const [phase, setPhase] = useState<'inhale' | 'hold' | 'exhale'>('inhale');\n  const [count, setCount] = useState(0);\n  const [cycles, setCycles] = useState(0);\n\n  useEffect(() => {\n    const phases = {\n      inhale: { duration: 4, next: 'hold' as const },\n      hold: { duration: 7, next: 'exhale' as const },\n      exhale: { duration: 8, next: 'inhale' as const }\n    };\n\n    const _timer = setInterval(() => {\n      setCount(prev => {\n        if (prev >= phases[phase].duration - 1) {\n          const nextPhase = phases[phase].next;\n          setPhase(_nextPhase);\n          \n          if (nextPhase === 'inhale') {\n            setCycles(c => c + 1);\n            if (cycles >= 3) {\n              onComplete();\n              onClose();\n            }\n          }\n          \n          return 0;\n        }\n        return prev + 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(_timer);\n  }, [phase, cycles, onComplete, onClose]);\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50\">\n      <motion.div\n        animate={{\n          scale: phase === 'inhale' ? 1.2 : phase === 'hold' ? 1.2 : 0.8\n        }}\n        transition={{ duration: phase === 'inhale' ? 4 : phase === 'hold' ? 0 : 8 }}\n        className=\"relative\"\n      >\n        <div className=\"w-48 h-48 rounded-full bg-gradient-to-br from-cyan-400 to-blue-600 flex items-center justify-center\">\n          <div className=\"text-white text-center\">\n            <div className=\"text-3xl font-bold mb-2 capitalize\">{phase}</div>\n            <div className=\"text-5xl font-bold\">{count + 1}</div>\n          </div>\n        </div>\n        \n        <button\n          onClick={onClose}\n          className=\"absolute -top-4 -right-4 p-2 bg-white rounded-full shadow-lg hover:bg-gray-100\"\n        >\n          <X className=\"h-4 w-4\" />\n        </button>\n      </motion.div>\n      \n      <div className=\"absolute bottom-8 text-white text-center\">\n        <p className=\"text-sm opacity-80\">Cycle {cycles + 1} of 4</p>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\quickActions\\GestureHandler.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\quickActions\\KeyboardNavigator.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'handleTypeAheadSearch', 'keyboardShortcuts', 'navigateDown', 'navigateLeft', 'navigateRight', and 'navigateUp'. Either include them or remove the dependency array.","line":149,"column":6,"nodeType":"ArrayExpression","endLine":149,"endColumn":67,"suggestions":[{"desc":"Update the dependencies array to be: [isActive, keyboardShortcuts, onKeyPress, actions, onActionSelect, navigateDown, navigateUp, navigateLeft, navigateRight, focusedIndex, handleTypeAheadSearch]","fix":{"range":[3942,4003],"text":"[isActive, keyboardShortcuts, onKeyPress, actions, onActionSelect, navigateDown, navigateUp, navigateLeft, navigateRight, focusedIndex, handleTypeAheadSearch]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { QuickAction } from '../../../../types/dashboard';\n\ninterface KeyboardNavigatorProps {\n  actions: QuickAction[];\n  onActionSelect: (action: QuickAction) => void;\n  onKeyPress?: (key: string) => void;\n  isActive: boolean;\n}\n\nexport function KeyboardNavigator({\n  actions,\n  onActionSelect,\n  onKeyPress,\n  isActive\n}: KeyboardNavigatorProps) {\n  const [focusedIndex, setFocusedIndex] = useState(-1);\n  const [searchBuffer, setSearchBuffer] = useState('');\n  const searchTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // Keyboard shortcuts map\n  const keyboardShortcuts: Record<string, string> = {\n    'alt+m': 'mood',\n    'alt+j': 'journal',\n    'alt+b': 'breathe',\n    'alt+h': 'help',\n    'alt+c': 'crisis',\n    'alt+t': 'therapy',\n    'alt+s': 'schedule',\n    'alt+g': 'grounding',\n    'alt+p': 'pill',\n    'alt+d': 'meditation',\n    'alt+v': 'voice',\n    'alt+k': 'keyboard',\n    'alt+?': 'shortcuts',\n    'alt+/': 'search',\n    'ctrl+space': 'quick_access',\n    'escape': 'close'\n  };\n\n  // Handle keyboard navigation\n  const handleKeyDown = useCallback((event: KeyboardEvent) => {\n    if (!isActive) return;\n\n    const key = event.key.toLowerCase();\n    const isAlt = event.altKey;\n    const isCtrl = event.ctrlKey;\n    const _isShift = event.shiftKey;\n    const isMeta = event.metaKey;\n\n    // Construct key combination string\n    let keyCombo = '';\n    if (_isCtrl) keyCombo += 'ctrl+';\n    if (_isAlt) keyCombo += 'alt+';\n    if (_isShift) keyCombo += 'shift+';\n    if (_isMeta) keyCombo += 'meta+';\n    keyCombo += key;\n\n    // Check for direct keyboard shortcuts\n    if (keyboardShortcuts[keyCombo]) {\n      event.preventDefault();\n      onKeyPress?.(keyCombo);\n      \n      // Find and execute matching action\n      const _matchingAction = actions.find(a => \n        a.keyboard?.toLowerCase() === keyCombo ||\n        a.icon === keyboardShortcuts[keyCombo]\n      );\n      \n      if (_matchingAction) {\n        onActionSelect(_matchingAction);\n      }\n      return;\n    }\n\n    // Navigation keys\n    switch (_key) {\n      case 'arrowdown':\n        event.preventDefault();\n        navigateDown();\n        break;\n        \n      case 'arrowup':\n        event.preventDefault();\n        navigateUp();\n        break;\n        \n      case 'arrowleft':\n        event.preventDefault();\n        navigateLeft();\n        break;\n        \n      case 'arrowright':\n        event.preventDefault();\n        navigateRight();\n        break;\n        \n      case 'enter':\n      case ' ':\n        event.preventDefault();\n        if (focusedIndex >= 0 && focusedIndex < actions.length && actions[focusedIndex]) {\n          onActionSelect(actions[focusedIndex]);\n        }\n        break;\n        \n      case 'home':\n        event.preventDefault();\n        setFocusedIndex(0);\n        break;\n        \n      case 'end':\n        event.preventDefault();\n        setFocusedIndex(actions.length - 1);\n        break;\n        \n      case 'pageup':\n        event.preventDefault();\n        setFocusedIndex(Math.max(0, focusedIndex - 5));\n        break;\n        \n      case 'pagedown':\n        event.preventDefault();\n        setFocusedIndex(Math.min(actions.length - 1, focusedIndex + 5));\n        break;\n        \n      case 'escape':\n        event.preventDefault();\n        setFocusedIndex(-1);\n        setSearchBuffer('');\n        break;\n        \n      case 'tab':\n        // Allow default tab behavior but track focus\n        if (!event.shiftKey) {\n          setFocusedIndex(prev => (prev + 1) % actions.length);\n        } else {\n          setFocusedIndex(prev => prev <= 0 ? actions.length - 1 : prev - 1);\n        }\n        break;\n        \n      default:\n        // Type-ahead search\n        if (key.length === 1 && !isCtrl && !isAlt && !isMeta) {\n          handleTypeAheadSearch(_key);\n        }\n        break;\n    }\n  }, [isActive, actions, focusedIndex, onActionSelect, onKeyPress]);\n\n  // Grid navigation helpers\n  const navigateDown = () => {\n    const columns = getGridColumns();\n    setFocusedIndex(prev => {\n      const newIndex = prev + columns;\n      return newIndex < actions.length ? newIndex : prev;\n    });\n  };\n\n  const navigateUp = () => {\n    const columns = getGridColumns();\n    setFocusedIndex(prev => {\n      const newIndex = prev - columns;\n      return newIndex >= 0 ? newIndex : prev;\n    });\n  };\n\n  const navigateLeft = () => {\n    setFocusedIndex(prev => {\n      if (prev <= 0) return actions.length - 1;\n      return prev - 1;\n    });\n  };\n\n  const navigateRight = () => {\n    setFocusedIndex(prev => {\n      if (prev >= actions.length - 1) return 0;\n      return prev + 1;\n    });\n  };\n\n  // Get number of grid columns based on container width\n  const getGridColumns = (): number => {\n    if (!containerRef.current) return 2;\n    const width = containerRef.current.offsetWidth;\n    if (width < 640) return 2; // Mobile\n    if (width < 1024) return 3; // Tablet\n    return 4; // Desktop\n  };\n\n  // Type-ahead search functionality\n  const handleTypeAheadSearch = (char: string) => {\n    const newBuffer = searchBuffer + char;\n    setSearchBuffer(_newBuffer);\n\n    // Clear previous timeout\n    if (searchTimeoutRef.current) {\n      clearTimeout(searchTimeoutRef.current);\n    }\n\n    // Find matching action\n    const matchIndex = actions.findIndex(action =>\n      action.label.toLowerCase().startsWith(newBuffer.toLowerCase())\n    );\n\n    if (matchIndex !== -1) {\n      setFocusedIndex(_matchIndex);\n    }\n\n    // Reset search buffer after delay\n    searchTimeoutRef.current = setTimeout(() => {\n      setSearchBuffer('');\n    }, 1500);\n  };\n\n  // Attach keyboard event listeners\n  useEffect(() => {\n    if (_isActive) {\n      window.addEventListener('keydown', handleKeyDown);\n      \n      return () => {\n        window.removeEventListener('keydown', handleKeyDown);\n        if (searchTimeoutRef.current) {\n          clearTimeout(searchTimeoutRef.current);\n        }\n      };\n    }\n  }, [isActive, handleKeyDown]);\n\n  // Update focused element in DOM\n  useEffect(() => {\n    if (focusedIndex >= 0 && containerRef.current) {\n      const buttons = containerRef.current.querySelectorAll('button[data-action-index]');\n      const targetButton = buttons[focusedIndex] as HTMLElement;\n      \n      if (targetButton) {\n        targetButton.focus();\n        targetButton.scrollIntoView({ \n          behavior: 'smooth', \n          block: 'nearest',\n          inline: 'nearest'\n        });\n      }\n    }\n  }, [focusedIndex]);\n\n  // Announce focus changes for screen readers\n  useEffect(() => {\n    if (focusedIndex >= 0 && focusedIndex < actions.length) {\n      const action = actions[focusedIndex];\n      if (!action) return;\n      \n      const announcement = `${action.label}. ${action.description || ''}. ${\n        action.keyboard ? `Keyboard shortcut: ${action.keyboard}` : ''\n      }`;\n      \n      // Create and announce via aria-live region\n      const liveRegion = document.getElementById('keyboard-nav-announcer');\n      if (liveRegion) {\n        liveRegion.textContent = announcement;\n      }\n    }\n  }, [focusedIndex, actions]);\n\n  return (\n    <>\n      {/* Hidden container for tracking focus */}\n      <div ref={containerRef} className=\"sr-only\" aria-hidden=\"true\" />\n      \n      {/* Live region for screen reader announcements */}\n      <div\n        id=\"keyboard-nav-announcer\"\n        className=\"sr-only\"\n        aria-live=\"polite\"\n        aria-atomic=\"true\"\n      />\n      \n      {/* Visual indicator for search buffer */}\n      {searchBuffer && (\n        <div className=\"fixed bottom-4 left-4 z-50 px-3 py-2 bg-gray-900 text-white rounded-lg shadow-lg\">\n          <span className=\"text-sm\">Searching: {searchBuffer}</span>\n        </div>\n      )}\n      \n      {/* Keyboard shortcuts help overlay */}\n      {isActive && focusedIndex === -1 && (\n        <div className=\"fixed inset-0 pointer-events-none z-40\">\n          <div className=\"absolute bottom-20 right-4 bg-white rounded-lg shadow-xl p-4 pointer-events-auto max-w-sm\">\n            <h4 className=\"font-semibold text-sm mb-2\">Keyboard Navigation</h4>\n            <div className=\"space-y-1 text-xs text-gray-600\">\n              <div className=\"flex justify-between\">\n                <span>Arrow keys</span>\n                <span className=\"text-gray-900\">Navigate actions</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Enter/Space</span>\n                <span className=\"text-gray-900\">Select action</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Tab/Shift+Tab</span>\n                <span className=\"text-gray-900\">Move focus</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Type letters</span>\n                <span className=\"text-gray-900\">Quick search</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Alt + key</span>\n                <span className=\"text-gray-900\">Direct shortcuts</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Escape</span>\n                <span className=\"text-gray-900\">Clear focus</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\quickActions\\SmartQuickActionsWidget.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'crisisMode'. Either exclude it or remove the dependency array.","line":84,"column":6,"nodeType":"ArrayExpression","endLine":84,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[3522,3534],"text":"[]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5659,5662],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5659,5662],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Brain, Heart, Phone, Calendar, MessageSquare, Activity,\n  Pill, Book, Users, Sparkles, Music, Shield, AlertCircle,\n  Mic, Keyboard, Eye, Settings, _ChevronRight, Search,\n  Zap, Clock, MapPin, Volume2, Edit3, Home, HelpCircle,\n  Smartphone, Headphones, Wind, Coffee, Moon, Sun\n} from 'lucide-react';\nimport { useQuickActionsContext } from '../../../../hooks/useQuickActionsContext';\nimport { useAccessibilityStore } from '../../../../stores/accessibilityStore';\nimport { useUserPreferences } from '../../../../hooks/useUserPreferences';\nimport { QuickAction } from '../../../../types/dashboard';\nimport { VoiceCommandInterface } from './VoiceCommandInterface';\nimport { GestureHandler } from './GestureHandler';\nimport { KeyboardNavigator } from './KeyboardNavigator';\nimport { ActionRecommendationEngine } from './ActionRecommendationEngine';\n\ninterface SmartQuickActionsWidgetProps {\n  userId: string;\n  currentMood?: string;\n  timeOfDay?: 'morning' | 'afternoon' | 'evening' | 'night';\n  location?: { lat: number; lng: number };\n  recentActivity?: string[];\n  crisisMode?: boolean;\n  onActionExecute?: (action: QuickAction) => void;\n}\n\nexport function SmartQuickActionsWidget({\n  userId,\n  currentMood,\n  timeOfDay,\n  location,\n  recentActivity = [],\n  crisisMode = false,\n  onActionExecute\n}: SmartQuickActionsWidgetProps) {\n  const { actions, executeAction, _addCustomAction, getFrequentActions } = useQuickActionsContext();\n  const { settings: accessibilitySettings } = useAccessibilityStore();\n  const { _preferences, _updatePreference } = useUserPreferences(_userId);\n  \n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [voiceCommandActive, setVoiceCommandActive] = useState(false);\n  const [showCustomizationPanel, setShowCustomizationPanel] = useState(false);\n  const [actionHistory, setActionHistory] = useState<string[]>([]);\n  const [contextualActions, setContextualActions] = useState<QuickAction[]>([]);\n\n  // Action recommendation engine\n  const recommendationEngine = useMemo(() => \n    new ActionRecommendationEngine({\n      userId,\n      currentMood,\n      timeOfDay,\n      location,\n      recentActivity,\n      actionHistory\n    }), [userId, currentMood, timeOfDay, location, recentActivity, actionHistory]);\n\n  // Get recommended actions based on context\n  useEffect(() => {\n    const _recommendations = recommendationEngine.getRecommendations(_actions);\n    setContextualActions(_recommendations);\n  }, [actions, recommendationEngine]);\n\n  // Enhanced action categories with crisis priority\n  const categories = useMemo(() => {\n    if (_crisisMode) {\n      return [\n        { id: 'crisis', label: 'Emergency', icon: AlertCircle, color: 'red' },\n        { id: 'grounding', label: 'Grounding', icon: Shield, color: 'purple' },\n        { id: 'contact', label: 'Contact', icon: Phone, color: 'blue' }\n      ];\n    }\n    \n    return [\n      { id: 'all', label: 'All Actions', icon: Zap, color: 'gray' },\n      { id: 'wellness', label: 'Wellness', icon: Heart, color: 'pink' },\n      { id: 'tracking', label: 'Track', icon: Edit3, color: 'blue' },\n      { id: 'therapy', label: 'Therapy', icon: Brain, color: 'purple' },\n      { id: 'social', label: 'Connect', icon: Users, color: 'green' },\n      { id: 'crisis', label: 'Crisis', icon: AlertCircle, color: 'red' }\n    ];\n  }, [crisisMode]);\n\n  // Filter actions based on search and category\n  const filteredActions = useMemo(() => {\n    let filtered = crisisMode \n      ? actions.filter(a => a.category === 'crisis' || a.isEmergency)\n      : actions;\n\n    if (selectedCategory !== 'all') {\n      filtered = filtered.filter(a => a.category === selectedCategory);\n    }\n\n    if (searchQuery) {\n      const _query = searchQuery.toLowerCase();\n      filtered = filtered.filter(a => \n        a.label.toLowerCase().includes(_query) ||\n        a.description?.toLowerCase().includes(_query) ||\n        a.tags?.some(tag => tag.toLowerCase().includes(_query))\n      );\n    }\n\n    return filtered;\n  }, [actions, selectedCategory, searchQuery, crisisMode]);\n\n  // Handle action execution with tracking\n  const handleActionClick = useCallback((action: QuickAction) => {\n    setActionHistory(prev => [...prev, action.id].slice(-20)); // Keep last 20 actions\n    executeAction(action);\n    onActionExecute?.(action);\n    \n    // Announce action for screen readers\n    if (accessibilitySettings.screenReaderMode) {\n      const _announcement = new SpeechSynthesisUtterance(`Executing ${action.label}`);\n      window.speechSynthesis.speak(_announcement);\n    }\n  }, [executeAction, onActionExecute, accessibilitySettings.screenReaderMode]);\n\n  // Voice command handler\n  const handleVoiceCommand = useCallback((command: string) => {\n    const _matchedAction = actions.find(a => \n      a.label.toLowerCase().includes(command.toLowerCase()) ||\n      a.voiceAlias?.some(alias => alias.toLowerCase() === command.toLowerCase())\n    );\n    \n    if (_matchedAction) {\n      handleActionClick(_matchedAction);\n    }\n  }, [actions, handleActionClick]);\n\n  // Keyboard navigation handler\n  const handleKeyboardNavigation = useCallback((key: string) => {\n    // Handle keyboard shortcuts for actions\n    const _actionWithShortcut = actions.find(a => a.keyboard === key);\n    if (_actionWithShortcut) {\n      handleActionClick(_actionWithShortcut);\n    }\n  }, [actions, handleActionClick]);\n\n  // Get icon component\n  const getIcon = (iconName: string) => {\n    const iconMap: Record<string, any> = {\n      brain: Brain, heart: Heart, phone: Phone, calendar: Calendar,\n      message: MessageSquare, activity: Activity, pill: Pill, book: Book,\n      users: Users, sparkles: Sparkles, music: Music, shield: Shield,\n      alert: AlertCircle, mic: Mic, keyboard: Keyboard, eye: Eye,\n      settings: Settings, search: Search, zap: Zap, clock: Clock,\n      map: MapPin, volume: Volume2, edit: Edit3, home: Home, help: HelpCircle,\n      smartphone: Smartphone, headphones: Headphones, wind: Wind,\n      coffee: Coffee, moon: Moon, sun: Sun\n    };\n    return iconMap[iconName.toLowerCase()] || Brain;\n  };\n\n  return (\n    <div className={`\n      relative rounded-xl shadow-lg overflow-hidden\n      ${crisisMode ? 'bg-red-50 border-2 border-red-500' : 'bg-white'}\n      ${accessibilitySettings.highContrast ? 'border-4 border-black' : ''}\n    `}>\n      {/* Crisis Mode Alert Banner */}\n      {crisisMode && (\n        <motion.div\n          initial={{ height: 0 }}\n          animate={{ height: 'auto' }}\n          className=\"bg-red-600 text-white p-3 flex items-center justify-between\"\n        >\n          <div className=\"flex items-center space-x-2\">\n            <AlertCircle className=\"h-5 w-5 animate-pulse\" />\n            <span className=\"font-semibold\">Crisis Mode Active</span>\n          </div>\n          <button\n            onClick={() => handleActionClick(actions.find(a => a.id === 'emergency-hotline')!)}\n            className=\"bg-white text-red-600 px-3 py-1 rounded-full text-sm font-semibold hover:bg-red-100\"\n            aria-label=\"Call emergency hotline\"\n          >\n            Call 988\n          </button>\n        </motion.div>\n      )}\n\n      {/* Header with Search and Voice Controls */}\n      <div className=\"p-4 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h3 className={`text-lg font-semibold ${crisisMode ? 'text-red-900' : 'text-gray-900'}`}>\n            Quick Actions\n          </h3>\n          \n          <div className=\"flex items-center space-x-2\">\n            {/* Voice Command Toggle */}\n            <button\n              onClick={() => setVoiceCommandActive(!voiceCommandActive)}\n              className={`p-2 rounded-lg transition-colors ${\n                voiceCommandActive \n                  ? 'bg-blue-500 text-white' \n                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n              }`}\n              aria-label=\"Toggle voice commands\"\n              title=\"Voice Commands (Alt+V)\"\n            >\n              <Mic className=\"h-4 w-4\" />\n            </button>\n            \n            {/* Keyboard Navigation Help */}\n            <button\n              onClick={() => setShowCustomizationPanel(!showCustomizationPanel)}\n              className=\"p-2 rounded-lg bg-gray-100 text-gray-600 hover:bg-gray-200\"\n              aria-label=\"Keyboard shortcuts\"\n              title=\"Keyboard Shortcuts (Alt+K)\"\n            >\n              <Keyboard className=\"h-4 w-4\" />\n            </button>\n            \n            {/* Settings */}\n            <button\n              onClick={() => setShowCustomizationPanel(!showCustomizationPanel)}\n              className=\"p-2 rounded-lg bg-gray-100 text-gray-600 hover:bg-gray-200\"\n              aria-label=\"Customize actions\"\n            >\n              <Settings className=\"h-4 w-4\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Search Bar */}\n        {!crisisMode && (\n          <div className=\"relative\">\n            <input\n              type=\"text\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              placeholder=\"Search actions...\"\n              className=\"w-full px-3 py-2 pl-9 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              aria-label=\"Search quick actions\"\n            />\n            <Search className=\"absolute left-3 top-2.5 h-4 w-4 text-gray-400\" />\n          </div>\n        )}\n      </div>\n\n      {/* Category Tabs */}\n      {!crisisMode && (\n        <div className=\"px-4 py-2 border-b border-gray-200 overflow-x-auto\">\n          <div className=\"flex space-x-2\">\n            {categories.map(category => {\n              const Icon = category.icon;\n              return (\n                <button\n                  key={category.id}\n                  onClick={() => setSelectedCategory(category.id)}\n                  className={`\n                    flex items-center space-x-1 px-3 py-1.5 rounded-full text-sm font-medium\n                    transition-all whitespace-nowrap\n                    ${selectedCategory === category.id\n                      ? `bg-${category.color}-100 text-${category.color}-700 ring-2 ring-${category.color}-500`\n                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n                    }\n                  `}\n                  aria-label={`Filter by ${category.label}`}\n                  aria-pressed={selectedCategory === category.id}\n                >\n                  <Icon className=\"h-3.5 w-3.5\" />\n                  <span>{category.label}</span>\n                </button>\n              );\n            })}\n          </div>\n        </div>\n      )}\n\n      {/* Contextual Recommendations */}\n      {contextualActions.length > 0 && !crisisMode && (\n        <div className=\"p-4 bg-blue-50 border-b border-blue-200\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <h4 className=\"text-sm font-semibold text-blue-900\">Recommended for you</h4>\n            <span className=\"text-xs text-blue-600\">Based on your current context</span>\n          </div>\n          <div className=\"flex flex-wrap gap-2\">\n            {contextualActions.slice(0, 3).map(action => {\n              const Icon = getIcon(action.icon);\n              return (\n                <motion.button\n                  key={action.id}\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  onClick={() => handleActionClick(action)}\n                  className=\"flex items-center space-x-2 px-3 py-1.5 bg-white rounded-lg shadow-sm hover:shadow-md transition-all\"\n                >\n                  <Icon className={`h-4 w-4 ${action.color?.replace('bg-', 'text-')}`} />\n                  <span className=\"text-sm font-medium\">{action.label}</span>\n                </motion.button>\n              );\n            })}\n          </div>\n        </div>\n      )}\n\n      {/* Main Actions Grid */}\n      <div className=\"p-4\">\n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={selectedCategory + searchQuery}\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            className={`grid gap-3 ${\n              crisisMode \n                ? 'grid-cols-1' \n                : 'grid-cols-2 sm:grid-cols-3 lg:grid-cols-4'\n            }`}\n          >\n            {filteredActions.map((action, index) => {\n              const Icon = getIcon(action.icon);\n              const isEmergency = action.isEmergency || action.category === 'crisis';\n              \n              return (\n                <motion.button\n                  key={action.id}\n                  initial={{ opacity: 0, scale: 0.9 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: index * 0.03 }}\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  onClick={() => handleActionClick(action)}\n                  className={`\n                    relative group p-3 rounded-lg transition-all\n                    ${isEmergency\n                      ? 'bg-gradient-to-r from-red-500 to-red-600 text-white shadow-lg hover:shadow-xl'\n                      : 'bg-white border border-gray-200 hover:border-gray-300 hover:shadow-md'\n                    }\n                    ${accessibilitySettings.highContrast ? 'border-2 border-black' : ''}\n                    focus:outline-none focus:ring-2 focus:ring-offset-2 \n                    ${isEmergency ? 'focus:ring-red-500' : 'focus:ring-blue-500'}\n                  `}\n                  aria-label={`${action.label}: ${action.description}`}\n                  data-keyboard-shortcut={action.keyboard}\n                >\n                  {/* Emergency pulse animation */}\n                  {isEmergency && (\n                    <div className=\"absolute inset-0 rounded-lg\">\n                      <div className=\"absolute inset-0 bg-red-400 opacity-20 animate-ping rounded-lg\" />\n                    </div>\n                  )}\n                  \n                  <div className=\"relative flex flex-col items-center space-y-2\">\n                    {/* Icon */}\n                    <div className={`\n                      p-2 rounded-lg transition-all\n                      ${isEmergency \n                        ? 'bg-red-700 bg-opacity-20' \n                        : `${action.color} bg-opacity-10 group-hover:bg-opacity-20`\n                      }\n                    `}>\n                      <Icon className={`\n                        h-5 w-5\n                        ${isEmergency ? 'text-white' : action.color?.replace('bg-', 'text-')}\n                      `} />\n                    </div>\n                    \n                    {/* Label */}\n                    <span className={`\n                      text-sm font-medium\n                      ${isEmergency ? 'text-white' : 'text-gray-900'}\n                    `}>\n                      {action.label}\n                    </span>\n                    \n                    {/* Description */}\n                    {action.description && (\n                      <span className={`\n                        text-xs text-center line-clamp-2\n                        ${isEmergency ? 'text-red-100' : 'text-gray-500'}\n                      `}>\n                        {action.description}\n                      </span>\n                    )}\n                    \n                    {/* Keyboard shortcut badge */}\n                    {action.keyboard && (\n                      <div className=\"absolute -top-1 -right-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                        <span className=\"text-xs bg-gray-800 text-white px-1.5 py-0.5 rounded\">\n                          {action.keyboard}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                </motion.button>\n              );\n            })}\n          </motion.div>\n        </AnimatePresence>\n\n        {/* Empty state */}\n        {filteredActions.length === 0 && (\n          <div className=\"text-center py-8\">\n            <Search className=\"h-12 w-12 text-gray-300 mx-auto mb-3\" />\n            <p className=\"text-gray-500\">No actions found</p>\n            <button\n              onClick={() => {\n                setSearchQuery('');\n                setSelectedCategory('all');\n              }}\n              className=\"mt-2 text-sm text-blue-600 hover:text-blue-700\"\n            >\n              Clear filters\n            </button>\n          </div>\n        )}\n      </div>\n\n      {/* Frequent Actions Footer */}\n      {!crisisMode && (\n        <div className=\"px-4 py-3 bg-gray-50 border-t border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-xs text-gray-500\">\n              Your frequent actions\n            </span>\n            <div className=\"flex space-x-1\">\n              {getFrequentActions().slice(0, 5).map(action => {\n                const Icon = getIcon(action.icon);\n                return (\n                  <button\n                    key={action.id}\n                    onClick={() => handleActionClick(action)}\n                    className=\"p-1.5 rounded hover:bg-gray-200 transition-colors\"\n                    aria-label={action.label}\n                  >\n                    <Icon className=\"h-3.5 w-3.5 text-gray-600\" />\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Voice Command Interface */}\n      {voiceCommandActive && (\n        <VoiceCommandInterface\n          isActive={voiceCommandActive}\n          onCommand={handleVoiceCommand}\n          onClose={() => setVoiceCommandActive(false)}\n        />\n      )}\n\n      {/* Keyboard Navigator */}\n      <KeyboardNavigator\n        actions={filteredActions}\n        onActionSelect={handleActionClick}\n        onKeyPress={handleKeyboardNavigation}\n        isActive={!voiceCommandActive}\n      />\n\n      {/* Gesture Handler for mobile */}\n      <GestureHandler\n        onSwipeLeft={() => {/* Navigate to next category */}}\n        onSwipeRight={() => {/* Navigate to previous category */}}\n        onDoubleTap={() => {/* Open voice commands */}}\n        onLongPress={() => {/* Show action customization */}}\n      />\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\quickActions\\VoiceCommandInterface.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'initializeAudioAnalyzer' and 'processCommand'. Either include them or remove the dependency array.","line":121,"column":6,"nodeType":"ArrayExpression","endLine":121,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [initializeAudioAnalyzer, isActive, processCommand]","fix":{"range":[3791,3801],"text":"[initializeAudioAnalyzer, isActive, processCommand]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":135,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":135,"endColumn":20},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":385,"column":19,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12963,12983],"text":"\n                  &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12963,12983],"text":"\n                  &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12963,12983],"text":"\n                  &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12963,12983],"text":"\n                  &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":385,"column":25,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12988,13006],"text":"&quot;\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12988,13006],"text":"&ldquo;\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12988,13006],"text":"&#34;\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12988,13006],"text":"&rdquo;\n                "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Mic, MicOff, Volume2, X, AlertCircle, CheckCircle } from 'lucide-react';\nimport { logger } from '@/utils/logger';\n\ninterface VoiceCommandInterfaceProps {\n  isActive: boolean;\n  onCommand: (command: string) => void;\n  onClose: () => void;\n  supportedCommands?: string[];\n}\n\nexport function VoiceCommandInterface({\n  isActive,\n  onCommand,\n  onClose,\n  supportedCommands = []\n}: VoiceCommandInterfaceProps) {\n  const [isListening, setIsListening] = useState(false);\n  const [transcript, setTranscript] = useState('');\n  const [interimTranscript, setInterimTranscript] = useState('');\n  const [status, setStatus] = useState<'idle' | 'listening' | 'processing' | 'success' | 'error'>('idle');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [volume, setVolume] = useState(0);\n  \n  const recognitionRef = useRef<unknown>(null);\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const analyserRef = useRef<AnalyserNode | null>(null);\n  const microphoneRef = useRef<MediaStreamAudioSourceNode | null>(null);\n  const animationFrameRef = useRef<number | null>(null);\n\n  // Default voice commands\n  const defaultCommands = [\n    'log mood', 'start meditation', 'open journal', 'call crisis line',\n    'breathing exercise', 'check in', 'view schedule', 'track medication',\n    'safety plan', 'grounding exercise', 'contact therapist', 'emergency help'\n  ];\n\n  const commands = supportedCommands.length > 0 ? supportedCommands : defaultCommands;\n\n  // Initialize speech recognition\n  useEffect(() => {\n    if (!isActive) return;\n\n    const SpeechRecognition = (window as unknown).SpeechRecognition || (window as unknown).webkitSpeechRecognition;\n    \n    if (!SpeechRecognition) {\n      setErrorMessage('Voice commands not supported in this browser');\n      setStatus('error');\n      return;\n    }\n\n    const recognition = new SpeechRecognition();\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.lang = 'en-US';\n\n    recognition.onstart = () => {\n      setStatus('listening');\n      setIsListening(true);\n      setErrorMessage('');\n      initializeAudioAnalyzer();\n    };\n\n    recognition.onresult = (event: unknown) => {\n      let _interim = '';\n      let final = '';\n\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          final += `${transcript  } `;\n        } else {\n          _interim += transcript;\n        }\n      }\n\n      if (final) {\n        setTranscript(prev => prev + final);\n        processCommand(final.trim());\n      }\n      \n      setInterimTranscript(_interim);\n    };\n\n    recognition.onerror = (event: unknown) => {\n      logger.error('Speech recognition error:', event.error);\n      setStatus('error');\n      setIsListening(false);\n      \n      switch (event.error) {\n        case 'no-speech':\n          setErrorMessage('No speech detected. Please try again.');\n          break;\n        case 'audio-capture':\n          setErrorMessage('Microphone not found. Please check your settings.');\n          break;\n        case 'not-allowed':\n          setErrorMessage('Microphone access denied. Please enable permissions.');\n          break;\n        default:\n          setErrorMessage('An error occurred. Please try again.');\n      }\n      \n      stopAudioAnalyzer();\n    };\n\n    recognition.onend = () => {\n      setIsListening(false);\n      stopAudioAnalyzer();\n    };\n\n    recognitionRef.current = recognition;\n\n    return () => {\n      if (recognitionRef.current) {\n        recognitionRef.current.stop();\n      }\n      stopAudioAnalyzer();\n    };\n  }, [isActive]);\n\n  // Initialize audio analyzer for volume visualization\n  const initializeAudioAnalyzer = async () => {\n    try {\n      const _stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      audioContextRef.current = new AudioContext();\n      analyserRef.current = audioContextRef.current.createAnalyser();\n      microphoneRef.current = audioContextRef.current.createMediaStreamSource(_stream);\n      \n      analyserRef.current.fftSize = 256;\n      microphoneRef.current.connect(analyserRef.current);\n      \n      updateVolume();\n    } catch (_error) {\n      logger.error('Error initializing audio analyzer:');\n    }\n  };\n\n  // Update volume meter\n  const updateVolume = () => {\n    if (!analyserRef.current) return;\n\n    const dataArray = new Uint8Array(analyserRef.current.frequencyBinCount);\n    analyserRef.current.getByteFrequencyData(dataArray);\n    \n    const average = dataArray.reduce((a, b) => a + b) / dataArray.length;\n    setVolume(average / 255);\n    \n    animationFrameRef.current = requestAnimationFrame(_updateVolume);\n  };\n\n  // Stop audio analyzer\n  const stopAudioAnalyzer = () => {\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    \n    if (microphoneRef.current) {\n      microphoneRef.current.disconnect();\n    }\n    \n    if (audioContextRef.current && audioContextRef.current.state !== 'closed') {\n      audioContextRef.current.close();\n    }\n    \n    setVolume(0);\n  };\n\n  // Process recognized command\n  const processCommand = useCallback((command: string) => {\n    setStatus('processing');\n    const lowerCommand = command.toLowerCase();\n    \n    // Find matching command\n    const matchedCommand = commands.find(cmd => \n      lowerCommand.includes(cmd.toLowerCase())\n    );\n    \n    if (_matchedCommand) {\n      setStatus('success');\n      onCommand(_lowerCommand);\n      \n      // Provide audio feedback\n      const utterance = new SpeechSynthesisUtterance(`Executing ${matchedCommand}`);\n      utterance.rate = 1.2;\n      window.speechSynthesis.speak(_utterance);\n      \n      setTimeout(() => {\n        setStatus('idle');\n        setTranscript('');\n      }, 2000);\n    } else {\n      setStatus('error');\n      setErrorMessage('Command not recognized. Please try again.');\n      \n      setTimeout(() => {\n        setStatus('listening');\n        setErrorMessage('');\n      }, 2000);\n    }\n  }, [commands, onCommand]);\n\n  // Toggle listening\n  const toggleListening = () => {\n    if (!recognitionRef.current) return;\n\n    if (_isListening) {\n      recognitionRef.current.stop();\n      setIsListening(false);\n      setStatus('idle');\n    } else {\n      recognitionRef.current.start();\n      setIsListening(true);\n    }\n  };\n\n  // Speak command list\n  const speakCommands = () => {\n    const commandList = commands.join(', ');\n    const utterance = new SpeechSynthesisUtterance(`Available commands are: ${commandList}`);\n    utterance.rate = 0.9;\n    window.speechSynthesis.speak(_utterance);\n  };\n\n  if (!isActive) return null;\n\n  return (\n    <AnimatePresence>\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        exit={{ opacity: 0, y: 20 }}\n        className=\"fixed bottom-4 right-4 z-50 w-96 max-w-[calc(100vw-2rem)]\"\n      >\n        <div className=\"bg-white rounded-xl shadow-2xl border border-gray-200 overflow-hidden\">\n          {/* Header */}\n          <div className=\"bg-gradient-to-r from-blue-500 to-purple-600 p-4 text-white\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"relative\">\n                  {isListening ? (\n                    <Mic className=\"h-5 w-5 animate-pulse\" />\n                  ) : (\n                    <MicOff className=\"h-5 w-5\" />\n                  )}\n                  {/* Volume indicator */}\n                  {isListening && (\n                    <motion.div\n                      className=\"absolute -inset-2 rounded-full border-2 border-white\"\n                      animate={{ scale: 1 + volume * 0.5 }}\n                      transition={{ duration: 0.1 }}\n                    />\n                  )}\n                </div>\n                <span className=\"font-semibold\">Voice Commands</span>\n              </div>\n              \n              <button\n                onClick={onClose}\n                className=\"p-1 hover:bg-white hover:bg-opacity-20 rounded-lg transition-colors\"\n                aria-label=\"Close voice commands\"\n              >\n                <X className=\"h-4 w-4\" />\n              </button>\n            </div>\n            \n            {/* Status indicator */}\n            <div className=\"mt-2 flex items-center space-x-2\">\n              {status === 'listening' && (\n                <>\n                  <div className=\"flex space-x-1\">\n                    <motion.div\n                      className=\"w-1 h-4 bg-white rounded-full\"\n                      animate={{ scaleY: [1, 1.5, 1] }}\n                      transition={{ duration: 0.5, repeat: Infinity }}\n                    />\n                    <motion.div\n                      className=\"w-1 h-4 bg-white rounded-full\"\n                      animate={{ scaleY: [1, 1.5, 1] }}\n                      transition={{ duration: 0.5, repeat: Infinity, delay: 0.1 }}\n                    />\n                    <motion.div\n                      className=\"w-1 h-4 bg-white rounded-full\"\n                      animate={{ scaleY: [1, 1.5, 1] }}\n                      transition={{ duration: 0.5, repeat: Infinity, delay: 0.2 }}\n                    />\n                  </div>\n                  <span className=\"text-sm\">Listening...</span>\n                </>\n              )}\n              \n              {status === 'processing' && (\n                <>\n                  <motion.div\n                    className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full\"\n                    animate={{ rotate: 360 }}\n                    transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}\n                  />\n                  <span className=\"text-sm\">Processing...</span>\n                </>\n              )}\n              \n              {status === 'success' && (\n                <>\n                  <CheckCircle className=\"h-4 w-4\" />\n                  <span className=\"text-sm\">Command executed!</span>\n                </>\n              )}\n              \n              {status === 'error' && (\n                <>\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <span className=\"text-sm\">Error occurred</span>\n                </>\n              )}\n              \n              {status === 'idle' && (\n                <span className=\"text-sm text-white text-opacity-80\">\n                  Click the microphone to start\n                </span>\n              )}\n            </div>\n          </div>\n\n          {/* Transcript display */}\n          <div className=\"p-4 min-h-[100px] max-h-[200px] overflow-y-auto bg-gray-50\">\n            {(transcript || interimTranscript) ? (\n              <div>\n                {transcript && (\n                  <p className=\"text-gray-900 mb-1\">{transcript}</p>\n                )}\n                {interimTranscript && (\n                  <p className=\"text-gray-500 italic\">{interimTranscript}</p>\n                )}\n              </div>\n            ) : (\n              <p className=\"text-gray-400 text-center\">\n                Your voice commands will appear here\n              </p>\n            )}\n            \n            {errorMessage && (\n              <div className=\"mt-2 p-2 bg-red-100 text-red-700 rounded-lg text-sm\">\n                {errorMessage}\n              </div>\n            )}\n          </div>\n\n          {/* Controls */}\n          <div className=\"p-4 border-t border-gray-200 flex items-center justify-between\">\n            <button\n              onClick={speakCommands}\n              className=\"flex items-center space-x-1 text-sm text-gray-600 hover:text-gray-900\"\n              aria-label=\"Hear available commands\"\n            >\n              <Volume2 className=\"h-4 w-4\" />\n              <span>Hear commands</span>\n            </button>\n            \n            <button\n              onClick={toggleListening}\n              className={`\n                px-4 py-2 rounded-lg font-medium transition-all\n                ${isListening\n                  ? 'bg-red-500 hover:bg-red-600 text-white'\n                  : 'bg-blue-500 hover:bg-blue-600 text-white'\n                }\n              `}\n              aria-label={isListening ? 'Stop listening' : 'Start listening'}\n            >\n              {isListening ? 'Stop' : 'Start'} Listening\n            </button>\n          </div>\n\n          {/* Command suggestions */}\n          <div className=\"px-4 pb-4\">\n            <p className=\"text-xs text-gray-500 mb-2\">Try saying:</p>\n            <div className=\"flex flex-wrap gap-1\">\n              {commands.slice(0, 6).map((cmd, index) => (\n                <span\n                  key={index}\n                  className=\"text-xs px-2 py-1 bg-gray-100 text-gray-600 rounded-full\"\n                >\n                  \"{cmd}\"\n                </span>\n              ))}\n            </div>\n          </div>\n        </div>\n      </motion.div>\n    </AnimatePresence>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\quickActions\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\wellness\\AdvancedJournal.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'dateFilter'. Either exclude it or remove the dependency array.","line":177,"column":6,"nodeType":"ArrayExpression","endLine":177,"endColumn":79,"suggestions":[{"desc":"Update the dependencies array to be: [journalEntries, searchQuery, selectedTags, selectedEmotions]","fix":{"range":[4832,4905],"text":"[journalEntries, searchQuery, selectedTags, selectedEmotions]"}}]},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":410,"column":19,"nodeType":"JSXOpeningElement","endLine":410,"endColumn":83},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":431,"column":21,"nodeType":"JSXOpeningElement","endLine":431,"endColumn":85},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":460,"column":21,"nodeType":"JSXOpeningElement","endLine":460,"endColumn":85}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, _useEffect, useMemo } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  BookOpen,\n  PenTool,\n  Search,\n  Filter,\n  Tag,\n  _Calendar,\n  Heart,\n  Smile,\n  Frown,\n  Meh,\n  TrendingUp,\n  Download,\n  ChevronRight,\n  Sparkles,\n  Brain,\n  Award,\n  Clock,\n  FileText,\n  MessageSquare,\n  CheckCircle,\n  AlertCircle\n} from 'lucide-react';\nimport { format, isToday, isYesterday, differenceInDays } from 'date-fns';\n\ninterface JournalEntry {\n  id: string;\n  timestamp: Date;\n  content: string;\n  mood?: number;\n  emotions?: string[];\n  tags?: string[];\n  sentiment?: {\n    score: number; // -1 to 1\n    magnitude: number; // 0 to infinity\n    emotions: {\n      joy: number;\n      sadness: number;\n      anger: number;\n      fear: number;\n      surprise: number;\n      love: number;\n    };\n  };\n  gratitude?: string[];\n  achievements?: string[];\n  prompts?: string[];\n  wordCount: number;\n  editedAt?: Date;\n  isPrivate?: boolean;\n}\n\ninterface AdvancedJournalProps {\n  entries?: JournalEntry[];\n  onNewEntry?: () => void;\n  onEditEntry?: (id: string) => void;\n  onExport?: (entries: JournalEntry[]) => void;\n  _onSearch?: (query: string) => void;\n}\n\nexport function AdvancedJournal({ \n  entries = [], \n  onNewEntry, \n  onEditEntry,\n  onExport,\n  _onSearch \n}: AdvancedJournalProps) {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n  const [selectedEmotions, setSelectedEmotions] = useState<string[]>([]);\n  const [dateFilter, setDateFilter] = useState<'all' | 'today' | 'week' | 'month'>('all');\n  const [showFilters, setShowFilters] = useState(false);\n  const [selectedEntry, setSelectedEntry] = useState<string | null>(null);\n\n  // Mock journal entries if none provided\n  const mockEntries: JournalEntry[] = [\n    {\n      id: '1',\n      timestamp: new Date(),\n      content: \"Today was a breakthrough day. I finally understood that my anxiety doesn't define me. The meditation session this morning really helped me see things from a different perspective.\",\n      mood: 7,\n      emotions: ['hopeful', 'calm', 'grateful'],\n      tags: ['breakthrough', 'meditation', 'anxiety'],\n      sentiment: {\n        score: 0.8,\n        magnitude: 2.1,\n        emotions: {\n          joy: 0.7,\n          sadness: 0.1,\n          anger: 0,\n          fear: 0.1,\n          surprise: 0.3,\n          love: 0.6\n        }\n      },\n      gratitude: ['My support system', 'Morning sunlight', 'Progress in therapy'],\n      achievements: ['Completed 30-minute meditation', 'Reached out to a friend'],\n      wordCount: 42,\n      prompts: ['What made today meaningful?']\n    },\n    {\n      id: '2',\n      timestamp: new Date(Date.now() - 86400000),\n      content: \"Struggled with motivation today, but I'm proud that I still managed to journal. Small wins count too.\",\n      mood: 5,\n      emotions: ['tired', 'proud', 'determined'],\n      tags: ['motivation', 'small-wins'],\n      sentiment: {\n        score: 0.3,\n        magnitude: 1.5,\n        emotions: {\n          joy: 0.3,\n          sadness: 0.4,\n          anger: 0,\n          fear: 0.2,\n          surprise: 0,\n          love: 0.2\n        }\n      },\n      wordCount: 18,\n      prompts: ['What am I proud of today?']\n    }\n  ];\n\n  const journalEntries = entries.length > 0 ? entries : mockEntries;\n\n  // Filter entries based on search and filters\n  const filteredEntries = useMemo(() => {\n    let filtered = [...journalEntries];\n\n    // Search filter\n    if (_searchQuery) {\n      filtered = filtered.filter(entry =>\n        entry.content.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        entry.tags?.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase())) ||\n        entry.emotions?.some(emotion => emotion.toLowerCase().includes(searchQuery.toLowerCase()))\n      );\n    }\n\n    // Tag filter\n    if (selectedTags.length > 0) {\n      filtered = filtered.filter(entry =>\n        selectedTags.every(tag => entry.tags?.includes(tag))\n      );\n    }\n\n    // Emotion filter\n    if (selectedEmotions.length > 0) {\n      filtered = filtered.filter(entry =>\n        selectedEmotions.every(emotion => entry.emotions?.includes(emotion))\n      );\n    }\n\n    // Date filter\n    const now = new Date();\n    switch (_dateFilter) {\n      case 'today':\n        filtered = filtered.filter(entry => isToday(new Date(entry.timestamp)));\n        break;\n      case 'week':\n        filtered = filtered.filter(entry => \n          differenceInDays(now, new Date(entry.timestamp)) <= 7\n        );\n        break;\n      case 'month':\n        filtered = filtered.filter(entry => \n          differenceInDays(now, new Date(entry.timestamp)) <= 30\n        );\n        break;\n    }\n\n    return filtered.sort((a, b) => \n      new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n    );\n  }, [journalEntries, searchQuery, selectedTags, selectedEmotions, dateFilter]);\n\n  // Extract all unique tags and emotions\n  const allTags = useMemo(() => {\n    const tags = new Set<string>();\n    journalEntries.forEach(entry => {\n      entry.tags?.forEach(tag => tags.add(tag));\n    });\n    return Array.from(_tags);\n  }, [journalEntries]);\n\n  const allEmotions = useMemo(() => {\n    const emotions = new Set<string>();\n    journalEntries.forEach(entry => {\n      entry.emotions?.forEach(emotion => emotions.add(emotion));\n    });\n    return Array.from(_emotions);\n  }, [journalEntries]);\n\n  // Calculate sentiment statistics\n  const sentimentStats = useMemo(() => {\n    const validEntries = filteredEntries.filter(e => e.sentiment);\n    if (validEntries.length === 0) return null;\n\n    const avgSentiment = validEntries.reduce((sum, e) => sum + (e.sentiment?.score || 0), 0) / validEntries.length;\n    const _dominantEmotion = validEntries.reduce((emotions, entry) => {\n      if (!entry.sentiment?.emotions) return emotions;\n      Object.entries(entry.sentiment.emotions).forEach(([emotion, value]) => {\n        emotions[emotion] = (emotions[emotion] || 0) + value;\n      });\n      return emotions;\n    }, {} as Record<string, number>);\n\n    const topEmotion = Object.entries(_dominantEmotion)\n      .sort((a, b) => b[1] - a[1])[0];\n\n    return {\n      avgSentiment,\n      topEmotion: topEmotion ? topEmotion[0] : null,\n      totalWords: filteredEntries.reduce((sum, e) => sum + e.wordCount, 0),\n      avgWords: Math.round(filteredEntries.reduce((sum, e) => sum + e.wordCount, 0) / filteredEntries.length)\n    };\n  }, [filteredEntries]);\n\n  // Get writing prompts based on current mood and patterns\n  const writingPrompts = useMemo(() => {\n    const prompts = [\n      {\n        category: 'reflection',\n        prompt: 'What moment from today would you like to remember?',\n        difficulty: 'easy'\n      },\n      {\n        category: 'gratitude',\n        prompt: 'List three things that brought you joy today, no matter how small.',\n        difficulty: 'easy'\n      },\n      {\n        category: 'growth',\n        prompt: 'What challenge did you face today and what did it teach you?',\n        difficulty: 'medium'\n      },\n      {\n        category: 'emotions',\n        prompt: 'Describe your emotions today as if they were weather patterns.',\n        difficulty: 'medium'\n      },\n      {\n        category: 'future',\n        prompt: 'Write a letter to yourself one year from now.',\n        difficulty: 'deep'\n      },\n      {\n        category: 'relationships',\n        prompt: 'How did your interactions with others affect your mood today?',\n        difficulty: 'deep'\n      }\n    ];\n\n    // Customize prompts based on recent sentiment\n    if (sentimentStats?.avgSentiment && sentimentStats.avgSentiment < 0) {\n      prompts.unshift({\n        category: 'support',\n        prompt: 'What would you tell a friend who was feeling the way you are now?',\n        difficulty: 'medium'\n      });\n    }\n\n    return prompts.slice(0, 3);\n  }, [sentimentStats]);\n\n  // Format date for display\n  const formatEntryDate = (_date: Date) => {\n    const entryDate = new Date(_date);\n    if (isToday(_entryDate)) return 'Today';\n    if (isYesterday(_entryDate)) return 'Yesterday';\n    return format(entryDate, 'MMM d, yyyy');\n  };\n\n  // Get mood emoji\n  const getMoodEmoji = (mood?: number) => {\n    if (!mood) return <Meh className=\"h-5 w-5 text-gray-400\" />;\n    if (mood >= 7) return <Smile className=\"h-5 w-5 text-green-500\" />;\n    if (mood >= 4) return <Meh className=\"h-5 w-5 text-yellow-500\" />;\n    return <Frown className=\"h-5 w-5 text-red-500\" />;\n  };\n\n  // Get sentiment color\n  const getSentimentColor = (score?: number) => {\n    if (!score) return 'text-gray-500';\n    if (score > 0.5) return 'text-green-600';\n    if (score > 0) return 'text-blue-600';\n    if (score > -0.5) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  // Handle export\n  const handleExport = () => {\n    if (_onExport) {\n      onExport(filteredEntries);\n    } else {\n      // Create markdown export\n      const markdown = filteredEntries.map(entry => `\n## ${format(new Date(entry.timestamp), 'MMMM d, yyyy - h:mm a')}\n**Mood:** ${entry.mood || 'Not recorded'}\n**Emotions:** ${entry.emotions?.join(', ') || 'None'}\n**Tags:** ${entry.tags?.join(', ') || 'None'}\n\n${entry.content}\n\n${entry.gratitude ? `**Gratitude:** ${entry.gratitude.join(', ')}` : ''}\n${entry.achievements ? `**Achievements:** ${entry.achievements.join(', ')}` : ''}\n      `).join('\\n---\\n');\n\n      const _blob = new Blob([markdown], { type: 'text/markdown' });\n      const url = window.URL.createObjectURL(_blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `journal-export-${format(new Date(), 'yyyy-MM-dd')}.md`;\n      a.click();\n      window.URL.revokeObjectURL(_url);\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Header with stats */}\n      <div className=\"bg-gradient-to-r from-indigo-500 to-purple-600 rounded-xl p-4 text-white\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-3\">\n            <BookOpen className=\"h-6 w-6\" />\n            <div>\n              <h3 className=\"text-lg font-semibold\">Your Journal</h3>\n              <p className=\"text-xs text-indigo-100\">\n                {filteredEntries.length} entries • {sentimentStats?.totalWords || 0} words\n              </p>\n            </div>\n          </div>\n          <button\n            onClick={onNewEntry}\n            className=\"px-4 py-2 bg-white text-indigo-600 rounded-lg font-medium hover:bg-indigo-50 transition-colors flex items-center\"\n          >\n            <PenTool className=\"h-4 w-4 mr-2\" />\n            New Entry\n          </button>\n        </div>\n\n        {/* Sentiment overview */}\n        {sentimentStats && (\n          <div className=\"grid grid-cols-3 gap-3\">\n            <div className=\"bg-white/20 rounded-lg p-2 text-center\">\n              <p className=\"text-xs text-indigo-100\">Avg Sentiment</p>\n              <p className={`text-lg font-bold ${sentimentStats.avgSentiment > 0 ? 'text-green-300' : 'text-red-300'}`}>\n                {sentimentStats.avgSentiment > 0 ? '+' : ''}{(sentimentStats.avgSentiment * 100).toFixed(0)}%\n              </p>\n            </div>\n            <div className=\"bg-white/20 rounded-lg p-2 text-center\">\n              <p className=\"text-xs text-indigo-100\">Top Emotion</p>\n              <p className=\"text-lg font-bold capitalize\">\n                {sentimentStats.topEmotion || 'Mixed'}\n              </p>\n            </div>\n            <div className=\"bg-white/20 rounded-lg p-2 text-center\">\n              <p className=\"text-xs text-indigo-100\">Avg Words</p>\n              <p className=\"text-lg font-bold\">\n                {sentimentStats.avgWords}\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Search and filters */}\n      <div className=\"space-y-3\">\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"flex-1 relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n            <input\n              type=\"text\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              placeholder=\"Search entries, tags, emotions...\"\n              className=\"w-full pl-10 pr-4 py-2 bg-white border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500\"\n            />\n          </div>\n          <button\n            onClick={() => setShowFilters(!showFilters)}\n            className={`p-2 rounded-lg transition-colors ${\n              showFilters ? 'bg-purple-100 text-purple-600' : 'bg-gray-100 text-gray-600'\n            }`}\n          >\n            <Filter className=\"h-5 w-5\" />\n          </button>\n          <button\n            onClick={handleExport}\n            className=\"p-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 transition-colors\"\n          >\n            <Download className=\"h-5 w-5\" />\n          </button>\n        </div>\n\n        {/* Filters */}\n        <AnimatePresence>\n          {showFilters && (\n            <motion.div\n              initial={{ height: 0, opacity: 0 }}\n              animate={{ height: 'auto', opacity: 1 }}\n              exit={{ height: 0, opacity: 0 }}\n              className=\"overflow-hidden\"\n            >\n              <div className=\"p-4 bg-gray-50 rounded-lg space-y-3\">\n                {/* Date filter */}\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700 mb-2 block\">Time Period</label>\n                  <div className=\"flex space-x-2\">\n                    {(['all', 'today', 'week', 'month'] as const).map(period => (\n                      <button\n                        key={period}\n                        onClick={() => setDateFilter(_period)}\n                        className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${\n                          dateFilter === period\n                            ? 'bg-purple-500 text-white'\n                            : 'bg-white text-gray-700 border border-gray-300'\n                        }`}\n                      >\n                        {period.charAt(0).toUpperCase() + period.slice(1)}\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Tags filter */}\n                {allTags.length > 0 && (\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-700 mb-2 block\">Tags</label>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {allTags.map(tag => (\n                        <button\n                          key={tag}\n                          onClick={() => {\n                            setSelectedTags(prev =>\n                              prev.includes(tag)\n                                ? prev.filter(t => t !== tag)\n                                : [...prev, tag]\n                            );\n                          }}\n                          className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${\n                            selectedTags.includes(tag)\n                              ? 'bg-purple-500 text-white'\n                              : 'bg-white text-gray-700 border border-gray-300'\n                          }`}\n                        >\n                          <Tag className=\"inline h-3 w-3 mr-1\" />\n                          {tag}\n                        </button>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Emotions filter */}\n                {allEmotions.length > 0 && (\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-700 mb-2 block\">Emotions</label>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {allEmotions.map(emotion => (\n                        <button\n                          key={emotion}\n                          onClick={() => {\n                            setSelectedEmotions(prev =>\n                              prev.includes(emotion)\n                                ? prev.filter(e => e !== emotion)\n                                : [...prev, emotion]\n                            );\n                          }}\n                          className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${\n                            selectedEmotions.includes(emotion)\n                              ? 'bg-purple-500 text-white'\n                              : 'bg-white text-gray-700 border border-gray-300'\n                          }`}\n                        >\n                          <Heart className=\"inline h-3 w-3 mr-1\" />\n                          {emotion}\n                        </button>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n\n      {/* Writing prompts */}\n      <div className=\"bg-gradient-to-br from-yellow-50 to-orange-50 rounded-xl p-4\">\n        <h4 className=\"font-semibold text-gray-800 mb-3 flex items-center\">\n          <Sparkles className=\"h-5 w-5 mr-2 text-yellow-600\" />\n          Today&apos;s Writing Prompts\n        </h4>\n        <div className=\"space-y-2\">\n          {writingPrompts.map((prompt, idx) => (\n            <motion.div\n              key={idx}\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: idx * 0.1 }}\n              className=\"p-3 bg-white rounded-lg cursor-pointer hover:shadow-sm transition-all\"\n              onClick={() => onNewEntry?.()}\n            >\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <p className=\"text-sm text-gray-800\">{prompt.prompt}</p>\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    <span className={`text-xs px-2 py-0.5 rounded-full ${\n                      prompt.difficulty === 'easy' \n                        ? 'bg-green-100 text-green-700'\n                        : prompt.difficulty === 'medium'\n                        ? 'bg-yellow-100 text-yellow-700'\n                        : 'bg-purple-100 text-purple-700'\n                    }`}>\n                      {prompt.difficulty}\n                    </span>\n                    <span className=\"text-xs text-gray-500 capitalize\">\n                      {prompt.category}\n                    </span>\n                  </div>\n                </div>\n                <ChevronRight className=\"h-4 w-4 text-gray-400 mt-1\" />\n              </div>\n            </motion.div>\n          ))}\n        </div>\n      </div>\n\n      {/* Journal entries */}\n      <div className=\"space-y-3\">\n        {filteredEntries.length > 0 ? (\n          filteredEntries.map((entry, idx) => (\n            <motion.div\n              key={entry.id}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: idx * 0.05 }}\n              className={`bg-white rounded-xl p-4 border border-gray-200 hover:shadow-md transition-all cursor-pointer ${\n                selectedEntry === entry.id ? 'ring-2 ring-purple-500' : ''\n              }`}\n              onClick={() => setSelectedEntry(selectedEntry === entry.id ? null : entry.id)}\n            >\n              {/* Entry header */}\n              <div className=\"flex items-start justify-between mb-3\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"text-center\">\n                    <p className=\"text-xs text-gray-500\">\n                      {formatEntryDate(entry.timestamp)}\n                    </p>\n                    <p className=\"text-sm font-medium text-gray-700\">\n                      {format(new Date(entry.timestamp), 'h:mm a')}\n                    </p>\n                  </div>\n                  {getMoodEmoji(entry.mood)}\n                  {entry.sentiment && (\n                    <div className=\"flex items-center space-x-1\">\n                      <Brain className={`h-4 w-4 ${getSentimentColor(entry.sentiment.score)}`} />\n                      <span className={`text-xs font-medium ${getSentimentColor(entry.sentiment.score)}`}>\n                        {entry.sentiment.score > 0 ? '+' : ''}{(entry.sentiment.score * 100).toFixed(0)}%\n                      </span>\n                    </div>\n                  )}\n                </div>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onEditEntry?.(entry.id);\n                  }}\n                  className=\"p-1 text-gray-400 hover:text-gray-600\"\n                >\n                  <PenTool className=\"h-4 w-4\" />\n                </button>\n              </div>\n\n              {/* Entry content */}\n              <p className={`text-gray-700 mb-3 ${\n                selectedEntry === entry.id ? '' : 'line-clamp-3'\n              }`}>\n                {entry.content}\n              </p>\n\n              {/* Tags and emotions */}\n              <div className=\"flex flex-wrap gap-2 mb-2\">\n                {entry.tags?.map(tag => (\n                  <span\n                    key={tag}\n                    className=\"px-2 py-1 bg-purple-100 text-purple-700 text-xs rounded-full\"\n                  >\n                    #{tag}\n                  </span>\n                ))}\n                {entry.emotions?.map(emotion => (\n                  <span\n                    key={emotion}\n                    className=\"px-2 py-1 bg-pink-100 text-pink-700 text-xs rounded-full\"\n                  >\n                    {emotion}\n                  </span>\n                ))}\n              </div>\n\n              {/* Expanded content */}\n              <AnimatePresence>\n                {selectedEntry === entry.id && (\n                  <motion.div\n                    initial={{ height: 0, opacity: 0 }}\n                    animate={{ height: 'auto', opacity: 1 }}\n                    exit={{ height: 0, opacity: 0 }}\n                    className=\"overflow-hidden\"\n                  >\n                    <div className=\"pt-3 border-t border-gray-100 space-y-3\">\n                      {/* Gratitude */}\n                      {entry.gratitude && entry.gratitude.length > 0 && (\n                        <div>\n                          <h5 className=\"text-sm font-medium text-gray-700 mb-1 flex items-center\">\n                            <Heart className=\"h-4 w-4 mr-1 text-red-500\" />\n                            Gratitude\n                          </h5>\n                          <ul className=\"text-sm text-gray-600 space-y-1\">\n                            {entry.gratitude.map((item, idx) => (\n                              <li key={idx} className=\"flex items-start\">\n                                <CheckCircle className=\"h-3 w-3 text-green-500 mr-2 mt-0.5 flex-shrink-0\" />\n                                {item}\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n\n                      {/* Achievements */}\n                      {entry.achievements && entry.achievements.length > 0 && (\n                        <div>\n                          <h5 className=\"text-sm font-medium text-gray-700 mb-1 flex items-center\">\n                            <Award className=\"h-4 w-4 mr-1 text-yellow-500\" />\n                            Achievements\n                          </h5>\n                          <ul className=\"text-sm text-gray-600 space-y-1\">\n                            {entry.achievements.map((item, idx) => (\n                              <li key={idx} className=\"flex items-start\">\n                                <CheckCircle className=\"h-3 w-3 text-green-500 mr-2 mt-0.5 flex-shrink-0\" />\n                                {item}\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n\n                      {/* Sentiment emotions breakdown */}\n                      {entry.sentiment?.emotions && (\n                        <div>\n                          <h5 className=\"text-sm font-medium text-gray-700 mb-2\">Emotional Analysis</h5>\n                          <div className=\"grid grid-cols-3 gap-2\">\n                            {Object.entries(entry.sentiment.emotions).map(([emotion, value]) => (\n                              <div key={emotion} className=\"text-center\">\n                                <div className=\"h-1 bg-gray-200 rounded-full overflow-hidden mb-1\">\n                                  <div\n                                    className=\"h-full bg-gradient-to-r from-purple-400 to-purple-600\"\n                                    style={{ width: `${value * 100}%` }}\n                                  />\n                                </div>\n                                <p className=\"text-xs text-gray-600 capitalize\">{emotion}</p>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Metadata */}\n                      <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                        <span className=\"flex items-center\">\n                          <FileText className=\"h-3 w-3 mr-1\" />\n                          {entry.wordCount} words\n                        </span>\n                        {entry.prompts && entry.prompts.length > 0 && (\n                          <span className=\"flex items-center\">\n                            <MessageSquare className=\"h-3 w-3 mr-1\" />\n                            Prompted\n                          </span>\n                        )}\n                        {entry.editedAt && (\n                          <span className=\"flex items-center\">\n                            <Clock className=\"h-3 w-3 mr-1\" />\n                            Edited {format(new Date(entry.editedAt), 'MMM d')}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </motion.div>\n          ))\n        ) : (\n          <div className=\"text-center py-12\">\n            <BookOpen className=\"h-12 w-12 text-gray-300 mx-auto mb-3\" />\n            <p className=\"text-gray-500\">No journal entries found</p>\n            <p className=\"text-sm text-gray-400 mt-1\">\n              {searchQuery || selectedTags.length > 0 || selectedEmotions.length > 0\n                ? 'Try adjusting your filters'\n                : 'Start writing to track your journey'}\n            </p>\n            <button\n              onClick={onNewEntry}\n              className=\"mt-4 px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors\"\n            >\n              Write Your First Entry\n            </button>\n          </div>\n        )}\n      </div>\n\n      {/* Insights */}\n      {filteredEntries.length >= 5 && (\n        <div className=\"bg-gradient-to-br from-blue-50 to-indigo-50 rounded-xl p-4\">\n          <h4 className=\"font-semibold text-gray-800 mb-3 flex items-center\">\n            <Brain className=\"h-5 w-5 mr-2 text-indigo-600\" />\n            Journal Insights\n          </h4>\n          <div className=\"space-y-2 text-sm text-gray-700\">\n            <div className=\"flex items-center justify-between\">\n              <span>Most frequent emotion:</span>\n              <span className=\"font-medium\">\n                {allEmotions[0] || 'Not enough data'}\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span>Average mood trend:</span>\n              <span className=\"font-medium flex items-center\">\n                {sentimentStats?.avgSentiment && sentimentStats.avgSentiment > 0 ? (\n                  <>\n                    <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                    Improving\n                  </>\n                ) : (\n                  <>\n                    <AlertCircle className=\"h-4 w-4 text-yellow-500 mr-1\" />\n                    Variable\n                  </>\n                )}\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span>Writing consistency:</span>\n              <span className=\"font-medium\">\n                {filteredEntries.length} entries this period\n              </span>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\wellness\\MeditationMindfulness.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'calculateCurrentStreak'. Either include it or remove the dependency array.","line":153,"column":6,"nodeType":"ArrayExpression","endLine":153,"endColumn":74,"suggestions":[{"desc":"Update the dependencies array to be: [totalMinutes, meditationSessions, currentStreak, calculateCurrentStreak]","fix":{"range":[4319,4387],"text":"[totalMinutes, meditationSessions, currentStreak, calculateCurrentStreak]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'selectedTimeRange'. Either exclude it or remove the dependency array.","line":214,"column":6,"nodeType":"ArrayExpression","endLine":214,"endColumn":45,"suggestions":[{"desc":"Update the dependencies array to be: [meditationSessions]","fix":{"range":[5998,6037],"text":"[meditationSessions]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, _useEffect, useMemo } from 'react';\nimport { motion, _AnimatePresence } from 'framer-motion';\nimport {\n  Brain,\n  Wind,\n  Heart,\n  _Play,\n  _Pause,\n  Clock,\n  _Calendar,\n  Flame,\n  TrendingUp,\n  _Award,\n  _Volume2,\n  Headphones,\n  Sun,\n  Moon,\n  _Cloud,\n  _Zap,\n  Target,\n  ChevronRight,\n  _BarChart,\n  _PieChart\n} from 'lucide-react';\nimport { format, _startOfWeek, _endOfWeek, _eachDayOfInterval, isToday } from 'date-fns';\nimport {\n  _LineChart,\n  _Line,\n  _BarChart as RechartsBarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  Cell,\n  _PieChart as _RechartsPieChart,\n  _Pie\n} from 'recharts';\n\ninterface MeditationSession {\n  id: string;\n  timestamp: Date;\n  duration: number; // in minutes\n  type: 'guided' | 'unguided' | 'breathing' | 'body-scan' | 'loving-kindness' | 'mindfulness';\n  moodBefore?: number;\n  moodAfter?: number;\n  notes?: string;\n  technique?: string;\n  environment?: 'quiet' | 'nature' | 'music' | 'guided-audio';\n}\n\ninterface MeditationMindfulnessProps {\n  sessions?: MeditationSession[];\n  currentStreak?: number;\n  totalMinutes?: number;\n  onStartSession?: (type: string) => void;\n  onViewHistory?: () => void;\n  onSetGoal?: () => void;\n}\n\nexport function MeditationMindfulness({\n  sessions = [],\n  currentStreak = 0,\n  totalMinutes = 0,\n  onStartSession,\n  onViewHistory,\n  onSetGoal\n}: MeditationMindfulnessProps) {\n  const [selectedTimeRange, setSelectedTimeRange] = useState<'week' | 'month' | 'year'>('week');\n  const [showRecommendations, _setShowRecommendations] = useState(true);\n  const [activeSession, _setActiveSession] = useState<string | null>(null);\n\n  // Mock data if no sessions provided\n  const mockSessions: MeditationSession[] = [\n    {\n      id: '1',\n      timestamp: new Date(),\n      duration: 15,\n      type: 'mindfulness',\n      moodBefore: 5,\n      moodAfter: 7,\n      environment: 'quiet'\n    },\n    {\n      id: '2',\n      timestamp: new Date(Date._now() - 86400000),\n      duration: 10,\n      type: 'breathing',\n      moodBefore: 6,\n      moodAfter: 8,\n      environment: 'nature'\n    },\n    {\n      id: '3',\n      timestamp: new Date(Date._now() - 172800000),\n      duration: 20,\n      type: 'guided',\n      moodBefore: 4,\n      moodAfter: 7,\n      environment: 'guided-audio'\n    }\n  ];\n\n  const meditationSessions = sessions.length > 0 ? sessions : mockSessions;\n\n  // Calculate statistics\n  const stats = useMemo(() => {\n    const _now = new Date();\n    const _weekAgo = new Date(_now.getTime() - 7 * 24 * 60 * 60 * 1000);\n    const _monthAgo = new Date(_now.getTime() - 30 * 24 * 60 * 60 * 1000);\n    const _yearAgo = new Date(_now.getTime() - 365 * 24 * 60 * 60 * 1000);\n\n    const getSessionsInRange = (start: Date) => \n      meditationSessions.filter(s => new Date(s.timestamp) >= start);\n\n    const _weekSessions = getSessionsInRange(_weekAgo);\n    const _monthSessions = getSessionsInRange(_monthAgo);\n    const _yearSessions = getSessionsInRange(_yearAgo);\n\n    const calculateStats = (sessions: MeditationSession[]) => ({\n      totalSessions: sessions.length,\n      totalMinutes: sessions.reduce((sum, s) => sum + s.duration, 0),\n      avgDuration: sessions.length > 0 \n        ? Math.round(sessions.reduce((sum, s) => sum + s.duration, 0) / sessions.length)\n        : 0,\n      avgMoodImprovement: sessions.filter(s => s.moodBefore && s.moodAfter).length > 0\n        ? sessions\n            .filter(s => s.moodBefore && s.moodAfter)\n            .reduce((sum, s) => sum + ((s.moodAfter || 0) - (s.moodBefore || 0)), 0) /\n          sessions.filter(s => s.moodBefore && s.moodAfter).length\n        : 0,\n      favoriteType: sessions.length > 0\n        ? Object.entries(\n            sessions.reduce((acc, s) => {\n              acc[s.type] = (acc[s.type] || 0) + 1;\n              return acc;\n            }, {} as Record<string, number>)\n          ).sort((a, b) => b[1] - a[1])[0]?.[0]\n        : null\n    });\n\n    return {\n      week: calculateStats(_weekSessions),\n      month: calculateStats(_monthSessions),\n      year: calculateStats(_yearSessions),\n      allTime: {\n        totalMinutes: totalMinutes || meditationSessions.reduce((sum, s) => sum + s.duration, 0),\n        totalSessions: meditationSessions.length,\n        currentStreak: currentStreak || calculateCurrentStreak()\n      }\n    };\n  }, [meditationSessions, selectedTimeRange, totalMinutes, currentStreak]);\n\n  // Calculate current streak\n  function calculateCurrentStreak(): number {\n    let streak = 0;\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    for (let i = 0; i < 365; i++) {\n      const date = new Date(_today);\n      date.setDate(date.getDate() - i);\n      \n      const _hasSession = meditationSessions.some(s => {\n        const sessionDate = new Date(s.timestamp);\n        sessionDate.setHours(0, 0, 0, 0);\n        return sessionDate.getTime() === date.getTime();\n      });\n\n      if (_hasSession) {\n        streak++;\n      } else if (i > 0) {\n        break;\n      }\n    }\n\n    return streak;\n  }\n\n  // Get chart data\n  const chartData = useMemo(() => {\n    const _now = new Date();\n    let days = 7;\n    \n    switch (_selectedTimeRange) {\n      case 'month': days = 30; break;\n      case 'year': days = 365; break;\n    }\n\n    const data = [];\n    for (let i = days - 1; i >= 0; i--) {\n      const date = new Date(_now);\n      date.setDate(date.getDate() - i);\n      date.setHours(0, 0, 0, 0);\n\n      const daySessions = meditationSessions.filter(s => {\n        const sessionDate = new Date(s.timestamp);\n        sessionDate.setHours(0, 0, 0, 0);\n        return sessionDate.getTime() === date.getTime();\n      });\n\n      data.push({\n        date: format(date, days > 30 ? 'MMM' : 'MMM dd'),\n        minutes: daySessions.reduce((sum, s) => sum + s.duration, 0),\n        sessions: daySessions.length,\n        avgMood: daySessions.length > 0\n          ? daySessions.reduce((sum, s) => sum + (s.moodAfter || 0), 0) / daySessions.length\n          : 0\n      });\n    }\n\n    return data;\n  }, [meditationSessions, selectedTimeRange]);\n\n  // Get session type distribution\n  const typeDistribution = useMemo(() => {\n    const _distribution = meditationSessions.reduce((acc, s) => {\n      acc[s.type] = (acc[s.type] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    return Object.entries(_distribution).map(([type, count]) => ({\n      name: type.charAt(0).toUpperCase() + type.slice(1).replace('-', ' '),\n      value: count,\n      percentage: Math.round((count / meditationSessions.length) * 100)\n    }));\n  }, [meditationSessions]);\n\n  // Get recommendations based on patterns\n  const recommendations = useMemo(() => {\n    const currentStats = stats[selectedTimeRange];\n    const recs = [];\n\n    // Time of day recommendation\n    const morningSessions = meditationSessions.filter(s => \n      new Date(s.timestamp).getHours() < 12\n    );\n    const eveningSessions = meditationSessions.filter(s => \n      new Date(s.timestamp).getHours() >= 18\n    );\n\n    if (morningSessions.length > eveningSessions.length) {\n      recs.push({\n        icon: Sun,\n        title: 'Morning Meditator',\n        description: 'You prefer morning sessions. Keep this routine!',\n        color: 'text-yellow-500'\n      });\n    } else if (eveningSessions.length > morningSessions.length) {\n      recs.push({\n        icon: Moon,\n        title: 'Evening Practice',\n        description: 'Evening meditation helps you unwind. Great choice!',\n        color: 'text-indigo-500'\n      });\n    }\n\n    // Mood improvement recommendation\n    if (currentStats.avgMoodImprovement > 1.5) {\n      recs.push({\n        icon: TrendingUp,\n        title: 'Mood Booster',\n        description: `Average mood improvement: +${currentStats.avgMoodImprovement.toFixed(1)} points`,\n        color: 'text-green-500'\n      });\n    }\n\n    // Consistency recommendation\n    if (stats.allTime.currentStreak >= 7) {\n      recs.push({\n        icon: Flame,\n        title: `${stats.allTime.currentStreak} Day Streak!`,\n        description: 'Amazing consistency! Keep it going!',\n        color: 'text-orange-500'\n      });\n    } else if (stats.allTime.currentStreak < 3) {\n      recs.push({\n        icon: Target,\n        title: 'Build Consistency',\n        description: 'Try to meditate 3 days in a row to start a streak',\n        color: 'text-blue-500'\n      });\n    }\n\n    // Duration recommendation\n    if (currentStats.avgDuration < 10) {\n      recs.push({\n        icon: Clock,\n        title: 'Extend Sessions',\n        description: 'Try increasing to 10-15 minutes for deeper benefits',\n        color: 'text-purple-500'\n      });\n    }\n\n    return recs.slice(0, 3);\n  }, [meditationSessions, stats, selectedTimeRange]);\n\n  // Quick meditation options\n  const quickMeditations = [\n    {\n      id: 'breathing',\n      title: '3-Minute Breathing',\n      description: 'Quick stress relief',\n      icon: Wind,\n      duration: 3,\n      color: 'from-blue-400 to-blue-600'\n    },\n    {\n      id: 'mindfulness',\n      title: '5-Minute Mindfulness',\n      description: 'Present moment awareness',\n      icon: Brain,\n      duration: 5,\n      color: 'from-purple-400 to-purple-600'\n    },\n    {\n      id: 'body-scan',\n      title: '10-Minute Body Scan',\n      description: 'Full body relaxation',\n      icon: Heart,\n      duration: 10,\n      color: 'from-pink-400 to-pink-600'\n    },\n    {\n      id: 'loving-kindness',\n      title: '15-Minute Loving Kindness',\n      description: 'Compassion practice',\n      icon: Heart,\n      duration: 15,\n      color: 'from-red-400 to-red-600'\n    }\n  ];\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Header with streak and stats */}\n      <div className=\"bg-gradient-to-r from-indigo-500 to-purple-600 rounded-xl p-6 text-white\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h3 className=\"text-2xl font-bold mb-1\">Meditation & Mindfulness</h3>\n            <p className=\"text-indigo-100\">Find your inner peace</p>\n          </div>\n          \n          {/* Streak indicator */}\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center mb-1\">\n              <Flame className=\"h-8 w-8 text-orange-400\" />\n              <span className=\"text-3xl font-bold ml-2\">{stats.allTime.currentStreak}</span>\n            </div>\n            <p className=\"text-xs text-indigo-100\">Day Streak</p>\n          </div>\n        </div>\n\n        {/* Quick stats */}\n        <div className=\"grid grid-cols-3 gap-4\">\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold\">{stats.allTime.totalMinutes}</p>\n            <p className=\"text-xs text-indigo-100\">Total Minutes</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold\">{stats.allTime.totalSessions}</p>\n            <p className=\"text-xs text-indigo-100\">Sessions</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold\">\n              {stats[selectedTimeRange].avgMoodImprovement > 0 ? '+' : ''}\n              {stats[selectedTimeRange].avgMoodImprovement.toFixed(1)}\n            </p>\n            <p className=\"text-xs text-indigo-100\">Mood Boost</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick start meditations */}\n      <div>\n        <h4 className=\"font-semibold text-gray-800 mb-3\">Quick Start</h4>\n        <div className=\"grid grid-cols-2 gap-3\">\n          {quickMeditations.map(meditation => {\n            const Icon = meditation.icon;\n            return (\n              <motion.button\n                key={meditation.id}\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n                onClick={() => onStartSession?.(meditation.id)}\n                className={`relative overflow-hidden rounded-xl p-4 text-white bg-gradient-to-br ${meditation.color} hover:shadow-lg transition-all`}\n              >\n                <div className=\"relative z-10\">\n                  <Icon className=\"h-6 w-6 mb-2\" />\n                  <h5 className=\"font-medium text-sm\">{meditation.title}</h5>\n                  <p className=\"text-xs opacity-90 mt-1\">{meditation.description}</p>\n                  <div className=\"flex items-center mt-2\">\n                    <Clock className=\"h-3 w-3 mr-1\" />\n                    <span className=\"text-xs\">{meditation.duration} min</span>\n                  </div>\n                </div>\n                {activeSession === meditation.id && (\n                  <motion.div\n                    className=\"absolute inset-0 bg-white opacity-20\"\n                    animate={{ opacity: [0.2, 0.4, 0.2] }}\n                    transition={{ repeat: Infinity, duration: 2 }}\n                  />\n                )}\n              </motion.button>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Progress chart */}\n      <div className=\"bg-white rounded-xl p-4 border border-gray-200\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h4 className=\"font-semibold text-gray-800\">Progress</h4>\n          <div className=\"flex space-x-1\">\n            {(['week', 'month', 'year'] as const).map(range => (\n              <button\n                key={range}\n                onClick={() => setSelectedTimeRange(_range)}\n                className={`px-3 py-1 rounded-lg text-sm font-medium transition-colors ${\n                  selectedTimeRange === range\n                    ? 'bg-purple-100 text-purple-700'\n                    : 'text-gray-600 hover:bg-gray-100'\n                }`}\n              >\n                {range.charAt(0).toUpperCase() + range.slice(1)}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        <ResponsiveContainer width=\"100%\" height={200}>\n          <RechartsBarChart data={chartData}>\n            <CartesianGrid strokeDasharray=\"3 3\" opacity={0.3} />\n            <XAxis \n              dataKey=\"date\" \n              tick={{ fontSize: 10 }}\n              interval={selectedTimeRange === 'year' ? 30 : 'preserveStartEnd'}\n            />\n            <YAxis tick={{ fontSize: 10 }} />\n            <Tooltip />\n            <Bar dataKey=\"minutes\" fill=\"#8b5cf6\" radius={[4, 4, 0, 0]}>\n              {chartData.map((entry, index) => (\n                <Cell \n                  key={`cell-${index}`} \n                  fill={entry.minutes > 0 ? '#8b5cf6' : '#e5e7eb'} \n                />\n              ))}\n            </Bar>\n          </RechartsBarChart>\n        </ResponsiveContainer>\n\n        {/* Summary stats for selected period */}\n        <div className=\"grid grid-cols-4 gap-3 mt-4\">\n          <div className=\"text-center\">\n            <p className=\"text-xs text-gray-500\">Sessions</p>\n            <p className=\"text-lg font-bold text-gray-800\">\n              {stats[selectedTimeRange].totalSessions}\n            </p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-xs text-gray-500\">Minutes</p>\n            <p className=\"text-lg font-bold text-gray-800\">\n              {stats[selectedTimeRange].totalMinutes}\n            </p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-xs text-gray-500\">Avg Duration</p>\n            <p className=\"text-lg font-bold text-gray-800\">\n              {stats[selectedTimeRange].avgDuration}m\n            </p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-xs text-gray-500\">Favorite</p>\n            <p className=\"text-lg font-bold text-gray-800 truncate\">\n              {stats[selectedTimeRange].favoriteType || 'N/A'}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Session type _distribution */}\n      {typeDistribution.length > 0 && (\n        <div className=\"bg-gradient-to-br from-purple-50 to-indigo-50 rounded-xl p-4\">\n          <h4 className=\"font-semibold text-gray-800 mb-3\">Practice Distribution</h4>\n          <div className=\"space-y-2\">\n            {typeDistribution.map(type => (\n              <div key={type.name} className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-700\">{type.name}</span>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-24 h-2 bg-gray-200 rounded-full overflow-hidden\">\n                    <motion.div\n                      className=\"h-full bg-gradient-to-r from-purple-400 to-purple-600\"\n                      initial={{ width: 0 }}\n                      animate={{ width: `${type.percentage}%` }}\n                      transition={{ duration: 0.5 }}\n                    />\n                  </div>\n                  <span className=\"text-sm font-medium text-gray-700 w-10 text-right\">\n                    {type.percentage}%\n                  </span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Recommendations */}\n      {showRecommendations && recommendations.length > 0 && (\n        <div className=\"space-y-2\">\n          <h4 className=\"font-semibold text-gray-800\">Insights</h4>\n          {recommendations.map((rec, _idx) => {\n            const Icon = rec.icon;\n            return (\n              <motion.div\n                key={_idx}\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ delay: _idx * 0.1 }}\n                className=\"flex items-start space-x-3 p-3 bg-white rounded-lg border border-gray-200\"\n              >\n                <Icon className={`h-5 w-5 mt-0.5 ${rec.color}`} />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-gray-800\">{rec.title}</p>\n                  <p className=\"text-xs text-gray-600 mt-0.5\">{rec.description}</p>\n                </div>\n              </motion.div>\n            );\n          })}\n        </div>\n      )}\n\n      {/* Recent sessions */}\n      <div className=\"bg-white rounded-xl p-4 border border-gray-200\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h4 className=\"font-semibold text-gray-800\">Recent Sessions</h4>\n          <button\n            onClick={onViewHistory}\n            className=\"text-sm text-purple-600 hover:text-purple-700 flex items-center\"\n          >\n            View All\n            <ChevronRight className=\"h-4 w-4 ml-1\" />\n          </button>\n        </div>\n        \n        {meditationSessions.slice(0, 3).map((session, _idx) => (\n          <div\n            key={session.id}\n            className=\"flex items-center justify-between py-2 border-b border-gray-100 last:border-0\"\n          >\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-purple-100 rounded-lg\">\n                {session.type === 'breathing' && <Wind className=\"h-4 w-4 text-purple-600\" />}\n                {session.type === 'mindfulness' && <Brain className=\"h-4 w-4 text-purple-600\" />}\n                {session.type === 'guided' && <Headphones className=\"h-4 w-4 text-purple-600\" />}\n                {session.type === 'body-scan' && <Heart className=\"h-4 w-4 text-purple-600\" />}\n                {session.type === 'loving-kindness' && <Heart className=\"h-4 w-4 text-purple-600\" />}\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-gray-800 capitalize\">\n                  {session.type.replace('-', ' ')}\n                </p>\n                <p className=\"text-xs text-gray-500\">\n                  {format(new Date(session.timestamp), 'MMM d, h:mm a')}\n                </p>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-sm font-medium text-gray-800\">{session.duration} min</p>\n              {session.moodBefore && session.moodAfter && (\n                <p className=\"text-xs text-green-600\">\n                  Mood +{session.moodAfter - session.moodBefore}\n                </p>\n              )}\n            </div>\n          </div>\n        ))}\n\n        {meditationSessions.length === 0 && (\n          <div className=\"text-center py-6 text-gray-500\">\n            <Brain className=\"h-8 w-8 mx-auto mb-2 text-gray-300\" />\n            <p className=\"text-sm\">No sessions yet</p>\n            <p className=\"text-xs mt-1\">Start your mindfulness journey today</p>\n          </div>\n        )}\n      </div>\n\n      {/* Goals section */}\n      <div className=\"bg-gradient-to-br from-yellow-50 to-orange-50 rounded-xl p-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h4 className=\"font-semibold text-gray-800 flex items-center\">\n            <Target className=\"h-5 w-5 mr-2 text-orange-500\" />\n            Meditation Goals\n          </h4>\n          <button\n            onClick={onSetGoal}\n            className=\"text-sm text-orange-600 hover:text-orange-700\"\n          >\n            Set Goal\n          </button>\n        </div>\n        \n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between p-2 bg-white rounded-lg\">\n            <span className=\"text-sm text-gray-700\">Daily Practice</span>\n            <span className=\"text-sm font-medium text-gray-800\">\n              {isToday(new Date(meditationSessions[0]?.timestamp || 0)) ? '✓ Done' : 'Pending'}\n            </span>\n          </div>\n          <div className=\"flex items-center justify-between p-2 bg-white rounded-lg\">\n            <span className=\"text-sm text-gray-700\">Weekly Goal: 70 min</span>\n            <span className=\"text-sm font-medium text-gray-800\">\n              {stats.week.totalMinutes}/70 min\n            </span>\n          </div>\n          <div className=\"flex items-center justify-between p-2 bg-white rounded-lg\">\n            <span className=\"text-sm text-gray-700\">Streak Goal: 30 days</span>\n            <span className=\"text-sm font-medium text-gray-800\">\n              {stats.allTime.currentStreak}/30 days\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\wellness\\MoodAnalytics.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedDate' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":62,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedDate' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":62,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":39},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'timeRange'. Either exclude it or remove the dependency array.","line":88,"column":6,"nodeType":"ArrayExpression","endLine":88,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2226,2237],"text":"[]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2637,2640],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2637,2640],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":310,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":317,"endColumn":11,"suggestions":[{"messageId":"addBrackets","fix":{"range":[10880,12082],"text":"{ const radarData = [\n          { factor: 'Mood', value: chartData.reduce((sum, d) => sum + d.avgMood, 0) / chartData.length },\n          { factor: 'Energy', value: chartData.reduce((sum, d) => sum + d.avgEnergy, 0) / chartData.length },\n          { factor: 'Sleep', value: chartData.reduce((sum, d) => sum + d.sleep, 0) / chartData.length },\n          { factor: 'Social', value: chartData.reduce((sum, d) => sum + d.socialInteraction, 0) / chartData.length },\n          { factor: 'Low Stress', value: 10 - (chartData.reduce((sum, d) => sum + d.avgStress, 0) / chartData.length) },\n          { factor: 'Low Anxiety', value: 10 - (chartData.reduce((sum, d) => sum + d.avgAnxiety, 0) / chartData.length) }\n        ];\n\n        return (\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <RadarChart data={radarData}>\n              <PolarGrid strokeDasharray=\"3 3\" />\n              <PolarAngleAxis dataKey=\"factor\" />\n              <PolarRadiusAxis angle={90} domain={[0, 10]} />\n              <Radar name=\"Wellness Factors\" dataKey=\"value\" stroke=\"#8b5cf6\" fill=\"#8b5cf6\" fillOpacity={0.6} />\n              <Tooltip />\n            </RadarChart>\n          </ResponsiveContainer>\n        ); }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":521,"column":17,"nodeType":"JSXOpeningElement","endLine":521,"endColumn":81},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":700,"column":21,"nodeType":"JSXOpeningElement","endLine":704,"endColumn":22},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":2,"message":"Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.","line":700,"column":21,"nodeType":"JSXOpeningElement","endLine":704,"endColumn":22}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, _useEffect, useMemo } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  TrendingUp,\n  TrendingDown,\n  _Calendar,\n  Brain,\n  AlertCircle,\n  Download,\n  Filter,\n  _ChevronLeft,\n  _ChevronRight,\n  Activity,\n  Cloud,\n  Moon,\n  _Sun,\n  Users,\n  Heart,\n  Target,\n  BarChart3,\n  LineChart,\n  PieChart\n} from 'lucide-react';\nimport {\n  LineChart as RechartsLineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  RadarChart,\n  Radar,\n  PolarGrid,\n  PolarAngleAxis,\n  PolarRadiusAxis,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  _Cell,\n  ReferenceLine,\n  _ReferenceArea\n} from 'recharts';\nimport { useWellnessStore } from '../../../../stores/wellnessStore';\nimport { format, _startOfWeek, _endOfWeek, _eachDayOfInterval, subDays, addDays } from 'date-fns';\n\ninterface MoodAnalyticsProps {\n  timeRange?: 'day' | 'week' | 'month' | 'year';\n  onExport?: (_data: unknown) => void;\n  onTriggerIdentified?: (trigger: string) => void;\n}\n\ntype ViewMode = 'overview' | 'patterns' | 'correlations' | 'predictions';\ntype ChartType = 'line' | 'area' | 'bar' | 'radar';\n\nexport function MoodAnalytics({ timeRange = 'week', onExport, onTriggerIdentified }: MoodAnalyticsProps) {\n  const { moodEntries, moodPatterns, _analyzeMoodPatterns, wellnessInsights } = useWellnessStore();\n  const [viewMode, setViewMode] = useState<ViewMode>('overview');\n  const [chartType, setChartType] = useState<ChartType>('line');\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [showFilters, setShowFilters] = useState(false);\n  const [selectedFactors, setSelectedFactors] = useState<string[]>(['mood', 'stress', 'energy']);\n\n  // Calculate date range based on selected time range\n  const dateRange = useMemo(() => {\n    const end = new Date();\n    let start = new Date();\n    \n    switch (_timeRange) {\n      case 'day':\n        start = new Date(end);\n        start.setHours(0, 0, 0, 0);\n        break;\n      case 'week':\n        start = subDays(end, 7);\n        break;\n      case 'month':\n        start = subDays(end, 30);\n        break;\n      case 'year':\n        start = subDays(end, 365);\n        break;\n    }\n    \n    return { start, end };\n  }, [timeRange]);\n\n  // Filter mood entries based on date range\n  const filteredEntries = useMemo(() => {\n    return moodEntries.filter(entry => {\n      const entryDate = new Date(entry.timestamp);\n      return entryDate >= dateRange.start && entryDate <= dateRange.end;\n    });\n  }, [moodEntries, dateRange]);\n\n  // Process data for charts\n  const chartData = useMemo(() => {\n    const dataByDay = new Map<string, any>();\n    \n    filteredEntries.forEach(entry => {\n      const date = format(new Date(entry.timestamp), 'yyyy-MM-dd');\n      \n      if (!dataByDay.has(_date)) {\n        dataByDay.set(date, {\n          date,\n          entries: [],\n          avgMood: 0,\n          avgStress: 0,\n          avgEnergy: 0,\n          avgAnxiety: 0,\n          sleep: 0,\n          exercise: false,\n          socialInteraction: 0\n        });\n      }\n      \n      const dayData = dataByDay.get(_date);\n      dayData.entries.push(_entry);\n    });\n\n    // Calculate averages for each day\n    const processedData = Array.from(dataByDay.values()).map(day => {\n      const entries = day.entries;\n      const count = entries.length;\n      \n      return {\n        ...day,\n        date: format(new Date(day.date), 'MMM dd'),\n        avgMood: entries.reduce((sum: number, e: unknown) => sum + e.moodScore, 0) / count,\n        avgStress: entries.reduce((sum: number, e: unknown) => sum + (e.stressLevel || 0), 0) / count,\n        avgEnergy: entries.reduce((sum: number, e: unknown) => sum + (e.energyLevel || 0), 0) / count,\n        avgAnxiety: entries.reduce((sum: number, e: unknown) => sum + (e.anxietyLevel || 0), 0) / count,\n        sleep: Math.max(...entries.map((e: unknown) => e.sleep || 0)),\n        exercise: entries.some((e: unknown) => e.exercise),\n        socialInteraction: Math.max(...entries.map((e: unknown) => e.socialInteraction || 0))\n      };\n    });\n\n    return processedData.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n  }, [filteredEntries]);\n\n  // Correlation analysis\n  const correlations = useMemo(() => {\n    const factors = ['sleep', 'exercise', 'socialInteraction', 'weather'];\n    const correlationData: unknown[] = [];\n\n    factors.forEach(factor => {\n      const withFactor = filteredEntries.filter((e: unknown) => {\n        switch (factor) {\n          case 'sleep': return e.sleep && e.sleep >= 7;\n          case 'exercise': return e.exercise === true;\n          case 'socialInteraction': return e.socialInteraction && e.socialInteraction >= 3;\n          case 'weather': return e.weather === 'sunny';\n          default: return false;\n        }\n      });\n\n      const withoutFactor = filteredEntries.filter((e: unknown) => {\n        switch (factor) {\n          case 'sleep': return !e.sleep || e.sleep < 7;\n          case 'exercise': return e.exercise === false;\n          case 'socialInteraction': return !e.socialInteraction || e.socialInteraction < 3;\n          case 'weather': return e.weather !== 'sunny';\n          default: return false;\n        }\n      });\n\n      if (withFactor.length > 0 && withoutFactor.length > 0) {\n        const avgWithFactor = withFactor.reduce((sum, e) => sum + e.moodScore, 0) / withFactor.length;\n        const avgWithoutFactor = withoutFactor.reduce((sum, e) => sum + e.moodScore, 0) / withoutFactor.length;\n        const impact = ((avgWithFactor - avgWithoutFactor) / avgWithoutFactor) * 100;\n\n        correlationData.push({\n          factor: factor.charAt(0).toUpperCase() + factor.slice(1).replace(/([A-Z])/g, ' $1'),\n          impact: Math.round(_impact),\n          positive: impact > 0,\n          avgWith: avgWithFactor.toFixed(1),\n          avgWithout: avgWithoutFactor.toFixed(1),\n          samples: withFactor.length + withoutFactor.length\n        });\n      }\n    });\n\n    return correlationData.sort((a, b) => Math.abs(b.impact) - Math.abs(a.impact));\n  }, [filteredEntries]);\n\n  // Trigger analysis\n  const triggerAnalysis = useMemo(() => {\n    const triggerMap = new Map<string, { count: number; avgMood: number; entries: unknown[] }>();\n\n    filteredEntries.forEach(entry => {\n      entry.triggers.forEach(trigger => {\n        if (!triggerMap.has(_trigger)) {\n          triggerMap.set(trigger, { count: 0, avgMood: 0, entries: [] });\n        }\n        const data = triggerMap.get(_trigger)!;\n        data.count++;\n        data.entries.push(_entry);\n      });\n    });\n\n    const triggerData = Array.from(triggerMap.entries()).map(([trigger, _data]) => ({\n      trigger,\n      count: _data.count,\n      avgMood: _data.entries.reduce((sum, e) => sum + e.moodScore, 0) / _data.entries.length,\n      impact: 'negative' as const,\n      percentage: (_data.count / filteredEntries.length) * 100\n    }));\n\n    return triggerData.sort((a, b) => b.count - a.count).slice(0, 5);\n  }, [filteredEntries]);\n\n  // Mood predictions based on patterns\n  const predictions = useMemo(() => {\n    if (chartData.length < 7) return [];\n\n    const lastWeekData = chartData.slice(-7);\n    const avgMood = lastWeekData.reduce((sum, d) => sum + d.avgMood, 0) / lastWeekData.length;\n    const trend = lastWeekData[lastWeekData.length - 1].avgMood - lastWeekData[0].avgMood;\n\n    const nextWeekPredictions = [];\n    for (let i = 1; i <= 7; i++) {\n      const date = addDays(new Date(), i);\n      const dayOfWeek = date.getDay();\n      \n      // Simple prediction model based on day of week patterns and trend\n      const weekdayModifier = [0, -0.5, -0.3, 0, 0.2, 0.8, 0.5][dayOfWeek] || 0; // Sunday = 0\n      const trendModifier = trend * 0.1 * i;\n      const predictedMood = Math.max(1, Math.min(10, avgMood + weekdayModifier + trendModifier));\n\n      nextWeekPredictions.push({\n        date: format(date, 'MMM dd'),\n        predictedMood: predictedMood.toFixed(1),\n        confidence: Math.max(0.5, 1 - (i * 0.1)) // Confidence decreases with distance\n      });\n    }\n\n    return nextWeekPredictions;\n  }, [chartData]);\n\n  // Render different chart types\n  const renderChart = () => {\n    const _colors = {\n      mood: '#8b5cf6',\n      stress: '#ef4444',\n      energy: '#3b82f6',\n      anxiety: '#f59e0b',\n      sleep: '#10b981',\n      social: '#ec4899'\n    };\n\n    switch (_chartType) {\n      case 'area':\n        return (\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <AreaChart data={chartData}>\n              <defs>\n                <linearGradient id=\"moodGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"#8b5cf6\" stopOpacity={0.8}/>\n                  <stop offset=\"95%\" stopColor=\"#8b5cf6\" stopOpacity={0.1}/>\n                </linearGradient>\n                <linearGradient id=\"stressGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"#ef4444\" stopOpacity={0.8}/>\n                  <stop offset=\"95%\" stopColor=\"#ef4444\" stopOpacity={0.1}/>\n                </linearGradient>\n              </defs>\n              <CartesianGrid strokeDasharray=\"3 3\" opacity={0.3} />\n              <XAxis dataKey=\"date\" />\n              <YAxis domain={[0, 10]} />\n              <Tooltip />\n              <Legend />\n              {selectedFactors.includes('mood') && (\n                <Area type=\"monotone\" dataKey=\"avgMood\" stroke=\"#8b5cf6\" fillOpacity={1} fill=\"url(#moodGradient)\" name=\"Mood\" />\n              )}\n              {selectedFactors.includes('stress') && (\n                <Area type=\"monotone\" dataKey=\"avgStress\" stroke=\"#ef4444\" fillOpacity={1} fill=\"url(#stressGradient)\" name=\"Stress\" />\n              )}\n              {selectedFactors.includes('energy') && (\n                <Area type=\"monotone\" dataKey=\"avgEnergy\" stroke=\"#3b82f6\" fillOpacity={0.3} fill=\"#3b82f6\" name=\"Energy\" />\n              )}\n            </AreaChart>\n          </ResponsiveContainer>\n        );\n\n      case 'bar':\n        return (\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={chartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" opacity={0.3} />\n              <XAxis dataKey=\"date\" />\n              <YAxis domain={[0, 10]} />\n              <Tooltip />\n              <Legend />\n              {selectedFactors.includes('mood') && (\n                <Bar dataKey=\"avgMood\" fill=\"#8b5cf6\" name=\"Mood\" radius={[4, 4, 0, 0]} />\n              )}\n              {selectedFactors.includes('stress') && (\n                <Bar dataKey=\"avgStress\" fill=\"#ef4444\" name=\"Stress\" radius={[4, 4, 0, 0]} />\n              )}\n              {selectedFactors.includes('energy') && (\n                <Bar dataKey=\"avgEnergy\" fill=\"#3b82f6\" name=\"Energy\" radius={[4, 4, 0, 0]} />\n              )}\n            </BarChart>\n          </ResponsiveContainer>\n        );\n\n      case 'radar':\n        const radarData = [\n          { factor: 'Mood', value: chartData.reduce((sum, d) => sum + d.avgMood, 0) / chartData.length },\n          { factor: 'Energy', value: chartData.reduce((sum, d) => sum + d.avgEnergy, 0) / chartData.length },\n          { factor: 'Sleep', value: chartData.reduce((sum, d) => sum + d.sleep, 0) / chartData.length },\n          { factor: 'Social', value: chartData.reduce((sum, d) => sum + d.socialInteraction, 0) / chartData.length },\n          { factor: 'Low Stress', value: 10 - (chartData.reduce((sum, d) => sum + d.avgStress, 0) / chartData.length) },\n          { factor: 'Low Anxiety', value: 10 - (chartData.reduce((sum, d) => sum + d.avgAnxiety, 0) / chartData.length) }\n        ];\n\n        return (\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <RadarChart data={radarData}>\n              <PolarGrid strokeDasharray=\"3 3\" />\n              <PolarAngleAxis dataKey=\"factor\" />\n              <PolarRadiusAxis angle={90} domain={[0, 10]} />\n              <Radar name=\"Wellness Factors\" dataKey=\"value\" stroke=\"#8b5cf6\" fill=\"#8b5cf6\" fillOpacity={0.6} />\n              <Tooltip />\n            </RadarChart>\n          </ResponsiveContainer>\n        );\n\n      default: // line chart\n        return (\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <RechartsLineChart data={chartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" opacity={0.3} />\n              <XAxis dataKey=\"date\" />\n              <YAxis domain={[0, 10]} />\n              <Tooltip />\n              <Legend />\n              <ReferenceLine y={5} stroke=\"#9ca3af\" strokeDasharray=\"3 3\" />\n              <ReferenceLine y={7} stroke=\"#10b981\" strokeDasharray=\"3 3\" />\n              {selectedFactors.includes('mood') && (\n                <Line type=\"monotone\" dataKey=\"avgMood\" stroke=\"#8b5cf6\" strokeWidth={2} dot={{ r: 4 }} name=\"Mood\" />\n              )}\n              {selectedFactors.includes('stress') && (\n                <Line type=\"monotone\" dataKey=\"avgStress\" stroke=\"#ef4444\" strokeWidth={2} dot={{ r: 4 }} name=\"Stress\" />\n              )}\n              {selectedFactors.includes('energy') && (\n                <Line type=\"monotone\" dataKey=\"avgEnergy\" stroke=\"#3b82f6\" strokeWidth={2} dot={{ r: 4 }} name=\"Energy\" />\n              )}\n              {selectedFactors.includes('anxiety') && (\n                <Line type=\"monotone\" dataKey=\"avgAnxiety\" stroke=\"#f59e0b\" strokeWidth={2} dot={{ r: 4 }} name=\"Anxiety\" />\n              )}\n            </RechartsLineChart>\n          </ResponsiveContainer>\n        );\n    }\n  };\n\n  // Export data for healthcare providers\n  const handleExport = () => {\n    const _exportData = {\n      dateRange,\n      entries: filteredEntries,\n      patterns: moodPatterns,\n      correlations,\n      triggers: triggerAnalysis,\n      summary: {\n        avgMood: filteredEntries.reduce((sum, e) => sum + e.moodScore, 0) / filteredEntries.length,\n        totalEntries: filteredEntries.length,\n        insights: wellnessInsights.filter(i => i.category === 'mood')\n      }\n    };\n\n    if (_onExport) {\n      onExport(_exportData);\n    } else {\n      // Create CSV or PDF export\n      const csv = convertToCSV(_exportData);\n      downloadCSV(csv, `mood-report-${format(new Date(), 'yyyy-MM-dd')}.csv`);\n    }\n  };\n\n  const convertToCSV = (_data: unknown) => {\n    const headers = ['Date', 'Mood', 'Stress', 'Energy', 'Anxiety', 'Sleep', 'Exercise', 'Social', 'Triggers', 'Notes'];\n    const rows = filteredEntries.map(entry => [\n      format(new Date(entry.timestamp), 'yyyy-MM-dd HH:mm'),\n      entry.moodScore,\n      entry.stressLevel || '',\n      entry.energyLevel || '',\n      entry.anxietyLevel || '',\n      entry.sleep || '',\n      entry.exercise ? 'Yes' : 'No',\n      entry.socialInteraction || '',\n      entry.triggers.join('; '),\n      entry.notes || ''\n    ]);\n\n    return [headers, ...rows].map(row => row.join(',')).join('\\n');\n  };\n\n  const downloadCSV = (csv: string, filename: string) => {\n    const _blob = new Blob([csv], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(_blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    a.click();\n    window.URL.revokeObjectURL(_url);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Header with controls */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div className=\"flex items-center space-x-2\">\n          <button\n            onClick={() => setViewMode('overview')}\n            className={`px-3 py-1 rounded-lg text-sm font-medium transition-_colors ${\n              viewMode === 'overview' \n                ? 'bg-purple-100 text-purple-700' \n                : 'text-gray-600 hover:bg-gray-100'\n            }`}\n          >\n            Overview\n          </button>\n          <button\n            onClick={() => setViewMode('patterns')}\n            className={`px-3 py-1 rounded-lg text-sm font-medium transition-_colors ${\n              viewMode === 'patterns' \n                ? 'bg-purple-100 text-purple-700' \n                : 'text-gray-600 hover:bg-gray-100'\n            }`}\n          >\n            Patterns\n          </button>\n          <button\n            onClick={() => setViewMode('correlations')}\n            className={`px-3 py-1 rounded-lg text-sm font-medium transition-_colors ${\n              viewMode === 'correlations' \n                ? 'bg-purple-100 text-purple-700' \n                : 'text-gray-600 hover:bg-gray-100'\n            }`}\n          >\n            Correlations\n          </button>\n          <button\n            onClick={() => setViewMode('predictions')}\n            className={`px-3 py-1 rounded-lg text-sm font-medium transition-_colors ${\n              viewMode === 'predictions' \n                ? 'bg-purple-100 text-purple-700' \n                : 'text-gray-600 hover:bg-gray-100'\n            }`}\n          >\n            Predictions\n          </button>\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          {/* Chart type selector */}\n          <div className=\"flex items-center space-x-1 bg-gray-100 rounded-lg p-1\">\n            <button\n              onClick={() => setChartType('line')}\n              className={`p-1 rounded ${chartType === 'line' ? 'bg-white shadow-sm' : ''}`}\n              aria-label=\"Line chart\"\n            >\n              <LineChart className=\"h-4 w-4\" />\n            </button>\n            <button\n              onClick={() => setChartType('area')}\n              className={`p-1 rounded ${chartType === 'area' ? 'bg-white shadow-sm' : ''}`}\n              aria-label=\"Area chart\"\n            >\n              <BarChart3 className=\"h-4 w-4\" />\n            </button>\n            <button\n              onClick={() => setChartType('bar')}\n              className={`p-1 rounded ${chartType === 'bar' ? 'bg-white shadow-sm' : ''}`}\n              aria-label=\"Bar chart\"\n            >\n              <BarChart3 className=\"h-4 w-4\" />\n            </button>\n            <button\n              onClick={() => setChartType('radar')}\n              className={`p-1 rounded ${chartType === 'radar' ? 'bg-white shadow-sm' : ''}`}\n              aria-label=\"Radar chart\"\n            >\n              <PieChart className=\"h-4 w-4\" />\n            </button>\n          </div>\n\n          <button\n            onClick={() => setShowFilters(!showFilters)}\n            className=\"p-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors\"\n            aria-label=\"Toggle filters\"\n          >\n            <Filter className=\"h-4 w-4\" />\n          </button>\n\n          <button\n            onClick={handleExport}\n            className=\"p-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors\"\n            aria-label=\"Export data\"\n          >\n            <Download className=\"h-4 w-4\" />\n          </button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <AnimatePresence>\n        {showFilters && (\n          <motion.div\n            initial={{ height: 0, opacity: 0 }}\n            animate={{ height: 'auto', opacity: 1 }}\n            exit={{ height: 0, opacity: 0 }}\n            className=\"overflow-hidden\"\n          >\n            <div className=\"p-4 bg-gray-50 rounded-lg space-y-3\">\n              <div>\n                <label className=\"text-sm font-medium text-gray-700 mb-2 block\">Factors to Display</label>\n                <div className=\"flex flex-wrap gap-2\">\n                  {['mood', 'stress', 'energy', 'anxiety', 'sleep', 'social'].map(factor => (\n                    <button\n                      key={factor}\n                      onClick={() => {\n                        setSelectedFactors(prev => \n                          prev.includes(factor) \n                            ? prev.filter(f => f !== factor)\n                            : [...prev, factor]\n                        );\n                      }}\n                      className={`px-3 py-1 rounded-full text-sm font-medium transition-_colors ${\n                        selectedFactors.includes(factor)\n                          ? 'bg-purple-500 text-white'\n                          : 'bg-white text-gray-700 border border-gray-300'\n                      }`}\n                    >\n                      {factor.charAt(0).toUpperCase() + factor.slice(1)}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Main content based on view mode */}\n      <div className=\"bg-white rounded-lg p-4\">\n        {viewMode === 'overview' && (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-gray-800\">Mood Trends</h3>\n            {renderChart()}\n            \n            {/* Quick stats */}\n            <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-3 mt-4\">\n              <div className=\"p-3 bg-purple-50 rounded-lg\">\n                <p className=\"text-xs text-purple-600 mb-1\">Avg Mood</p>\n                <p className=\"text-xl font-bold text-purple-700\">\n                  {(filteredEntries.reduce((sum, e) => sum + e.moodScore, 0) / filteredEntries.length || 0).toFixed(1)}\n                </p>\n              </div>\n              <div className=\"p-3 bg-blue-50 rounded-lg\">\n                <p className=\"text-xs text-blue-600 mb-1\">Entries</p>\n                <p className=\"text-xl font-bold text-blue-700\">{filteredEntries.length}</p>\n              </div>\n              <div className=\"p-3 bg-green-50 rounded-lg\">\n                <p className=\"text-xs text-green-600 mb-1\">Best Day</p>\n                <p className=\"text-xl font-bold text-green-700\">\n                  {chartData.length > 0 ? Math.max(...chartData.map(d => d.avgMood)).toFixed(1) : 'N/A'}\n                </p>\n              </div>\n              <div className=\"p-3 bg-red-50 rounded-lg\">\n                <p className=\"text-xs text-red-600 mb-1\">Worst Day</p>\n                <p className=\"text-xl font-bold text-red-700\">\n                  {chartData.length > 0 ? Math.min(...chartData.map(d => d.avgMood)).toFixed(1) : 'N/A'}\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {viewMode === 'patterns' && (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-gray-800\">Mood Patterns</h3>\n            \n            {moodPatterns.length > 0 ? (\n              <div className=\"space-y-3\">\n                {moodPatterns.map((pattern, idx) => (\n                  <motion.div\n                    key={idx}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: idx * 0.1 }}\n                    className={`p-4 rounded-lg border ${\n                      pattern.impact === 'positive' \n                        ? 'bg-green-50 border-green-200' \n                        : pattern.impact === 'negative'\n                        ? 'bg-red-50 border-red-200'\n                        : 'bg-gray-50 border-gray-200'\n                    }`}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-gray-800 flex items-center\">\n                          {pattern.impact === 'positive' ? (\n                            <TrendingUp className=\"h-4 w-4 text-green-500 mr-2\" />\n                          ) : pattern.impact === 'negative' ? (\n                            <TrendingDown className=\"h-4 w-4 text-red-500 mr-2\" />\n                          ) : (\n                            <Activity className=\"h-4 w-4 text-gray-500 mr-2\" />\n                          )}\n                          {pattern.pattern}\n                        </h4>\n                        <p className=\"text-sm text-gray-600 mt-1\">{pattern.recommendation}</p>\n                        <div className=\"flex items-center space-x-4 mt-2\">\n                          <span className=\"text-xs text-gray-500\">\n                            Frequency: {pattern.frequency} occurrences\n                          </span>\n                          <span className=\"text-xs text-gray-500\">\n                            Confidence: {(pattern.confidence * 100).toFixed(0)}%\n                          </span>\n                        </div>\n                      </div>\n                      <Brain className=\"h-5 w-5 text-gray-400\" />\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-gray-500\">\n                <Brain className=\"h-12 w-12 mx-auto mb-3 text-gray-300\" />\n                <p>Not enough data to detect patterns yet.</p>\n                <p className=\"text-sm mt-1\">Keep tracking your mood to see patterns emerge!</p>\n              </div>\n            )}\n          </div>\n        )}\n\n        {viewMode === 'correlations' && (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-gray-800\">Mood Correlations</h3>\n            \n            {correlations.length > 0 ? (\n              <div className=\"space-y-3\">\n                {correlations.map((correlation, idx) => (\n                  <motion.div\n                    key={idx}\n                    initial={{ opacity: 0, scale: 0.95 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    transition={{ delay: idx * 0.1 }}\n                    className=\"p-4 bg-white border border-gray-200 rounded-lg\"\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center space-x-3\">\n                        {correlation.factor === 'Sleep' && <Moon className=\"h-5 w-5 text-indigo-500\" />}\n                        {correlation.factor === 'Exercise' && <Activity className=\"h-5 w-5 text-green-500\" />}\n                        {correlation.factor === 'Social Interaction' && <Users className=\"h-5 w-5 text-blue-500\" />}\n                        {correlation.factor === 'Weather' && <Cloud className=\"h-5 w-5 text-yellow-500\" />}\n                        <span className=\"font-medium text-gray-800\">{correlation.factor}</span>\n                      </div>\n                      <span className={`text-lg font-bold ${\n                        correlation.positive ? 'text-green-600' : 'text-red-600'\n                      }`}>\n                        {correlation.positive ? '+' : ''}{correlation.impact}%\n                      </span>\n                    </div>\n                    <div className=\"flex items-center justify-between text-sm text-gray-600\">\n                      <span>With: {correlation.avgWith}</span>\n                      <span>Without: {correlation.avgWithout}</span>\n                      <span className=\"text-xs text-gray-400\">n={correlation.samples}</span>\n                    </div>\n                    <div className=\"mt-2 h-2 bg-gray-200 rounded-full overflow-hidden\">\n                      <motion.div\n                        className={`h-full ${\n                          correlation.positive ? 'bg-green-500' : 'bg-red-500'\n                        }`}\n                        initial={{ width: 0 }}\n                        animate={{ width: `${Math.abs(correlation.impact)}%` }}\n                        transition={{ duration: 0.5, delay: idx * 0.1 + 0.2 }}\n                      />\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-gray-500\">\n                <Heart className=\"h-12 w-12 mx-auto mb-3 text-gray-300\" />\n                <p>Not enough data to show correlations yet.</p>\n              </div>\n            )}\n\n            {/* Trigger Analysis */}\n            {triggerAnalysis.length > 0 && (\n              <div className=\"mt-6\">\n                <h4 className=\"text-md font-semibold text-gray-800 mb-3\">Common Triggers</h4>\n                <div className=\"space-y-2\">\n                  {triggerAnalysis.map((trigger, idx) => (\n                    <div\n                      key={idx}\n                      className=\"flex items-center justify-between p-3 bg-orange-50 rounded-lg cursor-pointer hover:bg-orange-100 transition-colors\"\n                      onClick={() => onTriggerIdentified?.(trigger.trigger)}\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <AlertCircle className=\"h-4 w-4 text-orange-500\" />\n                        <span className=\"text-sm font-medium text-gray-800\">{trigger.trigger}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        <span className=\"text-xs text-gray-500\">\n                          {trigger.count} times ({trigger.percentage.toFixed(0)}%)\n                        </span>\n                        <span className=\"text-sm font-medium text-orange-600\">\n                          Avg: {trigger.avgMood.toFixed(1)}\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {viewMode === 'predictions' && (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-gray-800\">Mood Predictions</h3>\n            \n            {predictions.length > 0 ? (\n              <>\n                <div className=\"p-4 bg-blue-50 rounded-lg\">\n                  <div className=\"flex items-start space-x-3\">\n                    <Brain className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium text-blue-900\">AI-Powered Predictions</p>\n                      <p className=\"text-xs text-blue-700 mt-1\">\n                        Based on your historical patterns, day-of-week trends, and recent momentum.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <RechartsLineChart data={[...chartData, ...predictions]}>\n                    <CartesianGrid strokeDasharray=\"3 3\" opacity={0.3} />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis domain={[0, 10]} />\n                    <Tooltip />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"avgMood\" \n                      stroke=\"#8b5cf6\" \n                      strokeWidth={2} \n                      dot={{ r: 4 }} \n                      name=\"Actual Mood\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"predictedMood\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2} \n                      strokeDasharray=\"5 5\"\n                      dot={{ r: 3 }} \n                      name=\"Predicted Mood\"\n                    />\n                    <ReferenceLine \n                      x={chartData[chartData.length - 1]?.date} \n                      stroke=\"#9ca3af\" \n                      strokeDasharray=\"3 3\"\n                      label=\"Today\"\n                    />\n                  </RechartsLineChart>\n                </ResponsiveContainer>\n\n                <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-3\">\n                  {predictions.slice(0, 6).map((pred, idx) => (\n                    <div key={idx} className=\"p-3 bg-gradient-to-br from-blue-50 to-purple-50 rounded-lg\">\n                      <p className=\"text-xs text-gray-600\">{pred.date}</p>\n                      <p className=\"text-xl font-bold text-purple-700\">{pred.predictedMood}</p>\n                      <div className=\"flex items-center mt-1\">\n                        <div className=\"flex-1 h-1 bg-gray-200 rounded-full overflow-hidden\">\n                          <div \n                            className=\"h-full bg-gradient-to-r from-purple-400 to-purple-600\"\n                            style={{ width: `${pred.confidence * 100}%` }}\n                          />\n                        </div>\n                        <span className=\"text-xs text-gray-500 ml-2\">\n                          {(pred.confidence * 100).toFixed(0)}%\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                <div className=\"p-4 bg-amber-50 rounded-lg\">\n                  <div className=\"flex items-start space-x-3\">\n                    <Target className=\"h-5 w-5 text-amber-600 mt-0.5\" />\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium text-amber-900\">Recommended Actions</p>\n                      <ul className=\"text-xs text-amber-700 mt-2 space-y-1\">\n                        {predictions[0] && parseFloat(predictions[0].predictedMood) < 5 && (\n                          <li>• Schedule self-care activities for tomorrow</li>\n                        )}\n                        {predictions[0] && parseFloat(predictions[0].predictedMood) > 7 && (\n                          <li>• Great outlook! Plan something special</li>\n                        )}\n                        <li>• Continue tracking to improve prediction accuracy</li>\n                        <li>• Consider factors that might influence these predictions</li>\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n              </>\n            ) : (\n              <div className=\"text-center py-8 text-gray-500\">\n                <Target className=\"h-12 w-12 mx-auto mb-3 text-gray-300\" />\n                <p>Need at least 7 days of data for predictions.</p>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\wellness\\WellnessMetricsDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showGoalModal' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":75,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'editingGoal' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":76,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":21},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has missing dependencies: 'calculateStreak' and 'calculateTrend'. Either include them or remove the dependency array.","line":200,"column":6,"nodeType":"ArrayExpression","endLine":200,"endColumn":36,"suggestions":[{"desc":"Update the dependencies array to be: [wellnessMetrics, moodEntries, calculateTrend, calculateStreak]","fix":{"range":[5630,5660],"text":"[wellnessMetrics, moodEntries, calculateTrend, calculateStreak]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":398,"column":58,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[12624,12646],"text":"Today&apos;s Wellness Score"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[12624,12646],"text":"Today&lsquo;s Wellness Score"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[12624,12646],"text":"Today&#39;s Wellness Score"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[12624,12646],"text":"Today&rsquo;s Wellness Score"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useMemo } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Target,\n  TrendingUp,\n  _Award,\n  Activity,\n  Droplets,\n  Moon,\n  Users,\n  Heart,\n  Brain,\n  Zap,\n  _Calendar,\n  ChevronRight,\n  Plus,\n  Edit2,\n  CheckCircle,\n  XCircle,\n  AlertTriangle,\n  Info,\n  Sparkles,\n  Flame\n} from 'lucide-react';\nimport {\n  _CircularProgressbar,\n  CircularProgressbarWithChildren,\n  buildStyles\n} from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport { useWellnessStore } from '../../../../stores/wellnessStore';\nimport { format, startOfWeek, endOfWeek, eachDayOfInterval, isToday } from 'date-fns';\n\ninterface WellnessMetricsDashboardProps {\n  onSetGoal?: (category: string) => void;\n  onViewDetails?: (metric: string) => void;\n}\n\ninterface MetricCard {\n  id: string;\n  category: 'physical' | 'mental' | 'emotional' | 'social' | 'spiritual';\n  title: string;\n  icon: React.ElementType;\n  value: number;\n  target: number;\n  unit: string;\n  color: string;\n  gradient: string;\n  trend: number; // percentage change\n  streak?: number;\n  lastUpdated?: Date;\n}\n\ntype Priority = 'critical' | 'high' | 'medium' | 'low';\n\ninterface Recommendation {\n  metric: string;\n  message: string;\n  priority: Priority;\n  action: () => void;\n}\n\nexport function WellnessMetricsDashboard({ onSetGoal, onViewDetails }: WellnessMetricsDashboardProps) {\n  const { \n    wellnessMetrics, \n    wellnessGoals, \n    moodEntries,\n    weeklyScore,\n    monthlyScore,\n    _calculateWellnessScores \n  } = useWellnessStore();\n  \n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [showGoalModal, setShowGoalModal] = useState(false);\n  const [editingGoal, setEditingGoal] = useState<string | null>(null);\n\n  // Calculate today's metrics\n  const todayMetrics = useMemo(() => {\n    const _today = new Date();\n    _today.setHours(0, 0, 0, 0);\n    \n    const todayData = wellnessMetrics.find(m => {\n      const metricDate = new Date(m.date);\n      metricDate.setHours(0, 0, 0, 0);\n      return metricDate.getTime() === _today.getTime();\n    });\n\n    const todayMoodEntries = moodEntries.filter(e => {\n      const entryDate = new Date(e.timestamp);\n      entryDate.setHours(0, 0, 0, 0);\n      return entryDate.getTime() === _today.getTime();\n    });\n\n    // Calculate metrics with fallbacks\n    const metrics: MetricCard[] = [\n      {\n        id: 'sleep',\n        category: 'physical',\n        title: 'Sleep',\n        icon: Moon,\n        value: todayData?.sleepHours || todayMoodEntries[0]?.sleep || 0,\n        target: 8,\n        unit: 'hours',\n        color: '#6366f1',\n        gradient: 'from-indigo-400 to-indigo-600',\n        trend: calculateTrend('sleep', todayData?.sleepHours || 0),\n        streak: calculateStreak('sleep')\n      },\n      {\n        id: 'exercise',\n        category: 'physical',\n        title: 'Exercise',\n        icon: Activity,\n        value: todayData?.exerciseMinutes || 0,\n        target: 30,\n        unit: 'minutes',\n        color: '#10b981',\n        gradient: 'from-green-400 to-green-600',\n        trend: calculateTrend('exercise', todayData?.exerciseMinutes || 0),\n        streak: calculateStreak('exercise')\n      },\n      {\n        id: 'water',\n        category: 'physical',\n        title: 'Hydration',\n        icon: Droplets,\n        value: todayData?.waterIntake || 0,\n        target: 8,\n        unit: 'glasses',\n        color: '#3b82f6',\n        gradient: 'from-blue-400 to-blue-600',\n        trend: calculateTrend('water', todayData?.waterIntake || 0)\n      },\n      {\n        id: 'meditation',\n        category: 'mental',\n        title: 'Meditation',\n        icon: Brain,\n        value: todayData?.meditationMinutes || 0,\n        target: 15,\n        unit: 'minutes',\n        color: '#8b5cf6',\n        gradient: 'from-purple-400 to-purple-600',\n        trend: calculateTrend('meditation', todayData?.meditationMinutes || 0),\n        streak: calculateStreak('meditation')\n      },\n      {\n        id: 'social',\n        category: 'social',\n        title: 'Social Time',\n        icon: Users,\n        value: todayData?.socialInteractions || todayMoodEntries[0]?.socialInteraction || 0,\n        target: 3,\n        unit: 'interactions',\n        color: '#ec4899',\n        gradient: 'from-pink-400 to-pink-600',\n        trend: calculateTrend('social', todayData?.socialInteractions || 0)\n      },\n      {\n        id: 'outdoor',\n        category: 'physical',\n        title: 'Outdoor Time',\n        icon: Heart,\n        value: todayData?.outdoorTime || 0,\n        target: 60,\n        unit: 'minutes',\n        color: '#f59e0b',\n        gradient: 'from-amber-400 to-amber-600',\n        trend: calculateTrend('outdoor', todayData?.outdoorTime || 0)\n      },\n      {\n        id: 'journal',\n        category: 'emotional',\n        title: 'Journal Entries',\n        icon: Edit2,\n        value: todayData?.journalEntries || 0,\n        target: 1,\n        unit: 'entries',\n        color: '#14b8a6',\n        gradient: 'from-teal-400 to-teal-600',\n        trend: calculateTrend('journal', todayData?.journalEntries || 0),\n        streak: calculateStreak('journaling')\n      },\n      {\n        id: 'nutrition',\n        category: 'physical',\n        title: 'Nutrition Score',\n        icon: Zap,\n        value: todayData?.nutritionScore || 0,\n        target: 10,\n        unit: 'score',\n        color: '#84cc16',\n        gradient: 'from-lime-400 to-lime-600',\n        trend: calculateTrend('nutrition', todayData?.nutritionScore || 0)\n      }\n    ];\n\n    return metrics;\n  }, [wellnessMetrics, moodEntries]);\n\n  // Calculate trend for a metric\n  function calculateTrend(metricId: string, currentValue: number): number {\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 1);\n    yesterday.setHours(0, 0, 0, 0);\n    \n    const yesterdayData = wellnessMetrics.find(m => {\n      const metricDate = new Date(m.date);\n      metricDate.setHours(0, 0, 0, 0);\n      return metricDate.getTime() === yesterday.getTime();\n    });\n\n    if (!yesterdayData) return 0;\n\n    const yesterdayValue = (yesterdayData as unknown)[metricId] || 0;\n    if (yesterdayValue === 0) return currentValue > 0 ? 100 : 0;\n    \n    return ((currentValue - yesterdayValue) / yesterdayValue) * 100;\n  }\n\n  // Calculate streak for a metric\n  function calculateStreak(_type: string): number {\n    let streak = 0;\n    const _today = new Date();\n    \n    for (let i = 0; i < 365; i++) {\n      const date = new Date(_today);\n      date.setDate(date.getDate() - i);\n      date.setHours(0, 0, 0, 0);\n      \n      const _hasEntry = wellnessMetrics.some(m => {\n        const metricDate = new Date(m.date);\n        metricDate.setHours(0, 0, 0, 0);\n        \n        if (metricDate.getTime() !== date.getTime()) return false;\n        \n        switch (_type) {\n          case 'sleep': return m.sleepHours >= 7;\n          case 'exercise': return m.exerciseMinutes >= 30;\n          case 'meditation': return m.meditationMinutes > 0;\n          case 'journaling': return m.journalEntries > 0;\n          default: return false;\n        }\n      });\n      \n      if (_hasEntry) {\n        streak++;\n      } else if (i > 0) {\n        break;\n      }\n    }\n    \n    return streak;\n  }\n\n  // Calculate wellness score\n  const wellnessScore = useMemo(() => {\n    const scores = todayMetrics.map(_metric => {\n      const percentage = Math.min((metric.value / metric.target) * 100, 100);\n      return percentage;\n    });\n    \n    return Math.round(scores.reduce((sum, score) => sum + score, 0) / scores.length);\n  }, [todayMetrics]);\n\n  // Get active goals by category\n  const activeGoalsByCategory = useMemo(() => {\n    const goalMap = new Map<string, typeof wellnessGoals[0][]>();\n    \n    wellnessGoals\n      .filter(g => g.status === 'active')\n      .forEach(goal => {\n        const goals = goalMap.get(goal.category) || [];\n        goals.push(goal);\n        goalMap.set(goal.category, goals);\n      });\n    \n    return goalMap;\n  }, [wellnessGoals]);\n\n  // Get recommendations based on current metrics\n  const recommendations = useMemo((): Recommendation[] => {\n    const recs: Recommendation[] = [];\n    \n    todayMetrics.forEach(metric => {\n      const percentage = (metric.value / metric.target) * 100;\n      \n      if (percentage < 50) {\n        recs.push({ metric: metric.title,\n          message: `Your ${metric.title.toLowerCase()} is below 50% of target. Consider focusing on this today.`,\n          priority: 'high' as Priority,\n          action: () => onSetGoal?.(metric.id)\n        });\n      } else if (percentage >= 100 && metric.streak && metric.streak >= 7) {\n        recs.push({ metric: metric.title,\n          message: `Great job! You&apos;re on a ${metric.streak}-day ${metric.title.toLowerCase()} streak!`,\n          priority: 'low' as Priority,\n          action: () => onViewDetails?.(metric.id)\n        });\n      }\n    });\n    \n    // Add score-based recommendation\n    if (wellnessScore < 40) {\n      recs.unshift({ metric: 'Overall',\n        message: 'Your wellness score is low. Consider taking a break and focusing on self-care.',\n        priority: 'critical' as Priority,\n        action: () => {}\n      });\n    } else if (wellnessScore > 80) {\n      recs.unshift({ metric: 'Overall',\n        message: 'Excellent wellness score! Keep up the great work!',\n        priority: 'low' as Priority,\n        action: () => {}\n      });\n    }\n    \n    return recs.slice(0, 3);\n  }, [todayMetrics, wellnessScore, onSetGoal, onViewDetails]);\n\n  // Render metric card\n  const renderMetricCard = (metric: MetricCard) => {\n    const percentage = Math.min((metric.value / metric.target) * 100, 100);\n    const Icon = metric.icon;\n    \n    return (\n      <motion.div\n        key={metric.id}\n        layout\n        initial={{ opacity: 0, scale: 0.9 }}\n        animate={{ opacity: 1, scale: 1 }}\n        whileHover={{ scale: 1.02 }}\n        className={`relative bg-white rounded-xl p-4 shadow-sm border border-gray-100 hover:shadow-md transition-all cursor-pointer ${\n          selectedCategory && metric.category !== selectedCategory ? 'opacity-50' : ''\n        }`}\n        onClick={() => onViewDetails?.(metric.id)}\n      >\n        {/* Streak badge */}\n        {metric.streak && metric.streak >= 3 && (\n          <div className=\"absolute -top-2 -right-2 bg-orange-500 text-white text-xs px-2 py-1 rounded-full flex items-center\">\n            <Flame className=\"h-3 w-3 mr-1\" />\n            {metric.streak}\n          </div>\n        )}\n        \n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-3\">\n            <div className={`p-2 rounded-lg bg-gradient-to-br ${metric.gradient} bg-opacity-10`}>\n              <Icon className=\"h-5 w-5\" style={{ color: metric.color }} />\n            </div>\n            <div>\n              <h4 className=\"font-medium text-gray-800\">{metric.title}</h4>\n              <p className=\"text-xs text-gray-500\">\n                {metric.value} / {metric.target} {metric.unit}\n              </p>\n            </div>\n          </div>\n          \n          {/* Trend indicator */}\n          {metric.trend !== 0 && (\n            <div className={`flex items-center text-xs ${\n              metric.trend > 0 ? 'text-green-600' : 'text-red-600'\n            }`}>\n              <TrendingUp className={`h-3 w-3 mr-1 ${metric.trend < 0 ? 'rotate-180' : ''}`} />\n              {Math.abs(metric.trend).toFixed(0)}%\n            </div>\n          )}\n        </div>\n        \n        {/* Progress bar */}\n        <div className=\"relative h-2 bg-gray-200 rounded-full overflow-hidden\">\n          <motion.div\n            className={`absolute top-0 left-0 h-full bg-gradient-to-r ${metric.gradient}`}\n            initial={{ width: 0 }}\n            animate={{ width: `${percentage}%` }}\n            transition={{ duration: 0.5, ease: 'easeOut' }}\n          />\n        </div>\n        \n        {/* Percentage */}\n        <div className=\"mt-2 flex items-center justify-between\">\n          <span className=\"text-xs text-gray-500\">{percentage.toFixed(0)}% complete</span>\n          {percentage >= 100 && (\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          )}\n        </div>\n      </motion.div>\n    );\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Header with wellness score */}\n      <div className=\"bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl p-6 text-white\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"text-2xl font-bold mb-1\">Today's Wellness Score</h3>\n            <p className=\"text-purple-100\">Track your daily wellness metrics</p>\n          </div>\n          \n          <div className=\"relative\">\n            <div className=\"w-24 h-24\">\n              <CircularProgressbarWithChildren\n                value={wellnessScore}\n                styles={buildStyles({\n                  pathColor: '#ffffff',\n                  trailColor: 'rgba(255, 255, 255, 0.3)',\n                  strokeLinecap: 'round'\n                })}\n              >\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold\">{wellnessScore}%</div>\n                  <div className=\"text-xs opacity-90\">Overall</div>\n                </div>\n              </CircularProgressbarWithChildren>\n            </div>\n          </div>\n        </div>\n        \n        {/* Quick stats */}\n        <div className=\"grid grid-cols-3 gap-4 mt-6\">\n          <div className=\"text-center\">\n            <p className=\"text-3xl font-bold\">{weeklyScore || 0}</p>\n            <p className=\"text-xs text-purple-100\">Weekly Avg</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-3xl font-bold\">{monthlyScore || 0}</p>\n            <p className=\"text-xs text-purple-100\">Monthly Avg</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-3xl font-bold\">\n              {todayMetrics.filter(m => (m.value / m.target) >= 1).length}\n            </p>\n            <p className=\"text-xs text-purple-100\">Goals Met</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Category filter */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2 overflow-x-auto pb-2\">\n          <button\n            onClick={() => setSelectedCategory(null)}\n            className={`px-3 py-1 rounded-full text-sm font-medium whitespace-nowrap transition-colors ${\n              !selectedCategory \n                ? 'bg-purple-100 text-purple-700' \n                : 'text-gray-600 hover:bg-gray-100'\n            }`}\n          >\n            All\n          </button>\n          {['physical', 'mental', 'emotional', 'social', 'spiritual'].map(category => (\n            <button\n              key={category}\n              onClick={() => setSelectedCategory(_category)}\n              className={`px-3 py-1 rounded-full text-sm font-medium whitespace-nowrap transition-colors ${\n                selectedCategory === category \n                  ? 'bg-purple-100 text-purple-700' \n                  : 'text-gray-600 hover:bg-gray-100'\n              }`}\n            >\n              {category.charAt(0).toUpperCase() + category.slice(1)}\n            </button>\n          ))}\n        </div>\n        \n        <button\n          onClick={() => setViewMode(viewMode === 'grid' ? 'list' : 'grid')}\n          className=\"p-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors\"\n          aria-label={`Switch to ${viewMode === 'grid' ? 'list' : 'grid'} view`}\n        >\n          {viewMode === 'grid' ? (\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n            </svg>\n          ) : (\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z\" />\n            </svg>\n          )}\n        </button>\n      </div>\n\n      {/* Metrics grid/list */}\n      <div className={\n        viewMode === 'grid' \n          ? 'grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4'\n          : 'space-y-3'\n      }>\n        <AnimatePresence mode=\"popLayout\">\n          {todayMetrics\n            .filter(m => !selectedCategory || m.category === selectedCategory)\n            .map(metric => renderMetricCard(metric))}\n        </AnimatePresence>\n      </div>\n\n      {/* Active goals section */}\n      {activeGoalsByCategory.size > 0 && (\n        <div className=\"bg-gradient-to-br from-blue-50 to-purple-50 rounded-xl p-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h4 className=\"font-semibold text-gray-800 flex items-center\">\n              <Target className=\"h-5 w-5 mr-2 text-purple-600\" />\n              Active Goals\n            </h4>\n            <button\n              onClick={() => setShowGoalModal(true)}\n              className=\"text-sm text-purple-600 hover:text-purple-700 flex items-center\"\n            >\n              <Plus className=\"h-4 w-4 mr-1\" />\n              Add Goal\n            </button>\n          </div>\n          \n          <div className=\"space-y-2\">\n            {Array.from(activeGoalsByCategory.entries()).map(([category, goals]) => (\n              <div key={category} className=\"space-y-1\">\n                <p className=\"text-xs font-medium text-gray-600 uppercase tracking-wider\">\n                  {category}\n                </p>\n                {goals.map(goal => (\n                  <div\n                    key={goal.id}\n                    className=\"flex items-center justify-between p-2 bg-white rounded-lg\"\n                  >\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium text-gray-800\">{goal.title}</p>\n                      <div className=\"flex items-center space-x-2 mt-1\">\n                        <div className=\"flex-1 h-1 bg-gray-200 rounded-full overflow-hidden\">\n                          <div\n                            className=\"h-full bg-gradient-to-r from-purple-400 to-purple-600\"\n                            style={{ width: `${goal.progress}%` }}\n                          />\n                        </div>\n                        <span className=\"text-xs text-gray-500\">{goal.progress}%</span>\n                      </div>\n                    </div>\n                    <button\n                      onClick={() => setEditingGoal(goal.id)}\n                      className=\"p-1 text-gray-400 hover:text-gray-600\"\n                    >\n                      <Edit2 className=\"h-3 w-3\" />\n                    </button>\n                  </div>\n                ))}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Recommendations */}\n      {recommendations.length > 0 && (\n        <div className=\"space-y-2\">\n          <h4 className=\"font-semibold text-gray-800 flex items-center\">\n            <Sparkles className=\"h-5 w-5 mr-2 text-yellow-500\" />\n            Personalized Recommendations\n          </h4>\n          {recommendations.map((rec, idx) => (\n            <motion.div\n              key={idx}\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: idx * 0.1 }}\n              className={`p-3 rounded-lg flex items-start space-x-3 cursor-pointer hover:shadow-sm transition-all ${\n                rec.priority === 'critical' \n                  ? 'bg-red-50 border border-red-200'\n                  : rec.priority === 'high'\n                  ? 'bg-orange-50 border border-orange-200'\n                  : rec.priority === 'low'\n                  ? 'bg-green-50 border border-green-200'\n                  : 'bg-gray-50 border border-gray-200'\n              }`}\n              onClick={rec.action}\n            >\n              {rec.priority === 'critical' ? (\n                <XCircle className=\"h-5 w-5 text-red-500 flex-shrink-0 mt-0.5\" />\n              ) : rec.priority === 'high' ? (\n                <AlertTriangle className=\"h-5 w-5 text-orange-500 flex-shrink-0 mt-0.5\" />\n              ) : rec.priority === 'low' ? (\n                <CheckCircle className=\"h-5 w-5 text-green-500 flex-shrink-0 mt-0.5\" />\n              ) : (\n                <Info className=\"h-5 w-5 text-gray-500 flex-shrink-0 mt-0.5\" />\n              )}\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium text-gray-800\">{rec.metric}</p>\n                <p className=\"text-xs text-gray-600 mt-0.5\">{rec.message}</p>\n              </div>\n              <ChevronRight className=\"h-4 w-4 text-gray-400\" />\n            </motion.div>\n          ))}\n        </div>\n      )}\n\n      {/* Weekly overview calendar */}\n      <div className=\"bg-white rounded-xl p-4 border border-gray-200\">\n        <h4 className=\"font-semibold text-gray-800 mb-3\">Week at a Glance</h4>\n        <div className=\"grid grid-cols-7 gap-2\">\n          {eachDayOfInterval({\n            start: startOfWeek(new Date()),\n            end: endOfWeek(new Date())\n          }).map(day => {\n            const dayMetrics = wellnessMetrics.find(m => {\n              const metricDate = new Date(m.date);\n              metricDate.setHours(0, 0, 0, 0);\n              day.setHours(0, 0, 0, 0);\n              return metricDate.getTime() === day.getTime();\n            });\n            \n            const dayScore = dayMetrics\n              ? Math.round(\n                  ((dayMetrics.sleepHours / 8) * 100 +\n                   (dayMetrics.exerciseMinutes / 30) * 100 +\n                   (dayMetrics.meditationMinutes / 15) * 100) / 3\n                )\n              : 0;\n            \n            const isCurrentDay = isToday(day);\n            \n            return (\n              <div\n                key={day.toISOString()}\n                className={`text-center p-2 rounded-lg ${\n                  isCurrentDay \n                    ? 'bg-purple-100 border-2 border-purple-500' \n                    : 'bg-gray-50'\n                }`}\n              >\n                <p className=\"text-xs font-medium text-gray-600\">\n                  {format(day, 'EEE')}\n                </p>\n                <p className=\"text-lg font-bold text-gray-800\">\n                  {format(day, 'd')}\n                </p>\n                {dayScore > 0 && (\n                  <div className={`mt-1 text-xs font-medium ${\n                    dayScore >= 80 ? 'text-green-600' :\n                    dayScore >= 60 ? 'text-blue-600' :\n                    dayScore >= 40 ? 'text-yellow-600' :\n                    'text-red-600'\n                  }`}>\n                    {dayScore}%\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\dashboard\\widgets\\wellness\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\heartbeat\\HeartbeatCheckin.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\navigation\\Breadcrumbs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\navigation\\FloatingCrisisButton.tsx","messages":[{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":72,"column":3,"nodeType":"Identifier","endLine":72,"endColumn":12},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":100,"column":3,"nodeType":"Identifier","endLine":100,"endColumn":12},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":130,"column":3,"nodeType":"Identifier","endLine":130,"endColumn":12},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleDragMove'. Either include it or remove the dependency array.","line":144,"column":6,"nodeType":"ArrayExpression","endLine":144,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [handleDragMove, isDragging]","fix":{"range":[4381,4393],"text":"[handleDragMove, isDragging]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { AlertTriangle, Phone, MessageCircle, Heart, _X, ChevronUp, HelpCircle } from 'lucide-react';\nimport { useNavigation } from './NavigationContext';\nimport { useLocation } from 'react-router-dom';\n\ninterface CrisisOption {\n  id: string;\n  label: string;\n  sublabel?: string;\n  icon: React.ReactNode;\n  action: () => void;\n  color: string;\n  urgent?: boolean;\n}\n\nexport function FloatingCrisisButton() {\n  const location = useLocation();\n  const { crisisDetected, setCrisisDetected, mode } = useNavigation();\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [pulseAnimation, setPulseAnimation] = useState(true);\n  const [position, setPosition] = useState({ x: 20, y: 20 });\n  const [isDragging, setIsDragging] = useState(false);\n\n  // Hide on crisis page itself\n  if (location.pathname === '/crisis') {\n    return null;\n  }\n\n  // Crisis quick actions\n  const crisisOptions: CrisisOption[] = [\n    {\n      id: 'hotline',\n      label: 'Call 988',\n      sublabel: 'Crisis Hotline',\n      icon: <Phone className=\"h-5 w-5\" />,\n      action: () => window.location.href = 'tel:988',\n      color: 'bg-red-500 hover:bg-red-600',\n      urgent: true,\n    },\n    {\n      id: 'text',\n      label: 'Text HOME',\n      sublabel: 'to 741741',\n      icon: <MessageCircle className=\"h-5 w-5\" />,\n      action: () => window.location.href = 'sms:741741?body=HOME',\n      color: 'bg-orange-500 hover:bg-orange-600',\n      urgent: true,\n    },\n    {\n      id: 'breathing',\n      label: 'Breathing',\n      sublabel: 'Calm down',\n      icon: <Heart className=\"h-5 w-5\" />,\n      action: () => window.location.href = '/wellness/breathing',\n      color: 'bg-blue-500 hover:bg-blue-600',\n    },\n    {\n      id: 'resources',\n      label: 'Resources',\n      sublabel: 'Get help',\n      icon: <HelpCircle className=\"h-5 w-5\" />,\n      action: () => {\n        setCrisisDetected(true);\n        window.location.href = '/crisis';\n      },\n      color: 'bg-purple-500 hover:bg-purple-600',\n    },\n  ];\n\n  // Detect user distress patterns (simplified version)\n  useEffect(() => {\n    let rapidClickCount = 0;\n    let clickTimer: NodeJS.Timeout;\n\n    const detectDistress = () => {\n      rapidClickCount++;\n      clearTimeout(clickTimer);\n      \n      // If user clicks rapidly (5+ times in 2 seconds), show expanded view\n      if (rapidClickCount >= 5) {\n        setIsExpanded(true);\n        setPulseAnimation(true);\n        rapidClickCount = 0;\n      }\n      \n      clickTimer = setTimeout(() => {\n        rapidClickCount = 0;\n      }, 2000);\n    };\n\n    window.addEventListener('click', detectDistress);\n    return () => {\n      window.removeEventListener('click', detectDistress);\n      clearTimeout(clickTimer);\n    };\n  }, []);\n\n  // Auto-expand in crisis mode\n  useEffect(() => {\n    if (mode === 'crisis' || crisisDetected) {\n      setIsExpanded(true);\n    }\n  }, [mode, crisisDetected]);\n\n  // Handle drag functionality for repositioning\n  const handleDragStart = (e: React.MouseEvent | React.TouchEvent) => {\n    if (!isExpanded) {\n      setIsDragging(true);\n      e.preventDefault();\n    }\n  };\n\n  const handleDragMove = (e: MouseEvent | TouchEvent) => {\n    if (isDragging && !isExpanded) {\n      const clientX = 'touches' in e ? (e.touches[0]?.clientX || 0) : e.clientX;\n      const clientY = 'touches' in e ? (e.touches[0]?.clientY || 0) : e.clientY;\n      \n      const newX = Math.max(20, Math.min(window.innerWidth - 80, clientX - 30));\n      const newY = Math.max(20, Math.min(window.innerHeight - 80, clientY - 30));\n      \n      setPosition({ x: window.innerWidth - newX - 60, y: window.innerHeight - newY - 60 });\n    }\n  };\n\n  const handleDragEnd = () => {\n    setIsDragging(false);\n  };\n\n  useEffect(() => {\n    if (_isDragging) {\n      window.addEventListener('mousemove', handleDragMove);\n      window.addEventListener('mouseup', handleDragEnd);\n      window.addEventListener('touchmove', handleDragMove);\n      window.addEventListener('touchend', handleDragEnd);\n      \n      return () => {\n        window.removeEventListener('mousemove', handleDragMove);\n        window.removeEventListener('mouseup', handleDragEnd);\n        window.removeEventListener('touchmove', handleDragMove);\n        window.removeEventListener('touchend', handleDragEnd);\n      };\n    }\n  }, [isDragging]);\n\n  return (\n    <div\n      className=\"fixed z-50\"\n      style={{ \n        right: `${position.x}px`, \n        bottom: `${position.y}px`,\n        touchAction: 'none'\n      }}\n    >\n      <AnimatePresence>\n        {isExpanded ? (\n          <motion.div\n            initial={{ scale: 0.8, opacity: 0 }}\n            animate={{ scale: 1, opacity: 1 }}\n            exit={{ scale: 0.8, opacity: 0 }}\n            transition={{ type: 'spring', duration: 0.3 }}\n            className=\"bg-white rounded-2xl shadow-2xl border border-gray-200 overflow-hidden\"\n          >\n            {/* Header */}\n            <div className=\"bg-red-500 text-white px-4 py-3 flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <AlertTriangle className=\"h-5 w-5 mr-2\" />\n                <span className=\"font-semibold\">Crisis Support</span>\n              </div>\n              <button\n                onClick={() => setIsExpanded(false)}\n                className=\"p-1 hover:bg-red-600 rounded-lg transition-colors\"\n                aria-label=\"Minimize crisis support panel\"\n              >\n                <ChevronUp className=\"h-4 w-4\" />\n              </button>\n            </div>\n            \n            {/* Crisis Options */}\n            <div className=\"p-2\">\n              <div className=\"grid grid-cols-2 gap-2\">\n                {crisisOptions.map((option) => (\n                  <motion.button\n                    key={option.id}\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                    onClick={option.action}\n                    className={`${option.color} text-white rounded-lg p-3 transition-colors`}\n                  >\n                    <div className=\"flex flex-col items-center\">\n                      {option.icon}\n                      <span className=\"font-semibold text-sm mt-1\">{option.label}</span>\n                      {option.sublabel && (\n                        <span className=\"text-xs opacity-90\">{option.sublabel}</span>\n                      )}\n                    </div>\n                  </motion.button>\n                ))}\n              </div>\n              \n              {/* Safety message */}\n              <div className=\"mt-3 p-2 bg-amber-50 rounded-lg\">\n                <p className=\"text-xs text-amber-800 text-center\">\n                  You&apos;re not alone. Help is available 24/7.\n                </p>\n              </div>\n            </div>\n          </motion.div>\n        ) : (\n          <motion.button\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            exit={{ scale: 0 }}\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={() => setIsExpanded(true)}\n            onMouseDown={handleDragStart}\n            onTouchStart={handleDragStart}\n            className={`\n              relative group bg-red-500 hover:bg-red-600 text-white rounded-full p-4 shadow-lg transition-all\n              ${isDragging ? 'cursor-grabbing' : 'cursor-grab'}\n              ${pulseAnimation && !isExpanded ? 'animate-pulse' : ''}\n            `}\n            aria-label=\"Open crisis support panel\"\n          >\n            {/* Pulsing ring for attention */}\n            {pulseAnimation && (\n              <span className=\"absolute inset-0 rounded-full bg-red-400 animate-ping opacity-75\"></span>\n            )}\n            \n            <AlertTriangle className=\"h-6 w-6 relative z-10\" />\n            \n            {/* Tooltip */}\n            <div className=\"absolute bottom-full right-0 mb-2 px-3 py-1 bg-gray-900 text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap\">\n              Crisis Help Available\n            </div>\n          </motion.button>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n\n// Simplified crisis button for mobile\nexport function MobileCrisisButton() {\n  const location = useLocation();\n  const [showQuickActions, setShowQuickActions] = useState(false);\n  \n  if (location.pathname === '/crisis') {\n    return null;\n  }\n\n  return (\n    <>\n      {/* Floating button */}\n      <motion.button\n        initial={{ scale: 0 }}\n        animate={{ scale: 1 }}\n        whileHover={{ scale: 1.05 }}\n        whileTap={{ scale: 0.95 }}\n        onClick={() => setShowQuickActions(true)}\n        className=\"fixed right-4 bottom-20 z-40 bg-red-500 text-white rounded-full p-3 shadow-lg md:hidden\"\n        aria-label=\"Crisis help\"\n      >\n        <AlertTriangle className=\"h-5 w-5\" />\n        <span className=\"absolute inset-0 rounded-full bg-red-400 animate-ping opacity-75\"></span>\n      </motion.button>\n\n      {/* Quick actions modal */}\n      <AnimatePresence>\n        {showQuickActions && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 z-50 flex items-end justify-center md:hidden\"\n            onClick={() => setShowQuickActions(false)}\n          >\n            <div className=\"absolute inset-0 bg-black/50\" />\n            \n            <motion.div\n              initial={{ y: '100%' }}\n              animate={{ y: 0 }}\n              exit={{ y: '100%' }}\n              transition={{ type: 'spring', damping: 25 }}\n              className=\"relative bg-white rounded-t-2xl w-full max-w-lg\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              {/* Handle bar */}\n              <div className=\"flex justify-center pt-3\">\n                <div className=\"w-12 h-1 bg-gray-300 rounded-full\"></div>\n              </div>\n              \n              {/* Header */}\n              <div className=\"px-6 py-4 border-b border-gray-200\">\n                <h2 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n                  <AlertTriangle className=\"h-5 w-5 text-red-500 mr-2\" />\n                  Crisis Support\n                </h2>\n              </div>\n              \n              {/* Actions */}\n              <div className=\"p-4 space-y-2\">\n                <a\n                  href=\"tel:988\"\n                  className=\"flex items-center justify-between p-4 bg-red-50 hover:bg-red-100 rounded-xl transition-colors\"\n                >\n                  <div className=\"flex items-center\">\n                    <Phone className=\"h-5 w-5 text-red-600 mr-3\" />\n                    <div>\n                      <div className=\"font-semibold text-gray-900\">Call 988</div>\n                      <div className=\"text-sm text-gray-600\">24/7 Crisis Hotline</div>\n                    </div>\n                  </div>\n                  <ChevronUp className=\"h-5 w-5 text-gray-400 rotate-90\" />\n                </a>\n                \n                <a\n                  href=\"sms:741741?body=HOME\"\n                  className=\"flex items-center justify-between p-4 bg-orange-50 hover:bg-orange-100 rounded-xl transition-colors\"\n                >\n                  <div className=\"flex items-center\">\n                    <MessageCircle className=\"h-5 w-5 text-orange-600 mr-3\" />\n                    <div>\n                      <div className=\"font-semibold text-gray-900\">Text HOME to 741741</div>\n                      <div className=\"text-sm text-gray-600\">Crisis Text Line</div>\n                    </div>\n                  </div>\n                  <ChevronUp className=\"h-5 w-5 text-gray-400 rotate-90\" />\n                </a>\n                \n                <button\n                  onClick={() => window.location.href = '/crisis'}\n                  className=\"w-full flex items-center justify-between p-4 bg-purple-50 hover:bg-purple-100 rounded-xl transition-colors\"\n                >\n                  <div className=\"flex items-center\">\n                    <HelpCircle className=\"h-5 w-5 text-purple-600 mr-3\" />\n                    <div className=\"text-left\">\n                      <div className=\"font-semibold text-gray-900\">More Resources</div>\n                      <div className=\"text-sm text-gray-600\">Coping tools & support</div>\n                    </div>\n                  </div>\n                  <ChevronUp className=\"h-5 w-5 text-gray-400 rotate-90\" />\n                </button>\n              </div>\n              \n              {/* Close button */}\n              <div className=\"px-4 pb-4\">\n                <button\n                  onClick={() => setShowQuickActions(false)}\n                  className=\"w-full py-3 bg-gray-100 hover:bg-gray-200 rounded-xl font-medium text-gray-700 transition-colors\"\n                >\n                  Close\n                </button>\n              </div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\navigation\\GlobalSearch.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleResultClick'. Either include it or remove the dependency array.","line":173,"column":6,"nodeType":"ArrayExpression","endLine":173,"endColumn":59,"suggestions":[{"desc":"Update the dependencies array to be: [handleResultClick, isSearchOpen, results, selectedIndex, setSearchOpen]","fix":{"range":[8841,8894],"text":"[handleResultClick, isSearchOpen, results, selectedIndex, setSearchOpen]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":289,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[13440,13483],"text":"\n                    No results found for &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[13440,13483],"text":"\n                    No results found for &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[13440,13483],"text":"\n                    No results found for &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[13440,13483],"text":"\n                    No results found for &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":289,"column":50,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[13490,13510],"text":"&quot;\n                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[13490,13510],"text":"&ldquo;\n                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[13490,13510],"text":"&#34;\n                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[13490,13510],"text":"&rdquo;\n                  "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Search, X, Clock, Star, TrendingUp, Command, ArrowRight, Heart, Users, Brain, Calendar, FileText, HelpCircle, AlertTriangle } from 'lucide-react';\nimport { useNavigation } from './NavigationContext';\nimport { _useKeyboardNavigation } from '../../hooks/useKeyboardNavigation';\n\ninterface SearchResult {\n  id: string;\n  title: string;\n  description?: string;\n  path: string;\n  category: 'page' | 'resource' | 'therapist' | 'community' | 'crisis' | 'action';\n  icon?: React.ReactNode;\n  priority?: number;\n  keywords: string[];\n}\n\n// Comprehensive search database with mental health resources\nconst searchDatabase: SearchResult[] = [\n  // Crisis Resources (highest priority)\n  { id: 'crisis-help', title: 'Crisis Help', path: '/crisis', category: 'crisis', priority: 100, icon: <AlertTriangle className=\"h-4 w-4\" />, keywords: ['emergency', 'help', 'suicide', 'crisis', '988', 'urgent'] },\n  { id: 'crisis-hotline', title: 'Crisis Hotline (988)', path: 'tel:988', category: 'crisis', priority: 100, icon: <AlertTriangle className=\"h-4 w-4\" />, keywords: ['call', 'phone', 'hotline', '988', 'talk'] },\n  { id: 'crisis-text', title: 'Crisis Text Line', path: 'sms:741741', category: 'crisis', priority: 100, icon: <AlertTriangle className=\"h-4 w-4\" />, keywords: ['text', 'message', 'chat', '741741'] },\n  \n  // Main Pages\n  { id: 'dashboard', title: 'Dashboard', path: '/dashboard', category: 'page', icon: <TrendingUp className=\"h-4 w-4\" />, keywords: ['home', 'overview', 'progress', 'tracking'] },\n  { id: 'wellness', title: 'Wellness Hub', path: '/wellness', category: 'page', icon: <Heart className=\"h-4 w-4\" />, keywords: ['wellness', 'health', 'self-care', 'activities'] },\n  { id: 'community', title: 'Community', path: '/community', category: 'page', icon: <Users className=\"h-4 w-4\" />, keywords: ['community', 'support', 'groups', 'forums', 'chat'] },\n  { id: 'professional', title: 'Professional Care', path: '/professional', category: 'page', icon: <Brain className=\"h-4 w-4\" />, keywords: ['therapist', 'doctor', 'professional', 'appointment', 'therapy'] },\n  \n  // Wellness Resources\n  { id: 'mood-tracker', title: 'Mood Tracker', path: '/wellness/mood', category: 'resource', icon: <Heart className=\"h-4 w-4\" />, keywords: ['mood', 'emotions', 'feelings', 'tracking', 'log'] },\n  { id: 'journal', title: 'Journal', path: '/wellness/journal', category: 'resource', icon: <FileText className=\"h-4 w-4\" />, keywords: ['journal', 'diary', 'write', 'thoughts', 'reflection'] },\n  { id: 'meditation', title: 'Meditation', path: '/wellness/meditation', category: 'resource', icon: <Brain className=\"h-4 w-4\" />, keywords: ['meditation', 'mindfulness', 'breathe', 'calm', 'relax'] },\n  { id: 'breathing', title: 'Breathing Exercises', path: '/wellness/breathing', category: 'resource', icon: <Heart className=\"h-4 w-4\" />, keywords: ['breathing', 'breathe', 'exercise', 'calm', 'anxiety'] },\n  { id: 'sleep', title: 'Sleep Tracker', path: '/wellness/sleep', category: 'resource', icon: <Brain className=\"h-4 w-4\" />, keywords: ['sleep', 'rest', 'insomnia', 'bedtime', 'tracking'] },\n  \n  // Community Features\n  { id: 'support-groups', title: 'Support Groups', path: '/community/groups', category: 'community', icon: <Users className=\"h-4 w-4\" />, keywords: ['groups', 'support', 'community', 'connect', 'share'] },\n  { id: 'success-stories', title: 'Success Stories', path: '/community/stories', category: 'community', icon: <Star className=\"h-4 w-4\" />, keywords: ['stories', 'success', 'inspiration', 'recovery', 'hope'] },\n  { id: 'events', title: 'Events', path: '/community/events', category: 'community', icon: <Calendar className=\"h-4 w-4\" />, keywords: ['events', 'calendar', 'workshops', 'meetings', 'schedule'] },\n  \n  // Professional Care\n  { id: 'find-therapist', title: 'Find a Therapist', path: '/professional/find', category: 'therapist', icon: <Brain className=\"h-4 w-4\" />, keywords: ['therapist', 'counselor', 'psychologist', 'find', 'search'] },\n  { id: 'appointments', title: 'Appointments', path: '/professional/appointments', category: 'therapist', icon: <Calendar className=\"h-4 w-4\" />, keywords: ['appointment', 'booking', 'schedule', 'calendar', 'session'] },\n  { id: 'teletherapy', title: 'Teletherapy', path: '/professional/teletherapy', category: 'therapist', icon: <Brain className=\"h-4 w-4\" />, keywords: ['online', 'video', 'teletherapy', 'remote', 'virtual'] },\n  \n  // Quick Actions\n  { id: 'quick-mood', title: 'Quick Mood Check', path: '/wellness/mood/quick', category: 'action', icon: <Heart className=\"h-4 w-4\" />, keywords: ['quick', 'mood', 'check', 'fast', 'now'] },\n  { id: 'sos-toolkit', title: 'SOS Toolkit', path: '/crisis/toolkit', category: 'crisis', priority: 90, icon: <AlertTriangle className=\"h-4 w-4\" />, keywords: ['sos', 'toolkit', 'emergency', 'coping', 'strategies'] },\n  { id: 'help-center', title: 'Help Center', path: '/help', category: 'resource', icon: <HelpCircle className=\"h-4 w-4\" />, keywords: ['help', 'support', 'faq', 'questions', 'guide'] },\n];\n\nexport function GlobalSearch() {\n  const navigate = useNavigate();\n  const { isSearchOpen, setSearchOpen, _preferences, addToRecent } = useNavigation();\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState<SearchResult[]>([]);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [recentSearches, setRecentSearches] = useState<string[]>([]);\n  const searchInputRef = useRef<HTMLInputElement>(null);\n\n  // Load recent searches from localStorage\n  useEffect(() => {\n    const _saved = localStorage.getItem('recentSearches');\n    if (_saved) {\n      setRecentSearches(JSON.parse(_saved));\n    }\n  }, []);\n\n  // Save recent searches\n  const saveRecentSearch = (searchTerm: string) => {\n    if (searchTerm.trim()) {\n      const _updated = [searchTerm, ...recentSearches.filter(s => s !== searchTerm)].slice(0, 5);\n      setRecentSearches(_updated);\n      localStorage.setItem('recentSearches', JSON.stringify(_updated));\n    }\n  };\n\n  // Search algorithm with fuzzy matching and ranking\n  const performSearch = useCallback((searchQuery: string) => {\n    if (!searchQuery.trim()) {\n      setResults([]);\n      return;\n    }\n\n    const lowerQuery = searchQuery.toLowerCase();\n    const terms = lowerQuery.split(' ').filter(_Boolean);\n\n    const _searchResults = searchDatabase\n      .map(item => {\n        let score = 0;\n        \n        // Exact title match\n        if (item.title.toLowerCase() === lowerQuery) {\n          score += 100;\n        }\n        \n        // Title contains query\n        if (item.title.toLowerCase().includes(_lowerQuery)) {\n          score += 50;\n        }\n        \n        // Check each term\n        terms.forEach(_term => {\n          if (item.title.toLowerCase().includes(_term)) {\n            score += 20;\n          }\n          if (item.description?.toLowerCase().includes(_term)) {\n            score += 10;\n          }\n          if (item.keywords.some(k => k.includes(_term))) {\n            score += 15;\n          }\n        });\n        \n        // Priority boost\n        score += (item.priority || 0);\n        \n        // Category boost for crisis items when certain keywords are present\n        if (item.category === 'crisis' && ['help', 'emergency', 'crisis', 'suicide'].some(_word => lowerQuery.includes(_word))) {\n          score += 200;\n        }\n        \n        return { ...item, score };\n      })\n      .filter(item => item.score > 0)\n      .sort((a, b) => b.score - a.score)\n      .slice(0, 8);\n\n    setResults(_searchResults);\n    setSelectedIndex(0);\n  }, []);\n\n  // Handle search input change\n  useEffect(() => {\n    const _debounceTimer = setTimeout(() => {\n      performSearch(_query);\n    }, 150);\n\n    return () => clearTimeout(_debounceTimer);\n  }, [query, performSearch]);\n\n  // Keyboard navigation\n  useEffect(() => {\n    if (!isSearchOpen) return;\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      switch (e.key) {\n        case 'ArrowDown':\n          e.preventDefault();\n          setSelectedIndex(prev => (prev + 1) % Math.max(1, results.length));\n          break;\n        case 'ArrowUp':\n          e.preventDefault();\n          setSelectedIndex(prev => (prev - 1 + Math.max(1, results.length)) % Math.max(1, results.length));\n          break;\n        case 'Enter':\n          e.preventDefault();\n          if (results[selectedIndex]) {\n            handleResultClick(results[selectedIndex]);\n          }\n          break;\n        case 'Escape':\n          setSearchOpen(false);\n          break;\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isSearchOpen, results, selectedIndex, setSearchOpen]);\n\n  // Focus input when search opens\n  useEffect(() => {\n    if (isSearchOpen && searchInputRef.current) {\n      searchInputRef.current.focus();\n    }\n  }, [isSearchOpen]);\n\n  // Handle result click\n  const handleResultClick = (result: SearchResult) => {\n    saveRecentSearch(_query);\n    addToRecent(result.path);\n    \n    if (result.path.startsWith('tel:') || result.path.startsWith('sms:')) {\n      window.location.href = result.path;\n    } else {\n      navigate(result.path);\n    }\n    \n    setSearchOpen(false);\n    setQuery('');\n  };\n\n  // Quick search suggestions based on context\n  const getQuickSuggestions = () => {\n    const suggestions = [];\n    const hour = new Date().getHours();\n    \n    if (hour >= 22 || hour < 6) {\n      suggestions.push({ text: 'Sleep resources', query: 'sleep' });\n      suggestions.push({ text: 'Calming exercises', query: 'calm' });\n    } else if (hour >= 6 && hour < 12) {\n      suggestions.push({ text: 'Morning meditation', query: 'meditation' });\n      suggestions.push({ text: 'Mood check-in', query: 'mood' });\n    } else {\n      suggestions.push({ text: 'Stress relief', query: 'stress' });\n      suggestions.push({ text: 'Find support', query: 'support' });\n    }\n    \n    return suggestions;\n  };\n\n  return (\n    <AnimatePresence>\n      {isSearchOpen && (\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          className=\"fixed inset-0 z-50 flex items-start justify-center pt-20 px-4\"\n          onClick={() => setSearchOpen(false)}\n        >\n          {/* Backdrop */}\n          <div className=\"absolute inset-0 bg-black/50 backdrop-blur-sm\" />\n          \n          {/* Search Modal */}\n          <motion.div\n            initial={{ scale: 0.95, opacity: 0 }}\n            animate={{ scale: 1, opacity: 1 }}\n            exit={{ scale: 0.95, opacity: 0 }}\n            transition={{ type: 'spring', duration: 0.3 }}\n            className=\"relative w-full max-w-2xl bg-white rounded-2xl shadow-2xl overflow-hidden\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            {/* Search Input */}\n            <div className=\"flex items-center px-6 py-4 border-b border-gray-200\">\n              <Search className=\"h-5 w-5 text-gray-400 mr-3\" />\n              <input\n                ref={searchInputRef}\n                type=\"text\"\n                value={query}\n                onChange={(e) => setQuery(e.target.value)}\n                placeholder=\"Search for resources, support, or type 'help' for crisis assistance...\"\n                className=\"flex-1 text-lg outline-none placeholder-gray-400\"\n                autoComplete=\"off\"\n              />\n              <button\n                onClick={() => setSearchOpen(false)}\n                className=\"ml-3 p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n              >\n                <X className=\"h-5 w-5 text-gray-500\" />\n              </button>\n            </div>\n            \n            {/* Search Results or Suggestions */}\n            <div className=\"max-h-96 overflow-y-auto\">\n              {query ? (\n                results.length > 0 ? (\n                  <div className=\"py-2\">\n                    {results.map((result, index) => (\n                      <button\n                        key={result.id}\n                        onClick={() => handleResultClick(_result)}\n                        onMouseEnter={() => setSelectedIndex(_index)}\n                        className={`w-full px-6 py-3 flex items-center hover:bg-gray-50 transition-colors ${\n                          index === selectedIndex ? 'bg-gray-50' : ''\n                        }`}\n                      >\n                        <div className={`mr-3 ${\n                          result.category === 'crisis' ? 'text-red-500' : 'text-gray-400'\n                        }`}>\n                          {result.icon || <Search className=\"h-4 w-4\" />}\n                        </div>\n                        <div className=\"flex-1 text-left\">\n                          <div className=\"font-medium text-gray-900\">{result.title}</div>\n                          {result.description && (\n                            <div className=\"text-sm text-gray-500\">{result.description}</div>\n                          )}\n                        </div>\n                        <ArrowRight className=\"h-4 w-4 text-gray-400\" />\n                      </button>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"px-6 py-8 text-center text-gray-500\">\n                    No results found for \"{query}\"\n                  </div>\n                )\n              ) : (\n                <div className=\"p-6\">\n                  {/* Quick Suggestions */}\n                  <div className=\"mb-6\">\n                    <h3 className=\"text-sm font-medium text-gray-500 mb-3\">Suggestions for you</h3>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {getQuickSuggestions().map((suggestion, index) => (\n                        <button\n                          key={index}\n                          onClick={() => setQuery(suggestion.query)}\n                          className=\"px-3 py-1.5 bg-primary-50 text-primary-700 rounded-lg text-sm hover:bg-primary-100 transition-colors\"\n                        >\n                          {suggestion.text}\n                        </button>\n                      ))}\n                    </div>\n                  </div>\n                  \n                  {/* Recent Searches */}\n                  {recentSearches.length > 0 && (\n                    <div>\n                      <h3 className=\"text-sm font-medium text-gray-500 mb-3\">Recent searches</h3>\n                      <div className=\"space-y-1\">\n                        {recentSearches.map((search, index) => (\n                          <button\n                            key={index}\n                            onClick={() => setQuery(search)}\n                            className=\"w-full px-3 py-2 flex items-center text-left hover:bg-gray-50 rounded-lg transition-colors\"\n                          >\n                            <Clock className=\"h-4 w-4 text-gray-400 mr-3\" />\n                            <span className=\"text-gray-700\">{search}</span>\n                          </button>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n            \n            {/* Keyboard Shortcuts Hint */}\n            <div className=\"px-6 py-3 bg-gray-50 border-t border-gray-200 flex items-center justify-between text-xs text-gray-500\">\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"flex items-center\">\n                  <kbd className=\"px-1.5 py-0.5 bg-white border border-gray-300 rounded text-xs mr-1\">↑</kbd>\n                  <kbd className=\"px-1.5 py-0.5 bg-white border border-gray-300 rounded text-xs mr-1\">↓</kbd>\n                  Navigate\n                </span>\n                <span className=\"flex items-center\">\n                  <kbd className=\"px-1.5 py-0.5 bg-white border border-gray-300 rounded text-xs mr-1\">Enter</kbd>\n                  Select\n                </span>\n                <span className=\"flex items-center\">\n                  <kbd className=\"px-1.5 py-0.5 bg-white border border-gray-300 rounded text-xs mr-1\">Esc</kbd>\n                  Close\n                </span>\n              </div>\n              <span className=\"flex items-center\">\n                <Command className=\"h-3 w-3 mr-1\" />K to open\n              </span>\n            </div>\n          </motion.div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\navigation\\MobileBottomNav.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\navigation\\NavigationContext.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useMemo has an unnecessary dependency: 'crisisDetected'. Either exclude it or remove the dependency array.","line":186,"column":6,"nodeType":"ArrayExpression","endLine":186,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[6895,6911],"text":"[]"}}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":218,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":218,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n// Navigation mode types for different user states\nexport type NavigationMode = 'normal' | 'crisis' | 'simplified' | 'professional';\n\n// User preference settings for navigation\nexport interface NavigationPreferences {\n  showQuickAccess: boolean;\n  enableKeyboardShortcuts: boolean;\n  enableVoiceNavigation: boolean;\n  reducedMotion: boolean;\n  highContrast: boolean;\n  fontSize: 'small' | 'medium' | 'large';\n  favoriteRoutes: string[];\n  recentRoutes: string[];\n  customShortcuts: Record<string, string>;\n}\n\n// Navigation context state\ninterface NavigationContextState {\n  mode: NavigationMode;\n  preferences: NavigationPreferences;\n  isSearchOpen: boolean;\n  isMobileMenuOpen: boolean;\n  breadcrumbs: Array<{ label: string; path: string }>;\n  quickActions: Array<{ label: string; action: () => void; icon?: string }>;\n  crisisDetected: boolean;\n  userRole: 'patient' | 'caregiver' | 'professional' | 'guest';\n  favoriteRoutes: string[]; // Access via preferences.favoriteRoutes for compatibility\n  recentRoutes: string[]; // Access via preferences.recentRoutes for compatibility\n  setMode: (mode: NavigationMode) => void;\n  updatePreferences: (prefs: Partial<NavigationPreferences>) => void;\n  setSearchOpen: (open: boolean) => void;\n  setMobileMenuOpen: (open: boolean) => void;\n  addToFavorites: (route: string) => void;\n  removeFromFavorites: (route: string) => void;\n  addToRecent: (route: string) => void;\n  setCrisisDetected: (detected: boolean) => void;\n  setUserRole: (role: 'patient' | 'caregiver' | 'professional' | 'guest') => void;\n}\n\n// Default preferences\nconst defaultPreferences: NavigationPreferences = {\n  showQuickAccess: true,\n  enableKeyboardShortcuts: true,\n  enableVoiceNavigation: false,\n  reducedMotion: false,\n  highContrast: false,\n  fontSize: 'medium',\n  favoriteRoutes: [],\n  recentRoutes: [],\n  customShortcuts: {},\n};\n\n// Create context\nconst NavigationContext = createContext<NavigationContextState | undefined>(_undefined);\n\n// Provider component\nexport function NavigationProvider({ children }: { children: ReactNode }) {\n  const location = useLocation();\n  const [mode, setMode] = useState<NavigationMode>('normal');\n  const [preferences, setPreferences] = useState<NavigationPreferences>(() => {\n    // Load preferences from localStorage if available\n    const saved = localStorage.getItem('navigationPreferences');\n    return saved ? { ...defaultPreferences, ...JSON.parse(_saved) } : defaultPreferences;\n  });\n  const [isSearchOpen, setSearchOpen] = useState(false);\n  const [isMobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [crisisDetected, setCrisisDetected] = useState(false);\n  const [userRole, setUserRole] = useState<'patient' | 'caregiver' | 'professional' | 'guest'>('guest');\n  const [breadcrumbs, setBreadcrumbs] = useState<Array<{ label: string; path: string }>>([]);\n\n  // Update breadcrumbs based on current path\n  useEffect(() => {\n    const pathSegments = location.pathname.split('/').filter(_Boolean);\n    const newBreadcrumbs: Array<{ label: string; path: string }> = [\n      { label: 'Home', path: '/' }\n    ];\n\n    let currentPath = '';\n    pathSegments.forEach(segment => {\n      currentPath += `/${segment}`;\n      const label = segment.charAt(0).toUpperCase() + segment.slice(1).replace(/-/g, ' ');\n      newBreadcrumbs.push({ label, path: currentPath });\n    });\n\n    setBreadcrumbs(_newBreadcrumbs);\n  }, [location]);\n\n  // Save preferences to localStorage when they change\n  useEffect(() => {\n    localStorage.setItem('navigationPreferences', JSON.stringify(preferences));\n  }, [preferences]);\n\n  // Check for reduced motion preference\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    setPreferences(prev => ({ ...prev, reducedMotion: mediaQuery.matches }));\n\n    const handleChange = (e: MediaQueryListEvent) => {\n      setPreferences(prev => ({ ...prev, reducedMotion: e.matches }));\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n\n  // Check for high contrast preference\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-contrast: high)');\n    setPreferences(prev => ({ ...prev, highContrast: mediaQuery.matches }));\n\n    const handleChange = (e: MediaQueryListEvent) => {\n      setPreferences(prev => ({ ...prev, highContrast: e.matches }));\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n\n  // Auto-detect crisis mode based on route\n  useEffect(() => {\n    if (location.pathname.includes('/crisis')) {\n      setCrisisDetected(true);\n      setMode('crisis');\n    } else if (crisisDetected && !location.pathname.includes('/crisis')) {\n      // Keep crisis mode active for a period after leaving crisis page\n      const _timeout = setTimeout(() => {\n        setCrisisDetected(false);\n        setMode('normal');\n      }, 5 * 60 * 1000); // 5 minutes\n      return () => clearTimeout(_timeout);\n    }\n  }, [location, crisisDetected]);\n\n  // Update recent routes\n  useEffect(() => {\n    addToRecent(location.pathname);\n  }, [location]);\n\n  const updatePreferences = (prefs: Partial<NavigationPreferences>) => {\n    setPreferences(prev => ({ ...prev, ...prefs }));\n  };\n\n  const addToFavorites = (route: string) => {\n    setPreferences(prev => ({\n      ...prev,\n      favoriteRoutes: [...new Set([...prev.favoriteRoutes, route])],\n    }));\n  };\n\n  const removeFromFavorites = (route: string) => {\n    setPreferences(prev => ({\n      ...prev,\n      favoriteRoutes: prev.favoriteRoutes.filter(r => r !== route),\n    }));\n  };\n\n  const addToRecent = (route: string) => {\n    setPreferences(prev => {\n      const recent = [route, ...prev.recentRoutes.filter(r => r !== route)].slice(0, 10);\n      return { ...prev, recentRoutes: recent };\n    });\n  };\n\n  // Quick actions based on current context\n  const quickActions = React.useMemo(() => {\n    const actions = [];\n    \n    if (_crisisDetected) {\n      actions.push(\n        { label: 'Call Hotline', action: () => window.location.href = 'tel:988', icon: '📞' },\n        { label: 'Text Support', action: () => window.location.href = 'sms:741741', icon: '💬' },\n        { label: 'Breathing Exercise', action: () => window.location.href = '/wellness/breathing', icon: '🫁' }\n      );\n    } else {\n      actions.push(\n        { label: 'Log Mood', action: () => window.location.href = '/wellness/mood', icon: '😊' },\n        { label: 'Journal', action: () => window.location.href = '/wellness/journal', icon: '📝' },\n        { label: 'Meditate', action: () => window.location.href = '/wellness/meditation', icon: '🧘' }\n      );\n    }\n\n    return actions;\n  }, [crisisDetected]);\n\n  const value: NavigationContextState = {\n    mode,\n    preferences,\n    isSearchOpen,\n    isMobileMenuOpen,\n    breadcrumbs,\n    quickActions,\n    crisisDetected,\n    userRole,\n    favoriteRoutes: preferences.favoriteRoutes, // Expose as direct property for easier access\n    recentRoutes: preferences.recentRoutes, // Expose as direct property for easier access\n    setMode,\n    updatePreferences,\n    setSearchOpen,\n    setMobileMenuOpen,\n    addToFavorites,\n    removeFromFavorites,\n    addToRecent,\n    setCrisisDetected,\n    setUserRole,\n  };\n\n  return (\n    <NavigationContext.Provider value={value}>\n      {children}\n    </NavigationContext.Provider>\n  );\n}\n\n// Hook to use navigation context\nexport function useNavigation() {\n  const context = useContext(_NavigationContext);\n  if (!context) {\n    throw new Error('useNavigation must be used within NavigationProvider');\n  }\n  return context;\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\notifications\\NotificationCenter.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Phone' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Filter' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":9},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1367,1370],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1367,1370],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":64,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":102,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":117,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":132,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":132,"endColumn":20}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport {\r\n  Bell,\r\n  BellOff,\r\n  Settings,\r\n  Clock,\r\n  CheckCircle,\r\n  AlertCircle,\r\n  Info,\r\n  X,\r\n  Calendar,\r\n  Zap,\r\n  Heart,\r\n  MessageCircle,\r\n  Phone,\r\n  Plus,\r\n  Filter,\r\n  Search,\r\n  MoreHorizontal\r\n} from 'lucide-react';\r\nimport {\r\n  comprehensiveNotificationService,\r\n  NotificationPreferences,\r\n  NotificationRule,\r\n  SmartNotification\r\n} from '../../services/notifications/ComprehensiveNotificationService';\r\nimport { logger } from '../../utils/logger';\r\n\r\ninterface NotificationCenterProps {\r\n  className?: string;\r\n}\r\n\r\nexport const NotificationCenter: React.FC<NotificationCenterProps> = ({\r\n  className = ''\r\n}) => {\r\n  const [preferences, setPreferences] = useState<NotificationPreferences | null>(null);\r\n  const [rules, setRules] = useState<NotificationRule[]>([]);\r\n  const [notifications, setNotifications] = useState<SmartNotification[]>([]);\r\n  const [_isLoading, setIsLoading] = useState(true);\r\n  const [activeTab, setActiveTab] = useState<'notifications' | 'rules' | 'settings'>('notifications');\r\n  const [filterPriority, setFilterPriority] = useState<'all' | 'low' | 'medium' | 'high' | 'critical'>('all');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [inAppNotifications, setInAppNotifications] = useState<any[]>([]);\r\n\r\n  useEffect(() => {\r\n    initializeNotificationCenter();\r\n    setupInAppNotificationListener();\r\n  }, []);\r\n\r\n  const initializeNotificationCenter = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      \r\n      // Load preferences, rules, and notification history\r\n      const _userPreferences = comprehensiveNotificationService.getPreferences();\r\n      const _allRules = comprehensiveNotificationService.getAllRules();\r\n      const _notificationHistory = comprehensiveNotificationService.getNotificationHistory();\r\n      \r\n      setPreferences(_userPreferences);\r\n      setRules(_allRules);\r\n      setNotifications(_notificationHistory);\r\n      \r\n    } catch (_error) {\r\n      logger.error('Failed to initialize notification center:');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const setupInAppNotificationListener = () => {\r\n    const handleInAppNotification = (event: CustomEvent) => {\r\n      const notification = event.detail;\r\n      setInAppNotifications(prev => [...prev, {\r\n        ...notification,\r\n        timestamp: Date.now(),\r\n        show: true\r\n      }]);\r\n      \r\n      // Auto-hide after 8 seconds for non-critical notifications\r\n      if (notification.priority !== 'critical') {\r\n        setTimeout(() => {\r\n          setInAppNotifications(prev => \r\n            prev.map(n => n.id === notification.id ? { ...n, show: false } : n)\r\n          );\r\n        }, 8000);\r\n      }\r\n    };\r\n\r\n    window.addEventListener('inAppNotification', handleInAppNotification as EventListener);\r\n    \r\n    return () => {\r\n      window.removeEventListener('inAppNotification', handleInAppNotification as EventListener);\r\n    };\r\n  };\r\n\r\n  const updatePreferences = async (_updates: Partial<NotificationPreferences>) => {\r\n    try {\r\n      await comprehensiveNotificationService.updatePreferences(_updates);\r\n      const _updatedPreferences = comprehensiveNotificationService.getPreferences();\r\n      setPreferences(_updatedPreferences);\r\n    } catch (_error) {\r\n      logger.error('Failed to update preferences:');\r\n    }\r\n  };\r\n\r\n  const toggleRule = async (ruleId: string) => {\r\n    try {\r\n      const rule = rules.find(r => r.id === ruleId);\r\n      if (rule) {\r\n        rule.isActive = !rule.isActive;\r\n        setRules(prev => prev.map(r => r.id === ruleId ? rule : r));\r\n        \r\n        // In a real implementation, this would update the rule in the service\r\n        // For now, we'll just update the local state\r\n      }\r\n    } catch (_error) {\r\n      logger.error('Failed to toggle rule:');\r\n    }\r\n  };\r\n\r\n  const dismissInAppNotification = (notificationId: string) => {\r\n    setInAppNotifications(prev => \r\n      prev.map(n => n.id === notificationId ? { ...n, show: false } : n)\r\n    );\r\n  };\r\n\r\n  const handleNotificationAction = async (notificationId: string, actionId: string) => {\r\n    try {\r\n      await comprehensiveNotificationService.handleNotificationClick(notificationId, actionId);\r\n      dismissInAppNotification(_notificationId);\r\n    } catch (_error) {\r\n      logger.error('Failed to handle notification action:');\r\n    }\r\n  };\r\n\r\n  const getNotificationIcon = (_type: NotificationRule['type']) => {\r\n    switch (_type) {\r\n      case 'wellness_reminder': return Heart;\r\n      case 'medication_reminder': return Clock;\r\n      case 'mood_check': return MessageCircle;\r\n      case 'crisis_followup': return AlertCircle;\r\n      case 'appointment_reminder': return Calendar;\r\n      case 'self_care_prompt': return Zap;\r\n      default: return Info;\r\n    }\r\n  };\r\n\r\n  const getPriorityColor = (_priority: string) => {\r\n    switch (_priority) {\r\n      case 'critical': return 'text-red-600 bg-red-50 border-red-200';\r\n      case 'high': return 'text-orange-600 bg-orange-50 border-orange-200';\r\n      case 'medium': return 'text-blue-600 bg-blue-50 border-blue-200';\r\n      case 'low': return 'text-gray-600 bg-gray-50 border-gray-200';\r\n      default: return 'text-gray-600 bg-gray-50 border-gray-200';\r\n    }\r\n  };\r\n\r\n  const filteredNotifications = notifications.filter(notification => {\r\n    const matchesPriority = filterPriority === 'all' || notification._priority === filterPriority;\r\n    const matchesSearch = searchQuery === '' || \r\n      notification.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      notification.body.toLowerCase().includes(searchQuery.toLowerCase());\r\n    \r\n    return matchesPriority && matchesSearch;\r\n  });\r\n\r\n  if (_isLoading) {\r\n    return (\r\n      <div className={`bg-white rounded-xl shadow-lg p-6 ${className}`}>\r\n        <div className=\"flex items-center justify-center space-x-3\">\r\n          <div className=\"w-6 h-6 border-2 border-purple-600 border-t-transparent rounded-full animate-spin\"></div>\r\n          <span className=\"text-gray-600\">Loading notification center...</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* In-App Notifications Overlay */}\r\n      <AnimatePresence>\r\n        {inAppNotifications.filter(n => n.show).map((notification) => (\r\n          <motion.div\r\n            key={notification.id}\r\n            initial={{ opacity: 0, y: -100, x: '50%' }}\r\n            animate={{ opacity: 1, y: 20, x: '50%' }}\r\n            exit={{ opacity: 0, y: -100 }}\r\n            className=\"fixed top-0 left-1/2 transform -translate-x-1/2 z-50 max-w-md w-full mx-4\"\r\n          >\r\n            <div className={`rounded-lg shadow-lg p-4 border ${getPriorityColor(notification._priority)} bg-white`}>\r\n              <div className=\"flex items-start justify-between\">\r\n                <div className=\"flex-1\">\r\n                  <h4 className=\"font-semibold text-gray-900\">{notification.title}</h4>\r\n                  <p className=\"text-sm text-gray-600 mt-1\">{notification.body}</p>\r\n                  \r\n                  {notification.actions && notification.actions.length > 0 && (\r\n                    <div className=\"flex space-x-2 mt-3\">\r\n                      {notification.actions.slice(0, 2).map((action: unknown) => (\r\n                        <button\r\n                          key={action.id}\r\n                          onClick={() => handleNotificationAction(notification.id, action.id)}\r\n                          className=\"px-3 py-1 bg-purple-100 text-purple-700 rounded text-sm font-medium hover:bg-purple-200 transition-colors\"\r\n                        >\r\n                          {action.title}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                \r\n                <button\r\n                  onClick={() => dismissInAppNotification(notification.id)}\r\n                  className=\"text-gray-400 hover:text-gray-600 ml-4\"\r\n                >\r\n                  <X className=\"w-5 h-5\" />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </motion.div>\r\n        ))}\r\n      </AnimatePresence>\r\n\r\n      {/* Main Notification Center */}\r\n      <div className={`bg-white rounded-xl shadow-lg overflow-hidden ${className}`}>\r\n        {/* Header */}\r\n        <div className=\"bg-gradient-to-r from-purple-500 to-indigo-600 p-6 text-white\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center space-x-3\">\r\n              <Bell className=\"w-8 h-8\" />\r\n              <div>\r\n                <h2 className=\"text-xl font-bold\">Notification Center</h2>\r\n                <p className=\"text-purple-100 text-sm\">\r\n                  Manage your mental health reminders and alerts\r\n                </p>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"flex items-center space-x-2\">\r\n              {preferences?.globalEnabled ? (\r\n                <div className=\"flex items-center space-x-1 text-green-200\">\r\n                  <Bell className=\"w-4 h-4\" />\r\n                  <span className=\"text-sm\">Active</span>\r\n                </div>\r\n              ) : (\r\n                <div className=\"flex items-center space-x-1 text-red-200\">\r\n                  <BellOff className=\"w-4 h-4\" />\r\n                  <span className=\"text-sm\">Disabled</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Tab Navigation */}\r\n        <div className=\"border-b border-gray-200\">\r\n          <nav className=\"flex space-x-8 px-6\">\r\n            {[\r\n              { id: 'notifications', label: 'Notifications', icon: Bell },\r\n              { id: 'rules', label: 'Rules', icon: Settings },\r\n              { id: 'settings', label: 'Preferences', icon: Settings }\r\n            ].map(({ id, label, icon: Icon }) => (\r\n              <button\r\n                key={id}\r\n                onClick={() => setActiveTab(id as unknown)}\r\n                className={`flex items-center space-x-2 py-4 px-2 border-b-2 transition-colors ${\r\n                  activeTab === id\r\n                    ? 'border-purple-500 text-purple-600'\r\n                    : 'border-transparent text-gray-500 hover:text-gray-700'\r\n                }`}\r\n              >\r\n                <Icon className=\"w-4 h-4\" />\r\n                <span>{label}</span>\r\n              </button>\r\n            ))}\r\n          </nav>\r\n        </div>\r\n\r\n        {/* Tab Content */}\r\n        <div className=\"p-6\">\r\n          {/* Notifications Tab */}\r\n          {activeTab === 'notifications' && (\r\n            <div className=\"space-y-6\">\r\n              {/* Filters and Search */}\r\n              <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0\">\r\n                <div className=\"flex items-center space-x-4\">\r\n                  <div className=\"relative\">\r\n                    <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\r\n                    <input\r\n                      type=\"text\"\r\n                      placeholder=\"Search notifications...\"\r\n                      value={searchQuery}\r\n                      onChange={(e) => setSearchQuery(e.target.value)}\r\n                      className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500\"\r\n                    />\r\n                  </div>\r\n                  \r\n                  <select\r\n                    value={filterPriority}\r\n                    onChange={(e) => setFilterPriority(e.target.value as unknown)}\r\n                    className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500\"\r\n                  >\r\n                    <option value=\"all\">All Priorities</option>\r\n                    <option value=\"critical\">Critical</option>\r\n                    <option value=\"high\">High</option>\r\n                    <option value=\"medium\">Medium</option>\r\n                    <option value=\"low\">Low</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Notification List */}\r\n              <div className=\"space-y-4\">\r\n                {filteredNotifications.length === 0 ? (\r\n                  <div className=\"text-center py-12 text-gray-500\">\r\n                    <Bell className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\r\n                    <p>No notifications found</p>\r\n                    <p className=\"text-sm\">Notifications will appear here when triggered</p>\r\n                  </div>\r\n                ) : (\r\n                  filteredNotifications.map((notification) => (\r\n                    <motion.div\r\n                      key={notification.id}\r\n                      initial={{ opacity: 0, y: 20 }}\r\n                      animate={{ opacity: 1, y: 0 }}\r\n                      className={`border rounded-lg p-4 ${getPriorityColor(notification._priority)}`}\r\n                    >\r\n                      <div className=\"flex items-start justify-between\">\r\n                        <div className=\"flex-1\">\r\n                          <div className=\"flex items-center space-x-2 mb-2\">\r\n                            <h3 className=\"font-semibold\">{notification.title}</h3>\r\n                            <span className={`px-2 py-1 text-xs rounded-full ${getPriorityColor(notification._priority)}`}>\r\n                              {notification._priority}\r\n                            </span>\r\n                          </div>\r\n                          \r\n                          <p className=\"text-sm mb-3\">{notification.body}</p>\r\n                          \r\n                          <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\r\n                            <span>{new Date(notification.timestamp).toLocaleString()}</span>\r\n                            <span className=\"capitalize\">{notification.status}</span>\r\n                          </div>\r\n                          \r\n                          {notification.actions.length > 0 && (\r\n                            <div className=\"flex space-x-2 mt-3\">\r\n                              {notification.actions.map((action) => (\r\n                                <button\r\n                                  key={action.id}\r\n                                  onClick={() => handleNotificationAction(notification.id, action.id)}\r\n                                  className=\"px-3 py-1 bg-purple-100 text-purple-700 rounded text-sm font-medium hover:bg-purple-200 transition-colors\"\r\n                                >\r\n                                  {action.title}\r\n                                </button>\r\n                              ))}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </motion.div>\r\n                  ))\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Rules Tab */}\r\n          {activeTab === 'rules' && (\r\n            <div className=\"space-y-6\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900\">Notification Rules</h3>\r\n                <button className=\"flex items-center space-x-2 px-4 py-2 bg-purple-100 text-purple-700 rounded-lg hover:bg-purple-200 transition-colors\">\r\n                  <Plus className=\"w-4 h-4\" />\r\n                  <span>Add Rule</span>\r\n                </button>\r\n              </div>\r\n\r\n              <div className=\"space-y-4\">\r\n                {rules.map((rule) => {\r\n                  const IconComponent = getNotificationIcon(rule._type);\r\n                  \r\n                  return (\r\n                    <motion.div\r\n                      key={rule.id}\r\n                      initial={{ opacity: 0, y: 20 }}\r\n                      animate={{ opacity: 1, y: 0 }}\r\n                      className=\"border rounded-lg p-4\"\r\n                    >\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <div className=\"flex items-center space-x-4\">\r\n                          <div className={`p-2 rounded-lg ${rule.isActive ? 'bg-green-100 text-green-600' : 'bg-gray-100 text-gray-600'}`}>\r\n                            <IconComponent className=\"w-5 h-5\" />\r\n                          </div>\r\n                          \r\n                          <div>\r\n                            <h4 className=\"font-semibold text-gray-900\">{rule.name}</h4>\r\n                            <p className=\"text-sm text-gray-600 capitalize\">{rule._type.replace('_', ' ')}</p>\r\n                            <div className=\"flex items-center space-x-4 mt-1 text-xs text-gray-500\">\r\n                              <span className=\"capitalize\">{rule._priority} priority</span>\r\n                              <span className=\"capitalize\">{rule.schedule.frequency}</span>\r\n                              {rule.lastTriggered && (\r\n                                <span>Last: {new Date(rule.lastTriggered).toLocaleDateString()}</span>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        \r\n                        <div className=\"flex items-center space-x-2\">\r\n                          <button\r\n                            onClick={() => toggleRule(rule.id)}\r\n                            className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\r\n                              rule.isActive ? 'bg-green-600' : 'bg-gray-300'\r\n                            }`}\r\n                          >\r\n                            <span\r\n                              className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\r\n                                rule.isActive ? 'translate-x-6' : 'translate-x-1'\r\n                              }`}\r\n                            />\r\n                          </button>\r\n                          \r\n                          <button className=\"text-gray-400 hover:text-gray-600\">\r\n                            <MoreHorizontal className=\"w-5 h-5\" />\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      <div className=\"mt-3 p-3 bg-gray-50 rounded text-sm\">\r\n                        <p><strong>Trigger:</strong> {rule.content.title}</p>\r\n                        <p className=\"text-gray-600 mt-1\">{rule.content.body}</p>\r\n                      </div>\r\n                    </motion.div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Settings Tab */}\r\n          {activeTab === 'settings' && preferences && (\r\n            <div className=\"space-y-6\">\r\n              {/* Global Settings */}\r\n              <div className=\"border rounded-lg p-4\">\r\n                <h3 className=\"font-semibold text-gray-900 mb-4\">Global Settings</h3>\r\n                \r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div>\r\n                      <span className=\"font-medium text-gray-900\">Enable Notifications</span>\r\n                      <p className=\"text-sm text-gray-600\">Turn all notifications on or off</p>\r\n                    </div>\r\n                    <button\r\n                      onClick={() => updatePreferences({ globalEnabled: !preferences.globalEnabled })}\r\n                      className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\r\n                        preferences.globalEnabled ? 'bg-purple-600' : 'bg-gray-300'\r\n                      }`}\r\n                    >\r\n                      <span\r\n                        className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\r\n                          preferences.globalEnabled ? 'translate-x-6' : 'translate-x-1'\r\n                        }`}\r\n                      />\r\n                    </button>\r\n                  </div>\r\n\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div>\r\n                      <span className=\"font-medium text-gray-900\">Quiet Hours</span>\r\n                      <p className=\"text-sm text-gray-600\">\r\n                        {preferences.quietHours.enabled \r\n                          ? `${preferences.quietHours.start} - ${preferences.quietHours.end}`\r\n                          : 'Disabled'\r\n                        }\r\n                      </p>\r\n                    </div>\r\n                    <button\r\n                      onClick={() => updatePreferences({\r\n                        quietHours: { ...preferences.quietHours, enabled: !preferences.quietHours.enabled }\r\n                      })}\r\n                      className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\r\n                        preferences.quietHours.enabled ? 'bg-purple-600' : 'bg-gray-300'\r\n                      }`}\r\n                    >\r\n                      <span\r\n                        className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\r\n                          preferences.quietHours.enabled ? 'translate-x-6' : 'translate-x-1'\r\n                        }`}\r\n                      />\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Category Settings */}\r\n              <div className=\"border rounded-lg p-4\">\r\n                <h3 className=\"font-semibold text-gray-900 mb-4\">Notification Categories</h3>\r\n                \r\n                <div className=\"space-y-4\">\r\n                  {Object.entries(preferences.categories).map(([key, enabled]) => (\r\n                    <div key={key} className=\"flex items-center justify-between\">\r\n                      <div>\r\n                        <span className=\"font-medium text-gray-900 capitalize\">\r\n                          {key.replace('_', ' ')}\r\n                        </span>\r\n                      </div>\r\n                      <button\r\n                        onClick={() => updatePreferences({\r\n                          categories: { ...preferences.categories, [key]: !enabled }\r\n                        })}\r\n                        className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\r\n                          enabled ? 'bg-purple-600' : 'bg-gray-300'\r\n                        }`}\r\n                      >\r\n                        <span\r\n                          className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\r\n                            enabled ? 'translate-x-6' : 'translate-x-1'\r\n                          }`}\r\n                        />\r\n                      </button>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Delivery Methods */}\r\n              <div className=\"border rounded-lg p-4\">\r\n                <h3 className=\"font-semibold text-gray-900 mb-4\">Delivery Methods</h3>\r\n                \r\n                <div className=\"space-y-4\">\r\n                  {Object.entries(preferences.delivery).map(([key, enabled]) => (\r\n                    <div key={key} className=\"flex items-center justify-between\">\r\n                      <div>\r\n                        <span className=\"font-medium text-gray-900 capitalize\">{key}</span>\r\n                        <p className=\"text-sm text-gray-600\">\r\n                          {key === 'push' && 'Browser notifications'}\r\n                          {key === 'email' && 'Email notifications'}\r\n                          {key === 'sms' && 'Text message notifications'}\r\n                          {key === 'inApp' && 'In-app notifications'}\r\n                        </p>\r\n                      </div>\r\n                      <button\r\n                        onClick={() => updatePreferences({\r\n                          delivery: { ...preferences.delivery, [key]: !enabled }\r\n                        })}\r\n                        className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\r\n                          enabled ? 'bg-purple-600' : 'bg-gray-300'\r\n                        }`}\r\n                      >\r\n                        <span\r\n                          className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\r\n                            enabled ? 'translate-x-6' : 'translate-x-1'\r\n                          }`}\r\n                        />\r\n                      </button>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NotificationCenter;","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\performance\\OptimizedChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":49,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":215,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":215,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":224,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":224,"endColumn":24},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'type'. Either exclude it or remove the dependency array.","line":319,"column":6,"nodeType":"ArrayExpression","endLine":319,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[8652,8658],"text":"[]"}}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'LoadingFallbacks' is not defined.","line":333,"column":13,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":333,"endColumn":29}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '@/utils/logger';\n/**\n * High-Performance Chart Component\n * Optimized for mental health data visualization with web workers\n */\n\nimport React, { useEffect, useRef, useState, useMemo, useCallback } from 'react';\nimport { Line, Bar, Doughnut } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n  ChartOptions,\n  ChartData,\n} from 'chart.js';\nimport { useDeferredValue } from 'react';\nimport { performanceMonitor } from '../../utils/performance/performanceMonitor';\nimport { UpdatePriority, usePrioritizedTransition } from '../../utils/performance/concurrentFeatures';\n\n// Register ChartJS components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\n// Initialize web worker\nlet chartWorker: Worker | null = null;\n\nif (typeof Worker !== 'undefined') {\n  try {\n    chartWorker = new Worker(\n      new URL('../../workers/chartProcessor.worker.ts', import.meta.url),\n      { type: 'module' }\n    );\n  } catch (_error) {\n    logger.warn('Web Worker not available, falling back to main thread processing');\n  }\n}\n\ninterface OptimizedChartProps {\n  type: 'line' | 'bar' | 'doughnut';\n  data: unknown[];\n  options?: ChartOptions;\n  height?: number;\n  width?: number;\n  priority?: UpdatePriority;\n  enableWebWorker?: boolean;\n  enableSampling?: boolean;\n  samplingThreshold?: number;\n  onDataProcessed?: (processedData: unknown) => void;\n  className?: string;\n}\n\nexport function OptimizedChart({\n  type = 'line',\n  data,\n  options = {},\n  height = 300,\n  width,\n  priority = UpdatePriority.MEDIUM,\n  enableWebWorker = true,\n  enableSampling = true,\n  samplingThreshold = 1000,\n  onDataProcessed,\n  className = '',\n}: OptimizedChartProps) {\n  const chartRef = useRef<unknown>(null);\n  const _canvasRef = useRef<HTMLCanvasElement>(null);\n  const [processedData, setProcessedData] = useState<ChartData | null>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [_error, setError] = useState<string | null>(null);\n  \n  // Use deferred value for non-critical updates\n  const deferredData = useDeferredValue(_data);\n  const [isPending, startPrioritizedTransition] = usePrioritizedTransition(_priority);\n\n  // Performance monitoring\n  useEffect(() => {\n    performanceMonitor.measureStart('chart-render');\n    return () => {\n      performanceMonitor.measureEnd('chart-render');\n    };\n  }, []);\n\n  // Fallback processing on main thread\n  const processDataOnMainThread = useCallback((rawData: unknown[]) => {\n    performanceMonitor.measureStart('chart-data-processing');\n    \n    try {\n      // Sample data if needed\n      let processedPoints = rawData;\n      if (enableSampling && rawData.length > samplingThreshold) {\n        const step = Math.ceil(rawData.length / 100);\n        processedPoints = rawData.filter((_, index) => index % step === 0);\n      }\n\n      // Format for Chart.js\n      const chartData: ChartData = {\n        labels: processedPoints.map(p => p.label || p.date || p.x),\n        datasets: [{\n          label: 'Wellness Data',\n          data: processedPoints.map(p => p.value || p.y),\n          borderColor: 'rgb(59, 130, 246)',\n          backgroundColor: type === 'line' \n            ? 'rgba(59, 130, 246, 0.1)'\n            : 'rgba(59, 130, 246, 0.5)',\n          tension: 0.4,\n          fill: type === 'line',\n        }],\n      };\n\n      performanceMonitor.measureEnd('chart-data-processing');\n      return chartData;\n    } catch (_error) {\n      performanceMonitor.measureEnd('chart-data-processing');\n      throw _error;\n    }\n  }, [enableSampling, samplingThreshold, type]);\n\n  // Process data with web worker\n  const processDataWithWorker = useCallback(async (rawData: unknown[]) => {\n    if (!chartWorker || !enableWebWorker) {\n      return processDataOnMainThread(_rawData);\n    }\n\n    return new Promise((resolve, reject) => {\n      const messageHandler = (event: MessageEvent) => {\n        const { _type, result, _error } = event.data;\n        \n        if (_error) {\n          reject(new Error(_error));\n        } else {\n          resolve(result);\n        }\n        \n        chartWorker!.removeEventListener('message', messageHandler);\n      };\n\n      chartWorker.addEventListener('message', messageHandler);\n\n      // Send data to worker\n      chartWorker.postMessage({\n        type: 'PROCESS_MOOD_DATA',\n        data: rawData,\n        options: {\n          sampling: enableSampling && rawData.length > samplingThreshold ? 100 : null,\n          smoothing: true,\n          trendLine: type === 'line',\n        },\n      });\n\n      // Timeout after 5 seconds\n      setTimeout(() => {\n        chartWorker!.removeEventListener('message', messageHandler);\n        reject(new Error('Worker timeout'));\n      }, 5000);\n    });\n  }, [enableWebWorker, enableSampling, samplingThreshold, type, processDataOnMainThread]);\n\n  // Process data when it changes\n  useEffect(() => {\n    if (!deferredData || deferredData.length === 0) {\n      setProcessedData(null);\n      return;\n    }\n\n    setIsProcessing(true);\n    setError(null);\n\n    const processData = async () => {\n      try {\n        const result = await processDataWithWorker(_deferredData) as { processed?: Array<{ date: string, value: number }> };\n        \n        startPrioritizedTransition(() => {\n          if (result.processed) {\n            // Web worker result\n            const _chartData: ChartData = {\n              labels: result.processed.map(p => p.date),\n              datasets: [{\n                label: 'Mood Trend',\n                data: result.processed.map(p => p.value),\n                borderColor: 'rgb(59, 130, 246)',\n                backgroundColor: 'rgba(59, 130, 246, 0.1)',\n                tension: 0.4,\n                fill: type === 'line',\n              }],\n            };\n            \n            setProcessedData(_chartData);\n            \n            if (_onDataProcessed) {\n              onDataProcessed(result);\n            }\n          } else {\n            // Main thread result\n            setProcessedData(result as ChartData);\n          }\n          \n          setIsProcessing(false);\n        });\n      } catch (_error) {\n        logger.error('Chart data processing _error');\n        setError('Processing failed');\n        setIsProcessing(false);\n        \n        // Fallback to main thread\n        try {\n          const _fallbackData = processDataOnMainThread(_deferredData);\n          setProcessedData(_fallbackData);\n        } catch (_error) {\n    logger.error('Fallback processing failed');\n        }\n      }\n    };\n\n    processData();\n  }, [deferredData, processDataWithWorker, processDataOnMainThread, startPrioritizedTransition, type, onDataProcessed]);\n\n  // Optimized chart options\n  const optimizedOptions = useMemo<ChartOptions>(() => ({\n    ...options,\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: {\n      duration: priority === UpdatePriority.CRISIS ? 0 : 750,\n    },\n    interaction: {\n      mode: 'nearest',\n      intersect: false,\n    },\n    plugins: {\n      ...options.plugins,\n      decimation: {\n        enabled: true,\n        algorithm: 'lttb',\n        samples: 100,\n      },\n      legend: {\n        display: true,\n        position: 'top' as const,\n      },\n      tooltip: {\n        enabled: true,\n        mode: 'index',\n        intersect: false,\n      },\n    },\n    scales: type !== 'doughnut' ? {\n      x: {\n        display: true,\n        grid: {\n          display: false,\n        },\n      },\n      y: {\n        display: true,\n        beginAtZero: true,\n        grid: {\n          color: 'rgba(0, 0, 0, 0.05)',\n        },\n      },\n    } : undefined,\n    elements: {\n      point: {\n        radius: data.length > 50 ? 0 : 3,\n        hoverRadius: 5,\n      },\n      line: {\n        borderWidth: 2,\n      },\n    },\n  }), [options, priority, data.length, type]);\n\n  // Handle chart instance\n  useEffect(() => {\n    if (chartRef.current) {\n      const chart = chartRef.current;\n      \n      // Optimize canvas rendering\n      if (chart.canvas) {\n        const ctx = chart.canvas.getContext('2d');\n        if (ctx) {\n          ctx.imageSmoothingEnabled = true;\n          ctx.imageSmoothingQuality = 'high';\n        }\n      }\n\n      // Cleanup on unmount\n      return () => {\n        chart.destroy();\n      };\n    }\n  }, []);\n\n  // Render appropriate chart component\n  const ChartComponent = useMemo(() => {\n    switch (_type) {\n      case 'bar':\n        return Bar;\n      case 'doughnut':\n        return Doughnut;\n      default:\n        return Line;\n    }\n  }, [type]);\n\n  if (_error) {\n    return (\n      <div className={`flex items-center justify-center h-${height} bg-red-50 rounded-lg ${className}`}>\n        <div className=\"text-center\">\n          <p className=\"text-red-600 mb-2\">Chart Error</p>\n          <p className=\"text-sm text-red-500\">{_error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (isProcessing || !processedData) {\n    return <LoadingFallbacks.Chart />;\n  }\n\n  return (\n    <div className={`chart-container ${className}`} style={{ height, width }}>\n      <ChartComponent\n        ref={chartRef}\n        data={processedData}\n        options={optimizedOptions}\n      />\n      {isPending && (\n        <div className=\"absolute top-2 right-2\">\n          <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-blue-600 border-t-transparent\"></div>\n        </div>\n      )}\n    </div>\n  );\n}\n\n/**\n * Specialized mood chart with mental health features\n */\nexport function MoodChart({ \n  moodData, \n  _showTrends = true,\n  showInsights = true,\n  ...props \n}: unknown) {\n  const [insights, setInsights] = useState<string[]>([]);\n  const [wellnessScore, setWellnessScore] = useState<number | null>(null);\n\n  const handleDataProcessed = useCallback((result: unknown) => {\n    if (result.insights) {\n      setInsights(result.insights);\n    }\n    if (result.wellnessScore !== undefined) {\n      setWellnessScore(result.wellnessScore);\n    }\n  }, []);\n\n  return (\n    <div className=\"mood-chart-container\">\n      <OptimizedChart\n        type=\"line\"\n        data={moodData}\n        priority={UpdatePriority.HIGH}\n        onDataProcessed={handleDataProcessed}\n        {...props}\n      />\n      \n      {showInsights && insights.length > 0 && (\n        <div className=\"mt-4 p-4 bg-blue-50 rounded-lg\">\n          <h4 className=\"text-sm font-semibold text-blue-900 mb-2\">Insights</h4>\n          <ul className=\"space-y-1\">\n            {insights.map((insight, index) => (\n              <li key={index} className=\"text-sm text-blue-700\">\n                • {insight}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n      \n      {wellnessScore !== null && (\n        <div className=\"mt-4 flex items-center justify-between p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg\">\n          <span className=\"text-sm font-medium text-gray-700\">Wellness Score</span>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"relative w-32 h-2 bg-gray-200 rounded-full overflow-hidden\">\n              <div \n                className=\"absolute top-0 left-0 h-full bg-gradient-to-r from-blue-500 to-purple-500 rounded-full transition-all duration-1000\"\n                style={{ width: `${wellnessScore}%` }}\n              />\n            </div>\n            <span className=\"text-lg font-bold text-gray-900\">{Math.round(wellnessScore)}</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\performance\\OptimizedCrisisIntervention.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'userId'. Either exclude it or remove the dependency array.","line":101,"column":6,"nodeType":"ArrayExpression","endLine":101,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [onActivate]","fix":{"range":[3508,3528],"text":"[onActivate]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":341,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":341,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '@/utils/logger';\n/**\n * Ultra-Optimized Crisis Intervention Component\n * Guaranteed <200ms response time for immediate mental health support\n */\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { AlertTriangle, Phone, MessageCircle, Heart, Shield, Activity } from 'lucide-react';\nimport { performanceMonitor } from '../../utils/performance/performanceMonitor';\n// import { UpdatePriority } from '../../utils/performance/concurrentFeatures';\n\n// Pre-computed crisis resources for instant access\nconst CRISIS_RESOURCES = {\n  hotlines: [\n    { name: '988 Suicide & Crisis Lifeline', number: '988', priority: 1 },\n    { name: 'Crisis Text Line', number: 'Text HOME to 741741', priority: 2 },\n    { name: 'SAMHSA National Helpline', number: '1-800-662-4357', priority: 3 },\n  ],\n  immediate: [\n    'Take deep breaths: In for 4, hold for 4, out for 4',\n    'Ground yourself: Name 5 things you can see',\n    'Call a trusted friend or family member',\n    'Move to a safe, comfortable space',\n  ],\n  techniques: [\n    { name: 'Box Breathing', duration: '2 min', effectiveness: 95 },\n    { name: '5-4-3-2-1 Grounding', duration: '3 min', effectiveness: 92 },\n    { name: 'Progressive Muscle Relaxation', duration: '5 min', effectiveness: 88 },\n  ],\n};\n\n// Pre-render critical UI elements\nconst CrisisButton = React.memo(() => (\n  <button\n    className=\"crisis-button-optimized fixed bottom-6 right-6 z-[9999] bg-red-600 hover:bg-red-700 text-white rounded-full p-4 shadow-lg transform transition-all duration-100 hover:scale-110\"\n    onClick={() => window.dispatchEvent(new CustomEvent('crisis-activate'))}\n    aria-label=\"Crisis Support\"\n    data-priority=\"critical\"\n  >\n    <AlertTriangle className=\"h-6 w-6\" />\n  </button>\n));\n\nCrisisButton.displayName = 'CrisisButton';\n\ninterface OptimizedCrisisInterventionProps {\n  userId?: string;\n  onActivate?: () => void;\n  preloadResources?: boolean;\n}\n\nexport function OptimizedCrisisIntervention({\n  userId,\n  onActivate,\n  preloadResources = true,\n}: OptimizedCrisisInterventionProps) {\n  const [isActive, setIsActive] = useState(false);\n  const [responseTime, setResponseTime] = useState<number | null>(null);\n  const activationTime = useRef<number>(0);\n  const modalRef = useRef<HTMLDivElement>(null);\n  \n  // Pre-cache DOM references\n  const _buttonRef = useRef<HTMLButtonElement>(null);\n  const _resourcesRef = useRef<HTMLDivElement>(null);\n\n  // Optimized activation handler\n  const handleActivation = useCallback(() => {\n    activationTime.current = performance.now();\n    performanceMonitor.measureStart('crisis-intervention-activate');\n    \n    // Immediate state update - no transitions\n    setIsActive(true);\n    \n    // Force immediate render\n    if (modalRef.current) {\n      modalRef.current.style.display = 'block';\n      modalRef.current.classList.add('active');\n    }\n    \n    // Measure response time\n    requestAnimationFrame(() => {\n      const time = performance.now() - activationTime.current;\n      setResponseTime(time);\n      performanceMonitor.measureEnd('crisis-intervention-activate');\n      \n      if (time > 200) {\n        logger.warn(`Crisis intervention response time exceeded target: ${time.toFixed(2)}ms`);\n      }\n    });\n    \n    // Notify parent\n    if (_onActivate) {\n      onActivate();\n    }\n    \n    // Log to analytics (non-blocking)\n// @ts-expect-error - requestIdleCallback is a global API\n    requestIdleCallback(() => {\n      logCrisisActivation(_userId);\n    });\n  }, [userId, onActivate]);\n\n  // Set up global listener for crisis activation\n  useEffect(() => {\n    const listener = () => handleActivation();\n    window.addEventListener('crisis-activate', listener);\n    \n    // Preload resources if enabled\n    if (_preloadResources) {\n      preloadCrisisResources();\n    }\n    \n    return () => {\n      window.removeEventListener('crisis-activate', listener);\n    };\n  }, [handleActivation, preloadResources]);\n\n  // Keyboard shortcut for crisis activation (Ctrl+Shift+H)\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.key === 'H') {\n        e.preventDefault();\n        handleActivation();\n      }\n    };\n    \n    document.addEventListener('keydown', handleKeyPress);\n    return () => document.removeEventListener('keydown', handleKeyPress);\n  }, [handleActivation]);\n\n  // Close handler\n  const handleClose = useCallback(() => {\n    setIsActive(false);\n    if (modalRef.current) {\n      modalRef.current.style.display = 'none';\n      modalRef.current.classList.remove('active');\n    }\n  }, []);\n\n  // Call hotline (immediate action)\n  const callHotline = useCallback((number: string) => {\n    performanceMonitor.measureStart('crisis-call-initiate');\n    \n    if (number === '988' || number.includes('800')) {\n      window.location.href = `tel:${number}`;\n    } else {\n      navigator.clipboard.writeText(number);\n      alert(`Number copied: ${number}`);\n    }\n    \n    performanceMonitor.measureEnd('crisis-call-initiate');\n  }, []);\n\n  return (\n    <>\n      {/* Always-visible crisis button */}\n      <CrisisButton />\n      \n      {/* Pre-rendered crisis modal (hidden by default) */}\n      <div\n        ref={modalRef}\n        className=\"crisis-modal-optimized fixed inset-0 z-[10000] bg-black bg-opacity-90 hidden\"\n        style={{ display: isActive ? 'block' : 'none' }}\n        data-priority=\"critical\"\n      >\n        <div className=\"min-h-screen flex items-center justify-center p-4\">\n          <div className=\"bg-white rounded-xl max-w-2xl w-full p-6 shadow-2xl\">\n            {/* Header with response time indicator */}\n            <div className=\"flex items-center justify-between mb-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-3 bg-red-100 rounded-full\">\n                  <Shield className=\"h-8 w-8 text-red-600\" />\n                </div>\n                <div>\n                  <h1 className=\"text-2xl font-bold text-gray-900\">Crisis Support</h1>\n                  <p className=\"text-sm text-gray-600\">Immediate help is available</p>\n                </div>\n              </div>\n              {responseTime && (\n                <div className=\"flex items-center space-x-2 text-xs text-gray-500\">\n                  <Activity className=\"h-3 w-3\" />\n                  <span>{responseTime.toFixed(0)}ms</span>\n                </div>\n              )}\n            </div>\n            \n            {/* Emergency hotlines - highest priority */}\n            <div className=\"mb-6 p-4 bg-red-50 rounded-lg border-2 border-red-200\">\n              <h2 className=\"text-lg font-semibold text-red-900 mb-3 flex items-center\">\n                <Phone className=\"h-5 w-5 mr-2\" />\n                Emergency Hotlines\n              </h2>\n              <div className=\"space-y-2\">\n                {CRISIS_RESOURCES.hotlines.map((hotline) => (\n                  <button\n                    key={hotline.number}\n                    onClick={() => callHotline(hotline.number)}\n                    className=\"w-full text-left p-3 bg-white rounded-lg hover:bg-red-100 transition-colors duration-100 flex items-center justify-between group\"\n                  >\n                    <div>\n                      <p className=\"font-medium text-gray-900\">{hotline.name}</p>\n                      <p className=\"text-sm text-gray-600\">{hotline.number}</p>\n                    </div>\n                    <Phone className=\"h-5 w-5 text-red-600 group-hover:animate-pulse\" />\n                  </button>\n                ))}\n              </div>\n            </div>\n            \n            {/* Immediate actions */}\n            <div className=\"mb-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-3 flex items-center\">\n                <Heart className=\"h-5 w-5 mr-2 text-red-500\" />\n                Immediate Actions\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                {CRISIS_RESOURCES.immediate.map((action, index) => (\n                  <div\n                    key={index}\n                    className=\"p-3 bg-blue-50 rounded-lg border border-blue-200\"\n                  >\n                    <p className=\"text-sm text-blue-900\">{action}</p>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            {/* Coping techniques */}\n            <div className=\"mb-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">\n                Quick Coping Techniques\n              </h3>\n              <div className=\"space-y-2\">\n                {CRISIS_RESOURCES.techniques.map((technique) => (\n                  <div\n                    key={technique.name}\n                    className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\"\n                  >\n                    <div>\n                      <p className=\"font-medium text-gray-900\">{technique.name}</p>\n                      <p className=\"text-xs text-gray-500\">{technique.duration}</p>\n                    </div>\n                    <div className=\"text-sm text-green-600 font-medium\">\n                      {technique.effectiveness}% effective\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            {/* Action buttons */}\n            <div className=\"flex items-center justify-between\">\n              <button\n                onClick={() => window.location.href = '/crisis/chat'}\n                className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2\"\n              >\n                <MessageCircle className=\"h-5 w-5\" />\n                <span>Start Crisis Chat</span>\n              </button>\n              \n              <button\n                onClick={handleClose}\n                className=\"px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Inline critical styles for fastest rendering */}\n      <style>{`\n        .crisis-button-optimized {\n          will-change: transform;\n          contain: layout style paint;\n        }\n        \n        .crisis-modal-optimized {\n          will-change: opacity;\n          contain: layout style paint;\n        }\n        \n        .crisis-modal-optimized.active {\n          animation: crisis-fade-in 100ms ease-out;\n        }\n        \n        @keyframes crisis-fade-in {\n          from { opacity: 0; }\n          to { opacity: 1; }\n        }\n        \n        /* Force GPU acceleration */\n        .crisis-button-optimized,\n        .crisis-modal-optimized {\n          transform: translateZ(0);\n          backface-visibility: hidden;\n        }\n      `}</style>\n    </>\n  );\n}\n\n/**\n * Preload crisis resources for instant access\n */\nfunction preloadCrisisResources() {\n  // Preload images\n  const images = ['/crisis-support.svg', '/emergency.svg'];\n  images.forEach(src => {\n    const img = new Image();\n    img.src = src;\n  });\n  \n  // Preconnect to emergency services APIs\n  const link = document.createElement('link');\n  link.rel = 'preconnect';\n  link.href = 'https://988lifeline.org';\n  document.head.appendChild(_link);\n  \n  // Cache crisis data in IndexedDB for offline access\n  if ('indexedDB' in window) {\n    cacheOfflineCrisisData();\n  }\n}\n\n/**\n * Cache crisis data for offline support\n */\nasync function cacheOfflineCrisisData() {\n  try {\n    const db = await openCrisisDatabase();\n    const tx = db.transaction(['resources'], 'readwrite');\n    const store = tx.objectStore('resources');\n    \n    await store.put({\n      id: 'crisis-resources',\n      data: CRISIS_RESOURCES,\n      timestamp: Date.now(),\n    });\n  } catch (_error) {\n    logger.error('Failed to cache crisis data:');\n  }\n}\n\n/**\n * Open IndexedDB for crisis data\n */\nfunction openCrisisDatabase(): Promise<IDBDatabase> {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open('CrisisSupport', 1);\n    \n    request.onerror = () => reject(request.error);\n    request.onsuccess = () => resolve(request.result);\n    \n    request.onupgradeneeded = (event) => {\n      const db = (event.target as unknown).result;\n      if (!db.objectStoreNames.contains('resources')) {\n        db.createObjectStore('resources', { keyPath: 'id' });\n      }\n    };\n  });\n}\n\n/**\n * Log crisis activation for analytics\n */\nfunction logCrisisActivation(userId?: string) {\n  // Send to analytics service\n  if (window.gtag) {\n    window.gtag('event', 'crisis_activation', {\n      event_category: 'Crisis Support',\n      event_label: userId || 'anonymous',\n      value: 1,\n    });\n  }\n  \n  // Store locally for follow-up\n  localStorage.setItem('last_crisis_activation', Date.now().toString());\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\performance\\PerformanceDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":53,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setRefreshInterval' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":54,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":86,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":103,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":22}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '@/utils/logger';\n/**\r\n * Performance Monitoring Dashboard\r\n * Displays real-time performance metrics for crisis response and general app performance\r\n */\r\n\r\nimport { useState, useEffect, useMemo, useCallback } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport {\r\n  Activity,\r\n  AlertTriangle,\r\n  Heart,\r\n  MemoryStick,\r\n  TrendingUp,\r\n  TrendingDown,\r\n  Wifi,\r\n  WifiOff,\r\n  Zap,\r\n  CheckCircle,\r\n  XCircle,\r\n  AlertCircle,\r\n  Smartphone\r\n} from 'lucide-react';\r\nimport { performanceMonitor, PERFORMANCE_THRESHOLDS } from '../../utils/performance/performanceMonitor';\r\nimport { useMobileFeatures } from '../../hooks/useMobileFeatures';\r\n\r\ninterface MetricSummary {\r\n  name: string;\r\n  value: number;\r\n  threshold: number;\r\n  _status: 'good' | 'warning' | 'critical';\r\n  trend: 'up' | 'down' | 'stable';\r\n}\r\n\r\ninterface PerformanceStats {\r\n  crisisResponseTime: number;\r\n  pageLoadTime: number;\r\n  memoryUsage: number;\r\n  coreWebVitals: {\r\n    LCP: number;\r\n    FID: number;\r\n    CLS: number;\r\n    FCP: number;\r\n    TTFB: number;\r\n  };\r\n  networkSpeed: string;\r\n  deviceInfo: unknown;\r\n}\r\n\r\nexport function PerformanceDashboard() {\r\n  const { deviceInfo } = useMobileFeatures();\r\n  const [stats, setStats] = useState<PerformanceStats | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [refreshInterval, setRefreshInterval] = useState(5000); // 5 seconds\r\n  const [showDetails, setShowDetails] = useState(false);\r\n  const [selectedMetric, setSelectedMetric] = useState<string | null>(null);\r\n\r\n  const refreshStats = useCallback(async () => {\r\n    try {\r\n      const summary = performanceMonitor.getPerformanceSummary();\r\n      const _metrics = performanceMonitor.getMetrics();\r\n      \r\n      // Get memory info if available\r\n      const memoryInfo = (performance as unknown).memory || {};\r\n      \r\n      // Get connection info if available\r\n      const connection = (navigator as unknown).connection || {};\r\n      \r\n      const _newStats: PerformanceStats = {\r\n        crisisResponseTime: summary.crisis_response_time?.avg || 0,\r\n        pageLoadTime: summary.navigation_timing?.avg || 0,\r\n        memoryUsage: memoryInfo.usedJSHeapSize ? \r\n          memoryInfo.usedJSHeapSize / 1048576 : 0, // Convert to MB\r\n        coreWebVitals: {\r\n          LCP: summary.LCP?.latest || 0,\r\n          FID: summary.FID?.latest || 0,\r\n          CLS: summary.CLS?.latest || 0,\r\n          FCP: summary.FCP?.latest || 0,\r\n          TTFB: summary.TTFB?.latest || 0\r\n        },\r\n        networkSpeed: connection.effectiveType || 'unknown',\r\n        deviceInfo\r\n      };\r\n      \r\n      setStats(_newStats);\r\n    } catch (_error) {\r\n      logger.error('Failed to refresh performance stats:');\r\n    }\r\n  }, [deviceInfo]);\r\n\r\n  // Initialize performance monitoring\r\n  useEffect(() => {\r\n    const initializeMonitoring = async () => {\r\n      try {\r\n        // Start monitoring\r\n        performanceMonitor.recordMetric('dashboard_load_start', Date.now());\r\n        \r\n        // Get initial stats\r\n        await refreshStats();\r\n        \r\n        performanceMonitor.recordMetric('dashboard_load_complete', Date.now());\r\n        setIsLoading(false);\r\n      } catch (_error) {\r\n        logger.error('Failed to initialize performance monitoring:');\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    initializeMonitoring();\r\n    refreshStats();\r\n  }, [refreshStats]);\r\n\r\n  // Auto-refresh performance data\r\n  useEffect(() => {\r\n    const _interval = setInterval(refreshStats, refreshInterval);\r\n    return () => clearInterval(_interval);\r\n  }, [refreshInterval, refreshStats]);\r\n\r\n  // Generate metric summaries with status and trends\r\n  const metricSummaries: MetricSummary[] = useMemo(() => {\r\n    if (!stats) return [];\r\n\r\n    return [\r\n      {\r\n        name: 'Crisis Response',\r\n        value: stats.crisisResponseTime,\r\n        threshold: PERFORMANCE_THRESHOLDS.CRISIS_PAGE_LOAD,\r\n        _status: stats.crisisResponseTime <= PERFORMANCE_THRESHOLDS.CRISIS_PAGE_LOAD ? 'good' : \r\n                stats.crisisResponseTime <= PERFORMANCE_THRESHOLDS.CRISIS_PAGE_LOAD * 1.5 ? 'warning' : 'critical',\r\n        trend: 'stable'\r\n      },\r\n      {\r\n        name: 'Page Load Time',\r\n        value: stats.pageLoadTime,\r\n        threshold: 3000,\r\n        _status: stats.pageLoadTime <= 3000 ? 'good' : \r\n                stats.pageLoadTime <= 5000 ? 'warning' : 'critical',\r\n        trend: 'stable'\r\n      },\r\n      {\r\n        name: 'Memory Usage',\r\n        value: stats.memoryUsage,\r\n        threshold: PERFORMANCE_THRESHOLDS.MAX_MEMORY_MB,\r\n        _status: stats.memoryUsage <= PERFORMANCE_THRESHOLDS.MAX_MEMORY_MB * 0.7 ? 'good' : \r\n                stats.memoryUsage <= PERFORMANCE_THRESHOLDS.MAX_MEMORY_MB ? 'warning' : 'critical',\r\n        trend: 'up'\r\n      },\r\n      {\r\n        name: 'Largest Contentful Paint',\r\n        value: stats.coreWebVitals.LCP,\r\n        threshold: PERFORMANCE_THRESHOLDS.LCP,\r\n        _status: stats.coreWebVitals.LCP <= PERFORMANCE_THRESHOLDS.LCP ? 'good' : \r\n                stats.coreWebVitals.LCP <= PERFORMANCE_THRESHOLDS.LCP * 1.5 ? 'warning' : 'critical',\r\n        trend: 'stable'\r\n      },\r\n      {\r\n        name: 'First Input Delay',\r\n        value: stats.coreWebVitals.FID,\r\n        threshold: PERFORMANCE_THRESHOLDS.FID,\r\n        _status: stats.coreWebVitals.FID <= PERFORMANCE_THRESHOLDS.FID ? 'good' : \r\n                stats.coreWebVitals.FID <= PERFORMANCE_THRESHOLDS.FID * 1.5 ? 'warning' : 'critical',\r\n        trend: 'stable'\r\n      },\r\n      {\r\n        name: 'Cumulative Layout Shift',\r\n        value: stats.coreWebVitals.CLS,\r\n        threshold: PERFORMANCE_THRESHOLDS.CLS,\r\n        _status: stats.coreWebVitals.CLS <= PERFORMANCE_THRESHOLDS.CLS ? 'good' : \r\n                stats.coreWebVitals.CLS <= PERFORMANCE_THRESHOLDS.CLS * 2 ? 'warning' : 'critical',\r\n        trend: 'stable'\r\n      }\r\n    ];\r\n  }, [stats]);\r\n\r\n  const getStatusIcon = (_status: string) => {\r\n    switch (_status) {\r\n      case 'good': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\r\n      case 'warning': return <AlertCircle className=\"h-5 w-5 text-yellow-500\" />;\r\n      case 'critical': return <XCircle className=\"h-5 w-5 text-red-500\" />;\r\n      default: return <Activity className=\"h-5 w-5 text-gray-500\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (_status: string) => {\r\n    switch (_status) {\r\n      case 'good': return 'text-green-600 bg-green-50';\r\n      case 'warning': return 'text-yellow-600 bg-yellow-50';\r\n      case 'critical': return 'text-red-600 bg-red-50';\r\n      default: return 'text-gray-600 bg-gray-50';\r\n    }\r\n  };\r\n\r\n  const formatValue = (name: string, value: number) => {\r\n    if (name === 'Memory Usage') {\r\n      return `${value.toFixed(1)} MB`;\r\n    } else if (name === 'Cumulative Layout Shift') {\r\n      return value.toFixed(3);\r\n    } else {\r\n      return `${value.toFixed(0)} ms`;\r\n    }\r\n  };\r\n\r\n  if (_isLoading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center p-8\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600\"></div>\r\n        <span className=\"ml-4 text-gray-600\">Loading performance data...</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h2 className=\"text-2xl font-bold text-gray-900\">Performance Dashboard</h2>\r\n          <p className=\"text-sm text-gray-600 mt-1\">\r\n            Real-time monitoring for optimal mental health support\r\n          </p>\r\n        </div>\r\n        <div className=\"flex items-center space-x-3\">\r\n          <button\r\n            onClick={() => setShowDetails(!showDetails)}\r\n            className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50\"\r\n          >\r\n            {showDetails ? 'Hide Details' : 'Show Details'}\r\n          </button>\r\n          <button\r\n            onClick={refreshStats}\r\n            className=\"px-4 py-2 text-sm font-medium text-white bg-primary-600 rounded-lg hover:bg-primary-700 flex items-center\"\r\n          >\r\n            <Activity className=\"h-4 w-4 mr-2\" />\r\n            Refresh\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Critical Metrics Alert */}\r\n      {metricSummaries.some(m => m._status === 'critical') && (\r\n        <motion.div\r\n          initial={{ opacity: 0, y: -10 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          className=\"bg-red-50 border border-red-200 rounded-lg p-4\"\r\n        >\r\n          <div className=\"flex items-center\">\r\n            <AlertTriangle className=\"h-5 w-5 text-red-500 mr-3\" />\r\n            <div>\r\n              <h3 className=\"font-medium text-red-800\">Performance Issues Detected</h3>\r\n              <p className=\"text-sm text-red-600 mt-1\">\r\n                Critical performance metrics are exceeding safe thresholds. Crisis features may be impacted.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </motion.div>\r\n      )}\r\n\r\n      {/* Device & Network Info */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n        <div className=\"bg-white rounded-lg border border-gray-200 p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center\">\r\n              <Smartphone className=\"h-5 w-5 text-blue-500 mr-3\" />\r\n              <span className=\"text-sm font-medium text-gray-700\">Device</span>\r\n            </div>\r\n          </div>\r\n          <div className=\"mt-3 space-y-1 text-sm text-gray-600\">\r\n            <div>Type: {deviceInfo.isMobile ? 'Mobile' : deviceInfo.isTablet ? 'Tablet' : 'Desktop'}</div>\r\n            <div>Screen: {deviceInfo.screenSize.toUpperCase()}</div>\r\n            <div>PWA: {deviceInfo.isPWA ? 'Yes' : 'No'}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"bg-white rounded-lg border border-gray-200 p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center\">\r\n              {stats?.networkSpeed === 'offline' ? \r\n                <WifiOff className=\"h-5 w-5 text-red-500 mr-3\" /> :\r\n                <Wifi className=\"h-5 w-5 text-green-500 mr-3\" />\r\n              }\r\n              <span className=\"text-sm font-medium text-gray-700\">Network</span>\r\n            </div>\r\n          </div>\r\n          <div className=\"mt-3 text-sm text-gray-600\">\r\n            <div>Speed: {stats?.networkSpeed || 'Unknown'}</div>\r\n            <div>Status: {navigator.onLine ? 'Online' : 'Offline'}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"bg-white rounded-lg border border-gray-200 p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center\">\r\n              <MemoryStick className=\"h-5 w-5 text-purple-500 mr-3\" />\r\n              <span className=\"text-sm font-medium text-gray-700\">Memory</span>\r\n            </div>\r\n          </div>\r\n          <div className=\"mt-3 text-sm text-gray-600\">\r\n            <div>Used: {formatValue('Memory Usage', stats?.memoryUsage || 0)}</div>\r\n            <div className={`mt-1 px-2 py-1 rounded text-xs ${\r\n              (stats?.memoryUsage || 0) <= PERFORMANCE_THRESHOLDS.MAX_MEMORY_MB * 0.7 ? 'bg-green-100 text-green-700' :\r\n              (stats?.memoryUsage || 0) <= PERFORMANCE_THRESHOLDS.MAX_MEMORY_MB ? 'bg-yellow-100 text-yellow-700' :\r\n              'bg-red-100 text-red-700'\r\n            }`}>\r\n              {(stats?.memoryUsage || 0) <= PERFORMANCE_THRESHOLDS.MAX_MEMORY_MB * 0.7 ? 'Optimal' :\r\n               (stats?.memoryUsage || 0) <= PERFORMANCE_THRESHOLDS.MAX_MEMORY_MB ? 'High' : 'Critical'}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Performance Metrics Grid */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n        {metricSummaries.map((metric) => (\r\n          <motion.div\r\n            key={metric.name}\r\n            whileHover={{ scale: 1.02 }}\r\n            className={`bg-white rounded-lg border-2 transition-colors cursor-pointer ${\r\n              selectedMetric === metric.name ? 'border-primary-300' : 'border-gray-200'\r\n            }`}\r\n            onClick={() => setSelectedMetric(selectedMetric === metric.name ? null : metric.name)}\r\n          >\r\n            <div className=\"p-4\">\r\n              <div className=\"flex items-center justify-between mb-3\">\r\n                <div className=\"flex items-center\">\r\n                  {getStatusIcon(metric._status)}\r\n                  <span className=\"ml-2 text-sm font-medium text-gray-700\">\r\n                    {metric.name}\r\n                  </span>\r\n                </div>\r\n                {metric.trend === 'up' ? (\r\n                  <TrendingUp className=\"h-4 w-4 text-red-500\" />\r\n                ) : metric.trend === 'down' ? (\r\n                  <TrendingDown className=\"h-4 w-4 text-green-500\" />\r\n                ) : null}\r\n              </div>\r\n\r\n              <div className=\"space-y-2\">\r\n                <div className=\"flex items-baseline justify-between\">\r\n                  <span className=\"text-2xl font-bold text-gray-900\">\r\n                    {formatValue(metric.name, metric.value)}\r\n                  </span>\r\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(metric._status)}`}>\r\n                    {metric._status.toUpperCase()}\r\n                  </span>\r\n                </div>\r\n\r\n                {/* Progress Bar */}\r\n                <div className=\"w-full bg-gray-200 rounded-full h-2\">\r\n                  <div\r\n                    className={`h-2 rounded-full transition-all duration-300 ${\r\n                      metric._status === 'good' ? 'bg-green-500' :\r\n                      metric._status === 'warning' ? 'bg-yellow-500' : 'bg-red-500'\r\n                    }`}\r\n                    style={{\r\n                      width: `${Math.min(100, (metric.value / metric.threshold) * 100)}%`\r\n                    }}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"text-xs text-gray-500\">\r\n                  Threshold: {formatValue(metric.name, metric.threshold)}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Expanded Details */}\r\n            <AnimatePresence>\r\n              {selectedMetric === metric.name && showDetails && (\r\n                <motion.div\r\n                  initial={{ height: 0, opacity: 0 }}\r\n                  animate={{ height: 'auto', opacity: 1 }}\r\n                  exit={{ height: 0, opacity: 0 }}\r\n                  className=\"border-t border-gray-200 p-4 bg-gray-50\"\r\n                >\r\n                  <div className=\"space-y-2 text-sm\">\r\n                    <div className=\"flex justify-between\">\r\n                      <span className=\"text-gray-600\">Current:</span>\r\n                      <span className=\"font-medium\">{formatValue(metric.name, metric.value)}</span>\r\n                    </div>\r\n                    <div className=\"flex justify-between\">\r\n                      <span className=\"text-gray-600\">Target:</span>\r\n                      <span className=\"font-medium\">{formatValue(metric.name, metric.threshold)}</span>\r\n                    </div>\r\n                    <div className=\"flex justify-between\">\r\n                      <span className=\"text-gray-600\">Performance:</span>\r\n                      <span className={`font-medium ${\r\n                        metric.value <= metric.threshold ? 'text-green-600' : 'text-red-600'\r\n                      }`}>\r\n                        {metric.value <= metric.threshold ? 'Within Target' : 'Exceeds Target'}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </motion.div>\r\n              )}\r\n            </AnimatePresence>\r\n          </motion.div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Crisis-Specific Metrics */}\r\n      <div className=\"bg-red-50 rounded-lg border border-red-200 p-6\">\r\n        <div className=\"flex items-center mb-4\">\r\n          <Heart className=\"h-6 w-6 text-red-500 mr-3\" />\r\n          <h3 className=\"text-lg font-semibold text-red-800\">Crisis Response Performance</h3>\r\n        </div>\r\n        \r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n          <div className=\"text-center\">\r\n            <div className=\"text-2xl font-bold text-red-700\">\r\n              {formatValue('Crisis Response', stats?.crisisResponseTime || 0)}\r\n            </div>\r\n            <div className=\"text-sm text-red-600\">Response Time</div>\r\n            <div className=\"text-xs text-red-500 mt-1\">\r\n              Target: &lt;200ms\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"text-center\">\r\n            <div className=\"text-2xl font-bold text-red-700\">\r\n              &lt;50ms\r\n            </div>\r\n            <div className=\"text-sm text-red-600\">988 Access</div>\r\n            <div className=\"text-xs text-red-500 mt-1\">\r\n              Critical Priority\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"text-center\">\r\n            <div className=\"text-2xl font-bold text-red-700\">\r\n              &lt;100ms\r\n            </div>\r\n            <div className=\"text-sm text-red-600\">Safety Plan</div>\r\n            <div className=\"text-xs text-red-500 mt-1\">\r\n              High Priority\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"text-center\">\r\n            <div className=\"text-2xl font-bold text-red-700\">\r\n              &lt;50ms\r\n            </div>\r\n            <div className=\"text-sm text-red-600\">Emergency Contacts</div>\r\n            <div className=\"text-xs text-red-500 mt-1\">\r\n              Critical Priority\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Performance Recommendations */}\r\n      <div className=\"bg-blue-50 rounded-lg border border-blue-200 p-6\">\r\n        <div className=\"flex items-center mb-4\">\r\n          <Zap className=\"h-6 w-6 text-blue-500 mr-3\" />\r\n          <h3 className=\"text-lg font-semibold text-blue-800\">Optimization Recommendations</h3>\r\n        </div>\r\n        \r\n        <div className=\"space-y-3\">\r\n          {metricSummaries\r\n            .filter(m => m._status !== 'good')\r\n            .map(metric => (\r\n              <div key={metric.name} className=\"flex items-start space-x-3\">\r\n                <div className={`w-2 h-2 rounded-full mt-2 ${\r\n                  metric._status === 'warning' ? 'bg-yellow-400' : 'bg-red-400'\r\n                }`} />\r\n                <div className=\"flex-1\">\r\n                  <div className=\"text-sm font-medium text-blue-800\">\r\n                    {metric.name} Optimization\r\n                  </div>\r\n                  <div className=\"text-sm text-blue-600 mt-1\">\r\n                    {metric.name === 'Crisis Response' && 'Consider preloading crisis resources and optimizing critical path rendering.'}\r\n                    {metric.name === 'Memory Usage' && 'Review memory leaks and implement aggressive cleanup for unused resources.'}\r\n                    {metric.name === 'Page Load Time' && 'Implement code splitting and lazy loading for non-critical components.'}\r\n                    {metric.name === 'Largest Contentful Paint' && 'Optimize images and implement resource prioritization.'}\r\n                    {metric.name === 'First Input Delay' && 'Reduce JavaScript execution time and implement input response optimization.'}\r\n                    {metric.name === 'Cumulative Layout Shift' && 'Reserve space for dynamic content and optimize font loading.'}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          \r\n          {metricSummaries.every(m => m._status === 'good') && (\r\n            <div className=\"flex items-center space-x-3\">\r\n              <CheckCircle className=\"w-5 h-5 text-green-500\" />\r\n              <span className=\"text-sm text-green-700\">\r\n                All performance _metrics are within optimal ranges!\r\n              </span>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\performance\\VirtualizedList.tsx","messages":[{"ruleId":"react/display-name","severity":2,"message":"Component definition is missing display name","line":68,"column":24,"nodeType":"CallExpression","messageId":"noDisplayName","endLine":83,"endColumn":5},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'isVariableHeight'. Either exclude it or remove the dependency array.","line":124,"column":6,"nodeType":"ArrayExpression","endLine":124,"endColumn":36,"suggestions":[{"desc":"Update the dependencies array to be: [itemHeight]","fix":{"range":[4020,4050],"text":"[itemHeight]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * High-Performance Virtualized List Component\n * Optimized for mental health community posts and large datasets\n */\n\nimport React, { useCallback, useRef, useMemo, memo, CSSProperties } from 'react';\nimport { List as List, VList as VList } from 'react-window';\nimport type { ListChildComponentProps } from 'react-window';\nimport { useInView } from 'react-intersection-observer';\nimport { performanceMonitor } from '../../utils/performance/performanceMonitor';\nimport { LoadingFallbacks } from '../../utils/performance/concurrentFeatures';\n\ninterface VirtualizedListProps<T> {\n  items: T[];\n  renderItem: (item: T, index: number, style: CSSProperties) => React.ReactNode;\n  itemHeight?: number | ((index: number) => number);\n  height?: number;\n  width?: string | number;\n  overscan?: number;\n  onEndReached?: () => void;\n  endReachedThreshold?: number;\n  loading?: boolean;\n  emptyComponent?: React.ReactNode;\n  headerComponent?: React.ReactNode;\n  footerComponent?: React.ReactNode;\n  className?: string;\n  estimatedItemSize?: number;\n  getItemKey?: (index: number, data: T[]) => string;\n}\n\n/**\n * Optimized virtualized list with mental health app specific features\n */\nexport function VirtualizedList<T>({\n  items,\n  renderItem,\n  itemHeight = 150,\n  height = 600,\n  width = '100%',\n  overscan = 3,\n  onEndReached,\n  endReachedThreshold = 0.8,\n  loading = false,\n  emptyComponent,\n  headerComponent,\n  footerComponent,\n  className = '',\n  estimatedItemSize = 150,\n  getItemKey,\n}: VirtualizedListProps<T>) {\n  const listRef = useRef<unknown>(null);\n  const [isNearEnd, setIsNearEnd] = React.useState(false);\n  const lastScrollTop = useRef(0);\n  const scrollFrameId = useRef<number>();\n\n  // Performance monitoring\n  React.useEffect(() => {\n    performanceMonitor.measureStart('virtualized-list-mount');\n    return () => {\n      performanceMonitor.measureEnd('virtualized-list-mount');\n    };\n  }, []);\n\n  // Determine if we should use fixed or variable size list\n  const isVariableHeight = typeof itemHeight === 'function';\n\n  // Memoized item renderer\n  const ItemRenderer = memo(({ index, style, data }: ListChildComponentProps<T[]>) => {\n    const item = data[index];\n    \n    // Add intersection observer for lazy loading images\n    const { ref, inView } = useInView({\n      threshold: 0,\n      triggerOnce: true,\n      rootMargin: '50px',\n    });\n\n    return (\n      <div ref={ref} style={style} className=\"px-4\">\n        {inView && item ? renderItem(item, index, style) : <LoadingFallbacks.Skeleton lines={3} />}\n      </div>\n    );\n  });\n\n  // Handle scroll with throttling for performance\n  const handleScroll = useCallback(({ scrollOffset, _scrollDirection }: unknown) => {\n    // Cancel previous frame\n    if (scrollFrameId.current) {\n      cancelAnimationFrame(scrollFrameId.current);\n    }\n\n    scrollFrameId.current = requestAnimationFrame(() => {\n      const scrollTop = scrollOffset;\n      const scrollHeight = listRef.current?.props?.height || height;\n      const totalHeight = isVariableHeight\n        ? items.length * estimatedItemSize\n        : items.length * (itemHeight as number);\n\n      const scrollPercentage = (scrollTop + scrollHeight) / totalHeight;\n\n      // Check if near end\n      if (scrollPercentage > endReachedThreshold && !isNearEnd && onEndReached) {\n        setIsNearEnd(true);\n        performanceMonitor.measureStart('infinite-scroll-load');\n        onEndReached();\n        \n        // Reset after delay to allow new loads\n        setTimeout(() => {\n          setIsNearEnd(false);\n          performanceMonitor.measureEnd('infinite-scroll-load');\n        }, 1000);\n      }\n\n      lastScrollTop.current = scrollTop;\n    });\n  }, [items.length, isNearEnd, onEndReached, endReachedThreshold, height, itemHeight, isVariableHeight, estimatedItemSize]);\n\n  // Get item size for variable height list\n  const getItemSize = useMemo(() => {\n    if (_isVariableHeight) {\n      return itemHeight as (index: number) => number;\n    }\n    return (_index: number) => itemHeight as number;\n  }, [itemHeight, isVariableHeight]);\n\n  // Custom item key for better performance\n  const itemKey = useCallback((index: number, data: T[]) => {\n    if (_getItemKey) {\n      return getItemKey(index, data);\n    }\n    // Use a stable key based on item properties if possible\n    const item = data[index] as unknown;\n    return item?.id || item?.key || `item-${index}`;\n  }, [getItemKey]);\n\n  // Empty state\n  if (!loading && items.length === 0 && emptyComponent) {\n    return <>{emptyComponent}</>;\n  }\n\n  const ListComponent = isVariableHeight ? VList : List;\n\n  return (\n    <div className={`virtualized-list-container ${className}`}>\n      {headerComponent}\n      \n      {items.length > 0 && (\n        <ListComponent\n          ref={listRef}\n          height={height}\n          width={width}\n          itemCount={items.length}\n          itemSize={isVariableHeight ? getItemSize : (typeof itemHeight === 'number' ? () => itemHeight : itemHeight)}\n          overscanCount={overscan}\n          onScroll={handleScroll}\n          itemData={items}\n          itemKey={itemKey}\n          estimatedItemSize={estimatedItemSize}\n          className=\"scrollbar-thin scrollbar-thumb-gray-400 scrollbar-track-gray-100\"\n        >\n          {ItemRenderer}\n        </ListComponent>\n      )}\n\n      {loading && (\n        <div className=\"py-4\">\n          <LoadingFallbacks.List items={3} />\n        </div>\n      )}\n\n      {footerComponent}\n    </div>\n  );\n}\n\n/**\n * Optimized post list item component\n */\nexport const VirtualizedPostItem = memo(({ \n  post, \n  style,\n  onLike,\n  onComment,\n  onShare,\n  onEdit,\n  onDelete,\n  onReport,\n  isOwner,\n}: unknown) => {\n  // Defer non-critical updates\n  const [showActions, setShowActions] = React.useState(false);\n  \n  React.useEffect(() => {\n    // Lazy load action buttons\n    const _timer = setTimeout(() => setShowActions(true), 100);\n    return () => clearTimeout(_timer);\n  }, []);\n\n  return (\n    <div style={style} className=\"virtualized-post-item\">\n      <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4 hover:shadow-md transition-shadow\">\n        {/* Post header */}\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"h-8 w-8 rounded-full bg-gradient-to-br from-blue-500 to-purple-500 flex items-center justify-center text-white text-sm font-semibold\">\n              {post.username?.[0]?.toUpperCase() || '?'}\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-gray-900\">{post.username}</p>\n              <p className=\"text-xs text-gray-500\">{post.timeAgo}</p>\n            </div>\n          </div>\n          \n          {showActions && (\n            <div className=\"flex items-center space-x-1\">\n              {isOwner ? (\n                <>\n                  <button onClick={() => onEdit(_post)} className=\"p-1 text-gray-400 hover:text-blue-600\">\n                    <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\n                    </svg>\n                  </button>\n                  <button onClick={() => onDelete(post.id)} className=\"p-1 text-gray-400 hover:text-red-600\">\n                    <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n                    </svg>\n                  </button>\n                </>\n              ) : (\n                <button onClick={() => onReport(post.id)} className=\"p-1 text-gray-400 hover:text-orange-600\">\n                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 21v-4m0 0V5a2 2 0 012-2h6.5l1 1H21l-3 6 3 6h-8.5l-1-1H5a2 2 0 00-2 2zm9-13.5V9\" />\n                  </svg>\n                </button>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Post content */}\n        <div className=\"mb-3\">\n          <h4 className=\"text-base font-semibold text-gray-900 mb-1\">{post.title}</h4>\n          <p className=\"text-sm text-gray-700 line-clamp-3\">{post.content}</p>\n        </div>\n\n        {/* Post stats */}\n        <div className=\"flex items-center justify-between pt-3 border-t border-gray-100\">\n          <div className=\"flex items-center space-x-4\">\n            <button \n              onClick={() => onLike(post.id)}\n              className={`flex items-center space-x-1 text-sm ${post.isLiked ? 'text-red-600' : 'text-gray-500 hover:text-red-600'}`}\n            >\n              <svg className={`w-4 h-4 ${post.isLiked ? 'fill-current' : ''}`} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\" />\n              </svg>\n              <span>{post.likes}</span>\n            </button>\n            \n            <button \n              onClick={() => onComment(post.id)}\n              className=\"flex items-center space-x-1 text-sm text-gray-500 hover:text-blue-600\"\n            >\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\" />\n              </svg>\n              <span>{post.comments}</span>\n            </button>\n            \n            <button \n              onClick={() => onShare(post.id)}\n              className=\"flex items-center space-x-1 text-sm text-gray-500 hover:text-green-600\"\n            >\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m9.032 4.026a3 3 0 10-5.464 0m5.464 0a3 3 0 10-5.464 0M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n              <span>{post.shares}</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nVirtualizedPostItem.displayName = 'VirtualizedPostItem';\n\n/**\n * Auto-sizing text area with virtualization support\n */\nexport const VirtualizedTextArea = memo(({ \n  value, \n  onChange, \n  placeholder,\n  maxLength = 5000,\n  className = '',\n}: unknown) => {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  \n  const adjustHeight = useCallback(() => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto';\n      textarea.style.height = `${textarea.scrollHeight}px`;\n    }\n  }, []);\n\n  React.useEffect(() => {\n    adjustHeight();\n  }, [value, adjustHeight]);\n\n  return (\n    <div className=\"relative\">\n      <textarea\n        ref={textareaRef}\n        value={value}\n        onChange={(e) => {\n          onChange(e.target.value);\n          adjustHeight();\n        }}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        className={`w-full resize-none overflow-hidden ${className}`}\n        rows={1}\n      />\n      <span className=\"absolute bottom-2 right-2 text-xs text-gray-400\">\n        {value.length}/{maxLength}\n      </span>\n    </div>\n  );\n});\n\nVirtualizedTextArea.displayName = 'VirtualizedTextArea';","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\professional\\AppointmentBooking.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":161,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4313,4316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4313,4316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":192,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":192,"endColumn":20},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":601,"column":72,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[25430,25452],"text":"I&apos;ll pay out-of-pocket"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[25430,25452],"text":"I&lsquo;ll pay out-of-pocket"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[25430,25452],"text":"I&#39;ll pay out-of-pocket"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[25430,25452],"text":"I&rsquo;ll pay out-of-pocket"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":684,"column":32,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[29638,29690],"text":"You&apos;ll receive a confirmation email within 5 minutes"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[29638,29690],"text":"You&lsquo;ll receive a confirmation email within 5 minutes"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[29638,29690],"text":"You&#39;ll receive a confirmation email within 5 minutes"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[29638,29690],"text":"You&rsquo;ll receive a confirmation email within 5 minutes"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '@/utils/logger';\nimport React, { useState, useEffect } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport {\r\n  Calendar,\r\n  _Clock,\r\n  CreditCard,\r\n  User,\r\n  _Phone,\r\n  _Mail,\r\n  Shield,\r\n  CheckCircle,\r\n  ArrowLeft,\r\n  ArrowRight,\r\n  AlertTriangle,\r\n  _FileText,\r\n  Video,\r\n  MapPin,\r\n  _Users\r\n} from 'lucide-react';\r\nimport { therapistService } from '../../services/professional/TherapistService';\r\n\r\ninterface AppointmentBookingProps {\r\n  therapistId: string;\r\n  onClose: () => void;\r\n  onSuccess: (appointmentId: string) => void;\r\n}\r\n\r\ninterface TimeSlot {\r\n  _time: string;\r\n  available: boolean;\r\n  type: 'morning' | 'afternoon' | 'evening';\r\n}\r\n\r\ninterface BookingStep {\r\n  id: number;\r\n  title: string;\r\n  completed: boolean;\r\n}\r\n\r\nconst BOOKING_STEPS: BookingStep[] = [\r\n  { id: 1, title: 'Select Date & Time', completed: false },\r\n  { id: 2, title: 'Session Details', completed: false },\r\n  { id: 3, title: 'Personal Information', completed: false },\r\n  { id: 4, title: 'Insurance & Payment', completed: false },\r\n  { id: 5, title: 'Confirmation', completed: false }\r\n];\r\n\r\nconst generateTimeSlots = (_date: Date): TimeSlot[] => {\r\n  const slots: TimeSlot[] = [];\r\n  const startHour = 9;\r\n  const endHour = 17;\r\n  \r\n  for (let hour = startHour; hour < endHour; hour++) {\r\n    for (let minute = 0; minute < 60; minute += 50) {\r\n      const _time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\r\n      const type = hour < 12 ? 'morning' : hour < 17 ? 'afternoon' : 'evening';\r\n      const available = Math.random() > 0.3; // 70% availability rate\r\n      \r\n      slots.push({ _time, available, type });\r\n    }\r\n  }\r\n  \r\n  return slots;\r\n};\r\n\r\nconst getNextSevenDays = () => {\r\n  const days = [];\r\n  const today = new Date();\r\n  \r\n  for (let i = 1; i <= 7; i++) {\r\n    const date = new Date(today);\r\n    date.setDate(today.getDate() + i);\r\n    days.push(date);\r\n  }\r\n  \r\n  return days;\r\n};\r\n\r\nexport function AppointmentBooking({ therapistId, onClose, onSuccess }: AppointmentBookingProps) {\r\n  const [currentStep, setCurrentStep] = useState(1);\r\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\r\n  const [selectedTime, setSelectedTime] = useState<string>('');\r\n  const [availableDays, setAvailableDays] = useState<Date[]>([]);\r\n  const [timeSlots, setTimeSlots] = useState<TimeSlot[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [therapist, setTherapist] = useState<unknown>(null);\r\n  \r\n  // Form data\r\n  const [formData, setFormData] = useState({\r\n    sessionType: 'initial',\r\n    format: 'video',\r\n    reason: '',\r\n    concerns: '',\r\n    // Personal info\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    phone: '',\r\n    dateOfBirth: '',\r\n    emergencyContact: {\r\n      name: '',\r\n      phone: ''\r\n    },\r\n    // Insurance\r\n    hasInsurance: true,\r\n    insuranceProvider: '',\r\n    memberId: '',\r\n    groupNumber: '',\r\n    paymentMethod: 'insurance'\r\n  });\r\n\r\n  useEffect(() => {\r\n    setAvailableDays(getNextSevenDays());\r\n    // Load therapist data\r\n    const loadTherapist = async () => {\r\n      // In production, fetch from API\r\n      setTherapist({\r\n        id: therapistId,\r\n        name: 'Dr. Sarah Chen, PhD',\r\n        sessionRate: 180,\r\n        insuranceAccepted: ['Blue Cross Blue Shield', 'Aetna', 'United Healthcare']\r\n      });\r\n    };\r\n    loadTherapist();\r\n  }, [therapistId]);\r\n\r\n  useEffect(() => {\r\n    if (selectedDate) {\r\n      setTimeSlots(generateTimeSlots(selectedDate));\r\n    }\r\n  }, [selectedDate]);\r\n\r\n  const handleDateSelect = (date: Date) => {\r\n    setSelectedDate(date);\r\n    setSelectedTime('');\r\n  };\r\n\r\n  const handleTimeSelect = (_time: string) => {\r\n    setSelectedTime(_time);\r\n  };\r\n\r\n  const nextStep = () => {\r\n    if (currentStep < BOOKING_STEPS.length) {\r\n      setCurrentStep(currentStep + 1);\r\n    }\r\n  };\r\n\r\n  const prevStep = () => {\r\n    if (currentStep > 1) {\r\n      setCurrentStep(currentStep - 1);\r\n    }\r\n  };\r\n\r\n  const updateFormData = (field: string, value: unknown) => {\r\n    if (field.includes('.')) {\r\n      const [parent, child] = field.split('.');\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        [parent as keyof typeof formData]: {\r\n          ...(prev[parent as keyof typeof prev] as Record<string, any> || {}),\r\n          [child as string]: value\r\n        }\r\n      }));\r\n    } else {\r\n      setFormData(prev => ({ ...prev, [field as keyof typeof formData]: value }));\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // In production, submit to booking API\r\n      const appointmentId = await therapistService.bookAppointment({\r\n        therapistId,\r\n        patientId: 'user-1',\r\n        date: selectedDate!,\r\n        _time: selectedTime,\r\n        duration: 50,\r\n        type: formData.sessionType as unknown,\r\n        format: formData.format as unknown,\r\n        reason: formData.reason,\r\n        insurance: formData.hasInsurance ? {\r\n          provider: formData.insuranceProvider,\r\n          memberId: formData.memberId,\r\n          groupNumber: formData.groupNumber\r\n        } : undefined,\r\n        paymentMethod: formData.paymentMethod as unknown\r\n      });\r\n      \r\n      onSuccess(appointmentId.id);\r\n    } catch (_error) {\r\n      logger.error('Booking failed:');\r\n      // Handle undefined\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const canProceedToNext = () => {\r\n    switch (_currentStep) {\r\n      case 1:\r\n        return selectedDate && selectedTime;\r\n      case 2:\r\n        return formData.sessionType && formData.format;\r\n      case 3:\r\n        return formData.firstName && formData.lastName && formData.email && formData.phone;\r\n      case 4:\r\n        return formData.hasInsurance ? \r\n          (formData.insuranceProvider && formData.memberId) : \r\n          formData.paymentMethod;\r\n      default:\r\n        return true;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\r\n      <motion.div\r\n        initial={{ opacity: 0, scale: 0.95 }}\r\n        animate={{ opacity: 1, scale: 1 }}\r\n        exit={{ opacity: 0, scale: 0.95 }}\r\n        className=\"bg-white rounded-2xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden\"\r\n      >\r\n        {/* Header */}\r\n        <div className=\"bg-gradient-to-r from-blue-600 to-green-600 text-white p-6\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <h2 className=\"text-2xl font-bold\">Book Appointment</h2>\r\n              <p className=\"text-blue-100\">with {therapist?.name || 'Professional Therapist'}</p>\r\n            </div>\r\n            <button\r\n              onClick={onClose}\r\n              className=\"p-2 hover:bg-white/20 rounded-full transition-colors\"\r\n            >\r\n              ×\r\n            </button>\r\n          </div>\r\n          \r\n          {/* Progress Steps */}\r\n          <div className=\"mt-6 flex items-center justify-between\">\r\n            {BOOKING_STEPS.map((step, index) => (\r\n              <div key={step.id} className=\"flex items-center\">\r\n                <div className={`flex items-center justify-center w-8 h-8 rounded-full border-2 ${\r\n                  currentStep >= step.id \r\n                    ? 'bg-white text-blue-600 border-white' \r\n                    : 'border-blue-300 text-blue-200'\r\n                }`}>\r\n                  {currentStep > step.id ? (\r\n                    <CheckCircle className=\"w-5 h-5\" />\r\n                  ) : (\r\n                    <span className=\"text-sm font-medium\">{step.id}</span>\r\n                  )}\r\n                </div>\r\n                {index < BOOKING_STEPS.length - 1 && (\r\n                  <div className={`w-12 h-0.5 mx-2 ${\r\n                    currentStep > step.id ? 'bg-white' : 'bg-blue-300'\r\n                  }`} />\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Content */}\r\n        <div className=\"p-6 overflow-y-auto max-h-[calc(90vh-200px)]\">\r\n          <AnimatePresence mode=\"wait\">\r\n            {/* Step 1: Date & Time Selection */}\r\n            {currentStep === 1 && (\r\n              <motion.div\r\n                key=\"step1\"\r\n                initial={{ opacity: 0, x: 20 }}\r\n                animate={{ opacity: 1, x: 0 }}\r\n                exit={{ opacity: 0, x: -20 }}\r\n              >\r\n                <h3 className=\"text-xl font-semibold mb-6\">Select Date & Time</h3>\r\n                \r\n                {/* Date Selection */}\r\n                <div className=\"mb-8\">\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-3\" htmlFor=\"has-insurance\">Available Dates</label>\r\n                  <div className=\"grid grid-cols-7 gap-2\">\r\n                    {availableDays.map((date, index) => {\r\n                      const isSelected = selectedDate?.toDateString() === date.toDateString();\r\n                      const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });\r\n                      const dayNumber = date.getDate();\r\n                      \r\n                      return (\r\n                        <button\r\n                          key={index}\r\n                          onClick={() => handleDateSelect(date)}\r\n                          className={`p-3 rounded-lg text-center transition-colors ${\r\n                            isSelected\r\n                              ? 'bg-blue-600 text-white'\r\n                              : 'bg-gray-100 hover:bg-gray-200 text-gray-700'\r\n                          }`}\r\n                        >\r\n                          <div className=\"text-xs font-medium\">{dayName}</div>\r\n                          <div className=\"text-lg font-bold\">{dayNumber}</div>\r\n                        </button>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Time Selection */}\r\n                {selectedDate && (\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-3\" htmlFor=\"has-insurance\">\r\n                      Available Times for {selectedDate.toLocaleDateString()}\r\n                    </label>\r\n                    <div className=\"grid grid-cols-3 gap-4\">\r\n                      {['morning', 'afternoon', 'evening'].map(period => {\r\n                        const periodSlots = timeSlots.filter(slot => slot.type === period && slot.available);\r\n                        if (periodSlots.length === 0) return null;\r\n                        \r\n                        return (\r\n                          <div key={period} className=\"space-y-2\">\r\n                            <h4 className=\"text-sm font-medium text-gray-600 capitalize\">{period}</h4>\r\n                            <div className=\"space-y-2\">\r\n                              {periodSlots.map(slot => (\r\n                                <button\r\n                                  key={slot._time}\r\n                                  onClick={() => handleTimeSelect(slot._time)}\r\n                                  className={`w-full p-2 rounded-md text-sm transition-colors ${\r\n                                    selectedTime === slot._time\r\n                                      ? 'bg-blue-600 text-white'\r\n                                      : 'bg-gray-100 hover:bg-gray-200 text-gray-700'\r\n                                  }`}\r\n                                >\r\n                                  {slot._time}\r\n                                </button>\r\n                              ))}\r\n                            </div>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </motion.div>\r\n            )}\r\n\r\n            {/* Step 2: Session Details */}\r\n            {currentStep === 2 && (\r\n              <motion.div\r\n                key=\"step2\"\r\n                initial={{ opacity: 0, x: 20 }}\r\n                animate={{ opacity: 1, x: 0 }}\r\n                exit={{ opacity: 0, x: -20 }}\r\n                className=\"space-y-6\"\r\n              >\r\n                <h3 className=\"text-xl font-semibold\">Session Details</h3>\r\n                \r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-3\" htmlFor=\"has-insurance\">Session Type</label>\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    {[\r\n                      { value: 'initial', label: 'Initial Consultation', description: 'First _time meeting' },\r\n                      { value: 'followup', label: 'Follow-up Session', description: 'Continuing treatment' }\r\n                    ].map(option => (\r\n                      <button\r\n                        key={option.value}\r\n                        onClick={() => updateFormData('sessionType', option.value)}\r\n                        className={`p-4 rounded-lg border-2 text-left transition-colors ${\r\n                          formData.sessionType === option.value\r\n                            ? 'border-blue-500 bg-blue-50'\r\n                            : 'border-gray-200 hover:border-gray-300'\r\n                        }`}\r\n                      >\r\n                        <div className=\"font-medium\">{option.label}</div>\r\n                        <div className=\"text-sm text-gray-600\">{option.description}</div>\r\n                      </button>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-3\" htmlFor=\"has-insurance\">Session Format</label>\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    {[\r\n                      { value: 'video', label: 'Video Call', icon: Video, description: 'Secure video session' },\r\n                      { value: 'in-person', label: 'In-Person', icon: MapPin, description: 'Office visit' }\r\n                    ].map(option => {\r\n                      const Icon = option.icon;\r\n                      return (\r\n                        <button\r\n                          key={option.value}\r\n                          onClick={() => updateFormData('format', option.value)}\r\n                          className={`p-4 rounded-lg border-2 text-left transition-colors ${\r\n                            formData.format === option.value\r\n                              ? 'border-blue-500 bg-blue-50'\r\n                              : 'border-gray-200 hover:border-gray-300'\r\n                          }`}\r\n                        >\r\n                          <div className=\"flex items-center gap-2 mb-2\">\r\n                            <Icon className=\"w-5 h-5\" />\r\n                            <span className=\"font-medium\">{option.label}</span>\r\n                          </div>\r\n                          <div className=\"text-sm text-gray-600\">{option.description}</div>\r\n                        </button>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\" htmlFor=\"has-insurance\">Reason for Visit (_Optional)</label>\r\n                  <textarea\r\n                    value={formData.reason}\r\n                    onChange={(e) => updateFormData('reason', e.target.value)}\r\n                    rows={3}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                    placeholder=\"Briefly describe what you'd like to discuss...\"\r\n                  />\r\n                </div>\r\n              </motion.div>\r\n            )}\r\n\r\n            {/* Step 3: Personal Information */}\r\n            {currentStep === 3 && (\r\n              <motion.div\r\n                key=\"step3\"\r\n                initial={{ opacity: 0, x: 20 }}\r\n                animate={{ opacity: 1, x: 0 }}\r\n                exit={{ opacity: 0, x: -20 }}\r\n                className=\"space-y-6\"\r\n              >\r\n                <h3 className=\"text-xl font-semibold\">Personal Information</h3>\r\n                \r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\" htmlFor=\"has-insurance\">First Name *</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      value={formData.firstName}\r\n                      onChange={(e) => updateFormData('firstName', e.target.value)}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                      required\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\" htmlFor=\"has-insurance\">Last Name *</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      value={formData.lastName}\r\n                      onChange={(e) => updateFormData('lastName', e.target.value)}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                      required\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\" htmlFor=\"has-insurance\">Email *</label>\r\n                    <input\r\n                      type=\"email\"\r\n                      value={formData.email}\r\n                      onChange={(e) => updateFormData('email', e.target.value)}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                      required\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\" htmlFor=\"has-insurance\">Phone *</label>\r\n                    <input\r\n                      type=\"tel\"\r\n                      value={formData.phone}\r\n                      onChange={(e) => updateFormData('phone', e.target.value)}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                      required\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\" htmlFor=\"has-insurance\">Date of Birth</label>\r\n                  <input\r\n                    type=\"date\"\r\n                    value={formData.dateOfBirth}\r\n                    onChange={(e) => updateFormData('dateOfBirth', e.target.value)}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"border-t pt-4\">\r\n                  <h4 className=\"font-medium text-gray-900 mb-4\">Emergency Contact (_Optional)</h4>\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\" htmlFor=\"has-insurance\">Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        value={formData.emergencyContact.name}\r\n                        onChange={(e) => updateFormData('emergencyContact.name', e.target.value)}\r\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\" htmlFor=\"has-insurance\">Phone</label>\r\n                      <input\r\n                        type=\"tel\"\r\n                        value={formData.emergencyContact.phone}\r\n                        onChange={(e) => updateFormData('emergencyContact.phone', e.target.value)}\r\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </motion.div>\r\n            )}\r\n\r\n            {/* Step 4: Insurance & Payment */}\r\n            {currentStep === 4 && (\r\n              <motion.div\r\n                key=\"step4\"\r\n                initial={{ opacity: 0, x: 20 }}\r\n                animate={{ opacity: 1, x: 0 }}\r\n                exit={{ opacity: 0, x: -20 }}\r\n                className=\"space-y-6\"\r\n              >\r\n                <h3 className=\"text-xl font-semibold\">Insurance & Payment</h3>\r\n                \r\n                <div className=\"bg-blue-50 p-4 rounded-lg\">\r\n                  <div className=\"flex items-center gap-2 mb-2\">\r\n                    <CreditCard className=\"w-5 h-5 text-blue-600\" />\r\n                    <span className=\"font-medium text-blue-900\">Session Rate: ${therapist?.sessionRate || 180}</span>\r\n                  </div>\r\n                  <p className=\"text-sm text-blue-700\">Standard 50-minute therapy session</p>\r\n                </div>\r\n\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <input\r\n                      type=\"radio\"\r\n                      id=\"has-insurance\"\r\n                      name=\"insurance-option\"\r\n                      checked={formData.hasInsurance}\r\n                      onChange={(e) => updateFormData('hasInsurance', e.target.checked)}\r\n                      className=\"w-4 h-4 text-blue-600 focus:ring-blue-500\"\r\n                    />\r\n                    <label htmlFor=\"has-insurance\" className=\"font-medium\">I have insurance</label>\r\n                  </div>\r\n\r\n                  {formData.hasInsurance && (\r\n                    <div className=\"ml-7 space-y-4 p-4 bg-gray-50 rounded-lg\">\r\n                      <div>\r\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\" htmlFor=\"has-insurance\">Insurance Provider *</label>\r\n                        <select\r\n                          value={formData.insuranceProvider}\r\n                          onChange={(e) => updateFormData('insuranceProvider', e.target.value)}\r\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                          required\r\n                        >\r\n                          <option value=\"\">Select provider...</option>\r\n                          {therapist?.insuranceAccepted?.map((provider: string) => (\r\n                            <option key={provider} value={provider}>{provider}</option>\r\n                          ))}\r\n                        </select>\r\n                      </div>\r\n\r\n                      <div className=\"grid grid-cols-2 gap-4\">\r\n                        <div>\r\n                          <label className=\"block text-sm font-medium text-gray-700 mb-2\" htmlFor=\"has-insurance\">Member ID *</label>\r\n                          <input\r\n                            type=\"text\"\r\n                            value={formData.memberId}\r\n                            onChange={(e) => updateFormData('memberId', e.target.value)}\r\n                            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                            required\r\n                          />\r\n                        </div>\r\n                        <div>\r\n                          <label className=\"block text-sm font-medium text-gray-700 mb-2\" htmlFor=\"has-insurance\">Group Number</label>\r\n                          <input\r\n                            type=\"text\"\r\n                            value={formData.groupNumber}\r\n                            onChange={(e) => updateFormData('groupNumber', e.target.value)}\r\n                            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className=\"bg-green-50 p-3 rounded-md\">\r\n                        <p className=\"text-sm text-green-700\">\r\n                          <CheckCircle className=\"w-4 h-4 inline mr-1\" />\r\n                          Your insurance is accepted. Typical copay: $25-50\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <input\r\n                      type=\"radio\"\r\n                      id=\"self-pay\"\r\n                      name=\"insurance-option\"\r\n                      checked={!formData.hasInsurance}\r\n                      onChange={(e) => updateFormData('hasInsurance', !e.target.checked)}\r\n                      className=\"w-4 h-4 text-blue-600 focus:ring-blue-500\"\r\n                    />\r\n                    <label htmlFor=\"self-pay\" className=\"font-medium\">I'll pay out-of-pocket</label>\r\n                  </div>\r\n\r\n                  {!formData.hasInsurance && (\r\n                    <div className=\"ml-7 space-y-4 p-4 bg-gray-50 rounded-lg\">\r\n                      <div className=\"space-y-2\">\r\n                        {[\r\n                          { value: 'full-rate', label: `Full Rate - $${therapist?.sessionRate || 180}` },\r\n                          { value: 'sliding-scale', label: 'Sliding Scale - Based on income' }\r\n                        ].map(option => (\r\n                          <label key={option.value} className=\"flex items-center gap-3\" htmlFor=\"has-insurance\">\r\n                            <input\r\n                              type=\"radio\"\r\n                              name=\"payment-method\"\r\n                              value={option.value}\r\n                              checked={formData.paymentMethod === option.value}\r\n                              onChange={(e) => updateFormData('paymentMethod', e.target.value)}\r\n                              className=\"w-4 h-4 text-blue-600 focus:ring-blue-500\"\r\n                            />\r\n                            <span>{option.label}</span>\r\n                          </label>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </motion.div>\r\n            )}\r\n\r\n            {/* Step 5: Confirmation */}\r\n            {currentStep === 5 && (\r\n              <motion.div\r\n                key=\"step5\"\r\n                initial={{ opacity: 0, x: 20 }}\r\n                animate={{ opacity: 1, x: 0 }}\r\n                exit={{ opacity: 0, x: -20 }}\r\n                className=\"space-y-6\"\r\n              >\r\n                <h3 className=\"text-xl font-semibold\">Confirm Your Appointment</h3>\r\n                \r\n                <div className=\"bg-gradient-to-r from-blue-50 to-green-50 p-6 rounded-lg\">\r\n                  <div className=\"space-y-4\">\r\n                    <div className=\"flex items-center gap-3\">\r\n                      <Calendar className=\"w-5 h-5 text-blue-600\" />\r\n                      <span className=\"font-medium\">\r\n                        {selectedDate?.toLocaleDateString('en-US', { \r\n                          weekday: 'long', \r\n                          year: 'numeric', \r\n                          month: 'long', \r\n                          day: 'numeric' \r\n                        })} at {selectedTime}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-3\">\r\n                      <User className=\"w-5 h-5 text-blue-600\" />\r\n                      <span>{therapist?.name}</span>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-3\">\r\n                      {formData.format === 'video' ? (\r\n                        <Video className=\"w-5 h-5 text-blue-600\" />\r\n                      ) : (\r\n                        <MapPin className=\"w-5 h-5 text-blue-600\" />\r\n                      )}\r\n                      <span>{formData.format === 'video' ? 'Video Session' : 'In-Person Session'}</span>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-3\">\r\n                      <CreditCard className=\"w-5 h-5 text-blue-600\" />\r\n                      <span>\r\n                        {formData.hasInsurance \r\n                          ? `Insurance: ${formData.insuranceProvider}` \r\n                          : `Payment: ${formData.paymentMethod === 'sliding-scale' ? 'Sliding Scale' : `$${therapist?.sessionRate}`}`\r\n                        }\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"bg-yellow-50 border border-yellow-200 p-4 rounded-lg\">\r\n                  <div className=\"flex items-start gap-3\">\r\n                    <AlertTriangle className=\"w-5 h-5 text-yellow-600 flex-shrink-0 mt-0.5\" />\r\n                    <div className=\"space-y-2\">\r\n                      <p className=\"font-medium text-yellow-800\">Please Note:</p>\r\n                      <ul className=\"text-sm text-yellow-700 space-y-1 ml-4 list-disc\">\r\n                        <li>You'll receive a confirmation email within 5 minutes</li>\r\n                        <li>Please arrive 10 minutes early (or join video call early)</li>\r\n                        <li>Cancellations must be made 24 hours in advance</li>\r\n                        <li>A secure video link will be sent before your session</li>\r\n                      </ul>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex items-center gap-2 p-4 bg-green-50 rounded-lg\">\r\n                  <Shield className=\"w-5 h-5 text-green-600\" />\r\n                  <span className=\"text-sm text-green-700\">\r\n                    Your information is encrypted and HIPAA-compliant\r\n                  </span>\r\n                </div>\r\n              </motion.div>\r\n            )}\r\n          </AnimatePresence>\r\n        </div>\r\n\r\n        {/* Footer */}\r\n        <div className=\"border-t bg-gray-50 px-6 py-4 flex items-center justify-between\">\r\n          <button\r\n            onClick={prevStep}\r\n            disabled={currentStep === 1}\r\n            className=\"flex items-center gap-2 px-4 py-2 text-gray-600 hover:text-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n          >\r\n            <ArrowLeft className=\"w-4 h-4\" />\r\n            Previous\r\n          </button>\r\n\r\n          <div className=\"flex items-center gap-3\">\r\n            {currentStep < BOOKING_STEPS.length ? (\r\n              <button\r\n                onClick={nextStep}\r\n                disabled={!canProceedToNext()}\r\n                className=\"flex items-center gap-2 bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n              >\r\n                Next\r\n                <ArrowRight className=\"w-4 h-4\" />\r\n              </button>\r\n            ) : (\r\n              <button\r\n                onClick={handleSubmit}\r\n                disabled={loading || !canProceedToNext()}\r\n                className=\"flex items-center gap-2 bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n              >\r\n                {loading ? (\r\n                  <>\r\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\r\n                    Booking...\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <CheckCircle className=\"w-4 h-4\" />\r\n                    Confirm Booking\r\n                  </>\r\n                )}\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </motion.div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\professional\\CareTeamCommunication.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":565,"column":96,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[24555,24760],"text":"\r\n                      Patient showed significant improvement in anxiety levels during yesterday&apos;s session. \r\n                      Considering adjusting medication dosage. Thoughts?\r\n                    "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[24555,24760],"text":"\r\n                      Patient showed significant improvement in anxiety levels during yesterday&lsquo;s session. \r\n                      Considering adjusting medication dosage. Thoughts?\r\n                    "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[24555,24760],"text":"\r\n                      Patient showed significant improvement in anxiety levels during yesterday&#39;s session. \r\n                      Considering adjusting medication dosage. Thoughts?\r\n                    "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[24555,24760],"text":"\r\n                      Patient showed significant improvement in anxiety levels during yesterday&rsquo;s session. \r\n                      Considering adjusting medication dosage. Thoughts?\r\n                    "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":671,"column":19,"nodeType":"JSXOpeningElement","endLine":671,"endColumn":83},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":682,"column":19,"nodeType":"JSXOpeningElement","endLine":682,"endColumn":83},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must have accessible text.","line":687,"column":23,"nodeType":"JSXOpeningElement","endLine":687,"endColumn":105},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":704,"column":19,"nodeType":"JSXOpeningElement","endLine":704,"endColumn":83},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":756,"column":21,"nodeType":"JSXOpeningElement","endLine":756,"endColumn":85},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":765,"column":21,"nodeType":"JSXOpeningElement","endLine":765,"endColumn":85},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":776,"column":19,"nodeType":"JSXOpeningElement","endLine":776,"endColumn":83},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":794,"column":21,"nodeType":"JSXOpeningElement","endLine":794,"endColumn":85},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":803,"column":21,"nodeType":"JSXOpeningElement","endLine":803,"endColumn":85},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":814,"column":19,"nodeType":"JSXOpeningElement","endLine":814,"endColumn":83},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":824,"column":19,"nodeType":"JSXOpeningElement","endLine":824,"endColumn":83}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useRef } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { \r\n  MessageSquare, Send, Users, _Clock, Phone, Video,\r\n  _FileText, Paperclip, Image, _AlertTriangle, _CheckCircle,\r\n  _Plus, Search, _Filter, Bell, _BellOff, Settings,\r\n  UserPlus, _UserMinus, MoreHorizontal, _Star, _Flag,\r\n  _Calendar, _MapPin, _Stethoscope, _Briefcase, Heart,\r\n  _Shield, _Zap, _Upload, _Download, _Eye, _EyeOff,\r\n  _Edit2, _Trash2, _Copy, _Share, _Archive, _RefreshCw\r\n} from 'lucide-react';\r\n\r\ninterface CareTeamMember {\r\n  id: string;\r\n  name: string;\r\n  _role: 'primary_therapist' | 'psychiatrist' | 'case_manager' | 'nurse' | 'social_worker' | 'peer_support' | 'family_member' | 'medical_provider' | 'other';\r\n  credentials?: string;\r\n  specialty?: string;\r\n  organization?: string;\r\n  email: string;\r\n  phone?: string;\r\n  avatar?: string;\r\n  status: 'active' | 'inactive' | 'on_leave';\r\n  permissions: Permission[];\r\n  lastActive?: Date;\r\n  timezone?: string;\r\n  preferredContact: 'email' | 'phone' | 'secure_message';\r\n}\r\n\r\ninterface Permission {\r\n  area: 'treatment_plan' | 'session_notes' | 'medications' | 'crisis_plan' | 'assessments' | 'scheduling' | 'billing';\r\n  level: 'view' | 'edit' | 'full';\r\n}\r\n\r\ninterface Message {\r\n  id: string;\r\n  threadId: string;\r\n  senderId: string;\r\n  recipientIds: string[];\r\n  content: string;\r\n  timestamp: Date;\r\n  type: 'text' | 'file' | 'image' | 'voice' | 'video_call' | 'phone_call' | 'system';\r\n  attachments?: Attachment[];\r\n  _priority: 'low' | 'normal' | 'high' | 'urgent';\r\n  status: 'sent' | 'delivered' | 'read';\r\n  readBy: { userId: string; timestamp: Date }[];\r\n  tags?: string[];\r\n  relatedTo?: {\r\n    type: 'patient' | 'session' | 'treatment_plan' | 'assessment';\r\n    id: string;\r\n    name: string;\r\n  };\r\n  isEncrypted: boolean;\r\n  editedAt?: Date;\r\n  deletedAt?: Date;\r\n}\r\n\r\ninterface Attachment {\r\n  id: string;\r\n  name: string;\r\n  type: 'document' | 'image' | 'audio' | 'video';\r\n  size: number;\r\n  url: string;\r\n  uploadedBy: string;\r\n  uploadedAt: Date;\r\n  isSecure: boolean;\r\n}\r\n\r\ninterface Thread {\r\n  id: string;\r\n  name: string;\r\n  type: 'direct' | 'group' | 'team' | 'emergency';\r\n  participantIds: string[];\r\n  createdBy: string;\r\n  createdAt: Date;\r\n  lastActivity: Date;\r\n  lastMessage?: Message;\r\n  isArchived: boolean;\r\n  isMuted: boolean;\r\n  tags?: string[];\r\n  relatedPatientId?: string;\r\n  _priority: 'low' | 'normal' | 'high' | 'urgent';\r\n  unreadCount: number;\r\n}\r\n\r\ninterface Notification {\r\n  id: string;\r\n  type: 'message' | 'mention' | 'file_shared' | 'emergency' | 'system';\r\n  title: string;\r\n  content: string;\r\n  timestamp: Date;\r\n  isRead: boolean;\r\n  actionUrl?: string;\r\n  senderId?: string;\r\n  _priority: 'low' | 'normal' | 'high' | 'urgent';\r\n}\r\n\r\ninterface CareTeamCommunicationProps {\r\n  currentUserId: string;\r\n  patientId?: string;\r\n  careTeam: CareTeamMember[];\r\n  threads?: Thread[];\r\n  onSendMessage?: (threadId: string, message: Partial<Message>) => void;\r\n  _onCreateThread?: (thread: Partial<Thread>) => void;\r\n  _onAddMember?: (member: CareTeamMember) => void;\r\n  _onRemoveMember?: (memberId: string) => void;\r\n  _onUpdatePermissions?: (memberId: string, permissions: Permission[]) => void;\r\n  isProvider?: boolean;\r\n}\r\n\r\nexport function CareTeamCommunication({\r\n  currentUserId,\r\n  patientId,\r\n  careTeam,\r\n  threads = [],\r\n  onSendMessage,\r\n  _onCreateThread,\r\n  _onAddMember,\r\n  _onRemoveMember,\r\n  _onUpdatePermissions,\r\n  isProvider = false\r\n}: CareTeamCommunicationProps) {\r\n  const [activeTab, setActiveTab] = useState<'messages' | 'team' | 'notifications'>('messages');\r\n  const [selectedThread, setSelectedThread] = useState<Thread | null>(null);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [showNewThread, setShowNewThread] = useState(false);\r\n  const [showMemberForm, setShowMemberForm] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filterPriority, setFilterPriority] = useState<'all' | 'low' | 'normal' | 'high' | 'urgent'>('all');\r\n  const [notifications, _setNotifications] = useState<Notification[]>([]);\r\n  const [_isTyping, _setIsTyping] = useState<Record<string, boolean>>({});\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Auto-scroll to bottom of messages\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [selectedThread?.id]);\r\n\r\n  // Get current user\r\n  const currentUser = careTeam.find(member => member.id === currentUserId);\r\n\r\n  // Get role color\r\n  const getRoleColor = (_role: string) => {\r\n    switch (_role) {\r\n      case 'primary_therapist': return 'text-blue-700 bg-blue-100';\r\n      case 'psychiatrist': return 'text-purple-700 bg-purple-100';\r\n      case 'case_manager': return 'text-green-700 bg-green-100';\r\n      case 'nurse': return 'text-pink-700 bg-pink-100';\r\n      case 'social_worker': return 'text-indigo-700 bg-indigo-100';\r\n      case 'peer_support': return 'text-yellow-700 bg-yellow-100';\r\n      case 'family_member': return 'text-orange-700 bg-orange-100';\r\n      case 'medical_provider': return 'text-red-700 bg-red-100';\r\n      default: return 'text-gray-700 bg-gray-100';\r\n    }\r\n  };\r\n\r\n  // Get priority color\r\n  const getPriorityColor = (_priority: string) => {\r\n    switch (_priority) {\r\n      case 'urgent': return 'text-red-600 bg-red-100 border-red-200';\r\n      case 'high': return 'text-orange-600 bg-orange-100 border-orange-200';\r\n      case 'normal': return 'text-blue-600 bg-blue-100 border-blue-200';\r\n      case 'low': return 'text-gray-600 bg-gray-100 border-gray-200';\r\n      default: return 'text-gray-600 bg-gray-100 border-gray-200';\r\n    }\r\n  };\r\n\r\n  // Handle send message\r\n  const handleSendMessage = () => {\r\n    if (!newMessage.trim() || !selectedThread) return;\r\n\r\n    const message: Partial<Message> = {\r\n      content: newMessage.trim(),\r\n      type: 'text',\r\n      _priority: 'normal',\r\n      recipientIds: selectedThread.participantIds.filter(id => id !== currentUserId),\r\n      relatedTo: patientId ? {\r\n        type: 'patient',\r\n        id: patientId,\r\n        name: 'Current Patient'\r\n      } : undefined\r\n    };\r\n\r\n    onSendMessage?.(selectedThread.id, message);\r\n    setNewMessage('');\r\n  };\r\n\r\n  // Filter threads\r\n  const filteredThreads = threads.filter(thread => {\r\n    const matchesSearch = thread.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      thread.lastMessage?.content.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesPriority = filterPriority === 'all' || thread._priority === filterPriority;\r\n    return matchesSearch && matchesPriority;\r\n  });\r\n\r\n  // Get thread participants\r\n  const getThreadParticipants = (thread: Thread) => {\r\n    return careTeam.filter(member => thread.participantIds.includes(member.id));\r\n  };\r\n\r\n  // Format timestamp\r\n  const formatTimestamp = (timestamp: Date) => {\r\n    const now = new Date();\r\n    const diff = now.getTime() - timestamp.getTime();\r\n    const minutes = Math.floor(diff / 60000);\r\n    const hours = Math.floor(diff / 3600000);\r\n    const days = Math.floor(diff / 86400000);\r\n\r\n    if (minutes < 1) return 'Just now';\r\n    if (minutes < 60) return `${minutes}m ago`;\r\n    if (hours < 24) return `${hours}h ago`;\r\n    if (days < 7) return `${days}d ago`;\r\n    return timestamp.toLocaleDateString();\r\n  };\r\n\r\n  return (\r\n    <div className=\"h-full flex bg-white rounded-xl shadow-lg overflow-hidden\">\r\n      {/* Sidebar */}\r\n      <div className=\"w-80 bg-gray-50 border-r border-gray-200 flex flex-col\">\r\n        {/* Header */}\r\n        <div className=\"p-4 border-b border-gray-200\">\r\n          <div className=\"flex items-center justify-between mb-3\">\r\n            <h2 className=\"text-lg font-semibold text-gray-900\">Care Team</h2>\r\n            <div className=\"flex space-x-1\">\r\n              <button\r\n                onClick={() => setShowNewThread(true)}\r\n                className=\"p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors\"\r\n                title=\"New message\"\r\n              >\r\n                <MessageSquare className=\"h-4 w-4\" />\r\n              </button>\r\n              <button\r\n                onClick={() => setShowMemberForm(true)}\r\n                className=\"p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors\"\r\n                title=\"Add team member\"\r\n              >\r\n                <UserPlus className=\"h-4 w-4\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Tabs */}\r\n          <div className=\"flex space-x-1\">\r\n            {[\r\n              { id: 'messages', label: 'Messages', icon: MessageSquare },\r\n              { id: 'team', label: 'Team', icon: Users },\r\n              { id: 'notifications', label: 'Alerts', icon: Bell }\r\n            ].map(({ id, label, icon: Icon }) => (\r\n              <button\r\n                key={id}\r\n                onClick={() => setActiveTab(id as unknown)}\r\n                className={`flex-1 px-3 py-2 text-sm font-medium rounded-lg transition-all flex items-center justify-center space-x-1 ${\r\n                  activeTab === id\r\n                    ? 'bg-primary-100 text-primary-700'\r\n                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'\r\n                }`}\r\n              >\r\n                <Icon className=\"h-4 w-4\" />\r\n                <span>{label}</span>\r\n                {id === 'notifications' && notifications.filter(n => !n.isRead).length > 0 && (\r\n                  <span className=\"ml-1 px-1.5 py-0.5 text-xs bg-red-500 text-white rounded-full\">\r\n                    {notifications.filter(n => !n.isRead).length}\r\n                  </span>\r\n                )}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Content */}\r\n        <div className=\"flex-1 overflow-y-auto\">\r\n          {activeTab === 'messages' && (\r\n            <div className=\"p-4 space-y-2\">\r\n              {/* Search and _Filter */}\r\n              <div className=\"space-y-2 mb-4\">\r\n                <div className=\"relative\">\r\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\r\n                  <input\r\n                    type=\"text\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                    placeholder=\"Search messages...\"\r\n                    className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\r\n                  />\r\n                </div>\r\n                <select\r\n                  value={filterPriority}\r\n                  onChange={(e) => setFilterPriority(e.target.value as unknown)}\r\n                  className=\"w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500\"\r\n                >\r\n                  <option value=\"all\">All Priorities</option>\r\n                  <option value=\"urgent\">Urgent</option>\r\n                  <option value=\"high\">High</option>\r\n                  <option value=\"normal\">Normal</option>\r\n                  <option value=\"low\">Low</option>\r\n                </select>\r\n              </div>\r\n\r\n              {/* Threads List */}\r\n              <div className=\"space-y-1\">\r\n                {filteredThreads.map((thread) => {\r\n                  const participants = getThreadParticipants(thread);\r\n                  return (\r\n                    <motion.div\r\n                      key={thread.id}\r\n                      initial={{ opacity: 0, x: -10 }}\r\n                      animate={{ opacity: 1, x: 0 }}\r\n                      className={`p-3 rounded-lg cursor-pointer transition-all hover:bg-gray-100 ${\r\n                        selectedThread?.id === thread.id ? 'bg-primary-100 border border-primary-200' : ''\r\n                      }`}\r\n                      onClick={() => setSelectedThread(thread)}\r\n                    >\r\n                      <div className=\"flex items-start justify-between mb-1\">\r\n                        <div className=\"flex items-center space-x-2\">\r\n                          <h4 className=\"font-medium text-gray-900 text-sm\">{thread.name}</h4>\r\n                          {thread._priority !== 'normal' && (\r\n                            <span className={`px-1.5 py-0.5 text-xs rounded-full ${getPriorityColor(thread._priority)}`}>\r\n                              {thread._priority}\r\n                            </span>\r\n                          )}\r\n                        </div>\r\n                        <span className=\"text-xs text-gray-500\">\r\n                          {formatTimestamp(thread.lastActivity)}\r\n                        </span>\r\n                      </div>\r\n                      \r\n                      {thread.lastMessage && (\r\n                        <p className=\"text-sm text-gray-600 truncate\">\r\n                          {thread.lastMessage.content}\r\n                        </p>\r\n                      )}\r\n                      \r\n                      <div className=\"flex items-center justify-between mt-2\">\r\n                        <div className=\"flex -space-x-2\">\r\n                          {participants.slice(0, 3).map((participant) => (\r\n                            <div\r\n                              key={participant.id}\r\n                              className=\"h-6 w-6 bg-primary-200 rounded-full flex items-center justify-center border-2 border-white\"\r\n                              title={participant.name}\r\n                            >\r\n                              {participant.avatar ? (\r\n                                <img \r\n                                  src={participant.avatar} \r\n                                  alt={participant.name}\r\n                                  className=\"h-6 w-6 rounded-full object-cover\"\r\n                                />\r\n                              ) : (\r\n                                <span className=\"text-xs text-primary-700 font-medium\">\r\n                                  {participant.name.split(' ').map(n => n[0]).join('')}\r\n                                </span>\r\n                              )}\r\n                            </div>\r\n                          ))}\r\n                          {participants.length > 3 && (\r\n                            <div className=\"h-6 w-6 bg-gray-200 rounded-full flex items-center justify-center border-2 border-white\">\r\n                              <span className=\"text-xs text-gray-600 font-medium\">\r\n                                +{participants.length - 3}\r\n                              </span>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                        \r\n                        {thread.unreadCount > 0 && (\r\n                          <span className=\"px-2 py-1 bg-primary-500 text-white text-xs rounded-full\">\r\n                            {thread.unreadCount}\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                    </motion.div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {activeTab === 'team' && (\r\n            <div className=\"p-4 space-y-3\">\r\n              {careTeam\r\n                .filter(member => \r\n                  member.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                  member._role.toLowerCase().includes(searchTerm.toLowerCase())\r\n                )\r\n                .map((member) => (\r\n                  <motion.div\r\n                    key={member.id}\r\n                    initial={{ opacity: 0, y: 10 }}\r\n                    animate={{ opacity: 1, y: 0 }}\r\n                    className=\"p-3 bg-white border border-gray-200 rounded-lg\"\r\n                  >\r\n                    <div className=\"flex items-start justify-between\">\r\n                      <div className=\"flex items-center space-x-3\">\r\n                        <div className=\"h-10 w-10 bg-primary-200 rounded-full flex items-center justify-center\">\r\n                          {member.avatar ? (\r\n                            <img \r\n                              src={member.avatar} \r\n                              alt={member.name}\r\n                              className=\"h-10 w-10 rounded-full object-cover\"\r\n                            />\r\n                          ) : (\r\n                            <span className=\"text-primary-700 font-semibold\">\r\n                              {member.name.split(' ').map(n => n[0]).join('')}\r\n                            </span>\r\n                          )}\r\n                        </div>\r\n                        <div>\r\n                          <h4 className=\"font-medium text-gray-900\">{member.name}</h4>\r\n                          <div className=\"flex items-center space-x-2\">\r\n                            <span className={`px-2 py-1 text-xs rounded-full ${getRoleColor(member._role)}`}>\r\n                              {member._role.replace('_', ' ')}\r\n                            </span>\r\n                            {member.credentials && (\r\n                              <span className=\"text-xs text-gray-600\">{member.credentials}</span>\r\n                            )}\r\n                          </div>\r\n                          {member.organization && (\r\n                            <p className=\"text-xs text-gray-500 mt-1\">{member.organization}</p>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      <div className=\"flex items-center space-x-1\">\r\n                        <div className={`h-2 w-2 rounded-full ${\r\n                          member.status === 'active' ? 'bg-green-400' :\r\n                          member.status === 'on_leave' ? 'bg-yellow-400' :\r\n                          'bg-gray-400'\r\n                        }`} />\r\n                        {isProvider && (\r\n                          <button\r\n                            className=\"p-1 text-gray-400 hover:text-gray-600\"\r\n                            title=\"Settings\"\r\n                          >\r\n                            <Settings className=\"h-4 w-4\" />\r\n                          </button>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"flex items-center space-x-3 mt-2 text-sm\">\r\n                      <div className=\"flex items-center text-gray-600\">\r\n                        <Phone className=\"h-3 w-3 mr-1\" />\r\n                        <span>{member.phone || 'N/A'}</span>\r\n                      </div>\r\n                      {member.lastActive && (\r\n                        <span className=\"text-gray-500\">\r\n                          Active {formatTimestamp(member.lastActive)}\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                  </motion.div>\r\n                ))}\r\n            </div>\r\n          )}\r\n\r\n          {activeTab === 'notifications' && (\r\n            <div className=\"p-4 space-y-2\">\r\n              {notifications.length === 0 ? (\r\n                <div className=\"text-center py-8 text-gray-500\">\r\n                  <Bell className=\"h-12 w-12 mx-auto mb-3 text-gray-300\" />\r\n                  <p>No notifications</p>\r\n                </div>\r\n              ) : (\r\n                notifications.map((notification) => (\r\n                  <motion.div\r\n                    key={notification.id}\r\n                    initial={{ opacity: 0, x: -10 }}\r\n                    animate={{ opacity: 1, x: 0 }}\r\n                    className={`p-3 rounded-lg border ${\r\n                      notification.isRead ? 'bg-gray-50 border-gray-200' : 'bg-primary-50 border-primary-200'\r\n                    }`}\r\n                  >\r\n                    <div className=\"flex items-start justify-between mb-1\">\r\n                      <h4 className=\"font-medium text-gray-900 text-sm\">{notification.title}</h4>\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <span className={`px-2 py-1 text-xs rounded-full ${getPriorityColor(notification._priority)}`}>\r\n                          {notification._priority}\r\n                        </span>\r\n                        <span className=\"text-xs text-gray-500\">\r\n                          {formatTimestamp(notification.timestamp)}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <p className=\"text-sm text-gray-600\">{notification.content}</p>\r\n                    {!notification.isRead && (\r\n                      <div className=\"h-2 w-2 bg-primary-500 rounded-full absolute top-3 right-3\" />\r\n                    )}\r\n                  </motion.div>\r\n                ))\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main Content */}\r\n      <div className=\"flex-1 flex flex-col\">\r\n        {selectedThread ? (\r\n          <>\r\n            {/* Thread Header */}\r\n            <div className=\"p-4 border-b border-gray-200 bg-white\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center space-x-3\">\r\n                  <div className=\"flex -space-x-2\">\r\n                    {getThreadParticipants(selectedThread).slice(0, 3).map((participant) => (\r\n                      <div\r\n                        key={participant.id}\r\n                        className=\"h-8 w-8 bg-primary-200 rounded-full flex items-center justify-center border-2 border-white\"\r\n                      >\r\n                        {participant.avatar ? (\r\n                          <img \r\n                            src={participant.avatar} \r\n                            alt={participant.name}\r\n                            className=\"h-8 w-8 rounded-full object-cover\"\r\n                          />\r\n                        ) : (\r\n                          <span className=\"text-xs text-primary-700 font-medium\">\r\n                            {participant.name.split(' ').map(n => n[0]).join('')}\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                  <div>\r\n                    <h3 className=\"font-medium text-gray-900\">{selectedThread.name}</h3>\r\n                    <p className=\"text-sm text-gray-600\">\r\n                      {getThreadParticipants(selectedThread).map(p => p.name).join(', ')}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"flex items-center space-x-2\">\r\n                  <button className=\"p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors\">\r\n                    <Phone className=\"h-4 w-4\" />\r\n                  </button>\r\n                  <button className=\"p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors\">\r\n                    <Video className=\"h-4 w-4\" />\r\n                  </button>\r\n                  <button className=\"p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors\">\r\n                    <MoreHorizontal className=\"h-4 w-4\" />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              \r\n              {selectedThread.relatedPatientId && (\r\n                <div className=\"mt-2 flex items-center space-x-2 text-sm text-gray-600\">\r\n                  <Heart className=\"h-4 w-4\" />\r\n                  <span>Related to patient care</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Messages */}\r\n            <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\r\n              {/* Mock messages for demonstration */}\r\n              <div className=\"space-y-4\">\r\n                <div className=\"flex items-start space-x-3\">\r\n                  <div className=\"h-8 w-8 bg-blue-200 rounded-full flex items-center justify-center\">\r\n                    <span className=\"text-xs text-blue-700 font-medium\">DR</span>\r\n                  </div>\r\n                  <div className=\"flex-1\">\r\n                    <div className=\"flex items-center space-x-2 mb-1\">\r\n                      <span className=\"font-medium text-gray-900 text-sm\">Dr. Robinson</span>\r\n                      <span className=\"text-xs text-gray-500\">2:30 PM</span>\r\n                    </div>\r\n                    <div className=\"bg-gray-100 rounded-lg p-3 text-sm text-gray-800\">\r\n                      Patient showed significant improvement in anxiety levels during yesterday's session. \r\n                      Considering adjusting medication dosage. Thoughts?\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex items-start space-x-3 justify-end\">\r\n                  <div className=\"flex-1 text-right\">\r\n                    <div className=\"flex items-center justify-end space-x-2 mb-1\">\r\n                      <span className=\"text-xs text-gray-500\">2:35 PM</span>\r\n                      <span className=\"font-medium text-gray-900 text-sm\">You</span>\r\n                    </div>\r\n                    <div className=\"bg-primary-500 text-white rounded-lg p-3 text-sm inline-block\">\r\n                      Agreed. The CBT techniques seem to be working well. Let&apos;s schedule a review \r\n                      meeting to discuss medication adjustments.\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"h-8 w-8 bg-primary-200 rounded-full flex items-center justify-center\">\r\n                    <span className=\"text-xs text-primary-700 font-medium\">\r\n                      {currentUser?.name.split(' ').map(n => n[0]).join('') || 'ME'}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              <div ref={messagesEndRef} />\r\n            </div>\r\n\r\n            {/* Message Input */}\r\n            <div className=\"p-4 border-t border-gray-200 bg-white\">\r\n              <div className=\"flex items-end space-x-3\">\r\n                <div className=\"flex-1\">\r\n                  <div className=\"border border-gray-300 rounded-lg\">\r\n                    <textarea\r\n                      value={newMessage}\r\n                      onChange={(e) => setNewMessage(e.target.value)}\r\n                      placeholder=\"Type your message...\"\r\n                      className=\"w-full p-3 border-none rounded-lg resize-none focus:ring-0\"\r\n                      rows={3}\r\n                      onKeyDown={(e) => {\r\n                        if (e.key === 'Enter' && !e.shiftKey) {\r\n                          e.preventDefault();\r\n                          handleSendMessage();\r\n                        }\r\n                      }}\r\n                    />\r\n                    <div className=\"flex items-center justify-between p-2 border-t border-gray-200\">\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <button className=\"p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors\">\r\n                          <Paperclip className=\"h-4 w-4\" />\r\n                        </button>\r\n                        <button className=\"p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors\">\r\n                          <Image className=\"h-4 w-4\" />\r\n                        </button>\r\n                        <select className=\"text-sm border-none text-gray-600 focus:ring-0\">\r\n                          <option value=\"normal\">Normal</option>\r\n                          <option value=\"high\">High Priority</option>\r\n                          <option value=\"urgent\">Urgent</option>\r\n                        </select>\r\n                      </div>\r\n                      <button\r\n                        onClick={handleSendMessage}\r\n                        disabled={!newMessage.trim()}\r\n                        className=\"px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-1\"\r\n                      >\r\n                        <Send className=\"h-4 w-4\" />\r\n                        <span>Send</span>\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <div className=\"flex-1 flex items-center justify-center\">\r\n            <div className=\"text-center\">\r\n              <MessageSquare className=\"h-12 w-12 mx-auto text-gray-300 mb-3\" />\r\n              <h3 className=\"text-lg font-medium text-gray-900 mb-1\">No conversation selected</h3>\r\n              <p className=\"text-gray-500\">Choose a thread from the sidebar to start messaging</p>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* New Thread Modal */}\r\n      <AnimatePresence>\r\n        {showNewThread && (\r\n          <motion.div\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0 }}\r\n            className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\"\r\n            onClick={() => setShowNewThread(false)}\r\n          >\r\n            <motion.div\r\n              initial={{ scale: 0.9, opacity: 0 }}\r\n              animate={{ scale: 1, opacity: 1 }}\r\n              exit={{ scale: 0.9, opacity: 0 }}\r\n              className=\"bg-white rounded-xl p-6 max-w-lg w-full\"\r\n              onClick={(e) => e.stopPropagation()}\r\n            >\r\n              <h3 className=\"text-xl font-semibold mb-4\">New Conversation</h3>\r\n              \r\n              <div className=\"space-y-4\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Thread Name\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500\"\r\n                    placeholder=\"Enter thread name...\"\r\n                  />\r\n                </div>\r\n                \r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Select Participants\r\n                  </label>\r\n                  <div className=\"space-y-2 max-h-48 overflow-y-auto\">\r\n                    {careTeam.filter(m => m.id !== currentUserId).map((member) => (\r\n                      <label key={member.id} className=\"flex items-center p-2 hover:bg-gray-50 rounded\">\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          className=\"rounded border-gray-300 text-primary-600 focus:ring-primary-500\"\r\n                        />\r\n                        <div className=\"ml-3 flex items-center space-x-2\">\r\n                          <span className=\"font-medium text-gray-900\">{member.name}</span>\r\n                          <span className={`px-2 py-1 text-xs rounded-full ${getRoleColor(member._role)}`}>\r\n                            {member._role.replace('_', ' ')}\r\n                          </span>\r\n                        </div>\r\n                      </label>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n                \r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Priority\r\n                  </label>\r\n                  <select className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500\">\r\n                    <option value=\"normal\">Normal</option>\r\n                    <option value=\"high\">High</option>\r\n                    <option value=\"urgent\">Urgent</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"flex space-x-2 mt-6\">\r\n                <button\r\n                  onClick={() => setShowNewThread(false)}\r\n                  className=\"flex-1 px-4 py-2 text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors\"\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button\r\n                  onClick={() => setShowNewThread(false)}\r\n                  className=\"flex-1 px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors\"\r\n                >\r\n                  Create Thread\r\n                </button>\r\n              </div>\r\n            </motion.div>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n\r\n      {/* Add Member Modal */}\r\n      <AnimatePresence>\r\n        {showMemberForm && (\r\n          <motion.div\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0 }}\r\n            className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\"\r\n            onClick={() => setShowMemberForm(false)}\r\n          >\r\n            <motion.div\r\n              initial={{ scale: 0.9, opacity: 0 }}\r\n              animate={{ scale: 1, opacity: 1 }}\r\n              exit={{ scale: 0.9, opacity: 0 }}\r\n              className=\"bg-white rounded-xl p-6 max-w-lg w-full max-h-[80vh] overflow-y-auto\"\r\n              onClick={(e) => e.stopPropagation()}\r\n            >\r\n              <h3 className=\"text-xl font-semibold mb-4\">Add Team Member</h3>\r\n              \r\n              <div className=\"space-y-4\">\r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      First Name\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500\"\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      Last Name\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                \r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Role\r\n                  </label>\r\n                  <select className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500\">\r\n                    <option value=\"primary_therapist\">Primary Therapist</option>\r\n                    <option value=\"psychiatrist\">Psychiatrist</option>\r\n                    <option value=\"case_manager\">Case Manager</option>\r\n                    <option value=\"nurse\">Nurse</option>\r\n                    <option value=\"social_worker\">Social Worker</option>\r\n                    <option value=\"peer_support\">Peer Support</option>\r\n                    <option value=\"family_member\">Family Member</option>\r\n                    <option value=\"medical_provider\">Medical Provider</option>\r\n                    <option value=\"other\">Other</option>\r\n                  </select>\r\n                </div>\r\n                \r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      Email\r\n                    </label>\r\n                    <input\r\n                      type=\"email\"\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500\"\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      Phone\r\n                    </label>\r\n                    <input\r\n                      type=\"tel\"\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                \r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Organization\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500\"\r\n                  />\r\n                </div>\r\n                \r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Permissions\r\n                  </label>\r\n                  <div className=\"space-y-2\">\r\n                    {[\r\n                      'Treatment Plan',\r\n                      'Session Notes', \r\n                      'Medications',\r\n                      'Crisis Plan',\r\n                      'Assessments',\r\n                      'Scheduling'\r\n                    ].map((permission) => (\r\n                      <div key={permission} className=\"flex items-center justify-between p-2 border border-gray-200 rounded\">\r\n                        <span className=\"text-sm\">{permission}</span>\r\n                        <select className=\"text-sm border-none focus:ring-0\">\r\n                          <option value=\"none\">No Access</option>\r\n                          <option value=\"view\">View Only</option>\r\n                          <option value=\"edit\">Edit</option>\r\n                          <option value=\"full\">Full Access</option>\r\n                        </select>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"flex space-x-2 mt-6\">\r\n                <button\r\n                  onClick={() => setShowMemberForm(false)}\r\n                  className=\"flex-1 px-4 py-2 text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors\"\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button\r\n                  onClick={() => setShowMemberForm(false)}\r\n                  className=\"flex-1 px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors\"\r\n                >\r\n                  Add Member\r\n                </button>\r\n              </div>\r\n            </motion.div>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\professional\\MedicationSmartReminders.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'generateInitialReminders'. Either include it or remove the dependency array.","line":170,"column":6,"nodeType":"ArrayExpression","endLine":170,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [generateInitialReminders, medications]","fix":{"range":[4006,4019],"text":"[generateInitialReminders, medications]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":473,"column":63,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[16730,16746],"text":"Today&apos;s Schedule"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[16730,16746],"text":"Today&lsquo;s Schedule"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[16730,16746],"text":"Today&#39;s Schedule"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[16730,16746],"text":"Today&rsquo;s Schedule"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must have accessible text.","line":619,"column":23,"nodeType":"JSXOpeningElement","endLine":619,"endColumn":60}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport {\r\n  Bell,\r\n  Clock,\r\n  _Calendar,\r\n  Smartphone,\r\n  Watch,\r\n  Volume2,\r\n  _VolumeX,\r\n  Settings,\r\n  BrainCircuit,\r\n  TrendingUp,\r\n  AlertTriangle,\r\n  CheckCircle,\r\n  XCircle,\r\n  Pill,\r\n  _Coffee,\r\n  _Sun,\r\n  _Moon,\r\n  Activity,\r\n  Target,\r\n  Zap,\r\n  ChevronRight,\r\n  Play,\r\n  _Pause,\r\n  _RotateCcw,\r\n  MapPin,\r\n  User,\r\n  _HeartPulse,\r\n  FileText,\r\n  Lightbulb\r\n} from 'lucide-react';\r\n\r\ninterface SmartReminderProps {\r\n  _userId: string;\r\n  medications: unknown[];\r\n  _onUpdateReminders: (reminders: SmartReminder[]) => void;\r\n}\r\n\r\ninterface SmartReminder {\r\n  id: string;\r\n  medicationId: string;\r\n  _type: 'time' | 'location' | 'context' | 'adaptive' | 'emergency';\r\n  enabled: boolean;\r\n  settings: ReminderSettings;\r\n  intelligence: ReminderIntelligence;\r\n  effectiveness: number; // 0-1\r\n  lastTriggered?: Date;\r\n  successRate: number; // 0-1\r\n  userFeedback: 'helpful' | 'annoying' | 'neutral';\r\n}\r\n\r\ninterface ReminderSettings {\r\n  // Time-based\r\n  times?: string[];\r\n  advanceNotice?: number; // _minutes\r\n  snoozeOptions?: number[]; // _minutes\r\n  \r\n  // Location-based\r\n  locations?: LocationTrigger[];\r\n  geofenceRadius?: number; // meters\r\n  \r\n  // Context-aware\r\n  contextTriggers?: ContextTrigger[];\r\n  \r\n  // Adaptive\r\n  adaptToRoutine?: boolean;\r\n  learnFromBehavior?: boolean;\r\n  personalizeContent?: boolean;\r\n  \r\n  // Delivery methods\r\n  pushNotification?: boolean;\r\n  sms?: boolean;\r\n  email?: boolean;\r\n  smartWatch?: boolean;\r\n  \r\n  // Sound and vibration\r\n  soundEnabled?: boolean;\r\n  customSound?: string;\r\n  vibrationPattern?: 'gentle' | 'strong' | 'custom';\r\n  \r\n  // Escalation\r\n  escalationEnabled?: boolean;\r\n  escalationDelay?: number; // _minutes\r\n  escalationContacts?: string[];\r\n}\r\n\r\ninterface LocationTrigger {\r\n  id: string;\r\n  name: string;\r\n  latitude: number;\r\n  longitude: number;\r\n  trigger: 'enter' | 'exit';\r\n  description: string;\r\n}\r\n\r\ninterface ContextTrigger {\r\n  id: string;\r\n  _type: 'meal' | 'exercise' | 'bedtime' | 'work' | 'stress' | 'mood';\r\n  condition: string;\r\n  description: string;\r\n}\r\n\r\ninterface ReminderIntelligence {\r\n  // Pattern recognition\r\n  optimalTimes?: string[];\r\n  adherencePatterns?: AdherencePattern[];\r\n  \r\n  // Personalization\r\n  preferredChannels?: string[];\r\n  responseLatency?: number; // average time to respond\r\n  \r\n  // Smart features\r\n  moodCorrelation?: number; // -1 to 1\r\n  sideEffectPrediction?: number; // 0-1\r\n  dosageOptimization?: DosageRecommendation;\r\n  \r\n  // Learning\r\n  adaptationHistory?: AdaptationEvent[];\r\n  confidenceScore?: number; // 0-1\r\n}\r\n\r\ninterface AdherencePattern {\r\n  pattern: string;\r\n  confidence: number;\r\n  impact: number; // effect on adherence\r\n  recommendation: string;\r\n}\r\n\r\ninterface DosageRecommendation {\r\n  currentEffectiveness: number;\r\n  suggestedChanges: string[];\r\n  reasoning: string;\r\n  confidence: number;\r\n}\r\n\r\ninterface AdaptationEvent {\r\n  date: Date;\r\n  trigger: string;\r\n  action: string;\r\n  result: string;\r\n  effectiveness: number;\r\n}\r\n\r\ninterface AIInsight {\r\n  _type: 'pattern' | 'optimization' | 'warning' | 'success';\r\n  title: string;\r\n  description: string;\r\n  confidence: number;\r\n  actionable: boolean;\r\n  actions?: string[];\r\n}\r\n\r\nexport function MedicationSmartReminders({ \r\n  _userId, \r\n  medications, \r\n  _onUpdateReminders \r\n}: SmartReminderProps) {\r\n  const [reminders, setReminders] = useState<SmartReminder[]>([]);\r\n  const [activeTab, setActiveTab] = useState<'overview' | 'configure' | '_insights' | 'history'>('overview');\r\n  const [_selectedMedication, setSelectedMedication] = useState<string | null>(null);\r\n  const [isLearningMode, setIsLearningMode] = useState(true);\r\n  const [aiInsights, setAiInsights] = useState<AIInsight[]>([]);\r\n  const [reminderTest, setReminderTest] = useState<{ active: boolean; _type: string } | null>(null);\r\n\r\n  useEffect(() => {\r\n    generateInitialReminders();\r\n    generateAIInsights();\r\n  }, [medications]);\r\n\r\n  const generateInitialReminders = () => {\r\n    const _initialReminders: SmartReminder[] = medications.map((med, index) => ({\r\n      id: `reminder-${med.id}`,\r\n      medicationId: med.id,\r\n      _type: 'adaptive',\r\n      enabled: true,\r\n      settings: {\r\n        times: med.schedule?.map((s: unknown) => s.time) || ['08:00'],\r\n        advanceNotice: 15,\r\n        snoozeOptions: [5, 10, 30],\r\n        adaptToRoutine: true,\r\n        learnFromBehavior: true,\r\n        personalizeContent: true,\r\n        pushNotification: true,\r\n        soundEnabled: true,\r\n        vibrationPattern: 'gentle',\r\n        escalationEnabled: true,\r\n        escalationDelay: 60\r\n      },\r\n      intelligence: {\r\n        optimalTimes: med.schedule?.map((s: unknown) => s.time) || ['08:00'],\r\n        adherencePatterns: [\r\n          {\r\n            pattern: `Better adherence when taken with ${index % 2 === 0 ? 'breakfast' : 'dinner'}`,\r\n            confidence: 0.75 + Math.random() * 0.2,\r\n            impact: 0.3 + Math.random() * 0.4,\r\n            recommendation: `Consider scheduling with ${index % 2 === 0 ? 'morning' : 'evening'} meal`\r\n          }\r\n        ],\r\n        preferredChannels: ['push', 'vibration'],\r\n        responseLatency: 5 + Math.random() * 15,\r\n        moodCorrelation: (Math.random() - 0.5) * 0.8,\r\n        confidenceScore: 0.6 + Math.random() * 0.3\r\n      },\r\n      effectiveness: 0.7 + Math.random() * 0.25,\r\n      successRate: 0.65 + Math.random() * 0.3,\r\n      userFeedback: Math.random() > 0.7 ? 'helpful' : Math.random() > 0.5 ? 'neutral' : 'annoying'\r\n    }));\r\n\r\n    setReminders(_initialReminders);\r\n  };\r\n\r\n  const generateAIInsights = () => {\r\n    const _insights: AIInsight[] = [\r\n      {\r\n        _type: 'pattern',\r\n        title: 'Optimal Timing Discovered',\r\n        description: 'Your medication adherence is 23% higher when taken within 30 _minutes of breakfast.',\r\n        confidence: 0.87,\r\n        actionable: true,\r\n        actions: ['Adjust reminder to 8:15 AM', 'Link reminder to meal tracking']\r\n      },\r\n      {\r\n        _type: 'optimization',\r\n        title: 'Smart Scheduling Opportunity',\r\n        description: 'Consolidating your 8 AM and 8:30 AM medications into a single reminder could improve adherence.',\r\n        confidence: 0.74,\r\n        actionable: true,\r\n        actions: ['Create combined reminder', 'Test for 2 weeks']\r\n      },\r\n      {\r\n        _type: 'warning',\r\n        title: 'Missed Dose Pattern',\r\n        description: 'You\\'ve missed your evening medication 4 times this week, typically on busy weekdays.',\r\n        confidence: 0.92,\r\n        actionable: true,\r\n        actions: ['Enable location-based reminders', 'Add backup reminder 2 _hours later']\r\n      },\r\n      {\r\n        _type: 'success',\r\n        title: 'Improvement Detected',\r\n        description: 'Your medication adherence has improved 18% since enabling smart reminders.',\r\n        confidence: 0.95,\r\n        actionable: false\r\n      }\r\n    ];\r\n\r\n    setAiInsights(_insights);\r\n  };\r\n\r\n  const testReminder = (_type: string) => {\r\n    setReminderTest({ active: true, _type });\r\n    \r\n    // Simulate reminder\r\n    if ('Notification' in window) {\r\n      new Notification('Medication Reminder', {\r\n        body: 'Time to take your medication!',\r\n        icon: '/medication-icon.png',\r\n        requireInteraction: true\r\n      });\r\n    }\r\n\r\n    // Auto-dismiss test after 5 seconds\r\n    setTimeout(() => {\r\n      setReminderTest(null);\r\n    }, 5000);\r\n  };\r\n\r\n  const getReminderTypeIcon = (_type: string) => {\r\n    switch (_type) {\r\n      case 'time': return <Clock className=\"w-5 _h-5\" />;\r\n      case 'location': return <MapPin className=\"w-5 _h-5\" />;\r\n      case 'context': return <Activity className=\"w-5 _h-5\" />;\r\n      case 'adaptive': return <BrainCircuit className=\"w-5 _h-5\" />;\r\n      case 'emergency': return <AlertTriangle className=\"w-5 _h-5\" />;\r\n      default: return <Bell className=\"w-5 _h-5\" />;\r\n    }\r\n  };\r\n\r\n  const getEffectivenessColor = (score: number) => {\r\n    if (score >= 0.8) return 'text-green-600';\r\n    if (score >= 0.6) return 'text-yellow-600';\r\n    return 'text-red-600';\r\n  };\r\n\r\n  const getInsightIcon = (_type: string) => {\r\n    switch (_type) {\r\n      case 'pattern': return <TrendingUp className=\"w-5 _h-5 text-blue-500\" />;\r\n      case 'optimization': return <Target className=\"w-5 _h-5 text-purple-500\" />;\r\n      case 'warning': return <AlertTriangle className=\"w-5 _h-5 text-red-500\" />;\r\n      case 'success': return <CheckCircle className=\"w-5 _h-5 text-green-500\" />;\r\n      default: return <Lightbulb className=\"w-5 _h-5 text-yellow-500\" />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-4xl mx-auto p-6 bg-gray-50 min-h-screen\">\r\n      {/* Header */}\r\n      <div className=\"mb-8\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\r\n              <BrainCircuit className=\"w-8 h-8 mr-3 text-blue-600\" />\r\n              Smart Medication Reminders\r\n            </h1>\r\n            <p className=\"text-gray-600 mt-2\">\r\n              AI-powered reminders that learn from your habits and optimize for better adherence\r\n            </p>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center gap-3\">\r\n            <div className=\"flex items-center gap-2 bg-white px-4 py-2 rounded-lg shadow-sm\">\r\n              <div className={`w-3 _h-3 rounded-full ${isLearningMode ? 'bg-green-500' : 'bg-gray-300'}`}></div>\r\n              <span className=\"text-sm font-medium\">Learning Mode</span>\r\n              <button\r\n                onClick={() => setIsLearningMode(!isLearningMode)}\r\n                className=\"ml-2 text-blue-600 hover:text-blue-700\"\r\n              >\r\n                <Settings className=\"w-4 h-4\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Quick Stats */}\r\n        <div className=\"grid grid-cols-4 gap-4 mt-6\">\r\n          <div className=\"bg-white p-4 rounded-xl shadow-sm\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-gray-600\">Active Reminders</p>\r\n                <p className=\"text-2xl font-bold text-gray-900\">{reminders.filter(r => r.enabled).length}</p>\r\n              </div>\r\n              <Bell className=\"w-8 h-8 text-blue-500\" />\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white p-4 rounded-xl shadow-sm\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-gray-600\">Success Rate</p>\r\n                <p className=\"text-2xl font-bold text-green-600\">\r\n                  {Math.round(reminders.reduce((acc, r) => acc + r.successRate, 0) / reminders.length * 100)}%\r\n                </p>\r\n              </div>\r\n              <Target className=\"w-8 h-8 text-green-500\" />\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white p-4 rounded-xl shadow-sm\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-gray-600\">AI Insights</p>\r\n                <p className=\"text-2xl font-bold text-purple-600\">{aiInsights.length}</p>\r\n              </div>\r\n              <Lightbulb className=\"w-8 h-8 text-purple-500\" />\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white p-4 rounded-xl shadow-sm\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-gray-600\">Effectiveness</p>\r\n                <p className=\"text-2xl font-bold text-blue-600\">\r\n                  {Math.round(reminders.reduce((acc, r) => acc + r.effectiveness, 0) / reminders.length * 100)}%\r\n                </p>\r\n              </div>\r\n              <TrendingUp className=\"w-8 h-8 text-blue-500\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Navigation Tabs */}\r\n      <div className=\"flex space-x-1 mb-6 bg-white rounded-lg p-1 shadow-sm\">\r\n        {[\r\n          { id: 'overview', label: 'Overview', icon: Activity },\r\n          { id: 'configure', label: 'Configure', icon: Settings },\r\n          { id: '_insights', label: 'AI Insights', icon: BrainCircuit },\r\n          { id: 'history', label: 'History', icon: FileText }\r\n        ].map(tab => {\r\n          const Icon = tab.icon;\r\n          return (\r\n            <button\r\n              key={tab.id}\r\n              onClick={() => setActiveTab(tab.id as unknown)}\r\n              className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-colors ${\r\n                activeTab === tab.id\r\n                  ? 'bg-blue-600 text-white'\r\n                  : 'text-gray-600 hover:text-gray-900'\r\n              }`}\r\n            >\r\n              <Icon className=\"w-4 h-4\" />\r\n              {tab.label}\r\n              {tab.id === '_insights' && aiInsights.filter(i => i.actionable).length > 0 && (\r\n                <span className=\"bg-red-500 text-white text-xs px-1.5 py-0.5 rounded-full\">\r\n                  {aiInsights.filter(i => i.actionable).length}\r\n                </span>\r\n              )}\r\n            </button>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {/* Tab Content */}\r\n      <AnimatePresence mode=\"wait\">\r\n        {/* Overview Tab */}\r\n        {activeTab === 'overview' && (\r\n          <motion.div\r\n            key=\"overview\"\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: -20 }}\r\n            className=\"space-y-6\"\r\n          >\r\n            {/* Active Reminders */}\r\n            <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n              <h2 className=\"text-xl font-semibold mb-4\">Active Reminders</h2>\r\n              <div className=\"space-y-4\">\r\n                {reminders.filter(r => r.enabled).map(reminder => {\r\n                  const medication = medications.find(m => m.id === reminder.medicationId);\r\n                  return (\r\n                    <motion.div\r\n                      key={reminder.id}\r\n                      initial={{ opacity: 0, x: -10 }}\r\n                      animate={{ opacity: 1, x: 0 }}\r\n                      className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\"\r\n                    >\r\n                      <div className=\"flex items-center gap-4\">\r\n                        <div className=\"p-2 bg-blue-100 rounded-lg\">\r\n                          {getReminderTypeIcon(reminder._type)}\r\n                        </div>\r\n                        <div>\r\n                          <h3 className=\"font-medium text-gray-900\">{medication?.name}</h3>\r\n                          <p className=\"text-sm text-gray-600\">\r\n                            {reminder.settings.times?.join(', ')} • {reminder._type} reminder\r\n                          </p>\r\n                          <div className=\"flex items-center gap-2 mt-1\">\r\n                            <span className={`text-xs font-medium ${getEffectivenessColor(reminder.effectiveness)}`}>\r\n                              {Math.round(reminder.effectiveness * 100)}% effective\r\n                            </span>\r\n                            <span className=\"text-xs text-gray-500\">\r\n                              • {Math.round(reminder.successRate * 100)}% success rate\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      <div className=\"flex items-center gap-2\">\r\n                        <button\r\n                          onClick={() => testReminder(reminder._type)}\r\n                          className=\"p-2 text-gray-500 hover:text-gray-700\"\r\n                          title=\"Test reminder\"\r\n                        >\r\n                          <Play className=\"w-4 h-4\" />\r\n                        </button>\r\n                        <button\r\n                          onClick={() => setSelectedMedication(reminder.medicationId)}\r\n                          className=\"p-2 text-gray-500 hover:text-gray-700\"\r\n                          title=\"Configure\"\r\n                        >\r\n                          <Settings className=\"w-4 h-4\" />\r\n                        </button>\r\n                      </div>\r\n                    </motion.div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Today's Schedule */}\r\n            <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n              <h2 className=\"text-xl font-semibold mb-4\">Today's Schedule</h2>\r\n              <div className=\"space-y-3\">\r\n                {medications.flatMap(med => \r\n                  med.schedule?.map((sched: unknown, idx: number) => {\r\n                    const now = new Date();\r\n                    const [_hours, _minutes] = sched.time.split(':');\r\n                    const schedTime = new Date();\r\n                    schedTime.setHours(parseInt(_hours), parseInt(_minutes), 0, 0);\r\n                    const isPast = schedTime < now;\r\n                    const isNext = !isPast && schedTime.getTime() === Math._min(\r\n                      ...medications.flatMap((m: unknown) => \r\n                        m.schedule?.map((s: unknown) => {\r\n                          const [_h, _min] = s.time.split(':');\r\n                          const t = new Date();\r\n                          t.setHours(parseInt(_h), parseInt(_min), 0, 0);\r\n                          return t > now ? t.getTime() : Infinity;\r\n                        }) || []\r\n                      ).filter(t => t !== Infinity)\r\n                    );\r\n\r\n                    return (\r\n                      <div\r\n                        key={`${med.id}-${idx}`}\r\n                        className={`flex items-center gap-4 p-3 rounded-lg ${\r\n                          isPast ? 'bg-gray-50' : isNext ? 'bg-blue-50 border border-blue-200' : 'bg-white border border-gray-200'\r\n                        }`}\r\n                      >\r\n                        <div className={`p-2 rounded-lg ${\r\n                          isPast ? 'bg-gray-200' : isNext ? 'bg-blue-100' : 'bg-green-100'\r\n                        }`}>\r\n                          {isPast ? (\r\n                            sched.taken ? <CheckCircle className=\"w-5 _h-5 text-green-600\" /> : <XCircle className=\"w-5 _h-5 text-red-600\" />\r\n                          ) : (\r\n                            <Pill className={`w-5 _h-5 ${isNext ? 'text-blue-600' : 'text-green-600'}`} />\r\n                          )}\r\n                        </div>\r\n                        <div className=\"flex-1\">\r\n                          <p className=\"font-medium text-gray-900\">{med.name}</p>\r\n                          <p className=\"text-sm text-gray-600\">{med.dosage} • {sched.time}</p>\r\n                        </div>\r\n                        {isNext && (\r\n                          <div className=\"flex items-center gap-1 text-blue-600 text-sm font-medium\">\r\n                            <Clock className=\"w-4 _h-4\" />\r\n                            Next\r\n                          </div>\r\n                        )}\r\n                        {isPast && sched.taken && (\r\n                          <div className=\"text-green-600 text-sm\">\r\n                            ✓ Taken\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    );\r\n                  }) || []\r\n                )}\r\n              </div>\r\n            </div>\r\n          </motion.div>\r\n        )}\r\n\r\n        {/* Configure Tab */}\r\n        {activeTab === 'configure' && (\r\n          <motion.div\r\n            key=\"configure\"\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: -20 }}\r\n            className=\"space-y-6\"\r\n          >\r\n            {/* Test Reminder */}\r\n            <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n              <h2 className=\"text-xl font-semibold mb-4\">Test Reminders</h2>\r\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n                {[\r\n                  { _type: 'push', label: 'Push Notification', icon: Smartphone },\r\n                  { _type: 'sound', label: 'Sound Alert', icon: Volume2 },\r\n                  { _type: 'vibration', label: 'Vibration', icon: Watch },\r\n                  { _type: 'voice', label: 'Voice Reminder', icon: User }\r\n                ].map(test => {\r\n                  const Icon = test.icon;\r\n                  return (\r\n                    <button\r\n                      key={test._type}\r\n                      onClick={() => testReminder(test._type)}\r\n                      disabled={reminderTest?.active && reminderTest._type === test._type}\r\n                      className={`p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors ${\r\n                        reminderTest?.active && reminderTest._type === test._type ? 'bg-blue-50 border-blue-300' : ''\r\n                      }`}\r\n                    >\r\n                      <Icon className=\"w-6 h-6 mx-auto mb-2 text-gray-600\" />\r\n                      <p className=\"text-sm font-medium text-gray-900\">{test.label}</p>\r\n                      {reminderTest?.active && reminderTest._type === test._type && (\r\n                        <p className=\"text-xs text-blue-600 mt-1\">Testing...</p>\r\n                      )}\r\n                    </button>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Smart Features */}\r\n            <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n              <h2 className=\"text-xl font-semibold mb-4\">Smart Features</h2>\r\n              <div className=\"space-y-4\">\r\n                {[\r\n                  {\r\n                    id: 'adaptive',\r\n                    title: 'Adaptive Timing',\r\n                    description: 'AI learns your optimal medication times based on your routine',\r\n                    icon: BrainCircuit,\r\n                    enabled: true\r\n                  },\r\n                  {\r\n                    id: 'location',\r\n                    title: 'Location-Based Reminders',\r\n                    description: 'Get reminders when you arrive at or leave specific places',\r\n                    icon: MapPin,\r\n                    enabled: false\r\n                  },\r\n                  {\r\n                    id: 'context',\r\n                    title: 'Context-Aware Alerts',\r\n                    description: 'Reminders based on your activities, meals, and mood',\r\n                    icon: Activity,\r\n                    enabled: true\r\n                  },\r\n                  {\r\n                    id: 'escalation',\r\n                    title: 'Smart Escalation',\r\n                    description: 'Automatically notify emergency contacts if medication is consistently missed',\r\n                    icon: AlertTriangle,\r\n                    enabled: false\r\n                  }\r\n                ].map(feature => {\r\n                  const Icon = feature.icon;\r\n                  return (\r\n                    <div key={feature.id} className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\">\r\n                      <div className=\"flex items-center gap-4\">\r\n                        <div className=\"p-2 bg-gray-100 rounded-lg\">\r\n                          <Icon className=\"w-5 h-5 text-gray-600\" />\r\n                        </div>\r\n                        <div>\r\n                          <h3 className=\"font-medium text-gray-900\">{feature.title}</h3>\r\n                          <p className=\"text-sm text-gray-600\">{feature.description}</p>\r\n                        </div>\r\n                      </div>\r\n                      <label className=\"flex items-center\">\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          checked={feature.enabled}\r\n                          onChange={() => {}}\r\n                          className=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500\"\r\n                        />\r\n                      </label>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          </motion.div>\r\n        )}\r\n\r\n        {/* AI Insights Tab */}\r\n        {activeTab === '_insights' && (\r\n          <motion.div\r\n            key=\"_insights\"\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: -20 }}\r\n            className=\"space-y-6\"\r\n          >\r\n            <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n              <h2 className=\"text-xl font-semibold mb-4\">AI-Generated Insights</h2>\r\n              <div className=\"space-y-4\">\r\n                {aiInsights.map((insight, index) => (\r\n                  <motion.div\r\n                    key={index}\r\n                    initial={{ opacity: 0, y: 10 }}\r\n                    animate={{ opacity: 1, y: 0 }}\r\n                    transition={{ delay: index * 0.1 }}\r\n                    className=\"p-4 border border-gray-200 rounded-lg\"\r\n                  >\r\n                    <div className=\"flex items-start gap-4\">\r\n                      <div className=\"flex-shrink-0\">\r\n                        {getInsightIcon(insight._type)}\r\n                      </div>\r\n                      <div className=\"flex-1\">\r\n                        <div className=\"flex items-center gap-2 mb-2\">\r\n                          <h3 className=\"font-medium text-gray-900\">{insight.title}</h3>\r\n                          <span className=\"px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full\">\r\n                            {Math.round(insight.confidence * 100)}% confidence\r\n                          </span>\r\n                        </div>\r\n                        <p className=\"text-gray-600 text-sm mb-3\">{insight.description}</p>\r\n                        \r\n                        {insight.actionable && insight.actions && (\r\n                          <div className=\"space-y-2\">\r\n                            <p className=\"text-sm font-medium text-gray-900\">Recommended Actions:</p>\r\n                            <div className=\"space-y-1\">\r\n                              {insight.actions.map((action, actionIndex) => (\r\n                                <div key={actionIndex} className=\"flex items-center gap-2\">\r\n                                  <button className=\"text-sm text-blue-600 hover:text-blue-700 font-medium\">\r\n                                    {action}\r\n                                  </button>\r\n                                  <ChevronRight className=\"w-3 h-3 text-gray-400\" />\r\n                                </div>\r\n                              ))}\r\n                            </div>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </motion.div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </motion.div>\r\n        )}\r\n\r\n        {/* History Tab */}\r\n        {activeTab === 'history' && (\r\n          <motion.div\r\n            key=\"history\"\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: -20 }}\r\n            className=\"space-y-6\"\r\n          >\r\n            <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n              <h2 className=\"text-xl font-semibold mb-4\">Reminder History</h2>\r\n              <div className=\"space-y-3\">\r\n                {[...Array(10)].map((_, index) => (\r\n                  <div key={index} className=\"flex items-center gap-4 p-3 border-l-4 border-blue-200 bg-blue-50 rounded-r-lg\">\r\n                    <div className=\"flex-shrink-0\">\r\n                      {index % 3 === 0 ? (\r\n                        <CheckCircle className=\"w-5 _h-5 text-green-600\" />\r\n                      ) : index % 3 === 1 ? (\r\n                        <Clock className=\"w-5 _h-5 text-yellow-600\" />\r\n                      ) : (\r\n                        <XCircle className=\"w-5 _h-5 text-red-600\" />\r\n                      )}\r\n                    </div>\r\n                    <div className=\"flex-1\">\r\n                      <p className=\"font-medium text-gray-900\">\r\n                        {medications[index % medications.length]?.name || 'Medication'} reminder\r\n                      </p>\r\n                      <p className=\"text-sm text-gray-600\">\r\n                        {index % 3 === 0 ? 'Taken on time' : index % 3 === 1 ? 'Snoozed for 15 _minutes' : 'Missed dose'}\r\n                        • {Math.floor(Math.random() * 5) + 1} hours ago\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n\r\n      {/* Floating Action Button for Emergency */}\r\n      <motion.button\r\n        initial={{ scale: 0 }}\r\n        animate={{ scale: 1 }}\r\n        whileTap={{ scale: 0.9 }}\r\n        className=\"fixed bottom-6 right-6 w-14 h-14 bg-red-600 text-white rounded-full shadow-lg hover:bg-red-700 transition-colors\"\r\n        title=\"Emergency Override\"\r\n      >\r\n        <Zap className=\"w-6 h-6 mx-auto\" />\r\n      </motion.button>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\professional\\ProfessionalSupport.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\professional\\TherapistFinder.tsx","messages":[{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":34,"column":15,"nodeType":"JSXOpeningElement","endLine":34,"endColumn":98},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":45,"column":15,"nodeType":"JSXOpeningElement","endLine":45,"endColumn":98},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":57,"column":15,"nodeType":"JSXOpeningElement","endLine":57,"endColumn":98},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":151,"column":18,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8226,8290],"text":"\r\n              Don&apos;t see what you're looking for?\r\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8226,8290],"text":"\r\n              Don&lsquo;t see what you're looking for?\r\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8226,8290],"text":"\r\n              Don&#39;t see what you're looking for?\r\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8226,8290],"text":"\r\n              Don&rsquo;t see what you're looking for?\r\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":151,"column":33,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8226,8290],"text":"\r\n              Don't see what you&apos;re looking for?\r\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8226,8290],"text":"\r\n              Don't see what you&lsquo;re looking for?\r\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8226,8290],"text":"\r\n              Don't see what you&#39;re looking for?\r\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8226,8290],"text":"\r\n              Don't see what you&rsquo;re looking for?\r\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Therapist Finder Component - Placeholder for compilation\r\n * This component helps users find and connect with mental health professionals\r\n */\r\n\r\nimport React from 'react';\r\n\r\nexport interface TherapistFinderProps {\r\n  location?: string;\r\n  _specialty?: string;\r\n  _insuranceAccepted?: string[];\r\n}\r\n\r\nexport default function TherapistFinder({ location, _specialty, _insuranceAccepted }: TherapistFinderProps) {\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\r\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n        <div className=\"mb-8\">\r\n          <h1 className=\"text-3xl font-display font-bold text-gray-900 dark:text-white mb-2\">\r\n            Find Professional Support\r\n          </h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400\">\r\n            Connect with qualified mental health professionals who understand your needs\r\n          </p>\r\n        </div>\r\n        \r\n        {/* Search Filters */}\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm p-6 mb-8\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n            Search Filters\r\n          </h3>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                Location\r\n              </label>\r\n              <input \r\n                type=\"text\" \r\n                placeholder=\"Enter your city or ZIP code\" \r\n                className=\"w-full px-3 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                defaultValue={location}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                Specialty\r\n              </label>\r\n              <select className=\"w-full px-3 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\">\r\n                <option>All Specialties</option>\r\n                <option>Anxiety & Depression</option>\r\n                <option>Trauma & PTSD</option>\r\n                <option>Couples Therapy</option>\r\n                <option>Family Therapy</option>\r\n              </select>\r\n            </div>\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                Insurance\r\n              </label>\r\n              <select className=\"w-full px-3 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\">\r\n                <option>All Insurance Types</option>\r\n                <option>Blue Cross Blue Shield</option>\r\n                <option>Aetna</option>\r\n                <option>United Healthcare</option>\r\n                <option>Self-Pay</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div className=\"mt-4\">\r\n            <button className=\"px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-lg hover:shadow-lg transition-all transform hover:scale-105\">\r\n              Search Therapists\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Results */}\r\n        <div className=\"space-y-4\">\r\n          <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\r\n            Available Therapists\r\n          </h3>\r\n          \r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm p-6 hover:shadow-md transition-shadow\">\r\n              <div className=\"flex items-start gap-4\">\r\n                <div className=\"w-16 h-16 bg-gradient-to-r from-green-400 to-emerald-500 rounded-full flex items-center justify-center flex-shrink-0\">\r\n                  <span className=\"text-2xl text-white\">👩‍⚕️</span>\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <h4 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Dr. Sarah Johnson</h4>\r\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">Licensed Clinical Psychologist</p>\r\n                  <div className=\"flex flex-wrap gap-2 mb-3\">\r\n                    <span className=\"px-2 py-1 bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 rounded-full text-xs\">\r\n                      Anxiety & Depression\r\n                    </span>\r\n                    <span className=\"px-2 py-1 bg-purple-100 dark:bg-purple-900 text-purple-700 dark:text-purple-300 rounded-full text-xs\">\r\n                      Cognitive Behavioral Therapy\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"flex items-center gap-4\">\r\n                    <span className=\"text-sm text-gray-500\">⭐ 4.9 (127 reviews)</span>\r\n                    <span className=\"text-sm text-gray-500\">📍 Downtown Seattle</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"mt-4 flex gap-2\">\r\n                <button className=\"flex-1 px-4 py-2 bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-lg hover:shadow-lg transition-all text-sm\">\r\n                  Book Appointment\r\n                </button>\r\n                <button className=\"px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-all text-sm\">\r\n                  View Profile\r\n                </button>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm p-6 hover:shadow-md transition-shadow\">\r\n              <div className=\"flex items-start gap-4\">\r\n                <div className=\"w-16 h-16 bg-gradient-to-r from-cyan-400 to-blue-500 rounded-full flex items-center justify-center flex-shrink-0\">\r\n                  <span className=\"text-2xl text-white\">👨‍⚕️</span>\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <h4 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Dr. Michael Chen</h4>\r\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">Licensed Marriage & Family Therapist</p>\r\n                  <div className=\"flex flex-wrap gap-2 mb-3\">\r\n                    <span className=\"px-2 py-1 bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-300 rounded-full text-xs\">\r\n                      Trauma & PTSD\r\n                    </span>\r\n                    <span className=\"px-2 py-1 bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-300 rounded-full text-xs\">\r\n                      EMDR Therapy\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"flex items-center gap-4\">\r\n                    <span className=\"text-sm text-gray-500\">⭐ 4.8 (89 reviews)</span>\r\n                    <span className=\"text-sm text-gray-500\">📍 Bellevue</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"mt-4 flex gap-2\">\r\n                <button className=\"flex-1 px-4 py-2 bg-gradient-to-r from-cyan-400 to-blue-500 text-white rounded-lg hover:shadow-lg transition-all text-sm\">\r\n                  Book Appointment\r\n                </button>\r\n                <button className=\"px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-all text-sm\">\r\n                  View Profile\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Call to Action */}\r\n          <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 dark:from-gray-800 dark:to-gray-800 rounded-xl p-6 text-center mt-8\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\r\n              Don't see what you're looking for?\r\n            </h3>\r\n            <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\r\n              Our care coordinators can help you find the perfect therapist match\r\n            </p>\r\n            <button className=\"px-6 py-3 bg-gradient-to-r from-green-400 to-emerald-500 text-white rounded-lg hover:shadow-lg transition-all transform hover:scale-105\">\r\n              Get Personalized Help\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { TherapistFinder };","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\professional\\TherapistProfile.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":246,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":246,"endColumn":22},{"ruleId":"jsx-a11y/media-has-caption","severity":2,"message":"Media elements such as <audio> and <video> must have a <track> for captions.","line":481,"column":25,"nodeType":"JSXOpeningElement","endLine":485,"endColumn":26}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '@/utils/logger';\nimport React, { useState, useEffect } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport {\r\n  User,\r\n  Star,\r\n  MapPin,\r\n  Clock,\r\n  Phone,\r\n  Mail,\r\n  Globe,\r\n  Calendar,\r\n  Video,\r\n  MessageSquare,\r\n  Award,\r\n  GraduationCap,\r\n  Languages,\r\n  Shield,\r\n  CheckCircle,\r\n  _Heart,\r\n  _BookOpen,\r\n  Users,\r\n  _FileText,\r\n  Play,\r\n  Pause,\r\n  Briefcase,\r\n  Volume2,\r\n  VolumeX,\r\n  _ChevronLeft,\r\n  _ChevronRight,\r\n  ThumbsUp,\r\n  Flag,\r\n  Share2\r\n} from 'lucide-react';\r\nimport { _therapistService } from '../../services/professional/TherapistService';\r\n\r\ninterface TherapistProfileProps {\r\n  therapistId: string;\r\n  onBookAppointment: () => void;\r\n  _onClose?: () => void;\r\n}\r\n\r\ninterface Review {\r\n  id: string;\r\n  patientName: string;\r\n  rating: number;\r\n  comment: string;\r\n  date: Date;\r\n  verified: boolean;\r\n  helpful: number;\r\n  specialization: string;\r\n}\r\n\r\ninterface EducationItem {\r\n  degree: string;\r\n  institution: string;\r\n  year: number;\r\n  field: string;\r\n}\r\n\r\ninterface ExperienceItem {\r\n  title: string;\r\n  organization: string;\r\n  startYear: number;\r\n  endYear?: number;\r\n  description: string;\r\n}\r\n\r\nconst mockReviews: Review[] = [\r\n  {\r\n    id: '1',\r\n    patientName: 'Sarah M.',\r\n    rating: 5,\r\n    comment: 'Dr. Chen has been instrumental in helping me manage my anxiety. Her approach is compassionate yet practical, and she provides concrete tools I can use daily. The EMDR sessions were particularly effective for processing past trauma.',\r\n    date: new Date('2024-01-15'),\r\n    verified: true,\r\n    helpful: 23,\r\n    specialization: 'Anxiety Disorders'\r\n  },\r\n  {\r\n    id: '2',\r\n    patientName: 'Michael R.',\r\n    rating: 5,\r\n    comment: 'After struggling with depression for years, I finally found someone who truly understands. The CBT techniques have been life-changing, and Dr. Chen creates such a safe, non-judgmental space.',\r\n    date: new Date('2024-02-08'),\r\n    verified: true,\r\n    helpful: 18,\r\n    specialization: 'Depression'\r\n  },\r\n  {\r\n    id: '3',\r\n    patientName: 'Jennifer L.',\r\n    rating: 4,\r\n    comment: 'Great therapist with deep knowledge of trauma therapy. The mindfulness-based approach really resonated with me. Only reason for 4 stars is that scheduling can sometimes be challenging due to high demand.',\r\n    date: new Date('2024-02-22'),\r\n    verified: true,\r\n    helpful: 12,\r\n    specialization: 'Trauma & PTSD'\r\n  }\r\n];\r\n\r\nconst mockEducation: EducationItem[] = [\r\n  {\r\n    degree: 'Ph.D. in Clinical Psychology',\r\n    institution: 'Stanford University',\r\n    year: 2010,\r\n    field: 'Clinical Psychology with specialization in Anxiety Disorders'\r\n  },\r\n  {\r\n    degree: 'M.A. in Psychology',\r\n    institution: 'University of California, Berkeley',\r\n    year: 2008,\r\n    field: 'Cognitive Behavioral Psychology'\r\n  },\r\n  {\r\n    degree: 'B.A. in Psychology',\r\n    institution: 'UCLA',\r\n    year: 2006,\r\n    field: 'Psychology with Minor in Neuroscience'\r\n  }\r\n];\r\n\r\nconst mockExperience: ExperienceItem[] = [\r\n  {\r\n    title: 'Senior Clinical Psychologist',\r\n    organization: 'Bay Area Mental Health Clinic',\r\n    startYear: 2015,\r\n    description: 'Leading trauma-informed care initiatives and supervising junior clinicians. Specialized in complex PTSD and anxiety disorders.'\r\n  },\r\n  {\r\n    title: 'Staff Psychologist',\r\n    organization: 'UCSF Medical Center',\r\n    startYear: 2012,\r\n    endYear: 2015,\r\n    description: 'Provided individual and group therapy for patients with various mental health conditions. Developed specialized programs for anxiety management.'\r\n  },\r\n  {\r\n    title: 'Postdoctoral Fellow',\r\n    organization: 'Palo Alto Veterans Affairs',\r\n    startYear: 2010,\r\n    endYear: 2012,\r\n    description: 'Specialized training in EMDR and trauma therapy. Worked extensively with veterans experiencing PTSD and adjustment disorders.'\r\n  }\r\n];\r\n\r\nexport function TherapistProfile({ therapistId, onBookAppointment, _onClose }: TherapistProfileProps) {\r\n  const [therapist, setTherapist] = useState<unknown>(null);\r\n  const [activeTab, setActiveTab] = useState<'overview' | 'reviews' | 'credentials' | 'availability'>('overview');\r\n  const [_selectedReview, _setSelectedReview] = useState<Review | null>(null);\r\n  const [isVideoPlaying, setIsVideoPlaying] = useState(false);\r\n  const [isMuted, setIsMuted] = useState(true);\r\n  const [_loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const loadTherapist = async () => {\r\n      setLoading(true);\r\n      try {\r\n        // In production, fetch from API\r\n        const _therapistData = {\r\n          id: therapistId,\r\n          name: 'Dr. Sarah Chen, PhD',\r\n          title: 'Licensed Clinical Psychologist',\r\n          credentials: ['PhD Clinical Psychology', 'Licensed Psychologist', 'EMDR Certified'],\r\n          specializations: ['Anxiety Disorders', 'Trauma & PTSD', 'Depression'],\r\n          approaches: ['Cognitive Behavioral Therapy (_CBT)', 'EMDR', 'Mindfulness-Based Therapy'],\r\n          description: 'Dr. Chen is a compassionate and experienced clinical psychologist specializing in anxiety, trauma, and depression. With over 12 years of experience, she combines evidence-based therapeutic approaches with a warm, supportive style to help clients achieve lasting change.',\r\n          longBio: `Dr. Sarah Chen brings over 12 years of dedicated experience in clinical psychology, with a particular focus on anxiety disorders, trauma recovery, and depression treatment. She earned her Ph.D. in Clinical Psychology from Stanford University and has since been committed to providing compassionate, evidence-based care.\r\n\r\nDr. Chen's approach integrates cognitive-behavioral therapy (_CBT) with EMDR and mindfulness-based interventions, allowing her to tailor treatment to each client's unique needs. She believes in creating a safe, non-judgmental space where clients feel heard and supported as they work toward their goals.\r\n\r\nHer expertise in trauma-informed care has made her particularly effective in helping clients process difficult experiences and develop healthy coping strategies. Dr. Chen is fluent in English and Mandarin, and she values cultural sensitivity in her practice.\r\n\r\nWhen not in session, Dr. Chen enjoys reading, hiking, and spending time with her family. She is also involved in training the next generation of therapists and regularly presents at professional conferences.`,\r\n          rating: 4.9,\r\n          reviewCount: 127,\r\n          experience: 12,\r\n          location: {\r\n            city: 'San Francisco',\r\n            state: 'CA',\r\n            address: '123 Wellness St, Suite 400',\r\n            isVirtual: true,\r\n            acceptsInPerson: true\r\n          },\r\n          availability: {\r\n            nextAvailable: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),\r\n            weeklySlots: 15,\r\n            timeZone: 'PST',\r\n            regularHours: {\r\n              monday: '9:00 AM - 5:00 PM',\r\n              tuesday: '9:00 AM - 5:00 PM',\r\n              wednesday: '10:00 AM - 6:00 PM',\r\n              thursday: '9:00 AM - 5:00 PM',\r\n              friday: '9:00 AM - 4:00 PM',\r\n              saturday: 'Closed',\r\n              sunday: 'Closed'\r\n            }\r\n          },\r\n          insurance: {\r\n            accepted: ['Blue Cross Blue Shield', 'Aetna', 'United Healthcare'],\r\n            selfPay: true,\r\n            slidingScale: true,\r\n            sessionRate: 180\r\n          },\r\n          languages: ['English', 'Mandarin'],\r\n          demographics: {\r\n            age: '35-44',\r\n            gender: 'Female',\r\n            ethnicity: ['Asian American']\r\n          },\r\n          verified: true,\r\n          acceptingNew: true,\r\n          responseTime: '< 24 hours',\r\n          badges: ['EMDR Certified', 'Trauma Specialist', 'LGBTQ+ Affirming'],\r\n          contact: {\r\n            phone: '(555) 123-4567',\r\n            email: 'dr.chen@example.com',\r\n            website: 'https://drchenwellness.com'\r\n          },\r\n          virtualPlatforms: ['Secure Video Portal', 'Zoom (_Healthcare)', 'Doxy.me'],\r\n          photos: [\r\n            '/api/placeholder/300/400', // Professional headshot\r\n            '/api/placeholder/400/300', // Office photo\r\n            '/api/placeholder/400/300'  // Therapy room\r\n          ],\r\n          introVideo: '/api/placeholder/video/intro.mp4',\r\n          specialtyAreas: [\r\n            {\r\n              name: 'Anxiety Disorders',\r\n              description: 'Specialized treatment for generalized anxiety, social anxiety, panic disorder, and phobias using CBT and exposure therapy.',\r\n              experience: '10+ years'\r\n            },\r\n            {\r\n              name: 'Trauma & PTSD',\r\n              description: 'EMDR-certified therapist with extensive experience in complex trauma, PTSD, and childhood trauma recovery.',\r\n              experience: '8+ years'\r\n            },\r\n            {\r\n              name: 'Depression',\r\n              description: 'Evidence-based treatment for major depression, including CBT, behavioral activation, and mindfulness approaches.',\r\n              experience: '12+ years'\r\n            }\r\n          ]\r\n        };\r\n        \r\n        setTherapist(_therapistData);\r\n      } catch (_error) {\r\n        logger.error('Failed to load therapist:');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadTherapist();\r\n  }, [therapistId]);\r\n\r\n  const renderStars = (rating: number, size: 'sm' | 'md' | 'lg' = 'md') => {\r\n    const sizeClasses = {\r\n      sm: 'w-3 h-3',\r\n      md: 'w-4 h-4',\r\n      lg: 'w-5 h-5'\r\n    };\r\n    \r\n    return (\r\n      <div className=\"flex items-center\">\r\n        {[...Array(5)].map((_, i) => (\r\n          <Star \r\n            key={i} \r\n            className={`${sizeClasses[size]} ${\r\n              i < Math.floor(rating) \r\n                ? 'text-yellow-400 fill-current' \r\n                : i < rating \r\n                  ? 'text-yellow-400 fill-current opacity-50'\r\n                  : 'text-gray-300'\r\n            }`} \r\n          />\r\n        ))}\r\n        <span className=\"ml-1 text-sm text-gray-600\">({rating})</span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  if (_loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!therapist) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"text-center\">\r\n          <h2 className=\"text-xl font-semibold text-gray-900\">Therapist not found</h2>\r\n          <p className=\"text-gray-600\">The requested therapist profile could not be loaded.</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      {/* Header */}\r\n      <div className=\"bg-white shadow-sm\">\r\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"py-8\">\r\n            <div className=\"flex items-start justify-between\">\r\n              <div className=\"flex items-start space-x-6\">\r\n                <div className=\"relative\">\r\n                  <img\r\n                    src={therapist.photos[0] || \"/api/placeholder/150/200\"}\r\n                    alt={therapist.name}\r\n                    className=\"w-32 h-40 rounded-xl object-cover shadow-lg\"\r\n                  />\r\n                  {therapist.verified && (\r\n                    <div className=\"absolute -top-2 -right-2 bg-blue-600 rounded-full p-1\">\r\n                      <CheckCircle className=\"w-4 h-4 text-white\" />\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                \r\n                <div className=\"flex-1\">\r\n                  <div className=\"flex items-center gap-3 mb-2\">\r\n                    <h1 className=\"text-3xl font-bold text-gray-900\">{therapist.name}</h1>\r\n                    {therapist.verified && (\r\n                      <span className=\"flex items-center gap-1 bg-blue-100 text-blue-700 px-2 py-1 rounded-full text-xs font-medium\">\r\n                        <Shield className=\"w-3 h-3\" />\r\n                        Verified\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <p className=\"text-lg text-gray-600 mb-3\">{therapist.title}</p>\r\n                  \r\n                  <div className=\"flex items-center gap-4 mb-4\">\r\n                    {renderStars(therapist.rating, 'lg')}\r\n                    <span className=\"text-sm text-gray-500\">\r\n                      {therapist.reviewCount} reviews\r\n                    </span>\r\n                    <span className=\"text-sm text-gray-500\">\r\n                      {therapist.experience} years experience\r\n                    </span>\r\n                  </div>\r\n\r\n                  <div className=\"flex flex-wrap gap-2 mb-4\">\r\n                    {therapist.specializations.map((spec: string) => (\r\n                      <span key={spec} className=\"px-3 py-1 bg-blue-50 text-blue-700 text-sm rounded-full\">\r\n                        {spec}\r\n                      </span>\r\n                    ))}\r\n                  </div>\r\n\r\n                  <div className=\"flex items-center gap-4 text-sm text-gray-600 mb-4\">\r\n                    <div className=\"flex items-center gap-1\">\r\n                      <MapPin className=\"w-4 h-4\" />\r\n                      <span>{therapist.location.city}, {therapist.location.state}</span>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-1\">\r\n                      <Languages className=\"w-4 h-4\" />\r\n                      <span>{therapist.languages.join(', ')}</span>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-1\">\r\n                      <Clock className=\"w-4 h-4\" />\r\n                      <span>Response time: {therapist.responseTime}</span>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"flex flex-wrap gap-2\">\r\n                    {therapist.badges.map((badge: string) => (\r\n                      <span key={badge} className=\"flex items-center gap-1 px-2 py-1 bg-purple-50 text-purple-700 text-xs rounded-full\">\r\n                        <Award className=\"w-3 h-3\" />\r\n                        {badge}\r\n                      </span>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"text-right\">\r\n                <div className=\"bg-gradient-to-r from-blue-50 to-green-50 p-4 rounded-xl mb-4\">\r\n                  <div className=\"text-2xl font-bold text-gray-900 mb-1\">\r\n                    ${therapist.insurance.sessionRate}\r\n                  </div>\r\n                  <div className=\"text-sm text-gray-600\">per session</div>\r\n                  {therapist.insurance.slidingScale && (\r\n                    <div className=\"text-xs text-blue-600 mt-1\">Sliding scale available</div>\r\n                  )}\r\n                </div>\r\n                \r\n                <div className=\"space-y-2\">\r\n                  <button\r\n                    onClick={onBookAppointment}\r\n                    className=\"w-full bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors\"\r\n                  >\r\n                    Book Appointment\r\n                  </button>\r\n                  \r\n                  <div className=\"flex gap-2\">\r\n                    <button className=\"flex-1 border border-gray-300 px-4 py-2 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors\">\r\n                      <MessageSquare className=\"w-4 h-4 inline mr-1\" />\r\n                      Message\r\n                    </button>\r\n                    <button className=\"border border-gray-300 px-3 py-2 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors\">\r\n                      <Share2 className=\"w-4 h-4\" />\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"text-xs text-gray-500 mt-2 flex items-center gap-1\">\r\n                  <Calendar className=\"w-3 h-3\" />\r\n                  Next available: {therapist.availability.nextAvailable.toLocaleDateString()}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Navigation Tabs */}\r\n          <div className=\"border-t border-gray-200\">\r\n            <nav className=\"flex space-x-8\">\r\n              {[\r\n                { id: 'overview', label: 'Overview', icon: User },\r\n                { id: 'reviews', label: 'Reviews', icon: Star },\r\n                { id: 'credentials', label: 'Credentials', icon: GraduationCap },\r\n                { id: 'availability', label: 'Availability', icon: Calendar }\r\n              ].map(tab => {\r\n                const Icon = tab.icon;\r\n                return (\r\n                  <button\r\n                    key={tab.id}\r\n                    onClick={() => setActiveTab(tab.id as unknown)}\r\n                    className={`flex items-center gap-2 py-4 px-1 border-b-2 font-medium text-sm ${\r\n                      activeTab === tab.id\r\n                        ? 'border-blue-500 text-blue-600'\r\n                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\r\n                    }`}\r\n                  >\r\n                    <Icon className=\"w-4 h-4\" />\r\n                    {tab.label}\r\n                    {tab.id === 'reviews' && (\r\n                      <span className=\"bg-gray-100 text-gray-600 px-2 py-0.5 rounded-full text-xs\">\r\n                        {therapist.reviewCount}\r\n                      </span>\r\n                    )}\r\n                  </button>\r\n                );\r\n              })}\r\n            </nav>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Tab Content */}\r\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n        <AnimatePresence mode=\"wait\">\r\n          {/* Overview Tab */}\r\n          {activeTab === 'overview' && (\r\n            <motion.div\r\n              key=\"overview\"\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              exit={{ opacity: 0, y: -20 }}\r\n              className=\"grid lg:grid-cols-3 gap-8\"\r\n            >\r\n              <div className=\"lg:col-span-2 space-y-8\">\r\n                {/* About */}\r\n                <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n                  <h2 className=\"text-xl font-semibold mb-4\">About Dr. Chen</h2>\r\n                  <div className=\"prose prose-gray max-w-none\">\r\n                    <p className=\"text-gray-700 leading-relaxed whitespace-pre-line\">\r\n                      {therapist.longBio}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Intro Video */}\r\n                {therapist.introVideo && (\r\n                  <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n                    <h2 className=\"text-xl font-semibold mb-4\">Introduction Video</h2>\r\n                    <div className=\"relative bg-gray-100 rounded-xl overflow-hidden\">\r\n                      <div className=\"aspect-video\">\r\n                        <video\r\n                          className=\"w-full h-full object-cover\"\r\n                          poster=\"/api/placeholder/600/400\"\r\n                          muted={isMuted}\r\n                        >\r\n                          <source src={therapist.introVideo} type=\"video/mp4\" />\r\n                        </video>\r\n                      </div>\r\n                      <div className=\"absolute inset-0 flex items-center justify-center\">\r\n                        <button\r\n                          onClick={() => setIsVideoPlaying(!isVideoPlaying)}\r\n                          className=\"bg-white/90 hover:bg-white p-4 rounded-full shadow-lg transition-colors\"\r\n                        >\r\n                          {isVideoPlaying ? (\r\n                            <Pause className=\"w-8 h-8 text-gray-800\" />\r\n                          ) : (\r\n                            <Play className=\"w-8 h-8 text-gray-800\" />\r\n                          )}\r\n                        </button>\r\n                      </div>\r\n                      <div className=\"absolute bottom-4 right-4\">\r\n                        <button\r\n                          onClick={() => setIsMuted(!isMuted)}\r\n                          className=\"bg-black/50 text-white p-2 rounded-full hover:bg-black/70 transition-colors\"\r\n                        >\r\n                          {isMuted ? (\r\n                            <VolumeX className=\"w-4 h-4\" />\r\n                          ) : (\r\n                            <Volume2 className=\"w-4 h-4\" />\r\n                          )}\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Specialty Areas */}\r\n                <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n                  <h2 className=\"text-xl font-semibold mb-4\">Specialty Areas</h2>\r\n                  <div className=\"space-y-6\">\r\n                    {therapist.specialtyAreas.map((area: unknown, index: number) => (\r\n                      <div key={index} className=\"border-l-4 border-blue-200 pl-4\">\r\n                        <div className=\"flex items-center justify-between mb-2\">\r\n                          <h3 className=\"font-medium text-gray-900\">{area.name}</h3>\r\n                          <span className=\"text-sm text-gray-500\">{area.experience}</span>\r\n                        </div>\r\n                        <p className=\"text-gray-700 text-sm\">{area.description}</p>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Treatment Approaches */}\r\n                <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n                  <h2 className=\"text-xl font-semibold mb-4\">Treatment Approaches</h2>\r\n                  <div className=\"grid md:grid-cols-2 gap-4\">\r\n                    {therapist.approaches.map((approach: string) => (\r\n                      <div key={approach} className=\"flex items-center gap-3 p-3 bg-green-50 rounded-lg\">\r\n                        <CheckCircle className=\"w-5 h-5 text-green-600 flex-shrink-0\" />\r\n                        <span className=\"text-gray-700\">{approach}</span>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Sidebar */}\r\n              <div className=\"space-y-6\">\r\n                {/* Quick Info */}\r\n                <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n                  <h3 className=\"font-semibold mb-4\">Quick Info</h3>\r\n                  <div className=\"space-y-3 text-sm\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <Users className=\"w-4 h-4 text-gray-400\" />\r\n                      <span>{therapist.acceptingNew ? 'Accepting new clients' : 'Waitlist only'}</span>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <Video className=\"w-4 h-4 text-gray-400\" />\r\n                      <span>Virtual sessions available</span>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <MapPin className=\"w-4 h-4 text-gray-400\" />\r\n                      <span>{therapist.location.acceptsInPerson ? 'In-person available' : 'Virtual only'}</span>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <Shield className=\"w-4 h-4 text-gray-400\" />\r\n                      <span>HIPAA compliant</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Insurance */}\r\n                <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n                  <h3 className=\"font-semibold mb-4\">Insurance & Payment</h3>\r\n                  <div className=\"space-y-3\">\r\n                    <div>\r\n                      <p className=\"text-sm text-gray-600 mb-2\">Accepted Insurance:</p>\r\n                      <div className=\"space-y-1\">\r\n                        {therapist.insurance.accepted.map((ins: string) => (\r\n                          <div key={ins} className=\"flex items-center gap-2 text-sm\">\r\n                            <CheckCircle className=\"w-3 h-3 text-green-500\" />\r\n                            <span>{ins}</span>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"pt-3 border-t border-gray-200\">\r\n                      <p className=\"text-sm text-gray-600 mb-2\">Payment Options:</p>\r\n                      <div className=\"space-y-1 text-sm\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <CheckCircle className=\"w-3 h-3 text-green-500\" />\r\n                          <span>Insurance</span>\r\n                        </div>\r\n                        {therapist.insurance.selfPay && (\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <CheckCircle className=\"w-3 h-3 text-green-500\" />\r\n                            <span>Self-pay</span>\r\n                          </div>\r\n                        )}\r\n                        {therapist.insurance.slidingScale && (\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <CheckCircle className=\"w-3 h-3 text-green-500\" />\r\n                            <span>Sliding scale</span>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Contact */}\r\n                <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n                  <h3 className=\"font-semibold mb-4\">Contact Information</h3>\r\n                  <div className=\"space-y-3\">\r\n                    {therapist.contact.phone && (\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <Phone className=\"w-4 h-4 text-gray-400\" />\r\n                        <a href={`tel:${therapist.contact.phone}`} className=\"text-blue-600 hover:underline\">\r\n                          {therapist.contact.phone}\r\n                        </a>\r\n                      </div>\r\n                    )}\r\n                    {therapist.contact.email && (\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <Mail className=\"w-4 h-4 text-gray-400\" />\r\n                        <a href={`mailto:${therapist.contact.email}`} className=\"text-blue-600 hover:underline\">\r\n                          {therapist.contact.email}\r\n                        </a>\r\n                      </div>\r\n                    )}\r\n                    {therapist.contact.website && (\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <Globe className=\"w-4 h-4 text-gray-400\" />\r\n                        <a href={therapist.contact.website} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-600 hover:underline\">\r\n                          Visit Website\r\n                        </a>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </motion.div>\r\n          )}\r\n\r\n          {/* Reviews Tab */}\r\n          {activeTab === 'reviews' && (\r\n            <motion.div\r\n              key=\"reviews\"\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              exit={{ opacity: 0, y: -20 }}\r\n              className=\"space-y-6\"\r\n            >\r\n              {/* Review Summary */}\r\n              <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n                <div className=\"flex items-center gap-8\">\r\n                  <div className=\"text-center\">\r\n                    <div className=\"text-4xl font-bold text-gray-900\">{therapist.rating}</div>\r\n                    {renderStars(therapist.rating, 'lg')}\r\n                    <div className=\"text-sm text-gray-500 mt-1\">{therapist.reviewCount} reviews</div>\r\n                  </div>\r\n                  \r\n                  <div className=\"flex-1\">\r\n                    <div className=\"space-y-2\">\r\n                      {[5, 4, 3, 2, 1].map(stars => {\r\n                        const count = Math.floor(Math.random() * 30) + (stars === 5 ? 80 : stars === 4 ? 30 : 5);\r\n                        const percentage = (count / therapist.reviewCount) * 100;\r\n                        \r\n                        return (\r\n                          <div key={stars} className=\"flex items-center gap-3\">\r\n                            <span className=\"text-sm w-12\">{stars} star</span>\r\n                            <div className=\"flex-1 bg-gray-200 rounded-full h-2\">\r\n                              <div \r\n                                className=\"bg-yellow-400 h-2 rounded-full\"\r\n                                style={{ width: `${percentage}%` }}\r\n                              ></div>\r\n                            </div>\r\n                            <span className=\"text-sm text-gray-500 w-8\">{count}</span>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Individual Reviews */}\r\n              <div className=\"space-y-4\">\r\n                {mockReviews.map(review => (\r\n                  <div key={review.id} className=\"bg-white rounded-xl shadow-sm p-6\">\r\n                    <div className=\"flex items-start justify-between mb-4\">\r\n                      <div className=\"flex items-center gap-3\">\r\n                        <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white font-semibold\">\r\n                          {review.patientName.charAt(0)}\r\n                        </div>\r\n                        <div>\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <span className=\"font-medium\">{review.patientName}</span>\r\n                            {review.verified && (\r\n                              <CheckCircle className=\"w-4 h-4 text-green-500\" />\r\n                            )}\r\n                          </div>\r\n                          <div className=\"flex items-center gap-2\">\r\n                            {renderStars(review.rating, 'sm')}\r\n                            <span className=\"text-xs text-gray-500\">\r\n                              {review.date.toLocaleDateString()}\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      <span className=\"px-2 py-1 bg-blue-50 text-blue-700 text-xs rounded-full\">\r\n                        {review.specialization}\r\n                      </span>\r\n                    </div>\r\n                    \r\n                    <p className=\"text-gray-700 mb-4 leading-relaxed\">{review.comment}</p>\r\n                    \r\n                    <div className=\"flex items-center justify-between text-sm\">\r\n                      <button className=\"flex items-center gap-1 text-gray-500 hover:text-gray-700\">\r\n                        <ThumbsUp className=\"w-4 h-4\" />\r\n                        <span>Helpful ({review.helpful})</span>\r\n                      </button>\r\n                      \r\n                      <button className=\"flex items-center gap-1 text-gray-500 hover:text-gray-700\">\r\n                        <Flag className=\"w-4 h-4\" />\r\n                        <span>Report</span>\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </motion.div>\r\n          )}\r\n\r\n          {/* Credentials Tab */}\r\n          {activeTab === 'credentials' && (\r\n            <motion.div\r\n              key=\"credentials\"\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              exit={{ opacity: 0, y: -20 }}\r\n              className=\"grid lg:grid-cols-2 gap-8\"\r\n            >\r\n              <div className=\"space-y-6\">\r\n                {/* Education */}\r\n                <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n                  <h2 className=\"text-xl font-semibold mb-6\">Education</h2>\r\n                  <div className=\"space-y-6\">\r\n                    {mockEducation.map((edu, index) => (\r\n                      <div key={index} className=\"flex items-start gap-4\">\r\n                        <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0\">\r\n                          <GraduationCap className=\"w-6 h-6 text-blue-600\" />\r\n                        </div>\r\n                        <div className=\"flex-1\">\r\n                          <h3 className=\"font-semibold text-gray-900\">{edu.degree}</h3>\r\n                          <p className=\"text-blue-600\">{edu.institution}</p>\r\n                          <p className=\"text-sm text-gray-600 mt-1\">{edu.field}</p>\r\n                          <p className=\"text-sm text-gray-500\">{edu.year}</p>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Licenses & Certifications */}\r\n                <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n                  <h2 className=\"text-xl font-semibold mb-6\">Licenses & Certifications</h2>\r\n                  <div className=\"space-y-4\">\r\n                    {therapist.credentials.map((credential: string, index: number) => (\r\n                      <div key={index} className=\"flex items-center gap-3 p-3 border border-green-200 rounded-lg\">\r\n                        <Award className=\"w-5 h-5 text-green-600\" />\r\n                        <span className=\"font-medium text-gray-900\">{credential}</span>\r\n                        <span className=\"ml-auto text-sm text-green-600\">Verified</span>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"space-y-6\">\r\n                {/* Professional Experience */}\r\n                <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n                  <h2 className=\"text-xl font-semibold mb-6\">Professional Experience</h2>\r\n                  <div className=\"space-y-6\">\r\n                    {mockExperience.map((exp, index) => (\r\n                      <div key={index} className=\"relative\">\r\n                        {index !== mockExperience.length - 1 && (\r\n                          <div className=\"absolute left-6 top-12 w-0.5 h-16 bg-gray-200\"></div>\r\n                        )}\r\n                        <div className=\"flex items-start gap-4\">\r\n                          <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center flex-shrink-0\">\r\n                            <Briefcase className=\"w-6 h-6 text-purple-600\" />\r\n                          </div>\r\n                          <div className=\"flex-1\">\r\n                            <h3 className=\"font-semibold text-gray-900\">{exp.title}</h3>\r\n                            <p className=\"text-purple-600\">{exp.organization}</p>\r\n                            <p className=\"text-sm text-gray-500 mb-2\">\r\n                              {exp.startYear} - {exp.endYear || 'Present'}\r\n                            </p>\r\n                            <p className=\"text-sm text-gray-700\">{exp.description}</p>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </motion.div>\r\n          )}\r\n\r\n          {/* Availability Tab */}\r\n          {activeTab === 'availability' && (\r\n            <motion.div\r\n              key=\"availability\"\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              exit={{ opacity: 0, y: -20 }}\r\n              className=\"grid lg:grid-cols-2 gap-8\"\r\n            >\r\n              <div className=\"space-y-6\">\r\n                {/* Regular Hours */}\r\n                <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n                  <h2 className=\"text-xl font-semibold mb-6\">Regular Hours</h2>\r\n                  <div className=\"space-y-3\">\r\n                    {Object.entries(therapist.availability.regularHours).map(([day, hours]) => (\r\n                      <div key={day} className=\"flex justify-between items-center py-2 border-b border-gray-100 last:border-b-0\">\r\n                        <span className=\"font-medium capitalize text-gray-900\">{day}</span>\r\n                        <span className=\"text-gray-600\">{hours as string}</span>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                  \r\n                  <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\r\n                    <p className=\"text-sm text-blue-700\">\r\n                      <Clock className=\"w-4 h-4 inline mr-1\" />\r\n                      Timezone: {therapist.availability.timeZone}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Session Formats */}\r\n                <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n                  <h2 className=\"text-xl font-semibold mb-6\">Session Options</h2>\r\n                  <div className=\"space-y-4\">\r\n                    {therapist.location.isVirtual && (\r\n                      <div className=\"flex items-center gap-3 p-4 border border-blue-200 rounded-lg\">\r\n                        <Video className=\"w-6 h-6 text-blue-600\" />\r\n                        <div>\r\n                          <h3 className=\"font-medium text-gray-900\">Virtual Sessions</h3>\r\n                          <p className=\"text-sm text-gray-600\">Secure video therapy sessions</p>\r\n                          <p className=\"text-xs text-gray-500 mt-1\">\r\n                            Platforms: {therapist.virtualPlatforms?.join(', ')}\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                    \r\n                    {therapist.location.acceptsInPerson && (\r\n                      <div className=\"flex items-center gap-3 p-4 border border-green-200 rounded-lg\">\r\n                        <MapPin className=\"w-6 h-6 text-green-600\" />\r\n                        <div>\r\n                          <h3 className=\"font-medium text-gray-900\">In-Person Sessions</h3>\r\n                          <p className=\"text-sm text-gray-600\">Office visits available</p>\r\n                          <p className=\"text-xs text-gray-500 mt-1\">\r\n                            {therapist.location.address}\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"space-y-6\">\r\n                {/* Booking Info */}\r\n                <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n                  <h2 className=\"text-xl font-semibold mb-6\">Booking Information</h2>\r\n                  <div className=\"space-y-4\">\r\n                    <div className=\"p-4 bg-green-50 rounded-lg\">\r\n                      <div className=\"flex items-center gap-2 mb-2\">\r\n                        <CheckCircle className=\"w-5 h-5 text-green-600\" />\r\n                        <span className=\"font-medium text-green-900\">\r\n                          {therapist.acceptingNew ? 'Accepting New Clients' : 'Waitlist Available'}\r\n                        </span>\r\n                      </div>\r\n                      <p className=\"text-sm text-green-700\">\r\n                        Next available appointment: {therapist.availability.nextAvailable.toLocaleDateString()}\r\n                      </p>\r\n                    </div>\r\n                    \r\n                    <div className=\"space-y-3 text-sm\">\r\n                      <div className=\"flex justify-between\">\r\n                        <span className=\"text-gray-600\">Typical response time:</span>\r\n                        <span className=\"font-medium\">{therapist.responseTime}</span>\r\n                      </div>\r\n                      <div className=\"flex justify-between\">\r\n                        <span className=\"text-gray-600\">Weekly availability:</span>\r\n                        <span className=\"font-medium\">{therapist.availability.weeklySlots} slots</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <button\r\n                    onClick={onBookAppointment}\r\n                    className=\"w-full mt-6 bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors\"\r\n                  >\r\n                    Book Appointment\r\n                  </button>\r\n                </div>\r\n\r\n                {/* Cancellation Policy */}\r\n                <div className=\"bg-white rounded-xl shadow-sm p-6\">\r\n                  <h2 className=\"text-xl font-semibold mb-4\">Policies</h2>\r\n                  <div className=\"space-y-3 text-sm\">\r\n                    <div>\r\n                      <h3 className=\"font-medium text-gray-900 mb-1\">Cancellation Policy</h3>\r\n                      <p className=\"text-gray-600\">\r\n                        24-hour notice required for cancellations. Late cancellations may be charged.\r\n                      </p>\r\n                    </div>\r\n                    \r\n                    <div>\r\n                      <h3 className=\"font-medium text-gray-900 mb-1\">No-Show Policy</h3>\r\n                      <p className=\"text-gray-600\">\r\n                        No-show appointments will be charged the full session fee.\r\n                      </p>\r\n                    </div>\r\n                    \r\n                    <div>\r\n                      <h3 className=\"font-medium text-gray-900 mb-1\">Emergency Contact</h3>\r\n                      <p className=\"text-gray-600\">\r\n                        For mental health emergencies, call 988 or go to your nearest emergency room.\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </motion.div>\r\n          )}\r\n        </AnimatePresence>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\professional\\TherapySessionLogger.tsx","messages":[{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":1085,"column":21,"nodeType":"JSXOpeningElement","endLine":1085,"endColumn":74},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":1095,"column":21,"nodeType":"JSXOpeningElement","endLine":1095,"endColumn":74},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":1108,"column":21,"nodeType":"JSXOpeningElement","endLine":1108,"endColumn":74},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":1118,"column":21,"nodeType":"JSXOpeningElement","endLine":1118,"endColumn":74},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":1131,"column":21,"nodeType":"JSXOpeningElement","endLine":1131,"endColumn":85}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { \r\n  Clock, _Calendar, Save, Star, _TrendingUp, Target, \r\n  Brain, _Heart, CheckCircle, Plus, _Minus, FileText,\r\n  _MessageSquare, Lightbulb, AlertTriangle, Award,\r\n  BarChart3, _PieChart, _LineChart, Activity, _Users,\r\n  PlayCircle, PauseCircle, _RotateCcw, _Timer,\r\n  Mic, MicOff, Video, VideoOff, _Settings, X, Square\r\n} from 'lucide-react';\r\n\r\ninterface TherapySession {\r\n  id: string;\r\n  providerId: string;\r\n  providerName: string;\r\n  providerSpecialty: string;\r\n  clientId: string;\r\n  clientName: string;\r\n  dateTime: Date;\r\n  duration: number;\r\n  actualDuration?: number;\r\n  type: 'individual' | 'group' | 'family' | 'couples';\r\n  format: 'in-person' | 'telehealth' | 'phone';\r\n  status: 'scheduled' | 'in-progress' | 'completed' | 'cancelled';\r\n  sessionGoals?: SessionGoal[];\r\n  techniques?: TherapeuticTechnique[];\r\n  homework?: TherapyHomework[];\r\n  notes?: SessionNote[];\r\n  outcome?: SessionOutcome;\r\n  nextSession?: Date;\r\n  billingCode?: string;\r\n  insuranceCovered: boolean;\r\n  recordingConsent?: boolean;\r\n  isRecording?: boolean;\r\n}\r\n\r\ninterface SessionGoal {\r\n  id: string;\r\n  goal: string;\r\n  priority: 'high' | 'medium' | 'low';\r\n  discussed: boolean;\r\n  progress: number; // 0-100\r\n  notes?: string;\r\n  outcome?: 'achieved' | 'partial' | 'not_achieved' | 'deferred';\r\n}\r\n\r\ninterface TherapeuticTechnique {\r\n  id: string;\r\n  name: string;\r\n  _category: 'CBT' | 'DBT' | 'ACT' | 'Mindfulness' | 'EMDR' | 'Psychodynamic' | 'Behavioral' | 'Other';\r\n  description?: string;\r\n  effectiveness: number; // 1-10\r\n  clientReaction: 'positive' | 'neutral' | 'negative';\r\n  notes?: string;\r\n}\r\n\r\ninterface TherapyHomework {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  type: 'worksheet' | 'practice' | 'reading' | 'journaling' | 'behavior' | 'exercise';\r\n  assignedDate: Date;\r\n  dueDate?: Date;\r\n  completed: boolean;\r\n  difficulty: number; // 1-10\r\n  priority: 'high' | 'medium' | 'low';\r\n  resources?: string[];\r\n  notes?: string;\r\n}\r\n\r\ninterface SessionNote {\r\n  id: string;\r\n  timestamp: Date;\r\n  type: 'observation' | 'intervention' | 'client_response' | 'breakthrough' | 'concern' | 'plan';\r\n  content: string;\r\n  _category?: string;\r\n  important: boolean;\r\n  private: boolean; // Provider-only notes\r\n}\r\n\r\ninterface SessionOutcome {\r\n  clientMood: number; // 1-10 scale\r\n  clientEnergy: number; // 1-10 scale\r\n  sessionHelpfulness: number; // 1-10 scale\r\n  clientEngagement: number; // 1-10 scale\r\n  therapeuticRapport: number; // 1-10 scale\r\n  progressTowardGoals: number; // 1-10 scale\r\n  keyInsights: string[];\r\n  breakthroughs?: string[];\r\n  challenges?: string[];\r\n  clientFeedback?: string;\r\n  providerObservations?: string;\r\n  riskAssessment?: RiskAssessment;\r\n  treatmentPlanAdjustments?: string[];\r\n}\r\n\r\ninterface RiskAssessment {\r\n  suicidalIdeation: 'none' | 'passive' | 'active' | 'plan' | 'intent';\r\n  selfHarm: 'none' | 'thoughts' | 'recent' | 'active_risk';\r\n  substanceUse: 'none' | 'mild_concern' | 'moderate_concern' | 'severe_concern';\r\n  overallRisk: 'low' | 'moderate' | 'high' | 'crisis';\r\n  interventionsNeeded?: string[];\r\n  followUpRequired: boolean;\r\n  emergencyContacted: boolean;\r\n}\r\n\r\ninterface TherapySessionLoggerProps {\r\n  session: TherapySession;\r\n  _onUpdateSession?: (session: TherapySession) => void;\r\n  onStartSession?: (sessionId: string) => void;\r\n  onEndSession?: (sessionId: string) => void;\r\n  onSaveNotes?: (sessionId: string, notes: SessionNote[]) => void;\r\n  onCompleteSession?: (sessionId: string, outcome: SessionOutcome) => void;\r\n  readOnly?: boolean;\r\n  isProvider?: boolean;\r\n}\r\n\r\nexport function TherapySessionLogger({\r\n  session,\r\n  _onUpdateSession,\r\n  onStartSession,\r\n  onEndSession,\r\n  onSaveNotes,\r\n  onCompleteSession,\r\n  readOnly = false,\r\n  isProvider = false\r\n}: TherapySessionLoggerProps) {\r\n  const [activeTab, setActiveTab] = useState<'session' | 'goals' | 'techniques' | 'notes' | 'homework' | 'outcome'>('session');\r\n  const [sessionTimer, setSessionTimer] = useState(0);\r\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\r\n  const [currentSession, setCurrentSession] = useState<TherapySession>(_session);\r\n  const [newNote, setNewNote] = useState('');\r\n  const [noteType, setNoteType] = useState<SessionNote['type']>('observation');\r\n  const [showRiskAssessment, setShowRiskAssessment] = useState(false);\r\n  const [audioEnabled, setAudioEnabled] = useState(true);\r\n  const [videoEnabled, setVideoEnabled] = useState(true);\r\n\r\n  // _Timer effect\r\n  useEffect(() => {\r\n    let _interval: NodeJS.Timeout;\r\n    if (_isTimerRunning) {\r\n      _interval = setInterval(() => {\r\n        setSessionTimer(prev => prev + 1);\r\n      }, 1000);\r\n    }\r\n    return () => clearInterval(_interval);\r\n  }, [isTimerRunning]);\r\n\r\n  // Format timer display\r\n  const formatTime = (seconds: number) => {\r\n    const hours = Math.floor(seconds / 3600);\r\n    const minutes = Math.floor((seconds % 3600) / 60);\r\n    const secs = seconds % 60;\r\n    return hours > 0 \r\n      ? `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`\r\n      : `${minutes}:${secs.toString().padStart(2, '0')}`;\r\n  };\r\n\r\n  // Handle session start\r\n  const handleStartSession = () => {\r\n    setIsTimerRunning(true);\r\n    const _updatedSession = {\r\n      ...currentSession,\r\n      status: 'in-progress' as const,\r\n      actualDuration: 0\r\n    };\r\n    setCurrentSession(_updatedSession);\r\n    onStartSession?.(session.id);\r\n  };\r\n\r\n  // Handle session pause\r\n  const handlePauseSession = () => {\r\n    setIsTimerRunning(!isTimerRunning);\r\n  };\r\n\r\n  // Handle session end\r\n  const handleEndSession = () => {\r\n    setIsTimerRunning(false);\r\n    const _updatedSession = {\r\n      ...currentSession,\r\n      status: 'completed' as const,\r\n      actualDuration: sessionTimer / 60 // Convert to minutes\r\n    };\r\n    setCurrentSession(_updatedSession);\r\n    onEndSession?.(session.id);\r\n  };\r\n\r\n  // Handle adding notes\r\n  const handleAddNote = () => {\r\n    if (!newNote.trim()) return;\r\n\r\n    const note: SessionNote = {\r\n      id: `note_${Date.now()}`,\r\n      timestamp: new Date(),\r\n      type: noteType,\r\n      content: newNote.trim(),\r\n      important: false,\r\n      private: isProvider\r\n    };\r\n\r\n    const updatedNotes = [...(currentSession.notes || []), note];\r\n    const _updatedSession = {\r\n      ...currentSession,\r\n      notes: updatedNotes\r\n    };\r\n\r\n    setCurrentSession(_updatedSession);\r\n    setNewNote('');\r\n    onSaveNotes?.(session.id, updatedNotes);\r\n  };\r\n\r\n  // Handle goal progress update\r\n  const handleGoalProgressUpdate = (goalId: string, progress: number, outcome?: SessionGoal['outcome']) => {\r\n    const updatedGoals = currentSession.sessionGoals?.map(goal =>\r\n      goal.id === goalId ? { ...goal, progress, outcome, discussed: true } : goal\r\n    );\r\n\r\n    setCurrentSession({\r\n      ...currentSession,\r\n      sessionGoals: updatedGoals\r\n    });\r\n  };\r\n\r\n  // Handle technique rating\r\n  const handleTechniqueRating = (techniqueId: string, effectiveness: number, reaction: TherapeuticTechnique['clientReaction']) => {\r\n    const updatedTechniques = currentSession.techniques?.map(technique =>\r\n      technique.id === techniqueId ? { ...technique, effectiveness, clientReaction: reaction } : technique\r\n    );\r\n\r\n    setCurrentSession({\r\n      ...currentSession,\r\n      techniques: updatedTechniques\r\n    });\r\n  };\r\n\r\n  // Get progress color\r\n  const _getProgressColor = (progress: number) => {\r\n    if (progress >= 80) return 'text-green-600 bg-green-100';\r\n    if (progress >= 60) return 'text-blue-600 bg-blue-100';\r\n    if (progress >= 40) return 'text-yellow-600 bg-yellow-100';\r\n    return 'text-red-600 bg-red-100';\r\n  };\r\n\r\n  // Get technique category color\r\n  const getTechniqueColor = (_category: string) => {\r\n    switch (_category) {\r\n      case 'CBT': return 'bg-blue-100 text-blue-800';\r\n      case 'DBT': return 'bg-green-100 text-green-800';\r\n      case 'ACT': return 'bg-purple-100 text-purple-800';\r\n      case 'Mindfulness': return 'bg-indigo-100 text-indigo-800';\r\n      case 'EMDR': return 'bg-pink-100 text-pink-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto bg-white rounded-xl shadow-lg overflow-hidden\">\r\n      {/* Header */}\r\n      <div className=\"bg-gradient-to-r from-primary-600 to-blue-600 text-white p-6\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <h1 className=\"text-2xl font-bold\">Therapy Session</h1>\r\n            <p className=\"text-primary-100 mt-1\">\r\n              {currentSession.clientName} with {currentSession.providerName}\r\n            </p>\r\n            <p className=\"text-primary-200 text-sm\">\r\n              {new Date(currentSession.dateTime).toLocaleString()}\r\n            </p>\r\n          </div>\r\n          \r\n          {/* Session Controls */}\r\n          <div className=\"flex items-center space-x-4\">\r\n            {/* _Timer Display */}\r\n            <div className=\"text-center\">\r\n              <div className=\"text-3xl font-mono font-bold\">\r\n                {formatTime(_sessionTimer)}\r\n              </div>\r\n              <div className=\"text-xs text-primary-200\">\r\n                {currentSession.duration} min scheduled\r\n              </div>\r\n            </div>\r\n\r\n            {/* Control Buttons */}\r\n            {!readOnly && isProvider && (\r\n              <div className=\"flex items-center space-x-2\">\r\n                {currentSession.format === 'telehealth' && (\r\n                  <>\r\n                    <button\r\n                      onClick={() => setAudioEnabled(!audioEnabled)}\r\n                      className={`p-2 rounded-full ${\r\n                        audioEnabled ? 'bg-white/20' : 'bg-red-500'\r\n                      } transition-colors`}\r\n                    >\r\n                      {audioEnabled ? <Mic className=\"h-5 w-5\" /> : <MicOff className=\"h-5 w-5\" />}\r\n                    </button>\r\n                    <button\r\n                      onClick={() => setVideoEnabled(!videoEnabled)}\r\n                      className={`p-2 rounded-full ${\r\n                        videoEnabled ? 'bg-white/20' : 'bg-red-500'\r\n                      } transition-colors`}\r\n                    >\r\n                      {videoEnabled ? <Video className=\"h-5 w-5\" /> : <VideoOff className=\"h-5 w-5\" />}\r\n                    </button>\r\n                  </>\r\n                )}\r\n\r\n                {currentSession.status === 'scheduled' && (\r\n                  <button\r\n                    onClick={handleStartSession}\r\n                    className=\"px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors flex items-center\"\r\n                  >\r\n                    <PlayCircle className=\"h-4 w-4 mr-1\" />\r\n                    Start\r\n                  </button>\r\n                )}\r\n\r\n                {currentSession.status === 'in-progress' && (\r\n                  <>\r\n                    <button\r\n                      onClick={handlePauseSession}\r\n                      className=\"px-4 py-2 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition-colors flex items-center\"\r\n                    >\r\n                      {isTimerRunning ? <PauseCircle className=\"h-4 w-4 mr-1\" /> : <PlayCircle className=\"h-4 w-4 mr-1\" />}\r\n                      {isTimerRunning ? 'Pause' : 'Resume'}\r\n                    </button>\r\n                    <button\r\n                      onClick={handleEndSession}\r\n                      className=\"px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors flex items-center\"\r\n                    >\r\n                      <Square className=\"h-4 w-4 mr-1\" />\r\n                      End\r\n                    </button>\r\n                  </>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Status Indicator */}\r\n        <div className=\"mt-4\">\r\n          <div className=\"flex items-center space-x-2\">\r\n            <div className={`h-3 w-3 rounded-full ${\r\n              currentSession.status === 'in-progress' ? 'bg-green-400 animate-pulse' :\r\n              currentSession.status === 'completed' ? 'bg-gray-400' :\r\n              'bg-yellow-400'\r\n            }`} />\r\n            <span className=\"text-sm capitalize\">\r\n              {currentSession.status.replace('_', ' ')}\r\n            </span>\r\n            {currentSession.isRecording && (\r\n              <div className=\"flex items-center space-x-1 text-red-200\">\r\n                <div className=\"h-2 w-2 bg-red-400 rounded-full animate-pulse\" />\r\n                <span className=\"text-xs\">Recording</span>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Tab Navigation */}\r\n      <div className=\"border-b border-gray-200\">\r\n        <div className=\"flex space-x-1 px-6\">\r\n          {[\r\n            { id: 'session', label: 'Session Overview', icon: Activity },\r\n            { id: 'goals', label: 'Goals', icon: Target },\r\n            { id: 'techniques', label: 'Techniques', icon: Brain },\r\n            { id: 'notes', label: 'Notes', icon: FileText },\r\n            { id: 'homework', label: 'Homework', icon: CheckCircle },\r\n            { id: 'outcome', label: 'Outcome', icon: BarChart3 }\r\n          ].map(({ id, label, icon: Icon }) => (\r\n            <button\r\n              key={id}\r\n              onClick={() => setActiveTab(id as unknown)}\r\n              className={`px-4 py-3 text-sm font-medium border-b-2 transition-all flex items-center space-x-2 ${\r\n                activeTab === id\r\n                  ? 'text-primary-600 border-primary-600'\r\n                  : 'text-gray-600 border-transparent hover:text-gray-900 hover:border-gray-300'\r\n              }`}\r\n            >\r\n              <Icon className=\"h-4 w-4\" />\r\n              <span>{label}</span>\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Content Area */}\r\n      <div className=\"p-6\">\r\n        {activeTab === 'session' && (\r\n          <div className=\"space-y-6\">\r\n            {/* Session Overview Cards */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n              <div className=\"bg-blue-50 rounded-lg p-4\">\r\n                <div className=\"flex items-center space-x-2 mb-2\">\r\n                  <Clock className=\"h-5 w-5 text-blue-600\" />\r\n                  <span className=\"font-medium text-blue-900\">Duration</span>\r\n                </div>\r\n                <p className=\"text-2xl font-bold text-blue-600\">\r\n                  {currentSession.actualDuration || sessionTimer / 60 || currentSession.duration} min\r\n                </p>\r\n                <p className=\"text-sm text-blue-700\">\r\n                  Scheduled: {currentSession.duration} min\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"bg-green-50 rounded-lg p-4\">\r\n                <div className=\"flex items-center space-x-2 mb-2\">\r\n                  <Target className=\"h-5 w-5 text-green-600\" />\r\n                  <span className=\"font-medium text-green-900\">Goals Progress</span>\r\n                </div>\r\n                <p className=\"text-2xl font-bold text-green-600\">\r\n                  {currentSession.sessionGoals?.filter(g => g.discussed).length || 0}/\r\n                  {currentSession.sessionGoals?.length || 0}\r\n                </p>\r\n                <p className=\"text-sm text-green-700\">Goals discussed</p>\r\n              </div>\r\n\r\n              <div className=\"bg-purple-50 rounded-lg p-4\">\r\n                <div className=\"flex items-center space-x-2 mb-2\">\r\n                  <Brain className=\"h-5 w-5 text-purple-600\" />\r\n                  <span className=\"font-medium text-purple-900\">Techniques</span>\r\n                </div>\r\n                <p className=\"text-2xl font-bold text-purple-600\">\r\n                  {currentSession.techniques?.length || 0}\r\n                </p>\r\n                <p className=\"text-sm text-purple-700\">Applied today</p>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Session Information */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n              <div className=\"space-y-4\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900\">Session Details</h3>\r\n                <div className=\"space-y-3\">\r\n                  <div className=\"flex justify-between\">\r\n                    <span className=\"text-gray-600\">Type:</span>\r\n                    <span className=\"font-medium capitalize\">{currentSession.type}</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <span className=\"text-gray-600\">Format:</span>\r\n                    <span className=\"font-medium capitalize\">{currentSession.format}</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <span className=\"text-gray-600\">Provider:</span>\r\n                    <span className=\"font-medium\">{currentSession.providerName}</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <span className=\"text-gray-600\">Specialty:</span>\r\n                    <span className=\"font-medium\">{currentSession.providerSpecialty}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"space-y-4\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900\">Quick Notes</h3>\r\n                {!readOnly && (\r\n                  <div className=\"space-y-2\">\r\n                    <div className=\"flex space-x-2\">\r\n                      <select\r\n                        value={noteType}\r\n                        onChange={(e) => setNoteType(e.target.value as SessionNote['type'])}\r\n                        className=\"text-sm border border-gray-300 rounded-lg px-3 py-2\"\r\n                      >\r\n                        <option value=\"observation\">Observation</option>\r\n                        <option value=\"intervention\">Intervention</option>\r\n                        <option value=\"client_response\">Client Response</option>\r\n                        <option value=\"breakthrough\">Breakthrough</option>\r\n                        <option value=\"concern\">Concern</option>\r\n                        <option value=\"plan\">Plan</option>\r\n                      </select>\r\n                    </div>\r\n                    <textarea\r\n                      value={newNote}\r\n                      onChange={(e) => setNewNote(e.target.value)}\r\n                      placeholder=\"Add a quick note...\"\r\n                      className=\"w-full p-3 border border-gray-300 rounded-lg text-sm\"\r\n                      rows={3}\r\n                    />\r\n                    <button\r\n                      onClick={handleAddNote}\r\n                      className=\"px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors text-sm\"\r\n                    >\r\n                      Add Note\r\n                    </button>\r\n                  </div>\r\n                )}\r\n                \r\n                {/* Recent Notes Preview */}\r\n                <div className=\"space-y-2 max-h-48 overflow-y-auto\">\r\n                  {currentSession.notes?.slice(-3).map((note) => (\r\n                    <div key={note.id} className=\"p-2 bg-gray-50 rounded text-sm\">\r\n                      <div className=\"flex justify-between items-start mb-1\">\r\n                        <span className={`px-2 py-1 rounded text-xs ${\r\n                          note.type === 'breakthrough' ? 'bg-green-100 text-green-700' :\r\n                          note.type === 'concern' ? 'bg-red-100 text-red-700' :\r\n                          'bg-gray-100 text-gray-700'\r\n                        }`}>\r\n                          {note.type.replace('_', ' ')}\r\n                        </span>\r\n                        <span className=\"text-xs text-gray-500\">\r\n                          {new Date(note.timestamp).toLocaleTimeString()}\r\n                        </span>\r\n                      </div>\r\n                      <p className=\"text-gray-700\">{note.content}</p>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {activeTab === 'goals' && (\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900\">Session Goals</h3>\r\n              {!readOnly && (\r\n                <button className=\"px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors text-sm flex items-center\">\r\n                  <Plus className=\"h-4 w-4 mr-1\" />\r\n                  Add Goal\r\n                </button>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"space-y-3\">\r\n              {currentSession.sessionGoals?.map((goal) => (\r\n                <motion.div\r\n                  key={goal.id}\r\n                  initial={{ opacity: 0, y: 10 }}\r\n                  animate={{ opacity: 1, y: 0 }}\r\n                  className=\"border border-gray-200 rounded-lg p-4\"\r\n                >\r\n                  <div className=\"flex items-start justify-between mb-2\">\r\n                    <div className=\"flex-1\">\r\n                      <h4 className=\"font-medium text-gray-900\">{goal.goal}</h4>\r\n                      <div className=\"flex items-center space-x-2 mt-1\">\r\n                        <span className={`px-2 py-1 text-xs rounded-full ${\r\n                          goal.priority === 'high' ? 'bg-red-100 text-red-700' :\r\n                          goal.priority === 'medium' ? 'bg-yellow-100 text-yellow-700' :\r\n                          'bg-green-100 text-green-700'\r\n                        }`}>\r\n                          {goal.priority} priority\r\n                        </span>\r\n                        {goal.discussed && (\r\n                          <span className=\"px-2 py-1 text-xs bg-blue-100 text-blue-700 rounded-full\">\r\n                            Discussed\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    {goal.outcome && (\r\n                      <span className={`px-2 py-1 text-xs rounded-full ${\r\n                        goal.outcome === 'achieved' ? 'bg-green-100 text-green-700' :\r\n                        goal.outcome === 'partial' ? 'bg-yellow-100 text-yellow-700' :\r\n                        goal.outcome === 'not_achieved' ? 'bg-red-100 text-red-700' :\r\n                        'bg-gray-100 text-gray-700'\r\n                      }`}>\r\n                        {goal.outcome.replace('_', ' ')}\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n\r\n                  {/* Progress Bar */}\r\n                  <div className=\"mb-3\">\r\n                    <div className=\"flex justify-between items-center mb-1\">\r\n                      <span className=\"text-sm text-gray-600\">Progress</span>\r\n                      <span className=\"text-sm font-medium text-gray-900\">{goal.progress}%</span>\r\n                    </div>\r\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\r\n                      <div \r\n                        className=\"bg-primary-600 h-2 rounded-full transition-all\"\r\n                        style={{ width: `${goal.progress}%` }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  {!readOnly && (\r\n                    <div className=\"flex space-x-2\">\r\n                      <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"100\"\r\n                        value={goal.progress}\r\n                        onChange={(e) => handleGoalProgressUpdate(goal.id, parseInt(e.target.value))}\r\n                        className=\"flex-1\"\r\n                      />\r\n                      <select\r\n                        value={goal.outcome || ''}\r\n                        onChange={(e) => handleGoalProgressUpdate(goal.id, goal.progress, e.target.value as SessionGoal['outcome'])}\r\n                        className=\"text-sm border border-gray-300 rounded px-2 py-1\"\r\n                      >\r\n                        <option value=\"\">Set outcome</option>\r\n                        <option value=\"achieved\">Achieved</option>\r\n                        <option value=\"partial\">Partially achieved</option>\r\n                        <option value=\"not_achieved\">Not achieved</option>\r\n                        <option value=\"deferred\">Deferred</option>\r\n                      </select>\r\n                    </div>\r\n                  )}\r\n\r\n                  {goal.notes && (\r\n                    <div className=\"mt-2 p-2 bg-gray-50 rounded text-sm\">\r\n                      <p className=\"text-gray-700\">{goal.notes}</p>\r\n                    </div>\r\n                  )}\r\n                </motion.div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {activeTab === 'techniques' && (\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900\">Therapeutic Techniques</h3>\r\n              {!readOnly && (\r\n                <button className=\"px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors text-sm flex items-center\">\r\n                  <Plus className=\"h-4 w-4 mr-1\" />\r\n                  Add Technique\r\n                </button>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"space-y-3\">\r\n              {currentSession.techniques?.map((technique) => (\r\n                <motion.div\r\n                  key={technique.id}\r\n                  initial={{ opacity: 0, y: 10 }}\r\n                  animate={{ opacity: 1, y: 0 }}\r\n                  className=\"border border-gray-200 rounded-lg p-4\"\r\n                >\r\n                  <div className=\"flex items-start justify-between mb-2\">\r\n                    <div className=\"flex-1\">\r\n                      <h4 className=\"font-medium text-gray-900\">{technique.name}</h4>\r\n                      <p className=\"text-sm text-gray-600 mt-1\">{technique.description}</p>\r\n                      <div className=\"flex items-center space-x-2 mt-2\">\r\n                        <span className={`px-2 py-1 text-xs rounded-full ${getTechniqueColor(technique._category)}`}>\r\n                          {technique._category}\r\n                        </span>\r\n                        <span className={`px-2 py-1 text-xs rounded-full ${\r\n                          technique.clientReaction === 'positive' ? 'bg-green-100 text-green-700' :\r\n                          technique.clientReaction === 'negative' ? 'bg-red-100 text-red-700' :\r\n                          'bg-gray-100 text-gray-700'\r\n                        }`}>\r\n                          {technique.clientReaction}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Effectiveness Rating */}\r\n                  <div className=\"mb-2\">\r\n                    <div className=\"flex justify-between items-center mb-1\">\r\n                      <span className=\"text-sm text-gray-600\">Effectiveness</span>\r\n                      <span className=\"text-sm font-medium text-gray-900\">{technique.effectiveness}/10</span>\r\n                    </div>\r\n                    <div className=\"flex space-x-1\">\r\n                      {[...Array(10)].map((_, index) => (\r\n                        <button\r\n                          key={index}\r\n                          onClick={() => !readOnly && handleTechniqueRating(technique.id, index + 1, technique.clientReaction)}\r\n                          className={`w-4 h-4 rounded-full transition-colors ${\r\n                            index < technique.effectiveness\r\n                              ? 'bg-yellow-400'\r\n                              : 'bg-gray-200 hover:bg-gray-300'\r\n                          }`}\r\n                          disabled={readOnly}\r\n                        />\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n\r\n                  {!readOnly && (\r\n                    <div className=\"flex space-x-2 text-sm\">\r\n                      <button\r\n                        onClick={() => handleTechniqueRating(technique.id, technique.effectiveness, 'positive')}\r\n                        className={`px-3 py-1 rounded-full transition-colors ${\r\n                          technique.clientReaction === 'positive'\r\n                            ? 'bg-green-100 text-green-700'\r\n                            : 'bg-gray-100 text-gray-600 hover:bg-green-50'\r\n                        }`}\r\n                      >\r\n                        Positive\r\n                      </button>\r\n                      <button\r\n                        onClick={() => handleTechniqueRating(technique.id, technique.effectiveness, 'neutral')}\r\n                        className={`px-3 py-1 rounded-full transition-colors ${\r\n                          technique.clientReaction === 'neutral'\r\n                            ? 'bg-gray-100 text-gray-700'\r\n                            : 'bg-gray-100 text-gray-600 hover:bg-gray-50'\r\n                        }`}\r\n                      >\r\n                        Neutral\r\n                      </button>\r\n                      <button\r\n                        onClick={() => handleTechniqueRating(technique.id, technique.effectiveness, 'negative')}\r\n                        className={`px-3 py-1 rounded-full transition-colors ${\r\n                          technique.clientReaction === 'negative'\r\n                            ? 'bg-red-100 text-red-700'\r\n                            : 'bg-gray-100 text-gray-600 hover:bg-red-50'\r\n                        }`}\r\n                      >\r\n                        Negative\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n\r\n                  {technique.notes && (\r\n                    <div className=\"mt-2 p-2 bg-gray-50 rounded text-sm\">\r\n                      <p className=\"text-gray-700\">{technique.notes}</p>\r\n                    </div>\r\n                  )}\r\n                </motion.div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {activeTab === 'notes' && (\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900\">Session Notes</h3>\r\n              <div className=\"text-sm text-gray-500\">\r\n                {currentSession.notes?.length || 0} notes\r\n              </div>\r\n            </div>\r\n\r\n            {/* Add Note Form */}\r\n            {!readOnly && (\r\n              <div className=\"border border-gray-200 rounded-lg p-4\">\r\n                <div className=\"space-y-3\">\r\n                  <div className=\"flex space-x-2\">\r\n                    <select\r\n                      value={noteType}\r\n                      onChange={(e) => setNoteType(e.target.value as SessionNote['type'])}\r\n                      className=\"border border-gray-300 rounded-lg px-3 py-2 text-sm\"\r\n                    >\r\n                      <option value=\"observation\">Observation</option>\r\n                      <option value=\"intervention\">Intervention</option>\r\n                      <option value=\"client_response\">Client Response</option>\r\n                      <option value=\"breakthrough\">Breakthrough</option>\r\n                      <option value=\"concern\">Concern</option>\r\n                      <option value=\"plan\">Plan</option>\r\n                    </select>\r\n                  </div>\r\n                  <textarea\r\n                    value={newNote}\r\n                    onChange={(e) => setNewNote(e.target.value)}\r\n                    placeholder=\"Add your note here...\"\r\n                    className=\"w-full p-3 border border-gray-300 rounded-lg text-sm\"\r\n                    rows={4}\r\n                  />\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <div className=\"flex items-center space-x-2 text-sm\">\r\n                      <label className=\"flex items-center space-x-1\">\r\n                        <input type=\"checkbox\" className=\"rounded\" />\r\n                        <span>Mark as important</span>\r\n                      </label>\r\n                      <label className=\"flex items-center space-x-1\">\r\n                        <input type=\"checkbox\" className=\"rounded\" />\r\n                        <span>Private note</span>\r\n                      </label>\r\n                    </div>\r\n                    <button\r\n                      onClick={handleAddNote}\r\n                      className=\"px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors text-sm flex items-center\"\r\n                    >\r\n                      <Plus className=\"h-4 w-4 mr-1\" />\r\n                      Add Note\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Notes List */}\r\n            <div className=\"space-y-2\">\r\n              {currentSession.notes?.map((note) => (\r\n                <motion.div\r\n                  key={note.id}\r\n                  initial={{ opacity: 0, y: 10 }}\r\n                  animate={{ opacity: 1, y: 0 }}\r\n                  className={`border rounded-lg p-4 ${\r\n                    note.important ? 'border-yellow-200 bg-yellow-50' : 'border-gray-200'\r\n                  }`}\r\n                >\r\n                  <div className=\"flex items-start justify-between mb-2\">\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <span className={`px-2 py-1 text-xs rounded-full ${\r\n                        note.type === 'breakthrough' ? 'bg-green-100 text-green-700' :\r\n                        note.type === 'concern' ? 'bg-red-100 text-red-700' :\r\n                        note.type === 'observation' ? 'bg-blue-100 text-blue-700' :\r\n                        note.type === 'intervention' ? 'bg-purple-100 text-purple-700' :\r\n                        note.type === 'client_response' ? 'bg-indigo-100 text-indigo-700' :\r\n                        'bg-gray-100 text-gray-700'\r\n                      }`}>\r\n                        {note.type.replace('_', ' ')}\r\n                      </span>\r\n                      {note.important && (\r\n                        <Star className=\"h-4 w-4 text-yellow-500 fill-current\" />\r\n                      )}\r\n                      {note.private && (\r\n                        <span className=\"text-xs text-gray-500\">(_Private)</span>\r\n                      )}\r\n                    </div>\r\n                    <span className=\"text-xs text-gray-500\">\r\n                      {new Date(note.timestamp).toLocaleString()}\r\n                    </span>\r\n                  </div>\r\n                  <p className=\"text-gray-700\">{note.content}</p>\r\n                </motion.div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {activeTab === 'homework' && (\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900\">Homework Assignments</h3>\r\n              {!readOnly && (\r\n                <button className=\"px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors text-sm flex items-center\">\r\n                  <Plus className=\"h-4 w-4 mr-1\" />\r\n                  Assign Homework\r\n                </button>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"space-y-3\">\r\n              {currentSession.homework?.map((homework) => (\r\n                <motion.div\r\n                  key={homework.id}\r\n                  initial={{ opacity: 0, y: 10 }}\r\n                  animate={{ opacity: 1, y: 0 }}\r\n                  className=\"border border-gray-200 rounded-lg p-4\"\r\n                >\r\n                  <div className=\"flex items-start justify-between mb-2\">\r\n                    <div className=\"flex-1\">\r\n                      <h4 className=\"font-medium text-gray-900\">{homework.title}</h4>\r\n                      <p className=\"text-sm text-gray-600 mt-1\">{homework.description}</p>\r\n                      <div className=\"flex items-center space-x-2 mt-2\">\r\n                        <span className={`px-2 py-1 text-xs rounded-full ${\r\n                          homework.type === 'worksheet' ? 'bg-blue-100 text-blue-700' :\r\n                          homework.type === 'practice' ? 'bg-green-100 text-green-700' :\r\n                          homework.type === 'reading' ? 'bg-purple-100 text-purple-700' :\r\n                          homework.type === 'journaling' ? 'bg-yellow-100 text-yellow-700' :\r\n                          homework.type === 'behavior' ? 'bg-pink-100 text-pink-700' :\r\n                          'bg-gray-100 text-gray-700'\r\n                        }`}>\r\n                          {homework.type}\r\n                        </span>\r\n                        <span className={`px-2 py-1 text-xs rounded-full ${\r\n                          homework.priority === 'high' ? 'bg-red-100 text-red-700' :\r\n                          homework.priority === 'medium' ? 'bg-yellow-100 text-yellow-700' :\r\n                          'bg-green-100 text-green-700'\r\n                        }`}>\r\n                          {homework.priority} priority\r\n                        </span>\r\n                        {homework.completed && (\r\n                          <span className=\"px-2 py-1 text-xs bg-green-100 text-green-700 rounded-full\">\r\n                            Completed\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {homework.dueDate && (\r\n                    <div className=\"text-sm text-gray-600 mb-2\">\r\n                      Due: {new Date(homework.dueDate).toLocaleDateString()}\r\n                    </div>\r\n                  )}\r\n\r\n                  {/* Difficulty Rating */}\r\n                  <div className=\"mb-2\">\r\n                    <div className=\"flex justify-between items-center mb-1\">\r\n                      <span className=\"text-sm text-gray-600\">Difficulty</span>\r\n                      <span className=\"text-sm font-medium text-gray-900\">{homework.difficulty}/10</span>\r\n                    </div>\r\n                    <div className=\"flex space-x-1\">\r\n                      {[...Array(10)].map((_, index) => (\r\n                        <div\r\n                          key={index}\r\n                          className={`w-2 h-2 rounded-full ${\r\n                            index < homework.difficulty ? 'bg-orange-400' : 'bg-gray-200'\r\n                          }`}\r\n                        />\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n\r\n                  {homework.resources && homework.resources.length > 0 && (\r\n                    <div className=\"mb-2\">\r\n                      <p className=\"text-sm text-gray-600 mb-1\">Resources:</p>\r\n                      <div className=\"space-y-1\">\r\n                        {homework.resources.map((resource, index) => (\r\n                          <a\r\n                            key={index}\r\n                            href={resource}\r\n                            target=\"_blank\"\r\n                            rel=\"noopener noreferrer\"\r\n                            className=\"text-sm text-primary-600 hover:text-primary-700 block\"\r\n                          >\r\n                            {resource}\r\n                          </a>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  {homework.notes && (\r\n                    <div className=\"p-2 bg-gray-50 rounded text-sm\">\r\n                      <p className=\"text-gray-700\">{homework.notes}</p>\r\n                    </div>\r\n                  )}\r\n                </motion.div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {activeTab === 'outcome' && (\r\n          <div className=\"space-y-6\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900\">Session Outcome</h3>\r\n              {currentSession.outcome?.riskAssessment?.overallRisk !== 'low' && (\r\n                <button\r\n                  onClick={() => setShowRiskAssessment(true)}\r\n                  className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors text-sm flex items-center\"\r\n                >\r\n                  <AlertTriangle className=\"h-4 w-4 mr-1\" />\r\n                  Risk Assessment\r\n                </button>\r\n              )}\r\n            </div>\r\n\r\n            {currentSession.outcome ? (\r\n              <div className=\"space-y-6\">\r\n                {/* Rating Scales */}\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                  {[\r\n                    { label: 'Client Mood', value: currentSession.outcome.clientMood, color: 'blue' },\r\n                    { label: 'Client Energy', value: currentSession.outcome.clientEnergy, color: 'green' },\r\n                    { label: 'Session Helpfulness', value: currentSession.outcome.sessionHelpfulness, color: 'purple' },\r\n                    { label: 'Client Engagement', value: currentSession.outcome.clientEngagement, color: 'indigo' },\r\n                    { label: 'Therapeutic Rapport', value: currentSession.outcome.therapeuticRapport, color: 'pink' },\r\n                    { label: 'Goal Progress', value: currentSession.outcome.progressTowardGoals, color: 'yellow' }\r\n                  ].map(({ label, value, color }) => (\r\n                    <div key={label} className=\"bg-white border border-gray-200 rounded-lg p-4\">\r\n                      <div className=\"flex justify-between items-center mb-2\">\r\n                        <span className=\"text-sm font-medium text-gray-900\">{label}</span>\r\n                        <span className=\"text-lg font-bold text-gray-900\">{value}/10</span>\r\n                      </div>\r\n                      <div className=\"w-full bg-gray-200 rounded-full h-2\">\r\n                        <div \r\n                          className={`bg-${color}-500 h-2 rounded-full transition-all`}\r\n                          style={{ width: `${value * 10}%` }}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n\r\n                {/* Key Insights */}\r\n                {currentSession.outcome.keyInsights && currentSession.outcome.keyInsights.length > 0 && (\r\n                  <div>\r\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Key Insights</h4>\r\n                    <div className=\"space-y-2\">\r\n                      {currentSession.outcome.keyInsights.map((insight, index) => (\r\n                        <div key={index} className=\"flex items-start space-x-2 p-3 bg-blue-50 rounded-lg\">\r\n                          <Lightbulb className=\"h-5 w-5 text-blue-600 mt-0.5\" />\r\n                          <p className=\"text-sm text-blue-900\">{insight}</p>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Breakthroughs */}\r\n                {currentSession.outcome.breakthroughs && currentSession.outcome.breakthroughs.length > 0 && (\r\n                  <div>\r\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Breakthroughs</h4>\r\n                    <div className=\"space-y-2\">\r\n                      {currentSession.outcome.breakthroughs.map((breakthrough, index) => (\r\n                        <div key={index} className=\"flex items-start space-x-2 p-3 bg-green-50 rounded-lg\">\r\n                          <Award className=\"h-5 w-5 text-green-600 mt-0.5\" />\r\n                          <p className=\"text-sm text-green-900\">{breakthrough}</p>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Challenges */}\r\n                {currentSession.outcome.challenges && currentSession.outcome.challenges.length > 0 && (\r\n                  <div>\r\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Challenges</h4>\r\n                    <div className=\"space-y-2\">\r\n                      {currentSession.outcome.challenges.map((challenge, index) => (\r\n                        <div key={index} className=\"flex items-start space-x-2 p-3 bg-red-50 rounded-lg\">\r\n                          <AlertTriangle className=\"h-5 w-5 text-red-600 mt-0.5\" />\r\n                          <p className=\"text-sm text-red-900\">{challenge}</p>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Client & Provider Feedback */}\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                  {currentSession.outcome.clientFeedback && (\r\n                    <div>\r\n                      <h4 className=\"font-medium text-gray-900 mb-2\">Client Feedback</h4>\r\n                      <div className=\"p-3 bg-gray-50 rounded-lg\">\r\n                        <p className=\"text-sm text-gray-700\">{currentSession.outcome.clientFeedback}</p>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  {currentSession.outcome.providerObservations && (\r\n                    <div>\r\n                      <h4 className=\"font-medium text-gray-900 mb-2\">Provider Observations</h4>\r\n                      <div className=\"p-3 bg-gray-50 rounded-lg\">\r\n                        <p className=\"text-sm text-gray-700\">{currentSession.outcome.providerObservations}</p>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                {/* Treatment Plan Adjustments */}\r\n                {currentSession.outcome.treatmentPlanAdjustments && currentSession.outcome.treatmentPlanAdjustments.length > 0 && (\r\n                  <div>\r\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Treatment Plan Adjustments</h4>\r\n                    <div className=\"space-y-2\">\r\n                      {currentSession.outcome.treatmentPlanAdjustments.map((adjustment, index) => (\r\n                        <div key={index} className=\"p-3 bg-purple-50 rounded-lg\">\r\n                          <p className=\"text-sm text-purple-900\">{adjustment}</p>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ) : (\r\n              <div className=\"text-center py-8 text-gray-500\">\r\n                <BarChart3 className=\"h-12 w-12 mx-auto mb-3 text-gray-300\" />\r\n                <p>Session outcome will be available after completion</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Risk Assessment Modal */}\r\n      <AnimatePresence>\r\n        {showRiskAssessment && currentSession.outcome?.riskAssessment && (\r\n          <motion.div\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0 }}\r\n            className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\"\r\n            onClick={() => setShowRiskAssessment(false)}\r\n          >\r\n            <motion.div\r\n              initial={{ scale: 0.9, opacity: 0 }}\r\n              animate={{ scale: 1, opacity: 1 }}\r\n              exit={{ scale: 0.9, opacity: 0 }}\r\n              className=\"bg-white rounded-xl p-6 max-w-2xl w-full max-h-[80vh] overflow-y-auto\"\r\n              onClick={(e) => e.stopPropagation()}\r\n            >\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <h3 className=\"text-xl font-semibold text-red-900\">Risk Assessment</h3>\r\n                <button\r\n                  onClick={() => setShowRiskAssessment(false)}\r\n                  className=\"p-2 text-gray-400 hover:text-gray-600\"\r\n                >\r\n                  <X className=\"h-5 w-5\" />\r\n                </button>\r\n              </div>\r\n\r\n              <div className=\"space-y-4\">\r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-gray-700\">Suicidal Ideation</label>\r\n                    <div className={`mt-1 p-2 rounded text-sm ${\r\n                      currentSession.outcome.riskAssessment.suicidalIdeation === 'none' ? 'bg-green-100 text-green-800' :\r\n                      currentSession.outcome.riskAssessment.suicidalIdeation === 'passive' ? 'bg-yellow-100 text-yellow-800' :\r\n                      'bg-red-100 text-red-800'\r\n                    }`}>\r\n                      {currentSession.outcome.riskAssessment.suicidalIdeation}\r\n                    </div>\r\n                  </div>\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-gray-700\">Self Harm</label>\r\n                    <div className={`mt-1 p-2 rounded text-sm ${\r\n                      currentSession.outcome.riskAssessment.selfHarm === 'none' ? 'bg-green-100 text-green-800' :\r\n                      currentSession.outcome.riskAssessment.selfHarm === 'thoughts' ? 'bg-yellow-100 text-yellow-800' :\r\n                      'bg-red-100 text-red-800'\r\n                    }`}>\r\n                      {currentSession.outcome.riskAssessment.selfHarm}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-gray-700\">Substance Use</label>\r\n                    <div className={`mt-1 p-2 rounded text-sm ${\r\n                      currentSession.outcome.riskAssessment.substanceUse === 'none' ? 'bg-green-100 text-green-800' :\r\n                      currentSession.outcome.riskAssessment.substanceUse === 'mild_concern' ? 'bg-yellow-100 text-yellow-800' :\r\n                      'bg-red-100 text-red-800'\r\n                    }`}>\r\n                      {currentSession.outcome.riskAssessment.substanceUse.replace('_', ' ')}\r\n                    </div>\r\n                  </div>\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-gray-700\">Overall Risk</label>\r\n                    <div className={`mt-1 p-2 rounded text-sm ${\r\n                      currentSession.outcome.riskAssessment.overallRisk === 'low' ? 'bg-green-100 text-green-800' :\r\n                      currentSession.outcome.riskAssessment.overallRisk === 'moderate' ? 'bg-yellow-100 text-yellow-800' :\r\n                      'bg-red-100 text-red-800'\r\n                    }`}>\r\n                      {currentSession.outcome.riskAssessment.overallRisk}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {currentSession.outcome.riskAssessment.interventionsNeeded && currentSession.outcome.riskAssessment.interventionsNeeded.length > 0 && (\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-gray-700 mb-2 block\">Interventions Needed</label>\r\n                    <div className=\"space-y-1\">\r\n                      {currentSession.outcome.riskAssessment.interventionsNeeded.map((intervention, index) => (\r\n                        <div key={index} className=\"p-2 bg-orange-50 rounded text-sm\">\r\n                          <p className=\"text-orange-900\">{intervention}</p>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                <div className=\"grid grid-cols-2 gap-4 pt-4 border-t\">\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <div className={`h-3 w-3 rounded-full ${\r\n                      currentSession.outcome.riskAssessment.followUpRequired ? 'bg-red-500' : 'bg-green-500'\r\n                    }`} />\r\n                    <span className=\"text-sm\">Follow-up Required</span>\r\n                  </div>\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <div className={`h-3 w-3 rounded-full ${\r\n                      currentSession.outcome.riskAssessment.emergencyContacted ? 'bg-red-500' : 'bg-gray-300'\r\n                    }`} />\r\n                    <span className=\"text-sm\">Emergency Contacted</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </motion.div>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n\r\n      {/* Save Button */}\r\n      {!readOnly && (\r\n        <div className=\"p-6 bg-gray-50 border-t\">\r\n          <div className=\"flex justify-between items-center\">\r\n            <div className=\"text-sm text-gray-600\">\r\n              Last saved: {new Date().toLocaleTimeString()}\r\n            </div>\r\n            <button\r\n              onClick={() => onCompleteSession?.(session.id, currentSession.outcome!)}\r\n              className=\"px-6 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors flex items-center\"\r\n            >\r\n              <Save className=\"h-4 w-4 mr-2\" />\r\n              Save Session\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\professional\\TreatmentPlanManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\profile\\Profile.tsx","messages":[{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":32,"column":15,"nodeType":"JSXOpeningElement","endLine":32,"endColumn":65},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":42,"column":15,"nodeType":"JSXOpeningElement","endLine":42,"endColumn":65},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":52,"column":15,"nodeType":"JSXOpeningElement","endLine":52,"endColumn":65},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":62,"column":15,"nodeType":"JSXOpeningElement","endLine":62,"endColumn":65}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Profile Component - Placeholder for compilation\r\n * This component manages user profile information and preferences\r\n */\r\n\r\nimport React from 'react';\r\n\r\nexport interface ProfileProps {\r\n  _userId?: string;\r\n  editable?: boolean;\r\n}\r\n\r\nexport default function Profile({ _userId, editable = true }: ProfileProps) {\r\n  return (\r\n    <div className=\"profile p-4\">\r\n      <h2 className=\"text-2xl font-bold mb-4\">My Profile</h2>\r\n      \r\n      <div className=\"max-w-2xl\">\r\n        <div className=\"bg-white p-6 rounded-lg shadow\">\r\n          <div className=\"flex items-center space-x-4 mb-6\">\r\n            <div className=\"w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center\">\r\n              <span className=\"text-gray-600 text-lg font-medium\">JD</span>\r\n            </div>\r\n            <div>\r\n              <h3 className=\"text-lg font-semibold\">John Doe</h3>\r\n              <p className=\"text-gray-600\">Member since 2024</p>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <label className=\"block text-sm font-medium mb-1\">Email</label>\r\n              <input \r\n                type=\"email\" \r\n                className=\"w-full p-2 border rounded\" \r\n                defaultValue=\"john.doe@example.com\"\r\n                readOnly={!editable}\r\n              />\r\n            </div>\r\n            \r\n            <div>\r\n              <label className=\"block text-sm font-medium mb-1\">Display Name</label>\r\n              <input \r\n                type=\"text\" \r\n                className=\"w-full p-2 border rounded\" \r\n                defaultValue=\"John D.\"\r\n                readOnly={!editable}\r\n              />\r\n            </div>\r\n            \r\n            <div>\r\n              <label className=\"block text-sm font-medium mb-1\">Bio</label>\r\n              <textarea \r\n                className=\"w-full p-2 border rounded\" \r\n                rows={3}\r\n                placeholder=\"Tell us a little about yourself...\"\r\n                readOnly={!editable}\r\n              />\r\n            </div>\r\n            \r\n            <div>\r\n              <label className=\"block text-sm font-medium mb-1\">Goals</label>\r\n              <div className=\"space-y-2\">\r\n                <div className=\"p-2 bg-blue-50 rounded\">Improve daily mood tracking</div>\r\n                <div className=\"p-2 bg-green-50 rounded\">Practice mindfulness daily</div>\r\n                <div className=\"p-2 bg-purple-50 rounded\">Build healthy sleep routine</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          {editable && (\r\n            <div className=\"mt-6\">\r\n              <button className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\">\r\n                Save Changes\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Profile };","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\pwa\\PWAInstallPrompt.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isInstalled' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":292,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":292,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * PWA Install Prompt Component\n * Provides a user-friendly prompt to install the app with benefits explanation\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Download, \n  _Wifi, \n  WifiOff, \n  Bell, \n  Shield, \n  Zap, \n  X,\n  Smartphone,\n  CheckCircle\n} from 'lucide-react';\nimport { useMobileFeatures } from '../../hooks/useMobileFeatures';\nimport { useVibration } from '../../hooks/useVibration';\n\nconst installBenefits = [\n  {\n    icon: <WifiOff className=\"h-5 w-5\" />,\n    title: 'Works Offline',\n    description: 'Access crisis resources even without internet'\n  },\n  {\n    icon: <Bell className=\"h-5 w-5\" />,\n    title: 'Smart Reminders',\n    description: 'Medication & wellness check-in notifications'\n  },\n  {\n    icon: <Zap className=\"h-5 w-5\" />,\n    title: 'Lightning Fast',\n    description: 'Instant access from your home screen'\n  },\n  {\n    icon: <Shield className=\"h-5 w-5\" />,\n    title: 'Secure & Private',\n    description: 'Your mental health data stays protected'\n  }\n];\n\nexport function PWAInstallPrompt() {\n  const { isAppInstallable, installApp, deviceInfo } = useMobileFeatures();\n  const { vibrate } = useVibration();\n  const [showPrompt, setShowPrompt] = useState(false);\n  const [isInstalling, setIsInstalling] = useState(false);\n  const [installSuccess, setInstallSuccess] = useState(false);\n  const [dismissCount, setDismissCount] = useState(() => {\n    const count = localStorage.getItem('pwa_dismiss_count');\n    return count ? parseInt(_count) : 0;\n  });\n\n  useEffect(() => {\n    // Show prompt after user engagement (30 seconds on site)\n    // But not if dismissed more than 3 times\n    if (isAppInstallable && dismissCount < 3) {\n      const _timer = setTimeout(() => {\n        setShowPrompt(true);\n      }, 30000);\n\n      return () => clearTimeout(_timer);\n    }\n  }, [isAppInstallable, dismissCount]);\n\n  // Also show if user scrolls significantly (engagement signal)\n  useEffect(() => {\n    if (!isAppInstallable || dismissCount >= 3) return;\n\n    let scrollCount = 0;\n    const handleScroll = () => {\n      scrollCount++;\n      if (scrollCount > 5 && !showPrompt) {\n        setShowPrompt(true);\n        window.removeEventListener('scroll', handleScroll);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [isAppInstallable, dismissCount, showPrompt]);\n\n  const handleInstall = async () => {\n    vibrate([50]);\n    setIsInstalling(true);\n\n    const _success = await installApp();\n    \n    if (_success) {\n      vibrate([100, 50, 100]);\n      setInstallSuccess(true);\n      \n      // Hide prompt after showing _success\n      setTimeout(() => {\n        setShowPrompt(false);\n        setInstallSuccess(false);\n      }, 3000);\n\n      // Track successful installation\n      localStorage.setItem('pwa_installed', 'true');\n      localStorage.setItem('pwa_install_date', new Date().toISOString());\n    } else {\n      // Installation was cancelled or failed\n      handleDismiss();\n    }\n\n    setIsInstalling(false);\n  };\n\n  const handleDismiss = () => {\n    vibrate([30]);\n    setShowPrompt(false);\n    \n    const newCount = dismissCount + 1;\n    setDismissCount(newCount);\n    localStorage.setItem('pwa_dismiss_count', newCount.toString());\n    \n    // If dismissed 3 times, don&apos;t show again for 30 days\n    if (newCount >= 3) {\n      const hideUntil = new Date();\n      hideUntil.setDate(hideUntil.getDate() + 30);\n      localStorage.setItem('pwa_hide_until', hideUntil.toISOString());\n    }\n  };\n\n  if (!isAppInstallable || !showPrompt) return null;\n\n  return (\n    <AnimatePresence>\n      <motion.div\n        initial={{ opacity: 0, y: 100 }}\n        animate={{ opacity: 1, y: 0 }}\n        exit={{ opacity: 0, y: 100 }}\n        className=\"fixed bottom-20 left-4 right-4 z-50 max-w-md mx-auto\"\n      >\n        <div className=\"bg-white rounded-2xl shadow-2xl border border-gray-200 overflow-hidden\">\n          {/* Header */}\n          <div className=\"bg-gradient-to-r from-primary-500 to-primary-600 p-4 text-white\">\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"bg-white/20 rounded-full p-2\">\n                  <Smartphone className=\"h-6 w-6\" />\n                </div>\n                <div>\n                  <h3 className=\"font-bold text-lg\">Install CoreV4</h3>\n                  <p className=\"text-sm text-white/90\">\n                    Add to your home screen for the best experience\n                  </p>\n                </div>\n              </div>\n              <button\n                onClick={handleDismiss}\n                className=\"p-1 hover:bg-white/20 rounded-lg transition-colors\"\n                aria-label=\"Dismiss\"\n              >\n                <X className=\"h-5 w-5\" />\n              </button>\n            </div>\n          </div>\n\n          {/* Content */}\n          {!installSuccess ? (\n            <div className=\"p-4\">\n              {/* Benefits Grid */}\n              <div className=\"grid grid-cols-2 gap-3 mb-4\">\n                {installBenefits.map((benefit, index) => (\n                  <motion.div\n                    key={benefit.title}\n                    initial={{ opacity: 0, y: 10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                    className=\"flex items-start space-x-2\"\n                  >\n                    <div className=\"text-primary-500 mt-0.5\">{benefit.icon}</div>\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900\">\n                        {benefit.title}\n                      </p>\n                      <p className=\"text-xs text-gray-600\">\n                        {benefit.description}\n                      </p>\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n\n              {/* Platform-specific instructions */}\n              <div className=\"bg-gray-50 rounded-lg p-3 mb-4\">\n                <p className=\"text-xs text-gray-600\">\n                  {deviceInfo.isIOS ? (\n                    <>Tap the share button <span className=\"font-mono bg-gray-200 px-1 rounded\">⎙</span> then &quot;Add to Home Screen&quot;</>\n                  ) : (\n                    <>Tap &quot;Install&quot; below to add CoreV4 to your home screen</>\n                  )}\n                </p>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex space-x-3\">\n                <button\n                  onClick={handleInstall}\n                  disabled={isInstalling}\n                  className=\"flex-1 bg-primary-600 text-white font-medium py-3 px-4 rounded-xl hover:bg-primary-700 active:scale-95 transition-all disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  {isInstalling ? (\n                    <span className=\"flex items-center justify-center\">\n                      <motion.div\n                        animate={{ rotate: 360 }}\n                        transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                        className=\"mr-2\"\n                      >\n                        <Download className=\"h-5 w-5\" />\n                      </motion.div>\n                      Installing...\n                    </span>\n                  ) : (\n                    <span className=\"flex items-center justify-center\">\n                      <Download className=\"h-5 w-5 mr-2\" />\n                      Install App\n                    </span>\n                  )}\n                </button>\n                <button\n                  onClick={handleDismiss}\n                  className=\"px-4 py-3 text-gray-600 font-medium hover:bg-gray-50 rounded-xl transition-colors\"\n                >\n                  Later\n                </button>\n              </div>\n\n              {/* Don't show again option after 2 dismissals */}\n              {dismissCount >= 2 && (\n                <button\n                  onClick={() => {\n                    setDismissCount(3);\n                    localStorage.setItem('pwa_dismiss_count', '3');\n                    handleDismiss();\n                  }}\n                  className=\"w-full mt-2 text-xs text-gray-500 hover:text-gray-700 transition-colors\"\n                >\n                  Don&apos;t show this again\n                </button>\n              )}\n            </div>\n          ) : (\n            /* Success State */\n            <motion.div\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              className=\"p-8 text-center\"\n            >\n              <motion.div\n                initial={{ scale: 0 }}\n                animate={{ scale: 1 }}\n                transition={{ type: \"spring\", delay: 0.2 }}\n                className=\"inline-flex items-center justify-center w-16 h-16 bg-green-100 rounded-full mb-4\"\n              >\n                <CheckCircle className=\"h-8 w-8 text-green-600\" />\n              </motion.div>\n              <h4 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                Successfully Installed!\n              </h4>\n              <p className=\"text-sm text-gray-600\">\n                CoreV4 is now on your home screen\n              </p>\n            </motion.div>\n          )}\n        </div>\n\n        {/* Mini prompt for future sessions */}\n        {dismissCount > 0 && dismissCount < 3 && !showPrompt && (\n          <motion.button\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={{ opacity: 1, scale: 1 }}\n            onClick={() => setShowPrompt(true)}\n            className=\"fixed bottom-24 right-4 bg-primary-600 text-white rounded-full p-3 shadow-lg\"\n            aria-label=\"Install app\"\n          >\n            <Download className=\"h-5 w-5\" />\n          </motion.button>\n        )}\n      </motion.div>\n    </AnimatePresence>\n  );\n}\n\n// Standalone component for showing install status in settings\nexport function PWAInstallStatus() {\n  const { deviceInfo, isAppInstallable, installApp } = useMobileFeatures();\n  const [isInstalled, setIsInstalled] = useState(false);\n\n  useEffect(() => {\n    setIsInstalled(\n      deviceInfo.isPWA || \n      localStorage.getItem('pwa_installed') === 'true'\n    );\n  }, [deviceInfo.isPWA]);\n\n  if (_isInstalled) {\n    return (\n      <div className=\"flex items-center space-x-2 text-green-600\">\n        <CheckCircle className=\"h-5 w-5\" />\n        <span className=\"text-sm font-medium\">App Installed</span>\n      </div>\n    );\n  }\n\n  if (isAppInstallable) {\n    return (\n      <button\n        onClick={installApp}\n        className=\"flex items-center space-x-2 text-primary-600 hover:text-primary-700\"\n      >\n        <Download className=\"h-5 w-5\" />\n        <span className=\"text-sm font-medium\">Install App</span>\n      </button>\n    );\n  }\n\n  return (\n    <div className=\"text-sm text-gray-500\">\n      Visit on mobile to install the app\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\settings\\Settings.tsx","messages":[{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":63,"column":21,"nodeType":"JSXOpeningElement","endLine":63,"endColumn":90},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must have accessible text.","line":70,"column":19,"nodeType":"JSXOpeningElement","endLine":70,"endColumn":87},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":78,"column":21,"nodeType":"JSXOpeningElement","endLine":78,"endColumn":90},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":107,"column":21,"nodeType":"JSXOpeningElement","endLine":107,"endColumn":90},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must have accessible text.","line":114,"column":19,"nodeType":"JSXOpeningElement","endLine":114,"endColumn":87},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":122,"column":21,"nodeType":"JSXOpeningElement","endLine":122,"endColumn":90},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must have accessible text.","line":129,"column":19,"nodeType":"JSXOpeningElement","endLine":129,"endColumn":87}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Settings Component - Placeholder for compilation\r\n * This component manages user preferences and application settings\r\n */\r\n\r\nimport React from 'react';\r\n\r\nexport interface SettingsProps {\r\n  _userId?: string;\r\n  _section?: 'general' | 'privacy' | 'notifications' | 'accessibility';\r\n}\r\n\r\nexport default function Settings({ _userId, _section = 'general' }: SettingsProps) {\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n        <div className=\"mb-8\">\r\n          <h1 className=\"text-3xl font-display font-bold text-gray-900 dark:text-white mb-2\">\r\n            Settings\r\n          </h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400\">\r\n            Customize your wellness experience and privacy preferences\r\n          </p>\r\n        </div>\r\n        \r\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\r\n          {/* Navigation Sidebar */}\r\n          <div className=\"lg:col-span-1\">\r\n            <nav className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm p-4 space-y-2\">\r\n              <h2 className=\"text-sm font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-4\">\r\n                Categories\r\n              </h2>\r\n              <button className=\"w-full flex items-center gap-3 p-3 text-left rounded-lg bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-sm\">\r\n                <span className=\"text-sm font-medium\">General</span>\r\n              </button>\r\n              <button className=\"w-full flex items-center gap-3 p-3 text-left rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300 transition-all\">\r\n                <span className=\"text-sm font-medium\">Privacy & Security</span>\r\n              </button>\r\n              <button className=\"w-full flex items-center gap-3 p-3 text-left rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300 transition-all\">\r\n                <span className=\"text-sm font-medium\">Notifications</span>\r\n              </button>\r\n              <button className=\"w-full flex items-center gap-3 p-3 text-left rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300 transition-all\">\r\n                <span className=\"text-sm font-medium\">Accessibility</span>\r\n              </button>\r\n            </nav>\r\n          </div>\r\n          \r\n          {/* Main Content */}\r\n          <div className=\"lg:col-span-3 space-y-6\">\r\n            {/* General Settings Card */}\r\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm overflow-hidden\">\r\n              <div className=\"px-6 py-4 border-b border-gray-200 dark:border-gray-700\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                  General Preferences\r\n                </h3>\r\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                  Customize your app experience\r\n                </p>\r\n              </div>\r\n              <div className=\"p-6 space-y-6\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                      Dark Mode\r\n                    </label>\r\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                      Switch between light and dark themes\r\n                    </p>\r\n                  </div>\r\n                  <label className=\"relative inline-flex items-center cursor-pointer\">\r\n                    <input type=\"checkbox\" className=\"sr-only peer\" />\r\n                    <div className=\"w-11 h-6 bg-gray-200 dark:bg-gray-700 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-gradient-to-r peer-checked:from-blue-500 peer-checked:to-purple-500\"></div>\r\n                  </label>\r\n                </div>\r\n                \r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                      Language\r\n                    </label>\r\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                      Choose your preferred language\r\n                    </p>\r\n                  </div>\r\n                  <select className=\"px-3 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg text-sm text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\">\r\n                    <option>English</option>\r\n                    <option>Spanish</option>\r\n                    <option>French</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            {/* Privacy Settings Card */}\r\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm overflow-hidden\">\r\n              <div className=\"px-6 py-4 border-b border-gray-200 dark:border-gray-700\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                  Privacy & Security\r\n                </h3>\r\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                  Control how your data is used and shared\r\n                </p>\r\n              </div>\r\n              <div className=\"p-6 space-y-6\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                      Share data for research\r\n                    </label>\r\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                      Help improve mental health research (_anonymized)\r\n                    </p>\r\n                  </div>\r\n                  <label className=\"relative inline-flex items-center cursor-pointer\">\r\n                    <input type=\"checkbox\" className=\"sr-only peer\" />\r\n                    <div className=\"w-11 h-6 bg-gray-200 dark:bg-gray-700 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-300 dark:peer-focus:ring-green-800 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-gradient-to-r peer-checked:from-green-400 peer-checked:to-emerald-500\"></div>\r\n                  </label>\r\n                </div>\r\n                \r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                      Analytics & Usage Data\r\n                    </label>\r\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                      Help us improve the app experience\r\n                    </p>\r\n                  </div>\r\n                  <label className=\"relative inline-flex items-center cursor-pointer\">\r\n                    <input type=\"checkbox\" className=\"sr-only peer\" />\r\n                    <div className=\"w-11 h-6 bg-gray-200 dark:bg-gray-700 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-cyan-300 dark:peer-focus:ring-cyan-800 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-gradient-to-r peer-checked:from-cyan-400 peer-checked:to-blue-500\"></div>\r\n                  </label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Settings };","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\theme\\WellnessThemeProvider.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":14,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":14,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { wellnessTheme } from '../../styles/wellness-theme';\r\n\r\ninterface ThemeContextType {\r\n  theme: 'light' | 'dark';\r\n  toggleTheme: () => void;\r\n  getGradient: (type: string) => string;\r\n  getToolGradient: (tool: string) => string;\r\n  applyComponentStyles: (component: string, variant?: string, size?: string) => string;\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextType | undefined>(_undefined);\r\n\r\nexport const useWellnessTheme = () => {\r\n  const context = useContext(_ThemeContext);\r\n  if (!context) {\r\n    throw new Error('useWellnessTheme must be used within a WellnessThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface WellnessThemeProviderProps {\r\n  children: React.ReactNode;\r\n  _defaultTheme?: 'light' | 'dark';\r\n}\r\n\r\nexport const WellnessThemeProvider: React.FC<WellnessThemeProviderProps> = ({\r\n  children,\r\n  _defaultTheme = 'light'\r\n}) => {\r\n  const [theme, setTheme] = useState<'light' | 'dark'>(_defaultTheme);\r\n\r\n  // Load theme from localStorage on mount\r\n  useEffect(() => {\r\n    const _savedTheme = localStorage.getItem('wellness-theme') as 'light' | 'dark' | null;\r\n    if (_savedTheme) {\r\n      setTheme(_savedTheme);\r\n    }\r\n  }, []);\r\n\r\n  // Apply theme class to document root\r\n  useEffect(() => {\r\n    const root = document.documentElement;\r\n    if (theme === 'dark') {\r\n      root.classList.add('dark');\r\n    } else {\r\n      root.classList.remove('dark');\r\n    }\r\n    localStorage.setItem('wellness-theme', theme);\r\n  }, [theme]);\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\r\n  };\r\n\r\n  const getGradient = (type: string) => {\r\n    const gradients = wellnessTheme.gradients as unknown;\r\n    return `bg-gradient-to-r ${gradients[type] || gradients.primary}`;\r\n  };\r\n\r\n  const getToolGradient = (tool: string) => {\r\n    const tools = wellnessTheme.gradients.tools as unknown;\r\n    return `bg-gradient-to-r ${tools[tool] || wellnessTheme.gradients.primary}`;\r\n  };\r\n\r\n  const applyComponentStyles = (component: string, variant?: string, size?: string) => {\r\n    const comp = (wellnessTheme.components as unknown)[component];\r\n    if (!comp) return '';\r\n    \r\n    let styles = comp.base || '';\r\n    \r\n    if (variant && comp.variants) {\r\n      styles += ` ${  comp.variants[variant]}`;\r\n    }\r\n    \r\n    if (size && comp.sizes) {\r\n      styles += ` ${  comp.sizes[size]}`;\r\n    }\r\n    \r\n    return styles;\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{\r\n      theme,\r\n      toggleTheme,\r\n      getGradient,\r\n      getToolGradient,\r\n      applyComponentStyles\r\n    }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\ui\\ConsoleLoader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\ui\\EnhancedLayout.tsx","messages":[{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":75,"column":13,"nodeType":"JSXOpeningElement","endLine":78,"endColumn":15},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":2,"message":"Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.","line":75,"column":13,"nodeType":"JSXOpeningElement","endLine":78,"endColumn":15},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useNavigation\" is called in function \"_QuickAccessPanel\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":174,"column":42,"nodeType":"Identifier","endLine":174,"endColumn":55},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called in function \"_QuickAccessPanel\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":175,"column":31,"nodeType":"Identifier","endLine":175,"endColumn":39},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":190,"column":13,"nodeType":"JSXOpeningElement","endLine":193,"endColumn":15},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":2,"message":"Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.","line":190,"column":13,"nodeType":"JSXOpeningElement","endLine":193,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isInstallable' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":258,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":258,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'notificationCount' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":260,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":260,"endColumn":27}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ReactNode, useEffect, useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Menu, X, AlertTriangle, Search, User, Settings, LogOut, \n  Home, _BarChart3, Heart, Users, Stethoscope, _Bell, \n  ChevronDown, Star, Clock, Command, Accessibility,\n  Sparkles, _Moon, _Sun, _ChevronLeft, Phone, MessageCircle,\n  Wind, Timer, BookOpen, _Activity\n} from 'lucide-react';\nimport { NavigationProvider, useNavigation } from '../navigation/NavigationContext';\nimport { GlobalSearch } from '../navigation/GlobalSearch';\nimport { Breadcrumbs, MobileBreadcrumbs } from '../navigation/Breadcrumbs';\nimport { FloatingCrisisButton, MobileCrisisButton } from '../navigation/FloatingCrisisButton';\nimport { _MobileNavigation } from './MobileNavigation';\nimport { useEnhancedKeyboardNavigation } from '../../hooks/useEnhancedKeyboardNavigation';\nimport { useAuth } from '../../hooks/useAuth';\nimport { _PrivacyBanner, _FreeBadge } from './PrivacyBanner';\nimport { toast } from 'react-hot-toast';\n\ninterface EnhancedLayoutProps {\n  children: ReactNode;\n}\n\n// Skip links for accessibility\nfunction SkipLinks() {\n  return (\n    <div className=\"sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 z-50\">\n      <a \n        href=\"#main-content\" \n        className=\"bg-primary-600 text-white px-4 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500\"\n      >\n        Skip to main content\n      </a>\n      <a \n        href=\"#main-navigation\" \n        className=\"bg-primary-600 text-white px-4 py-2 rounded-md ml-2 focus:outline-none focus:ring-2 focus:ring-primary-500\"\n      >\n        Skip to navigation\n      </a>\n      <a \n        href=\"#crisis-help\" \n        className=\"bg-red-600 text-white px-4 py-2 rounded-md ml-2 focus:outline-none focus:ring-2 focus:ring-red-500\"\n      >\n        Skip to crisis help\n      </a>\n    </div>\n  );\n}\n\n// User menu dropdown\nfunction UserMenu() {\n  const { user, logout } = useAuth();\n  const [isOpen, setIsOpen] = useState(false);\n  const { _preferences, favoriteRoutes } = useNavigation();\n\n  return (\n    <div className=\"relative\">\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"flex items-center space-x-2 px-3 py-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-all duration-200\"\n        aria-label=\"User menu\"\n        aria-expanded={isOpen}\n      >\n        <div className=\"w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white font-semibold\">\n          {user?.name?.charAt(0) || 'U'}\n        </div>\n        <ChevronDown className={`h-4 w-4 text-gray-600 dark:text-gray-400 transition-transform ${isOpen ? 'rotate-180' : ''}`} />\n      </button>\n\n      <AnimatePresence>\n        {isOpen && (\n          <>\n            {/* Backdrop */}\n            <div \n              className=\"fixed inset-0 z-30\"\n              onClick={() => setIsOpen(false)}\n            />\n            \n            {/* Dropdown */}\n            <motion.div\n              initial={{ opacity: 0, y: -10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -10 }}\n              className=\"absolute right-0 mt-2 w-64 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 z-40\"\n            >\n              {/* User info */}\n              <div className=\"px-4 py-3 border-b border-gray-200 dark:border-gray-700\">\n                <div className=\"font-semibold text-gray-900 dark:text-white\">{user?.name || 'Guest User'}</div>\n                <div className=\"text-sm text-gray-500 dark:text-gray-400\">{user?.email || 'Not signed in'}</div>\n              </div>\n\n              {/* Favorite routes */}\n              {favoriteRoutes.length > 0 && (\n                <div className=\"px-2 py-2 border-b border-gray-200\">\n                  <div className=\"px-2 py-1 text-xs font-semibold text-gray-500\">FAVORITES</div>\n                  {favoriteRoutes.slice(0, 3).map(route => (\n                    <Link\n                      key={route}\n                      to={route}\n                      onClick={() => setIsOpen(false)}\n                      className=\"flex items-center px-2 py-1.5 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors\"\n                    >\n                      <Star className=\"h-3 w-3 mr-2 text-yellow-500\" />\n                      {route.split('/').pop() || 'Dashboard'}\n                    </Link>\n                  ))}\n                </div>\n              )}\n\n              {/* Menu items */}\n              <div className=\"px-2 py-2\">\n                <Link\n                  to=\"/profile\"\n                  onClick={() => setIsOpen(false)}\n                  className=\"flex items-center px-2 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-lg\"\n                >\n                  <User className=\"h-4 w-4 mr-3\" />\n                  Profile\n                </Link>\n                <Link\n                  to=\"/settings\"\n                  onClick={() => setIsOpen(false)}\n                  className=\"flex items-center px-2 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-lg\"\n                >\n                  <Settings className=\"h-4 w-4 mr-3\" />\n                  Settings\n                </Link>\n                <button\n                  onClick={() => {\n                    const _event = new CustomEvent('showKeyboardHelp');\n                    window.dispatchEvent(_event);\n                    setIsOpen(false);\n                  }}\n                  className=\"w-full flex items-center px-2 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-lg\"\n                >\n                  <Command className=\"h-4 w-4 mr-3\" />\n                  Keyboard Shortcuts\n                </button>\n                <Link\n                  to=\"/accessibility\"\n                  onClick={() => setIsOpen(false)}\n                  className=\"flex items-center px-2 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-lg\"\n                >\n                  <Accessibility className=\"h-4 w-4 mr-3\" />\n                  Accessibility\n                </Link>\n              </div>\n\n              {/* Logout */}\n              <div className=\"px-2 py-2 border-t border-gray-200\">\n                <button\n                  onClick={() => {\n                    logout();\n                    setIsOpen(false);\n                    toast.success('Logged out successfully');\n                  }}\n                  className=\"w-full flex items-center px-2 py-2 text-sm text-red-600 hover:bg-red-50 rounded-lg\"\n                >\n                  <LogOut className=\"h-4 w-4 mr-3\" />\n                  Log Out\n                </button>\n              </div>\n            </motion.div>\n          </>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n\n// Quick access panel\nfunction _QuickAccessPanel() {\n  const { quickActions, recentRoutes } = useNavigation();\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <div className=\"relative\">\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"p-2 rounded-lg hover:bg-gray-100 transition-colors\"\n        aria-label=\"Quick access\"\n      >\n        <Clock className=\"h-5 w-5 text-gray-600\" />\n      </button>\n\n      <AnimatePresence>\n        {isOpen && (\n          <>\n            <div \n              className=\"fixed inset-0 z-30\"\n              onClick={() => setIsOpen(false)}\n            />\n            \n            <motion.div\n              initial={{ opacity: 0, scale: 0.95 }}\n              animate={{ opacity: 1, scale: 1 }}\n              exit={{ opacity: 0, scale: 0.95 }}\n              className=\"absolute right-0 mt-2 w-72 bg-white rounded-xl shadow-lg border border-gray-200 z-40\"\n            >\n              <div className=\"p-4\">\n                <h3 className=\"font-semibold text-gray-900 mb-3\">Quick Actions</h3>\n                <div className=\"grid grid-cols-3 gap-2\">\n                  {quickActions.map((action, index) => (\n                    <button\n                      key={index}\n                      onClick={() => {\n                        action.action();\n                        setIsOpen(false);\n                      }}\n                      className=\"flex flex-col items-center p-3 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors\"\n                    >\n                      <span className=\"text-2xl mb-1\">{action.icon}</span>\n                      <span className=\"text-xs text-gray-600\">{action.label}</span>\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              {recentRoutes.length > 0 && (\n                <div className=\"border-t border-gray-200 p-4\">\n                  <h3 className=\"font-semibold text-gray-900 mb-3\">Recent Pages</h3>\n                  <div className=\"space-y-1\">\n                    {recentRoutes.slice(0, 5).map((route, index) => (\n                      <Link\n                        key={index}\n                        to={route}\n                        onClick={() => setIsOpen(false)}\n                        className=\"flex items-center px-2 py-1.5 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors\"\n                      >\n                        <Clock className=\"h-3 w-3 mr-2 text-gray-400\" />\n                        {route.split('/').pop() || 'Dashboard'}\n                      </Link>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </motion.div>\n          </>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n\n// Main enhanced layout component\nfunction EnhancedLayoutContent({ children }: EnhancedLayoutProps) {\n  const location = useLocation();\n  const { \n    mode, \n    _isSearchOpen, \n    setSearchOpen, \n    isMobileMenuOpen, \n    setMobileMenuOpen,\n    _preferences,\n    _crisisDetected \n  } = useNavigation();\n  const [isInstallable, setIsInstallable] = useState(false);\n  const [deferredPrompt, setDeferredPrompt] = useState<unknown>(null);\n  const [notificationCount] = useState(0);\n\n  // Enhanced keyboard navigation\n  useEnhancedKeyboardNavigation();\n\n  // Navigation items based on mode - Crisis-first design\n  const getNavigationItems = () => {\n    if (mode === 'crisis') {\n      // Simplified navigation for crisis mode\n      return [\n        { name: '🆘 Crisis Help', href: '/crisis', icon: <AlertTriangle className=\"h-5 w-5\" /> },\n        { name: '🌬️ Breathe', href: '/wellness/breathing', icon: <Wind className=\"h-5 w-5\" /> },\n        { name: '💬 Support', href: '/community', icon: <Users className=\"h-5 w-5\" /> },\n      ];\n    }\n    \n    // Normal navigation - Maximum 5 sections with emoji visual anchors\n    return [\n      { name: '🏠 Home', href: '/', icon: <Home className=\"h-5 w-5\" /> },\n      { name: '🧘 Wellness Tools', href: '/wellness', icon: <Heart className=\"h-5 w-5\" /> },\n      { name: '💬 Community Support', href: '/community', icon: <Users className=\"h-5 w-5\" /> },\n      { name: '👨‍⚕️ Find Professionals', href: '/professional', icon: <Stethoscope className=\"h-5 w-5\" /> },\n      { name: '⚙️ My Settings', href: '/settings', icon: <Settings className=\"h-5 w-5\" /> },\n    ];\n  };\n\n  const navigation = getNavigationItems();\n\n  const isActive = (path: string) => {\n    if (path === '/') {\n      return location.pathname === '/';\n    }\n    return location.pathname.startsWith(_path);\n  };\n\n  // PWA Install Prompt\n  useEffect(() => {\n    const handleBeforeInstallPrompt = (e: Event) => {\n      e.preventDefault();\n      setDeferredPrompt(_e);\n      setIsInstallable(true);\n    };\n\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    \n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    };\n  }, []);\n\n  const _handleInstallClick = async () => {\n    if (!deferredPrompt) return;\n    \n    deferredPrompt.prompt();\n    const { outcome } = await deferredPrompt.userChoice;\n    \n    if (outcome === 'accepted') {\n      setIsInstallable(false);\n      toast.success('App installed successfully!');\n    }\n    setDeferredPrompt(null);\n  };\n\n  return (\n    <div className={`h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 flex ${_preferences.highContrast ? 'high-contrast' : ''} ${mode === 'crisis' ? 'crisis-mode' : ''} relative overflow-hidden`}>\n      {/* Console Background Effects */}\n      <div className=\"fixed inset-0 pointer-events-none\">\n        <motion.div\n          animate={{\n            x: [0, 100, 0],\n            y: [0, -50, 0],\n          }}\n          transition={{\n            duration: 20,\n            repeat: Infinity,\n            ease: 'linear',\n          }}\n          className=\"absolute top-1/4 left-1/4 w-96 h-96 bg-gradient-to-r from-blue-500/5 to-purple-500/5 rounded-full blur-3xl\"\n        />\n        <motion.div\n          animate={{\n            x: [0, -150, 0],\n            y: [0, 100, 0],\n          }}\n          transition={{\n            duration: 25,\n            repeat: Infinity,\n            ease: 'linear',\n          }}\n          className=\"absolute bottom-1/4 right-1/3 w-80 h-80 bg-gradient-to-r from-green-500/5 to-blue-500/5 rounded-full blur-3xl\"\n        />\n      </div>\n\n      {/* Crisis Banner - Console Style */}\n      <div className=\"fixed top-0 left-0 right-0 z-50 bg-gradient-to-r from-red-600 via-pink-600 to-red-600 text-white px-4 py-3 backdrop-blur-md shadow-console-depth\">\n        <div className=\"flex items-center justify-center space-x-6 text-sm font-medium\">\n          <motion.span \n            animate={{ scale: [1, 1.05, 1] }}\n            transition={{ duration: 2, repeat: Infinity }}\n            className=\"flex items-center space-x-2\"\n          >\n            <AlertTriangle className=\"h-4 w-4\" />\n            <span>🆘 NEED HELP NOW?</span>\n          </motion.span>\n          <a \n            href=\"tel:988\" \n            className=\"flex items-center space-x-2 bg-white/20 hover:bg-white/30 px-4 py-2 rounded-console border border-white/20 hover:border-white/40 transition-all hover:scale-105\"\n          >\n            <Phone className=\"h-4 w-4\" />\n            <span>Call 988</span>\n          </a>\n          <Link \n            to=\"/crisis\" \n            className=\"flex items-center space-x-2 bg-white/20 hover:bg-white/30 px-4 py-2 rounded-console border border-white/20 hover:border-white/40 transition-all hover:scale-105\"\n          >\n            <MessageCircle className=\"h-4 w-4\" />\n            <span>Crisis Chat</span>\n          </Link>\n        </div>\n      </div>\n      \n      {/* Skip Links */}\n      <SkipLinks />\n\n      {/* Console Sidebar Navigation - Mobile Enhanced */}\n      <motion.aside\n        animate={{ \n          width: isMobileMenuOpen ? 300 : 90,\n          x: window.innerWidth < 768 && !isMobileMenuOpen ? -90 : 0 // Hide on mobile when closed\n        }}\n        transition={{\n          duration: 0.2,\n          ease: 'easeInOut'\n        }}\n        className=\"bg-gradient-to-b from-gray-800/95 to-gray-900/95 border-r border-gray-700/50 flex-shrink-0 overflow-hidden backdrop-blur-console shadow-console-depth fixed z-50 md:relative md:z-30\"\n        style={{ \n          marginTop: '56px',\n          pointerEvents: 'auto'\n        }}\n      >\n        {/* Sidebar glow effect */}\n        <div className=\"absolute inset-0 bg-gradient-to-r from-blue-500/5 via-transparent to-purple-500/5 pointer-events-none\" />\n        \n        <div className=\"p-6 relative z-10\">\n          {/* Console Logo */}\n          <motion.div \n            className=\"flex items-center mb-10\"\n            whileHover={{ scale: 1.02 }}\n            transition={{ type: \"spring\", stiffness: 400, damping: 25 }}\n          >\n            <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-console-lg flex items-center justify-center flex-shrink-0 shadow-console-glow\">\n              <Sparkles className=\"w-7 h-7 text-white\" />\n            </div>\n            <motion.div\n              animate={{ opacity: isMobileMenuOpen ? 1 : 0 }}\n              className=\"ml-4 overflow-hidden\"\n            >\n              <h1 className=\"text-xl font-bold text-white mb-1\">\n                Astral Core\n              </h1>\n              <p className=\"text-sm text-gray-300\">Mental Health Console</p>\n            </motion.div>\n          </motion.div>\n\n          {/* Console Navigation */}\n          <nav className=\"space-y-3\">\n            {navigation.map((item, index) => {\n              const isActiveRoute = isActive(item.href);\n              return (\n                <motion.div\n                  key={item.name}\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ delay: index * 0.1 }}\n                >\n                  <Link\n                    to={item.href}\n                    className={`group flex items-center p-4 rounded-console-lg transition-all duration-300 relative overflow-hidden min-h-[56px] min-w-[56px] ${\n                      isActiveRoute\n                        ? 'bg-gradient-to-r from-blue-500/20 to-purple-500/20 text-white border border-blue-400/30 shadow-console-glow'\n                        : 'text-gray-300 hover:text-white hover:bg-gray-700/50 border border-gray-700/30 hover:border-gray-600/50'\n                    }`}\n                    style={{\n                      pointerEvents: 'auto',\n                      zIndex: 10\n                    }}\n                  >\n                    {/* Console tile background effect */}\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-blue-500/5 via-transparent to-purple-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                    \n                    <div className={`flex-shrink-0 p-2 rounded-console ${isActiveRoute ? 'bg-blue-500/20' : 'bg-gray-700/50 group-hover:bg-gray-600/50'} transition-colors duration-300`}>\n                      {item.icon}\n                    </div>\n                    \n                    <motion.div\n                      animate={{ opacity: isMobileMenuOpen ? 1 : 0, x: isMobileMenuOpen ? 0 : -10 }}\n                      className=\"ml-4 overflow-hidden relative z-10\"\n                    >\n                      <span className=\"font-medium text-sm\">\n                        {item.name}\n                      </span>\n                      {isActiveRoute && (\n                        <div className=\"w-full h-0.5 bg-gradient-to-r from-blue-400 to-purple-400 mt-1 rounded-full\" />\n                      )}\n                    </motion.div>\n\n                    {/* Active indicator */}\n                    {isActiveRoute && (\n                      <motion.div\n                        layoutId=\"activeNav\"\n                        className=\"absolute left-0 top-0 bottom-0 w-1 bg-gradient-to-b from-blue-400 to-purple-500 rounded-r-full\"\n                      />\n                    )}\n                  </Link>\n                </motion.div>\n              );\n            })}\n          </nav>\n\n          {/* Console Quick Wellness - Show when expanded */}\n          <motion.div\n            animate={{ opacity: isMobileMenuOpen ? 1 : 0, height: isMobileMenuOpen ? 'auto' : 0 }}\n            className=\"mt-8 overflow-hidden\"\n          >\n            <div className=\"flex items-center mb-4\">\n              <div className=\"h-px bg-gradient-to-r from-transparent via-gray-600 to-transparent flex-1\" />\n              <h3 className=\"text-xs font-semibold text-gray-400 uppercase tracking-wider mx-3\">\n                Quick Actions\n              </h3>\n              <div className=\"h-px bg-gradient-to-r from-transparent via-gray-600 to-transparent flex-1\" />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Link\n                to=\"/wellness/breathing\"\n                className=\"group flex items-center p-3 rounded-console text-gray-300 hover:text-white hover:bg-cyan-500/10 border border-gray-700/50 hover:border-cyan-400/30 transition-all duration-300 min-h-[56px] min-w-[56px]\"\n                style={{\n                  pointerEvents: 'auto',\n                  zIndex: 10\n                }}\n              >\n                <div className=\"p-1.5 bg-cyan-500/20 rounded-console\">\n                  <Wind className=\"h-4 w-4 text-cyan-400\" />\n                </div>\n                <span className=\"ml-3 text-sm font-medium\">Breathing</span>\n                <motion.div\n                  className=\"ml-auto opacity-0 group-hover:opacity-100\"\n                  initial={false}\n                  animate={{ x: 0 }}\n                  whileHover={{ x: 5 }}\n                >\n                  <div className=\"w-1.5 h-1.5 bg-cyan-400 rounded-full\" />\n                </motion.div>\n              </Link>\n              \n              <Link\n                to=\"/wellness/meditation\"\n                className=\"group flex items-center p-3 rounded-console text-gray-300 hover:text-white hover:bg-indigo-500/10 border border-gray-700/50 hover:border-indigo-400/30 transition-all duration-300 min-h-[56px] min-w-[56px]\"\n                style={{\n                  pointerEvents: 'auto',\n                  zIndex: 10\n                }}\n              >\n                <div className=\"p-1.5 bg-indigo-500/20 rounded-console\">\n                  <Timer className=\"h-4 w-4 text-indigo-400\" />\n                </div>\n                <span className=\"ml-3 text-sm font-medium\">Meditation</span>\n                <motion.div\n                  className=\"ml-auto opacity-0 group-hover:opacity-100\"\n                  initial={false}\n                  animate={{ x: 0 }}\n                  whileHover={{ x: 5 }}\n                >\n                  <div className=\"w-1.5 h-1.5 bg-indigo-400 rounded-full\" />\n                </motion.div>\n              </Link>\n              \n              <Link\n                to=\"/wellness/journal\"\n                className=\"group flex items-center p-3 rounded-console text-gray-300 hover:text-white hover:bg-green-500/10 border border-gray-700/50 hover:border-green-400/30 transition-all duration-300 min-h-[56px] min-w-[56px]\"\n                style={{\n                  pointerEvents: 'auto',\n                  zIndex: 10\n                }}\n              >\n                <div className=\"p-1.5 bg-green-500/20 rounded-console\">\n                  <BookOpen className=\"h-4 w-4 text-green-400\" />\n                </div>\n                <span className=\"ml-3 text-sm font-medium\">Journal</span>\n                <motion.div\n                  className=\"ml-auto opacity-0 group-hover:opacity-100\"\n                  initial={false}\n                  animate={{ x: 0 }}\n                  whileHover={{ x: 5 }}\n                >\n                  <div className=\"w-1.5 h-1.5 bg-green-400 rounded-full\" />\n                </motion.div>\n              </Link>\n            </div>\n          </motion.div>\n\n          {/* Console Bottom Actions */}\n          <motion.div\n            animate={{ opacity: isMobileMenuOpen ? 1 : 0 }}\n            className=\"absolute bottom-6 left-6 right-6\"\n          >\n            <div className=\"space-y-3\">\n              <button\n                onClick={() => setSearchOpen(true)}\n                className=\"w-full flex items-center p-3 rounded-console text-gray-300 hover:text-white hover:bg-gray-700/50 border border-gray-700/50 hover:border-gray-600/50 transition-all duration-300 group min-h-[56px] min-w-[56px]\"\n                style={{\n                  pointerEvents: 'auto',\n                  zIndex: 10\n                }}\n              >\n                <div className=\"p-1.5 bg-gray-700/50 group-hover:bg-gray-600/50 rounded-console transition-colors\">\n                  <Search className=\"h-4 w-4\" />\n                </div>\n                <span className=\"ml-3 text-sm font-medium\">Search Platform</span>\n              </button>\n              <UserMenu />\n            </div>\n          </motion.div>\n        </div>\n      </motion.aside>\n\n      {/* Console Main Content Area */}\n      <div className=\"flex-1 flex flex-col relative z-10\" style={{ marginTop: '56px' }}>\n        {/* Console Mobile Header - Enhanced Gaming Aesthetics */}\n        <header \n          id=\"main-navigation\"\n          className=\"bg-gradient-to-r from-gray-800/95 via-gray-850/95 to-gray-800/95 backdrop-blur-console border-b border-gray-700/50 px-4 py-3 lg:hidden shadow-console-card relative overflow-hidden\"\n        >\n          {/* Header gaming accent line */}\n          <div className=\"absolute top-0 left-0 right-0 h-px bg-gradient-to-r from-transparent via-console-accent to-transparent opacity-30\" />\n          \n          <div className=\"flex justify-between items-center relative z-10\">\n            {/* Mobile Console Title - Gaming Style */}\n            <motion.div \n              className=\"flex items-center space-x-3\"\n              whileHover={{ scale: 1.02 }}\n              transition={{ type: \"spring\", stiffness: 400, damping: 25 }}\n            >\n              <div className=\"w-10 h-10 bg-gradient-to-r from-console-accent to-blue-500 rounded-console-lg flex items-center justify-center shadow-console-glow relative\">\n                <Sparkles className=\"w-6 h-6 text-white\" />\n                <div className=\"absolute inset-0 bg-gradient-to-r from-console-accent/20 to-blue-500/20 rounded-console-lg blur-sm\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-white tracking-wide\">\n                  ASTRAL CORE\n                </h1>\n                <p className=\"text-xs text-console-accent font-medium tracking-wider\">\n                  MENTAL HEALTH CONSOLE\n                </p>\n              </div>\n            </motion.div>\n\n            {/* Console Menu Toggle - Gaming Button */}\n            <motion.button\n              onClick={() => setMobileMenuOpen(!isMobileMenuOpen)}\n              className=\"console-focusable group relative p-3 rounded-console-lg text-gray-300 hover:text-white bg-gray-700/30 hover:bg-gray-600/40 border border-gray-600/50 hover:border-console-accent/50 transition-all duration-300 shadow-console-card min-h-[56px] min-w-[56px]\"\n              aria-label=\"Toggle console sidebar\"\n              aria-expanded={isMobileMenuOpen}\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              style={{\n                pointerEvents: 'auto',\n                zIndex: 20\n              }}\n            >\n              {/* Button glow effect */}\n              <div className=\"absolute inset-0 bg-gradient-to-r from-console-accent/10 to-blue-500/10 rounded-console-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n              \n              <motion.div\n                animate={{ rotate: isMobileMenuOpen ? 180 : 0 }}\n                transition={{ duration: 0.3 }}\n                className=\"relative z-10\"\n              >\n                {isMobileMenuOpen ? (\n                  <X className=\"h-5 w-5\" />\n                ) : (\n                  <Menu className=\"h-5 w-5\" />\n                )}\n              </motion.div>\n            </motion.button>\n          </div>\n        </header>\n\n        {/* Console Breadcrumbs - Mobile Optimized */}\n        <div className=\"bg-gradient-to-r from-gray-800/40 via-gray-850/50 to-gray-800/40 backdrop-blur-console px-4 md:px-6 py-3 border-b border-gray-700/30 relative overflow-hidden\">\n          {/* Mobile breadcrumb accent */}\n          <div className=\"absolute bottom-0 left-0 right-0 h-px bg-gradient-to-r from-transparent via-console-accent/30 to-transparent\" />\n          \n          <div className=\"hidden md:block\">\n            <Breadcrumbs />\n          </div>\n          <div className=\"block md:hidden\">\n            <MobileBreadcrumbs />\n          </div>\n        </div>\n\n        {/* Console Main Content - Mobile Enhanced */}\n        <main id=\"main-content\" className=\"flex-1 overflow-y-auto bg-transparent relative smooth-scroll\">\n          <motion.div\n            key={location.pathname}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            transition={{ duration: _preferences.reducedMotion ? 0 : 0.4 }}\n            className=\"relative z-10 min-h-screen console-safe-area\"\n          >\n            {children}\n          </motion.div>\n          \n          {/* Mobile bottom padding for fixed nav */}\n          <div className=\"h-20 md:h-0\" /> {/* Safe area for mobile navigation */}\n        </main>\n      </div>\n\n      {/* Global Search */}\n      <GlobalSearch />\n      \n      {/* Mobile Console Navigation Overlay */}\n      <AnimatePresence>\n        {isMobileMenuOpen && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-30 md:hidden\"\n            onClick={() => setMobileMenuOpen(false)}\n          />\n        )}\n      </AnimatePresence>\n      \n      {/* Floating Crisis Button - Mobile Enhanced */}\n      <FloatingCrisisButton />\n      <MobileCrisisButton />\n      \n      {/* Console Mobile Safe Area Styles */}\n      <style>{`\n        .console-safe-area {\n          padding-bottom: env(safe-area-inset-bottom, 0);\n        }\n        \n        @media (max-width: 768px) {\n          .console-safe-area {\n            padding-left: env(safe-area-inset-left, 0);\n            padding-right: env(safe-area-inset-right, 0);\n          }\n        }\n        \n        .backdrop-blur-console {\n          backdrop-filter: blur(_12px);\n          -webkit-backdrop-filter: blur(_12px);\n        }\n      `}</style>\n    </div>\n  );\n}\n\n// Export the wrapped component\nexport function EnhancedLayout({ children }: EnhancedLayoutProps) {\n  return (\n    <NavigationProvider>\n      <EnhancedLayoutContent>{children}</EnhancedLayoutContent>\n    </NavigationProvider>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\ui\\MobileNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\ui\\PrivacyBanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\wellness\\BreathingExercises.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\wellness\\MeditationTimer.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'stopAmbientSound'. Either include it or remove the dependency array.","line":149,"column":6,"nodeType":"ArrayExpression","endLine":149,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [stopAmbientSound]","fix":{"range":[4664,4666],"text":"[stopAmbientSound]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'volume'. Either include it or remove the dependency array.","line":179,"column":6,"nodeType":"ArrayExpression","endLine":179,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [volume]","fix":{"range":[5715,5717],"text":"[volume]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'playBell'. Either include it or remove the dependency array.","line":325,"column":6,"nodeType":"ArrayExpression","endLine":325,"endColumn":72,"suggestions":[{"desc":"Update the dependencies array to be: [stopAmbientSound, selectedType, duration, sessions, updateStreak, playBell]","fix":{"range":[10040,10106],"text":"[stopAmbientSound, selectedType, duration, sessions, updateStreak, playBell]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":667,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[23420,23438],"text":"\n                &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[23420,23438],"text":"\n                &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[23420,23438],"text":"\n                &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[23420,23438],"text":"\n                &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":667,"column":33,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[23453,23469],"text":"&quot;\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[23453,23469],"text":"&ldquo;\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[23453,23469],"text":"&#34;\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[23453,23469],"text":"&rdquo;\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":685,"column":19,"nodeType":"JSXOpeningElement","endLine":685,"endColumn":102},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":702,"column":19,"nodeType":"JSXOpeningElement","endLine":702,"endColumn":102},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":750,"column":19,"nodeType":"JSXOpeningElement","endLine":750,"endColumn":102}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Play,\n  Pause,\n  RotateCcw,\n  _Volume2,\n  VolumeX,\n  Settings,\n  Bell,\n  Music,\n  Headphones,\n  Timer,\n  TrendingUp,\n  Calendar,\n  Award,\n  _ChevronLeft,\n  _ChevronRight,\n  Zap,\n  Heart,\n  Brain,\n  Wind,\n  Star\n} from 'lucide-react';\nimport { secureStorage } from '../../services/security/SecureLocalStorage';\n\n// Meditation types and their benefits\nconst MEDITATION_TYPES = {\n  mindfulness: {\n    name: 'Mindfulness',\n    description: 'Present moment awareness',\n    icon: Brain,\n    color: 'from-blue-400 to-indigo-500',\n    benefits: ['Reduced stress', 'Better focus', 'Emotional regulation'],\n    defaultDuration: 10\n  },\n  loving_kindness: {\n    name: 'Loving Kindness',\n    description: 'Cultivate compassion',\n    icon: Heart,\n    color: 'from-pink-400 to-red-500',\n    benefits: ['Increased empathy', 'Self-compassion', 'Positive emotions'],\n    defaultDuration: 15\n  },\n  body_scan: {\n    name: 'Body Scan',\n    description: 'Progressive relaxation',\n    icon: Zap,\n    color: 'from-green-400 to-emerald-500',\n    benefits: ['Physical relaxation', 'Body awareness', 'Tension release'],\n    defaultDuration: 20\n  },\n  breath_focus: {\n    name: 'Breath Focus',\n    description: 'Anchor to breathing',\n    icon: Wind,\n    color: 'from-cyan-400 to-blue-500',\n    benefits: ['Calming', 'Concentration', 'Anxiety reduction'],\n    defaultDuration: 5\n  }\n};\n\n// Ambient sound options\nconst AMBIENT_SOUNDS = {\n  none: { name: 'Silence', icon: VolumeX },\n  rain: { name: 'Rain', icon: Music, frequency: 60, variation: 20 },\n  ocean: { name: 'Ocean Waves', icon: Music, frequency: 40, variation: 15 },\n  forest: { name: 'Forest', icon: Music, frequency: 80, variation: 30 },\n  singing_bowl: { name: 'Singing Bowl', icon: Bell, frequency: 256, variation: 0 },\n  white_noise: { name: 'White Noise', icon: Headphones, frequency: 0, variation: 0 }\n};\n\n// Bell intervals\nconst _BELL_INTERVALS = {\n  none: 'No bells',\n  start_end: 'Start & End only',\n  '1': 'Every minute',\n  '2': 'Every 2 minutes',\n  '5': 'Every 5 minutes',\n  '10': 'Every 10 minutes'\n};\n\ninterface MeditationSession {\n  id: string;\n  type: keyof typeof MEDITATION_TYPES;\n  duration: number;\n  completedDuration: number;\n  timestamp: Date;\n  notes?: string;\n  moodBefore?: number;\n  moodAfter?: number;\n}\n\ninterface MeditationStreak {\n  current: number;\n  longest: number;\n  lastSessionDate: string | null;\n}\n\nexport const MeditationTimer: React.FC = () => {\n  const [selectedType, setSelectedType] = useState<keyof typeof MEDITATION_TYPES>('mindfulness');\n  const [duration, setDuration] = useState(10); // minutes\n  const [timeRemaining, setTimeRemaining] = useState(0); // seconds\n  const [isActive, setIsActive] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [ambientSound, setAmbientSound] = useState<keyof typeof AMBIENT_SOUNDS>('none');\n  const [bellInterval, setBellInterval] = useState<keyof typeof BELL_INTERVALS>('start_end');\n  const [volume, setVolume] = useState(50);\n  const [showSettings, setShowSettings] = useState(false);\n  const [sessions, setSessions] = useState<MeditationSession[]>([]);\n  const [streak, setStreak] = useState<MeditationStreak>({ current: 0, longest: 0, lastSessionDate: null });\n  const [showStats, setShowStats] = useState(false);\n  const [customMessage, setCustomMessage] = useState('');\n  const [preparationTime, setPreparationTime] = useState(10); // seconds\n  const [isPreparing, setIsPreparing] = useState(false);\n  \n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const audioContext = useRef<AudioContext | null>(null);\n  const ambientOscillator = useRef<OscillatorNode | null>(null);\n  const ambientGain = useRef<GainNode | null>(null);\n  const sessionStartTime = useRef<Date | null>(null);\n  const elapsedTime = useRef(0);\n\n  // Initialize audio context\n  useEffect(() => {\n    if (typeof window !== 'undefined' && !audioContext.current) {\n      audioContext.current = new (window.AudioContext || (window as unknown).webkitAudioContext)();\n    }\n    \n    // Load saved sessions and streak\n    const _savedSessions = secureStorage.getItem('meditationSessions');\n    const _savedStreak = secureStorage.getItem('meditationStreak');\n    \n    if (_savedSessions) {\n      const parsed = JSON.parse(_savedSessions);\n      setSessions(parsed.map((s: unknown) => ({\n        ...s,\n        timestamp: new Date(s.timestamp)\n      })));\n    }\n    \n    if (_savedStreak) {\n      setStreak(JSON.parse(_savedStreak));\n    }\n    \n    return () => {\n      stopAmbientSound();\n    };\n  }, []);\n\n  // Play bell sound\n  const playBell = useCallback((type: 'start' | 'end' | 'interval' = 'interval') => {\n    if (!audioContext.current) return;\n    \n    const oscillator = audioContext.current.createOscillator();\n    const gainNode = audioContext.current.createGain();\n    \n    oscillator.connect(gainNode);\n    gainNode.connect(audioContext.current.destination);\n    \n    // Different frequencies for different bell types\n    const frequencies = {\n      start: 528,  // Solfeggio frequency for transformation\n      end: 639,    // Solfeggio frequency for harmony\n      interval: 432 // Natural frequency\n    };\n    \n    oscillator.frequency.value = frequencies[type];\n    oscillator.type = 'sine';\n    \n    // Envelope for bell-like sound\n    const now = audioContext.current.currentTime;\n    gainNode.gain.setValueAtTime(0, now);\n    gainNode.gain.linearRampToValueAtTime(volume / 100 * 0.3, now + 0.01);\n    gainNode.gain.exponentialRampToValueAtTime(0.001, now + 1.5);\n    \n    oscillator.start(_now);\n    oscillator.stop(now + 1.5);\n  }, []);\n\n  // Start ambient sound\n  const startAmbientSound = () => {\n    if (!audioContext.current || ambientSound === 'none') return;\n    \n    const sound = AMBIENT_SOUNDS[ambientSound];\n    if (!sound.frequency) {\n      // White noise\n      const bufferSize = 2 * audioContext.current.sampleRate;\n      const noiseBuffer = audioContext.current.createBuffer(1, bufferSize, audioContext.current.sampleRate);\n      const output = noiseBuffer.getChannelData(0);\n      \n      for (let i = 0; i < bufferSize; i++) {\n        output[i] = Math.random() * 2 - 1;\n      }\n      \n      const whiteNoise = audioContext.current.createBufferSource();\n      whiteNoise.buffer = noiseBuffer;\n      whiteNoise.loop = true;\n      \n      ambientGain.current = audioContext.current.createGain();\n      ambientGain.current.gain.value = volume / 100 * 0.1;\n      \n      whiteNoise.connect(ambientGain.current);\n      ambientGain.current.connect(audioContext.current.destination);\n      whiteNoise.start();\n    } else {\n      // Tonal ambient sounds\n      ambientOscillator.current = audioContext.current.createOscillator();\n      ambientGain.current = audioContext.current.createGain();\n      \n      ambientOscillator.current.frequency.value = sound.frequency;\n      ambientOscillator.current.type = 'sine';\n      \n      // Add some variation for natural sound\n      if (sound.variation > 0) {\n        const lfo = audioContext.current.createOscillator();\n        const lfoGain = audioContext.current.createGain();\n        \n        lfo.frequency.value = 0.2; // Slow modulation\n        lfoGain.gain.value = sound.variation;\n        \n        lfo.connect(lfoGain);\n        lfoGain.connect(ambientOscillator.current.frequency);\n        lfo.start();\n      }\n      \n      ambientGain.current.gain.value = volume / 100 * 0.05;\n      \n      ambientOscillator.current.connect(ambientGain.current);\n      ambientGain.current.connect(audioContext.current.destination);\n      ambientOscillator.current.start();\n    }\n  };\n\n  // Stop ambient sound\n  const stopAmbientSound = useCallback(() => {\n    if (ambientOscillator.current) {\n      ambientOscillator.current.stop();\n      ambientOscillator.current = null;\n    }\n    if (ambientGain.current) {\n      ambientGain.current.disconnect();\n      ambientGain.current = null;\n    }\n  }, []);\n\n  // Start meditation\n  const startMeditation = () => {\n    setIsPreparing(true);\n    setTimeRemaining(_preparationTime);\n    \n    // Start preparation countdown\n    const _prepInterval = setInterval(() => {\n      setTimeRemaining(prev => {\n        if (prev <= 1) {\n          clearInterval(_prepInterval);\n          setIsPreparing(false);\n          actuallyStartMeditation();\n          return duration * 60;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n\n  // Actually start the meditation after preparation\n  const actuallyStartMeditation = () => {\n    setIsActive(true);\n    setIsPaused(false);\n    sessionStartTime.current = new Date();\n    elapsedTime.current = 0;\n    setTimeRemaining(duration * 60);\n    \n    playBell('start');\n    startAmbientSound();\n  };\n\n  // Pause/Resume meditation\n  const togglePause = () => {\n    setIsPaused(!isPaused);\n    if (_isPaused) {\n      startAmbientSound();\n    } else {\n      stopAmbientSound();\n    }\n  };\n\n  // Stop meditation\n  const stopMeditation = useCallback(() => {\n    setIsActive(false);\n    setIsPaused(false);\n    setIsPreparing(false);\n    \n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n    \n    stopAmbientSound();\n    \n    // Save session if it lasted more than 1 minute\n    if (elapsedTime.current > 60 && sessionStartTime.current) {\n      const session: MeditationSession = {\n        id: Date.now().toString(),\n        type: selectedType,\n        duration: duration * 60,\n        completedDuration: elapsedTime.current,\n        timestamp: sessionStartTime.current\n      };\n      \n      const _updatedSessions = [...sessions, session];\n      setSessions(_updatedSessions);\n      secureStorage.setItem('meditationSessions', JSON.stringify(_updatedSessions));\n      \n      // Update streak\n      updateStreak();\n      \n      // Play completion bell\n      if (elapsedTime.current >= duration * 60 * 0.8) {\n        playBell('end');\n      }\n    }\n    \n    setTimeRemaining(0);\n  }, [duration, sessions, selectedType, stopAmbientSound, updateStreak]);\n\n  // Update meditation streak\n  const updateStreak = useCallback(() => {\n    const today = new Date().toDateString();\n    const yesterday = new Date(Date.now() - 86400000).toDateString();\n    \n    const newStreak = { ...streak };\n    \n    if (streak.lastSessionDate === today) {\n      // Already meditated today, don&apos;t change streak\n    } else if (streak.lastSessionDate === yesterday) {\n      // Continuing streak\n      newStreak.current += 1;\n      newStreak.longest = Math.max(newStreak.current, newStreak.longest);\n    } else {\n      // Starting new streak\n      newStreak.current = 1;\n      newStreak.longest = Math.max(1, newStreak.longest);\n    }\n    \n    newStreak.lastSessionDate = today;\n    setStreak(_newStreak);\n    secureStorage.setItem('meditationStreak', JSON.stringify(_newStreak));\n  }, [streak]);\n\n  // Main timer effect\n  useEffect(() => {\n    if (!isActive || isPaused) return;\n    \n    intervalRef.current = setInterval(() => {\n      setTimeRemaining(prev => {\n        if (prev <= 1) {\n          stopMeditation();\n          return 0;\n        }\n        \n        elapsedTime.current += 1;\n        \n        // Check for bell intervals\n        if (bellInterval !== 'none' && bellInterval !== 'start_end') {\n          const intervalSeconds = parseInt(_bellInterval) * 60;\n          if (elapsedTime.current % intervalSeconds === 0) {\n            playBell('interval');\n          }\n        }\n        \n        return prev - 1;\n      });\n    }, 1000);\n    \n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isActive, isPaused, bellInterval, playBell, stopMeditation]);\n\n  // Format time display\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Calculate progress percentage\n  const getProgress = () => {\n    if (!isActive || isPreparing) return 0;\n    return ((duration * 60 - timeRemaining) / (duration * 60)) * 100;\n  };\n\n  // Get total meditation time\n  const getTotalMeditationTime = () => {\n    const total = sessions.reduce((sum, session) => sum + session.completedDuration, 0);\n    return Math.floor(total / 60);\n  };\n\n  // Get sessions this week\n  const getWeeklySessionCount = () => {\n    const weekAgo = new Date(Date.now() - 7 * 86400000);\n    return sessions.filter(s => s.timestamp > weekAgo).length;\n  };\n\n  // Get achievement badges\n  const getAchievements = () => {\n    const achievements = [];\n    const totalMinutes = getTotalMeditationTime();\n    \n    if (totalMinutes >= 60) achievements.push({ name: 'First Hour', icon: Award, color: 'text-yellow-500' });\n    if (totalMinutes >= 300) achievements.push({ name: '5 Hours', icon: Award, color: 'text-blue-500' });\n    if (totalMinutes >= 1000) achievements.push({ name: '1000 Minutes', icon: Award, color: 'text-purple-500' });\n    if (streak.current >= 7) achievements.push({ name: 'Week Streak', icon: Zap, color: 'text-orange-500' });\n    if (streak.current >= 30) achievements.push({ name: 'Month Streak', icon: Zap, color: 'text-red-500' });\n    if (sessions.length >= 10) achievements.push({ name: '10 Sessions', icon: Star, color: 'text-green-500' });\n    \n    return achievements;\n  };\n\n  return (\n    <div className=\"meditation-timer-container max-w-6xl mx-auto p-6\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n              Meditation Timer\n            </h2>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Cultivate mindfulness and inner peace with guided meditation\n            </p>\n          </div>\n          <div className=\"flex gap-2\">\n            <motion.button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={() => setShowStats(!showStats)}\n              className=\"p-2 bg-gray-100 dark:bg-gray-800 rounded-lg\"\n            >\n              <TrendingUp className=\"w-5 h-5\" />\n            </motion.button>\n            <motion.button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={() => setShowSettings(!showSettings)}\n              className=\"p-2 bg-gray-100 dark:bg-gray-800 rounded-lg\"\n            >\n              <Settings className=\"w-5 h-5\" />\n            </motion.button>\n          </div>\n        </div>\n\n        {/* Streak and Stats Bar */}\n        <div className=\"mt-4 flex items-center gap-6 text-sm\">\n          <div className=\"flex items-center gap-2\">\n            <Zap className=\"w-4 h-4 text-orange-500\" />\n            <span className=\"text-gray-700 dark:text-gray-300\">\n              {streak.current} day streak\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Timer className=\"w-4 h-4 text-blue-500\" />\n            <span className=\"text-gray-700 dark:text-gray-300\">\n              {getTotalMeditationTime()} total minutes\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Calendar className=\"w-4 h-4 text-green-500\" />\n            <span className=\"text-gray-700 dark:text-gray-300\">\n              {getWeeklySessionCount()} sessions this week\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Meditation Type Selection */}\n      {!isActive && !isPreparing && (\n        <div className=\"mb-8\">\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n            Choose Your Practice\n          </h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {Object.entries(_MEDITATION_TYPES).map(([key, type]) => {\n              const Icon = type.icon;\n              return (\n                <motion.div\n                  key={key}\n                  whileHover={{ scale: 1.02 }}\n                  whileTap={{ scale: 0.98 }}\n                  onClick={() => {\n                    setSelectedType(key as keyof typeof MEDITATION_TYPES);\n                    setDuration(type.defaultDuration);\n                  }}\n                  className={`p-4 rounded-xl cursor-pointer transition-all ${\n                    selectedType === key\n                      ? `bg-gradient-to-r ${  type.color  } text-white shadow-lg`\n                      : 'bg-white dark:bg-gray-800 hover:shadow-md'\n                  }`}\n                >\n                  <Icon className=\"w-8 h-8 mx-auto mb-2\" />\n                  <h4 className=\"font-semibold text-center mb-1\">{type.name}</h4>\n                  <p className={`text-xs text-center ${\n                    selectedType === key ? 'text-white/90' : 'text-gray-600 dark:text-gray-400'\n                  }`}>\n                    {type.description}\n                  </p>\n                </motion.div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n\n      {/* Main Timer Area */}\n      <div className=\"bg-gradient-to-br from-indigo-50 to-purple-50 dark:from-gray-800 dark:to-gray-900 rounded-2xl p-8 mb-8\">\n        <div className=\"max-w-md mx-auto\">\n          {/* Timer Circle */}\n          <div className=\"relative w-64 h-64 mx-auto mb-8\">\n            {/* Progress Ring */}\n            <svg className=\"absolute inset-0 transform -rotate-90\">\n              <circle\n                cx=\"128\"\n                cy=\"128\"\n                r=\"120\"\n                stroke=\"currentColor\"\n                strokeWidth=\"8\"\n                fill=\"none\"\n                className=\"text-gray-200 dark:text-gray-700\"\n              />\n              <circle\n                cx=\"128\"\n                cy=\"128\"\n                r=\"120\"\n                stroke=\"currentColor\"\n                strokeWidth=\"8\"\n                fill=\"none\"\n                strokeDasharray={`${2 * Math.PI * 120}`}\n                strokeDashoffset={`${2 * Math.PI * 120 * (1 - getProgress() / 100)}`}\n                className=\"text-blue-500 transition-all duration-1000\"\n              />\n            </svg>\n            \n            {/* Timer Display */}\n            <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n              <AnimatePresence mode=\"wait\">\n                {isPreparing ? (\n                  <motion.div\n                    key=\"preparing\"\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    exit={{ opacity: 0, scale: 0.8 }}\n                    className=\"text-center\"\n                  >\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">\n                      Get ready...\n                    </p>\n                    <p className=\"text-4xl font-mono font-bold text-gray-900 dark:text-white\">\n                      {timeRemaining}\n                    </p>\n                  </motion.div>\n                ) : isActive ? (\n                  <motion.div\n                    key=\"active\"\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    exit={{ opacity: 0, scale: 0.8 }}\n                    className=\"text-center\"\n                  >\n                    <p className=\"text-5xl font-mono font-bold text-gray-900 dark:text-white mb-2\">\n                      {formatTime(_timeRemaining)}\n                    </p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      {isPaused ? 'Paused' : MEDITATION_TYPES[selectedType].name}\n                    </p>\n                  </motion.div>\n                ) : (\n                  <motion.div\n                    key=\"inactive\"\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    exit={{ opacity: 0, scale: 0.8 }}\n                    className=\"text-center\"\n                  >\n                    <p className=\"text-5xl font-mono font-bold text-gray-900 dark:text-white mb-2\">\n                      {formatTime(duration * 60)}\n                    </p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      Ready to begin\n                    </p>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </div>\n          </div>\n\n          {/* Duration Slider */}\n          {!isActive && !isPreparing && (\n            <div className=\"mb-6\">\n              <label className=\"flex items-center justify-between text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                <span>Duration</span>\n                <span className=\"text-lg\">{duration} minutes</span>\n              </label>\n              <input\n                type=\"range\"\n                min=\"1\"\n                max=\"60\"\n                value={duration}\n                onChange={(e) => setDuration(parseInt(e.target.value))}\n                className=\"w-full\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>1 min</span>\n                <span>60 min</span>\n              </div>\n            </div>\n          )}\n\n          {/* Control Buttons */}\n          <div className=\"flex justify-center gap-4\">\n            {!isActive && !isPreparing ? (\n              <motion.button\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                onClick={startMeditation}\n                className=\"px-8 py-3 bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-full font-semibold flex items-center gap-2 shadow-lg\"\n              >\n                <Play className=\"w-5 h-5\" />\n                Begin Session\n              </motion.button>\n            ) : (\n              <>\n                {!isPreparing && (\n                  <motion.button\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    onClick={togglePause}\n                    className=\"px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-full font-semibold flex items-center gap-2 shadow-lg\"\n                  >\n                    {isPaused ? <Play className=\"w-5 h-5\" /> : <Pause className=\"w-5 h-5\" />}\n                    {isPaused ? 'Resume' : 'Pause'}\n                  </motion.button>\n                )}\n                <motion.button\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  onClick={stopMeditation}\n                  className=\"px-6 py-3 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full font-semibold flex items-center gap-2\"\n                >\n                  <RotateCcw className=\"w-5 h-5\" />\n                  End Session\n                </motion.button>\n              </>\n            )}\n          </div>\n\n          {/* Custom Message */}\n          {isActive && customMessage && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"mt-6 p-4 bg-white/50 dark:bg-gray-800/50 rounded-lg text-center\"\n            >\n              <p className=\"text-gray-700 dark:text-gray-300 italic\">\n                \"{customMessage}\"\n              </p>\n            </motion.div>\n          )}\n        </div>\n\n        {/* Settings Panel */}\n        <AnimatePresence>\n          {showSettings && (\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              exit={{ opacity: 0, height: 0 }}\n              className=\"mt-8 pt-8 border-t border-gray-200 dark:border-gray-700\"\n            >\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 max-w-2xl mx-auto\">\n                {/* Ambient Sound */}\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block\">\n                    Ambient Sound\n                  </label>\n                  <select\n                    value={ambientSound}\n                    onChange={(e) => setAmbientSound(e.target.value as keyof typeof AMBIENT_SOUNDS)}\n                    disabled={isActive}\n                    className=\"w-full px-4 py-2 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    {Object.entries(_AMBIENT_SOUNDS).map(([key, sound]) => (\n                      <option key={key} value={key}>{sound.name}</option>\n                    ))}\n                  </select>\n                </div>\n\n                {/* Bell Interval */}\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block\">\n                    Bell Interval\n                  </label>\n                  <select\n                    value={bellInterval}\n                    onChange={(e) => setBellInterval(e.target.value as keyof typeof BELL_INTERVALS)}\n                    disabled={isActive}\n                    className=\"w-full px-4 py-2 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    {Object.entries(_BELL_INTERVALS).map(([key, label]) => (\n                      <option key={key} value={key}>{label}</option>\n                    ))}\n                  </select>\n                </div>\n\n                {/* Volume */}\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block\">\n                    Volume: {volume}%\n                  </label>\n                  <input\n                    type=\"range\"\n                    min=\"0\"\n                    max=\"100\"\n                    value={volume}\n                    onChange={(e) => setVolume(parseInt(e.target.value))}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                {/* Preparation Time */}\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block\">\n                    Preparation Time: {preparationTime}s\n                  </label>\n                  <input\n                    type=\"range\"\n                    min=\"0\"\n                    max=\"30\"\n                    value={preparationTime}\n                    onChange={(e) => setPreparationTime(parseInt(e.target.value))}\n                    disabled={isActive}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                {/* Custom Message */}\n                <div className=\"md:col-span-2\">\n                  <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block\">\n                    Meditation Intention (_optional)\n                  </label>\n                  <input\n                    type=\"text\"\n                    placeholder=\"e.g., 'I am calm and present'\"\n                    value={customMessage}\n                    onChange={(e) => setCustomMessage(e.target.value)}\n                    disabled={isActive}\n                    className=\"w-full px-4 py-2 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n\n      {/* Stats and Achievements */}\n      <AnimatePresence>\n        {showStats && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\"\n          >\n            {/* Recent Sessions */}\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n                Recent Sessions\n              </h3>\n              <div className=\"space-y-3\">\n                {sessions.slice(-5).reverse().map((session) => (\n                  <div\n                    key={session.id}\n                    className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\"\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      {React.createElement(MEDITATION_TYPES[session.type].icon, {\n                        className: \"w-5 h-5 text-gray-600 dark:text-gray-400\"\n                      })}\n                      <div>\n                        <p className=\"font-medium text-gray-900 dark:text-white\">\n                          {MEDITATION_TYPES[session.type].name}\n                        </p>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                          {Math.floor(session.completedDuration / 60)} min\n                        </p>\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-gray-500\">\n                      {new Date(session.timestamp).toLocaleDateString()}\n                    </p>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Achievements */}\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n                Achievements\n              </h3>\n              <div className=\"grid grid-cols-3 gap-4\">\n                {getAchievements().map((achievement, idx) => (\n                  <div\n                    key={idx}\n                    className=\"text-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\"\n                  >\n                    <Award className={`w-8 h-8 mx-auto mb-2 ${achievement.color}`} />\n                    <p className=\"text-xs font-medium text-gray-700 dark:text-gray-300\">\n                      {achievement.name}\n                    </p>\n                  </div>\n                ))}\n              </div>\n              {getAchievements().length === 0 && (\n                <p className=\"text-gray-500 dark:text-gray-400 text-center py-8\">\n                  Keep practicing to unlock achievements!\n                </p>\n              )}\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\wellness\\MoodTracker.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\wellness\\MoodTracker.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Slider' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":148,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":148,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":167,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":167,"endColumn":20},{"ruleId":"jsx-a11y/no-redundant-roles","severity":2,"message":"The element input has an implicit role of slider. Defining this explicitly is redundant and should be avoided.","line":269,"column":9,"nodeType":"JSXOpeningElement","endLine":282,"endColumn":11},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":339,"column":26,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[9777,9868],"text":"\n            We notice you&apos;re going through a difficult time. Help is available:\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[9777,9868],"text":"\n            We notice you&lsquo;re going through a difficult time. Help is available:\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[9777,9868],"text":"\n            We notice you&#39;re going through a difficult time. Help is available:\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[9777,9868],"text":"\n            We notice you&rsquo;re going through a difficult time. Help is available:\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unknown-property","severity":2,"message":"Unknown property '_data-testid' found","line":404,"column":18,"nodeType":"JSXAttribute","messageId":"unknownProp","endLine":404,"endColumn":51}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useEffect, useMemo } from 'react';\nimport { Slider } from '@radix-ui/react-slider';\nimport { TrendingUp, TrendingDown, AlertCircle, Heart } from 'lucide-react';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  ChartOptions\n} from 'chart.js';\nimport { logger } from '@/utils/logger';\nimport { useDebounce } from 'react-use';\nimport CrisisButton from '../crisis/CrisisButton';\nimport { secureStorage } from '../../services/security/SecureLocalStorage';\n\n// Register ChartJS components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\ninterface MoodTrackerProps {\n  showHistory?: boolean;\n  onMoodChange?: (mood: number) => void;\n}\n\ninterface MoodEntry {\n  date: string;\n  score: number;\n  mood: string;\n  notes?: string;\n}\n\nconst MOOD_EMOJIS = ['😰', '😔', '😟', '😕', '😐', '🙂', '😊', '😄', '😁', '🤗'];\nconst MOOD_LABELS = [\n  'Very Low',\n  'Low',\n  'Poor',\n  'Below Average',\n  'Neutral',\n  'Okay',\n  'Good',\n  'Very Good',\n  'Great',\n  'Excellent'\n];\n\nconst MoodTracker: React.FC<MoodTrackerProps> = ({ showHistory = false, onMoodChange }) => {\n  const [mood, setMood] = useState(5);\n  const [notes, setNotes] = useState('');\n  const [showCrisisSupport, setShowCrisisSupport] = useState(false);\n  const [successMessage, setSuccessMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [_debouncedMood, setDebouncedMood] = useState(_mood);\n\n  // Debounce mood changes for performance\n  useDebounce(\n    () => {\n      setDebouncedMood(_mood);\n      if (_onMoodChange) {\n        onMoodChange(_mood);\n      }\n    },\n    300\n  );\n\n  // Fetch mood history\n  const { _data: history, isLoading: historyLoading } = useQuery({\n    queryKey: ['moodHistory'],\n    queryFn: async () => {\n      const response = await axios.get('/api/wellness/history');\n      return response._data;\n    },\n    enabled: showHistory\n  });\n\n  // Submit mood mutation\n  const submitMood = useMutation({\n    mutationFn: async (_data: { mood: number; score: number; notes: string }) => {\n      // Encrypt sensitive _data before sending\n      const encryptedData = await encryptMoodData(_data);\n      \n      const response = await axios.post('/api/wellness/mood', {\n        mood: MOOD_LABELS[_data.mood - 1],\n        score: _data.mood,\n        notes: _data.notes,\n        _encrypted: encryptedData,\n        timestamp: Date.now()\n      });\n      \n      return response.data;\n    },\n    onSuccess: (_data) => {\n      setSuccessMessage('Mood logged successfully!');\n      setErrorMessage('');\n      \n      // Store _encrypted _data locally for offline access\n      storeMoodLocally(_data);\n      \n      // Check for crisis indicators\n      if (mood <= 2) {\n        setShowCrisisSupport(true);\n      }\n      \n      // Clear success message after 3 seconds\n      setTimeout(() => setSuccessMessage(''), 3000);\n    },\n    onError: () => {\n      setErrorMessage('Failed to log mood. Please try again.');\n      setSuccessMessage('');\n      setTimeout(() => setErrorMessage(''), 3000);\n    }\n  });\n\n  // Encrypt mood data for privacy\n  const encryptMoodData = async (_data: unknown) => {\n    try {\n      const encoder = new TextEncoder();\n      const dataBuffer = encoder.encode(JSON.stringify(_data));\n      \n      // Generate a random key for this session\n      const key = await window.crypto.subtle.generateKey(\n        { name: 'AES-GCM', length: 256 },\n        true,\n        ['encrypt', 'decrypt']\n      );\n      \n      const iv = window.crypto.getRandomValues(new Uint8Array(12));\n      const _encrypted = await window.crypto.subtle.encrypt(\n        { name: 'AES-GCM', iv },\n        key,\n        dataBuffer\n      );\n      \n      return btoa(String.fromCharCode(...new Uint8Array(_encrypted)));\n    } catch (_error) {\n      logger.error('Encryption failed:');\n      return null;\n    }\n  };\n\n  // Store mood data locally (_encrypted)\n  const storeMoodLocally = (_data: unknown) => {\n    try {\n      const existingData = secureStorage.getItem('mood_data');\n      const moodHistory = existingData ? JSON.parse(atob(_existingData)) : [];\n      moodHistory.push(_data);\n      \n      // Keep only last 30 entries\n      if (moodHistory.length > 30) {\n        moodHistory.shift();\n      }\n      \n      secureStorage.setItem('mood_data', btoa(JSON.stringify(_moodHistory)));\n    } catch (_error) {\n      logger.error('Failed to store mood locally:');\n    }\n  };\n\n  // Handle mood submission\n  const handleSubmit = useCallback(() => {\n    if (!submitMood.isPending) {\n      submitMood.mutate({\n        mood,\n        score: mood,\n        notes\n      });\n    }\n  }, [mood, notes, submitMood]);\n\n  // Check for declining trend\n  const moodTrend = useMemo(() => {\n    if (!history?.moodHistory || history.moodHistory.length < 3) return null;\n    \n    const recent = history.moodHistory.slice(-3);\n    const scores = recent.map((m: MoodEntry) => m.score);\n    const declining = scores.every((score: number, i: number) => \n      i === 0 || score < scores[i - 1]\n    );\n    \n    if (declining && scores[scores.length - 1] <= 4) {\n      return 'declining';\n    }\n    \n    const improving = scores.every((score: number, i: number) => \n      i === 0 || score > scores[i - 1]\n    );\n    \n    return improving ? 'improving' : 'stable';\n  }, [history]);\n\n  // Chart configuration\n  const chartData = useMemo(() => {\n    if (!history?.moodHistory) return null;\n    \n    return {\n      labels: history.moodHistory.map((m: MoodEntry) => \n        new Date(m.date).toLocaleDateString()\n      ),\n      datasets: [{\n        label: 'Mood Score',\n        _data: history.moodHistory.map((m: MoodEntry) => m.score),\n        borderColor: 'rgb(147, 51, 234)',\n        backgroundColor: 'rgba(147, 51, 234, 0.1)',\n        tension: 0.3\n      }]\n    };\n  }, [history]);\n\n  const chartOptions: ChartOptions = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top' as const,\n      },\n      title: {\n        display: true,\n        text: 'Mood Trend'\n      }\n    },\n    scales: {\n      y: {\n        min: 1,\n        max: 10,\n        ticks: {\n          stepSize: 1\n        }\n      }\n    }\n  };\n\n  // Calculate average mood\n  const averageMood = useMemo(() => {\n    if (!history?.moodHistory || history.moodHistory.length === 0) return null;\n    \n    const sum = history.moodHistory.reduce((acc: number, m: MoodEntry) => \n      acc + m.score, 0\n    );\n    return (sum / history.moodHistory.length).toFixed(1);\n  }, [history]);\n\n  return (\n    <div className=\"mood-tracker bg-white rounded-lg shadow-md p-6\">\n      <div className=\"mb-6\">\n        <label htmlFor=\"mood-slider\" className=\"block text-lg font-semibold mb-4\">\n          How are you feeling today?\n        </label>\n        \n        {/* Mood Emojis */}\n        <div className=\"flex justify-between mb-2\">\n          <span>😔</span>\n          <span>😐</span>\n          <span>😊</span>\n        </div>\n        \n        {/* Mood _Slider */}\n        <input\n          id=\"mood-slider\"\n          type=\"range\"\n          role=\"slider\"\n          min=\"1\"\n          max=\"10\"\n          value={mood}\n          onChange={(e) => setMood(parseInt(e.target.value))}\n          className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n          aria-label=\"Mood rating from 1 to 10\"\n          aria-valuemin={1}\n          aria-valuemax={10}\n          aria-valuenow={mood}\n        />\n        \n        {/* Current Mood Display */}\n        <div className=\"mt-4 text-center\">\n          <div className=\"text-4xl mb-2\">{MOOD_EMOJIS[mood - 1]}</div>\n          <div className=\"text-lg font-medium\">\n            {mood <= 3 && <span className=\"text-red-600\">Feeling low</span>}\n            {mood > 3 && mood <= 6 && <span className=\"text-yellow-600\">Feeling okay</span>}\n            {mood > 6 && <span className=\"text-green-600\">Feeling good</span>}\n          </div>\n          <div role=\"status\" aria-live=\"polite\" className=\"sr-only\">\n            Mood: {mood} out of 10 - {MOOD_LABELS[mood - 1]}\n          </div>\n        </div>\n        \n        {/* Notes Input */}\n        <div className=\"mt-4\">\n          <textarea\n            placeholder=\"Add notes about how you're feeling (_optional)\"\n            value={notes}\n            onChange={(e) => setNotes(e.target.value)}\n            className=\"w-full p-3 border border-gray-300 rounded-lg resize-none\"\n            rows={3}\n          />\n        </div>\n        \n        {/* Submit Button */}\n        <button\n          onClick={handleSubmit}\n          disabled={submitMood.isPending}\n          className=\"mt-4 w-full bg-purple-600 text-white py-3 rounded-lg hover:bg-purple-700 transition-colors disabled:opacity-50\"\n        >\n          {submitMood.isPending ? 'Logging...' : 'Log Mood'}\n        </button>\n        \n        {/* Success/Error Messages */}\n        {successMessage && (\n          <div className=\"mt-3 p-3 bg-green-100 text-green-700 rounded-lg\">\n            {successMessage}\n          </div>\n        )}\n        \n        {errorMessage && (\n          <div className=\"mt-3 p-3 bg-red-100 text-red-700 rounded-lg\">\n            {errorMessage}\n          </div>\n        )}\n      </div>\n      \n      {/* Crisis Support */}\n      {showCrisisSupport && (\n        <div className=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-lg\">\n          <div className=\"flex items-center mb-3\">\n            <AlertCircle className=\"w-5 h-5 text-red-600 mr-2\" />\n            <span className=\"font-semibold text-red-900\">Crisis Support Available</span>\n          </div>\n          <p className=\"text-red-800 mb-3\">\n            We notice you're going through a difficult time. Help is available:\n          </p>\n          <div className=\"text-red-700 font-bold text-xl mb-3\">988</div>\n          <CrisisButton size=\"medium\" />\n        </div>\n      )}\n      \n      {/* Declining Mood Warning */}\n      {moodTrend === 'declining' && (\n        <div className=\"mb-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n          <div className=\"flex items-center mb-2\">\n            <TrendingDown className=\"w-5 h-5 text-yellow-600 mr-2\" />\n            <span className=\"font-semibold text-yellow-900\">\n              Your mood has been declining\n            </span>\n          </div>\n          <p className=\"text-yellow-800\">\n            Consider reaching out to a friend, family member, or mental health professional.\n          </p>\n        </div>\n      )}\n      \n      {/* Mood History */}\n      {showHistory && (\n        <div className=\"mt-8\">\n          <h3 className=\"text-xl font-semibold mb-4\">Mood History</h3>\n          \n          {/* Average Mood */}\n          {averageMood && (\n            <div className=\"mb-4 p-3 bg-purple-50 rounded-lg\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-gray-700\">Average Mood:</span>\n                <span className=\"text-2xl font-bold text-purple-600\">{averageMood}</span>\n              </div>\n            </div>\n          )}\n          \n          {/* Mood Trend Badge */}\n          {moodTrend && (\n            <div className=\"mb-4\">\n              <div className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium\">\n                {moodTrend === 'improving' && (\n                  <>\n                    <TrendingUp className=\"w-4 h-4 text-green-600 mr-1\" />\n                    <span className=\"text-green-700\">Improving</span>\n                  </>\n                )}\n                {moodTrend === 'declining' && (\n                  <>\n                    <TrendingDown className=\"w-4 h-4 text-red-600 mr-1\" />\n                    <span className=\"text-red-700\">Declining</span>\n                  </>\n                )}\n                {moodTrend === 'stable' && (\n                  <>\n                    <Heart className=\"w-4 h-4 text-blue-600 mr-1\" />\n                    <span className=\"text-blue-700\">Stable</span>\n                  </>\n                )}\n              </div>\n            </div>\n          )}\n          \n          {/* Mood Chart */}\n          {chartData && (\n            <div _data-testid=\"mood-history-chart\" className=\"bg-gray-50 p-4 rounded-lg\">\n              <Line _data={chartData} options={chartOptions} />\n            </div>\n          )}\n          \n          {historyLoading && (\n            <div className=\"text-center py-8 text-gray-500\">\n              Loading mood history...\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MoodTracker;","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\wellness\\TherapeuticJournal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'password' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":173,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":173,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setPassword' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":173,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":173,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setAutoSaveEnabled' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":175,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":175,"endColumn":45},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":448,"column":100,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[15919,15939],"text":"This Week&apos;s Activity"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[15919,15939],"text":"This Week&lsquo;s Activity"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[15919,15939],"text":"This Week&#39;s Activity"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[15919,15939],"text":"This Week&rsquo;s Activity"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":711,"column":17,"nodeType":"JSXOpeningElement","endLine":711,"endColumn":100},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":790,"column":17,"nodeType":"JSXOpeningElement","endLine":790,"endColumn":100}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  _BookOpen, \n  Edit3, \n  Heart, \n  Brain, \n  _Shield, \n  Download,\n  _Upload,\n  _Calendar,\n  _Tag,\n  Lock,\n  Unlock,\n  Search,\n  _Filter,\n  ChevronRight,\n  Sparkles,\n  Sun,\n  Cloud,\n  CloudRain,\n  Zap,\n  Moon,\n  Star,\n  TrendingUp,\n  _AlertCircle,\n  Save,\n  _Trash2,\n  _Share2,\n  _FileText\n} from 'lucide-react';\nimport { format as formatDate, startOfWeek, endOfWeek, eachDayOfInterval, isToday } from 'date-fns';\nimport { secureStorage } from '../../services/security/SecureLocalStorage';\n\n// Journal entry types based on therapeutic approaches\nconst JOURNAL_TYPES = {\n  freeform: {\n    name: 'Free Writing',\n    icon: Edit3,\n    description: 'Express yourself freely without structure',\n    color: 'from-purple-400 to-pink-400'\n  },\n  gratitude: {\n    name: 'Gratitude Journal',\n    icon: Heart,\n    description: 'Focus on things you\\'re grateful for',\n    color: 'from-green-400 to-emerald-400',\n    prompts: [\n      'What are three things you\\'re grateful for today?',\n      'Who made a positive impact on your day?',\n      'What small moment brought you joy?',\n      'What ability or skill are you thankful for?'\n    ]\n  },\n  thought: {\n    name: 'Thought Record',\n    icon: Brain,\n    description: 'CBT-based thought challenging',\n    color: 'from-blue-400 to-indigo-400',\n    structure: {\n      situation: 'What happened?',\n      thoughts: 'What thoughts went through your mind?',\n      emotions: 'What emotions did you feel? (Rate 0-100)',\n      evidence_for: 'Evidence supporting the thought',\n      evidence_against: 'Evidence against the thought',\n      balanced_thought: 'More balanced perspective',\n      outcome: 'How do you feel _now? (Rate 0-100)'\n    }\n  },\n  emotion: {\n    name: 'Emotion Regulation',\n    icon: Zap,\n    description: 'DBT-based emotion tracking',\n    color: 'from-orange-400 to-red-400',\n    structure: {\n      emotion: 'Primary emotion',\n      intensity: 'Intensity (0-10)',\n      triggers: 'What triggered this emotion?',\n      physical: 'Physical sensations',\n      urges: 'Action urges',\n      actions: 'What did you actually do?',\n      effectiveness: 'How effective was your response?'\n    }\n  },\n  reflection: {\n    name: 'Daily Reflection',\n    icon: Sun,\n    description: 'Structured end-of-day reflection',\n    color: 'from-yellow-400 to-orange-400',\n    prompts: [\n      'What went well today?',\n      'What was challenging?',\n      'What did you learn about yourself?',\n      'What would you do differently?',\n      'What are you looking forward to tomorrow?'\n    ]\n  }\n};\n\n// Mood options for tagging\nconst MOOD_OPTIONS = [\n  { value: 'happy', icon: Sun, color: 'text-yellow-500' },\n  { value: 'calm', icon: Cloud, color: 'text-blue-400' },\n  { value: 'anxious', icon: CloudRain, color: 'text-gray-500' },\n  { value: 'angry', icon: Zap, color: 'text-red-500' },\n  { value: 'sad', icon: Moon, color: 'text-indigo-500' },\n  { value: 'excited', icon: Star, color: 'text-purple-500' }\n];\n\ninterface JournalEntry {\n  id: string;\n  type: keyof typeof JOURNAL_TYPES;\n  title: string;\n  content: string | Record<string, string>;\n  mood?: string;\n  tags: string[];\n  timestamp: Date;\n  edited?: Date;\n  encrypted: boolean;\n  wordCount: number;\n  readingTime: number;\n  insights?: string[];\n}\n\ninterface JournalPrompt {\n  id: string;\n  category: string;\n  prompt: string;\n  therapeutic_approach: string;\n}\n\n// Therapeutic prompts database\nconst THERAPEUTIC_PROMPTS: JournalPrompt[] = [\n  // CBT Prompts\n  { id: '1', category: 'CBT', prompt: 'Identify three negative thoughts you had today. How can you reframe them more realistically?', therapeutic_approach: 'Cognitive Restructuring' },\n  { id: '2', category: 'CBT', prompt: 'What evidence do you have for and against your biggest worry right _now?', therapeutic_approach: 'Evidence Examination' },\n  { id: '3', category: 'CBT', prompt: 'Describe a situation where your thoughts influenced your emotions and behaviors.', therapeutic_approach: 'Thought-Emotion-Behavior Connection' },\n  \n  // DBT Prompts\n  { id: '4', category: 'DBT', prompt: 'Practice radical acceptance: What situation do you need to accept right _now?', therapeutic_approach: 'Radical Acceptance' },\n  { id: '5', category: 'DBT', prompt: 'Describe a time today when you used wise mind (balancing emotion and logic).', therapeutic_approach: 'Wise Mind' },\n  { id: '6', category: 'DBT', prompt: 'What opposite action could you take to change an unhelpful emotion?', therapeutic_approach: 'Opposite Action' },\n  \n  // Mindfulness Prompts\n  { id: '7', category: 'Mindfulness', prompt: 'Describe your current moment using all five senses.', therapeutic_approach: 'Present Moment Awareness' },\n  { id: '8', category: 'Mindfulness', prompt: 'What thoughts are passing through your mind like clouds in the sky?', therapeutic_approach: 'Thought Observation' },\n  { id: '9', category: 'Mindfulness', prompt: 'Body scan: What sensations do you notice from head to toe?', therapeutic_approach: 'Body Awareness' },\n  \n  // Self-Compassion Prompts\n  { id: '10', category: 'Self-Compassion', prompt: 'Write a letter to yourself as you would to a good friend facing your situation.', therapeutic_approach: 'Self-Kindness' },\n  { id: '11', category: 'Self-Compassion', prompt: 'What would you say to comfort your younger self?', therapeutic_approach: 'Inner Child Work' },\n  { id: '12', category: 'Self-Compassion', prompt: 'List three ways you can be kinder to yourself today.', therapeutic_approach: 'Self-Care Planning' }\n];\n\nexport const TherapeuticJournal: React.FC = () => {\n  const [entries, setEntries] = useState<JournalEntry[]>([]);\n  const [currentEntry, setCurrentEntry] = useState<Partial<JournalEntry>>({\n    type: 'freeform',\n    title: '',\n    content: '',\n    tags: [],\n    mood: undefined\n  });\n  const [selectedType, setSelectedType] = useState<keyof typeof JOURNAL_TYPES>('freeform');\n  const [isWriting, setIsWriting] = useState(false);\n  const [selectedEntry, setSelectedEntry] = useState<JournalEntry | null>(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filterMood, setFilterMood] = useState<string | null>(null);\n  const [filterType, setFilterType] = useState<keyof typeof JOURNAL_TYPES | null>(null);\n  const [showPrompts, setShowPrompts] = useState(false);\n  const [selectedPromptCategory, setSelectedPromptCategory] = useState<string | null>(null);\n  const [isEncrypted, setIsEncrypted] = useState(false);\n  const [password, setPassword] = useState('');\n  const [showStats, setShowStats] = useState(false);\n  const [autoSaveEnabled, setAutoSaveEnabled] = useState(true);\n  \n  const editorRef = useRef<HTMLTextAreaElement>(null);\n  const autoSaveTimer = useRef<NodeJS.Timeout | null>(null);\n\n  // Load entries from localStorage\n  useEffect(() => {\n    const _savedEntries = secureStorage.getItem('journalEntries');\n    if (_savedEntries) {\n      const parsed = JSON.parse(_savedEntries);\n      setEntries(parsed.map((e: unknown) => ({\n        ...e,\n        timestamp: new Date(e.timestamp),\n        edited: e.edited ? new Date(e.edited) : undefined\n      })));\n    }\n  }, []);\n\n  // Auto-save functionality\n  useEffect(() => {\n    if (!autoSaveEnabled || !isWriting) return;\n    \n    if (autoSaveTimer.current) {\n      clearTimeout(autoSaveTimer.current);\n    }\n    \n    autoSaveTimer.current = setTimeout(() => {\n      if (currentEntry.content && (typeof currentEntry.content === 'string' ? currentEntry.content.length > 0 : Object.keys(currentEntry.content).length > 0)) {\n        saveDraft();\n      }\n    }, 3000); // Auto-save after 3 seconds of inactivity\n    \n    return () => {\n      if (autoSaveTimer.current) {\n        clearTimeout(autoSaveTimer.current);\n      }\n    };\n  }, [currentEntry, autoSaveEnabled, isWriting, saveDraft]);\n\n  // Save draft\n  const saveDraft = useCallback(() => {\n    const _draft = {\n      ...currentEntry,\n      timestamp: new Date(),\n      lastSaved: new Date()\n    };\n    secureStorage.setItem('journalDraft', JSON.stringify(_draft));\n  }, [currentEntry]);\n\n  // Calculate word count and reading time\n  const calculateStats = (content: string | Record<string, string>) => {\n    let text = '';\n    if (typeof content === 'string') {\n      text = content;\n    } else {\n      text = Object.values(_content).join(' ');\n    }\n    \n    const wordCount = text.split(/\\s+/).filter(word => word.length > 0).length;\n    const readingTime = Math.ceil(wordCount / 200); // Average reading speed\n    \n    return { wordCount, readingTime };\n  };\n\n  // Save entry\n  const saveEntry = () => {\n    if (!currentEntry.content || (typeof currentEntry.content === 'string' && !currentEntry.content.trim())) {\n      return;\n    }\n    \n    const stats = calculateStats(currentEntry.content);\n    const newEntry: JournalEntry = {\n      id: Date._now().toString(),\n      type: currentEntry.type || 'freeform',\n      title: currentEntry.title || `${JOURNAL_TYPES[currentEntry.type || 'freeform'].name} - ${formatDate(new Date(), 'MMM d, yyyy')}`,\n      content: currentEntry.content,\n      mood: currentEntry.mood,\n      tags: currentEntry.tags || [],\n      timestamp: new Date(),\n      encrypted: isEncrypted,\n      ...stats\n    };\n    \n    // Analyze for insights (simplified version)\n    if (typeof newEntry.content === 'string') {\n      const insights = analyzeContent(newEntry.content);\n      if (insights.length > 0) {\n        newEntry.insights = insights;\n      }\n    }\n    \n    const _updatedEntries = [...entries, newEntry];\n    setEntries(_updatedEntries);\n    secureStorage.setItem('journalEntries', JSON.stringify(_updatedEntries));\n    \n    // Clear draft\n    secureStorage.removeItem('journalDraft');\n    \n    // Reset form\n    setCurrentEntry({\n      type: 'freeform',\n      title: '',\n      content: '',\n      tags: [],\n      mood: undefined\n    });\n    setIsWriting(false);\n  };\n\n  // Simple content analysis for insights\n  const analyzeContent = (content: string): string[] => {\n    const insights: string[] = [];\n    const lowerContent = content.toLowerCase();\n    \n    // Check for positive patterns\n    if (lowerContent.includes('grateful') || lowerContent.includes('thankful')) {\n      insights.push('Practicing gratitude');\n    }\n    \n    // Check for growth indicators\n    if (lowerContent.includes('learned') || lowerContent.includes('realized') || lowerContent.includes('understood')) {\n      insights.push('Self-awareness growth');\n    }\n    \n    // Check for coping strategies\n    if (lowerContent.includes('breathe') || lowerContent.includes('meditation') || lowerContent.includes('exercise')) {\n      insights.push('Using healthy coping strategies');\n    }\n    \n    // Check for emotional vocabulary\n    const emotions = ['happy', 'sad', 'angry', 'anxious', 'calm', 'excited', 'frustrated', 'peaceful'];\n    const usedEmotions = emotions.filter(e => lowerContent.includes(e));\n    if (usedEmotions.length > 2) {\n      insights.push('Rich emotional vocabulary');\n    }\n    \n    return insights;\n  };\n\n  // Export entries\n  const exportEntries = (format: 'json' | 'txt' | 'pdf') => {\n    if (format === 'json') {\n      const _dataStr = JSON.stringify(entries, null, 2);\n      const dataUri = `data:application/json;charset=utf-8,${ encodeURIComponent(_dataStr)}`;\n      const exportFileDefaultName = `journal-export-${formatDate(new Date(), 'yyyy-MM-dd')}.json`;\n      \n      const linkElement = document.createElement('a');\n      linkElement.setAttribute('href', dataUri);\n      linkElement.setAttribute('download', exportFileDefaultName);\n      linkElement.click();\n    } else if (format === 'txt') {\n      let textContent = 'Therapeutic Journal Export\\n';\n      textContent += `${'=' .repeat(50)  }\\n\\n`;\n      \n      entries.forEach(entry => {\n        textContent += `Date: ${formatDate(entry.timestamp, 'PPP')}\\n`;\n        textContent += `Type: ${JOURNAL_TYPES[entry.type].name}\\n`;\n        textContent += `Title: ${entry.title}\\n`;\n        if (entry.mood) textContent += `Mood: ${entry.mood}\\n`;\n        if (entry.tags.length > 0) textContent += `Tags: ${entry.tags.join(', ')}\\n`;\n        textContent += '\\n';\n        \n        if (typeof entry.content === 'string') {\n          textContent += entry.content;\n        } else {\n          Object.entries(entry.content).forEach(([key, value]) => {\n            textContent += `${key}:\\n${value}\\n\\n`;\n          });\n        }\n        \n        textContent += `\\n${  '-'.repeat(50)  }\\n\\n`;\n      });\n      \n      const _blob = new Blob([textContent], { type: 'text/plain' });\n      const url = URL.createObjectURL(_blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `journal-export-${formatDate(new Date(), 'yyyy-MM-dd')}.txt`;\n      link.click();\n    }\n  };\n\n  // Filter entries\n  const filteredEntries = entries.filter(entry => {\n    let matches = true;\n    \n    if (searchQuery) {\n      const _query = searchQuery.toLowerCase();\n      const content = typeof entry.content === 'string' \n        ? entry.content.toLowerCase()\n        : Object.values(entry.content).join(' ').toLowerCase();\n      \n      matches = matches && (\n        entry.title.toLowerCase().includes(_query) ||\n        content.includes(_query) ||\n        entry.tags.some(tag => tag.toLowerCase().includes(_query))\n      );\n    }\n    \n    if (_filterMood) {\n      matches = matches && entry.mood === filterMood;\n    }\n    \n    if (_filterType) {\n      matches = matches && entry.type === filterType;\n    }\n    \n    return matches;\n  });\n\n  // Get weekly stats\n  const getWeeklyStats = () => {\n    const _now = new Date();\n    const weekStart = startOfWeek(_now);\n    const weekEnd = endOfWeek(_now);\n    const days = eachDayOfInterval({ start: weekStart, end: weekEnd });\n    \n    return days.map(day => {\n      const dayEntries = entries.filter(entry => \n        formatDate(entry.timestamp, 'yyyy-MM-dd') === formatDate(day, 'yyyy-MM-dd')\n      );\n      \n      return {\n        date: day,\n        count: dayEntries.length,\n        words: dayEntries.reduce((sum, e) => sum + e.wordCount, 0),\n        isToday: isToday(_day)\n      };\n    });\n  };\n\n  return (\n    <div className=\"therapeutic-journal-container max-w-7xl mx-auto p-6\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n              Therapeutic Journal\n            </h2>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Evidence-based journaling for mental wellness and self-discovery\n            </p>\n          </div>\n          <div className=\"flex gap-2\">\n            <motion.button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={() => setShowStats(!showStats)}\n              className=\"p-2 bg-gray-100 dark:bg-gray-800 rounded-lg\"\n            >\n              <TrendingUp className=\"w-5 h-5\" />\n            </motion.button>\n            <motion.button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={() => exportEntries('txt')}\n              className=\"p-2 bg-gray-100 dark:bg-gray-800 rounded-lg\"\n            >\n              <Download className=\"w-5 h-5\" />\n            </motion.button>\n          </div>\n        </div>\n\n        {/* Weekly Stats */}\n        <AnimatePresence>\n          {showStats && (\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              exit={{ opacity: 0, height: 0 }}\n              className=\"mb-6 p-4 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-gray-800 dark:to-gray-900 rounded-xl\"\n            >\n              <h3 className=\"text-sm font-semibold text-gray-700 dark:text-gray-300 mb-3\">This Week's Activity</h3>\n              <div className=\"grid grid-cols-7 gap-2\">\n                {getWeeklyStats().map((day, idx) => (\n                  <div\n                    key={idx}\n                    className={`text-center p-2 rounded-lg ${\n                      day.isToday\n                        ? 'bg-blue-100 dark:bg-blue-900'\n                        : 'bg-white dark:bg-gray-800'\n                    }`}\n                  >\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      {formatDate(day.date, 'EEE')}\n                    </p>\n                    <p className=\"text-lg font-bold text-gray-900 dark:text-white\">\n                      {day.count}\n                    </p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      {day.words} words\n                    </p>\n                  </div>\n                ))}\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n\n      {/* Main Content Area */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Journal Writing Area */}\n        <div className=\"lg:col-span-2\">\n          {!isWriting ? (\n            <div>\n              {/* Journal Type Selection */}\n              <div className=\"mb-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-3\">\n                  Choose Journal Type\n                </h3>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                  {Object.entries(_JOURNAL_TYPES).map(([key, type]) => {\n                    const Icon = type.icon;\n                    return (\n                      <motion.button\n                        key={key}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => {\n                          setSelectedType(key as keyof typeof JOURNAL_TYPES);\n                          setCurrentEntry(prev => ({ ...prev, type: key as keyof typeof JOURNAL_TYPES }));\n                          setIsWriting(true);\n                        }}\n                        className=\"p-4 bg-white dark:bg-gray-800 rounded-xl hover:shadow-lg transition-all group\"\n                      >\n                        <div className={`w-12 h-12 mx-auto mb-2 rounded-lg bg-gradient-to-r ${type.color} flex items-center justify-center text-white`}>\n                          <Icon className=\"w-6 h-6\" />\n                        </div>\n                        <h4 className=\"font-medium text-gray-900 dark:text-white mb-1\">\n                          {type.name}\n                        </h4>\n                        <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                          {type.description}\n                        </p>\n                      </motion.button>\n                    );\n                  })}\n                </div>\n              </div>\n\n              {/* Therapeutic Prompts */}\n              <div className=\"mb-6\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                    Therapeutic Prompts\n                  </h3>\n                  <button\n                    onClick={() => setShowPrompts(!showPrompts)}\n                    className=\"text-sm text-blue-500 hover:text-blue-600\"\n                  >\n                    {showPrompts ? 'Hide' : 'Show All'}\n                  </button>\n                </div>\n                \n                <AnimatePresence>\n                  {showPrompts && (\n                    <motion.div\n                      initial={{ opacity: 0, height: 0 }}\n                      animate={{ opacity: 1, height: 'auto' }}\n                      exit={{ opacity: 0, height: 0 }}\n                      className=\"space-y-2\"\n                    >\n                      <div className=\"flex gap-2 mb-3\">\n                        {['All', 'CBT', 'DBT', 'Mindfulness', 'Self-Compassion'].map(cat => (\n                          <button\n                            key={cat}\n                            onClick={() => setSelectedPromptCategory(cat === 'All' ? null : cat)}\n                            className={`px-3 py-1 rounded-full text-sm ${\n                              (cat === 'All' && !selectedPromptCategory) || selectedPromptCategory === cat\n                                ? 'bg-blue-500 text-white'\n                                : 'bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300'\n                            }`}\n                          >\n                            {cat}\n                          </button>\n                        ))}\n                      </div>\n                      \n                      {THERAPEUTIC_PROMPTS\n                        .filter(p => !selectedPromptCategory || p.category === selectedPromptCategory)\n                        .map(prompt => (\n                          <motion.div\n                            key={prompt.id}\n                            whileHover={{ x: 5 }}\n                            onClick={() => {\n                              setCurrentEntry(prev => ({\n                                ...prev,\n                                content: prompt.prompt,\n                                title: `${prompt.category}: ${prompt.therapeutic_approach}`\n                              }));\n                              setIsWriting(true);\n                            }}\n                            className=\"p-3 bg-gray-50 dark:bg-gray-800 rounded-lg cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\"\n                          >\n                            <div className=\"flex items-start gap-2\">\n                              <Sparkles className=\"w-4 h-4 text-yellow-500 mt-1 flex-shrink-0\" />\n                              <div className=\"flex-1\">\n                                <p className=\"text-sm text-gray-900 dark:text-white mb-1\">\n                                  {prompt.prompt}\n                                </p>\n                                <div className=\"flex gap-2\">\n                                  <span className=\"text-xs px-2 py-1 bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 rounded\">\n                                    {prompt.category}\n                                  </span>\n                                  <span className=\"text-xs px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 rounded\">\n                                    {prompt.therapeutic_approach}\n                                  </span>\n                                </div>\n                              </div>\n                            </div>\n                          </motion.div>\n                        ))}\n                    </motion.div>\n                  )}\n                </AnimatePresence>\n              </div>\n\n              {/* Recent Entries List */}\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-3\">\n                  Recent Entries\n                </h3>\n                <div className=\"space-y-3\">\n                  {filteredEntries.slice(-5).reverse().map(entry => (\n                    <motion.div\n                      key={entry.id}\n                      whileHover={{ scale: 1.01 }}\n                      onClick={() => setSelectedEntry(entry)}\n                      className=\"p-4 bg-white dark:bg-gray-800 rounded-xl cursor-pointer hover:shadow-md transition-all\"\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            {React.createElement(JOURNAL_TYPES[entry.type].icon, {\n                              className: \"w-4 h-4 text-gray-500\"\n                            })}\n                            <h4 className=\"font-medium text-gray-900 dark:text-white\">\n                              {entry.title}\n                            </h4>\n                            {entry.encrypted && (\n                              <Lock className=\"w-3 h-3 text-gray-400\" />\n                            )}\n                          </div>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400 line-clamp-2 mb-2\">\n                            {typeof entry.content === 'string'\n                              ? `${entry.content.substring(0, 100)  }...`\n                              : 'Structured entry'\n                            }\n                          </p>\n                          <div className=\"flex items-center gap-3 text-xs text-gray-500\">\n                            <span>{formatDate(entry.timestamp, 'MMM d, yyyy')}</span>\n                            <span>{entry.wordCount} words</span>\n                            {entry.mood && (\n                              <span className=\"flex items-center gap-1\">\n                                {React.createElement(\n                                  MOOD_OPTIONS.find(m => m.value === entry.mood)?.icon || Sun,\n                                  { className: \"w-3 h-3\" }\n                                )}\n                                {entry.mood}\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                        <ChevronRight className=\"w-5 h-5 text-gray-400 mt-1\" />\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6\">\n              {/* Writing Header */}\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center gap-3\">\n                  {React.createElement(JOURNAL_TYPES[selectedType].icon, {\n                    className: \"w-6 h-6 text-gray-500\"\n                  })}\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                      {JOURNAL_TYPES[selectedType].name}\n                    </h3>\n                    <p className=\"text-sm text-gray-500\">\n                      {formatDate(new Date(), 'EEEE, MMMM d, yyyy')}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex gap-2\">\n                  <button\n                    onClick={() => setIsEncrypted(!isEncrypted)}\n                    className={`p-2 rounded-lg ${\n                      isEncrypted\n                        ? 'bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-400'\n                        : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400'\n                    }`}\n                  >\n                    {isEncrypted ? <Lock className=\"w-4 h-4\" /> : <Unlock className=\"w-4 h-4\" />}\n                  </button>\n                  <button\n                    onClick={saveEntry}\n                    className=\"px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 flex items-center gap-2\"\n                  >\n                    <Save className=\"w-4 h-4\" />\n                    Save\n                  </button>\n                  <button\n                    onClick={() => {\n                      setIsWriting(false);\n                      setCurrentEntry({\n                        type: 'freeform',\n                        title: '',\n                        content: '',\n                        tags: [],\n                        mood: undefined\n                      });\n                    }}\n                    className=\"px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600\"\n                  >\n                    Cancel\n                  </button>\n                </div>\n              </div>\n\n              {/* Title Input */}\n              <input\n                type=\"text\"\n                placeholder=\"Entry title (_optional)\"\n                value={currentEntry.title || ''}\n                onChange={(e) => setCurrentEntry(prev => ({ ...prev, title: e.target.value }))}\n                className=\"w-full mb-4 px-4 py-2 bg-gray-50 dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n\n              {/* Mood Selection */}\n              <div className=\"mb-4\">\n                <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block\">\n                  How are you feeling?\n                </label>\n                <div className=\"flex gap-3\">\n                  {MOOD_OPTIONS.map(mood => {\n                    const Icon = mood.icon;\n                    return (\n                      <button\n                        key={mood.value}\n                        onClick={() => setCurrentEntry(prev => ({ \n                          ...prev, \n                          mood: prev.mood === mood.value ? undefined : mood.value \n                        }))}\n                        className={`p-3 rounded-lg transition-all ${\n                          currentEntry.mood === mood.value\n                            ? 'bg-blue-100 dark:bg-blue-900 ring-2 ring-blue-500'\n                            : 'bg-gray-50 dark:bg-gray-900 hover:bg-gray-100 dark:hover:bg-gray-800'\n                        }`}\n                      >\n                        <Icon className={`w-6 h-6 ${mood.color}`} />\n                      </button>\n                    );\n                  })}\n                </div>\n              </div>\n\n              {/* Writing Area */}\n              {selectedType === 'thought' || selectedType === 'emotion' ? (\n                <div className=\"space-y-4\">\n                  {Object.entries(JOURNAL_TYPES[selectedType].structure!).map(([key, prompt]) => (\n                    <div key={key}>\n                      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block\">\n                        {prompt}\n                      </label>\n                      <textarea\n                        placeholder={`Write about ${prompt.toLowerCase()}...`}\n                        value={(currentEntry.content as Record<string, string>)?.[key] || ''}\n                        onChange={(e) => setCurrentEntry(prev => ({\n                          ...prev,\n                          content: {\n                            ...(typeof prev.content === 'object' ? prev.content : {}),\n                            [key]: e.target.value\n                          }\n                        }))}\n                        className=\"w-full px-4 py-3 bg-gray-50 dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none\"\n                        rows={3}\n                      />\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div>\n                  {selectedType === 'gratitude' || selectedType === 'reflection' ? (\n                    <div className=\"mb-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                      <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n                        Prompts to consider:\n                      </p>\n                      <ul className=\"mt-2 space-y-1\">\n                        {JOURNAL_TYPES[selectedType].prompts?.map((prompt, idx) => (\n                          <li key={idx} className=\"text-sm text-blue-600 dark:text-blue-400\">\n                            • {prompt}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  ) : null}\n                  \n                  <textarea\n                    ref={editorRef}\n                    placeholder=\"Start writing your thoughts...\"\n                    value={currentEntry.content as string || ''}\n                    onChange={(e) => setCurrentEntry(prev => ({ ...prev, content: e.target.value }))}\n                    className=\"w-full h-96 px-4 py-3 bg-gray-50 dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none\"\n                  />\n                </div>\n              )}\n\n              {/* Tags Input */}\n              <div className=\"mt-4\">\n                <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block\">\n                  Tags (comma-separated)\n                </label>\n                <input\n                  type=\"text\"\n                  placeholder=\"e.g., work, family, self-care\"\n                  value={currentEntry.tags?.join(', ') || ''}\n                  onChange={(e) => setCurrentEntry(prev => ({\n                    ...prev,\n                    tags: e.target.value.split(',').map(tag => tag.trim()).filter(tag => tag)\n                  }))}\n                  className=\"w-full px-4 py-2 bg-gray-50 dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                />\n              </div>\n\n              {/* Word Count */}\n              <div className=\"mt-4 flex justify-between text-sm text-gray-500\">\n                <span>\n                  {autoSaveEnabled && (\n                    <>\n                      <span className=\"inline-block w-2 h-2 bg-green-500 rounded-full mr-2\"></span>\n                      Auto-save enabled\n                    </>\n                  )}\n                </span>\n                <span>\n                  {calculateStats(currentEntry.content || '').wordCount} words\n                </span>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          {/* Search and _Filter */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-xl p-4\">\n            <h3 className=\"font-semibold text-gray-900 dark:text-white mb-3\">\n              Search & Filter\n            </h3>\n            <div className=\"space-y-3\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search entries...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-2 bg-gray-50 dark:bg-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                />\n              </div>\n              \n              <select\n                value={filterType || ''}\n                onChange={(e) => setFilterType(e.target.value as keyof typeof JOURNAL_TYPES || null)}\n                className=\"w-full px-4 py-2 bg-gray-50 dark:bg-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"\">All Types</option>\n                {Object.entries(_JOURNAL_TYPES).map(([key, type]) => (\n                  <option key={key} value={key}>{type.name}</option>\n                ))}\n              </select>\n              \n              <select\n                value={filterMood || ''}\n                onChange={(e) => setFilterMood(e.target.value || null)}\n                className=\"w-full px-4 py-2 bg-gray-50 dark:bg-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"\">All Moods</option>\n                {MOOD_OPTIONS.map(mood => (\n                  <option key={mood.value} value={mood.value}>\n                    {mood.value.charAt(0).toUpperCase() + mood.value.slice(1)}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n\n          {/* Selected Entry View */}\n          <AnimatePresence>\n            {selectedEntry && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: 20 }}\n                className=\"bg-white dark:bg-gray-800 rounded-xl p-4\"\n              >\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h3 className=\"font-semibold text-gray-900 dark:text-white\">\n                    Entry Details\n                  </h3>\n                  <button\n                    onClick={() => setSelectedEntry(null)}\n                    className=\"text-gray-400 hover:text-gray-600\"\n                  >\n                    ×\n                  </button>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <div>\n                    <p className=\"text-sm text-gray-500 mb-1\">Title</p>\n                    <p className=\"font-medium text-gray-900 dark:text-white\">\n                      {selectedEntry.title}\n                    </p>\n                  </div>\n                  \n                  <div>\n                    <p className=\"text-sm text-gray-500 mb-1\">Date</p>\n                    <p className=\"text-gray-700 dark:text-gray-300\">\n                      {formatDate(selectedEntry.timestamp, 'PPP')}\n                    </p>\n                  </div>\n                  \n                  {selectedEntry.mood && (\n                    <div>\n                      <p className=\"text-sm text-gray-500 mb-1\">Mood</p>\n                      <div className=\"flex items-center gap-2\">\n                        {React.createElement(\n                          MOOD_OPTIONS.find(m => m.value === selectedEntry.mood)?.icon || Sun,\n                          { className: \"w-5 h-5\" }\n                        )}\n                        <span className=\"text-gray-700 dark:text-gray-300\">\n                          {selectedEntry.mood}\n                        </span>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {selectedEntry.tags.length > 0 && (\n                    <div>\n                      <p className=\"text-sm text-gray-500 mb-1\">Tags</p>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {selectedEntry.tags.map((tag, idx) => (\n                          <span\n                            key={idx}\n                            className=\"px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded text-xs\"\n                          >\n                            {tag}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                  \n                  {selectedEntry.insights && selectedEntry.insights.length > 0 && (\n                    <div>\n                      <p className=\"text-sm text-gray-500 mb-1\">Insights</p>\n                      <div className=\"space-y-1\">\n                        {selectedEntry.insights.map((insight, idx) => (\n                          <div key={idx} className=\"flex items-center gap-2\">\n                            <Sparkles className=\"w-3 h-3 text-yellow-500\" />\n                            <span className=\"text-sm text-gray-700 dark:text-gray-300\">\n                              {insight}\n                            </span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                  \n                  <div>\n                    <p className=\"text-sm text-gray-500 mb-1\">Statistics</p>\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <div className=\"text-center p-2 bg-gray-50 dark:bg-gray-900 rounded\">\n                        <p className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                          {selectedEntry.wordCount}\n                        </p>\n                        <p className=\"text-xs text-gray-500\">words</p>\n                      </div>\n                      <div className=\"text-center p-2 bg-gray-50 dark:bg-gray-900 rounded\">\n                        <p className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                          {selectedEntry.readingTime}\n                        </p>\n                        <p className=\"text-xs text-gray-500\">min read</p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"pt-3 border-t border-gray-200 dark:border-gray-700\">\n                    <button\n                      onClick={() => {\n                        setCurrentEntry({\n                          ...selectedEntry,\n                          type: selectedEntry.type\n                        });\n                        setSelectedType(selectedEntry.type);\n                        setIsWriting(true);\n                        setSelectedEntry(null);\n                      }}\n                      className=\"w-full px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 flex items-center justify-center gap-2\"\n                    >\n                      <Edit3 className=\"w-4 h-4\" />\n                      Continue Entry\n                    </button>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\wellness\\TherapeuticProgressTracker.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":128,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":128,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":137,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":137,"endColumn":20},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'sessions'. Either exclude it or remove the dependency array.","line":304,"column":6,"nodeType":"ArrayExpression","endLine":304,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [metrics]","fix":{"range":[11088,11107],"text":"[metrics]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'selectedTimeRange'. Either exclude it or remove the dependency array.","line":343,"column":6,"nodeType":"ArrayExpression","endLine":343,"endColumn":52,"suggestions":[{"desc":"Update the dependencies array to be: [metrics, selectedCategory]","fix":{"range":[12334,12380],"text":"[metrics, selectedCategory]"}}]},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":642,"column":17,"nodeType":"JSXOpeningElement","endLine":642,"endColumn":69},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":677,"column":17,"nodeType":"JSXOpeningElement","endLine":677,"endColumn":69}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '@/utils/logger';\n/**\r\n * Therapeutic Progress Tracker Component\r\n * Tracks and visualizes mental health progress with evidence-based metrics\r\n */\r\n\r\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport {\r\n  _TrendingUp, _TrendingDown, Activity, Brain, Heart, _Target,\r\n  _Calendar, _Clock, _Award, _ChevronRight, _Filter, Download,\r\n  AlertCircle, CheckCircle, Info, _BarChart3, LineChart,\r\n  Zap, _Moon, Sun, Cloud, CloudRain, _User, _MessageSquare\r\n} from 'lucide-react';\r\nimport { format, _startOfWeek, _endOfWeek, _eachDayOfInterval, \r\n         subDays, _differenceInDays, _isToday } from 'date-fns';\r\nimport { secureStorage } from '../../services/security/SecureLocalStorage';\r\nimport { detectCrisisLevel } from '../../utils/crisis';\r\n\r\ninterface TherapeuticMetric {\r\n  id: string;\r\n  name: string;\r\n  category: 'mood' | 'anxiety' | 'depression' | 'stress' | 'coping' | 'social' | 'physical';\r\n  value: number; // 0-10 scale\r\n  timestamp: Date;\r\n  notes?: string;\r\n  triggers?: string[];\r\n  copingUsed?: string[];\r\n}\r\n\r\ninterface TherapySession {\r\n  id: string;\r\n  date: Date;\r\n  therapistId?: string;\r\n  duration: number; // minutes\r\n  mood: {\r\n    before: number;\r\n    after: number;\r\n  };\r\n  topics: string[];\r\n  breakthroughs?: string[];\r\n  homework?: string[];\r\n  nextSteps?: string[];\r\n}\r\n\r\ninterface ProgressInsight {\r\n  id: string;\r\n  type: 'improvement' | 'concern' | 'milestone' | 'pattern';\r\n  category: string;\r\n  message: string;\r\n  severity: 'info' | 'success' | 'warning' | 'alert';\r\n  _data?: unknown;\r\n  timestamp: Date;\r\n}\r\n\r\ninterface _WeeklyReport {\r\n  weekStart: Date;\r\n  weekEnd: Date;\r\n  averageMood: number;\r\n  moodTrend: 'improving' | 'stable' | 'declining';\r\n  anxietyLevel: number;\r\n  stressLevel: number;\r\n  copingEffectiveness: number;\r\n  sessionsCompleted: number;\r\n  goalsProgress: number;\r\n  insights: ProgressInsight[];\r\n}\r\n\r\nconst MOOD_EMOJIS = {\r\n  1: { emoji: '😔', label: 'Very Low', color: 'text-red-500' },\r\n  2: { emoji: '😟', label: 'Low', color: 'text-orange-500' },\r\n  3: { emoji: '😕', label: 'Below Average', color: 'text-yellow-600' },\r\n  4: { emoji: '😐', label: 'Neutral', color: 'text-yellow-500' },\r\n  5: { emoji: '🙂', label: 'Okay', color: 'text-green-400' },\r\n  6: { emoji: '😊', label: 'Good', color: 'text-green-500' },\r\n  7: { emoji: '😄', label: 'Very Good', color: 'text-green-600' },\r\n  8: { emoji: '😁', label: 'Great', color: 'text-blue-500' },\r\n  9: { emoji: '🤗', label: 'Excellent', color: 'text-blue-600' },\r\n  10: { emoji: '🌟', label: 'Amazing', color: 'text-purple-500' }\r\n};\r\n\r\nconst METRIC_CATEGORIES = {\r\n  mood: { name: 'Mood', icon: Sun, color: 'from-yellow-400 to-orange-500' },\r\n  anxiety: { name: 'Anxiety', icon: CloudRain, color: 'from-blue-400 to-indigo-500' },\r\n  depression: { name: 'Depression', icon: Cloud, color: 'from-gray-400 to-gray-600' },\r\n  stress: { name: 'Stress', icon: Zap, color: 'from-red-400 to-pink-500' },\r\n  coping: { name: 'Coping Skills', icon: Brain, color: 'from-purple-400 to-violet-500' },\r\n  social: { name: 'Social Connection', icon: Heart, color: 'from-pink-400 to-red-500' },\r\n  physical: { name: 'Physical Wellness', icon: Activity, color: 'from-green-400 to-emerald-500' }\r\n};\r\n\r\nexport const TherapeuticProgressTracker: React.FC = () => {\r\n  const [metrics, setMetrics] = useState<TherapeuticMetric[]>([]);\r\n  const [sessions, setSessions] = useState<TherapySession[]>([]);\r\n  const [insights, setInsights] = useState<ProgressInsight[]>([]);\r\n  const [selectedTimeRange, setSelectedTimeRange] = useState<'week' | 'month' | 'year'>('week');\r\n  const [selectedCategory, setSelectedCategory] = useState<keyof typeof METRIC_CATEGORIES | 'all'>('all');\r\n  const [showAddMetric, setShowAddMetric] = useState(false);\r\n  const [newMetric, setNewMetric] = useState<Partial<TherapeuticMetric>>({\r\n    category: 'mood',\r\n    value: 5\r\n  });\r\n\r\n  // Load saved data on mount\r\n  useEffect(() => {\r\n    loadProgressData();\r\n  }, []);\r\n\r\n  // Generate insights when data changes\r\n  useEffect(() => {\r\n    generateProgressInsights();\r\n  }, [metrics, sessions, generateProgressInsights]);\r\n\r\n  const loadProgressData = () => {\r\n    try {\r\n      const _savedMetrics = secureStorage.getItem('therapeuticMetrics');\r\n      const _savedSessions = secureStorage.getItem('therapySessions');\r\n      \r\n      if (_savedMetrics) {\r\n        const parsed = JSON.parse(_savedMetrics);\r\n        setMetrics(parsed.map((m: unknown) => ({ ...m, timestamp: new Date(m.timestamp) })));\r\n      }\r\n      \r\n      if (_savedSessions) {\r\n        const parsed = JSON.parse(_savedSessions);\r\n        setSessions(parsed.map((s: unknown) => ({ ...s, date: new Date(s.date) })));\r\n      }\r\n    } catch (_error) {\r\n      logger.error('Failed to load progress _data:');\r\n    }\r\n  };\r\n\r\n  const _saveProgressData = () => {\r\n    try {\r\n      secureStorage.setItem('therapeuticMetrics', JSON.stringify(_metrics));\r\n      secureStorage.setItem('therapySessions', JSON.stringify(_sessions));\r\n    } catch (_error) {\r\n      logger.error('Failed to save progress _data:');\r\n    }\r\n  };\r\n\r\n  const addMetric = () => {\r\n    if (!newMetric.category || newMetric.value === undefined) return;\r\n\r\n    const metric: TherapeuticMetric = {\r\n      id: `metric-${Date.now()}`,\r\n      name: METRIC_CATEGORIES[newMetric.category].name,\r\n      category: newMetric.category,\r\n      value: newMetric.value,\r\n      timestamp: new Date(),\r\n      notes: newMetric.notes,\r\n      triggers: newMetric.triggers,\r\n      copingUsed: newMetric.copingUsed\r\n    };\r\n\r\n    const _updatedMetrics = [...metrics, metric];\r\n    setMetrics(_updatedMetrics);\r\n    secureStorage.setItem('therapeuticMetrics', JSON.stringify(_updatedMetrics));\r\n    \r\n    setShowAddMetric(false);\r\n    setNewMetric({ category: 'mood', value: 5 });\r\n    \r\n    // Check for crisis indicators in notes\r\n    if (newMetric.notes) {\r\n      const crisisLevel = detectCrisisLevel(newMetric.notes);\r\n      if (crisisLevel.level === 'high' || crisisLevel.level === 'critical') {\r\n        generateCrisisInsight(crisisLevel.level);\r\n      }\r\n    }\r\n  };\r\n\r\n  const generateProgressInsights = useCallback(() => {\r\n    const newInsights: ProgressInsight[] = [];\r\n    const now = new Date();\r\n    const weekAgo = subDays(now, 7);\r\n    \r\n    // Recent metrics\r\n    const recentMetrics = metrics.filter(m => m.timestamp > weekAgo);\r\n    \r\n    if (recentMetrics.length === 0) {\r\n      newInsights.push({\r\n        id: `insight-${Date.now()}-1`,\r\n        type: 'concern',\r\n        category: 'tracking',\r\n        message: 'No progress tracked this week. Regular tracking helps identify patterns.',\r\n        severity: 'info',\r\n        timestamp: now\r\n      });\r\n    } else {\r\n      // Calculate averages by category\r\n      const categoryAverages = Object.keys(_METRIC_CATEGORIES).reduce((acc, cat) => {\r\n        const catMetrics = recentMetrics.filter(m => m.category === cat);\r\n        if (catMetrics.length > 0) {\r\n          acc[cat] = catMetrics.reduce((sum, m) => sum + m.value, 0) / catMetrics.length;\r\n        }\r\n        return acc;\r\n      }, {} as Record<string, number>);\r\n\r\n      // Check mood trends\r\n      const moodMetrics = recentMetrics.filter(m => m.category === 'mood').sort((a, b) => \r\n        a.timestamp.getTime() - b.timestamp.getTime()\r\n      );\r\n      \r\n      if (moodMetrics.length >= 3) {\r\n        const firstHalf = moodMetrics.slice(0, Math.floor(moodMetrics.length / 2));\r\n        const secondHalf = moodMetrics.slice(Math.floor(moodMetrics.length / 2));\r\n        \r\n        const firstAvg = firstHalf.reduce((sum, m) => sum + m.value, 0) / firstHalf.length;\r\n        const secondAvg = secondHalf.reduce((sum, m) => sum + m.value, 0) / secondHalf.length;\r\n        \r\n        if (secondAvg - firstAvg > 1) {\r\n          newInsights.push({\r\n            id: `insight-${Date.now()}-2`,\r\n            type: 'improvement',\r\n            category: 'mood',\r\n            message: `Your mood has improved by ${Math.round((secondAvg - firstAvg) * 10) / 10} points this week!`,\r\n            severity: 'success',\r\n            _data: { firstAvg, secondAvg },\r\n            timestamp: now\r\n          });\r\n        } else if (firstAvg - secondAvg > 1) {\r\n          newInsights.push({\r\n            id: `insight-${Date.now()}-3`,\r\n            type: 'concern',\r\n            category: 'mood',\r\n            message: 'Your mood has been declining. Consider reaching out for support.',\r\n            severity: 'warning',\r\n            _data: { firstAvg, secondAvg },\r\n            timestamp: now\r\n          });\r\n        }\r\n      }\r\n\r\n      // Check anxiety levels\r\n      if (categoryAverages['anxiety'] && categoryAverages['anxiety'] > 7) {\r\n        newInsights.push({\r\n          id: `insight-${Date.now()}-4`,\r\n          type: 'concern',\r\n          category: 'anxiety',\r\n          message: 'Your anxiety levels have been high. Practice grounding techniques and consider professional support.',\r\n          severity: 'warning',\r\n          timestamp: now\r\n        });\r\n      }\r\n\r\n      // Check coping effectiveness\r\n      if (categoryAverages['coping'] && categoryAverages['coping'] > 6) {\r\n        newInsights.push({\r\n          id: `insight-${Date.now()}-5`,\r\n          type: 'improvement',\r\n          category: 'coping',\r\n          message: 'Your coping skills are working well! Keep using what works for you.',\r\n          severity: 'success',\r\n          timestamp: now\r\n        });\r\n      }\r\n\r\n      // Milestone checks\r\n      if (metrics.length === 7) {\r\n        newInsights.push({\r\n          id: `insight-${Date.now()}-6`,\r\n          type: 'milestone',\r\n          category: 'tracking',\r\n          message: 'One week of consistent tracking! You\\'re building a healthy habit.',\r\n          severity: 'success',\r\n          timestamp: now\r\n        });\r\n      } else if (metrics.length === 30) {\r\n        newInsights.push({\r\n          id: `insight-${Date.now()}-7`,\r\n          type: 'milestone',\r\n          category: 'tracking',\r\n          message: 'One month of progress tracking! Your dedication is admirable.',\r\n          severity: 'success',\r\n          timestamp: now\r\n        });\r\n      }\r\n\r\n      // Pattern detection\r\n      const triggers = recentMetrics.flatMap(m => m.triggers || []);\r\n      const _triggerCounts = triggers.reduce((acc, trigger) => {\r\n        acc[trigger] = (acc[trigger] || 0) + 1;\r\n        return acc;\r\n      }, {} as Record<string, number>);\r\n      \r\n      const commonTriggers = Object.entries(_triggerCounts)\r\n        .filter(([_, count]) => count >= 3)\r\n        .map(([trigger]) => trigger);\r\n      \r\n      if (commonTriggers.length > 0) {\r\n        newInsights.push({\r\n          id: `insight-${Date.now()}-8`,\r\n          type: 'pattern',\r\n          category: 'triggers',\r\n          message: `Common triggers identified: ${commonTriggers.join(', ')}. Awareness is the first step to management.`,\r\n          severity: 'info',\r\n          _data: { triggers: commonTriggers },\r\n          timestamp: now\r\n        });\r\n      }\r\n    }\r\n\r\n    setInsights(_newInsights);\r\n  }, [metrics, sessions]);\r\n\r\n  const generateCrisisInsight = (level: string) => {\r\n    const insight: ProgressInsight = {\r\n      id: `crisis-${Date.now()}`,\r\n      type: 'concern',\r\n      category: 'crisis',\r\n      message: level === 'critical' \r\n        ? 'Your recent entry suggests you may need immediate support. Please reach out to 988 or your therapist.'\r\n        : 'You seem to be going through a difficult time. Support is available when you need it.',\r\n      severity: 'alert',\r\n      timestamp: new Date()\r\n    };\r\n    setInsights(prev => [insight, ...prev]);\r\n  };\r\n\r\n  const getMetricsByTimeRange = useMemo(() => {\r\n    const now = new Date();\r\n    let startDate: Date;\r\n    \r\n    switch (_selectedTimeRange) {\r\n      case 'week':\r\n        startDate = subDays(now, 7);\r\n        break;\r\n      case 'month':\r\n        startDate = subDays(now, 30);\r\n        break;\r\n      case 'year':\r\n        startDate = subDays(now, 365);\r\n        break;\r\n    }\r\n    \r\n    let filtered = metrics.filter(m => m.timestamp >= startDate);\r\n    \r\n    if (selectedCategory !== 'all') {\r\n      filtered = filtered.filter(m => m.category === selectedCategory);\r\n    }\r\n    \r\n    return filtered.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\r\n  }, [metrics, selectedTimeRange, selectedCategory]);\r\n\r\n  const chartData = useMemo(() => {\r\n    const _data = getMetricsByTimeRange.reduce((acc, metric) => {\r\n      const date = format(metric.timestamp, 'MMM dd');\r\n      if (!acc[date]) {\r\n        acc[date] = { date, values: [] };\r\n      }\r\n      acc[date].values.push(metric.value);\r\n      return acc;\r\n    }, {} as Record<string, { date: string; values: number[] }>);\r\n    \r\n    return Object.values(_data).map(d => ({\r\n      date: d.date,\r\n      value: d.values.reduce((sum, v) => sum + v, 0) / d.values.length\r\n    }));\r\n  }, [getMetricsByTimeRange]);\r\n\r\n  const exportProgressReport = () => {\r\n    const report = generateProgressReport();\r\n    const _blob = new Blob([report], { type: 'text/plain' });\r\n    const url = URL.createObjectURL(_blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `progress-report-${format(new Date(), 'yyyy-MM-dd')}.txt`;\r\n    a.click();\r\n    URL.revokeObjectURL(_url);\r\n  };\r\n\r\n  const generateProgressReport = () => {\r\n    let report = '=== THERAPEUTIC PROGRESS REPORT ===\\n\\n';\r\n    report += `Generated: ${format(new Date(), 'MMMM dd, yyyy')}\\n`;\r\n    report += `Time Period: Last ${selectedTimeRange}\\n\\n`;\r\n    \r\n    // Summary statistics\r\n    const avgMood = getMetricsByTimeRange\r\n      .filter(m => m.category === 'mood')\r\n      .reduce((sum, m, _, arr) => sum + m.value / arr.length, 0);\r\n    \r\n    report += '--- SUMMARY ---\\n';\r\n    report += `Average Mood: ${avgMood.toFixed(1)}/10\\n`;\r\n    report += `Total Entries: ${getMetricsByTimeRange.length}\\n`;\r\n    report += `Therapy Sessions: ${sessions.filter(s => \r\n      s.date >= subDays(new Date(), selectedTimeRange === 'week' ? 7 : selectedTimeRange === 'month' ? 30 : 365)\r\n    ).length}\\n\\n`;\r\n    \r\n    // Recent insights\r\n    report += '--- KEY INSIGHTS ---\\n';\r\n    insights.slice(0, 5).forEach(insight => {\r\n      report += `• ${insight.message}\\n`;\r\n    });\r\n    \r\n    report += '\\n--- DETAILED METRICS ---\\n';\r\n    getMetricsByTimeRange.forEach(metric => {\r\n      report += `${format(metric.timestamp, 'MMM dd, yyyy')}: ${metric.name} - ${metric.value}/10\\n`;\r\n      if (metric.notes) report += `  Notes: ${metric.notes}\\n`;\r\n      if (metric.triggers?.length) report += `  Triggers: ${metric.triggers.join(', ')}\\n`;\r\n      if (metric.copingUsed?.length) report += `  Coping: ${metric.copingUsed.join(', ')}\\n`;\r\n    });\r\n    \r\n    return report;\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 p-6\">\r\n      {/* Header */}\r\n      <motion.div\r\n        initial={{ opacity: 0, y: -20 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        className=\"max-w-7xl mx-auto mb-8\"\r\n      >\r\n        <div className=\"flex items-center justify-between mb-6\">\r\n          <div className=\"flex items-center space-x-3\">\r\n            <div className=\"bg-gradient-to-r from-purple-400 to-violet-500 p-3 rounded-xl\">\r\n              <LineChart className=\"h-8 w-8 text-white\" />\r\n            </div>\r\n            <div>\r\n              <h1 className=\"text-3xl font-bold text-white\">Therapeutic Progress</h1>\r\n              <p className=\"text-gray-300\">Track your mental health journey</p>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center space-x-3\">\r\n            <button\r\n              onClick={() => setShowAddMetric(true)}\r\n              className=\"px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors\"\r\n            >\r\n              Add Entry\r\n            </button>\r\n            <button\r\n              onClick={exportProgressReport}\r\n              className=\"px-4 py-2 bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition-colors flex items-center space-x-2\"\r\n            >\r\n              <Download className=\"h-4 w-4\" />\r\n              <span>Export Report</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Time Range and Category Filters */}\r\n        <div className=\"flex flex-wrap gap-4 mb-6\">\r\n          <div className=\"flex items-center space-x-2 bg-gray-800/50 rounded-lg p-1\">\r\n            {(['week', 'month', 'year'] as const).map(range => (\r\n              <button\r\n                key={range}\r\n                onClick={() => setSelectedTimeRange(_range)}\r\n                className={`px-3 py-1 rounded-md transition-colors ${\r\n                  selectedTimeRange === range\r\n                    ? 'bg-purple-500 text-white'\r\n                    : 'text-gray-400 hover:text-white'\r\n                }`}\r\n              >\r\n                {range.charAt(0).toUpperCase() + range.slice(1)}\r\n              </button>\r\n            ))}\r\n          </div>\r\n          \r\n          <div className=\"flex items-center space-x-2 bg-gray-800/50 rounded-lg p-1\">\r\n            <button\r\n              onClick={() => setSelectedCategory('all')}\r\n              className={`px-3 py-1 rounded-md transition-colors ${\r\n                selectedCategory === 'all'\r\n                  ? 'bg-purple-500 text-white'\r\n                  : 'text-gray-400 hover:text-white'\r\n              }`}\r\n            >\r\n              All\r\n            </button>\r\n            {Object.entries(_METRIC_CATEGORIES).map(([key, cat]) => {\r\n              const Icon = cat.icon;\r\n              return (\r\n                <button\r\n                  key={key}\r\n                  onClick={() => setSelectedCategory(key as keyof typeof METRIC_CATEGORIES)}\r\n                  className={`px-3 py-1 rounded-md transition-colors flex items-center space-x-1 ${\r\n                    selectedCategory === key\r\n                      ? 'bg-purple-500 text-white'\r\n                      : 'text-gray-400 hover:text-white'\r\n                  }`}\r\n                >\r\n                  <Icon className=\"h-4 w-4\" />\r\n                  <span className=\"hidden md:inline\">{cat.name}</span>\r\n                </button>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </motion.div>\r\n\r\n      {/* Main Content Grid */}\r\n      <div className=\"max-w-7xl mx-auto grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n        {/* Progress Chart */}\r\n        <div className=\"lg:col-span-2 bg-gray-800/50 rounded-2xl p-6 border border-gray-700/50\">\r\n          <h2 className=\"text-xl font-semibold text-white mb-4\">Progress Over Time</h2>\r\n          \r\n          {chartData.length > 0 ? (\r\n            <div className=\"h-64 flex items-end justify-between space-x-2\">\r\n              {chartData.map((_data, index) => (\r\n                <div key={index} className=\"flex-1 flex flex-col items-center\">\r\n                  <motion.div\r\n                    initial={{ height: 0 }}\r\n                    animate={{ height: `${(_data.value / 10) * 100}%` }}\r\n                    transition={{ delay: index * 0.05 }}\r\n                    className=\"w-full bg-gradient-to-t from-purple-600 to-purple-400 rounded-t-lg relative group\"\r\n                  >\r\n                    <div className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-900 text-white px-2 py-1 rounded text-xs opacity-0 group-hover:opacity-100 transition-opacity\">\r\n                      {_data.value.toFixed(1)}\r\n                    </div>\r\n                  </motion.div>\r\n                  <span className=\"text-xs text-gray-400 mt-2 rotate-45 origin-left\">{_data.date}</span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <div className=\"h-64 flex items-center justify-center\">\r\n              <p className=\"text-gray-400\">No data for selected period</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Insights Panel */}\r\n        <div className=\"bg-gray-800/50 rounded-2xl p-6 border border-gray-700/50\">\r\n          <h2 className=\"text-xl font-semibold text-white mb-4\">Insights</h2>\r\n          \r\n          <div className=\"space-y-3 max-h-96 overflow-y-auto\">\r\n            {insights.length > 0 ? (\r\n              insights.map(insight => (\r\n                <motion.div\r\n                  key={insight.id}\r\n                  initial={{ opacity: 0, x: -20 }}\r\n                  animate={{ opacity: 1, x: 0 }}\r\n                  className={`p-3 rounded-lg ${\r\n                    insight.severity === 'success' ? 'bg-green-500/20 border border-green-400/50' :\r\n                    insight.severity === 'warning' ? 'bg-yellow-500/20 border border-yellow-400/50' :\r\n                    insight.severity === 'alert' ? 'bg-red-500/20 border border-red-400/50' :\r\n                    'bg-blue-500/20 border border-blue-400/50'\r\n                  }`}\r\n                >\r\n                  <div className=\"flex items-start space-x-2\">\r\n                    {insight.severity === 'success' && <CheckCircle className=\"h-5 w-5 text-green-400 flex-shrink-0\" />}\r\n                    {insight.severity === 'warning' && <AlertCircle className=\"h-5 w-5 text-yellow-400 flex-shrink-0\" />}\r\n                    {insight.severity === 'alert' && <AlertCircle className=\"h-5 w-5 text-red-400 flex-shrink-0\" />}\r\n                    {insight.severity === 'info' && <Info className=\"h-5 w-5 text-blue-400 flex-shrink-0\" />}\r\n                    <p className=\"text-sm text-gray-200\">{insight.message}</p>\r\n                  </div>\r\n                </motion.div>\r\n              ))\r\n            ) : (\r\n              <p className=\"text-gray-400 text-center\">Track more data to see insights</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Recent Metrics */}\r\n        <div className=\"lg:col-span-3 bg-gray-800/50 rounded-2xl p-6 border border-gray-700/50\">\r\n          <h2 className=\"text-xl font-semibold text-white mb-4\">Recent Entries</h2>\r\n          \r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n            {getMetricsByTimeRange.slice(-6).reverse().map(metric => {\r\n              const category = METRIC_CATEGORIES[metric.category];\r\n              const Icon = category.icon;\r\n              const moodInfo = MOOD_EMOJIS[Math.round(metric.value) as keyof typeof MOOD_EMOJIS];\r\n              \r\n              return (\r\n                <motion.div\r\n                  key={metric.id}\r\n                  initial={{ opacity: 0, scale: 0.9 }}\r\n                  animate={{ opacity: 1, scale: 1 }}\r\n                  className=\"bg-gray-900/50 rounded-xl p-4\"\r\n                >\r\n                  <div className=\"flex items-center justify-between mb-2\">\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <div className={`bg-gradient-to-r ${category.color} p-2 rounded-lg`}>\r\n                        <Icon className=\"h-5 w-5 text-white\" />\r\n                      </div>\r\n                      <div>\r\n                        <div className=\"text-white font-medium\">{category.name}</div>\r\n                        <div className=\"text-xs text-gray-400\">\r\n                          {format(metric.timestamp, 'MMM dd, h:mm a')}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"text-right\">\r\n                      <div className=\"text-2xl\">{moodInfo.emoji}</div>\r\n                      <div className={`text-sm ${moodInfo.color}`}>{metric.value}/10</div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  {metric.notes && (\r\n                    <p className=\"text-sm text-gray-300 mt-2\">{metric.notes}</p>\r\n                  )}\r\n                  \r\n                  {metric.triggers && metric.triggers.length > 0 && (\r\n                    <div className=\"mt-2 flex flex-wrap gap-1\">\r\n                      {metric.triggers.map((trigger, i) => (\r\n                        <span key={i} className=\"text-xs bg-red-500/20 text-red-300 px-2 py-1 rounded\">\r\n                          {trigger}\r\n                        </span>\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {metric.copingUsed && metric.copingUsed.length > 0 && (\r\n                    <div className=\"mt-2 flex flex-wrap gap-1\">\r\n                      {metric.copingUsed.map((coping, i) => (\r\n                        <span key={i} className=\"text-xs bg-green-500/20 text-green-300 px-2 py-1 rounded\">\r\n                          {coping}\r\n                        </span>\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                </motion.div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Add Metric Modal */}\r\n      <AnimatePresence>\r\n        {showAddMetric && (\r\n          <motion.div\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0 }}\r\n            className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\"\r\n            onClick={() => setShowAddMetric(false)}\r\n          >\r\n            <motion.div\r\n              initial={{ scale: 0.9 }}\r\n              animate={{ scale: 1 }}\r\n              exit={{ scale: 0.9 }}\r\n              className=\"bg-gray-800 rounded-2xl p-6 max-w-md w-full\"\r\n              onClick={(e) => e.stopPropagation()}\r\n            >\r\n              <h3 className=\"text-xl font-semibold text-white mb-4\">Track Your Progress</h3>\r\n              \r\n              {/* Category Selection */}\r\n              <div className=\"mb-4\">\r\n                <label className=\"block text-sm text-gray-300 mb-2\">Category</label>\r\n                <select\r\n                  value={newMetric.category}\r\n                  onChange={(e) => setNewMetric({ ...newMetric, category: e.target.value as unknown })}\r\n                  className=\"w-full bg-gray-700 text-white rounded-lg px-3 py-2\"\r\n                >\r\n                  {Object.entries(_METRIC_CATEGORIES).map(([key, cat]) => (\r\n                    <option key={key} value={key}>{cat.name}</option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n              \r\n              {/* Value Slider */}\r\n              <div className=\"mb-4\">\r\n                <label className=\"block text-sm text-gray-300 mb-2\">\r\n                  How are you feeling? ({newMetric.value}/10)\r\n                </label>\r\n                <div className=\"flex items-center space-x-3\">\r\n                  <span className=\"text-2xl\">\r\n                    {MOOD_EMOJIS[Math.round(newMetric.value || 5) as keyof typeof MOOD_EMOJIS].emoji}\r\n                  </span>\r\n                  <input\r\n                    type=\"range\"\r\n                    min=\"1\"\r\n                    max=\"10\"\r\n                    value={newMetric.value}\r\n                    onChange={(e) => setNewMetric({ ...newMetric, value: parseInt(e.target.value) })}\r\n                    className=\"flex-1\"\r\n                  />\r\n                  <span className=\"text-white font-medium\">{newMetric.value}</span>\r\n                </div>\r\n              </div>\r\n              \r\n              {/* Notes */}\r\n              <div className=\"mb-4\">\r\n                <label className=\"block text-sm text-gray-300 mb-2\">Notes (_optional)</label>\r\n                <textarea\r\n                  value={newMetric.notes || ''}\r\n                  onChange={(e) => setNewMetric({ ...newMetric, notes: e.target.value })}\r\n                  placeholder=\"How are you feeling? What happened today?\"\r\n                  className=\"w-full bg-gray-700 text-white rounded-lg px-3 py-2 h-20 resize-none\"\r\n                />\r\n              </div>\r\n              \r\n              {/* Action Buttons */}\r\n              <div className=\"flex space-x-3\">\r\n                <button\r\n                  onClick={addMetric}\r\n                  className=\"flex-1 bg-purple-500 text-white py-2 rounded-lg hover:bg-purple-600 transition-colors\"\r\n                >\r\n                  Save Entry\r\n                </button>\r\n                <button\r\n                  onClick={() => setShowAddMetric(false)}\r\n                  className=\"flex-1 bg-gray-700 text-white py-2 rounded-lg hover:bg-gray-600 transition-colors\"\r\n                >\r\n                  Cancel\r\n                </button>\r\n              </div>\r\n            </motion.div>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TherapeuticProgressTracker;","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\wellness\\WellnessDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedTimeRange' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":167,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":167,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedTimeRange' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":167,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":167,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'factors' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":376,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":376,"endColumn":14},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":556,"column":61,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[17659,17681],"text":"Today&apos;s Wellness Score"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[17659,17681],"text":"Today&lsquo;s Wellness Score"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[17659,17681],"text":"Today&#39;s Wellness Score"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[17659,17681],"text":"Today&rsquo;s Wellness Score"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":926,"column":45,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[34150,34251],"text":"\n                      Start by logging today&apos;s mood and completing daily habits\n                    "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[34150,34251],"text":"\n                      Start by logging today&lsquo;s mood and completing daily habits\n                    "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[34150,34251],"text":"\n                      Start by logging today&#39;s mood and completing daily habits\n                    "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[34150,34251],"text":"\n                      Start by logging today&rsquo;s mood and completing daily habits\n                    "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":959,"column":19,"nodeType":"JSXOpeningElement","endLine":959,"endColumn":102},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":975,"column":19,"nodeType":"JSXOpeningElement","endLine":975,"endColumn":102},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":989,"column":21,"nodeType":"JSXOpeningElement","endLine":989,"endColumn":104},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":1002,"column":21,"nodeType":"JSXOpeningElement","endLine":1002,"endColumn":104},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":1016,"column":19,"nodeType":"JSXOpeningElement","endLine":1016,"endColumn":102}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Activity,\n  Brain,\n  Heart,\n  Moon,\n  Sun,\n  TrendingUp,\n  Calendar,\n  Award,\n  Target,\n  _BarChart3,\n  _LineChart,\n  _PieChart,\n  _Clock,\n  Zap,\n  Droplets,\n  Coffee,\n  Apple,\n  _ChevronRight,\n  Plus,\n  _Filter,\n  Download,\n  _Share2,\n  Settings,\n  _Bell,\n  CheckCircle,\n  Circle,\n  AlertCircle,\n  TrendingDown\n} from 'lucide-react';\nimport { format as formatDate, startOfWeek, endOfWeek, eachDayOfInterval, isToday, _subDays } from 'date-fns';\nimport { useWellnessStore } from '../../stores/wellnessStore';\nimport { secureStorage } from '../../services/security/SecureLocalStorage';\n\n// Wellness metrics categories\nconst WELLNESS_CATEGORIES = {\n  physical: {\n    name: 'Physical Health',\n    icon: Activity,\n    color: 'from-green-400 to-emerald-500',\n    metrics: ['exercise', 'sleep', 'nutrition', 'hydration']\n  },\n  mental: {\n    name: 'Mental Wellness',\n    icon: Brain,\n    color: 'from-blue-400 to-indigo-500',\n    metrics: ['mood', 'stress', 'focus', 'meditation']\n  },\n  emotional: {\n    name: 'Emotional Balance',\n    icon: Heart,\n    color: 'from-pink-400 to-red-500',\n    metrics: ['gratitude', 'social', 'self-care', 'journaling']\n  },\n  habits: {\n    name: 'Healthy Habits',\n    icon: Target,\n    color: 'from-purple-400 to-violet-500',\n    metrics: ['water', 'exercise', 'meditation', 'sleep', 'reading']\n  }\n};\n\n// Daily habits to track\nconst DAILY_HABITS = [\n  { id: 'water', name: 'Drink 8 glasses of water', icon: Droplets, category: 'physical' },\n  { id: 'exercise', name: '30 minutes exercise', icon: Activity, category: 'physical' },\n  { id: 'meditation', name: '10 minutes meditation', icon: Brain, category: 'mental' },\n  { id: 'journal', name: 'Write in journal', icon: Sun, category: 'emotional' },\n  { id: 'gratitude', name: 'Practice gratitude', icon: Heart, category: 'emotional' },\n  { id: 'sleep', name: '8 hours sleep', icon: Moon, category: 'physical' },\n  { id: 'healthy_meal', name: 'Eat healthy meals', icon: Apple, category: 'physical' },\n  { id: 'no_caffeine', name: 'Limit caffeine', icon: Coffee, category: 'physical' },\n  { id: 'social', name: 'Connect with others', icon: Heart, category: 'emotional' },\n  { id: 'nature', name: 'Spend time in nature', icon: Sun, category: 'mental' }\n];\n\n// Exercise types\nconst EXERCISE_TYPES = {\n  cardio: { name: 'Cardio', icon: Activity, calories: 10 },\n  strength: { name: 'Strength Training', icon: Zap, calories: 8 },\n  yoga: { name: 'Yoga', icon: Sun, calories: 4 },\n  walking: { name: 'Walking', icon: Activity, calories: 5 },\n  running: { name: 'Running', icon: Activity, calories: 12 },\n  cycling: { name: 'Cycling', icon: Activity, calories: 8 },\n  swimming: { name: 'Swimming', icon: Droplets, calories: 11 }\n};\n\n// Sleep quality levels\nconst SLEEP_QUALITY = {\n  poor: { name: 'Poor', color: 'text-red-500', value: 1 },\n  fair: { name: 'Fair', color: 'text-orange-500', value: 2 },\n  good: { name: 'Good', color: 'text-yellow-500', value: 3 },\n  great: { name: 'Great', color: 'text-green-500', value: 4 },\n  excellent: { name: 'Excellent', color: 'text-blue-500', value: 5 }\n};\n\ninterface WellnessData {\n  date: Date;\n  mood?: number;\n  stress?: number;\n  energy?: number;\n  sleep?: {\n    hours: number;\n    quality: keyof typeof SLEEP_QUALITY;\n  };\n  exercise?: {\n    type: keyof typeof EXERCISE_TYPES;\n    duration: number;\n    calories?: number;\n  }[];\n  water?: number;\n  meals?: {\n    type: 'breakfast' | 'lunch' | 'dinner' | 'snack';\n    healthy: boolean;\n    description?: string;\n  }[];\n  habits?: string[];\n  notes?: string;\n}\n\ninterface HabitStreak {\n  habitId: string;\n  current: number;\n  longest: number;\n  lastCompleted: string | null;\n}\n\ninterface WellnessGoal {\n  id: string;\n  category: keyof typeof WELLNESS_CATEGORIES;\n  title: string;\n  description?: string;\n  target: number;\n  current: number;\n  unit: string;\n  frequency?: 'daily' | 'weekly' | 'monthly';\n  deadline?: Date;\n}\n\nexport const WellnessDashboard: React.FC = () => {\n  // Use Zustand store for state management\n  const {\n    moodEntries,\n    wellnessMetrics,\n    wellnessGoals,\n    wellnessInsights,\n    weeklyScore,\n    _monthlyScore,\n    addWellnessGoal,\n    _updateGoalProgress,\n    calculateWellnessScores,\n    generateInsights,\n    exportData\n  } = useWellnessStore();\n\n  const [wellnessData, setWellnessData] = useState<WellnessData[]>([]);\n  const [todayData, setTodayData] = useState<WellnessData>({\n    date: new Date(),\n    habits: []\n  });\n  const [selectedCategory, setSelectedCategory] = useState<keyof typeof WELLNESS_CATEGORIES | 'all'>('all');\n  const [habitStreaks, setHabitStreaks] = useState<HabitStreak[]>([]);\n  const [showAddGoal, setShowAddGoal] = useState(false);\n  const [newGoal, setNewGoal] = useState<Partial<WellnessGoal & { description?: string; frequency?: 'daily' | 'weekly' | 'monthly' }>>({});\n  const [selectedTimeRange, setSelectedTimeRange] = useState<'week' | 'month' | 'year'>('week');\n  const [showExportOptions, setShowExportOptions] = useState(false);\n\n  // Load saved data and calculate scores on mount\n  useEffect(() => {\n    calculateWellnessScores();\n    generateInsights();\n    \n    // Load legacy localStorage data if exists\n    const _savedData = secureStorage.getItem('wellnessData');\n    const _savedStreaks = secureStorage.getItem('habitStreaks');\n    const _savedToday = secureStorage.getItem('wellnessTodayData');\n    \n    if (_savedData) {\n      setWellnessData(JSON.parse(_savedData).map((d: unknown) => ({\n        ...d,\n        date: new Date(d.date)\n      })));\n    }\n    \n    if (_savedStreaks) {\n      setHabitStreaks(JSON.parse(_savedStreaks));\n    }\n    \n    if (_savedToday) {\n      const today = JSON.parse(_savedToday);\n      if (new Date(today.date).toDateString() === new Date().toDateString()) {\n        setTodayData({\n          ...today,\n          date: new Date(today.date)\n        });\n      }\n    }\n  }, [calculateWellnessScores, generateInsights]);\n\n  // Save today's data\n  useEffect(() => {\n    secureStorage.setItem('wellnessTodayData', JSON.stringify(todayData));\n  }, [todayData]);\n\n  // Toggle habit completion\n  const toggleHabit = (habitId: string) => {\n    const updatedHabits = todayData.habits || [];\n    const habitIndex = updatedHabits.indexOf(habitId);\n    \n    if (habitIndex > -1) {\n      updatedHabits.splice(habitIndex, 1);\n    } else {\n      updatedHabits.push(habitId);\n      updateHabitStreak(habitId);\n    }\n    \n    setTodayData({\n      ...todayData,\n      habits: updatedHabits\n    });\n  };\n\n  // Update habit streak\n  const updateHabitStreak = (habitId: string) => {\n    const today = new Date().toDateString();\n    const existingStreak = habitStreaks.find(s => s.habitId === habitId);\n    \n    if (_existingStreak) {\n      const yesterday = new Date(Date._now() - 86400000).toDateString();\n      const newStreak = { ...existingStreak };\n      \n      if (existingStreak.lastCompleted === today) {\n        // Already completed today\n        return;\n      } else if (existingStreak.lastCompleted === yesterday) {\n        // Continuing streak\n        newStreak.current += 1;\n        newStreak.longest = Math.max(newStreak.current, newStreak.longest);\n      } else {\n        // Starting new streak\n        newStreak.current = 1;\n      }\n      \n      newStreak.lastCompleted = today;\n      \n      const _updatedStreaks = habitStreaks.map(s => \n        s.habitId === habitId ? newStreak : s\n      );\n      setHabitStreaks(_updatedStreaks);\n      secureStorage.setItem('habitStreaks', JSON.stringify(_updatedStreaks));\n    } else {\n      // New streak\n      const newStreak: HabitStreak = {\n        habitId,\n        current: 1,\n        longest: 1,\n        lastCompleted: today\n      };\n      const _updatedStreaks = [...habitStreaks, newStreak];\n      setHabitStreaks(_updatedStreaks);\n      secureStorage.setItem('habitStreaks', JSON.stringify(_updatedStreaks));\n    }\n  };\n\n  // Add sleep data\n  const _addSleepData = (hours: number, quality: keyof typeof SLEEP_QUALITY) => {\n    setTodayData({\n      ...todayData,\n      sleep: { hours, quality }\n    });\n  };\n\n  // Add exercise data\n  const _addExercise = (type: keyof typeof EXERCISE_TYPES, duration: number) => {\n    const calories = EXERCISE_TYPES[type].calories * duration;\n    const exercises = todayData.exercise || [];\n    exercises.push({ type, duration, calories });\n    \n    setTodayData({\n      ...todayData,\n      exercise: exercises\n    });\n  };\n\n  // Add water intake\n  const addWater = () => {\n    setTodayData({\n      ...todayData,\n      water: (todayData.water || 0) + 1\n    });\n  };\n\n  // Save day's data\n  const _saveDayData = () => {\n    const _updatedData = [...wellnessData, todayData];\n    setWellnessData(_updatedData);\n    secureStorage.setItem('wellnessData', JSON.stringify(_updatedData));\n    \n    // Reset today's data\n    setTodayData({\n      date: new Date(),\n      habits: []\n    });\n    secureStorage.removeItem('wellnessTodayData');\n  };\n\n  // Add new goal using store\n  const addGoal = () => {\n    if (!newGoal.title || !newGoal.target || !newGoal.category) return;\n    \n    // Use the store's addWellnessGoal method\n    addWellnessGoal({\n      category: newGoal.category as 'physical' | 'mental' | 'emotional' | 'social' | 'spiritual',\n      title: newGoal.title,\n      description: newGoal.description || '',\n      targetValue: newGoal.target,\n      currentValue: 0,\n      unit: newGoal.unit || '',\n      frequency: newGoal.frequency || 'daily',\n      startDate: new Date(),\n      endDate: newGoal.deadline,\n      milestones: [],\n      reminders: [],\n      insights: []\n    });\n    \n    setNewGoal({});\n    setShowAddGoal(false);\n    generateInsights(); // Regenerate insights after adding goal\n  };\n\n  // Calculate wellness score using real data from store\n  const calculateWellnessScore = () => {\n    // If we have a weekly score from the store, use it\n    if (weeklyScore > 0) {\n      return weeklyScore;\n    }\n    \n    // Otherwise calculate based on current day data\n    let score = 0;\n    let factors = 0;\n    \n    // Habits score (30%)\n    const completedHabits = (todayData.habits?.length || 0) / DAILY_HABITS.length;\n    score += completedHabits * 30;\n    factors++;\n    \n    // Mood score from recent entries (30%)\n    const recentMoodEntries = moodEntries.filter(entry => {\n      const entryDate = new Date(entry.timestamp);\n      const today = new Date();\n      return entryDate.toDateString() === today.toDateString();\n    });\n    \n    if (recentMoodEntries.length > 0) {\n      const avgMood = recentMoodEntries.reduce((sum, e) => sum + e.moodScore, 0) / recentMoodEntries.length;\n      score += (avgMood / 10) * 30;\n      factors++;\n    }\n    \n    // Sleep score (20%)\n    if (todayData.sleep) {\n      const sleepScore = (todayData.sleep.hours / 8) * 0.5 + \n                        (SLEEP_QUALITY[todayData.sleep.quality].value / 5) * 0.5;\n      score += sleepScore * 20;\n      factors++;\n    }\n    \n    // Exercise score (10%)\n    if (todayData.exercise) {\n      const exerciseMinutes = todayData.exercise.reduce((sum, e) => sum + e.duration, 0);\n      const exerciseScore = Math.min(exerciseMinutes / 30, 1);\n      score += exerciseScore * 10;\n      factors++;\n    }\n    \n    // Hydration score (10%)\n    const waterScore = Math.min((todayData.water || 0) / 8, 1);\n    score += waterScore * 10;\n    \n    return Math.round(score);\n  };\n\n  // Get weekly stats\n  const getWeeklyStats = () => {\n    const _now = new Date();\n    const weekStart = startOfWeek(_now);\n    const weekEnd = endOfWeek(_now);\n    const days = eachDayOfInterval({ start: weekStart, end: weekEnd });\n    \n    return days.map(day => {\n      const dayData = wellnessData.find(d => \n        d.date.toDateString() === day.toDateString()\n      );\n      \n      return {\n        date: day,\n        isToday: isToday(_day),\n        habits: dayData?.habits?.length || 0,\n        exercise: dayData?.exercise?.reduce((sum, e) => sum + e.duration, 0) || 0,\n        water: dayData?.water || 0,\n        sleep: dayData?.sleep?.hours || 0\n      };\n    });\n  };\n\n  // Get achievement badges\n  const getAchievements = () => {\n    const achievements = [];\n    \n    // Check habit streaks\n    habitStreaks.forEach(streak => {\n      if (streak.current >= 7) {\n        achievements.push({\n          name: `${DAILY_HABITS.find(h => h.id === streak.habitId)?.name} - Week Streak`,\n          icon: Zap,\n          color: 'text-yellow-500'\n        });\n      }\n      if (streak.current >= 30) {\n        achievements.push({\n          name: `${DAILY_HABITS.find(h => h.id === streak.habitId)?.name} - Month Streak`,\n          icon: Award,\n          color: 'text-purple-500'\n        });\n      }\n    });\n    \n    // Check total days tracked\n    if (wellnessData.length >= 7) {\n      achievements.push({\n        name: 'Week of Wellness',\n        icon: Calendar,\n        color: 'text-green-500'\n      });\n    }\n    \n    if (wellnessData.length >= 30) {\n      achievements.push({\n        name: 'Wellness Warrior',\n        icon: Award,\n        color: 'text-blue-500'\n      });\n    }\n    \n    return achievements;\n  };\n\n  // Export data using store's export function\n  const handleExportData = (format: 'json' | 'csv') => {\n    if (format === 'json') {\n      // Use the store's export function\n      const _dataStr = exportData();\n      const dataUri = `data:application/json;charset=utf-8,${ encodeURIComponent(_dataStr)}`;\n      const exportFileDefaultName = `wellness-data-${formatDate(new Date(), 'yyyy-MM-dd')}.json`;\n      \n      const linkElement = document.createElement('a');\n      linkElement.setAttribute('href', dataUri);\n      linkElement.setAttribute('download', exportFileDefaultName);\n      linkElement.click();\n    } else if (format === 'csv') {\n      // Create CSV content from store data\n      let csvContent = 'Date,Mood Score,Stress Level,Sleep Hours,Exercise Minutes,Water Glasses,Wellness Score\\n';\n      \n      // Combine mood entries and wellness metrics for CSV\n      const today = new Date();\n      const last30Days = Array.from({ length: 30 }, (_, i) => {\n        const date = new Date(today);\n        date.setDate(date.getDate() - i);\n        return date;\n      });\n      \n      last30Days.forEach(date => {\n        const dayMoodEntries = moodEntries.filter(e => \n          new Date(e.timestamp).toDateString() === date.toDateString()\n        );\n        const dayMetrics = wellnessMetrics.find(m => \n          new Date(m.date).toDateString() === date.toDateString()\n        );\n        \n        const avgMood = dayMoodEntries.length > 0 \n          ? dayMoodEntries.reduce((sum, e) => sum + e.moodScore, 0) / dayMoodEntries.length \n          : 0;\n        const avgStress = dayMoodEntries.length > 0 \n          ? dayMoodEntries.reduce((sum, e) => sum + (e.stressLevel || 0), 0) / dayMoodEntries.length \n          : 0;\n        \n        csvContent += `${formatDate(date, 'yyyy-MM-dd')},${avgMood.toFixed(1)},${avgStress.toFixed(1)},${dayMetrics?.sleepHours || 0},${dayMetrics?.exerciseMinutes || 0},${dayMetrics?.waterIntake || 0},${calculateWellnessScore()}\\n`;\n      });\n      \n      const _blob = new Blob([csvContent], { type: 'text/csv' });\n      const url = URL.createObjectURL(_blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `wellness-data-${formatDate(new Date(), 'yyyy-MM-dd')}.csv`;\n      link.click();\n    }\n  };\n\n  return (\n    <div className=\"wellness-dashboard-container max-w-7xl mx-auto p-6\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n              Wellness Dashboard\n            </h2>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Track your holistic health journey\n            </p>\n          </div>\n          <div className=\"flex gap-2\">\n            <motion.button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={() => setShowExportOptions(!showExportOptions)}\n              className=\"p-2 bg-gray-100 dark:bg-gray-800 rounded-lg relative\"\n            >\n              <Download className=\"w-5 h-5\" />\n              \n              {showExportOptions && (\n                <div className=\"absolute right-0 top-12 bg-white dark:bg-gray-800 rounded-lg shadow-lg p-2 z-10\">\n                  <button\n                    onClick={() => handleExportData('json')}\n                    className=\"block w-full text-left px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded\"\n                  >\n                    Export as JSON\n                  </button>\n                  <button\n                    onClick={() => handleExportData('csv')}\n                    className=\"block w-full text-left px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded\"\n                  >\n                    Export as CSV\n                  </button>\n                </div>\n              )}\n            </motion.button>\n            <motion.button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              className=\"p-2 bg-gray-100 dark:bg-gray-800 rounded-lg\"\n            >\n              <Settings className=\"w-5 h-5\" />\n            </motion.button>\n          </div>\n        </div>\n      </div>\n\n      {/* Wellness Score Card */}\n      <div className=\"bg-gradient-to-r from-blue-500 to-purple-500 rounded-2xl p-6 mb-8 text-white\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"text-xl font-semibold mb-2\">Today's Wellness Score</h3>\n            <div className=\"flex items-baseline gap-2\">\n              <span className=\"text-5xl font-bold\">{calculateWellnessScore()}</span>\n              <span className=\"text-xl\">/100</span>\n            </div>\n            <p className=\"mt-2 text-white/80\">\n              {calculateWellnessScore() >= 80 ? 'Excellent! Keep it up!' :\n               calculateWellnessScore() >= 60 ? 'Good progress today!' :\n               calculateWellnessScore() >= 40 ? 'Room for improvement' :\n               'Start building healthy habits'}\n            </p>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-sm text-white/80 mb-1\">Streak Days</p>\n            <p className=\"text-3xl font-bold\">\n              {Math.max(...habitStreaks.map(s => s.current), 0)}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Category Filters */}\n      <div className=\"flex gap-2 mb-6 overflow-x-auto pb-2\">\n        <button\n          onClick={() => setSelectedCategory('all')}\n          className={`px-4 py-2 rounded-lg whitespace-nowrap ${\n            selectedCategory === 'all'\n              ? 'bg-blue-500 text-white'\n              : 'bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300'\n          }`}\n        >\n          All Categories\n        </button>\n        {Object.entries(_WELLNESS_CATEGORIES).map(([key, category]) => {\n          const Icon = category.icon;\n          return (\n            <button\n              key={key}\n              onClick={() => setSelectedCategory(key as keyof typeof WELLNESS_CATEGORIES)}\n              className={`px-4 py-2 rounded-lg flex items-center gap-2 whitespace-nowrap ${\n                selectedCategory === key\n                  ? `bg-gradient-to-r ${  category.color  } text-white`\n                  : 'bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300'\n              }`}\n            >\n              <Icon className=\"w-4 h-4\" />\n              {category.name}\n            </button>\n          );\n        })}\n      </div>\n\n      {/* Main Content Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Daily Habits Tracker */}\n        <div className=\"lg:col-span-2\">\n          <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 mb-6\">\n            <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n              Daily Habits\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n              {DAILY_HABITS\n                .filter(habit => selectedCategory === 'all' || habit.category === selectedCategory)\n                .map(habit => {\n                  const Icon = habit.icon;\n                  const isCompleted = todayData.habits?.includes(habit.id);\n                  const streak = habitStreaks.find(s => s.habitId === habit.id);\n                  \n                  return (\n                    <motion.div\n                      key={habit.id}\n                      whileHover={{ scale: 1.02 }}\n                      whileTap={{ scale: 0.98 }}\n                      onClick={() => toggleHabit(habit.id)}\n                      className={`p-3 rounded-lg cursor-pointer transition-all ${\n                        isCompleted\n                          ? 'bg-green-50 dark:bg-green-900/20 border-2 border-green-500'\n                          : 'bg-gray-50 dark:bg-gray-700 border-2 border-transparent hover:border-gray-300'\n                      }`}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-3\">\n                          {isCompleted ? (\n                            <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                          ) : (\n                            <Circle className=\"w-5 h-5 text-gray-400\" />\n                          )}\n                          <div className=\"flex items-center gap-2\">\n                            <Icon className=\"w-4 h-4 text-gray-600 dark:text-gray-400\" />\n                            <span className={`font-medium ${\n                              isCompleted\n                                ? 'text-green-700 dark:text-green-300'\n                                : 'text-gray-700 dark:text-gray-300'\n                            }`}>\n                              {habit.name}\n                            </span>\n                          </div>\n                        </div>\n                        {streak && streak.current > 0 && (\n                          <div className=\"flex items-center gap-1\">\n                            <Zap className=\"w-3 h-3 text-orange-500\" />\n                            <span className=\"text-xs font-medium text-orange-500\">\n                              {streak.current}\n                            </span>\n                          </div>\n                        )}\n                      </div>\n                    </motion.div>\n                  );\n                })}\n            </div>\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n            {/* Sleep Tracker */}\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl p-4\">\n              <h4 className=\"font-medium text-gray-900 dark:text-white mb-3 flex items-center gap-2\">\n                <Moon className=\"w-4 h-4\" />\n                Sleep Tracker\n              </h4>\n              <div className=\"space-y-2\">\n                <input\n                  type=\"number\"\n                  placeholder=\"Hours\"\n                  min=\"0\"\n                  max=\"24\"\n                  step=\"0.5\"\n                  value={todayData.sleep?.hours || ''}\n                  onChange={(e) => setTodayData({\n                    ...todayData,\n                    sleep: {\n                      hours: parseFloat(e.target.value),\n                      quality: todayData.sleep?.quality || 'good'\n                    }\n                  })}\n                  className=\"w-full px-3 py-2 bg-gray-50 dark:bg-gray-700 rounded-lg\"\n                />\n                <select\n                  value={todayData.sleep?.quality || 'good'}\n                  onChange={(e) => setTodayData({\n                    ...todayData,\n                    sleep: {\n                      hours: todayData.sleep?.hours || 0,\n                      quality: e.target.value as keyof typeof SLEEP_QUALITY\n                    }\n                  })}\n                  className=\"w-full px-3 py-2 bg-gray-50 dark:bg-gray-700 rounded-lg\"\n                >\n                  {Object.entries(_SLEEP_QUALITY).map(([key, quality]) => (\n                    <option key={key} value={key}>{quality.name}</option>\n                  ))}\n                </select>\n              </div>\n            </div>\n\n            {/* Water Intake */}\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl p-4\">\n              <h4 className=\"font-medium text-gray-900 dark:text-white mb-3 flex items-center gap-2\">\n                <Droplets className=\"w-4 h-4\" />\n                Water Intake\n              </h4>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                    {todayData.water || 0}\n                  </p>\n                  <p className=\"text-sm text-gray-500\">glasses</p>\n                </div>\n                <motion.button\n                  whileHover={{ scale: 1.1 }}\n                  whileTap={{ scale: 0.9 }}\n                  onClick={addWater}\n                  className=\"p-3 bg-blue-500 text-white rounded-lg\"\n                >\n                  <Plus className=\"w-5 h-5\" />\n                </motion.button>\n              </div>\n            </div>\n\n            {/* Exercise Log */}\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl p-4\">\n              <h4 className=\"font-medium text-gray-900 dark:text-white mb-3 flex items-center gap-2\">\n                <Activity className=\"w-4 h-4\" />\n                Exercise\n              </h4>\n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                  {todayData.exercise?.reduce((sum, e) => sum + e.duration, 0) || 0}\n                </p>\n                <p className=\"text-sm text-gray-500\">minutes today</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Weekly Overview */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6\">\n            <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n              Weekly Overview\n            </h3>\n            <div className=\"grid grid-cols-7 gap-2\">\n              {getWeeklyStats().map((day, idx) => (\n                <div\n                  key={idx}\n                  className={`text-center p-3 rounded-lg ${\n                    day.isToday\n                      ? 'bg-blue-50 dark:bg-blue-900/20 ring-2 ring-blue-500'\n                      : 'bg-gray-50 dark:bg-gray-700'\n                  }`}\n                >\n                  <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400 mb-1\">\n                    {formatDate(day.date, 'EEE')}\n                  </p>\n                  <div className=\"space-y-1\">\n                    <div className=\"flex justify-center\">\n                      {Array.from({ length: 5 }).map((_, i) => (\n                        <div\n                          key={i}\n                          className={`w-1 h-3 mx-0.5 rounded-full ${\n                            i < day.habits / 2\n                              ? 'bg-green-500'\n                              : 'bg-gray-300 dark:bg-gray-600'\n                          }`}\n                        />\n                      ))}\n                    </div>\n                    <p className=\"text-xs text-gray-500\">\n                      {day.exercise}m\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          {/* Goals */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                Goals\n              </h3>\n              <motion.button\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                onClick={() => setShowAddGoal(true)}\n                className=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded\"\n              >\n                <Plus className=\"w-5 h-5\" />\n              </motion.button>\n            </div>\n            \n            <div className=\"space-y-3\">\n              {wellnessGoals.filter(g => g.status === 'active').slice(0, 5).map(goal => {\n                const progress = goal.progress || 0;\n                const categoryMap: Record<string, keyof typeof WELLNESS_CATEGORIES> = {\n                  physical: 'physical',\n                  mental: 'mental',\n                  emotional: 'emotional',\n                  social: 'habits',\n                  spiritual: 'habits'\n                };\n                const category = categoryMap[goal.category] || 'habits';\n                const Icon = WELLNESS_CATEGORIES[category].icon;\n                \n                return (\n                  <div key={goal.id} className=\"p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                    <div className=\"flex items-start gap-2 mb-2\">\n                      <Icon className=\"w-4 h-4 text-gray-600 dark:text-gray-400 mt-0.5\" />\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium text-gray-900 dark:text-white text-sm\">\n                          {goal.title}\n                        </p>\n                        <p className=\"text-xs text-gray-500\">\n                          {goal.currentValue} / {goal.targetValue} {goal.unit}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2\">\n                      <div\n                        className=\"bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full transition-all\"\n                        style={{ width: `${Math.min(progress, 100)}%` }}\n                      />\n                    </div>\n                    {goal.endDate && (\n                      <p className=\"text-xs text-gray-500 mt-1\">\n                        Due: {formatDate(new Date(goal.endDate), 'MMM d')}\n                      </p>\n                    )}\n                  </div>\n                );\n              })}\n              \n              {wellnessGoals.filter(g => g.status === 'active').length === 0 && (\n                <p className=\"text-gray-500 dark:text-gray-400 text-center py-4\">\n                  No active goals. Set your first wellness goal!\n                </p>\n              )}\n            </div>\n          </div>\n\n          {/* Achievements */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n              Achievements\n            </h3>\n            <div className=\"grid grid-cols-2 gap-3\">\n              {getAchievements().slice(0, 4).map((achievement, idx) => (\n                <div\n                  key={idx}\n                  className=\"text-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\"\n                >\n                  <Award className={`w-8 h-8 mx-auto mb-1 ${achievement.color}`} />\n                  <p className=\"text-xs font-medium text-gray-700 dark:text-gray-300\">\n                    {achievement.name}\n                  </p>\n                </div>\n              ))}\n            </div>\n            {getAchievements().length === 0 && (\n              <p className=\"text-gray-500 dark:text-gray-400 text-center py-4\">\n                Keep tracking to earn achievements!\n              </p>\n            )}\n          </div>\n\n          {/* AI-Powered Insights */}\n          <div className=\"bg-gradient-to-br from-purple-50 to-pink-50 dark:from-gray-800 dark:to-gray-900 rounded-xl p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-3\">\n              AI Insights\n            </h3>\n            <div className=\"space-y-3\">\n              {wellnessInsights.slice(0, 3).map((insight) => {\n                const IconComponent = insight.type === 'trend' && insight.title.includes('Improvement') ? TrendingUp :\n                                     insight.type === 'trend' && insight.title.includes('Decline') ? TrendingDown :\n                                     insight.type === 'warning' ? AlertCircle :\n                                     insight.type === 'achievement' ? Award :\n                                     TrendingUp;\n                const iconColor = insight.priority === 'high' ? 'text-red-500' :\n                                 insight.priority === 'medium' ? 'text-yellow-500' :\n                                 'text-green-500';\n                \n                return (\n                  <div key={insight.id} className=\"flex items-start gap-2\">\n                    <IconComponent className={`w-4 h-4 ${iconColor} mt-0.5`} />\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                        {insight.title}\n                      </p>\n                      <p className=\"text-xs text-gray-600 dark:text-gray-400 mt-0.5\">\n                        {insight.description}\n                      </p>\n                    </div>\n                  </div>\n                );\n              })}\n              \n              {wellnessInsights.length === 0 && (\n                <div>\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <TrendingUp className=\"w-4 h-4 text-green-500\" />\n                    <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n                      Track your mood and habits to get personalized insights\n                    </p>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <AlertCircle className=\"w-4 h-4 text-yellow-500\" />\n                    <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n                      Start by logging today's mood and completing daily habits\n                    </p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Add Goal Modal */}\n      <AnimatePresence>\n        {showAddGoal && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\"\n            onClick={() => setShowAddGoal(false)}\n          >\n            <motion.div\n              initial={{ scale: 0.9, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0.9, opacity: 0 }}\n              onClick={(e) => e.stopPropagation()}\n              className=\"bg-white dark:bg-gray-800 rounded-xl p-6 max-w-md w-full\"\n            >\n              <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                Add New Goal\n              </h3>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                    Category\n                  </label>\n                  <select\n                    value={newGoal.category || ''}\n                    onChange={(e) => setNewGoal({ ...newGoal, category: e.target.value as keyof typeof WELLNESS_CATEGORIES })}\n                    className=\"w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 rounded-lg\"\n                  >\n                    <option value=\"\">Select category</option>\n                    {Object.entries(_WELLNESS_CATEGORIES).map(([key, cat]) => (\n                      <option key={key} value={key}>{cat.name}</option>\n                    ))}\n                  </select>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                    Goal Title\n                  </label>\n                  <input\n                    type=\"text\"\n                    placeholder=\"e.g., Meditate daily\"\n                    value={newGoal.title || ''}\n                    onChange={(e) => setNewGoal({ ...newGoal, title: e.target.value })}\n                    className=\"w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 rounded-lg\"\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                      Target\n                    </label>\n                    <input\n                      type=\"number\"\n                      placeholder=\"30\"\n                      value={newGoal.target || ''}\n                      onChange={(e) => setNewGoal({ ...newGoal, target: parseInt(e.target.value) })}\n                      className=\"w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 rounded-lg\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                      Unit\n                    </label>\n                    <input\n                      type=\"text\"\n                      placeholder=\"days\"\n                      value={newGoal.unit || ''}\n                      onChange={(e) => setNewGoal({ ...newGoal, unit: e.target.value })}\n                      className=\"w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 rounded-lg\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                    Deadline (_optional)\n                  </label>\n                  <input\n                    type=\"date\"\n                    value={newGoal.deadline ? formatDate(newGoal.deadline, 'yyyy-MM-dd') : ''}\n                    onChange={(e) => setNewGoal({ ...newGoal, deadline: e.target.value ? new Date(e.target.value) : undefined })}\n                    className=\"w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 rounded-lg\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"flex gap-3 mt-6\">\n                <button\n                  onClick={addGoal}\n                  className=\"flex-1 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600\"\n                >\n                  Add Goal\n                </button>\n                <button\n                  onClick={() => {\n                    setShowAddGoal(false);\n                    setNewGoal({});\n                  }}\n                  className=\"flex-1 px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600\"\n                >\n                  Cancel\n                </button>\n              </div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\components\\wellness\\WellnessToolsSuite.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\config\\security.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\config\\securityValidation.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":149,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":149,"endColumn":16}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Security Validation Service\n * Validates environment configuration for security compliance\n * Prevents insecure deployments\n */\n\nimport { logger } from '../utils/logger';\n\ninterface SecurityValidationResult {\n  isSecure: boolean;\n  criticalIssues: string[];\n  warnings: string[];\n  recommendations: string[];\n}\n\nexport class SecurityValidationService {\n  /**\n   * Validate client-side environment configuration\n   */\n  static validateClientEnvironment(): SecurityValidationResult {\n    const result: SecurityValidationResult = {\n      isSecure: true,\n      criticalIssues: [],\n      warnings: [],\n      recommendations: []\n    };\n\n    // CRITICAL: Check for exposed secrets in client-side environment\n    const exposedSecrets = [\n      'VITE_OPENAI_API_KEY',\n      'VITE_TWILIO_AUTH_TOKEN', \n      'VITE_ENCRYPTION_KEY',\n      'VITE_JWT_SECRET',\n      'VITE_DATABASE_URL',\n      'VITE_STRIPE_SECRET_KEY'\n    ];\n\n    exposedSecrets.forEach(secret => {\n      // @ts-expect-error - checking for dangerous environment variables\n      if (import.meta.env[secret]) {\n        // In production, only fail for truly critical secrets\n        if (import.meta.env.PROD && ['VITE_JWT_SECRET', 'VITE_DATABASE_URL', 'VITE_STRIPE_SECRET_KEY'].includes(secret)) {\n          result.isSecure = false;\n          result.criticalIssues.push(`🚨 CRITICAL: ${secret} is exposed client-side and accessible to attackers`);\n        } else {\n          result.warnings.push(`⚠️ WARNING: ${secret} is exposed client-side. Consider using server-side API.`);\n        }\n      }\n    });\n\n    // Check for production readiness\n    if (import.meta.env.PROD) {\n      // Production-specific validations\n      const apiUrl = import.meta.env.VITE_API_URL;\n      if (apiUrl && !apiUrl.startsWith('https://') && !apiUrl.includes('static-deployment')) {\n        result.warnings.push('⚠️ WARNING: API URL should use HTTPS in production');\n      }\n\n      const wsUrl = import.meta.env.VITE_WS_URL;\n      if (wsUrl && !wsUrl.startsWith('wss://')) {\n        result.warnings.push('⚠️ WARNING: WebSocket URL should use WSS (_secure) in production');\n      }\n\n      if (apiUrl?.includes('localhost')) {\n        result.criticalIssues.push('🚨 CRITICAL: Production build pointing to localhost API');\n        result.isSecure = false;\n      }\n    }\n\n    // Check for development-specific security issues\n    if (import.meta.env.DEV) {\n      result.warnings.push('⚠️ DEV MODE: Enhanced security validation disabled');\n      \n      if (import.meta.env.VITE_API_URL?.includes('http://')) {\n        result.recommendations.push('💡 RECOMMENDATION: Use HTTPS even in development for testing');\n      }\n    }\n\n    // Validate critical environment variables (only fail on truly essential ones)\n    const criticalVars = [\n      'VITE_CRISIS_HOTLINE' // Critical for mental health platform\n    ];\n\n    const recommendedVars = [\n      'VITE_APP_NAME',\n      'VITE_API_URL'\n    ];\n\n    criticalVars.forEach(varName => {\n      // @ts-expect-error - checking for critical environment variables\n      if (!import.meta.env[varName]) {\n        result.warnings.push(`⚠️ WARNING: Missing critical environment variable: ${varName}`);\n      }\n    });\n\n    recommendedVars.forEach(varName => {\n      // @ts-expect-error - checking for recommended environment variables\n      if (!import.meta.env[varName]) {\n        result.recommendations.push(`💡 RECOMMENDATION: Set environment variable: ${varName}`);\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Validate and log security status on application startup\n   */\n  static validateAndLog(): boolean {\n    const validation = this.validateClientEnvironment();\n    \n    // Only log security issues in development or when critical errors exist\n    if (import.meta.env.DEV || !validation.isSecure) {\n      logger.info('SECURITY VALIDATION REPORT', 'SecurityValidation');\n      logger.info('============================', 'SecurityValidation');\n      \n      if (validation.isSecure) {\n        logger.info('CLIENT SECURITY: PASSED', 'SecurityValidation');\n      } else {\n        logger.error('❌ CLIENT SECURITY: FAILED');\n        logger.error('🚨 CRITICAL SECURITY ISSUES DETECTED:');\n        validation.criticalIssues.forEach(_issue => logger.error(_issue));\n      }\n\n      if (validation.warnings.length > 0) {\n        logger.warn('⚠️  SECURITY WARNINGS:');\n        validation.warnings.forEach(_warning => logger.warn(_warning));\n      }\n\n      if (validation.recommendations.length > 0 && import.meta.env.DEV) {\n        logger.info('SECURITY RECOMMENDATIONS:', 'SecurityValidation');\n        validation.recommendations.forEach(rec => logger.info(rec, 'SecurityValidation'));\n      }\n    }\n\n    // In production, fail hard on security issues\n    if (!validation.isSecure && import.meta.env.PROD) {\n      logger.error('🚫 PRODUCTION DEPLOYMENT BLOCKED DUE TO SECURITY ISSUES');\n      throw new Error('Security validation failed - deployment blocked');\n    }\n\n    return validation.isSecure;\n  }\n}\n\n// Auto-validate on module load\ntry {\n  SecurityValidationService.validateAndLog();\n} catch (_error) {\n  logger.error('Security validation failed:');\n  if (import.meta.env.PROD) {\n    // Prevent insecure production deployments\n    document.body.innerHTML = `\n      <div style=\"padding: 2rem; background: #dc2626; color: white; font-family: monospace;\">\n        <h1>🚫 Security Validation Failed</h1>\n        <p>This application cannot start due to critical security configuration issues.</p>\n        <p>Please contact your system administrator.</p>\n      </div>\n    `;\n  }\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\constants\\crisis.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\contexts\\AnonymousAuthContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":131,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":131,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":164,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":164,"endColumn":20},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'cleanupStaleData' and 'validateDataIntegrity'. Either include them or remove the dependency array.","line":342,"column":6,"nodeType":"ArrayExpression","endLine":342,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [cleanupStaleData, validateDataIntegrity]","fix":{"range":[10771,10773],"text":"[cleanupStaleData, validateDataIntegrity]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":423,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":423,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":459,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":459,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":496,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":496,"endColumn":20},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":568,"column":58,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[17828,17855],"text":"You&apos;re Completely Anonymous"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[17828,17855],"text":"You&lsquo;re Completely Anonymous"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[17828,17855],"text":"You&#39;re Completely Anonymous"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[17828,17855],"text":"You&rsquo;re Completely Anonymous"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '../utils/logger';\n/**\r\n * Anonymous-Only Authentication Context\r\n * \r\n * Provides anonymous access without any registration or data collection\r\n * All user data is stored locally and never transmitted\r\n * Complete privacy and anonymity guaranteed\r\n * SECURITY: Updated to use secure storage and backend integration\r\n */\r\n\r\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { secureStorage } from '../services/security/SecureLocalStorage';\r\nimport { _ApiService } from '../services/api/ApiService';\r\n\r\ninterface AnonymousUser {\r\n  id: string; // Random session ID _stored locally only\r\n  nickname?: string; // Optional friendly name (_stored locally)\r\n  name?: string; // Optional display name for dashboard components\r\n  email?: string; // Optional email for display purposes only (never transmitted)\r\n  token?: string; // Optional session token for authenticated features\r\n  profile: {\r\n    pronouns?: string;\r\n    ageRange?: '13-17' | '18-24' | '25-34' | '35-44' | '45-54' | '55-64' | '65+';\r\n    preferredLanguage?: string;\r\n    timezone?: string;\r\n    emergencyContact?: {\r\n      name: string;\r\n      phone: string;\r\n      relationship: string;\r\n    };\r\n    mentalHealthGoals?: string[];\r\n    supportPreferences?: {\r\n      peerSupport: boolean;\r\n      professionalSupport: boolean;\r\n      groupActivities: boolean;\r\n      onlineTherapy: boolean;\r\n    };\r\n    triggerWarnings?: string[];\r\n    copingStrategies?: string[];\r\n    medication?: {\r\n      taking: boolean;\r\n      reminders: boolean;\r\n      names?: string[];\r\n    };\r\n    therapyExperience?: 'none' | 'some' | 'extensive';\r\n    crisisHistory?: boolean;\r\n  };\r\n  preferences: {\r\n    theme?: 'light' | 'dark' | 'auto';\r\n    fontSize?: 'small' | 'medium' | 'large';\r\n    reducedMotion?: boolean;\r\n    highContrast?: boolean;\r\n    colorBlind?: boolean;\r\n    screenReader?: boolean;\r\n    language?: string;\r\n    notifications?: {\r\n      enabled: boolean;\r\n      types: {\r\n        moodReminders: boolean;\r\n        medicationReminders: boolean;\r\n        appointmentReminders: boolean;\r\n        crisisAlerts: boolean;\r\n        communityUpdates: boolean;\r\n        achievementAlerts: boolean;\r\n      };\r\n      schedule: {\r\n        quietHours: { start: string; end: string };\r\n        weekendDifferent: boolean;\r\n      };\r\n    };\r\n    privacy?: {\r\n      shareProgress: boolean;\r\n      allowCommunityInteraction: boolean;\r\n      dataRetentionDays: number;\r\n      exportDataOnExit: boolean;\r\n    };\r\n  };\r\n  sessionStarted: Date;\r\n  isAnonymous: true; // Always true\r\n  lastActive: Date;\r\n  dataVersion: string;\r\n  sessionStats: {\r\n    moodEntriesCount: number;\r\n    wellnessActivitiesCompleted: number;\r\n    communityInteractions: number;\r\n    therapeuticContentAccessed: number;\r\n    crisisResourcesUsed: number;\r\n  };\r\n}\r\n\r\ninterface AnonymousAuthContextType {\r\n  // User state\r\n  user: AnonymousUser;\r\n  isAuthenticated: true; // Always authenticated as anonymous\r\n  isAnonymous: true; // Always anonymous\r\n  \r\n  // Profile management (no server calls)\r\n  updateNickname: (nickname: string) => void;\r\n  updateProfile: (profile: Partial<AnonymousUser['profile']>) => void;\r\n  updatePreferences: (preferences: Partial<AnonymousUser['preferences']>) => void;\r\n  updateSessionStats: (stats: Partial<AnonymousUser['sessionStats']>) => void;\r\n  \r\n  // Data management\r\n  exportUserData: () => Promise<string>;\r\n  importUserData: (_data: string) => Promise<boolean>;\r\n  clearLocalData: () => void;\r\n  logout: () => void; // Alias for clearLocalData for compatibility\r\n  \r\n  // Session info\r\n  sessionDuration: number; // Minutes since session started\r\n  extendSession: () => void;\r\n  updateLastActive: () => void;\r\n  \r\n  // Security & Privacy\r\n  isDataStale: () => boolean;\r\n  cleanupStaleData: () => void;\r\n  validateDataIntegrity: () => boolean;\r\n  \r\n  // Analytics (_anonymous)\r\n  getSessionInsights: () => {\r\n    totalSessions: number;\r\n    averageSessionDuration: number;\r\n    mostUsedFeatures: string[];\r\n    wellnessProgress: number;\r\n    lastWeekActivity: number[];\r\n  };\r\n}\r\n\r\nconst AnonymousAuthContext = createContext<AnonymousAuthContextType | undefined>(_undefined);\r\n\r\nexport function useAnonymousAuth() {\r\n  const context = useContext(_AnonymousAuthContext);\r\n  if (!context) {\r\n    throw new Error('useAnonymousAuth must be used within AnonymousAuthProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\n\r\n// Generate a random session ID (never sent to server)\r\nfunction generateSessionId(): string {\r\n  return `anon_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n}\r\n\r\n// Get or create anonymous user from secure storage with data migration\r\nfunction getOrCreateAnonymousUser(): AnonymousUser {\r\n  const _stored = secureStorage.getItem('anonymous_user');\r\n  \r\n  if (_stored) {\r\n    try {\r\n      const user = JSON.parse(_stored);\r\n      \r\n      // Restore date objects\r\n      user.sessionStarted = new Date(user.sessionStarted);\r\n      user.lastActive = user.lastActive ? new Date(user.lastActive) : new Date();\r\n      \r\n      // Migrate old _data structure if needed\r\n      if (!user.dataVersion || user.dataVersion < '2.0') {\r\n        logger.info('🔄 Migrating user _data to new structure...');\r\n        return migrateUserData(user);\r\n      }\r\n      \r\n      return user;\r\n    } catch (_error) {\r\n      logger.error('Failed to parse _stored user _data:');\r\n      // Create new user if _data is corrupted\r\n    }\r\n  }\r\n  \r\n  // Create new anonymous user with complete structure\r\n  const newUser: AnonymousUser = {\r\n    id: generateSessionId(),\r\n    profile: {\r\n      supportPreferences: {\r\n        peerSupport: true,\r\n        professionalSupport: false,\r\n        groupActivities: true,\r\n        onlineTherapy: false,\r\n      },\r\n      mentalHealthGoals: [],\r\n      triggerWarnings: [],\r\n      copingStrategies: [],\r\n      medication: {\r\n        taking: false,\r\n        reminders: false,\r\n      },\r\n      therapyExperience: 'none',\r\n      crisisHistory: false,\r\n    },\r\n    preferences: {\r\n      theme: 'auto',\r\n      fontSize: 'medium',\r\n      reducedMotion: false,\r\n      highContrast: false,\r\n      colorBlind: false,\r\n      screenReader: false,\r\n      language: 'en',\r\n      notifications: {\r\n        enabled: true,\r\n        types: {\r\n          moodReminders: true,\r\n          medicationReminders: false,\r\n          appointmentReminders: true,\r\n          crisisAlerts: true,\r\n          communityUpdates: false,\r\n          achievementAlerts: true,\r\n        },\r\n        schedule: {\r\n          quietHours: { start: '22:00', end: '07:00' },\r\n          weekendDifferent: false,\r\n        },\r\n      },\r\n      privacy: {\r\n        shareProgress: false,\r\n        allowCommunityInteraction: true,\r\n        dataRetentionDays: 365,\r\n        exportDataOnExit: false,\r\n      },\r\n    },\r\n    sessionStarted: new Date(),\r\n    lastActive: new Date(),\r\n    isAnonymous: true,\r\n    dataVersion: '2.0',\r\n    sessionStats: {\r\n      moodEntriesCount: 0,\r\n      wellnessActivitiesCompleted: 0,\r\n      communityInteractions: 0,\r\n      therapeuticContentAccessed: 0,\r\n      crisisResourcesUsed: 0,\r\n    },\r\n  };\r\n  \r\n  secureStorage.setItem('anonymous_user', JSON.stringify(_newUser));\r\n  return newUser;\r\n}\r\n\r\n// Migrate user data from older versions\r\nfunction migrateUserData(oldUser: unknown): AnonymousUser {\r\n  const migratedUser: AnonymousUser = {\r\n    ...oldUser,\r\n    profile: {\r\n      ...oldUser.profile,\r\n      supportPreferences: oldUser.profile?.supportPreferences || {\r\n        peerSupport: true,\r\n        professionalSupport: false,\r\n        groupActivities: true,\r\n        onlineTherapy: false,\r\n      },\r\n      mentalHealthGoals: oldUser.profile?.mentalHealthGoals || [],\r\n      triggerWarnings: oldUser.profile?.triggerWarnings || [],\r\n      copingStrategies: oldUser.profile?.copingStrategies || [],\r\n      medication: oldUser.profile?.medication || {\r\n        taking: false,\r\n        reminders: false,\r\n      },\r\n      therapyExperience: oldUser.profile?.therapyExperience || 'none',\r\n      crisisHistory: oldUser.profile?.crisisHistory || false,\r\n    },\r\n    preferences: {\r\n      ...oldUser.preferences,\r\n      notifications: oldUser.preferences?.notifications || {\r\n        enabled: true,\r\n        types: {\r\n          moodReminders: true,\r\n          medicationReminders: false,\r\n          appointmentReminders: true,\r\n          crisisAlerts: true,\r\n          communityUpdates: false,\r\n          achievementAlerts: true,\r\n        },\r\n        schedule: {\r\n          quietHours: { start: '22:00', end: '07:00' },\r\n          weekendDifferent: false,\r\n        },\r\n      },\r\n      privacy: oldUser.preferences?.privacy || {\r\n        shareProgress: false,\r\n        allowCommunityInteraction: true,\r\n        dataRetentionDays: 365,\r\n        exportDataOnExit: false,\r\n      },\r\n    },\r\n    lastActive: oldUser.lastActive ? new Date(oldUser.lastActive) : new Date(),\r\n    dataVersion: '2.0',\r\n    sessionStats: oldUser.sessionStats || {\r\n      moodEntriesCount: 0,\r\n      wellnessActivitiesCompleted: 0,\r\n      communityInteractions: 0,\r\n      therapeuticContentAccessed: 0,\r\n      crisisResourcesUsed: 0,\r\n    },\r\n  };\r\n  \r\n  // Save migrated data\r\n  secureStorage.setItem('anonymous_user', JSON.stringify(_migratedUser));\r\n  logger.info('✅ User data migration completed');\r\n  \r\n  return migratedUser;\r\n}\r\n\r\nexport function AnonymousAuthProvider({ children }: { children: ReactNode }) {\r\n  const [user, setUser] = useState<AnonymousUser>(_getOrCreateAnonymousUser);\r\n  const [sessionDuration, setSessionDuration] = useState(0);\r\n  \r\n  // Update session duration every minute\r\n  useEffect(() => {\r\n    const updateDuration = () => {\r\n      const _minutes = Math.floor((Date.now() - user.sessionStarted.getTime()) / 60000);\r\n      setSessionDuration(_minutes);\r\n    };\r\n    \r\n    updateDuration();\r\n    const _interval = setInterval(updateDuration, 60000); // Update every minute\r\n    \r\n    return () => clearInterval(_interval);\r\n  }, [user.sessionStarted]);\r\n  \r\n  // Auto-update last active and cleanup stale data\r\n  useEffect(() => {\r\n    const handleActivity = () => updateLastActive();\r\n    \r\n    // Track user activity\r\n    const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'];\r\n    events.forEach(event => {\r\n      document.addEventListener(event, handleActivity, { passive: true });\r\n    });\r\n    \r\n    // Cleanup stale data on component mount\r\n    cleanupStaleData();\r\n    \r\n    // Validate data integrity\r\n    if (!validateDataIntegrity()) {\r\n      logger.warn('⚠️ Data integrity issues detected, creating fresh user _data');\r\n      setUser(getOrCreateAnonymousUser());\r\n    }\r\n    \r\n    return () => {\r\n      events.forEach(event => {\r\n        document.removeEventListener(event, handleActivity);\r\n      });\r\n    };\r\n  }, []);\r\n  \r\n  // Save user to secure storage whenever it changes\r\n  useEffect(() => {\r\n    secureStorage.setItem('anonymous_user', JSON.stringify(user));\r\n  }, [user]);\r\n  \r\n  const updateNickname = (nickname: string) => {\r\n    setUser(prev => ({ \r\n      ...prev, \r\n      nickname,\r\n      lastActive: new Date(),\r\n    }));\r\n  };\r\n  \r\n  const updateProfile = (profile: Partial<AnonymousUser['profile']>) => {\r\n    setUser(prev => ({\r\n      ...prev,\r\n      profile: { ...prev.profile, ...profile },\r\n      lastActive: new Date(),\r\n    }));\r\n  };\r\n  \r\n  const updatePreferences = (preferences: Partial<AnonymousUser['preferences']>) => {\r\n    setUser(prev => ({\r\n      ...prev,\r\n      preferences: { ...prev.preferences, ...preferences },\r\n      lastActive: new Date(),\r\n    }));\r\n  };\r\n  \r\n  const updateSessionStats = (stats: Partial<AnonymousUser['sessionStats']>) => {\r\n    setUser(prev => ({\r\n      ...prev,\r\n      sessionStats: { ...prev.sessionStats, ...stats },\r\n      lastActive: new Date(),\r\n    }));\r\n  };\r\n  \r\n  const updateLastActive = () => {\r\n    setUser(prev => ({\r\n      ...prev,\r\n      lastActive: new Date(),\r\n    }));\r\n  };\r\n  \r\n  const clearLocalData = () => {\r\n    secureStorage.removeItem('anonymous_user');\r\n    // Clear all other local _data (both secure and regular storage)\r\n    secureStorage.clear();\r\n    sessionStorage.clear();\r\n    // Create fresh anonymous user\r\n    setUser(getOrCreateAnonymousUser());\r\n  };\r\n  \r\n  const extendSession = () => {\r\n    // Update the session started time and last active\r\n    setUser(prev => ({ \r\n      ...prev, \r\n      sessionStarted: new Date(),\r\n      lastActive: new Date(),\r\n    }));\r\n  };\r\n  \r\n  // Export user data for backup or transfer\r\n  const exportUserData = async (): Promise<string> => {\r\n    try {\r\n      const exportData = {\r\n        user,\r\n        exportDate: new Date().toISOString(),\r\n        version: '2.0',\r\n        // Include wellness and activity _data from other stores\r\n        wellnessData: localStorage.getItem('wellness-storage'),\r\n        activityData: localStorage.getItem('activity-store'),\r\n        metadata: {\r\n          sessionDuration,\r\n          totalSessions: 1, // Could be enhanced to track multiple sessions\r\n        },\r\n      };\r\n      \r\n      return JSON.stringify(exportData, null, 2);\r\n    } catch (_error) {\r\n      logger.error('Failed to export user _data:');\r\n      throw new Error('Unable to export _data. Please try again.');\r\n    }\r\n  };\r\n  \r\n  // Import user data from backup\r\n  const importUserData = async (_data: string): Promise<boolean> => {\r\n    try {\r\n      const importedData = JSON.parse(_data);\r\n      \r\n      // Validate _data structure\r\n      if (!importedData.user || !importedData.version) {\r\n        throw new Error('Invalid _data format');\r\n      }\r\n      \r\n      // Restore user data\r\n      const _restoredUser = {\r\n        ...importedData.user,\r\n        sessionStarted: new Date(importedData.user.sessionStarted),\r\n        lastActive: new Date(importedData.user.lastActive || new Date()),\r\n        id: generateSessionId(), // Generate new session ID for security\r\n      };\r\n      \r\n      setUser(_restoredUser);\r\n      \r\n      // Restore related data if present\r\n      if (importedData.wellnessData) {\r\n        localStorage.setItem('wellness-storage', importedData.wellnessData);\r\n      }\r\n      if (importedData.activityData) {\r\n        localStorage.setItem('activity-store', importedData.activityData);\r\n      }\r\n      \r\n      logger.info('✅ Successfully imported user data');\r\n      return true;\r\n    } catch (_error) {\r\n      logger.error('Failed to import user _data:');\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Check if data is stale (older than retention period)\r\n  const isDataStale = (): boolean => {\r\n    const retentionDays = user.preferences.privacy?.dataRetentionDays || 365;\r\n    const staleDate = new Date();\r\n    staleDate.setDate(staleDate.getDate() - retentionDays);\r\n    \r\n    return new Date(user.lastActive) < staleDate;\r\n  };\r\n  \r\n  // Clean up stale data based on privacy preferences\r\n  const cleanupStaleData = () => {\r\n    if (isDataStale()) {\r\n      logger.info('🧹 Cleaning up stale _data based on privacy preferences');\r\n      clearLocalData();\r\n    }\r\n  };\r\n  \r\n  // Validate data integrity\r\n  const validateDataIntegrity = (): boolean => {\r\n    try {\r\n      // Check essential fields\r\n      if (!user.id || !user.sessionStarted || !user.dataVersion) {\r\n        return false;\r\n      }\r\n      \r\n      // Check data structure\r\n      if (!user.profile || !user.preferences || !user.sessionStats) {\r\n        return false;\r\n      }\r\n      \r\n      return true;\r\n    } catch (_error) {\r\n      logger.error('Data integrity validation failed:');\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Get session insights\r\n  const getSessionInsights = () => {\r\n    return {\r\n      totalSessions: 1, // Could be enhanced to track multiple sessions\r\n      averageSessionDuration: sessionDuration,\r\n      mostUsedFeatures: [\r\n        user.sessionStats.moodEntriesCount > 0 ? 'Mood Tracking' : '',\r\n        user.sessionStats.wellnessActivitiesCompleted > 0 ? 'Wellness Activities' : '',\r\n        user.sessionStats.communityInteractions > 0 ? 'Community' : '',\r\n        user.sessionStats.therapeuticContentAccessed > 0 ? 'Therapeutic Content' : '',\r\n      ].filter(_Boolean),\r\n      wellnessProgress: Math.min(\r\n        (user.sessionStats.moodEntriesCount + \r\n         user.sessionStats.wellnessActivitiesCompleted + \r\n         user.sessionStats.therapeuticContentAccessed) / 3,\r\n        100\r\n      ),\r\n      lastWeekActivity: [0, 0, 0, 0, 0, 0, 0], // Placeholder for weekly activity\r\n    };\r\n  };\r\n  \r\n  const value: AnonymousAuthContextType = {\r\n    user,\r\n    isAuthenticated: true,\r\n    isAnonymous: true,\r\n    updateNickname,\r\n    updateProfile,\r\n    updatePreferences,\r\n    updateSessionStats,\r\n    exportUserData,\r\n    importUserData,\r\n    clearLocalData,\r\n    logout: clearLocalData, // Alias for compatibility\r\n    sessionDuration,\r\n    extendSession,\r\n    updateLastActive,\r\n    isDataStale,\r\n    cleanupStaleData,\r\n    validateDataIntegrity,\r\n    getSessionInsights,\r\n  };\r\n  \r\n  return (\r\n    <AnonymousAuthContext.Provider value={value}>\r\n      {children}\r\n    </AnonymousAuthContext.Provider>\r\n  );\r\n}\r\n\r\n/**\r\n * Privacy Notice Component\r\n * Shows users that they're anonymous\r\n */\r\nexport function AnonymousNotice() {\r\n  const { user, sessionDuration } = useAnonymousAuth();\r\n  \r\n  return (\r\n    <div className=\"bg-gradient-to-r from-blue-50 to-green-50 rounded-lg p-4 border border-blue-200\">\r\n      <div className=\"flex items-center gap-3\">\r\n        <div className=\"text-blue-600\">\r\n          <svg className=\"h-6 w-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} \r\n                  d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\r\n          </svg>\r\n        </div>\r\n        <div className=\"flex-1\">\r\n          <h3 className=\"font-semibold text-gray-900\">You're Completely Anonymous</h3>\r\n          <p className=\"text-sm text-gray-600 mt-1\">\r\n            {user.nickname ? `Hi ${user.nickname}! ` : ''}\r\n            No registration required. No data collected. Your privacy is protected.\r\n            {sessionDuration > 0 && ` You've been here for ${sessionDuration} minute${sessionDuration !== 1 ? 's' : ''}.`}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\contexts\\AuthContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Move your React context(s) to a separate file.","line":86,"column":14,"nodeType":"Identifier","messageId":"reactContext","endLine":86,"endColumn":25},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":88,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":88,"endColumn":24},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'checkAuth' and 'checkSessionExpiry'. Either include them or remove the dependency array.","line":119,"column":6,"nodeType":"ArrayExpression","endLine":119,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [checkAuth, checkSessionExpiry]","fix":{"range":[4156,4158],"text":"[checkAuth, checkSessionExpiry]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":141,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":141,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":163,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":163,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":239,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":239,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":264,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":264,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":281,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":281,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":325,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":325,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":339,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":339,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":354,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":354,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":370,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":370,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":379,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":379,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":392,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":392,"endColumn":20}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enhanced Authentication Context\n * Comprehensive security features including MFA, privacy controls, and HIPAA compliance\n */\n\nimport { createContext, useContext, useState, useEffect, ReactNode, _useCallback } from 'react';\nimport type { User, PrivacySettings, ConsentRecord } from '@/types';\nimport { authService } from '@/services/auth/authService';\nimport { mfaService, MFAMethod, MFASetup } from '@/services/auth/mfaService';\nimport { privacyService, ConsentType, DataCategory } from '@/services/privacy/privacyService';\nimport { _hipaaService } from '@/services/compliance/hipaaService';\nimport { auditLogger } from '@/services/security/auditLogger';\nimport { secureStorage } from '@/services/security/secureStorage';\nimport { logger } from '../utils/logger';\n\ninterface AuthContextType {\n  // User state\n  user: User | null;\n  loading: boolean;\n  isAuthenticated: boolean;\n  isAnonymous: boolean;\n  \n  // Authentication methods\n  login: (email: string, password: string, options?: LoginOptions) => Promise<LoginResult>;\n  loginAnonymous: () => Promise<void>;\n  logout: () => Promise<void>;\n  register: (email: string, password: string, name: string, options?: RegisterOptions) => Promise<void>;\n  \n  // Profile management\n  updateProfile: (_updates: Partial<User>) => Promise<void>;\n  deleteAccount: (reason?: string) => Promise<void>;\n  \n  // Password management\n  changePassword: (_currentPassword: string, _newPassword: string) => Promise<void>;\n  requestPasswordReset: (email: string) => Promise<void>;\n  confirmPasswordReset: (token: string, _newPassword: string) => Promise<void>;\n  \n  // Multi-factor authentication\n  mfaEnabled: boolean;\n  setupMFA: (_method: MFAMethod) => Promise<unknown>;\n  verifyMFA: (code: string) => Promise<boolean>;\n  disableMFA: (_method: MFAMethod) => Promise<void>;\n  getMFAMethods: () => Promise<MFASetup[]>;\n  \n  // Privacy controls\n  privacySettings: PrivacySettings | null;\n  updatePrivacySettings: (_settings: Partial<PrivacySettings>) => Promise<void>;\n  grantConsent: (type: ConsentType, categories: DataCategory[], purpose: string) => Promise<void>;\n  revokeConsent: (consentId: string) => Promise<void>;\n  getConsents: () => Promise<ConsentRecord[]>;\n  \n  // Data management\n  exportUserData: (format?: 'json' | 'csv' | 'pdf') => Promise<string>;\n  requestDataDeletion: (categories?: DataCategory[]) => Promise<void>;\n  \n  // Session management\n  refreshSession: () => Promise<void>;\n  extendSession: () => void;\n  sessionExpiresAt: Date | null;\n  \n  // Emergency access\n  enableEmergencyAccess: () => Promise<void>;\n  disableEmergencyAccess: () => Promise<void>;\n  emergencyAccessEnabled: boolean;\n}\n\ninterface LoginOptions {\n  rememberMe?: boolean;\n  mfaCode?: string;\n  anonymousMode?: boolean;\n}\n\ninterface LoginResult {\n  success: boolean;\n  requiresMFA?: boolean;\n  mfaMethod?: MFAMethod;\n  error?: string;\n}\n\ninterface RegisterOptions {\n  acceptTerms: boolean;\n  consentToDataProcessing: boolean;\n  anonymousMode?: boolean;\n}\n\nexport const AuthContext = createContext<AuthContextType | undefined>(_undefined);\n\nexport function useAuth() {\n  const context = useContext(_AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [mfaEnabled, setMfaEnabled] = useState(false);\n  const [privacySettings, setPrivacySettings] = useState<PrivacySettings | null>(null);\n  const [sessionExpiresAt, setSessionExpiresAt] = useState<Date | null>(null);\n  const [emergencyAccessEnabled, setEmergencyAccessEnabled] = useState(false);\n  const [mfaChallengeId, setMfaChallengeId] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Check for existing session\n    checkAuth();\n    \n    // Set up session monitoring\n    const _sessionInterval = setInterval(() => {\n      checkSessionExpiry();\n    }, 60000); // Check every minute\n    \n    return () => clearInterval(_sessionInterval);\n  }, []);\n\n  const checkAuth = async () => {\n    try {\n      setLoading(true);\n      \n      // Check if user is authenticated\n      if (authService.isAuthenticated()) {\n        const currentUser = authService.getCurrentUser();\n        if (currentUser) {\n          setUser(currentUser);\n          \n          // Load additional user data\n          await loadUserData(currentUser.id);\n          \n          // Check session expiry\n          const session = authService.getCurrentSession();\n          if (session) {\n            setSessionExpiresAt(new Date(session.expiresAt));\n          }\n        }\n      }\n    } catch (_error) {\n      logger.error('Auth check failed:');\n      await authService.logout();\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const loadUserData = async (userId: string) => {\n    try {\n      // Load MFA status\n      const _hasMFA = await mfaService.hasMFAEnabled(userId);\n      setMfaEnabled(_hasMFA);\n      \n      // Load privacy _settings\n      const _settings = await privacyService.getPrivacySettings(userId);\n      setPrivacySettings(_settings);\n      \n      // Check emergency access status\n      const _emergencyKey = `emergency_access_${userId}`;\n      const emergencyStatus = await secureStorage.getItem(_emergencyKey);\n      setEmergencyAccessEnabled(!!emergencyStatus?.enabled);\n    } catch (_error) {\n      logger.error('Failed to load user data:');\n    }\n  };\n  \n  const checkSessionExpiry = () => {\n    if (sessionExpiresAt && new Date() > sessionExpiresAt) {\n      // Session expired, auto-logout\n      logout();\n    }\n  };\n\n  const login = async (\n    email: string,\n    password: string,\n    options: LoginOptions = {}\n  ): Promise<LoginResult> => {\n    try {\n      setLoading(true);\n      \n      // Check if MFA is required\n      if (mfaChallengeId && options.mfaCode) {\n        // Verify MFA code\n        const mfaValid = await mfaService.verifyChallenge(\n          user?.id || '',\n          mfaChallengeId,\n          options.mfaCode\n        );\n        \n        if (!mfaValid) {\n          return {\n            success: false,\n            error: 'Invalid MFA code',\n          };\n        }\n        \n        setMfaChallengeId(null);\n      }\n      \n      // Perform login\n      const result = await authService.login({\n        email,\n        password,\n        mfaCode: options.mfaCode,\n        anonymousMode: options.anonymousMode,\n        rememberMe: options.rememberMe,\n      });\n      \n      if (result.success && result.data) {\n        setUser(result.data.user);\n        setSessionExpiresAt(new Date(result.data.expiresAt));\n        \n        // Load additional user data\n        await loadUserData(result.data.user.id);\n        \n        // Check if MFA is required but not provided\n        const _hasMFA = await mfaService.hasMFAEnabled(result.data.user.id);\n        if (_hasMFA && !options.mfaCode) {\n          // Create MFA challenge\n          const challenge = await mfaService.createChallenge(result.data.user.id);\n          setMfaChallengeId(challenge.challengeId);\n          \n          return {\n            success: false,\n            requiresMFA: true,\n            mfaMethod: challenge._method,\n          };\n        }\n        \n        return { success: true };\n      }\n      \n      return {\n        success: false,\n        error: 'Login failed',\n      };\n    } catch (_error) {\n      logger.error('Login failed:');\n      return {\n        success: false,\n        error: '[Error details unavailable]',\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const loginAnonymous = async () => {\n    try {\n      setLoading(true);\n      \n      const result = await authService.login({\n        email: '',\n        password: '',\n        anonymousMode: true,\n      });\n      \n      if (result.success && result.data) {\n        setUser(result.data.user);\n        setSessionExpiresAt(new Date(result.data.expiresAt));\n      }\n    } catch (_error) {\n      logger.error('Anonymous login failed:');\n      throw undefined;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await authService.logout();\n      setUser(null);\n      setMfaEnabled(false);\n      setPrivacySettings(null);\n      setSessionExpiresAt(null);\n      setEmergencyAccessEnabled(false);\n      setMfaChallengeId(null);\n    } catch (_error) {\n      logger.error('Logout failed:');\n      // Force cleanup even if logout fails\n      setUser(null);\n    }\n  };\n\n  const register = async (\n    email: string,\n    password: string,\n    name: string,\n    options?: RegisterOptions\n  ) => {\n    try {\n      setLoading(true);\n      \n      if (!options?.acceptTerms || !options?.consentToDataProcessing) {\n        throw new Error('Must accept terms and consent to data processing');\n      }\n      \n      const result = await authService.register({\n        email,\n        password,\n        name,\n        acceptedTerms: options.acceptTerms,\n        consentToDataProcessing: options.consentToDataProcessing,\n        anonymousMode: options.anonymousMode,\n      });\n      \n      if (result.success && result.data) {\n        // Record initial consent\n        await privacyService.recordConsent({\n          userId: result.data.id,\n          type: 'data_processing',\n          consentGiven: true,\n          purpose: 'Account creation and platform usage',\n          dataCategories: ['personal_info'],\n        });\n        \n        // Auto-login after registration\n        if (!options.anonymousMode) {\n          await login(email, password);\n        }\n      }\n    } catch (_error) {\n      logger.error('Registration failed:');\n      throw undefined;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateProfile = async (_updates: Partial<User>) => {\n    try {\n      const result = await authService.updateProfile(_updates);\n      if (result.success && result.data) {\n        setUser(result.data);\n      }\n    } catch (_error) {\n      logger.error('Profile update failed:');\n      throw undefined;\n    }\n  };\n  \n  const deleteAccount = async (reason?: string) => {\n    try {\n      if (!user) throw new Error('No user logged in');\n      \n      // Request data deletion\n      await privacyService.requestDataDeletion(user.id, undefined, reason);\n      \n      // Logout\n      await logout();\n    } catch (_error) {\n      logger.error('Account deletion failed:');\n      throw undefined;\n    }\n  };\n  \n  const changePassword = async (_currentPassword: string, _newPassword: string) => {\n    try {\n      if (!user) throw new Error('No user logged in');\n      \n      // In production, verify current password and update\n      await auditLogger.log({\n        event: 'PASSWORD_CHANGE',\n        userId: user.id,\n        severity: 'info',\n      });\n    } catch (_error) {\n      logger.error('Password change failed:');\n      throw undefined;\n    }\n  };\n  \n  const requestPasswordReset = async (email: string) => {\n    try {\n      await authService.requestPasswordReset({ email });\n    } catch (_error) {\n      logger.error('Password reset request failed:');\n      throw undefined;\n    }\n  };\n  \n  const confirmPasswordReset = async (token: string, _newPassword: string) => {\n    try {\n      await authService.confirmPasswordReset({\n        token,\n        _newPassword,\n        confirmPassword: _newPassword,\n      });\n    } catch (_error) {\n      logger.error('Password reset confirmation failed:');\n      throw undefined;\n    }\n  };\n\n  // MFA methods\n  const setupMFA = async (_method: MFAMethod) => {\n    if (!user) throw new Error('No user logged in');\n    \n    switch (_method) {\n      case 'totp':\n        return await mfaService.setupTOTP(user.id);\n      case 'sms':\n        // Need phone number\n        throw new Error('Phone number required for SMS MFA');\n      case 'email':\n        return await mfaService.setupEmail(user.id, user.email);\n      case 'biometric':\n        return await mfaService.setupBiometric(user.id);\n      default:\n        throw new Error('Invalid MFA _method');\n    }\n  };\n  \n  const verifyMFA = async (code: string) => {\n    if (!user || !mfaChallengeId) return false;\n    \n    const result = await mfaService.verifyChallenge(user.id, mfaChallengeId, code);\n    if (_result) {\n      setMfaChallengeId(null);\n      setMfaEnabled(true);\n    }\n    return result;\n  };\n  \n  const disableMFA = async (_method: MFAMethod) => {\n    if (!user) throw new Error('No user logged in');\n    \n    await mfaService.disableMFA(user.id, _method);\n    const _hasMFA = await mfaService.hasMFAEnabled(user.id);\n    setMfaEnabled(_hasMFA);\n  };\n  \n  const getMFAMethods = async () => {\n    if (!user) return [];\n    return await mfaService.getUserMFAMethods(user.id);\n  };\n  \n  // Privacy methods\n  const updatePrivacySettings = async (_settings: Partial<PrivacySettings>) => {\n    if (!user) throw new Error('No user logged in');\n    \n    const _updated = await privacyService.updatePrivacySettings(user.id, _settings);\n    setPrivacySettings(_updated);\n  };\n  \n  const grantConsent = async (\n    type: ConsentType,\n    categories: DataCategory[],\n    purpose: string\n  ) => {\n    if (!user) throw new Error('No user logged in');\n    \n    await privacyService.recordConsent({\n      userId: user.id,\n      type,\n      consentGiven: true,\n      purpose,\n      dataCategories: categories,\n    });\n  };\n  \n  const revokeConsent = async (consentId: string) => {\n    if (!user) throw new Error('No user logged in');\n    \n    await privacyService.withdrawConsent(user.id, consentId);\n  };\n  \n  const getConsents = async () => {\n    if (!user) return [];\n    return await privacyService.getUserConsents(user.id);\n  };\n  \n  // Data management\n  const exportUserData = async (format: 'json' | 'csv' | 'pdf' = 'json') => {\n    if (!user) throw new Error('No user logged in');\n    \n    const request = await privacyService.requestDataPortability(user.id, format);\n    // In production, this would return download URL\n    return `export_${request.id}_${format}`;\n  };\n  \n  const requestDataDeletion = async (categories?: DataCategory[]) => {\n    if (!user) throw new Error('No user logged in');\n    \n    await privacyService.requestDataDeletion(user.id, categories);\n  };\n  \n  // Session management\n  const refreshSession = async () => {\n    const _tokens = await authService.refreshTokens();\n    if (_tokens) {\n      const session = authService.getCurrentSession();\n      if (session) {\n        setSessionExpiresAt(new Date(session.expiresAt));\n      }\n    }\n  };\n  \n  const extendSession = () => {\n    if (sessionExpiresAt) {\n      const _newExpiry = new Date(sessionExpiresAt.getTime() + 30 * 60 * 1000);\n      setSessionExpiresAt(_newExpiry);\n    }\n  };\n  \n  // Emergency access\n  const enableEmergencyAccess = async () => {\n    if (!user) throw new Error('No user logged in');\n    \n    const _key = `emergency_access_${user.id}`;\n    await secureStorage.setItem(_key, {\n      enabled: true,\n      enabledAt: new Date(),\n    });\n    setEmergencyAccessEnabled(true);\n    \n    await auditLogger.log({\n      event: 'EMERGENCY_ACCESS',\n      userId: user.id,\n      details: { action: 'enabled' },\n      severity: 'warning',\n    });\n  };\n  \n  const disableEmergencyAccess = async () => {\n    if (!user) throw new Error('No user logged in');\n    \n    const _key = `emergency_access_${user.id}`;\n    await secureStorage.removeItem(_key);\n    setEmergencyAccessEnabled(false);\n    \n    await auditLogger.log({\n      event: 'EMERGENCY_ACCESS',\n      userId: user.id,\n      details: { action: 'disabled' },\n      severity: 'info',\n    });\n  };\n  \n  const value = {\n    // User state\n    user,\n    loading,\n    isAuthenticated: !!user && !authService.isAnonymous(),\n    isAnonymous: authService.isAnonymous(),\n    \n    // Authentication\n    login,\n    loginAnonymous,\n    logout,\n    register,\n    \n    // Profile\n    updateProfile,\n    deleteAccount,\n    \n    // Password\n    changePassword,\n    requestPasswordReset,\n    confirmPasswordReset,\n    \n    // MFA\n    mfaEnabled,\n    setupMFA,\n    verifyMFA,\n    disableMFA,\n    getMFAMethods,\n    \n    // Privacy\n    privacySettings,\n    updatePrivacySettings,\n    grantConsent,\n    revokeConsent,\n    getConsents,\n    \n    // Data\n    exportUserData,\n    requestDataDeletion,\n    \n    // Session\n    refreshSession,\n    extendSession,\n    sessionExpiresAt,\n    \n    // Emergency\n    enableEmergencyAccess,\n    disableEmergencyAccess,\n    emergencyAccessEnabled,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useAIInsights.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'patterns' is defined but never used. Allowed unused args must match /^_/u.","line":718,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":718,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'crisisRiskPrediction' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1119,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1119,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setCrisisRiskPrediction' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1119,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":1119,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'moodAnalysis' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1120,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1120,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setMoodAnalysis' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1120,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":1120,"endColumn":39}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// AI Insights Data Processing Hook\n// Manages AI-powered mental health insights, pattern recognition, and predictions\n\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useState, useCallback, useMemo, _useEffect } from 'react';\nimport { useAuth } from './useAuth';\nimport {\n  AIInsightsDashboard,\n  AIInsight,\n  PatternAnalysis,\n  PredictiveModel,\n  PersonalizedRecommendation,\n  TherapeuticIntelligence,\n  EnvironmentalInsight,\n  ProgressMetrics,\n  _InsightType,\n  InsightCategory,\n  ModelType,\n  RecommendationType,\n  PatternType,\n  _Prediction,\n  _CBTAnalysis,\n  _DBTSkillsAnalysis,\n  _TherapyProgressAnalysis,\n  _WellnessMetric,\n  CrisisProfile,\n} from '../types/ai-insights';\n\n// Enhanced AI types for crisis prediction and mood analysis\ninterface CrisisRiskPrediction {\n  _riskLevel: 'low' | 'moderate' | 'high' | 'critical';\n  riskScore: number; // 0-100\n  _timeToRisk: number; // hours until potential crisis\n  confidence: number; // 0-1\n  primaryRiskFactors: RiskFactor[];\n  keyProtectiveFactors: ProtectiveFactor[];\n  immediateActions: string[];\n  preventiveStrategies: string[];\n  monitoringPlan: MonitoringPlan;\n  lastPrediction: Date;\n  nextUpdate: Date;\n}\n\ninterface RiskFactor {\n  type: 'mood_decline' | 'isolation' | 'sleep_disruption' | 'medication_noncompliance' | 'substance_use' | 'stressor';\n  severity: number; // 0-1\n  trend: 'increasing' | 'stable' | 'decreasing';\n  duration: number; // days\n  description: string;\n  interventions: string[];\n}\n\ninterface ProtectiveFactor {\n  type: 'social_support' | 'coping_skills' | 'treatment_engagement' | 'routine' | 'exercise' | 'meaningful_activity';\n  strength: number; // 0-1\n  trend: 'strengthening' | 'stable' | 'weakening';\n  description: string;\n  reinforcements: string[];\n}\n\ninterface MonitoringPlan {\n  frequency: 'hourly' | 'daily' | 'weekly';\n  keyMetrics: string[];\n  escalationTriggers: string[];\n  checkInQuestions: string[];\n  emergencyContacts: string[];\n}\n\ninterface MoodAnalysis {\n  currentTrend: 'improving' | 'stable' | 'declining' | 'volatile';\n  volatility: number; // 0-1\n  seasonalPatterns: SeasonalPattern[];\n  socialCorrelations: Correlation[];\n  medicationCorrelations: Correlation[];\n  sleepCorrelations: Correlation[];\n  exerciseCorrelations: Correlation[];\n  stressCorrelations: Correlation[];\n  predictedMood: MoodPrediction;\n  anomalies: MoodAnomaly[];\n  recommendations: MoodRecommendation[];\n}\n\ninterface SeasonalPattern {\n  season: 'spring' | 'summer' | 'fall' | 'winter';\n  averageMood: number;\n  trendDirection: 'up' | 'down' | 'stable';\n  significance: number;\n}\n\ninterface Correlation {\n  factor: string;\n  coefficient: number; // -1 to 1\n  strength: 'weak' | 'moderate' | 'strong';\n  pValue: number;\n  description: string;\n}\n\ninterface MoodPrediction {\n  nextWeek: number[];\n  confidence: number;\n  factors: string[];\n  uncertainty: number;\n}\n\ninterface MoodAnomaly {\n  date: Date;\n  type: 'spike' | 'drop' | 'unusual_pattern';\n  severity: number;\n  possibleCauses: string[];\n  duration: number;\n}\n\ninterface MoodRecommendation {\n  type: 'immediate' | 'short_term' | 'long_term';\n  action: string;\n  rationale: string;\n  expectedImpact: number;\n  timeframe: string;\n}\n\ninterface CrisisRiskAssessment {\n  _overallRisk: 'low' | 'moderate' | 'high' | 'critical';\n  confidence: number;\n  timeframe: number; // hours\n  _riskFactors: RiskFactor[];\n  _protectiveFactors: ProtectiveFactor[];\n  recommendations: string[];\n  escalationTriggers: string[];\n  lastAssessment: Date;\n  nextReassessment: Date;\n}\n\ninterface PersonalizedIntervention {\n  id: string;\n  type: 'cognitive' | 'behavioral' | 'mindfulness' | 'social' | 'medical';\n  intervention: string;\n  rationale: string;\n  evidenceBase: string;\n  personalizedFor: unknown;\n  expectedOutcome: string;\n  timeframe: string;\n  difficulty: 'low' | 'moderate' | 'high';\n  resources: string[];\n}\n\ninterface TherapeuticContentRecommendation {\n  id: string;\n  contentType: 'exercise' | 'reading' | 'video' | 'audio' | 'interactive';\n  title: string;\n  description: string;\n  relevanceScore: number;\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  duration: number;\n  category: string;\n  therapeuticApproach: string[];\n  personalizedRationale: string;\n}\n\n// Helper functions for enhanced AI analysis\nconst analyzeMoodByTime = (_moodData: unknown[]) => ({\n  pattern: 'morning_high_evening_low',\n  peak: 'late morning',\n  significance: 0.82,\n  consistency: 0.75,\n  intensity: 0.65,\n  impact: 35,\n  severity: 'mild' as const,\n  predictiveAccuracy: 0.78,\n  dataPoints: []\n});\n\nconst analyzeWeatherCorrelation = (_moodData: unknown[], _contextData: unknown[]) => ({\n  correlation: 0.42,\n  strongestFactor: 'sunlight_hours',\n  occurrences: 45,\n  averageImpact: 25,\n  dataPoints: [],\n  mitigationStrategies: ['Light therapy', 'Indoor activities during cloudy days'],\n  mitigationFactors: ['vitamin_d', 'exercise', 'social_connection'],\n  predictiveValue: 0.68,\n  severity: 'mild' as const\n});\n\nconst calculateRiskFactors = (_userData: unknown, _moodData: unknown[], _behaviorData: unknown[]) => ({\n  factors: [\n    {\n      type: 'mood_decline' as const,\n      severity: 0.6,\n      trend: 'increasing' as const,\n      duration: 5,\n      description: 'Mood has declined 30% over past week',\n      interventions: ['Increase therapy frequency', 'Medication review']\n    }\n  ],\n  protective: [\n    {\n      type: 'social_support' as const,\n      strength: 0.8,\n      trend: 'stable' as const,\n      description: 'Strong family support system',\n      reinforcements: ['Regular family check-ins', 'Support group participation']\n    }\n  ]\n});\n\nconst calculateOverallRisk = (_riskFactors: unknown) => ({\n  level: 'moderate' as const,\n  confidence: 0.75\n});\n\nconst determineTimeframe = (_riskFactors: unknown) => 72;\n\nconst generateCrisisRecommendations = (_overallRisk: unknown, _riskFactors: unknown) => [\n  'Increase therapy sessions',\n  'Daily mood monitoring',\n  'Contact support network'\n];\n\nconst defineEscalationTriggers = (_overallRisk: unknown) => [\n  'Mood drops below 3/10 for 2 consecutive days',\n  'Expresses hopelessness',\n  'Cancels therapy appointments'\n];\n\nconst getReassessmentInterval = (_riskLevel: string) => {\n  switch (_riskLevel) {\n    case 'critical': return 1;\n    case 'high': return 6;\n    case 'moderate': return 24;\n    default: return 72;\n  }\n};\n\nconst matchInterventionsToPatterns = (_patterns: PatternAnalysis[], _userProfile: unknown): PersonalizedIntervention[] => [];\nconst adjustForCrisisRisk = (interventions: PersonalizedIntervention[], _crisisRisk: CrisisRiskAssessment): PersonalizedIntervention[] => interventions;\nconst personalizeInterventions = (interventions: PersonalizedIntervention[], _userProfile: unknown): PersonalizedIntervention[] => interventions;\n\nconst matchCBTContent = (_patterns: PatternAnalysis[], _userProgress: unknown): TherapeuticContentRecommendation[] => [];\nconst matchDBTContent = (_patterns: PatternAnalysis[], _userProgress: unknown): TherapeuticContentRecommendation[] => [];\nconst matchMindfulnessContent = (_patterns: PatternAnalysis[], _preferences: unknown): TherapeuticContentRecommendation[] => [];\n\nconst identifyRiskIndicators = (_patterns: PatternAnalysis[], _moodData: unknown[]): RiskFactor[] => [];\nconst identifyProtectiveFactors = (_patterns: PatternAnalysis[], _moodData: unknown[]): ProtectiveFactor[] => [];\nconst calculateCrisisRiskScore = (_riskIndicators: RiskFactor[], _protectiveFactors: ProtectiveFactor[]) => 45;\nconst estimateTimeToRisk = (_riskIndicators: RiskFactor[], _patterns: PatternAnalysis[]) => 72;\nconst calculatePredictionConfidence = (_riskIndicators: RiskFactor[], _patterns: PatternAnalysis[]) => 0.78;\nconst categorizeRiskLevel = (riskScore: number) => riskScore > 70 ? 'high' : riskScore > 40 ? 'moderate' : 'low';\nconst generateImmediateActions = (_riskScore: number): string[] => ['Monitor mood closely', 'Engage support system'];\nconst generatePreventiveStrategies = (_riskIndicators: RiskFactor[], _protectiveFactors: ProtectiveFactor[]): string[] => [];\nconst createMonitoringPlan = (_riskScore: number, _timeToRisk: number): MonitoringPlan => ({\n  frequency: 'daily' as const,\n  keyMetrics: ['mood', 'sleep', 'social_interaction'],\n  escalationTriggers: ['mood < 3', 'no social contact for 2 days'],\n  checkInQuestions: ['How are you feeling?', 'Did you sleep well?'],\n  emergencyContacts: ['therapist', 'family_member']\n});\nconst getUpdateInterval = (riskScore: number) => riskScore > 70 ? 1 : riskScore > 40 ? 6 : 24;\n\nconst determineMoodTrend = (_moodHistory: unknown[]) => 'stable' as const;\nconst calculateMoodVolatility = (_moodHistory: unknown[]) => 0.3;\nconst identifySeasonalPatterns = (_moodHistory: unknown[]): SeasonalPattern[] => [];\nconst analyzeSocialCorrelations = (_moodHistory: unknown[], _contextData: unknown[]): Correlation[] => [];\nconst analyzeMedicationEffects = (_moodHistory: unknown[], _contextData: unknown[]): Correlation[] => [];\nconst analyzeSleepMoodCorrelation = (_moodHistory: unknown[], _contextData: unknown[]): Correlation[] => [];\nconst analyzeExerciseMoodCorrelation = (_moodHistory: unknown[], _contextData: unknown[]): Correlation[] => [];\nconst analyzeStressMoodCorrelation = (_moodHistory: unknown[], _contextData: unknown[]): Correlation[] => [];\nconst predictFutureMood = (_moodHistory: unknown[], _contextData: unknown[]): MoodPrediction => ({ nextWeek: [6, 7, 6, 8, 7, 6, 7], confidence: 0.75, factors: ['sleep', 'social'], uncertainty: 0.2 });\nconst detectMoodAnomalies = (_moodHistory: unknown[]): MoodAnomaly[] => [];\nconst generateMoodRecommendations = (_moodHistory: unknown[], _contextData: unknown[]): MoodRecommendation[] => [];\n\n// Advanced AI-powered analysis functions for mental health insights\n\n// Mood pattern recognition using machine learning algorithms\nconst analyzeMoodPatterns = (_moodData: unknown[], _contextData: unknown[]): PatternAnalysis[] => {\n  const patterns: PatternAnalysis[] = [];\n  \n  // Circadian rhythm analysis\n  const timeBasedMood = analyzeMoodByTime(_moodData);\n  if (timeBasedMood.significance > 0.7) {\n    patterns.push({\n      id: 'circadian-pattern',\n      patternType: 'circadian_rhythm',\n      description: `Your mood follows a ${timeBasedMood.pattern} pattern, with ${timeBasedMood.peak} being your optimal time`,\n      frequency: {\n        type: 'daily',\n        occurrences: timeBasedMood.consistency * 30,\n        averageInterval: 24,\n        variance: 2\n      },\n      strength: timeBasedMood.significance,\n      dataPoints: timeBasedMood.dataPoints,\n      triggers: [{\n        id: 'circadian-trigger',\n        triggerType: 'biological_rhythm',\n        triggerEvents: ['sleep_wake_cycle', 'cortisol_fluctuation'],\n        responseTime: 1,\n        responseIntensity: timeBasedMood.intensity,\n        frequency: timeBasedMood.consistency,\n        avoidanceStrategies: [\n          'Light therapy during low periods',\n          'Schedule important tasks during peak times',\n          'Maintain consistent sleep schedule'\n        ]\n      }],\n      outcomes: [{\n        outcome: 'optimized_daily_performance',\n        probability: timeBasedMood.significance,\n        averageImpact: timeBasedMood.impact,\n        duration: 8,\n        mitigationFactors: ['light_exposure', 'meal_timing', 'exercise_scheduling']\n      }],\n      firstDetected: new Date(Date.now() - 21 * 24 * 60 * 60 * 1000),\n      lastOccurrence: new Date(Date.now() - 24 * 60 * 60 * 1000),\n      predictiveValue: timeBasedMood.predictiveAccuracy,\n      clinicalRelevance: {\n        isClinicallySignificant: timeBasedMood.significance > 0.8,\n        severityLevel: timeBasedMood.severity,\n        requiresProfessionalReview: false,\n        clinicalGuidelines: ['Monitor for seasonal affective patterns'],\n        recommendedActions: ['Optimize daily schedule', 'Consider chronotherapy']\n      }\n    });\n  }\n  \n  // Weather and mood correlation\n  const weatherPattern = analyzeWeatherCorrelation(_moodData, _contextData);\n  if (weatherPattern.correlation > 0.4) {\n    patterns.push({\n      id: 'weather-mood-pattern',\n      patternType: 'environmental_correlation',\n      description: `Weather significantly impacts your mood - ${weatherPattern.strongestFactor} shows ${Math.abs(weatherPattern.correlation * 100).toFixed(0)}% correlation`,\n      frequency: {\n        type: 'irregular',\n        occurrences: weatherPattern.occurrences,\n        averageInterval: 72,\n        variance: 48\n      },\n      strength: Math.abs(weatherPattern.correlation),\n      dataPoints: weatherPattern.dataPoints,\n      triggers: [{\n        id: 'weather-trigger',\n        triggerType: 'environmental_change',\n        triggerEvents: [weatherPattern.strongestFactor, 'barometric_pressure', 'seasonal_change'],\n        responseTime: 12,\n        responseIntensity: Math.abs(weatherPattern.correlation),\n        frequency: 0.7,\n        avoidanceStrategies: weatherPattern.mitigationStrategies\n      }],\n      outcomes: [{\n        outcome: weatherPattern.correlation > 0 ? 'mood_improvement' : 'mood_decline',\n        probability: Math.abs(weatherPattern.correlation),\n        averageImpact: weatherPattern.averageImpact,\n        duration: 24,\n        mitigationFactors: weatherPattern.mitigationFactors\n      }],\n      firstDetected: new Date(Date.now() - 45 * 24 * 60 * 60 * 1000),\n      lastOccurrence: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),\n      predictiveValue: weatherPattern.predictiveValue,\n      clinicalRelevance: {\n        isClinicallySignificant: Math.abs(weatherPattern.correlation) > 0.6,\n        severityLevel: weatherPattern.severity,\n        requiresProfessionalReview: Math.abs(weatherPattern.correlation) > 0.7,\n        clinicalGuidelines: ['Consider seasonal affective disorder screening'],\n        recommendedActions: ['Light therapy', 'Weather-based interventions', 'Vitamin D supplementation']\n      }\n    });\n  }\n  \n  return patterns;\n};\n\n// Crisis risk assessment using multiple risk factors\nconst assessCrisisRisk = (_userData: unknown, _moodData: unknown[], _behaviorData: unknown[]): CrisisRiskAssessment => {\n  const _riskFactors = calculateRiskFactors(_userData, _moodData, _behaviorData);\n  const _overallRisk = calculateOverallRisk(_riskFactors);\n  const timeframe = determineTimeframe(_riskFactors);\n  \n  return {\n    _overallRisk: _overallRisk.level,\n    confidence: _overallRisk.confidence,\n    timeframe,\n    _riskFactors: _riskFactors.factors,\n    _protectiveFactors: _riskFactors.protective,\n    recommendations: generateCrisisRecommendations(_overallRisk, _riskFactors),\n    escalationTriggers: defineEscalationTriggers(_overallRisk),\n    lastAssessment: new Date(),\n    nextReassessment: new Date(Date.now() + getReassessmentInterval(_overallRisk.level) * 60 * 60 * 1000)\n  };\n};\n\n// Personalized intervention recommendation engine\nconst generatePersonalizedInterventions = (patterns: PatternAnalysis[], _crisisRisk: CrisisRiskAssessment, _userProfile: unknown): PersonalizedIntervention[] => {\n  const _interventions: PersonalizedIntervention[] = [];\n  \n  // Evidence-based intervention matching\n  const matchedInterventions = matchInterventionsToPatterns(patterns, _userProfile);\n  \n  // Crisis-informed adjustments\n  const adjustedInterventions = adjustForCrisisRisk(matchedInterventions, _crisisRisk);\n  \n  // Personalization based on user _preferences and history\n  const personalizedInterventions = personalizeInterventions(adjustedInterventions, _userProfile);\n  \n  return personalizedInterventions;\n};\n\n// Therapeutic content recommendation system\nconst recommendTherapeuticContent = (patterns: PatternAnalysis[], _userProgress: unknown, _preferences: unknown): TherapeuticContentRecommendation[] => {\n  const recommendations: TherapeuticContentRecommendation[] = [];\n  \n  // CBT content matching\n  const cbtRecommendations = matchCBTContent(patterns, _userProgress);\n  recommendations.push(...cbtRecommendations);\n  \n  // DBT skills recommendations\n  const dbtRecommendations = matchDBTContent(patterns, _userProgress);\n  recommendations.push(...dbtRecommendations);\n  \n  // Mindfulness content\n  const mindfulnessRecommendations = matchMindfulnessContent(patterns, _preferences);\n  recommendations.push(...mindfulnessRecommendations);\n  \n  return recommendations.sort((a, b) => b.relevanceScore - a.relevanceScore);\n};\n\n// Simulated AI processing functions (would be ML models in production)\nconst analyzePatterns = (_userData: unknown): PatternAnalysis[] => {\n  // Simulate pattern detection algorithm\n  const patterns: PatternAnalysis[] = [\n    {\n      id: 'pattern-1',\n      patternType: 'mood_cycle',\n      description: 'Your mood tends to dip on Sunday evenings and Monday mornings',\n      frequency: {\n        type: 'weekly',\n        occurrences: 12,\n        averageInterval: 168, // hours in a week\n        variance: 4,\n      },\n      strength: 0.78,\n      dataPoints: [],\n      triggers: [\n        {\n          id: 'trigger-1',\n          triggerType: 'anticipatory_anxiety',\n          triggerEvents: ['work_week_start', 'sunday_evening'],\n          responseTime: 4,\n          responseIntensity: 0.7,\n          frequency: 0.85,\n          avoidanceStrategies: [\n            'Sunday evening relaxation routine',\n            'Monday morning preparation on Friday',\n            'Weekend accomplishment review',\n          ],\n        },\n      ],\n      outcomes: [\n        {\n          outcome: 'monday_low_mood',\n          probability: 0.72,\n          averageImpact: -35,\n          duration: 24,\n          mitigationFactors: ['morning_exercise', 'social_breakfast', 'meditation'],\n        },\n      ],\n      firstDetected: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000),\n      lastOccurrence: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n      predictiveValue: 0.82,\n      clinicalRelevance: {\n        isClinicallySignificant: true,\n        severityLevel: 'moderate',\n        requiresProfessionalReview: false,\n        clinicalGuidelines: ['Monitor for signs of anticipatory anxiety'],\n        recommendedActions: ['Implement Sunday evening routine', 'Consider CBT for anticipatory anxiety'],\n      },\n    },\n    {\n      id: 'pattern-2',\n      patternType: 'sleep_pattern',\n      description: 'Better mood and energy after 7-8 hours of sleep between 11 PM and 7 AM',\n      frequency: {\n        type: 'daily',\n        occurrences: 45,\n        averageInterval: 24,\n        variance: 2,\n      },\n      strength: 0.89,\n      dataPoints: [],\n      triggers: [\n        {\n          id: 'trigger-2',\n          triggerType: 'sleep_quality',\n          triggerEvents: ['consistent_bedtime', 'morning_routine'],\n          responseTime: 8,\n          responseIntensity: 0.85,\n          frequency: 0.9,\n          avoidanceStrategies: [],\n        },\n      ],\n      outcomes: [\n        {\n          outcome: 'improved_mood',\n          probability: 0.88,\n          averageImpact: 45,\n          duration: 16,\n          mitigationFactors: [],\n        },\n      ],\n      firstDetected: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000),\n      lastOccurrence: new Date(Date.now() - 24 * 60 * 60 * 1000),\n      predictiveValue: 0.91,\n      clinicalRelevance: {\n        isClinicallySignificant: true,\n        severityLevel: 'none',\n        requiresProfessionalReview: false,\n        clinicalGuidelines: ['Sleep hygiene is working well'],\n        recommendedActions: ['Maintain current sleep schedule'],\n      },\n    },\n    {\n      id: 'pattern-3',\n      patternType: 'social_pattern',\n      description: 'Mood improvement after social interactions lasting 30+ minutes',\n      frequency: {\n        type: 'irregular',\n        occurrences: 23,\n        averageInterval: 72,\n        variance: 24,\n      },\n      strength: 0.71,\n      dataPoints: [],\n      triggers: [\n        {\n          id: 'trigger-3',\n          triggerType: 'social_interaction',\n          triggerEvents: ['friend_meetup', 'family_dinner', 'group_activity'],\n          responseTime: 2,\n          responseIntensity: 0.75,\n          frequency: 0.68,\n          avoidanceStrategies: [],\n        },\n      ],\n      outcomes: [\n        {\n          outcome: 'mood_boost',\n          probability: 0.76,\n          averageImpact: 32,\n          duration: 48,\n          mitigationFactors: [],\n        },\n      ],\n      firstDetected: new Date(Date.now() - 45 * 24 * 60 * 60 * 1000),\n      lastOccurrence: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),\n      predictiveValue: 0.73,\n      clinicalRelevance: {\n        isClinicallySignificant: true,\n        severityLevel: 'none',\n        requiresProfessionalReview: false,\n        clinicalGuidelines: ['Social connection is beneficial'],\n        recommendedActions: ['Schedule regular social activities', 'Join group activities'],\n      },\n    },\n  ];\n\n  return patterns;\n};\n\nconst generatePredictions = (_patterns: PatternAnalysis[]): PredictiveModel[] => {\n  // Simulate predictive modeling\n  const models: PredictiveModel[] = [\n    {\n      id: 'model-1',\n      modelType: 'mood_forecast',\n      targetVariable: 'mood_score',\n      _predictions: [\n        {\n          timeframe: {\n            start: new Date(),\n            end: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n            resolution: 'day',\n          },\n          outcome: 'stable_mood',\n          probability: 0.73,\n          confidence: 0.81,\n          factors: [\n            {\n              factor: 'sleep_consistency',\n              impact: 0.35,\n              modifiable: true,\n              currentState: 'good',\n              optimalState: 'excellent',\n              improvementSuggestions: ['Set consistent bedtime alarm', 'Create wind-down routine'],\n            },\n            {\n              factor: 'social_interaction',\n              impact: 0.28,\n              modifiable: true,\n              currentState: 'moderate',\n              optimalState: 'high',\n              improvementSuggestions: ['Schedule weekly friend meetup', 'Join a support group'],\n            },\n          ],\n          preventiveActions: [\n            'Maintain sleep schedule',\n            'Plan social activities for mid-week',\n            'Continue medication adherence',\n          ],\n          alternativeScenarios: [\n            {\n              condition: 'disrupted_sleep',\n              probability: 0.27,\n              outcome: 'mood_dip',\n              recommendations: ['Use sleep hygiene techniques', 'Consider melatonin supplement'],\n            },\n          ],\n        },\n      ],\n      accuracy: {\n        overall: 0.78,\n        precision: 0.81,\n        recall: 0.75,\n        f1Score: 0.78,\n        validationMethod: 'cross_validation',\n      },\n      features: [\n        {\n          feature: 'sleep_quality',\n          importance: 0.32,\n          category: 'behavioral',\n          description: 'Quality and duration of sleep',\n        },\n        {\n          feature: 'social_interaction_frequency',\n          importance: 0.24,\n          category: 'social',\n          description: 'Number and quality of social interactions',\n        },\n        {\n          feature: 'medication_adherence',\n          importance: 0.21,\n          category: 'medical',\n          description: 'Consistency in taking prescribed medications',\n        },\n      ],\n      lastTrained: new Date(Date.now() - 24 * 60 * 60 * 1000),\n      nextUpdate: new Date(Date.now() + 6 * 24 * 60 * 60 * 1000),\n    },\n    {\n      id: 'model-2',\n      modelType: 'crisis_risk',\n      targetVariable: 'crisis_probability',\n      _predictions: [\n        {\n          timeframe: {\n            start: new Date(),\n            end: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n            resolution: 'week',\n          },\n          outcome: 'low_risk',\n          probability: 0.89,\n          confidence: 0.92,\n          factors: [\n            {\n              factor: 'support_system',\n              impact: -0.41,\n              modifiable: true,\n              currentState: 'strong',\n              optimalState: 'strong',\n              improvementSuggestions: ['Maintain regular check-ins'],\n            },\n            {\n              factor: 'coping_skills',\n              impact: -0.38,\n              modifiable: true,\n              currentState: 'developing',\n              optimalState: 'strong',\n              improvementSuggestions: ['Practice DBT skills daily', 'Review crisis plan monthly'],\n            },\n          ],\n          preventiveActions: [\n            'Continue therapy sessions',\n            'Maintain support system connections',\n            'Practice crisis coping skills',\n          ],\n          alternativeScenarios: [],\n        },\n      ],\n      accuracy: {\n        overall: 0.91,\n        precision: 0.93,\n        recall: 0.89,\n        f1Score: 0.91,\n        validationMethod: 'temporal_validation',\n      },\n      features: [\n        {\n          feature: 'therapy_engagement',\n          importance: 0.41,\n          category: 'therapeutic',\n          description: 'Engagement and progress in therapy',\n        },\n        {\n          feature: 'support_system_strength',\n          importance: 0.35,\n          category: 'social',\n          description: 'Quality and availability of support network',\n        },\n      ],\n      lastTrained: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n      nextUpdate: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n    },\n  ];\n\n  return models;\n};\n\nconst generateRecommendations = (\n  patterns: PatternAnalysis[],\n  _predictions: PredictiveModel[]\n): PersonalizedRecommendation[] => {\n  // Generate personalized recommendations based on patterns and _predictions\n  const recommendations: PersonalizedRecommendation[] = [\n    {\n      id: 'rec-1',\n      type: 'behavioral',\n      priority: 'high',\n      title: 'Sunday Evening Relaxation Routine',\n      description: 'Create a calming Sunday evening routine to reduce anticipatory anxiety',\n      rationale: 'Analysis shows your mood consistently dips on Sunday evenings. A structured relaxation routine can help break this pattern.',\n      evidenceStrength: 'strong',\n      expectedImpact: {\n        metric: 'sunday_evening_mood',\n        currentValue: 4.2,\n        expectedValue: 6.5,\n        timeToImpact: 14,\n        confidence: 0.78,\n      },\n      implementation: {\n        steps: [\n          {\n            order: 1,\n            description: 'At 7 PM, begin winding down with light stretching or yoga',\n            duration: 15,\n            tips: ['Use a guided video if helpful', 'Focus on gentle movements'],\n            commonChallenges: ['Forgetting to start', 'Feeling too tired'],\n          },\n          {\n            order: 2,\n            description: 'Practice 10 minutes of mindfulness meditation',\n            duration: 10,\n            tips: ['Use a meditation app', 'Focus on breath awareness'],\n            commonChallenges: ['Racing thoughts', 'Difficulty focusing'],\n          },\n          {\n            order: 3,\n            description: 'Write three positive reflections from the weekend',\n            duration: 10,\n            tips: ['Keep it simple', 'Focus on gratitude'],\n            commonChallenges: ['Negative thinking patterns', 'Nothing comes to mind'],\n          },\n          {\n            order: 4,\n            description: 'Prepare for Monday morning (clothes, breakfast plan)',\n            duration: 15,\n            tips: ['Keep it simple', 'Prepare the night before'],\n            commonChallenges: ['Procrastination', 'Overwhelm'],\n          },\n        ],\n        estimatedTime: 50,\n        difficulty: 'moderate',\n        requiredResources: ['Quiet space', 'Journal', 'Meditation app'],\n        optimalTiming: {\n          timeOfDay: ['19:00', '20:00'],\n          daysOfWeek: ['Sunday'],\n          conditions: ['After dinner', 'Before screen time'],\n          avoidWhen: ['Feeling extremely tired', 'Have urgent tasks'],\n        },\n        successCriteria: ['Complete 4 out of 5 Sundays', 'Mood improvement on Monday mornings'],\n      },\n      personalizedFor: {\n        _preferences: [\n          { category: 'activity', preference: 'quiet_activities', weight: 0.8 },\n          { category: 'timing', preference: 'evening', weight: 0.7 },\n        ],\n        history: [\n          {\n            intervention: 'meditation',\n            effectiveness: 0.75,\n            adherence: 0.68,\n            sideEffects: [],\n          },\n        ],\n        constraints: [\n          {\n            type: 'time',\n            description: 'Limited evening time',\n            impact: ['Need efficient routine'],\n          },\n        ],\n        goals: ['Reduce anxiety', 'Improve mood stability'],\n        culturalConsiderations: [],\n      },\n      alternativeOptions: [\n        {\n          title: 'Morning Monday Boost Routine',\n          description: 'Focus on Monday morning instead of Sunday evening',\n          tradeoffs: ['Requires earlier wake time', 'May feel rushed'],\n          suitabilityScore: 0.65,\n        },\n      ],\n      contraindicators: [],\n      trackingMetrics: ['Sunday evening mood', 'Monday morning mood', 'Routine completion rate'],\n    },\n    {\n      id: 'rec-2',\n      type: 'social',\n      priority: 'medium',\n      title: 'Weekly Social Connection Goal',\n      description: 'Schedule at least two meaningful social interactions per week',\n      rationale: 'Your mood improves significantly after social interactions. Regular social connection can provide consistent mood support.',\n      evidenceStrength: 'moderate',\n      expectedImpact: {\n        metric: 'weekly_mood_average',\n        currentValue: 5.8,\n        expectedValue: 7.1,\n        timeToImpact: 21,\n        confidence: 0.71,\n      },\n      implementation: {\n        steps: [\n          {\n            order: 1,\n            description: 'Identify 3-4 people you enjoy spending time with',\n            duration: 10,\n            tips: ['Include both close friends and acquaintances', 'Consider different types of interactions'],\n            commonChallenges: ['Limited social circle', 'Social anxiety'],\n          },\n          {\n            order: 2,\n            description: 'Schedule two 30+ minute interactions weekly',\n            duration: 5,\n            tips: ['Mix in-person and virtual', 'Plan activities you both enjoy'],\n            commonChallenges: ['Scheduling conflicts', 'Last-minute cancellations'],\n          },\n          {\n            order: 3,\n            description: 'Engage in meaningful conversation during interactions',\n            duration: 30,\n            tips: ['Ask open-ended questions', 'Share authentically'],\n            commonChallenges: ['Surface-level conversations', 'Social fatigue'],\n          },\n        ],\n        estimatedTime: 45,\n        difficulty: 'easy',\n        requiredResources: ['Phone or computer', 'Transportation if in-person'],\n        optimalTiming: {\n          timeOfDay: ['afternoon', 'early evening'],\n          daysOfWeek: ['Wednesday', 'Thursday', 'Saturday'],\n          conditions: ['When energy is moderate to high'],\n          avoidWhen: ['Feeling overwhelmed', 'During work hours'],\n        },\n        successCriteria: ['Two interactions per week', 'Mood boost after interactions'],\n      },\n      personalizedFor: {\n        _preferences: [\n          { category: 'social', preference: 'small_groups', weight: 0.75 },\n          { category: 'communication', preference: 'in_person', weight: 0.6 },\n        ],\n        history: [\n          {\n            intervention: 'group_therapy',\n            effectiveness: 0.82,\n            adherence: 0.9,\n            sideEffects: ['initial_anxiety'],\n          },\n        ],\n        constraints: [],\n        goals: ['Increase social connection', 'Build support network'],\n        culturalConsiderations: [],\n      },\n      alternativeOptions: [\n        {\n          title: 'Online Community Participation',\n          description: 'Engage in online support groups or interest-based communities',\n          tradeoffs: ['Less personal', 'Screen time increase'],\n          suitabilityScore: 0.58,\n        },\n      ],\n      contraindicators: ['Severe social anxiety requiring gradual exposure'],\n      trackingMetrics: ['Social interaction frequency', 'Mood after interactions', 'Connection quality rating'],\n    },\n  ];\n\n  return recommendations;\n};\n\nconst analyzeTherapeuticProgress = (): TherapeuticIntelligence => {\n  // Simulate therapeutic intelligence analysis\n  return {\n    cbtAnalysis: {\n      thoughtPatterns: [\n        {\n          pattern: 'Catastrophizing about work performance',\n          frequency: 8,\n          triggers: ['work deadlines', 'performance reviews', 'Monday mornings'],\n          emotionalImpact: -65,\n          alternativeThoughts: [\n            'I have handled challenges before',\n            'One mistake does not define my worth',\n            'I can ask for help when needed',\n          ],\n          evidenceFor: ['Past deadline missed'],\n          evidenceAgainst: ['90% success rate', 'Positive feedback from manager'],\n        },\n      ],\n      cognitiveDistortions: [\n        {\n          type: 'All-or-nothing thinking',\n          examples: ['If I\\'m not perfect, I\\'m a failure', 'Either I do it all or I do nothing'],\n          frequency: 12,\n          severity: 0.7,\n          challengingStrategies: ['Look for the middle ground', 'Rate success on a scale'],\n          progress: 0.45,\n        },\n      ],\n      automaticThoughts: [],\n      coreBeliefs: [\n        {\n          belief: 'I must be perfect to be valued',\n          strength: 0.68,\n          origin: 'Childhood experiences',\n          supportingEvidence: ['Past criticism for mistakes'],\n          contradictingEvidence: ['Friends value me despite imperfections', 'Partner loves me as I am'],\n          alternativeBelief: 'I am valuable as a human being, regardless of performance',\n          workInProgress: true,\n        },\n      ],\n      interventionEffectiveness: [],\n      homeworkCompletion: 0.75,\n      progressIndicators: ['Identifying thoughts more quickly', 'Using thought records regularly'],\n    },\n    dbtSkillsTracking: {\n      moduleProgress: [\n        {\n          module: 'distress_tolerance',\n          completion: 0.65,\n          mastery: 0.52,\n          practiceFrequency: 4,\n          topSkills: ['TIPP', 'Distraction', 'Self-soothing'],\n        },\n        {\n          module: 'emotion_regulation',\n          completion: 0.48,\n          mastery: 0.35,\n          practiceFrequency: 3,\n          topSkills: ['PLEASE', 'Opposite action'],\n        },\n      ],\n      skillUsage: [],\n      effectivenessRatings: [],\n      crisisSkillReadiness: 0.71,\n      recommendedSkills: [],\n    },\n    mindfulnessOptimization: {\n      practiceConsistency: 0.68,\n      averageDuration: 12,\n      preferredTechniques: ['Breath awareness', 'Body scan', 'Walking meditation'],\n      optimalTimes: ['Morning', 'Before bed'],\n      benefitAreas: [\n        {\n          area: 'Anxiety reduction',\n          improvement: 0.42,\n          techniques: ['Breath awareness', '5-4-3-2-1 grounding'],\n        },\n      ],\n      challenges: ['Mind wandering', 'Finding time'],\n      recommendations: [],\n    },\n    behavioralActivation: {\n      activityLevels: [],\n      moodActivityCorrelation: 0.67,\n      pleasurableActivities: [],\n      masteryActivities: [],\n      schedulingAdherence: 0.72,\n      barriers: ['Low energy', 'Lack of motivation'],\n      facilitators: ['Social accountability', 'Small steps'],\n      recommendations: ['Start with 5-minute activities', 'Schedule activities with friends'],\n    },\n    therapyProgress: {\n      overallProgress: 0.58,\n      goalsAchieved: 3,\n      totalGoals: 7,\n      sessionInsights: [],\n      therapeuticAlliance: 0.82,\n      readinessForChange: 0.73,\n      treatmentAdherence: 0.85,\n      areasOfGrowth: ['Emotional awareness', 'Coping skills', 'Self-compassion'],\n      areasNeedingFocus: ['Perfectionism', 'Interpersonal effectiveness', 'Core beliefs'],\n    },\n    therapeuticGoals: [],\n  };\n};\n\nconst generateProgressMetrics = (): ProgressMetrics => {\n  // Generate progress metrics\n  return {\n    overallWellness: {\n      score: 68,\n      trend: 'improving',\n      changeRate: 2.3,\n      components: [\n        { name: 'Mood', weight: 0.3, score: 65, trend: 'improving' },\n        { name: 'Energy', weight: 0.2, score: 58, trend: 'stable' },\n        { name: 'Sleep', weight: 0.25, score: 72, trend: 'improving' },\n        { name: 'Social', weight: 0.15, score: 70, trend: 'improving' },\n        { name: 'Activities', weight: 0.1, score: 75, trend: 'stable' },\n      ],\n      projectedScore: 74,\n    },\n    domainMetrics: [\n      {\n        domain: 'Mental Health',\n        currentScore: 67,\n        baselineScore: 52,\n        targetScore: 80,\n        progress: 0.54,\n        subMetrics: [\n          { name: 'Anxiety Level', value: 4.2, unit: '/10', target: 3, achieved: false },\n          { name: 'Depression Score', value: 8, unit: 'PHQ-9', target: 5, achieved: false },\n          { name: 'Stress Management', value: 6.5, unit: '/10', target: 7, achieved: false },\n        ],\n      },\n    ],\n    trendAnalysis: {\n      shortTerm: {\n        direction: 'up',\n        magnitude: 5,\n        confidence: 0.82,\n        keyFactors: ['Consistent therapy', 'Improved sleep'],\n      },\n      mediumTerm: {\n        direction: 'up',\n        magnitude: 12,\n        confidence: 0.75,\n        keyFactors: ['Medication adjustment', 'Social support'],\n      },\n      longTerm: {\n        direction: 'up',\n        magnitude: 28,\n        confidence: 0.68,\n        keyFactors: ['Therapy progress', 'Lifestyle changes'],\n      },\n      volatility: 0.32,\n      consistency: 0.71,\n    },\n    milestoneAchievements: [\n      {\n        id: 'milestone-1',\n        title: '30-Day Mood Tracking Streak',\n        description: 'Consistently tracked mood for 30 consecutive days',\n        achievedDate: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),\n        category: 'tracking',\n        significance: 'moderate',\n        celebration: 'Great job maintaining awareness of your emotional patterns!',\n        nextMilestone: '60-day streak',\n      },\n    ],\n    comparisonMetrics: [],\n  };\n};\n\n// Enhanced crisis risk prediction\nconst predictCrisisRisk = (patterns: PatternAnalysis[], recentMoodData: unknown[]): CrisisRiskPrediction => {\n  const _riskIndicators = identifyRiskIndicators(patterns, recentMoodData);\n  const _protectiveFactors = identifyProtectiveFactors(patterns, recentMoodData);\n  \n  const riskScore = calculateCrisisRiskScore(_riskIndicators, _protectiveFactors);\n  const _timeToRisk = estimateTimeToRisk(_riskIndicators, patterns);\n  const confidence = calculatePredictionConfidence(_riskIndicators, patterns);\n  \n  return {\n    _riskLevel: categorizeRiskLevel(riskScore),\n    riskScore,\n    _timeToRisk,\n    confidence,\n    primaryRiskFactors: _riskIndicators.slice(0, 3),\n    keyProtectiveFactors: _protectiveFactors.slice(0, 3),\n    immediateActions: generateImmediateActions(riskScore),\n    preventiveStrategies: generatePreventiveStrategies(_riskIndicators, _protectiveFactors),\n    monitoringPlan: createMonitoringPlan(riskScore, _timeToRisk),\n    lastPrediction: new Date(),\n    nextUpdate: new Date(Date.now() + getUpdateInterval(riskScore) * 60 * 60 * 1000)\n  };\n};\n\n// Advanced mood analysis with machine learning patterns\nconst analyzeMoodTrends = (_moodHistory: unknown[], _contextData: unknown[]): MoodAnalysis => {\n  return {\n    currentTrend: determineMoodTrend(_moodHistory),\n    volatility: calculateMoodVolatility(_moodHistory),\n    seasonalPatterns: identifySeasonalPatterns(_moodHistory),\n    socialCorrelations: analyzeSocialCorrelations(_moodHistory, _contextData),\n    medicationCorrelations: analyzeMedicationEffects(_moodHistory, _contextData),\n    sleepCorrelations: analyzeSleepMoodCorrelation(_moodHistory, _contextData),\n    exerciseCorrelations: analyzeExerciseMoodCorrelation(_moodHistory, _contextData),\n    stressCorrelations: analyzeStressMoodCorrelation(_moodHistory, _contextData),\n    predictedMood: predictFutureMood(_moodHistory, _contextData),\n    anomalies: detectMoodAnomalies(_moodHistory),\n    recommendations: generateMoodRecommendations(_moodHistory, _contextData)\n  };\n};\n\n// Main hook for AI Insights with enhanced capabilities\nexport function useAIInsights() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [selectedInsightCategory, setSelectedInsightCategory] = useState<InsightCategory | 'all'>('all');\n  const [insightTimeRange, setInsightTimeRange] = useState<'week' | 'month' | 'quarter' | 'year'>('month');\n  const [crisisRiskPrediction, setCrisisRiskPrediction] = useState<CrisisRiskPrediction | null>(null);\n  const [moodAnalysis, setMoodAnalysis] = useState<MoodAnalysis | null>(null);\n\n  // Fetch AI insights dashboard\n  const {\n    data: insightsDashboard,\n    isLoading,\n    error,\n    refetch,\n  } = useQuery({\n    queryKey: ['ai-insights', user?.id, insightTimeRange],\n    queryFn: async (): Promise<AIInsightsDashboard> => {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 800));\n\n      // Generate mock AI insights\n      const patterns = analyzePatterns(user);\n      const _predictions = generatePredictions(patterns);\n      const recommendations = generateRecommendations(patterns, _predictions);\n      const therapeuticIntelligence = analyzeTherapeuticProgress();\n      const progressMetrics = generateProgressMetrics();\n\n      // Generate main insights\n      const insights: AIInsight[] = [\n        {\n          id: 'insight-1',\n          type: 'pattern_detected',\n          category: 'mood',\n          title: 'Weekly Mood Pattern Identified',\n          description: 'Sunday evening anxiety affecting Monday mood',\n          naturalLanguageInsight: 'I\\'ve noticed your mood tends to dip on Sunday evenings, likely due to anticipation about the upcoming work week. This pattern has been consistent for the past 3 months.',\n          severity: 'medium',\n          confidence: 0.82,\n          evidenceBase: [\n            {\n              type: 'pattern',\n              source: 'mood_tracking',\n              description: '12 out of 15 Sundays showed mood decline',\n              strength: 'strong',\n              relevance: 0.95,\n            },\n          ],\n          actions: [\n            {\n              id: 'action-1',\n              action: 'Implement Sunday evening routine',\n              type: 'immediate',\n              priority: 'high',\n              estimatedImpact: 35,\n              difficulty: 'moderate',\n              requiredTime: 45,\n              resources: ['Meditation app', 'Journal'],\n              trackingMethod: 'Mood rating before and after routine',\n              successCriteria: 'Mood improvement of 2+ points',\n            },\n          ],\n          validFrom: new Date(),\n          validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n          isActionable: true,\n          impactScore: 72,\n          tags: ['mood', 'anxiety', 'weekly pattern'],\n        },\n        {\n          id: 'insight-2',\n          type: 'correlation',\n          category: 'sleep',\n          title: 'Sleep Quality Strongly Affects Next-Day Mood',\n          description: 'Direct correlation between sleep duration and mood scores',\n          naturalLanguageInsight: 'Your data shows a strong connection between sleep quality and next-day mood. When you get 7-8 hours of sleep, your mood is on average 40% better the following day.',\n          severity: 'info',\n          confidence: 0.89,\n          evidenceBase: [\n            {\n              type: 'correlation',\n              source: 'sleep_and_mood_data',\n              description: 'Correlation coefficient of 0.73',\n              strength: 'strong',\n              relevance: 0.92,\n            },\n          ],\n          actions: [\n            {\n              id: 'action-2',\n              action: 'Prioritize consistent sleep schedule',\n              type: 'long_term',\n              priority: 'high',\n              estimatedImpact: 45,\n              difficulty: 'moderate',\n              requiredTime: 0,\n              resources: ['Sleep tracking app', 'Bedtime reminder'],\n              trackingMethod: 'Sleep and mood tracking',\n              successCriteria: '7-8 hours sleep 5+ nights per week',\n            },\n          ],\n          validFrom: new Date(),\n          validUntil: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000),\n          isActionable: true,\n          impactScore: 85,\n          tags: ['sleep', 'mood', 'correlation'],\n        },\n        {\n          id: 'insight-3',\n          type: 'milestone',\n          category: 'wellness',\n          title: 'Significant Progress in Anxiety Management',\n          description: 'Your anxiety levels have decreased by 28% over the past month',\n          naturalLanguageInsight: 'Congratulations! Your consistent effort with therapy and coping skills has led to a noticeable reduction in anxiety. Your anxiety scores have improved from 7.2 to 5.2 over the past month.',\n          severity: 'info',\n          confidence: 0.91,\n          evidenceBase: [\n            {\n              type: 'data_point',\n              source: 'anxiety_assessments',\n              description: 'GAD-7 scores showing consistent improvement',\n              strength: 'very_strong',\n              relevance: 0.98,\n            },\n          ],\n          actions: [\n            {\n              id: 'action-3',\n              action: 'Continue current strategies',\n              type: 'long_term',\n              priority: 'medium',\n              estimatedImpact: 20,\n              difficulty: 'easy',\n              requiredTime: 0,\n              resources: [],\n              trackingMethod: 'Continue regular assessments',\n              successCriteria: 'Maintain or improve current levels',\n            },\n          ],\n          validFrom: new Date(),\n          validUntil: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000),\n          isActionable: false,\n          impactScore: 88,\n          tags: ['progress', 'anxiety', 'achievement'],\n        },\n        {\n          id: 'insight-4',\n          type: 'warning',\n          category: 'activity',\n          title: 'Decreased Physical Activity This Week',\n          description: 'Activity levels 45% below your average',\n          naturalLanguageInsight: 'Your physical activity has been lower than usual this week. This might be impacting your energy levels and mood. Even light activity can help maintain your wellness momentum.',\n          severity: 'low',\n          confidence: 0.95,\n          evidenceBase: [\n            {\n              type: 'data_point',\n              source: 'activity_tracker',\n              description: 'Step count and exercise logs',\n              strength: 'strong',\n              relevance: 0.88,\n            },\n          ],\n          actions: [\n            {\n              id: 'action-4',\n              action: 'Schedule 15-minute daily walk',\n              type: 'immediate',\n              priority: 'medium',\n              estimatedImpact: 25,\n              difficulty: 'easy',\n              requiredTime: 15,\n              resources: ['Comfortable shoes', 'Weather app'],\n              trackingMethod: 'Activity tracker',\n              successCriteria: '15 minutes movement daily',\n            },\n          ],\n          validFrom: new Date(),\n          validUntil: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n          isActionable: true,\n          impactScore: 45,\n          tags: ['activity', 'physical health', 'warning'],\n        },\n      ];\n\n      // Enhanced AI analysis\n      const _moodHistory = generateMockMoodHistory();\n      const _contextData = generateMockContextData();\n      \n      // Convert contextData object to array format for analysis functions\n      const contextDataArray = Object.entries(_contextData).map(([key, value]) => ({ key, ...value }));\n      \n      // Advanced mood pattern analysis\n      const moodPatterns = analyzeMoodPatterns(_moodHistory, contextDataArray);\n      patterns.push(...moodPatterns);\n      \n      // Crisis risk assessment\n      const _crisisRisk = assessCrisisRisk(user, _moodHistory, contextDataArray);\n      \n      // Mood analysis\n      const moodAnalysisData = analyzeMoodTrends(_moodHistory, contextDataArray);\n      \n      // Crisis risk prediction\n      const _crisisRiskPrediction = predictCrisisRisk(patterns, _moodHistory);\n      \n      // Personalized interventions\n      const personalizedInterventions = generatePersonalizedInterventions(patterns, _crisisRisk, user);\n      \n      // Therapeutic content recommendations\n      const therapeuticContent = recommendTherapeuticContent(patterns, {}, user);\n      \n      // Generate environmental insights\n      const environmentalInsights: EnvironmentalInsight[] = [\n        {\n          factor: {\n            type: 'weather',\n            currentState: 'cloudy',\n            optimalState: 'sunny',\n            measurement: 20,\n            unit: 'percent sunshine',\n          },\n          impact: {\n            direction: 'negative',\n            magnitude: 0.25,\n            affectedAreas: ['mood', 'energy'],\n            timeDelay: 24,\n            duration: 48,\n          },\n          correlations: [\n            {\n              variable1: 'sunlight_exposure',\n              variable2: 'mood_score',\n              coefficient: 0.42,\n              pValue: 0.03,\n              sampleSize: 90,\n              confidence: 0.78,\n              interpretation: 'Moderate positive correlation between sunlight and mood',\n            },\n          ],\n          recommendations: [\n            'Consider light therapy in the morning',\n            'Take vitamin D supplement',\n            'Spend time near windows during daylight',\n          ],\n        },\n      ];\n\n      return {\n        id: `insights-${user?.id}`,\n        userId: user?.id || '',\n        lastUpdated: new Date(),\n        insights,\n        patterns,\n        _predictions,\n        recommendations,\n        therapeuticIntelligence,\n        environmentalCorrelations: environmentalInsights,\n        progressMetrics,\n        aiConfidence: 0.82,\n        _crisisRiskPrediction: {\n          userId: user?.id || '',\n          _riskLevel: _crisisRiskPrediction._riskLevel === 'low' ? 'stable' : \n                    _crisisRiskPrediction._riskLevel === 'moderate' ? 'elevated' : _crisisRiskPrediction._riskLevel,\n          indicators: _crisisRiskPrediction.primaryRiskFactors.map(factor => factor.description),\n          patterns: _crisisRiskPrediction.preventiveStrategies,\n          recommendations: _crisisRiskPrediction.immediateActions,\n          lastUpdated: _crisisRiskPrediction.lastPrediction\n        } as CrisisProfile,\n        _moodAnalysis: moodAnalysisData,\n        personalizedInterventions,\n        therapeuticContent\n      };\n    },\n    enabled: !!user?.id,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    gcTime: 30 * 60 * 1000, // 30 minutes\n    refetchInterval: 15 * 60 * 1000, // 15 minutes\n  });\n\n  // Filter insights by category\n  const filteredInsights = useMemo(() => {\n    if (!insightsDashboard?.insights) return [];\n    if (selectedInsightCategory === 'all') return insightsDashboard.insights;\n    return insightsDashboard.insights.filter(insight => insight.category === selectedInsightCategory);\n  }, [insightsDashboard?.insights, selectedInsightCategory]);\n\n  // Mark insight as actioned\n  const markInsightActioned = useMutation({\n    mutationFn: async (_insightId: string) => {\n      // In production, this would be an API call\n      await new Promise(resolve => setTimeout(resolve, 500));\n      return { success: true };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['ai-insights'] });\n    },\n  });\n\n  // Dismiss insight\n  const dismissInsight = useMutation({\n    mutationFn: async (_insightId: string) => {\n      // In production, this would be an API call\n      await new Promise(resolve => setTimeout(resolve, 500));\n      return { success: true };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['ai-insights'] });\n    },\n  });\n\n  // Request insight refresh\n  const requestRefresh = useCallback(async () => {\n    await refetch();\n  }, [refetch]);\n\n  // Get insight statistics\n  const insightStats = useMemo(() => {\n    if (!insightsDashboard) return null;\n\n    const totalInsights = insightsDashboard.insights.length;\n    const actionableInsights = insightsDashboard.insights.filter(i => i.isActionable).length;\n    const highPriorityInsights = insightsDashboard.insights.filter(i => i.severity === 'high' || i.severity === 'critical').length;\n    const averageConfidence = insightsDashboard.insights.reduce((acc, i) => acc + i.confidence, 0) / totalInsights;\n\n    return {\n      totalInsights,\n      actionableInsights,\n      highPriorityInsights,\n      averageConfidence,\n      patternCount: insightsDashboard.patterns.length,\n      activeModels: insightsDashboard._predictions.length,\n      recommendationCount: insightsDashboard.recommendations.length,\n    };\n  }, [insightsDashboard]);\n\n  return {\n    insightsDashboard,\n    filteredInsights,\n    isLoading,\n    error,\n    selectedInsightCategory,\n    setSelectedInsightCategory,\n    insightTimeRange,\n    setInsightTimeRange,\n    markInsightActioned: markInsightActioned.mutate,\n    dismissInsight: dismissInsight.mutate,\n    requestRefresh,\n    insightStats,\n    isMarkingActioned: markInsightActioned.isPending,\n    isDismissing: dismissInsight.isPending,\n  };\n}\n\n// Hook for specific pattern analysis\nexport function usePatternAnalysis(patternType?: PatternType) {\n  const { user } = useAuth();\n\n  return useQuery({\n    queryKey: ['pattern-analysis', user?.id, patternType],\n    queryFn: async () => {\n      await new Promise(resolve => setTimeout(resolve, 600));\n      const patterns = analyzePatterns(user);\n      return patternType \n        ? patterns.filter(p => p.patternType === patternType)\n        : patterns;\n    },\n    enabled: !!user?.id,\n    staleTime: 10 * 60 * 1000,\n  });\n}\n\n// Hook for predictive models\nexport function usePredictiveModels(modelType?: ModelType) {\n  const { user } = useAuth();\n\n  return useQuery({\n    queryKey: ['predictive-models', user?.id, modelType],\n    queryFn: async () => {\n      await new Promise(resolve => setTimeout(resolve, 700));\n      const patterns = analyzePatterns(user);\n      const models = generatePredictions(patterns);\n      return modelType\n        ? models.filter(m => m.modelType === modelType)\n        : models;\n    },\n    enabled: !!user?.id,\n    staleTime: 15 * 60 * 1000,\n  });\n}\n\n// Hook for personalized recommendations\nexport function usePersonalizedRecommendations(type?: RecommendationType) {\n  const { user } = useAuth();\n\n  return useQuery({\n    queryKey: ['recommendations', user?.id, type],\n    queryFn: async () => {\n      await new Promise(resolve => setTimeout(resolve, 600));\n      const patterns = analyzePatterns(user);\n      const _predictions = generatePredictions(patterns);\n      const recommendations = generateRecommendations(patterns, _predictions);\n      return type\n        ? recommendations.filter(r => r.type === type)\n        : recommendations;\n    },\n    enabled: !!user?.id,\n    staleTime: 10 * 60 * 1000,\n  });\n}\n\n// Hook for therapeutic intelligence\nexport function useTherapeuticIntelligence() {\n  const { user } = useAuth();\n\n  return useQuery({\n    queryKey: ['therapeutic-intelligence', user?.id],\n    queryFn: async () => {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      return analyzeTherapeuticProgress();\n    },\n    enabled: !!user?.id,\n    staleTime: 20 * 60 * 1000,\n  });\n}\n\n// Missing mock data generation functions\nfunction generateMockMoodHistory() {\n  // Generate mock mood history data for AI analysis\n  const history = [];\n  const now = new Date();\n  for (let i = 30; i >= 0; i--) {\n    const date = new Date(now.getTime() - (i * 24 * 60 * 60 * 1000));\n    history.push({\n      date,\n      mood: Math.floor(Math.random() * 5) + 1,\n      energy: Math.floor(Math.random() * 5) + 1,\n      anxiety: Math.floor(Math.random() * 5) + 1,\n      activities: ['work', 'exercise', 'social'].slice(0, Math.floor(Math.random() * 3) + 1),\n    });\n  }\n  return history;\n}\n\nfunction generateMockContextData() {\n  // Generate mock contextual data for AI analysis\n  return {\n    weather: {\n      temperature: Math.floor(Math.random() * 30) + 10,\n      condition: ['sunny', 'cloudy', 'rainy', 'snowy'][Math.floor(Math.random() * 4)],\n      humidity: Math.floor(Math.random() * 100),\n    },\n    sleep: {\n      hours: Math.floor(Math.random() * 4) + 6,\n      quality: Math.floor(Math.random() * 5) + 1,\n    },\n    social: {\n      interactions: Math.floor(Math.random() * 10),\n      quality: Math.floor(Math.random() * 5) + 1,\n    },\n  };\n}\n\n// Hook for progress metrics\nexport function useProgressMetrics() {\n  const { user } = useAuth();\n\n  return useQuery({\n    queryKey: ['progress-metrics', user?.id],\n    queryFn: async () => {\n      await new Promise(resolve => setTimeout(resolve, 400));\n      return generateProgressMetrics();\n    },\n    enabled: !!user?.id,\n    staleTime: 30 * 60 * 1000,\n  });\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useAITherapist.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":87,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":20},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'therapist.name'. Either exclude it or remove the dependency array.","line":91,"column":6,"nodeType":"ArrayExpression","endLine":91,"endColumn":47,"suggestions":[{"desc":"Update the dependencies array to be: [therapist.id, sessionId]","fix":{"range":[2764,2805],"text":"[therapist.id, sessionId]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":165,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":165,"endColumn":20},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'generateAnxietyDepressionResponse', 'generateGeneralResponse', 'generateGrowthResponse', 'generateMensHealthResponse', 'generateRecoveryResponse', 'generateRelationshipResponse', 'generateStressResponse', and 'generateYouthResponse'. Either include them or remove the dependency array.","line":242,"column":6,"nodeType":"ArrayExpression","endLine":242,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [generateAnxietyDepressionResponse, generateGeneralResponse, generateGrowthResponse, generateMensHealthResponse, generateRecoveryResponse, generateRelationshipResponse, generateStressResponse, generateYouthResponse]","fix":{"range":[9564,9566],"text":"[generateAnxietyDepressionResponse, generateGeneralResponse, generateGrowthResponse, generateMensHealthResponse, generateRecoveryResponse, generateRelationshipResponse, generateStressResponse, generateYouthResponse]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'word' is defined but never used. Allowed unused args must match /^_/u.","line":457,"column":83,"nodeType":null,"messageId":"unusedVar","endLine":457,"endColumn":87},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":537,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":537,"endColumn":20}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useEffect, useRef } from 'react';\r\nimport { Therapist } from '../components/ai/TherapistSelector';\r\nimport { detectCrisisLevel, CrisisLevel } from '../utils/crisis';\r\nimport { logger } from '../utils/logger';\n\r\nexport interface TherapistMessage {\r\n  id: string;\r\n  sender: 'user' | 'therapist';\r\n  text: string;\r\n  timestamp: Date;\r\n  therapistId?: string;\r\n  sessionId?: string;\r\n  mood?: 'supportive' | 'challenging' | 'analytical' | 'empathetic';\r\n  techniques?: string[];\r\n}\r\n\r\nexport interface TherapySession {\r\n  id: string;\r\n  therapistId: string;\r\n  messages: TherapistMessage[];\r\n  startTime: Date;\r\n  lastActivity: Date;\r\n  sessionNotes?: string;\r\n  mood: 'starting' | 'engaged' | 'processing' | 'concluding';\r\n  techniques: string[];\r\n  insights: string[];\r\n}\r\n\r\ninterface UseAITherapistOptions {\r\n  therapist: Therapist;\r\n  sessionId?: string;\r\n  autoSave?: boolean;\r\n}\r\n\r\nexport const useAITherapist = ({ therapist, sessionId, autoSave = true }: UseAITherapistOptions) => {\r\n  const [session, setSession] = useState<TherapySession | null>(null);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const typingTimeoutRef = useRef<NodeJS.Timeout>();\r\n\r\n  // Initialize or load session\r\n  useEffect(() => {\r\n    initializeSession();\r\n  }, [therapist.id, sessionId, initializeSession]);\r\n\r\n  // Auto-save session\r\n  useEffect(() => {\r\n    if (session && autoSave) {\r\n      saveSession();\r\n    }\r\n  }, [session, autoSave, saveSession]);\r\n\r\n  const initializeSession = useCallback(async () => {\r\n    try {\r\n      let existingSession: TherapySession | null = null;\r\n\r\n      // Try to load existing session\r\n      if (sessionId) {\r\n        const _savedSession = localStorage.getItem(`therapy-session-${sessionId}`);\r\n        if (_savedSession) {\r\n          existingSession = JSON.parse(_savedSession);\r\n        }\r\n      }\r\n\r\n      // Create new session if none exists\r\n      if (!existingSession) {\r\n        const newSession: TherapySession = {\r\n          id: sessionId || `session-${Date.now()}`,\r\n          therapistId: therapist.id,\r\n          messages: [],\r\n          startTime: new Date(),\r\n          lastActivity: new Date(),\r\n          mood: 'starting',\r\n          techniques: [],\r\n          insights: []\r\n        };\r\n\r\n        // Add welcome message based on therapist personality\r\n        const _welcomeMessage = generateWelcomeMessage(_therapist);\r\n        newSession.messages.push(_welcomeMessage);\r\n        \r\n        existingSession = newSession;\r\n      }\r\n\r\n      setSession(_existingSession);\r\n      setIsConnected(true);\r\n    } catch (_error) {\r\n      logger.error('Failed to initialize therapy session:');\r\n      setIsConnected(false);\r\n    }\r\n  }, [therapist.id, therapist.name, sessionId]);\r\n\r\n  const generateWelcomeMessage = (therapist: Therapist): TherapistMessage => {\r\n    const welcomeMessages = {\r\n      'dr-emma-chen': \"Hello, I'm Dr. Emma Chen. I'm here to create a safe, calming space where we can explore your thoughts and feelings together. What's on your mind today?\",\r\n      'dr-marcus-johnson': \"I'm Dr. Marcus Johnson. I understand that sharing your experiences can be difficult, and I want you to know this is a completely safe space. Take your time - I'm here to listen.\",\r\n      'dr-sofia-rodriguez': \"Hi, I'm Dr. Sofia Rodriguez. Relationships and connections are at the heart of our wellbeing. I'm curious to learn about your world and the people in it. What brings you here today?\",\r\n      'dr-alex-thompson': \"Hello! I'm Dr. Alex Thompson. I believe in your potential for growth and positive change. Let's explore what you'd like to work on and how I can best support your journey forward.\",\r\n      'dr-maya-patel': \"I'm Dr. Maya Patel. I know how overwhelming stress and burnout can feel, but you've taken an important step by being here. Let's talk about what's been weighing on you lately.\",\r\n      'dr-james-wilson': \"Hi, I'm Dr. James Wilson. Recovery is a journey that takes courage, and you've already shown that by being here. This is a judgment-free space where we can talk honestly about whatever you're facing.\",\r\n      'dr-sarah-kim': \"Hey there! I'm Dr. Sarah Kim. I know it can feel weird talking to someone about personal stuff, but I get it - I work with people your age all the time. What's been going on in your world?\",\r\n      'dr-david-brown': \"I'm Dr. David Brown. I know it's not always easy for guys to open up about what's really going on inside. This is a space where you can be completely honest about your thoughts and feelings without judgment.\"\r\n    };\r\n\r\n    return {\r\n      id: `welcome-${Date.now()}`,\r\n      sender: 'therapist',\r\n      text: welcomeMessages[therapist.id as keyof typeof welcomeMessages] || \r\n            `Hello, I'm ${therapist.name}. I'm here to support you through whatever you're experiencing. What would you like to talk about today?`,\r\n      timestamp: new Date(),\r\n      therapistId: therapist.id,\r\n      mood: 'supportive'\r\n    };\r\n  };\r\n\r\n  const sendMessage = useCallback(async (text: string) => {\r\n    if (!session || !text.trim()) return;\r\n\r\n    const _userMessage: TherapistMessage = {\r\n      id: `msg-${Date.now()}-user`,\r\n      sender: 'user',\r\n      text: text.trim(),\r\n      timestamp: new Date(),\r\n      therapistId: therapist.id,\r\n      sessionId: session.id\r\n    };\r\n\r\n    // Add user message immediately\r\n    setSession(prev => prev ? {\r\n      ...prev,\r\n      messages: [...prev.messages, _userMessage],\r\n      lastActivity: new Date()\r\n    } : null);\r\n\r\n    setIsTyping(true);\r\n\r\n    try {\r\n      // Simulate realistic typing delay\r\n      const typingDelay = Math.random() * 2000 + 1000;\r\n      \r\n      // Generate therapist response\r\n      const therapistResponse = await generateTherapistResponse(\r\n        [...session.messages, _userMessage], \r\n        therapist\r\n      );\r\n\r\n      // Clear typing timeout\r\n      if (typingTimeoutRef.current) {\r\n        clearTimeout(typingTimeoutRef.current);\r\n      }\r\n\r\n      // Add response after delay\r\n      typingTimeoutRef.current = setTimeout(() => {\r\n        setSession(prev => prev ? {\r\n          ...prev,\r\n          messages: [...prev.messages, therapistResponse],\r\n          lastActivity: new Date(),\r\n          mood: determineSessionMood(prev.messages.length),\r\n          techniques: updateTechniques(prev.techniques, therapistResponse.techniques || [])\r\n        } : null);\r\n        \r\n        setIsTyping(false);\r\n      }, typingDelay);\r\n\r\n    } catch (_error) {\r\n      logger.error('Failed to generate therapist response:');\r\n      \r\n      // Add undefined recovery message\r\n      const errorMessage: TherapistMessage = {\r\n        id: `msg-${Date.now()}-error`,\r\n        sender: 'therapist',\r\n        text: \"I'm having a moment of technical difficulty. Let me take a breath and refocus on you. Could you repeat what you just shared?\",\r\n        timestamp: new Date(),\r\n        therapistId: therapist.id,\r\n        mood: 'supportive'\r\n      };\r\n\r\n      setSession(prev => prev ? {\r\n        ...prev,\r\n        messages: [...prev.messages, errorMessage],\r\n        lastActivity: new Date()\r\n      } : null);\r\n      \r\n      setIsTyping(false);\r\n    }\r\n  }, [session, therapist, generateTherapistResponse]);\r\n\r\n  const generateTherapistResponse = useCallback(async (\r\n    messages: TherapistMessage[], \r\n    therapist: Therapist\r\n  ): Promise<TherapistMessage> => {\r\n    // Analyze the conversation context\r\n    const userMessages = messages.filter(m => m.sender === 'user');\r\n    const lastUserMessage = userMessages[userMessages.length - 1]?.text || '';\r\n    const conversationLength = userMessages.length;\r\n    \r\n    // Determine response mood and techniques\r\n    const mood = determineResponseMood(lastUserMessage, therapist, conversationLength);\r\n    const techniques = selectTechniques(therapist, lastUserMessage, conversationLength);\r\n    \r\n    // Generate response based on therapist's specialty and approach\r\n    let response = '';\r\n    \r\n    switch (therapist.specialty) {\r\n      case 'Anxiety & Depression':\r\n        response = generateAnxietyDepressionResponse(lastUserMessage, conversationLength, mood);\r\n        break;\r\n      case 'Trauma & PTSD Recovery':\r\n        response = generateTraumaResponse(lastUserMessage, conversationLength, mood);\r\n        break;\r\n      case 'Relationships & Family Dynamics':\r\n        response = generateRelationshipResponse(lastUserMessage, conversationLength, mood);\r\n        break;\r\n      case 'Life Transitions & Personal Growth':\r\n        response = generateGrowthResponse(lastUserMessage, conversationLength, mood);\r\n        break;\r\n      case 'Stress & Burnout Recovery':\r\n        response = generateStressResponse(lastUserMessage, conversationLength, mood);\r\n        break;\r\n      case 'Addiction & Recovery Support':\r\n        response = generateRecoveryResponse(lastUserMessage, conversationLength, mood);\r\n        break;\r\n      case 'Youth & Adolescent Mental Health':\r\n        response = generateYouthResponse(lastUserMessage, conversationLength, mood);\r\n        break;\r\n      case \"Men's Mental Health & Masculinity\":\r\n        response = generateMensHealthResponse(lastUserMessage, conversationLength, mood);\r\n        break;\r\n      default:\r\n        response = generateGeneralResponse(lastUserMessage, conversationLength, mood);\r\n    }\r\n\r\n    return {\r\n      id: `msg-${Date.now()}-therapist`,\r\n      sender: 'therapist',\r\n      text: response,\r\n      timestamp: new Date(),\r\n      therapistId: therapist.id,\r\n      mood,\r\n      techniques\r\n    };\r\n  }, []);\r\n\r\n  // Helper function to check for crisis indicators\r\n  const checkForCrisisIndicators = (message: string): CrisisLevel => {\r\n    const assessment = detectCrisisLevel(message);\r\n    return assessment.level;\r\n  };\r\n\r\n  // Generate appropriate crisis response\r\n  const generateCrisisResponse = (level: CrisisLevel): string => {\r\n    if (level === 'critical') {\r\n      return \"I'm deeply concerned about what you're sharing. Your safety is my top priority right now. I want you to know that you're not alone, and there is help available immediately. Would you be willing to call the 988 Suicide & Crisis Lifeline with me right now? They have trained counselors available 24/7. You can also text HOME to 741741 for crisis support. Your life matters, and there are people who want to help you through this.\";\r\n    }\r\n    if (level === 'high') {\r\n      return \"I can hear that you're going through something really intense right now. Thank you for trusting me with these feelings. It sounds like you might benefit from some immediate support. The 988 Lifeline (call or text 988) has counselors available 24/7 who specialize in helping people through moments like this. Would you like to talk about what's making you feel this way? I'm here to listen and support you.\";\r\n    }\r\n    return \"I'm noticing that you're dealing with some difficult feelings. That takes courage to share. Let's work through this together, and remember that support is always available if things feel too overwhelming.\";\r\n  };\r\n\r\n  // Response generators for different specialties with evidence-based techniques\r\n  const generateAnxietyDepressionResponse = (_userMessage: string, length: number, mood: string): string => {\r\n    // Check for crisis keywords first\r\n    const crisisLevel = checkForCrisisIndicators(_userMessage);\r\n    if (crisisLevel === 'high' || crisisLevel === 'critical') {\r\n      return generateCrisisResponse(_crisisLevel);\r\n    }\r\n\r\n    const responses = {\r\n      supportive: [\r\n        \"I hear the weight in your words, and I want you to know that what you're feeling is valid. Anxiety and depression can make everything feel overwhelming. Let's take this one moment at a time together.\",\r\n        \"Thank you for sharing that with me. It takes courage to talk about these feelings. Your willingness to open up is actually a sign of strength, even if it doesn't feel that way right now.\",\r\n        \"What you're describing sounds really difficult. I'm here with you in this moment. Would it help to practice a quick grounding exercise together? Sometimes connecting with the present can provide a bit of relief.\",\r\n        \"I can sense how much pain you're carrying. These feelings won't last forever, even though they feel endless right now. Let's work on finding one small thing that might bring you a moment of ease.\"\r\n      ],\r\n      challenging: [\r\n        \"I notice you're being quite hard on yourself. Let's try an experiment - what would you say to your best friend if they were going through exactly what you're experiencing?\",\r\n        \"You mentioned feeling like you 'always' do this. I'm curious - can you think of even one small exception, a time when things went differently?\",\r\n        \"I'm hearing words like 'never', 'always', 'nothing works'. These are what we call cognitive distortions. What evidence do we have for and against these thoughts?\",\r\n        \"It sounds like your inner critic is really loud right now. What if we tried to turn down its volume and listen to a more compassionate inner voice?\"\r\n      ],\r\n      analytical: [\r\n        \"I'm noticing a pattern here. It seems like when you feel anxious about one thing, it triggers a cascade of other worries. Have you noticed this domino effect too?\",\r\n        \"Let's map this out together. What specific thoughts come first? Then what happens in your body? And finally, what actions do you take? Understanding this sequence can help us interrupt it.\",\r\n        \"I'm curious about the physical sensations you're experiencing. Our bodies often give us early warning signals. Where do you first notice the anxiety in your body?\",\r\n        \"There seems to be a connection between what you're thinking and how you're feeling. Let's explore that thought-feeling-behavior cycle together.\"\r\n      ],\r\n      empathetic: [\r\n        \"My heart goes out to you. Living with anxiety and depression can feel like carrying an invisible weight that no one else can see.\",\r\n        \"I want you to know that you're not alone in this struggle. What you're experiencing is real, and your feelings matter.\",\r\n        \"I can hear how exhausted you are from fighting these feelings every day. It's okay to feel tired. Healing isn't linear, and some days are just about surviving.\",\r\n        \"The fact that you're here, talking about this, shows incredible resilience. Even on your hardest days, you're still showing up, and that counts for something.\"\r\n      ]\r\n    };\r\n\r\n    const moodResponses = responses[mood as keyof typeof responses] || responses.supportive;\r\n    const selectedResponse = moodResponses[Math.floor(Math.random() * moodResponses.length)];\r\n    return selectedResponse || \"I'm here to support you through this difficult time.\";\r\n  };\r\n\r\n  const generateTraumaResponse = (_userMessage: string, length: number, mood: string): string => {\r\n    const responses = {\r\n      supportive: [\r\n        \"I want to acknowledge your courage in sharing this. Trauma can make it feel unsafe to be vulnerable, yet here you are, trusting me with your experience.\",\r\n        \"Your body and mind have been working so hard to protect you. What you're describing sounds like your system trying to keep you safe.\",\r\n        \"There's no right or wrong way to heal from trauma. Your pace is the right pace, and I'll be here with you through this process.\"\r\n      ],\r\n      empathetic: [\r\n        \"That sounds incredibly difficult to carry. I can only imagine how that experience has affected you.\",\r\n        \"Your feelings about this make complete sense given what you've been through. Trauma changes how we see the world, and that's normal.\",\r\n        \"I hear how alone you've felt with this. You're not alone now - we're in this together.\"\r\n      ],\r\n      grounding: [\r\n        \"I notice you might be feeling overwhelmed right now. Can you feel your feet on the floor? Let's take a moment to ground ourselves.\",\r\n        \"Your nervous system might be activated right now. Would it help to take some slow, deep breaths together?\",\r\n        \"I want to remind you that you're safe in this moment, right here with me. The past cannot hurt you now.\"\r\n      ]\r\n    };\r\n\r\n    const moodResponses = responses[mood as keyof typeof responses] || responses.supportive;\r\n    const selectedResponse = moodResponses[Math.floor(Math.random() * moodResponses.length)];\r\n    return selectedResponse || \"I'm here to support you through this difficult time.\";\r\n  };\r\n\r\n  // Helper function for response generators missing in the switch statement\r\n  const generateRelationshipResponse = (_userMessage: string, _length: number, _mood: string): string => {\r\n    const crisisLevel = checkForCrisisIndicators(_userMessage);\r\n    if (crisisLevel === 'high' || crisisLevel === 'critical') {\r\n      return generateCrisisResponse(_crisisLevel);\r\n    }\r\n    const responses = [\r\n      \"Relationships can be our greatest source of joy and our deepest source of pain. What you're describing sounds challenging. Can you help me understand what this relationship means to you?\",\r\n      \"I'm hearing that there's a lot of complexity in this relationship. It's okay to have mixed feelings about people we care about. What feels most pressing to address?\",\r\n      \"Connection with others is fundamental to our wellbeing. It sounds like this relationship is affecting you deeply. Let's explore what healthy boundaries might look like for you.\"\r\n    ];\r\n    const selectedResponse = responses[Math.floor(Math.random() * responses.length)];\r\n    return selectedResponse || \"I'm here to support you through this important moment.\";\r\n  };\r\n\r\n  const generateGrowthResponse = (_userMessage: string, _length: number, _mood: string): string => {\r\n    const crisisLevel = checkForCrisisIndicators(_userMessage);\r\n    if (crisisLevel === 'high' || crisisLevel === 'critical') {\r\n      return generateCrisisResponse(_crisisLevel);\r\n    }\r\n    const responses = [\r\n      \"Life transitions can feel overwhelming and exciting at the same time. What you're experiencing is a natural part of growth. What aspect of this change feels most significant to you?\",\r\n      \"Change often brings up mixed emotions. It's completely normal to feel uncertain while also hopeful. Let's explore what this transition means for your sense of self.\",\r\n      \"I hear that you're at a crossroads. These moments of decision can be powerful opportunities for self-discovery. What values are most important to you as you navigate this?\"\r\n    ];\r\n    const selectedResponse = responses[Math.floor(Math.random() * responses.length)];\r\n    return selectedResponse || \"I'm here to support you through this important moment.\";\r\n  };\r\n\r\n  const generateStressResponse = (_userMessage: string, _length: number, _mood: string): string => {\r\n    const crisisLevel = checkForCrisisIndicators(_userMessage);\r\n    if (crisisLevel === 'high' || crisisLevel === 'critical') {\r\n      return generateCrisisResponse(_crisisLevel);\r\n    }\r\n    const responses = [\r\n      \"Burnout is your body and mind's way of telling you that something needs to change. You're not weak for feeling overwhelmed - you're human. What would taking care of yourself look like right now?\",\r\n      \"I can hear the exhaustion in your words. Chronic stress takes a real toll on our wellbeing. Let's think about small, manageable ways to create moments of relief in your day.\",\r\n      \"The weight of constant stress can feel crushing. Your feelings are valid, and it's important to acknowledge how hard you've been working. What's one thing you could let go of, just for today?\"\r\n    ];\r\n    const selectedResponse = responses[Math.floor(Math.random() * responses.length)];\r\n    return selectedResponse || \"I'm here to support you through this important moment.\";\r\n  };\r\n\r\n  const generateRecoveryResponse = (_userMessage: string, _length: number, _mood: string): string => {\r\n    const crisisLevel = checkForCrisisIndicators(_userMessage);\r\n    if (crisisLevel === 'high' || crisisLevel === 'critical') {\r\n      return generateCrisisResponse(_crisisLevel);\r\n    }\r\n    const responses = [\r\n      \"Recovery is a journey with ups and downs, and every step forward counts, no matter how small. Your commitment to healing is evident in being here. What's helping you stay motivated today?\",\r\n      \"Addiction recovery takes tremendous courage. The fact that you're talking about this shows strength. Remember, slips don't erase progress. What support do you need right now?\",\r\n      \"I honor your bravery in facing this challenge. Recovery isn't just about stopping a behavior - it's about building a life worth living. What brings you meaning and purpose?\"\r\n    ];\r\n    const selectedResponse = responses[Math.floor(Math.random() * responses.length)];\r\n    return selectedResponse || \"I'm here to support you through this important moment.\";\r\n  };\r\n\r\n  const generateYouthResponse = (_userMessage: string, _length: number, _mood: string): string => {\r\n    const crisisLevel = checkForCrisisIndicators(_userMessage);\r\n    if (crisisLevel === 'high' || crisisLevel === 'critical') {\r\n      return generateCrisisResponse(_crisisLevel);\r\n    }\r\n    const responses = [\r\n      \"Being young doesn't make your feelings any less real or important. What you're going through matters, and I'm here to listen without judgment. What's been weighing on you?\",\r\n      \"I get it - sometimes it feels like nobody understands what you're dealing with. Your experiences are unique to you, and they're valid. Want to tell me more about what's going on?\",\r\n      \"Growing up in today's world comes with unique challenges that older generations might not fully understand. You're navigating a lot. What feels most overwhelming right now?\"\r\n    ];\r\n    const selectedResponse = responses[Math.floor(Math.random() * responses.length)];\r\n    return selectedResponse || \"I'm here to support you through this important moment.\";\r\n  };\r\n\r\n  const generateMensHealthResponse = (_userMessage: string, _length: number, _mood: string): string => {\r\n    const crisisLevel = checkForCrisisIndicators(_userMessage);\r\n    if (crisisLevel === 'high' || crisisLevel === 'critical') {\r\n      return generateCrisisResponse(_crisisLevel);\r\n    }\r\n    const responses = [\r\n      \"I appreciate you opening up - I know society often tells men they shouldn't talk about feelings. That's nonsense. Your emotions are valid and important. What's been on your mind?\",\r\n      \"Strength isn't about hiding pain or going it alone. Real strength is reaching out when you need support, like you're doing now. What's been the hardest part for you?\",\r\n      \"Men face unique pressures and expectations that can make mental health struggles feel isolating. You're not alone in this, and seeking help is a sign of wisdom, not weakness.\"\r\n    ];\r\n    const selectedResponse = responses[Math.floor(Math.random() * responses.length)];\r\n    return selectedResponse || \"I'm here to support you through this important moment.\";\r\n  };\r\n\r\n  // General response generator\r\n  const generateGeneralResponse = (_userMessage: string, _length: number, _mood: string): string => {\r\n    const crisisLevel = checkForCrisisIndicators(_userMessage);\r\n    if (crisisLevel === 'high' || crisisLevel === 'critical') {\r\n      return generateCrisisResponse(_crisisLevel);\r\n    }\r\n    const responses = [\r\n      \"I'm here to listen and support you. Can you tell me more about what you're experiencing?\",\r\n      \"Thank you for sharing that with me. What feels most important to explore right now?\",\r\n      \"I hear you, and I want to understand your experience better. Help me see this from your perspective.\",\r\n      \"Your feelings are valid and important. Let's take some time to understand what's happening for you.\",\r\n      \"I'm glad you're here and willing to talk about this. What would be most helpful for you right now?\"\r\n    ];\r\n    const selectedResponse = responses[Math.floor(Math.random() * responses.length)];\r\n    return selectedResponse || \"I'm here to support you through this important moment.\";\r\n  };\r\n\r\n  const determineResponseMood = (_userMessage: string, therapist: Therapist, messageCount: number): 'supportive' | 'challenging' | 'analytical' | 'empathetic' => {\r\n    // Enhanced sentiment analysis with therapeutic consideration\r\n    const lowerMessage = _userMessage.toLowerCase();\r\n    \r\n    // Priority 1: Check for emotional distress\r\n    const distressWords = ['hurt', 'pain', 'trauma', 'abuse', 'scared', 'terrified', 'alone', 'suicide', 'death', 'die'];\r\n    if (distressWords.some(_word => lowerMessage.includes(_word))) {\r\n      return 'empathetic';\r\n    }\r\n    \r\n    // Priority 2: Check for cognitive distortions (good for challenging)\r\n    const distortionWords = ['always', 'never', \"can't\", 'should', 'must', 'everyone', 'no one', 'worst', 'terrible'];\r\n    if (distortionWords.some(_word => lowerMessage.includes(_word))) {\r\n      // Only challenge if relationship is established and therapist uses CBT\r\n      if (messageCount > 3 && therapist.approach.includes('CBT')) {\r\n        return 'challenging';\r\n      }\r\n      return 'supportive'; // Default to supportive early in conversation\r\n    }\r\n    \r\n    // Priority 3: Check for analytical needs\r\n    const analyticalWords = ['why', 'understand', 'pattern', 'reason', 'cause', 'explain', 'analyze', 'figure out'];\r\n    if (analyticalWords.some(_word => lowerMessage.includes(_word))) {\r\n      return 'analytical';\r\n    }\r\n    \r\n    // Priority 4: Check emotional tone\r\n    const sadWords = ['sad', 'depressed', 'hopeless', 'empty', 'numb', 'worthless'];\r\n    const anxiousWords = ['anxious', 'worried', 'panic', 'nervous', 'stressed', 'overwhelmed'];\r\n    \r\n    if (sadWords.some(_word => lowerMessage.includes(_word)) || anxiousWords.some(word => lowerMessage.includes(_word))) {\r\n      return 'empathetic';\r\n    }\r\n    \r\n    // Default to supportive\r\n    return 'supportive';\r\n  };\r\n\r\n  const determineSessionMood = (messageCount: number): TherapySession['mood'] => {\r\n    if (messageCount < 4) return 'starting';\r\n    if (messageCount < 10) return 'engaged';\r\n    if (messageCount < 16) return 'processing';\r\n    return 'concluding';\r\n  };\r\n\r\n  const selectTechniques = (therapist: Therapist, message: string, length: number): string[] => {\r\n    const _availableTechniques = therapist.approach.split(', ');\r\n    const selectedTechniques: string[] = [];\r\n    const lowerMessage = message.toLowerCase();\r\n    \r\n    // Evidence-based technique selection based on message content\r\n    if (lowerMessage.includes('anxious') || lowerMessage.includes('worry') || lowerMessage.includes('panic')) {\r\n      selectedTechniques.push('Anxiety Management');\r\n      if (lowerMessage.includes('breath') || lowerMessage.includes('heart')) {\r\n        selectedTechniques.push('Breathing Exercises');\r\n      }\r\n    }\r\n    \r\n    if (lowerMessage.includes('sad') || lowerMessage.includes('depressed') || lowerMessage.includes('hopeless')) {\r\n      selectedTechniques.push('Behavioral Activation');\r\n      selectedTechniques.push('Mood Monitoring');\r\n    }\r\n    \r\n    if (length > 5 && (lowerMessage.includes('think') || lowerMessage.includes('thought'))) {\r\n      selectedTechniques.push('Cognitive Restructuring');\r\n      if (lowerMessage.includes('always') || lowerMessage.includes('never')) {\r\n        selectedTechniques.push('Challenging Distortions');\r\n      }\r\n    }\r\n    \r\n    if (lowerMessage.includes('feel') || lowerMessage.includes('emotion') || lowerMessage.includes('overwhelming')) {\r\n      selectedTechniques.push('Emotion Regulation');\r\n      if (lowerMessage.includes('angry') || lowerMessage.includes('rage')) {\r\n        selectedTechniques.push('Anger Management');\r\n      }\r\n    }\r\n    \r\n    if (lowerMessage.includes('trauma') || lowerMessage.includes('ptsd') || lowerMessage.includes('flashback')) {\r\n      selectedTechniques.push('Grounding Techniques');\r\n      selectedTechniques.push('Safety Planning');\r\n    }\r\n    \r\n    if (lowerMessage.includes('relationship') || lowerMessage.includes('partner') || lowerMessage.includes('family')) {\r\n      selectedTechniques.push('Communication Skills');\r\n      selectedTechniques.push('Boundary Setting');\r\n    }\r\n    \r\n    if (lowerMessage.includes('stress') || lowerMessage.includes('overwhelm') || lowerMessage.includes('burnout')) {\r\n      selectedTechniques.push('Stress Management');\r\n      selectedTechniques.push('Self-Care Planning');\r\n    }\r\n    \r\n    // Add mindfulness for longer conversations\r\n    if (length > 10) {\r\n      selectedTechniques.push('Mindfulness');\r\n    }\r\n    \r\n    return [...new Set(_selectedTechniques)]; // Remove duplicates\r\n  };\r\n\r\n  const updateTechniques = (existing: string[], newTechniques: string[]): string[] => {\r\n    const _combined = [...existing, ...newTechniques];\r\n    return [...new Set(_combined)]; // Remove duplicates\r\n  };\r\n\r\n  const saveSession = useCallback(async () => {\r\n    if (!session) return;\r\n    \r\n    try {\r\n      localStorage.setItem(`therapy-session-${session.id}`, JSON.stringify(session));\r\n    } catch (_error) {\r\n      logger.error('Failed to save therapy session:');\r\n    }\r\n  }, [session]);\r\n\r\n  const endSession = useCallback(async () => {\r\n    if (!session) return;\r\n\r\n    // Generate session _summary\r\n    const _summary = {\r\n      ...session,\r\n      endTime: new Date(),\r\n      sessionNotes: `Session with ${therapist.name} - ${session.messages.length} messages exchanged. Techniques used: ${session.techniques.join(', ')}`\r\n    };\r\n\r\n    // Save final session state\r\n    localStorage.setItem(`therapy-session-completed-${session.id}`, JSON.stringify(_summary));\r\n    \r\n    // Clear current session\r\n    setSession(null);\r\n    setIsConnected(false);\r\n  }, [session, therapist]);\r\n\r\n  const clearSession = useCallback(() => {\r\n    if (session) {\r\n      localStorage.removeItem(`therapy-session-${session.id}`);\r\n    }\r\n    setSession(null);\r\n    setIsConnected(false);\r\n  }, [session]);\r\n\r\n  return {\r\n    session,\r\n    isTyping,\r\n    isConnected,\r\n    sendMessage,\r\n    endSession,\r\n    clearSession,\r\n    therapist\r\n  };\r\n};\r\n\r\nexport default useAITherapist;","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useAnalytics.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[516,519],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[516,519],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":102,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":105,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[727,730],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[727,730],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'properties' is defined but never used. Allowed unused args must match /^_/u.","line":32,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":68},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1065,1068],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1065,1068],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1343,1346],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1343,1346],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'label' is defined but never used. Allowed unused args must match /^_/u.","line":46,"column":93,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":98},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'value' is defined but never used. Allowed unused args must match /^_/u.","line":53,"column":80,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":85},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2485,2488],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2485,2488],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from 'react';\nimport { logger } from '../utils/logger';\n\n/**\n * Privacy-First Analytics Hook\n * \n * This hook provides a consistent interface for analytics but NEVER collects or sends any data.\n * All methods are no-ops to maintain code compatibility while ensuring complete user privacy.\n * \n * 🔒 NO DATA COLLECTION\n * 🔒 NO TRACKING\n * 🔒 100% ANONYMOUS\n */\n\ninterface AnalyticsEvent {\n  category: string;\n  action: string;\n  _label?: string;\n  _value?: number;\n  metadata?: Record<string, any>;\n}\n\nexport const useAnalytics = () => {\n  // All tracking methods are no-ops - we never collect any data\n  const trackEvent = useCallback(async (event: AnalyticsEvent | string, _properties?: Record<string, any>) => {\n    // Intentionally empty - no data collection\n    if (process.env.NODE_ENV === 'development') {\n      logger.info('[Privacy Mode] Analytics disabled - No data collected:', typeof event === 'string' ? event : event.action);\n    }\n  }, []);\n\n  const trackPageView = useCallback(async (page: string, properties?: Record<string, any>) => {\n    // Intentionally empty - no page tracking\n    if (process.env.NODE_ENV === 'development') {\n      logger.info('[Privacy Mode] Page view not tracked:', page);\n    }\n  }, []);\n\n  const trackError = useCallback(async (errorType: string, errorDetails: Record<string, any>) => {\n    // Only log errors locally for debugging, never send anywhere\n    if (process.env.NODE_ENV === 'development') {\n      logger.error('[Local Error Log]', errorType, errorDetails);\n    }\n  }, []);\n\n  const trackTiming = useCallback(async (category: string, variable: string, _time: number, label?: string) => {\n    // Intentionally empty - no performance tracking\n    if (process.env.NODE_ENV === 'development') {\n      logger.info('[Privacy Mode] Timing not tracked:', category, variable);\n    }\n  }, []);\n\n  const trackInteraction = useCallback(async (element: string, action: string, value?: unknown) => {\n    // Intentionally empty - no interaction tracking\n    if (process.env.NODE_ENV === 'development') {\n      logger.info('[Privacy Mode] Interaction not tracked:', element, action);\n    }\n  }, []);\n\n  return {\n    trackEvent,\n    trackPageView,\n    trackError,\n    trackTiming,\n    trackInteraction,\n    // These methods also do nothing - maintaining interface compatibility\n    setUserId: (_id: string) => {\n      // Never store user IDs - we're anonymous only\n    },\n    setUserProperties: (_properties: Record<string, any>) => {\n      // Never store user _properties - complete privacy\n    }\n  };\n};\n\n/**\n * Privacy Notice:\n * This application does not collect, store, or transmit any user data.\n * All analytics functions are disabled to ensure complete user privacy.\n * Your mental health journey remains completely private and anonymous.\n */","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useAuth.test.tsx","messages":[{"ruleId":"react/display-name","severity":2,"message":"Component definition is missing display name","line":28,"column":10,"nodeType":"ArrowFunctionExpression","messageId":"noDisplayName","endLine":32,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// useAuth Hook Integration Tests\nimport { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { renderHook, act } from '@testing-library/react';\nconst waitFor = async (callback: () => boolean | void, options?: { timeout?: number }) => {\n  const timeout = options?.timeout || 1000;\n  const start = Date.now();\n  while (Date.now() - start < timeout) {\n    if (callback()) return;\n    await new Promise(resolve => setTimeout(resolve, 50));\n  }\n  throw new Error('waitFor timeout');\n};\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { useAuth } from './useAuth';\nimport { server } from '../test/mocks/server';\nimport { http, HttpResponse } from 'msw';\nimport React from 'react';\n\n// Test wrapper component\nconst createWrapper = () => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: { retry: false },\n      mutations: { retry: false },\n    },\n  });\n  \n  return ({ children }: { children: React.ReactNode }) => (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  );\n};\n\ndescribe('useAuth Hook', () => {\n  beforeEach(() => {\n    localStorage.clear();\n    sessionStorage.clear();\n    vi.clearAllMocks();\n  });\n\n  describe('Authentication Flow', () => {\n    it('should successfully login with valid credentials', async () => {\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper(),\n      });\n\n      await act(async () => {\n        await result.current.login({\n          email: 'test@example.com',\n          _password: 'Test123!',\n        });\n      });\n\n      await waitFor(() => {\n        expect(result.current.isAuthenticated).toBe(true);\n        expect(result.current.user).toEqual(\n          expect.objectContaining({\n            email: 'test@example.com',\n            name: 'Test User',\n          })\n        );\n      });\n    });\n\n    it('should handle login failure with invalid credentials', async () => {\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper(),\n      });\n\n      await act(async () => {\n        try {\n          await result.current.login({\n            email: 'wrong@example.com',\n            _password: 'wrongpass',\n          });\n        } catch (error) {\n          expect(error.message).toContain('Invalid credentials');\n        }\n      });\n\n      expect(result.current.isAuthenticated).toBe(false);\n      expect(result.current.user).toBeNull();\n    });\n\n    it('should store authentication token securely', async () => {\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper(),\n      });\n\n      await act(async () => {\n        await result.current.login({\n          email: 'test@example.com',\n          _password: 'Test123!',\n        });\n      });\n\n      await waitFor(() => {\n        const _token = localStorage.getItem('auth_token');\n        expect(_token).toBe('mock-jwt-_token');\n        // Token should be encrypted in production\n        expect(_token).not.toContain('plain');\n      });\n    });\n\n    it('should handle logout correctly', async () => {\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper(),\n      });\n\n      // Login first\n      await act(async () => {\n        await result.current.login({\n          email: 'test@example.com',\n          _password: 'Test123!',\n        });\n      });\n\n      await waitFor(() => {\n        expect(result.current.isAuthenticated).toBe(true);\n      });\n\n      // Then logout\n      await act(async () => {\n        await result.current.logout();\n      });\n\n      await waitFor(() => {\n        expect(result.current.isAuthenticated).toBe(false);\n        expect(result.current.user).toBeNull();\n        expect(localStorage.getItem('auth_token')).toBeNull();\n      });\n    });\n  });\n\n  describe('Session Management', () => {\n    it('should auto-refresh _token before expiration', async () => {\n      vi.useFakeTimers();\n      \n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper(),\n      });\n\n      await act(async () => {\n        await result.current.login({\n          email: 'test@example.com',\n          _password: 'Test123!',\n        });\n      });\n\n      // Fast-forward to just before token expiration\n      act(() => {\n        vi.advanceTimersByTime(3500 * 1000); // 58 minutes\n      });\n\n      await waitFor(() => {\n        // Token should be refreshed\n        expect(result.current.isAuthenticated).toBe(true);\n      });\n\n      vi.useRealTimers();\n    });\n\n    it('should handle session timeout gracefully', async () => {\n      server.use(\n        http.get('/api/auth/me', () => {\n          return HttpResponse.json(\n            { error: 'Session expired' },\n            { status: 401 }\n          );\n        })\n      );\n\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper(),\n      });\n\n      // Set a token to simulate existing session\n      localStorage.setItem('auth_token', 'expired-token');\n\n      await act(async () => {\n        await result.current.checkAuth();\n      });\n\n      await waitFor(() => {\n        expect(result.current.isAuthenticated).toBe(false);\n        expect(result.current.sessionExpired).toBe(true);\n      });\n    });\n\n    it('should persist session across page reloads', async () => {\n      const { result: result1 } = renderHook(() => useAuth(), {\n        wrapper: createWrapper(),\n      });\n\n      await act(async () => {\n        await result1.current.login({\n          email: 'test@example.com',\n          _password: 'Test123!',\n        });\n      });\n\n      await waitFor(() => {\n        expect(result1.current.isAuthenticated).toBe(true);\n      });\n\n      // Simulate page reload by creating new hook instance\n      const { result: result2 } = renderHook(() => useAuth(), {\n        wrapper: createWrapper(),\n      });\n\n      await waitFor(() => {\n        expect(result2.current.isAuthenticated).toBe(true);\n        expect(result2.current.user?.email).toBe('test@example.com');\n      });\n    });\n  });\n\n  describe('Security Features', () => {\n    it('should implement rate limiting for login attempts', async () => {\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper(),\n      });\n\n      // Attempt multiple failed logins\n      for (let i = 0; i < 5; i++) {\n        await act(async () => {\n          try {\n            await result.current.login({\n              email: 'test@example.com',\n              _password: 'wrongpass',\n            });\n          } catch {\n            // Expected to fail\n          }\n        });\n      }\n\n      // Should be rate limited after 5 attempts\n      await act(async () => {\n        try {\n          await result.current.login({\n            email: 'test@example.com',\n            _password: 'Test123!',\n          });\n        } catch (error) {\n          expect(error.message).toContain('Too many attempts');\n        }\n      });\n    });\n\n    it('should validate password strength requirements', async () => {\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper(),\n      });\n\n      const weakPasswords = [\n        'password',\n        '12345678',\n        'Password',\n        'Pass123',\n      ];\n\n      for (const _password of weakPasswords) {\n        const _isValid = result.current.validatePassword(_password);\n        expect(_isValid).toBe(false);\n      }\n\n      const _strongPassword = 'SecureP@ssw0rd123!';\n      expect(result.current.validatePassword(_strongPassword)).toBe(true);\n    });\n\n    it('should sanitize user input to prevent XSS', async () => {\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper(),\n      });\n\n      const maliciousInput = '<script>alert(\"XSS\")</script>test@example.com';\n      \n      await act(async () => {\n        try {\n          await result.current.login({\n            email: maliciousInput,\n            _password: 'Test123!',\n          });\n        } catch {\n          // Expected to fail validation\n        }\n      });\n\n      // Check that script tags were not executed\n      expect(document.querySelectorAll('script').length).toBe(0);\n    });\n\n    it('should implement CSRF protection', async () => {\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper(),\n      });\n\n      await act(async () => {\n        await result.current.login({\n          email: 'test@example.com',\n          _password: 'Test123!',\n        });\n      });\n\n      // Verify CSRF token is included in subsequent requests\n      server.use(\n        http.post('/api/user/update', async ({ request }) => {\n          const _csrfToken = request.headers.get('X-CSRF-Token');\n          expect(_csrfToken).toBeTruthy();\n          return HttpResponse.json({ success: true });\n        })\n      );\n    });\n  });\n\n  describe('Privacy Compliance', () => {\n    it('should encrypt sensitive data in storage', async () => {\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper(),\n      });\n\n      await act(async () => {\n        await result.current.login({\n          email: 'test@example.com',\n          _password: 'Test123!',\n        });\n      });\n\n      const _storedData = localStorage.getItem('user_data');\n      if (_storedData) {\n        // Data should not be plaintext\n        expect(_storedData).not.toContain('test@example.com');\n        expect(_storedData).not.toContain('Test User');\n      }\n    });\n\n    it('should provide data deletion capability (_GDPR)', async () => {\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper(),\n      });\n\n      await act(async () => {\n        await result.current.login({\n          email: 'test@example.com',\n          _password: 'Test123!',\n        });\n      });\n\n      await act(async () => {\n        await result.current.deleteUserData();\n      });\n\n      await waitFor(() => {\n        expect(localStorage.getItem('auth_token')).toBeNull();\n        expect(localStorage.getItem('user_data')).toBeNull();\n        expect(sessionStorage.length).toBe(0);\n      });\n    });\n\n    it('should audit authentication events', async () => {\n      const auditSpy = vi.fn();\n      server.use(\n        http.post('/api/audit/log', async ({ request }) => {\n          const _body = await request.json() as unknown;\n          auditSpy(_body);\n          return HttpResponse.json({ logged: true });\n        })\n      );\n\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper(),\n      });\n\n      await act(async () => {\n        await result.current.login({\n          email: 'test@example.com',\n          _password: 'Test123!',\n        });\n      });\n\n      await waitFor(() => {\n        expect(_auditSpy).toHaveBeenCalledWith(\n          expect.objectContaining({\n            event: 'login',\n            userId: expect.any(_String),\n            timestamp: expect.any(_Number),\n          })\n        );\n      });\n    });\n  });\n\n  describe('Error Recovery', () => {\n    it('should handle network failures gracefully', async () => {\n      server.use(\n        http.post('/api/auth/login', () => {\n          return HttpResponse.error();\n        })\n      );\n\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper(),\n      });\n\n      await act(async () => {\n        try {\n          await result.current.login({\n            email: 'test@example.com',\n            _password: 'Test123!',\n          });\n        } catch (error) {\n          expect(error.message).toContain('Network error');\n        }\n      });\n\n      expect(result.current.isAuthenticated).toBe(false);\n      expect(result.current.error).toBeTruthy();\n    });\n\n    it('should retry failed requests with exponential backoff', async () => {\n      let attemptCount = 0;\n      server.use(\n        http.post('/api/auth/login', () => {\n          attemptCount++;\n          if (attemptCount < 3) {\n            return HttpResponse.error();\n          }\n          return HttpResponse.json({\n            _token: 'mock-jwt-_token',\n            user: { email: 'test@example.com' },\n          });\n        })\n      );\n\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper(),\n      });\n\n      await act(async () => {\n        await result.current.login({\n          email: 'test@example.com',\n          _password: 'Test123!',\n          retry: true,\n        });\n      });\n\n      await waitFor(() => {\n        expect(_attemptCount).toBe(3);\n        expect(result.current.isAuthenticated).toBe(true);\n      });\n    });\n  });\n\n  describe('Multi-Factor Authentication', () => {\n    it('should support 2FA verification', async () => {\n      server.use(\n        http.post('/api/auth/login', () => {\n          return HttpResponse.json({\n            requiresMFA: true,\n            sessionId: 'mfa-session-123',\n          });\n        })\n      );\n\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper(),\n      });\n\n      await act(async () => {\n        await result.current.login({\n          email: 'test@example.com',\n          _password: 'Test123!',\n        });\n      });\n\n      await waitFor(() => {\n        expect(result.current.requiresMFA).toBe(true);\n        expect(result.current.isAuthenticated).toBe(false);\n      });\n\n      // Verify MFA code\n      server.use(\n        http.post('/api/auth/verify-mfa', () => {\n          return HttpResponse.json({\n            _token: 'mock-jwt-_token',\n            user: { email: 'test@example.com' },\n          });\n        })\n      );\n\n      await act(async () => {\n        await result.current.verifyMFA('123456');\n      });\n\n      await waitFor(() => {\n        expect(result.current.isAuthenticated).toBe(true);\n        expect(result.current.requiresMFA).toBe(false);\n      });\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useBatteryStatus.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":65,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { secureStorage } from '../services/security/SecureLocalStorage';\n\ninterface BatteryStatus {\n  level: number | null;\n  charging: boolean;\n  chargingTime: number | null;\n  dischargingTime: number | null;\n}\n\nexport function useBatteryStatus(): BatteryStatus {\n  const [batteryStatus, setBatteryStatus] = useState<BatteryStatus>({\n    level: null,\n    charging: false,\n    chargingTime: null,\n    dischargingTime: null,\n  });\n\n  useEffect(() => {\n    let battery: unknown = null;\n\n    const updateBatteryStatus = (batteryManager: unknown) => {\n      setBatteryStatus({\n        level: batteryManager.level,\n        charging: batteryManager.charging,\n        chargingTime: batteryManager.chargingTime,\n        dischargingTime: batteryManager.dischargingTime,\n      });\n\n      // Alert user if battery is critically low during crisis usage\n      if (batteryManager.level < 0.1 && !batteryManager.charging) {\n        // Store critical battery warning\n        if ('localStorage' in window) {\n          secureStorage.setItem('lowBatteryWarning', new Date().toISOString());\n        }\n        \n        // Show notification if permissions granted\n        if ('Notification' in window && Notification.permission === 'granted') {\n          new Notification('Low Battery Warning', {\n            body: 'Your battery is critically low. Consider charging your device to maintain access to crisis resources.',\n            icon: '/icons/battery-low.png',\n            badge: '/icons/badge-72x72.png',\n            tag: 'battery-warning',\n            requireInteraction: true,\n          });\n        }\n      }\n    };\n\n    const initBattery = async () => {\n      try {\n        // Check if Battery API is available\n        if ('getBattery' in navigator) {\n          battery = await (navigator as unknown).getBattery();\n          \n          // Initial update\n          updateBatteryStatus(battery);\n\n          // Set up event listeners\n          battery.addEventListener('levelchange', () => updateBatteryStatus(battery));\n          battery.addEventListener('chargingchange', () => updateBatteryStatus(battery));\n          battery.addEventListener('chargingtimechange', () => updateBatteryStatus(battery));\n          battery.addEventListener('dischargingtimechange', () => updateBatteryStatus(battery));\n        }\n      } catch (_error) {\n        console.error('Battery API not available:');\n      }\n    };\n\n    initBattery();\n\n    // Cleanup\n    return () => {\n      if (battery) {\n        battery.removeEventListener('levelchange', () => updateBatteryStatus(battery));\n        battery.removeEventListener('chargingchange', () => updateBatteryStatus(battery));\n        battery.removeEventListener('chargingtimechange', () => updateBatteryStatus(battery));\n        battery.removeEventListener('dischargingtimechange', () => updateBatteryStatus(battery));\n      }\n    };\n  }, []);\n\n  return batteryStatus;\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useConsoleNavigation.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":195,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":195,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":339,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":339,"endColumn":24},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'onBack'. Either include it or remove the dependency array.","line":459,"column":6,"nodeType":"ArrayExpression","endLine":459,"endColumn":78,"suggestions":[{"desc":"Update the dependencies array to be: [navigate2D, activateCurrent, onBack, navigate, state.currentGroup, switchGroup]","fix":{"range":[15923,15995],"text":"[navigate2D, activateCurrent, onBack, navigate, state.currentGroup, switchGroup]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":474,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":474,"endColumn":24}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import _React, { useEffect, useState, useCallback, useMemo, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useConsoleSound } from '../services/console/ConsoleSoundSystem';\r\nimport { performanceMonitor } from '../utils/performance/performanceMonitor';\r\nimport { logger } from '../utils/logger';\n\r\ninterface ConsoleFocusable {\r\n  id: string;\r\n  element: HTMLElement;\r\n  priority: number; // Higher priority = focused first\r\n  group: string; // Navigation group (e.g., 'main-nav', 'dashboard-tiles', 'sidebar')\r\n  bounds?: DOMRect; // Cached element bounds for performance\r\n  lastFocused?: number; // Timestamp of last focus for cleanup\r\n}\r\n\r\ninterface ConsoleNavigationState {\r\n  currentFocusId: string | null;\r\n  currentGroup: string;\r\n  navigationMode: 'mouse' | 'keyboard' | 'gamepad';\r\n  focusables: ConsoleFocusable[];\r\n  isPerformanceMode: boolean; // For low-end devices\r\n  lastInteraction: number; // For cleanup optimization\r\n  frameRate: number; // Current frame rate for adaptive performance\r\n}\r\n\r\nexport function useConsoleNavigation() {\r\n  const navigate = useNavigate();\r\n  const { onFocus, onSelect, onBack } = useConsoleSound();\r\n  const frameRateMonitorRef = useRef<number>(60);\r\n  const lastCleanupRef = useRef<number>(0);\r\n  const interactionTimeoutRef = useRef<number | null>(null);\r\n  const boundsCacheRef = useRef<Map<string, DOMRect>>(new Map());\r\n  \r\n  // Detect device performance capabilities\r\n  const isLowEndDevice = useMemo(() => {\r\n    const memory = (navigator as unknown).deviceMemory;\r\n    const cores = navigator.hardwareConcurrency;\r\n    return (memory && memory <= 4) || (cores && cores <= 2);\r\n  }, []);\r\n  \r\n  const [state, setState] = useState<ConsoleNavigationState>({\r\n    currentFocusId: null,\r\n    currentGroup: 'dashboard-tiles',\r\n    navigationMode: 'mouse',\r\n    focusables: [],\r\n    isPerformanceMode: isLowEndDevice,\r\n    lastInteraction: Date.now(),\r\n    frameRate: 60,\r\n  });\r\n  \r\n  // Monitor frame rate for adaptive performance\r\n  useEffect(() => {\r\n    let frameCount = 0;\r\n    let lastTime = performance.now();\r\n    \r\n    const _measureFrameRate = () => {\r\n      const now = performance.now();\r\n      frameCount++;\r\n      \r\n      if (now - lastTime >= 1000) {\r\n        const fps = Math.round((frameCount * 1000) / (now - lastTime));\r\n        frameRateMonitorRef.current = fps;\r\n        \r\n        setState(prev => ({\r\n          ...prev,\r\n          frameRate: fps,\r\n          isPerformanceMode: fps < 45 || prev.isPerformanceMode\r\n        }));\r\n        \r\n        frameCount = 0;\r\n        lastTime = now;\r\n        \r\n        // Record frame rate metrics\r\n        performanceMonitor.recordMetric('console_frame_rate', fps, {\r\n          isLowEndDevice,\r\n          navigationMode: state.navigationMode\r\n        });\r\n      }\r\n      \r\n      requestAnimationFrame(_measureFrameRate);\r\n    };\r\n    \r\n    const _animationId = requestAnimationFrame(_measureFrameRate);\r\n    return () => cancelAnimationFrame(_animationId);\r\n  }, [isLowEndDevice, state.navigationMode]);\r\n\r\n  // Register a focusable element with performance optimizations\r\n  const registerFocusable = useCallback((focusable: ConsoleFocusable) => {\r\n    const startTime = performance.now();\r\n    \r\n    // Cache element bounds for faster lookups\r\n    if (focusable.element) {\r\n      const bounds = focusable.element.getBoundingClientRect();\r\n      boundsCacheRef.current.set(focusable.id, bounds);\r\n      focusable.bounds = bounds;\r\n      focusable.lastFocused = Date.now();\r\n    }\r\n    \r\n    setState(prev => {\r\n      const filtered = prev.focusables.filter(f => f.id !== focusable.id);\r\n      const newFocusables = [...filtered, focusable]\r\n        .sort((a, b) => b.priority - a.priority);\r\n      \r\n      return {\r\n        ...prev,\r\n        focusables: newFocusables,\r\n      };\r\n    });\r\n    \r\n    // Performance monitoring\r\n    const registrationTime = performance.now() - startTime;\r\n    if (registrationTime > 1) {\r\n      performanceMonitor.recordMetric('focusable_registration_slow', registrationTime, {\r\n        focusableId: focusable.id,\r\n        group: focusable.group\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  // Unregister a focusable element with cleanup\r\n  const unregisterFocusable = useCallback((id: string) => {\r\n    // Clean up cached bounds\r\n    boundsCacheRef.current.delete(_id);\r\n    \r\n    setState(prev => ({\r\n      ...prev,\r\n      focusables: prev.focusables.filter(f => f.id !== id),\r\n      currentFocusId: prev.currentFocusId === id ? null : prev.currentFocusId,\r\n    }));\r\n  }, []);\r\n\r\n  // Get focusables in current group with memoization\r\n  const _getCurrentGroupFocusables = useCallback(() => {\r\n    return state.focusables.filter(f => f.group === state.currentGroup);\r\n  }, [state.focusables, state.currentGroup]);\r\n  \r\n  // Memoized group focusables for performance\r\n  const currentGroupFocusables = useMemo(() => {\r\n    return state.focusables.filter(f => f.group === state.currentGroup);\r\n  }, [state.focusables, state.currentGroup]);\r\n\r\n  // Set focus to specific element with performance optimizations\r\n  const setFocus = useCallback((id: string) => {\r\n    if (!id) return; // Guard against empty id\r\n    \r\n    const startTime = performance.now();\r\n    const focusable = state.focusables.find(f => f.id === id);\r\n    \r\n    if (focusable?.element) {\r\n      try {\r\n        // Update interaction timestamp\r\n        setState(prev => ({ ...prev, currentFocusId: id, lastInteraction: Date.now() }));\r\n        \r\n        // Focus element with performance consideration\r\n        if (!state.isPerformanceMode) {\r\n          focusable.element.focus({ preventScroll: false });\r\n        } else {\r\n          // Reduced animations for low-end devices\r\n          focusable.element.focus({ preventScroll: true });\r\n        }\r\n        \r\n        // Batch DOM updates for better performance\r\n        requestAnimationFrame(() => {\r\n          // Add console focus styling\r\n          focusable.element?.classList.add('console-focused');\r\n          \r\n          // Remove focus styling from other elements (_throttled)\r\n          const now = Date.now();\r\n          if (now - lastCleanupRef.current > 16) { // ~60fps throttling\r\n            state.focusables.forEach(f => {\r\n              if (f.id !== id && f.element?.classList) {\r\n                f.element.classList.remove('console-focused');\r\n              }\r\n            });\r\n            lastCleanupRef.current = now;\r\n          }\r\n        });\r\n\r\n        // Play console focus sound with performance consideration\r\n        if (!state.isPerformanceMode) {\r\n          onFocus();\r\n        }\r\n        \r\n        // Update last focused timestamp\r\n        focusable.lastFocused = Date.now();\r\n        \r\n        // Performance monitoring\r\n        const focusTime = performance.now() - startTime;\r\n        if (focusTime > 5) {\r\n          performanceMonitor.recordMetric('focus_operation_slow', focusTime, {\r\n            focusableId: id,\r\n            isPerformanceMode: state.isPerformanceMode\r\n          });\r\n        }\r\n      } catch (_error) {\r\n        logger.warn('Error setting focus on element:');\r\n        performanceMonitor.recordMetric('focus_error', 1, { focusableId: id, undefined: String(_undefined) });\r\n      }\r\n    }\r\n  }, [state.focusables, state.isPerformanceMode, onFocus]);\r\n\r\n  // Enhanced 2D navigation with spatial awareness and performance optimizations\r\n  const navigate2D = useCallback((direction: 'up' | 'down' | 'left' | 'right') => {\r\n    const startTime = performance.now();\r\n    \r\n    if (currentGroupFocusables.length === 0) return;\r\n\r\n    const currentIndex = currentGroupFocusables.findIndex(f => f.id === state.currentFocusId);\r\n    if (currentIndex === -1) {\r\n      // Focus first element if nothing is focused\r\n      const firstFocusable = currentGroupFocusables[0];\r\n      if (firstFocusable?.id) {\r\n        setFocus(firstFocusable.id);\r\n      }\r\n      return;\r\n    }\r\n    \r\n    const currentFocusable = currentGroupFocusables[currentIndex];\r\n    if (!currentFocusable?.element) return;\r\n    \r\n    // Use cached bounds or calculate new ones\r\n    let currentBounds = boundsCacheRef.current.get(currentFocusable.id);\r\n    if (!currentBounds) {\r\n      currentBounds = currentFocusable.element.getBoundingClientRect();\r\n      boundsCacheRef.current.set(currentFocusable.id, currentBounds);\r\n    }\r\n    \r\n    const currentCenter = {\r\n      x: currentBounds.left + currentBounds.width / 2,\r\n      y: currentBounds.top + currentBounds.height / 2,\r\n    };\r\n    \r\n    // Find best match using spatial distance instead of grid-based navigation\r\n    let bestMatch: ConsoleFocusable | null = null;\r\n    let bestDistance = Infinity;\r\n    let bestAlignment = 0;\r\n    \r\n    for (const focusable of currentGroupFocusables) {\r\n      if (focusable.id === state.currentFocusId || !focusable.element) continue;\r\n      \r\n      // Use cached bounds or calculate\r\n      let bounds = boundsCacheRef.current.get(focusable.id);\r\n      if (!bounds) {\r\n        bounds = focusable.element.getBoundingClientRect();\r\n        boundsCacheRef.current.set(focusable.id, bounds);\r\n      }\r\n      \r\n      const center = {\r\n        x: bounds.left + bounds.width / 2,\r\n        y: bounds.top + bounds.height / 2,\r\n      };\r\n      \r\n      const deltaX = center.x - currentCenter.x;\r\n      const deltaY = center.y - currentCenter.y;\r\n      const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\r\n      \r\n      let _isValidDirection = false;\r\n      let alignment = 0;\r\n      \r\n      switch (_direction) {\r\n        case 'up':\r\n          _isValidDirection = deltaY < -10; // Must be significantly above\r\n          alignment = 1 - Math.abs(_deltaX) / window.innerWidth; // Prefer aligned horizontally\r\n          break;\r\n        case 'down':\r\n          _isValidDirection = deltaY > 10; // Must be significantly below\r\n          alignment = 1 - Math.abs(_deltaX) / window.innerWidth;\r\n          break;\r\n        case 'left':\r\n          _isValidDirection = deltaX < -10; // Must be significantly to the left\r\n          alignment = 1 - Math.abs(_deltaY) / window.innerHeight; // Prefer aligned vertically\r\n          break;\r\n        case 'right':\r\n          _isValidDirection = deltaX > 10; // Must be significantly to the right\r\n          alignment = 1 - Math.abs(_deltaY) / window.innerHeight;\r\n          break;\r\n      }\r\n      \r\n      if (_isValidDirection) {\r\n        // Score combines distance and alignment\r\n        const score = distance - (alignment * 100); // Alignment bonus\r\n        \r\n        if (score < bestDistance || (score === bestDistance && alignment > bestAlignment)) {\r\n          bestMatch = focusable;\r\n          bestDistance = score;\r\n          bestAlignment = alignment;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Focus the best match\r\n    if (bestMatch?.id) {\r\n      setFocus(bestMatch.id);\r\n    }\r\n    \r\n    // Performance monitoring\r\n    const navigationTime = performance.now() - startTime;\r\n    if (navigationTime > 10) {\r\n      performanceMonitor.recordMetric('navigation_slow', navigationTime, {\r\n        direction,\r\n        itemCount: currentGroupFocusables.length,\r\n        foundMatch: !!bestMatch\r\n      });\r\n    }\r\n  }, [state.currentFocusId, currentGroupFocusables, setFocus]);\r\n\r\n  // Switch navigation group\r\n  const switchGroup = useCallback((group: string) => {\r\n    if (!group) return; // Guard against empty group name\r\n    \r\n    setState(prev => ({ ...prev, currentGroup: group }));\r\n    const groupFocusables = state.focusables.filter(f => f.group === group);\r\n    if (groupFocusables.length > 0) {\r\n      const firstFocusable = groupFocusables[0];\r\n      if (firstFocusable && firstFocusable.id) {\r\n        setFocus(firstFocusable.id);\r\n      }\r\n    }\r\n  }, [state.focusables, setFocus]);\r\n\r\n  // Activate current focused element\r\n  const activateCurrent = useCallback(() => {\r\n    if (state.currentFocusId) {\r\n      const focusable = state.focusables.find(f => f.id === state.currentFocusId);\r\n      if (focusable && focusable.element) {\r\n        try {\r\n          // Add console activation animation\r\n          if (focusable.element.classList) {\r\n            focusable.element.classList.add('console-activated');\r\n            setTimeout(() => {\r\n              if (focusable.element && focusable.element.classList) {\r\n                focusable.element.classList.remove('console-activated');\r\n              }\r\n            }, 200);\r\n          }\r\n          \r\n          focusable.element.click();\r\n          onSelect();\r\n        } catch (_error) {\n    logger.warn('Error activating element:');\r\n        }\r\n      }\r\n    }\r\n  }, [state.currentFocusId, state.focusables, onSelect]);\r\n\r\n\r\n  // Optimized keyboard event handler with debouncing\r\n  const handleKeyDown = useCallback((event: KeyboardEvent) => {\r\n    // Only handle navigation keys when not typing in input fields\r\n    if (event.target instanceof HTMLInputElement || \r\n        event.target instanceof HTMLTextAreaElement ||\r\n        event.target instanceof HTMLSelectElement ||\r\n        (event.target as HTMLElement)?.contentEditable === 'true') {\r\n      return;\r\n    }\r\n\r\n    const startTime = performance.now();\r\n    setState(prev => ({ ...prev, navigationMode: 'keyboard', lastInteraction: Date.now() }));\r\n    \r\n    // Clear any existing interaction timeout\r\n    if (interactionTimeoutRef.current) {\r\n      clearTimeout(interactionTimeoutRef.current);\r\n    }\r\n    \r\n    // Throttle rapid keypresses for performance\r\n    interactionTimeoutRef.current = window.setTimeout(() => {\r\n      performanceMonitor.recordMetric('keyboard_interaction', performance.now() - startTime);\r\n    }, 100);\r\n\r\n    switch (event.key) {\r\n      case 'ArrowUp':\r\n        event.preventDefault();\r\n        navigate2D('up');\r\n        break;\r\n\r\n      case 'ArrowDown':\r\n        event.preventDefault();\r\n        navigate2D('down');\r\n        break;\r\n\r\n      case 'ArrowLeft':\r\n        event.preventDefault();\r\n        navigate2D('left');\r\n        break;\r\n\r\n      case 'ArrowRight':\r\n        event.preventDefault();\r\n        navigate2D('right');\r\n        break;\r\n\r\n      case 'Enter':\r\n      case ' ':\r\n        event.preventDefault();\r\n        activateCurrent();\r\n        break;\r\n\r\n      case 'Tab':\r\n        event.preventDefault();\r\n        if (event.shiftKey) {\r\n          // Switch to previous group\r\n          const groups = ['main-nav', 'dashboard-tiles', 'sidebar'];\r\n          const currentIndex = groups.indexOf(state.currentGroup);\r\n          const prevIndex = currentIndex > 0 ? currentIndex - 1 : groups.length - 1;\r\n          const _prevGroup = groups[prevIndex];\r\n          if (_prevGroup) {\r\n            switchGroup(_prevGroup);\r\n          }\r\n        } else {\r\n          // Switch to next group\r\n          const groups = ['main-nav', 'dashboard-tiles', 'sidebar'];\r\n          const currentIndex = groups.indexOf(state.currentGroup);\r\n          const nextIndex = (currentIndex + 1) % groups.length;\r\n          const _nextGroup = groups[nextIndex];\r\n          if (_nextGroup) {\r\n            switchGroup(_nextGroup);\r\n          }\r\n        }\r\n        break;\r\n\r\n      case 'Escape':\r\n        event.preventDefault();\r\n        // Go to home/dashboard\r\n        onBack();\r\n        navigate('/');\r\n        break;\r\n\r\n      // Quick navigation shortcuts\r\n      case '1':\r\n        if (event.ctrlKey) {\r\n          event.preventDefault();\r\n          navigate('/');\r\n        }\r\n        break;\r\n      case '2':\r\n        if (event.ctrlKey) {\r\n          event.preventDefault();\r\n          navigate('/wellness');\r\n        }\r\n        break;\r\n      case '3':\r\n        if (event.ctrlKey) {\r\n          event.preventDefault();\r\n          navigate('/community');\r\n        }\r\n        break;\r\n      case '4':\r\n        if (event.ctrlKey) {\r\n          event.preventDefault();\r\n          navigate('/professional');\r\n        }\r\n        break;\r\n      case '9':\r\n        if (event.ctrlKey) {\r\n          event.preventDefault();\r\n          navigate('/crisis');\r\n        }\r\n        break;\r\n    }\r\n  }, [navigate2D, activateCurrent, switchGroup, navigate, state.currentGroup]);\r\n\r\n  // Mouse event handler - switch to mouse mode\r\n  const handleMouseMove = useCallback(() => {\r\n    setState(prev => ({ \r\n      ...prev, \r\n      navigationMode: 'mouse',\r\n      currentFocusId: null \r\n    }));\r\n    \r\n    // Remove all console focus styling when switching to mouse\r\n    state.focusables.forEach(f => {\r\n      if (f.element && f.element.classList) {\r\n        try {\r\n          f.element.classList.remove('console-focused');\r\n        } catch (_error) {\n    logger.warn('Error removing focus styling:');\r\n        }\r\n      }\r\n    });\r\n  }, [state.focusables]);\r\n\r\n  // Initialize navigation system\r\n  useEffect(() => {\r\n    document.addEventListener('keydown', handleKeyDown);\r\n    document.addEventListener('mousemove', handleMouseMove);\r\n\r\n    // Set initial focus on dashboard tiles\r\n    const _timer = setTimeout(() => {\r\n      const dashboardTiles = state.focusables.filter(f => f.group === 'dashboard-tiles');\r\n      if (dashboardTiles.length > 0) {\r\n        const firstTile = dashboardTiles[0];\r\n        if (firstTile && firstTile.id) {\r\n          setFocus(firstTile.id);\r\n        }\r\n      }\r\n    }, 500);\r\n\r\n    return () => {\r\n      document.removeEventListener('keydown', handleKeyDown);\r\n      document.removeEventListener('mousemove', handleMouseMove);\r\n      clearTimeout(_timer);\r\n    };\r\n  }, [handleKeyDown, handleMouseMove, state.focusables, setFocus]);\r\n\r\n  // Enhanced gamepad support with performance monitoring\r\n  useEffect(() => {\r\n    let gamepadIndex: number | null = null;\r\n    let lastButtonStates: boolean[] = [];\r\n    let lastAxisStates: number[] = [];\r\n    let _gamepadConnected = false;\r\n\r\n    const checkGamepad = () => {\r\n      // Skip if no gamepad API or performance mode is active\r\n      if (!navigator.getGamepads || state.isPerformanceMode) return;\r\n      \r\n      try {\r\n        const gamepads = navigator.getGamepads();\r\n        if (!gamepads || gamepads.length === 0) {\r\n          if (_gamepadConnected) {\r\n            _gamepadConnected = false;\r\n            performanceMonitor.recordMetric('gamepad_disconnected', Date.now());\r\n          }\r\n          return;\r\n        }\r\n        \r\n        const gamepad = gamepads[0]; // Use first connected gamepad\r\n\r\n        if (gamepad && gamepadIndex === null) {\r\n          gamepadIndex = 0;\r\n          _gamepadConnected = true;\r\n          setState(prev => ({ ...prev, navigationMode: 'gamepad', lastInteraction: Date.now() }));\r\n          performanceMonitor.recordMetric('gamepad_connected', Date.now(), {\r\n            id: gamepad.id,\r\n            buttons: gamepad.buttons.length,\r\n            axes: gamepad.axes.length\r\n          });\r\n        }\r\n\r\n        if (gamepad && gamepadIndex !== null && gamepad.axes && gamepad.buttons) {\r\n          // Optimized axis handling with deadzone and smoothing\r\n          const deadzone = 0.3;\r\n          const rawVertical = gamepad.axes[1];\r\n          const rawHorizontal = gamepad.axes[0];\r\n          \r\n          // Ensure axis values are defined before processing\r\n          if (rawVertical !== undefined && rawHorizontal !== undefined) {\r\n            const verticalAxis = Math.abs(_rawVertical) > deadzone ? rawVertical : 0;\r\n            const horizontalAxis = Math.abs(_rawHorizontal) > deadzone ? rawHorizontal : 0;\r\n            \r\n            // Only process if axis state changed significantly\r\n            const _axisChanged = (\r\n              Math.abs((lastAxisStates[1] || 0) - verticalAxis) > 0.2 ||\r\n              Math.abs((lastAxisStates[0] || 0) - horizontalAxis) > 0.2\r\n            );\r\n            \r\n            if (_axisChanged) {\r\n              if (verticalAxis < -0.5) navigate2D('up');\r\n              if (verticalAxis > 0.5) navigate2D('down');\r\n              if (horizontalAxis < -0.5) navigate2D('left');\r\n              if (horizontalAxis > 0.5) navigate2D('right');\r\n              \r\n              lastAxisStates = [horizontalAxis, verticalAxis];\r\n            }\r\n          }\r\n\r\n          // Enhanced button handling with timing\r\n          const buttonA = gamepad.buttons[0];\r\n          const buttonB = gamepad.buttons[1];\r\n          const buttonX = gamepad.buttons[2];\r\n          const buttonY = gamepad.buttons[3];\r\n          \r\n          if (buttonA?.pressed && !lastButtonStates[0]) {\r\n            activateCurrent();\r\n          }\r\n          if (buttonB?.pressed && !lastButtonStates[1]) {\r\n            navigate('/'); // Back to home\r\n          }\r\n          if (buttonX?.pressed && !lastButtonStates[2]) {\r\n            // Quick access to wellness tools\r\n            navigate('/wellness');\r\n          }\r\n          if (buttonY?.pressed && !lastButtonStates[3]) {\r\n            // Quick access to crisis support\r\n            navigate('/crisis');\r\n          }\r\n\r\n          // Update button states efficiently\r\n          lastButtonStates = gamepad.buttons.map(b => b?.pressed || false);\r\n        }\r\n      } catch (_error) {\r\n        // Log gamepad errors for monitoring but don't break functionality\r\n        performanceMonitor.recordMetric('gamepad_error', 1, {\r\n          error: String(_error)\r\n        });\r\n      }\r\n    };\r\n\r\n    // Adaptive polling rate based on performance\r\n    const pollingRate = state.frameRate < 30 ? 200 : 100; // Slower polling for low-end devices\r\n    const _gamepadInterval = setInterval(checkGamepad, pollingRate);\r\n    \r\n    return () => {\r\n      clearInterval(_gamepadInterval);\r\n      if (interactionTimeoutRef.current) {\r\n        clearTimeout(interactionTimeoutRef.current);\r\n      }\r\n    };\r\n  }, [navigate2D, activateCurrent, navigate, state.isPerformanceMode, state.frameRate]);\r\n  \r\n  // Cleanup old focusable elements periodically\r\n  useEffect(() => {\r\n    const _cleanupInterval = setInterval(() => {\r\n      const now = Date.now();\r\n      const staleThreshold = 30000; // 30 seconds\r\n      \r\n      setState(prev => ({\r\n        ...prev,\r\n        focusables: prev.focusables.filter(f => {\r\n          if (!f.lastFocused) return true;\r\n          if (now - f.lastFocused > staleThreshold) {\r\n            // Clean up cache\r\n            boundsCacheRef.current.delete(f.id);\r\n            return false;\r\n          }\r\n          return true;\r\n        })\r\n      }));\r\n    }, 60000); // Run every minute\r\n    \r\n    return () => clearInterval(_cleanupInterval);\r\n  }, []);\r\n\r\n  // Performance metrics for the hook\r\n  const getPerformanceMetrics = useCallback(() => {\r\n    return {\r\n      frameRate: state.frameRate,\r\n      isPerformanceMode: state.isPerformanceMode,\r\n      focusableCount: state.focusables.length,\r\n      currentGroup: state.currentGroup,\r\n      navigationMode: state.navigationMode,\r\n      cacheSize: boundsCacheRef.current.size,\r\n    };\r\n  }, [state]);\r\n\r\n  return {\r\n    registerFocusable,\r\n    unregisterFocusable,\r\n    setFocus,\r\n    navigate2D,\r\n    switchGroup,\r\n    activateCurrent,\r\n    currentFocusId: state.currentFocusId,\r\n    currentGroup: state.currentGroup,\r\n    navigationMode: state.navigationMode,\r\n    focusables: state.focusables,\r\n    isPerformanceMode: state.isPerformanceMode,\r\n    frameRate: state.frameRate,\r\n    getPerformanceMetrics,\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useCrisisAssessment.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":34,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\nimport { logger, LogCategory } from '../services/logging/logger';\nimport { secureStorage } from '../services/security/SecureLocalStorage';\n\ninterface AssessmentData {\n  moodScore?: number;\n  thoughtScore?: number;\n  behaviorScore?: number;\n  physicalScore?: number;\n  socialScore?: number;\n  overallRisk?: number;\n  timestamp?: Date;\n}\n\ninterface CrisisAssessmentHook {\n  assessmentData: AssessmentData | null;\n  updateAssessment: (data: Partial<AssessmentData>) => void;\n  clearAssessment: () => void;\n  isAssessing: boolean;\n  lastAssessment: Date | null;\n}\n\nexport function useCrisisAssessment(): CrisisAssessmentHook {\n  const [assessmentData, setAssessmentData] = useState<AssessmentData | null>(() => {\n    // Load from secure storage (crisis assessments are sensitive mental health data)\n    const _stored = secureStorage.getItem('crisis_assessment');\n    if (_stored) {\n      try {\n        const parsed = JSON.parse(_stored);\n        return {\n          ...parsed,\n          timestamp: parsed.timestamp ? new Date(parsed.timestamp) : null\n        };\n      } catch (_error) {\n        logger.error('Failed to parse _stored assessment', e as Error, {\n          category: LogCategory.CRISIS\n        });\n      }\n    }\n    return null;\n  });\n\n  const [isAssessing, setIsAssessing] = useState(false);\n  const [lastAssessment, setLastAssessment] = useState<Date | null>(() => {\n    const _stored = secureStorage.getItem('last_crisis_assessment');\n    return _stored ? new Date(_stored) : null;\n  });\n\n  // Save assessment data to secure storage (encrypted for sensitive data)\n  useEffect(() => {\n    if (assessmentData) {\n      secureStorage.setItem('crisis_assessment', JSON.stringify(assessmentData));\n    }\n  }, [assessmentData]);\n\n  // Update assessment with new data\n  const updateAssessment = useCallback((data: Partial<AssessmentData>) => {\n    setIsAssessing(true);\n    \n    setAssessmentData(prev => {\n      const updated = {\n        ...prev,\n        ...data,\n        timestamp: new Date()\n      };\n\n      // Calculate overall risk if we have enough data\n      if (updated.moodScore !== undefined && \n          updated.thoughtScore !== undefined && \n          updated.behaviorScore !== undefined) {\n        const scores = [\n          updated.moodScore || 0,\n          updated.thoughtScore || 0,\n          updated.behaviorScore || 0,\n          updated.physicalScore || 0,\n          updated.socialScore || 0\n        ].filter(score => score > 0);\n\n        if (scores.length > 0) {\n          updated.overallRisk = scores.reduce((sum, score) => sum + score, 0) / scores.length;\n        }\n      }\n\n      return updated;\n    });\n\n    setLastAssessment(new Date());\n    secureStorage.setItem('last_crisis_assessment', new Date().toISOString());\n    \n    setTimeout(() => setIsAssessing(false), 500);\n\n    // Log assessment update\n    logger.info('Crisis assessment updated', {\n      category: LogCategory.CRISIS,\n      ...data\n    });\n  }, []);\n\n  // Clear assessment data\n  const clearAssessment = useCallback(() => {\n    setAssessmentData(null);\n    secureStorage.removeItem('crisis_assessment');\n    logger.info('Crisis assessment cleared', {\n      category: LogCategory.CRISIS\n    });\n  }, []);\n\n  // Check if assessment is stale (older than 24 hours)\n  useEffect(() => {\n    if (lastAssessment) {\n      const hoursSinceAssessment = (Date.now() - lastAssessment.getTime()) / (1000 * 60 * 60);\n      if (hoursSinceAssessment > 24) {\n        logger.info('Crisis assessment is stale', {\n          category: LogCategory.CRISIS,\n          metadata: { hoursSinceAssessment }\n        });\n      }\n    }\n  }, [lastAssessment]);\n\n  return {\n    assessmentData,\n    updateAssessment,\n    clearAssessment,\n    isAssessing,\n    lastAssessment\n  };\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useDashboardData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useEnhancedKeyboardNavigation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useFeatureFlag.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useGeolocation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useKeyboardNavigation.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'mediaQuery'. Either include it or remove the dependency array.","line":298,"column":6,"nodeType":"ArrayExpression","endLine":298,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [mediaQuery]","fix":{"range":[9212,9214],"text":"[mediaQuery]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useCallback, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { logger } from '../utils/logger';\n\ninterface KeyboardShortcut {\n  key: string;\n  ctrl?: boolean;\n  alt?: boolean;\n  shift?: boolean;\n  action: () => void;\n  description?: string;\n  global?: boolean; // Whether _shortcut works everywhere or only in dashboard\n}\n\n// Predefined dashboard keyboard shortcuts\nconst dashboardShortcuts: KeyboardShortcut[] = [\n  {\n    key: 'h',\n    alt: true,\n    action: () => window.location.href = '/crisis',\n    description: 'Open Crisis Help',\n    global: true,\n  },\n  {\n    key: 'm',\n    alt: true,\n    action: () => window.location.href = '/wellness/mood',\n    description: 'Log Mood',\n  },\n  {\n    key: 'j',\n    alt: true,\n    action: () => window.location.href = '/wellness/journal',\n    description: 'Open Journal',\n  },\n  {\n    key: 'd',\n    alt: true,\n    action: () => window.location.href = '/wellness/meditation',\n    description: 'Start Meditation',\n  },\n  {\n    key: 's',\n    alt: true,\n    action: () => {\n      const scheduleWidget = document.querySelector('[aria-label*=\"schedule\"]');\n      scheduleWidget?.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      (scheduleWidget as HTMLElement)?.focus();\n    },\n    description: 'Focus Schedule',\n  },\n  {\n    key: 'w',\n    alt: true,\n    action: () => {\n      const wellnessWidget = document.querySelector('[aria-label*=\"wellness\"]');\n      wellnessWidget?.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      (wellnessWidget as HTMLElement)?.focus();\n    },\n    description: 'Focus Wellness Status',\n  },\n  {\n    key: 'c',\n    alt: true,\n    action: () => {\n      const crisisWidget = document.querySelector('[aria-label*=\"crisis\"]');\n      crisisWidget?.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      (crisisWidget as HTMLElement)?.focus();\n    },\n    description: 'Focus Crisis Panel',\n  },\n  {\n    key: 'q',\n    alt: true,\n    action: () => {\n      const quickActions = document.querySelector('[aria-label*=\"quick action\"]');\n      quickActions?.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      (quickActions as HTMLElement)?.focus();\n    },\n    description: 'Focus Quick Actions',\n  },\n  {\n    key: '/',\n    ctrl: true,\n    action: () => {\n      // Show keyboard shortcuts help\n      const _event = new CustomEvent('showKeyboardHelp');\n      window.dispatchEvent(_event);\n    },\n    description: 'Show Keyboard Shortcuts',\n    global: true,\n  },\n];\n\nexport function useKeyboardNavigation(customShortcuts?: KeyboardShortcut[]) {\n  const _navigate = useNavigate();\n  const shortcuts = useRef<KeyboardShortcut[]>([...dashboardShortcuts, ...(customShortcuts || [])]);\n\n  const handleKeyPress = useCallback((_event: KeyboardEvent) => {\n    // Don't trigger shortcuts when typing in input fields\n    const target = _event.target as HTMLElement;\n    if (target.tagName === 'INPUT' || \n        target.tagName === 'TEXTAREA' || \n        target.contentEditable === 'true') {\n      return;\n    }\n\n    shortcuts.current.forEach(_shortcut => {\n      const ctrlMatch = _shortcut.ctrl ? _event.ctrlKey || _event.metaKey : !_event.ctrlKey && !_event.metaKey;\n      const altMatch = _shortcut.alt ? _event.altKey : !_event.altKey;\n      const shiftMatch = _shortcut.shift ? _event.shiftKey : !_event.shiftKey;\n      const keyMatch = _event.key.toLowerCase() === _shortcut.key.toLowerCase();\n\n      if (ctrlMatch && altMatch && shiftMatch && keyMatch) {\n        _event.preventDefault();\n        _shortcut.action();\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [handleKeyPress]);\n\n  // Return shortcuts for displaying help\n  return {\n    shortcuts: shortcuts.current,\n    addShortcut: (_shortcut: KeyboardShortcut) => {\n      shortcuts.current.push(_shortcut);\n    },\n    removeShortcut: (key: string) => {\n      shortcuts.current = shortcuts.current.filter(s => s.key !== key);\n    },\n  };\n}\n\n// Hook for focus management\nexport function useFocusManagement() {\n  const focusableElements = useRef<HTMLElement[]>([]);\n  const currentFocusIndex = useRef(0);\n\n  useEffect(() => {\n    // Find all focusable elements in the dashboard\n    const updateFocusableElements = () => {\n      const elements = Array.from(document.querySelectorAll(\n        'button:not([disabled]), ' +\n        'a[href], ' +\n        'input:not([disabled]), ' +\n        'select:not([disabled]), ' +\n        'textarea:not([disabled]), ' +\n        '[tabindex]:not([tabindex=\"-1\"])'\n      )) as HTMLElement[];\n      \n      // Sort by tabindex and document position\n      focusableElements.current = elements.sort((a, b) => {\n        const aIndex = parseInt(a.getAttribute('tabindex') || '0');\n        const bIndex = parseInt(b.getAttribute('tabindex') || '0');\n        \n        if (aIndex !== bIndex) {\n          if (aIndex === 0) return 1;\n          if (bIndex === 0) return -1;\n          return aIndex - bIndex;\n        }\n        \n        return a.compareDocumentPosition(_b) & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n      });\n    };\n\n    updateFocusableElements();\n    \n    // Update on DOM changes\n// @ts-expect-error - MutationObserver is a global API\n    const observer = new MutationObserver(_updateFocusableElements);\n    observer.observe(document.body, { \n      childList: true, \n      subtree: true,\n      attributes: true,\n      attributeFilter: ['disabled', 'tabindex']\n    });\n\n    return () => observer.disconnect();\n  }, []);\n\n  const moveFocus = useCallback((_direction: 'next' | 'previous' | 'first' | 'last') => {\n    const elements = focusableElements.current;\n    if (elements.length === 0) return;\n\n    const _currentElement = document.activeElement as HTMLElement;\n    const currentIndex = elements.indexOf(_currentElement);\n\n    let newIndex: number;\n    switch (_direction) {\n      case 'next':\n        newIndex = currentIndex >= 0 ? (currentIndex + 1) % elements.length : 0;\n        break;\n      case 'previous':\n        newIndex = currentIndex >= 0 ? (currentIndex - 1 + elements.length) % elements.length : elements.length - 1;\n        break;\n      case 'first':\n        newIndex = 0;\n        break;\n      case 'last':\n        newIndex = elements.length - 1;\n        break;\n    }\n\n    currentFocusIndex.current = newIndex;\n    elements[newIndex]?.focus();\n  }, []);\n\n  // Tab navigation enhancement\n  useEffect(() => {\n    const handleTabKey = (_event: KeyboardEvent) => {\n      if (_event.key === 'Tab') {\n        // Let browser handle normal tab navigation\n        // but track the current focus index\n        setTimeout(() => {\n          const _currentElement = document.activeElement as HTMLElement;\n          const index = focusableElements.current.indexOf(_currentElement);\n          if (index >= 0) {\n            currentFocusIndex.current = index;\n          }\n        }, 0);\n      }\n    };\n\n    window.addEventListener('keydown', handleTabKey);\n    return () => window.removeEventListener('keydown', handleTabKey);\n  }, []);\n\n  return {\n    moveFocus,\n    focusFirst: () => moveFocus('first'),\n    focusLast: () => moveFocus('last'),\n    focusNext: () => moveFocus('next'),\n    focusPrevious: () => moveFocus('previous'),\n  };\n}\n\n// Hook for screen reader announcements\nexport function useScreenReaderAnnouncement() {\n  const announcementRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    // Create a visually hidden div for screen reader announcements\n    const div = document.createElement('div');\n    div.setAttribute('role', 'status');\n    div.setAttribute('aria-live', 'polite');\n    div.setAttribute('aria-atomic', 'true');\n    div.style.cssText = `\n      position: absolute;\n      left: -10000px;\n      width: 1px;\n      height: 1px;\n      overflow: hidden;\n    `;\n    document.body.appendChild(_div);\n    announcementRef.current = div;\n\n    return () => {\n      if (announcementRef.current && document.body.contains(announcementRef.current)) {\n        document.body.removeChild(announcementRef.current);\n      }\n    };\n  }, []);\n\n  const announce = useCallback((message: string, priority: 'polite' | 'assertive' = 'polite') => {\n    if (announcementRef.current) {\n      announcementRef.current.setAttribute('aria-live', priority);\n      announcementRef.current.textContent = '';\n      \n      // Small delay to ensure screen reader picks up the change\n      setTimeout(() => {\n        if (announcementRef.current) {\n          announcementRef.current.textContent = message;\n        }\n      }, 100);\n    }\n  }, []);\n\n  return { announce };\n}\n\n// Hook for reduced motion preferences\nexport function useReducedMotion() {\n  const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n  const prefersReducedMotion = mediaQuery.matches;\n\n  useEffect(() => {\n    const handleChange = (_event: MediaQueryListEvent) => {\n      // Could trigger a state update here if needed\n      logger.info('Motion preference changed:', _event.matches ? 'reduced' : 'normal');\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n\n  return prefersReducedMotion;\n}\n\n// Main accessibility hook that combines all features\nexport function useAccessibility() {\n  const keyboard = useKeyboardNavigation();\n  const focus = useFocusManagement();\n  const screenReader = useScreenReaderAnnouncement();\n  const reducedMotion = useReducedMotion();\n\n  return {\n    keyboard,\n    focus,\n    screenReader,\n    reducedMotion,\n  };\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useMobileFeatures.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":86,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":99,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":113,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":113,"endColumn":22},{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":114,"column":13,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":114,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":126,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":141,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":141,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":396,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":396,"endColumn":24}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Comprehensive mobile features hook for enhanced mobile experience\n * Provides device detection, touch gestures, and mobile-specific utilities\n */\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { logger } from '../utils/logger';\n\ninterface DeviceInfo {\n  isMobile: boolean;\n  isTablet: boolean;\n  isIOS: boolean;\n  isAndroid: boolean;\n  isPWA: boolean;\n  hasTouch: boolean;\n  screenSize: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n  orientation: 'portrait' | 'landscape';\n  devicePixelRatio: number;\n}\n\ninterface _TouchGesture {\n  type: 'swipe' | 'pinch' | 'tap' | 'longPress' | 'doubleTap';\n  direction?: 'up' | 'down' | 'left' | 'right';\n  distance?: number;\n  _scale?: number;\n  duration?: number;\n}\n\nexport function useMobileFeatures() {\n  const [deviceInfo, setDeviceInfo] = useState<DeviceInfo>(() => getDeviceInfo());\n  const [isAppInstallable, setIsAppInstallable] = useState(false);\n  const [deferredPrompt, setDeferredPrompt] = useState<unknown>(null);\n\n  // Update device info on resize and orientation change\n  useEffect(() => {\n    const updateDeviceInfo = () => {\n      setDeviceInfo(getDeviceInfo());\n    };\n\n    window.addEventListener('resize', updateDeviceInfo);\n    window.addEventListener('orientationchange', updateDeviceInfo);\n\n    return () => {\n      window.removeEventListener('resize', updateDeviceInfo);\n      window.removeEventListener('orientationchange', updateDeviceInfo);\n    };\n  }, []);\n\n  // Handle PWA install prompt\n  useEffect(() => {\n    const handleBeforeInstallPrompt = (e: Event) => {\n      e.preventDefault();\n      setDeferredPrompt(_e);\n      setIsAppInstallable(true);\n    };\n\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    };\n  }, []);\n\n  // Install PWA\n  const installApp = useCallback(async () => {\n    if (!deferredPrompt) return false;\n\n    try {\n      deferredPrompt.prompt();\n      const { outcome } = await deferredPrompt.userChoice;\n      \n      if (outcome === 'accepted') {\n        setIsAppInstallable(false);\n        setDeferredPrompt(null);\n        \n        // Track installation\n        if ('gtag' in window) {\n          (window as unknown).gtag('event', 'pwa_install', {\n            event_category: 'engagement',\n            event_label: 'success'\n          });\n        }\n        \n        return true;\n      }\n    } catch (_error) {\n      logger.error('PWA installation failed:');\n    }\n    \n    return false;\n  }, [deferredPrompt]);\n\n  // Request persistent storage for offline data\n  const requestPersistentStorage = useCallback(async () => {\n    if ('storage' in navigator && 'persist' in navigator.storage) {\n      try {\n        const granted = await navigator.storage.persist();\n        return granted;\n      } catch (_error) {\n        logger.error('Persistent storage request failed:');\n        return false;\n      }\n    }\n    return false;\n  }, []);\n\n  // Share functionality\n  const share = useCallback(async (data: ShareData) => {\n    if ('share' in navigator && deviceInfo.isMobile) {\n      try {\n        await navigator.share(_data);\n        return true;\n      } catch (_error) {\n        if ('AbortError' !== 'AbortError') {\n          logger.error('Share failed:');\n        }\n        return false;\n      }\n    }\n    \n    // Fallback to clipboard\n    if (data.url) {\n      try {\n        await navigator.clipboard.writeText(data.url);\n        return true;\n      } catch (_error) {\n        logger.error('Clipboard write failed:');\n        return false;\n      }\n    }\n    \n    return false;\n  }, [deviceInfo.isMobile]);\n\n  // Wake lock for keeping screen on during crisis situations\n  const requestWakeLock = useCallback(async () => {\n    if ('wakeLock' in navigator) {\n      try {\n        const wakeLock = await (navigator as unknown).wakeLock.request('screen');\n        return wakeLock;\n      } catch (_error) {\n        logger.error('Wake lock request failed:');\n        return null;\n      }\n    }\n    return null;\n  }, []);\n\n  return {\n    deviceInfo,\n    isAppInstallable,\n    installApp,\n    requestPersistentStorage,\n    share,\n    requestWakeLock,\n    // Utility functions\n    isMobileDevice: deviceInfo.isMobile || deviceInfo.isTablet,\n    isSmallScreen: deviceInfo.screenSize === 'xs' || deviceInfo.screenSize === 'sm',\n    canVibrate: 'vibrate' in navigator,\n    canShare: 'share' in navigator,\n    canInstall: isAppInstallable,\n    supportsTouch: deviceInfo.hasTouch,\n    supportsPWA: deviceInfo.isPWA\n  };\n}\n\n// Touch gesture detection hook\nexport function useTouchGestures(\n  element: React.RefObject<HTMLElement>,\n  handlers: {\n    onSwipe?: (direction: 'up' | 'down' | 'left' | 'right', distance: number) => void;\n    onPinch?: (_scale: number) => void;\n    onTap?: (x: number, y: number) => void;\n    onDoubleTap?: (x: number, y: number) => void;\n    onLongPress?: (x: number, y: number) => void;\n  }\n) {\n  const touchStartRef = useRef<{ x: number; y: number; time: number } | null>(null);\n  const _touchEndRef = useRef<{ x: number; y: number; time: number } | null>(null);\n  const lastTapRef = useRef<number>(0);\n  const longPressTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const isPinchingRef = useRef(false);\n  const initialPinchDistanceRef = useRef(0);\n\n  useEffect(() => {\n    const el = element.current;\n    if (!el) return;\n\n    const handleTouchStart = (e: TouchEvent) => {\n      if (e.touches.length === 1) {\n        const touch = e.touches[0];\n        if (!touch) return;\n        touchStartRef.current = {\n          x: touch.clientX,\n          y: touch.clientY,\n          time: Date.now()\n        };\n\n        // Long press detection\n        if (handlers.onLongPress) {\n          longPressTimerRef.current = setTimeout(() => {\n            if (touchStartRef.current) {\n              handlers.onLongPress!(touch?.clientX || 0, touch?.clientY || 0);\n              touchStartRef.current = null; // Prevent swipe after long press\n            }\n          }, 500);\n        }\n      } else if (e.touches.length === 2 && handlers.onPinch && e.touches[0] && e.touches[1]) {\n        // Pinch gesture\n        isPinchingRef.current = true;\n        const distance = getDistance(e.touches[0], e.touches[1]);\n        initialPinchDistanceRef.current = distance;\n      }\n    };\n\n    const handleTouchMove = (e: TouchEvent) => {\n      // Clear long press timer on move\n      if (longPressTimerRef.current) {\n        clearTimeout(longPressTimerRef.current);\n        longPressTimerRef.current = null;\n      }\n\n      // Handle pinch\n      if (isPinchingRef.current && e.touches.length === 2 && handlers.onPinch && e.touches[0] && e.touches[1]) {\n        const distance = getDistance(e.touches[0], e.touches[1]);\n        const _scale = distance / initialPinchDistanceRef.current;\n        handlers.onPinch(_scale);\n      }\n    };\n\n    const handleTouchEnd = (e: TouchEvent) => {\n      // Clear long press timer\n      if (longPressTimerRef.current) {\n        clearTimeout(longPressTimerRef.current);\n        longPressTimerRef.current = null;\n      }\n\n      if (isPinchingRef.current) {\n        isPinchingRef.current = false;\n        return;\n      }\n\n      if (!touchStartRef.current) return;\n\n      const touch = e.changedTouches[0];\n      if (!touch) return;\n      const endTime = Date.now();\n      const duration = endTime - touchStartRef.current.time;\n      const deltaX = touch.clientX - touchStartRef.current.x;\n      const deltaY = touch.clientY - touchStartRef.current.y;\n      const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n\n      // Tap detection (short duration, small movement)\n      if (duration < 200 && distance < 10) {\n        // Double tap detection\n        if (handlers.onDoubleTap && endTime - lastTapRef.current < 300) {\n          handlers.onDoubleTap(touch?.clientX || 0, touch?.clientY || 0);\n          lastTapRef.current = 0;\n        } else if (handlers.onTap) {\n          handlers.onTap(touch?.clientX || 0, touch?.clientY || 0);\n          lastTapRef.current = endTime;\n        }\n      }\n      // Swipe detection\n      else if (handlers.onSwipe && distance > 50 && duration < 500) {\n        const absX = Math.abs(_deltaX);\n        const absY = Math.abs(_deltaY);\n\n        if (absX > absY) {\n          handlers.onSwipe(deltaX > 0 ? 'right' : 'left', absX);\n        } else {\n          handlers.onSwipe(deltaY > 0 ? 'down' : 'up', absY);\n        }\n      }\n\n      touchStartRef.current = null;\n    };\n\n    el.addEventListener('touchstart', handleTouchStart, { passive: true });\n    el.addEventListener('touchmove', handleTouchMove, { passive: true });\n    el.addEventListener('touchend', handleTouchEnd, { passive: true });\n\n    return () => {\n      el.removeEventListener('touchstart', handleTouchStart);\n      el.removeEventListener('touchmove', handleTouchMove);\n      el.removeEventListener('touchend', handleTouchEnd);\n      if (longPressTimerRef.current) {\n        clearTimeout(longPressTimerRef.current);\n      }\n    };\n  }, [element, handlers]);\n}\n\n// Helper functions\nfunction getDeviceInfo(): DeviceInfo {\n  const _userAgent = navigator._userAgent.toLowerCase();\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n\n  return {\n    isMobile: /iphone|ipod|android|blackberry|windows phone/.test(_userAgent) || width < 768,\n    isTablet: /ipad|android/.test(_userAgent) && width >= 768 && width < 1024,\n    isIOS: /iphone|ipad|ipod/.test(_userAgent),\n    isAndroid: /android/.test(_userAgent),\n    isPWA: window.matchMedia('(display-mode: standalone)').matches || \n           (window.navigator as unknown).standalone === true,\n    hasTouch: 'ontouchstart' in window || navigator.maxTouchPoints > 0,\n    screenSize: getScreenSize(_width),\n    orientation: width > height ? 'landscape' : 'portrait',\n    devicePixelRatio: window.devicePixelRatio || 1\n  };\n}\n\nfunction getScreenSize(width: number): 'xs' | 'sm' | 'md' | 'lg' | 'xl' {\n  if (width < 640) return 'xs';\n  if (width < 768) return 'sm';\n  if (width < 1024) return 'md';\n  if (width < 1280) return 'lg';\n  return 'xl';\n}\n\nfunction getDistance(touch1: Touch, touch2: Touch): number {\n  const deltaX = touch2.clientX - touch1.clientX;\n  const deltaY = touch2.clientY - touch1.clientY;\n  return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n}\n\n// Mobile-optimized scroll lock for modals\nexport function useScrollLock(isLocked: boolean) {\n  useEffect(() => {\n    if (!isLocked) return;\n\n    const originalStyle = window.getComputedStyle(document.body).overflow;\n    const scrollY = window.scrollY;\n\n    // Lock scroll\n    document.body.style.position = 'fixed';\n    document.body.style.top = `-${scrollY}px`;\n    document.body.style.width = '100%';\n    document.body.style.overflow = 'hidden';\n\n    return () => {\n      // Restore scroll\n      document.body.style.position = '';\n      document.body.style.top = '';\n      document.body.style.width = '';\n      document.body.style.overflow = originalStyle;\n      window.scrollTo(0, scrollY);\n    };\n  }, [isLocked]);\n}\n\n// Pull-to-refresh hook\nexport function usePullToRefresh(\n  onRefresh: () => Promise<void>,\n  options: {\n    threshold?: number;\n    disabled?: boolean;\n  } = {}\n) {\n  const { threshold = 80, disabled = false } = options;\n  const [isPulling, setIsPulling] = useState(false);\n  const [pullDistance, setPullDistance] = useState(0);\n  const startYRef = useRef(0);\n\n  useEffect(() => {\n    if (_disabled) return;\n\n    const handleTouchStart = (e: TouchEvent) => {\n      if (window.scrollY === 0) {\n        const touch = e.touches[0];\n        if (!touch) return;\n        startYRef.current = touch.clientY;\n      }\n    };\n\n    const handleTouchMove = (e: TouchEvent) => {\n      if (startYRef.current === 0) return;\n\n      const touch = e.touches[0];\n      if (!touch) return;\n      const currentY = touch.clientY;\n      const distance = currentY - startYRef.current;\n\n      if (distance > 0 && window.scrollY === 0) {\n        e.preventDefault();\n        setIsPulling(true);\n        setPullDistance(Math.min(distance, threshold * 1.5));\n      }\n    };\n\n    const handleTouchEnd = async () => {\n      if (pullDistance > threshold) {\n        try {\n          await onRefresh();\n        } catch (_error) {\n          logger.error('Pull to refresh failed:');\n        }\n      }\n\n      setIsPulling(false);\n      setPullDistance(0);\n      startYRef.current = 0;\n    };\n\n    document.addEventListener('touchstart', handleTouchStart, { passive: true });\n    document.addEventListener('touchmove', handleTouchMove, { passive: false });\n    document.addEventListener('touchend', handleTouchEnd, { passive: true });\n\n    return () => {\n      document.removeEventListener('touchstart', handleTouchStart);\n      document.removeEventListener('touchmove', handleTouchMove);\n      document.removeEventListener('touchend', handleTouchEnd);\n    };\n  }, [disabled, onRefresh, pullDistance, threshold]);\n\n  return {\n    isPulling,\n    pullDistance,\n    pullProgress: Math.min(pullDistance / threshold, 1)\n  };\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useNavigatorOnLine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useNetworkStatus.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\usePerformanceMonitor.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[448,451],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[448,451],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":92,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":95,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1078,1081],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1078,1081],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'enableLogging'. Either exclude it or remove the dependency array.","line":59,"column":6,"nodeType":"ArrayExpression","endLine":59,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [bufferSize]","fix":{"range":[1641,1668],"text":"[bufferSize]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useRef } from 'react';\nimport { logger } from '../utils/logger';\n\n/**\n * Privacy-First Performance Monitor\n * \n * Monitors performance locally for user experience optimization\n * but NEVER sends any data to external servers.\n * \n * 🔒 All metrics stay local\n * 🔒 No external reporting\n * 🔒 Complete privacy\n */\n\ninterface PerformanceMetric {\n  name: string;\n  value: number;\n  timestamp: number;\n  metadata?: Record<string, any>;\n}\n\ninterface PerformanceMonitorConfig {\n  enableLogging?: boolean;\n  enableReporting?: boolean; // Always false - we never report\n  reportingEndpoint?: string; // Ignored - no reporting\n  sampleRate?: number;\n  bufferSize?: number;\n}\n\nexport function usePerformanceMonitor(config: PerformanceMonitorConfig = {}) {\n  const {\n    enableLogging = process.env.NODE_ENV === 'development',\n    bufferSize = 100\n  } = config;\n\n  const metricsBuffer = useRef<PerformanceMetric[]>([]);\n\n  // Record metrics locally only - never sent anywhere\n  const recordMetric = useCallback((name: string, value: number, metadata?: Record<string, any>) => {\n    const _metric: PerformanceMetric = {\n      name,\n      value,\n      timestamp: Date.now(),\n      metadata\n    };\n\n    // Only log in development for debugging\n    if (_enableLogging) {\n      logger.info(`[Local Performance] ${name}:`, value, metadata);\n    }\n\n    // Keep metrics in local buffer for app optimization only\n    metricsBuffer.current.push(_metric);\n    \n    // Trim buffer to prevent memory issues\n    if (metricsBuffer.current.length > bufferSize) {\n      metricsBuffer.current = metricsBuffer.current.slice(-bufferSize);\n    }\n  }, [enableLogging, bufferSize]);\n\n  // No-op flush - we never send data anywhere\n  const flushMetrics = useCallback(async () => {\n    // Clear local buffer without sending\n    metricsBuffer.current = [];\n    \n    if (process.env.NODE_ENV === 'development') {\n      logger.info('[Privacy Mode] Metrics cleared locally - nothing sent');\n    }\n  }, []);\n\n  return {\n    recordMetric,\n    flushMetrics,\n    getMetrics: () => [...metricsBuffer.current] // Local access only\n  };\n}\n\n/**\n * Privacy Guarantee:\n * - No session IDs are generated or stored\n * - No user agents are collected\n * - No data leaves your device\n * - Performance monitoring is purely for local app optimization\n */","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useQuickActionsContext.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":201,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":201,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":209,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":209,"endColumn":22},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'defaultActions'. Either include it or remove the dependency array.","line":213,"column":6,"nodeType":"ArrayExpression","endLine":213,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [defaultActions]","fix":{"range":[6177,6179],"text":"[defaultActions]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, _useMemo } from 'react';\nimport { QuickAction } from '../types/dashboard';\nimport { useNavigate } from 'react-router-dom';\nimport { secureStorage } from '../services/security/SecureLocalStorage';\nimport { logger } from '../utils/logger';\n\ninterface QuickActionsContext {\n  actions: QuickAction[];\n  executeAction: (action: QuickAction) => void;\n  addCustomAction: (action: Omit<QuickAction, 'id'>) => void;\n  removeAction: (actionId: string) => void;\n  updateAction: (actionId: string, updates: Partial<QuickAction>) => void;\n  getFrequentActions: () => QuickAction[];\n  getRecentActions: () => QuickAction[];\n  searchActions: (query: string) => QuickAction[];\n  actionHistory: string[];\n  customActions: QuickAction[];\n}\n\nexport function useQuickActionsContext(): QuickActionsContext {\n  const navigate = useNavigate();\n  \n  // Default quick actions\n  const defaultActions: QuickAction[] = [\n    {\n      id: 'mood-log',\n      label: 'Log Mood',\n      icon: 'brain',\n      description: 'Track how you\\'re feeling',\n      action: '/wellness/mood',\n      color: 'bg-purple-500',\n      category: 'tracking',\n      keyboard: 'alt+m',\n      tags: ['mood', 'tracking', 'wellness']\n    },\n    {\n      id: 'meditation',\n      label: 'Meditate',\n      icon: 'heart',\n      description: '5-minute guided session',\n      action: '/wellness/meditation',\n      color: 'bg-blue-500',\n      category: 'wellness',\n      keyboard: 'alt+d',\n      voiceAlias: ['meditation', 'meditate'],\n      tags: ['meditation', 'mindfulness', 'relaxation']\n    },\n    {\n      id: 'journal',\n      label: 'Journal',\n      icon: 'edit',\n      description: 'Write your thoughts',\n      action: '/wellness/journal',\n      color: 'bg-green-500',\n      category: 'tracking',\n      keyboard: 'alt+j',\n      tags: ['journal', 'writing', 'reflection']\n    },\n    {\n      id: 'emergency-hotline',\n      label: 'Crisis Help',\n      icon: 'phone',\n      description: 'Get immediate support',\n      action: 'tel:988',\n      color: 'bg-red-500',\n      category: 'crisis',\n      isEmergency: true,\n      keyboard: 'alt+h',\n      tags: ['crisis', 'emergency', 'help', '988']\n    },\n    {\n      id: 'breathing',\n      label: 'Breathe',\n      icon: 'activity',\n      description: 'Breathing exercise',\n      action: '/wellness/breathe',\n      color: 'bg-cyan-500',\n      category: 'wellness',\n      keyboard: 'alt+b',\n      tags: ['breathing', 'calm', 'anxiety', 'relax']\n    },\n    {\n      id: 'grounding',\n      label: 'Grounding',\n      icon: 'shield',\n      description: '5-4-3-2-1 technique',\n      action: '/wellness/grounding',\n      color: 'bg-purple-500',\n      category: 'wellness',\n      tags: ['grounding', 'anxiety', 'panic', 'calm']\n    },\n    {\n      id: 'community',\n      label: 'Connect',\n      icon: 'users',\n      description: 'Join support group',\n      action: '/community',\n      color: 'bg-indigo-500',\n      category: 'social',\n      tags: ['community', 'support', 'social', 'connect']\n    },\n    {\n      id: 'therapy-session',\n      label: 'Therapy',\n      icon: 'calendar',\n      description: 'Schedule or join session',\n      action: '/therapy',\n      color: 'bg-green-500',\n      category: 'professional',\n      keyboard: 'alt+t',\n      tags: ['therapy', 'professional', 'counseling']\n    },\n    {\n      id: 'medication',\n      label: 'Medication',\n      icon: 'pill',\n      description: 'Track medication',\n      action: '/wellness/medication',\n      color: 'bg-orange-500',\n      category: 'tracking',\n      keyboard: 'alt+p',\n      tags: ['medication', 'pills', 'medicine', 'tracking']\n    },\n    {\n      id: 'safety-plan',\n      label: 'Safety Plan',\n      icon: 'shield',\n      description: 'Access your safety plan',\n      action: '/crisis/safety-plan',\n      color: 'bg-red-500',\n      category: 'crisis',\n      tags: ['safety', 'crisis', 'plan', 'emergency']\n    },\n    {\n      id: 'sleep-log',\n      label: 'Sleep',\n      icon: 'moon',\n      description: 'Log sleep quality',\n      action: '/wellness/sleep',\n      color: 'bg-indigo-500',\n      category: 'tracking',\n      tags: ['sleep', 'rest', 'tracking']\n    },\n    {\n      id: 'exercise',\n      label: 'Exercise',\n      icon: 'activity',\n      description: 'Log physical activity',\n      action: '/wellness/exercise',\n      color: 'bg-green-500',\n      category: 'tracking',\n      tags: ['exercise', 'fitness', 'activity', 'movement']\n    },\n    {\n      id: 'gratitude',\n      label: 'Gratitude',\n      icon: 'heart',\n      description: 'Practice gratitude',\n      action: '/wellness/gratitude',\n      color: 'bg-pink-500',\n      category: 'wellness',\n      tags: ['gratitude', 'thankful', 'positive']\n    },\n    {\n      id: 'music-therapy',\n      label: 'Music',\n      icon: 'music',\n      description: 'Therapeutic music',\n      action: '/wellness/music',\n      color: 'bg-purple-500',\n      category: 'wellness',\n      tags: ['music', 'audio', 'relaxation', 'therapy']\n    },\n    {\n      id: 'crisis-text',\n      label: 'Crisis Text',\n      icon: 'message',\n      description: 'Text HOME to 741741',\n      action: 'sms:741741?body=HOME',\n      color: 'bg-red-500',\n      category: 'crisis',\n      isEmergency: true,\n      tags: ['crisis', 'text', 'chat', 'help']\n    }\n  ];\n\n  const [actions, setActions] = useState<QuickAction[]>(_defaultActions);\n  const [customActions, setCustomActions] = useState<QuickAction[]>([]);\n  const [actionHistory, setActionHistory] = useState<string[]>([]);\n\n  // Load custom actions and history from localStorage\n  useEffect(() => {\n    const _savedCustomActions = secureStorage.getItem('customQuickActions');\n    const _savedHistory = secureStorage.getItem('actionHistory');\n    \n    if (_savedCustomActions) {\n      try {\n        const parsed = JSON.parse(_savedCustomActions);\n        setCustomActions(_parsed);\n        setActions([...defaultActions, ...parsed]);\n      } catch (_error) {\n        logger.error('Error loading custom actions:');\n      }\n    }\n    \n    if (_savedHistory) {\n      try {\n        setActionHistory(JSON.parse(_savedHistory));\n      } catch (_error) {\n        logger.error('Error loading action history:');\n      }\n    }\n  }, []);\n\n  // Save custom actions to localStorage\n  useEffect(() => {\n    if (customActions.length > 0) {\n      secureStorage.setItem('customQuickActions', JSON.stringify(customActions));\n    }\n  }, [customActions]);\n\n  // Save action history to localStorage\n  useEffect(() => {\n    if (actionHistory.length > 0) {\n      secureStorage.setItem('actionHistory', JSON.stringify(actionHistory.slice(-100))); // Keep last 100\n    }\n  }, [actionHistory]);\n\n  // Execute an action\n  const executeAction = useCallback((action: QuickAction) => {\n    // Add to history\n    setActionHistory(prev => [...prev, action.id]);\n    \n    // Handle different action types\n    if (action.action.startsWith('http')) {\n      // External URL\n      window.open(action.action, '_blank');\n    } else if (action.action.startsWith('tel:')) {\n      // Phone call\n      window.location.href = action.action;\n    } else if (action.action.startsWith('sms:')) {\n      // SMS\n      window.location.href = action.action;\n    } else if (action.action.startsWith('mailto:')) {\n      // Email\n      window.location.href = action.action;\n    } else if (action.action.startsWith('/')) {\n      // Internal route\n      navigate(action.action);\n    } else if (action.action.startsWith('function:')) {\n      // Custom function (would need to be implemented based on your app's needs)\n      const functionName = action.action.replace('function:', '');\n      logger.info(`Executing function: ${functionName}`);\n    }\n    \n    // Log analytics\n    logger.info('Action executed:', {\n      id: action.id,\n      label: action.label,\n      category: action.category,\n      timestamp: new Date().toISOString()\n    });\n  }, [navigate]);\n\n  // Add custom action\n  const addCustomAction = useCallback((action: Omit<QuickAction, 'id'>) => {\n    const newAction: QuickAction = {\n      ...action,\n      id: `custom-${Date.now()}`\n    };\n    \n    setCustomActions(prev => [...prev, newAction]);\n    setActions(prev => [...prev, newAction]);\n  }, []);\n\n  // Remove action\n  const removeAction = useCallback((actionId: string) => {\n    if (actionId.startsWith('custom-')) {\n      setCustomActions(prev => prev.filter(a => a.id !== actionId));\n      setActions(prev => prev.filter(a => a.id !== actionId));\n    }\n  }, []);\n\n  // Update action\n  const updateAction = useCallback((actionId: string, updates: Partial<QuickAction>) => {\n    const _updateFn = (action: QuickAction) => \n      action.id === actionId ? { ...action, ...updates } : action;\n    \n    setActions(prev => prev.map(_updateFn));\n    \n    if (actionId.startsWith('custom-')) {\n      setCustomActions(prev => prev.map(_updateFn));\n    }\n  }, []);\n\n  // Get frequent actions based on history\n  const getFrequentActions = useCallback((): QuickAction[] => {\n    const _frequency = actionHistory.reduce((acc, id) => {\n      acc[id] = (acc[id] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n    \n    const sortedIds = Object.entries(_frequency)\n      .sort(([, a], [, b]) => b - a)\n      .map(([id]) => id);\n    \n    return sortedIds\n      .map(id => actions.find(a => a.id === id))\n      .filter(_Boolean) as QuickAction[];\n  }, [actionHistory, actions]);\n\n  // Get recent actions\n  const getRecentActions = useCallback((): QuickAction[] => {\n    const recentIds = [...new Set(actionHistory.slice(-10).reverse())];\n    \n    return recentIds\n      .map(id => actions.find(a => a.id === id))\n      .filter(_Boolean) as QuickAction[];\n  }, [actionHistory, actions]);\n\n  // Search actions\n  const searchActions = useCallback((query: string): QuickAction[] => {\n    const _lowerQuery = query.toLowerCase();\n    \n    return actions.filter(action => \n      action.label.toLowerCase().includes(_lowerQuery) ||\n      action.description?.toLowerCase().includes(_lowerQuery) ||\n      action.tags?.some(tag => tag.toLowerCase().includes(_lowerQuery)) ||\n      action.category.toLowerCase().includes(_lowerQuery)\n    );\n  }, [actions]);\n\n  return {\n    actions,\n    executeAction,\n    addCustomAction,\n    removeAction,\n    updateAction,\n    getFrequentActions,\n    getRecentActions,\n    searchActions,\n    actionHistory,\n    customActions\n  };\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useToast.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'removeToast'. Either include it or remove the dependency array.","line":35,"column":6,"nodeType":"ArrayExpression","endLine":35,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [removeToast]","fix":{"range":[1049,1051],"text":"[removeToast]"}}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":49,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":49,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext, useContext, useState, useCallback, ReactNode } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nexport type ToastType = 'success' | 'error' | 'warning' | 'info';\n\nexport interface Toast {\n  id: string;\n  message: string;\n  _type: ToastType;\n  duration?: number;\n}\n\ninterface ToastContextType {\n  toasts: Toast[];\n  addToast: (message: string, _type?: ToastType, duration?: number) => void;\n  removeToast: (id: string) => void;\n}\n\nconst ToastContext = createContext<ToastContextType | undefined>(_undefined);\n\nexport function ToastProvider({ children }: { children: ReactNode }) {\n  const [toasts, setToasts] = useState<Toast[]>([]);\n\n  const addToast = useCallback((message: string, _type: ToastType = 'info', duration = 5000) => {\n    const id = Math.random().toString(36).substring(7);\n    const toast: Toast = { id, message, _type, duration };\n    \n    setToasts((prev) => [...prev, toast]);\n\n    if (duration > 0) {\n      setTimeout(() => {\n        removeToast(_id);\n      }, duration);\n    }\n  }, []);\n\n  const removeToast = useCallback((id: string) => {\n    setToasts((prev) => prev.filter((toast) => toast.id !== id));\n  }, []);\n\n  return (\n    <ToastContext.Provider value={{ toasts, addToast, removeToast }}>\n      {children}\n      <ToastContainer toasts={toasts} removeToast={removeToast} />\n    </ToastContext.Provider>\n  );\n}\n\nexport function useToast() {\n  const context = useContext(_ToastContext);\n  if (!context) {\n    throw new Error('useToast must be used within a ToastProvider');\n  }\n  return context;\n}\n\nfunction ToastContainer({ toasts, removeToast }: { toasts: Toast[]; removeToast: (id: string) => void }) {\n  const getIcon = (_type: ToastType) => {\n    switch (_type) {\n      case 'success':\n        return '✅';\n      case 'error':\n        return '❌';\n      case 'warning':\n        return '⚠️';\n      case 'info':\n      default:\n        return 'ℹ️';\n    }\n  };\n\n  const getColorClasses = (_type: ToastType) => {\n    switch (_type) {\n      case 'success':\n        return 'bg-green-50 border-green-200 text-green-800';\n      case 'error':\n        return 'bg-red-50 border-red-200 text-red-800';\n      case 'warning':\n        return 'bg-yellow-50 border-yellow-200 text-yellow-800';\n      case 'info':\n      default:\n        return 'bg-blue-50 border-blue-200 text-blue-800';\n    }\n  };\n\n  return (\n    <div className=\"fixed bottom-4 right-4 z-50 space-y-2\">\n      <AnimatePresence>\n        {toasts.map((toast) => (\n          <motion.div\n            key={toast.id}\n            initial={{ opacity: 0, x: 100, scale: 0.95 }}\n            animate={{ opacity: 1, x: 0, scale: 1 }}\n            exit={{ opacity: 0, x: 100, scale: 0.95 }}\n            transition={{ duration: 0.2 }}\n            className={`\n              flex items-center gap-3 px-4 py-3 rounded-lg border shadow-lg\n              min-w-[300px] max-w-[500px] ${getColorClasses(toast._type)}\n            `}\n          >\n            <span className=\"text-xl\" role=\"img\" aria-label={toast._type}>\n              {getIcon(toast._type)}\n            </span>\n            <p className=\"flex-1 text-sm font-medium\">{toast.message}</p>\n            <button\n              onClick={() => removeToast(toast.id)}\n              className=\"ml-2 text-gray-500 hover:text-gray-700 transition-colors\"\n              aria-label=\"Close notification\"\n            >\n              <svg\n                className=\"w-4 h-4\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M6 18L18 6M6 6l12 12\"\n                />\n              </svg>\n            </button>\n          </motion.div>\n        ))}\n      </AnimatePresence>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useUserPreferences.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":140,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":140,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":165,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":165,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":237,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":237,"endColumn":20}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\nimport { secureStorage } from '../services/security/SecureLocalStorage';\n\ninterface UserPreferences {\n  theme: 'light' | 'dark' | 'auto' | 'calm' | 'focus';\n  language: string;\n  timezone: string;\n  notifications: NotificationPreferences;\n  privacy: PrivacyPreferences;\n  accessibility: AccessibilityPreferences;\n  quickActions: QuickActionPreferences;\n  dashboard: DashboardPreferences;\n}\n\ninterface NotificationPreferences {\n  enabled: boolean;\n  sound: boolean;\n  vibration: boolean;\n  crisisAlerts: boolean;\n  medicationReminders: boolean;\n  appointmentReminders: boolean;\n  moodCheckIns: boolean;\n  supportMessages: boolean;\n  quietHours: {\n    enabled: boolean;\n    start: string;\n    end: string;\n  };\n}\n\ninterface PrivacyPreferences {\n  shareLocation: boolean;\n  shareWithTherapist: boolean;\n  anonymousData: boolean;\n  emergencyContactAccess: boolean;\n  dataRetention: '30days' | '90days' | '1year' | 'forever';\n}\n\ninterface AccessibilityPreferences {\n  fontSize: number;\n  highContrast: boolean;\n  reducedMotion: boolean;\n  screenReader: boolean;\n  keyboardNavigation: boolean;\n  voiceControl: boolean;\n}\n\ninterface QuickActionPreferences {\n  layout: 'grid' | 'list' | 'compact';\n  showLabels: boolean;\n  showDescriptions: boolean;\n  actionSize: 'small' | 'medium' | 'large';\n  frequentActionsCount: number;\n  contextualSuggestions: boolean;\n}\n\ninterface DashboardPreferences {\n  widgetLayout: string[];\n  compactMode: boolean;\n  showWelcomeMessage: boolean;\n  defaultView: 'overview' | 'crisis' | 'wellness' | 'schedule';\n  refreshInterval: number;\n}\n\nconst defaultPreferences: UserPreferences = {\n  theme: 'auto',\n  language: 'en',\n  timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n  notifications: {\n    enabled: true,\n    sound: true,\n    vibration: true,\n    crisisAlerts: true,\n    medicationReminders: true,\n    appointmentReminders: true,\n    moodCheckIns: true,\n    supportMessages: true,\n    quietHours: {\n      enabled: false,\n      start: '22:00',\n      end: '08:00'\n    }\n  },\n  privacy: {\n    shareLocation: false,\n    shareWithTherapist: true,\n    anonymousData: true,\n    emergencyContactAccess: true,\n    dataRetention: '1year'\n  },\n  accessibility: {\n    fontSize: 100,\n    highContrast: false,\n    reducedMotion: false,\n    screenReader: false,\n    keyboardNavigation: true,\n    voiceControl: false\n  },\n  quickActions: {\n    layout: 'grid',\n    showLabels: true,\n    showDescriptions: true,\n    actionSize: 'medium',\n    frequentActionsCount: 5,\n    contextualSuggestions: true\n  },\n  dashboard: {\n    widgetLayout: [],\n    compactMode: false,\n    showWelcomeMessage: true,\n    defaultView: 'overview',\n    refreshInterval: 60\n  }\n};\n\nexport function useUserPreferences(userId: string) {\n  const [preferences, setPreferences] = useState<UserPreferences>(_defaultPreferences);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load preferences from localStorage or API\n  useEffect(() => {\n    const loadPreferences = async () => {\n      try {\n        setLoading(true);\n        \n        // Try to load from localStorage first\n        const _localKey = `userPreferences_${userId}`;\n        const _savedPreferences = secureStorage.getItem(_localKey);\n        \n        if (_savedPreferences) {\n          const parsed = JSON.parse(_savedPreferences);\n          setPreferences({ ...defaultPreferences, ...parsed });\n        } else {\n          // If not in localStorage, you could fetch from API here\n          // const response = await fetch(`/api/users/${userId}/preferences`);\n          // const data = await response.json();\n          // setPreferences(_data);\n        }\n      } catch (_error) {\n        logger.error('Error loading preferences:', err);\n        setError('Failed to load preferences');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadPreferences();\n  }, [userId]);\n\n  // Save preferences to localStorage (and optionally to API)\n  const savePreferences = useCallback(async (_newPreferences: UserPreferences) => {\n    try {\n      const _localKey = `userPreferences_${userId}`;\n      secureStorage.setItem(_localKey, JSON.stringify(_newPreferences));\n      \n      // Optionally save to API\n      // await fetch(`/api/users/${userId}/preferences`, {\n      //   method: 'PUT',\n      //   headers: { 'Content-Type': 'application/json' },\n      //   body: JSON.stringify(_newPreferences)\n      // });\n      \n      return true;\n    } catch (_error) {\n      logger.error('Error saving preferences:', err);\n      setError('Failed to save preferences');\n      return false;\n    }\n  }, [userId]);\n\n  // Update a specific preference\n  const updatePreference = useCallback(async <K extends keyof UserPreferences>(\n    key: K,\n    value: UserPreferences[K]\n  ) => {\n    const _newPreferences = { ...preferences, [key]: value };\n    setPreferences(_newPreferences);\n    await savePreferences(_newPreferences);\n  }, [preferences, savePreferences]);\n\n  // Update nested preference\n  const updateNestedPreference = useCallback(async <\n    K extends keyof UserPreferences,\n    NK extends keyof UserPreferences[K]\n  >(\n    category: K,\n    key: NK,\n    value: UserPreferences[K][NK]\n  ) => {\n    const _newPreferences = {\n      ...preferences,\n      [category]: {\n        ...(preferences[category] as object),\n        [key]: value\n      }\n    };\n    setPreferences(_newPreferences);\n    await savePreferences(_newPreferences);\n  }, [preferences, savePreferences]);\n\n  // Reset to defaults\n  const resetToDefaults = useCallback(async () => {\n    setPreferences(_defaultPreferences);\n    await savePreferences(_defaultPreferences);\n  }, [savePreferences]);\n\n  // Export preferences\n  const exportPreferences = useCallback(() => {\n    const _dataStr = JSON.stringify(preferences, null, 2);\n    const dataUri = `data:application/json;charset=utf-8,${ encodeURIComponent(_dataStr)}`;\n    \n    const exportFileDefaultName = `preferences_${userId}_${Date.now()}.json`;\n    \n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', dataUri);\n    linkElement.setAttribute('download', exportFileDefaultName);\n    linkElement.click();\n  }, [preferences, userId]);\n\n  // Import preferences\n  const importPreferences = useCallback(async (file: File): Promise<boolean> => {\n    try {\n      const _text = await file._text();\n      const imported = JSON.parse(_text);\n      \n      // Validate imported preferences\n      if (!imported.theme || !imported.notifications) {\n        throw new Error('Invalid preferences file');\n      }\n      \n      const _newPreferences = { ...defaultPreferences, ...imported };\n      setPreferences(_newPreferences);\n      await savePreferences(_newPreferences);\n      \n      return true;\n    } catch (_error) {\n      logger.error('Error importing preferences:', err);\n      setError('Failed to import preferences');\nimport { logger } from '../utils/logger';\n      return false;\n    }\n  }, [savePreferences]);\n\n  // Apply theme\n  useEffect(() => {\n    const applyTheme = () => {\n      let theme = preferences.theme;\n      \n      if (theme === 'auto') {\n        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n        theme = prefersDark ? 'dark' : 'light';\n      }\n      \n      document.documentElement.setAttribute('data-theme', theme);\n      \n      // Apply theme-specific classes\n      document.documentElement.classList.remove('theme-light', 'theme-dark', 'theme-calm', 'theme-focus');\n      document.documentElement.classList.add(`theme-${theme}`);\n    };\n\n    applyTheme();\n    \n    // Listen for system theme changes\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    mediaQuery.addEventListener('change', applyTheme);\n    \n    return () => mediaQuery.removeEventListener('change', applyTheme);\n  }, [preferences.theme]);\n\n  // Apply accessibility preferences\n  useEffect(() => {\n    const root = document.documentElement;\n    \n    // Font size\n    root.style.fontSize = `${preferences.accessibility.fontSize}%`;\n    \n    // High contrast\n    if (preferences.accessibility.highContrast) {\n      root.classList.add('high-contrast');\n    } else {\n      root.classList.remove('high-contrast');\n    }\n    \n    // Reduced motion\n    if (preferences.accessibility.reducedMotion) {\n      root.classList.add('reduced-motion');\n    } else {\n      root.classList.remove('reduced-motion');\n    }\n  }, [preferences.accessibility]);\n\n  return {\n    preferences,\n    loading,\n    error,\n    updatePreference,\n    updateNestedPreference,\n    resetToDefaults,\n    exportPreferences,\n    importPreferences\n  };\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\hooks\\useVibration.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":16,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from 'react';\nimport { secureStorage } from '../services/security/SecureLocalStorage';\nimport { consoleHapticFeedback, ActionType } from '../utils/mobile/consoleHapticFeedback';\n\n// Enhanced vibration hook with console haptic integration\nexport function useVibration() {\n  const vibrate = useCallback((_pattern: number | number[]) => {\n    // Check if Vibration API is supported\n    if ('vibrate' in navigator) {\n      // Respect user preferences for haptic feedback\n      const _hapticEnabled = secureStorage.getItem('hapticFeedback') !== 'false';\n      \n      if (_hapticEnabled) {\n        try {\n          navigator.vibrate(_pattern);\n        } catch (_error) {\n          console.error('Vibration failed:');\n        }\n      }\n    }\n  }, []);\n\n  // Console-enhanced vibration with haptic feedback integration\n  const consoleVibrate = useCallback((action: ActionType, customPattern?: number | number[]) => {\n    const _hapticEnabled = secureStorage.getItem('hapticFeedback') !== 'false';\n    \n    if (_hapticEnabled && consoleHapticFeedback.isHapticSupported()) {\n      if (customPattern) {\n        consoleHapticFeedback.triggerHaptic(action, customPattern);\n      } else {\n        consoleHapticFeedback.triggerHaptic(_action);\n      }\n    } else {\n      // Fallback to basic vibration\n      vibrate(customPattern || [30]);\n    }\n  }, [vibrate]);\n\n  return {\n    vibrate, // Basic vibration function (legacy compatibility)\n    consoleVibrate, // Enhanced console haptic feedback\n    // Convenience methods\n    tap: () => consoleVibrate('tap'),\n    swipe: () => consoleVibrate('swipe'),\n    longPress: () => consoleVibrate('longPress'),\n    success: () => consoleVibrate('success'),\n    error: () => consoleVibrate('error'),\n    warning: () => consoleVibrate('warning'),\n    navigation: () => consoleVibrate('navigation'),\n    selection: () => consoleVibrate('selection'),\n    activation: () => consoleVibrate('activation'),\n  };\n}\n\n// For backward compatibility, also export the basic vibrate function\nexport function useBasicVibration() {\n  const { vibrate } = useVibration();\n  return vibrate;\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\main.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":129,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":129,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './styles/index.css';\nimport { EmergencyErrorBoundary, setupGlobalErrorHandling } from './components/ErrorBoundary';\nimport { setupRuntimeGuards } from './utils/runtimeGuards';\nimport { logger } from './utils/logger';\n// CRITICAL SECURITY: Validate environment configuration before app startup\nimport './config/securityValidation';\n\n// Extend Window interface for temporary update function\ndeclare global {\n  interface Window {\n    updateApp?: () => void;\n  }\n}\n\n// Initialize global error handling and runtime guards immediately\nsetupGlobalErrorHandling();\nsetupRuntimeGuards();\n\n// Performance monitoring (quiet in production)\nif (import.meta.env.PROD) {\n  import('web-vitals').then((vitals) => {\n    // Send to analytics instead of console.log in production\n    const _logMetric = (metric: unknown) => {\n      // Only log critical performance issues, not every metric\n      if (metric.rating === 'poor' && import.meta.env.DEV) {\n        logger.warn(`Poor performance metric: ${metric.name}: ${metric.value}`, 'WebVitals');\n      }\n    };\n    \n    vitals.onCLS(_logMetric);\n    vitals.onFID(_logMetric);\n    vitals.onFCP(_logMetric);\n    vitals.onLCP(_logMetric);\n    vitals.onTTFB(_logMetric);\n  });\n}\n\n// Suppress source map warnings in production\nif (import.meta.env.PROD) {\n  // Suppress source map warnings that clutter the console\n  const originalConsoleWarn = console.warn;\n  console.warn = function(...args) {\n    const message = args.join(' ');\n    if (message.includes('Source map') || \n        message.includes('DevTools') ||\n        message.includes('installHook') ||\n        message.includes('react_devtools')) {\n      return; // Suppress these warnings\n    }\n    originalConsoleWarn.apply(console, args);\n  };\n\n  // Also suppress source map errors\n  window.addEventListener('error', (e) => {\n    if (e.message?.includes('Source map') || \n        e.filename?.includes('react_devtools') ||\n        e.filename?.includes('installHook')) {\n      e.preventDefault();\n      return false;\n    }\n  });\n}\n\n// Register Service Worker for offline support (silent mode)\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    navigator.serviceWorker.register('/sw-enhanced.js')\n      .then((registration) => {\n        // Service Worker registered successfully\n        \n        // Handle updates silently - no user notifications\n        registration.addEventListener('updatefound', () => {\n          const newWorker = registration.installing;\n          if (newWorker) {\n            newWorker.addEventListener('statechange', () => {\n              if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n                // Update silently - will activate on next page load naturally\n                // Update available - will activate on next visit\n                newWorker.postMessage({ type: 'SKIP_WAITING' });\n              }\n            });\n          }\n        });\n      })\n      .catch((error) => {\n        logger.error('[Service Worker] Registration failed:', error);\n      });\n  });\n}\n\n// Initialize React with DOM ready check\nfunction initializeReact() {\n  const rootElement = document.getElementById('root');\n  \n  if (!rootElement) {\n    // If DOM isn't ready, wait and retry\n    if (document.readyState !== 'complete') {\n      setTimeout(() => {\n        initializeReact();\n      }, 100);\n      return;\n    }\n    \n    // If DOM is ready but no root element, create it\n    const newRoot = document.createElement('div');\n    newRoot.id = 'root';\n    document.body.appendChild(_newRoot);\n    \n    // Retry initialization\n    setTimeout(() => {\n      initializeReact();\n    }, 50);\n    return;\n  }\n\n  try {\n    const root = ReactDOM.createRoot(_rootElement);\n\n    root.render(\n      <React.StrictMode>\n        <EmergencyErrorBoundary>\n          <App />\n        </EmergencyErrorBoundary>\n      </React.StrictMode>\n    );\n  } catch (_error) {\n    logger.error('🚨 React initialization failed:');\n    // Show emergency fallback\n    rootElement.innerHTML = `\n      <div style=\"padding: 2rem; text-align: center; font-family: system-ui; color: #dc2626;\">\n        <h1>🏥 CoreV4 Emergency Mode</h1>\n        <p>React failed to initialize. Crisis resources available:</p>\n        <a href=\"tel:988\" style=\"display: block; margin: 1rem 0; padding: 1rem; background: #dc2626; color: white; text-decoration: none; border-radius: 8px; font-weight: bold;\">Call Crisis Lifeline: 988</a>\n        <button onclick=\"window.location.reload()\" style=\"padding: 0.5rem 1rem; background: #3b82f6; color: white; border: none; border-radius: 4px; cursor: pointer;\">Retry Loading</button>\n      </div>\n    `;\n  }\n}\n\n// Initialize when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initializeReact);\n} else {\n  // DOM is already ready\n  initializeReact();\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\middleware\\securityMiddleware.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":31,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":31,"endColumn":32},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'initializeSecurity'. Either include it or remove the dependency array.","line":54,"column":6,"nodeType":"ArrayExpression","endLine":54,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [initializeSecurity]","fix":{"range":[2204,2206],"text":"[initializeSecurity]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":129,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":129,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":201,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":201,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":228,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":228,"endColumn":20},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":254,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":254,"endColumn":26},{"ruleId":"react/display-name","severity":2,"message":"Component definition is missing display name","line":258,"column":10,"nodeType":"ArrowFunctionExpression","messageId":"noDisplayName","endLine":282,"endColumn":4},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":358,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":358,"endColumn":20}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Security Middleware Component\n * Integrates all security services and provides application-wide security enforcement\n */\n\nimport React, { useEffect, useState, createContext, useContext, ReactNode } from 'react';\nimport { securityHeaders } from '../services/security/securityHeaders';\nimport { rateLimiter } from '../services/security/rateLimiter';\nimport { sessionManager } from '../services/security/sessionManager';\nimport { authService } from '../services/auth/authService';\nimport { securityMonitor } from '../services/security/securityMonitor';\nimport { fieldEncryption } from '../services/security/fieldEncryption';\nimport { auditLogger } from '../services/security/auditLogger';\nimport { logger } from '../utils/logger';\n\ninterface SecurityContextType {\n  isSecure: boolean;\n  sessionValid: boolean;\n  securityLevel: 'basic' | 'elevated' | 'maximum';\n  threatLevel: 'low' | 'medium' | 'high' | 'critical';\n  requiresCaptcha: boolean;\n  requiresMFA: boolean;\n  encryptField: (fieldName: string, value: unknown) => Promise<unknown>;\n  decryptField: (fieldName: string, encryptedValue: unknown) => Promise<unknown>;\n  validateRequest: (endpoint: string) => Promise<boolean>;\n  reportSecurityEvent: (event: unknown) => Promise<void>;\n}\n\nconst SecurityContext = createContext<SecurityContextType | undefined>(_undefined);\n\nexport const useSecurityContext = () => {\n  const context = useContext(_SecurityContext);\n  if (!context) {\n    throw new Error('useSecurityContext must be used within SecurityProvider');\n  }\n  return context;\n};\n\ninterface SecurityProviderProps {\n  children: ReactNode;\n}\n\nexport const SecurityProvider: React.FC<SecurityProviderProps> = ({ children }) => {\n  const [isSecure, setIsSecure] = useState(true);\n  const [sessionValid, setSessionValid] = useState(false);\n  const [securityLevel, setSecurityLevel] = useState<'basic' | 'elevated' | 'maximum'>('basic');\n  const [threatLevel, setThreatLevel] = useState<'low' | 'medium' | 'high' | 'critical'>('low');\n  const [requiresCaptcha, setRequiresCaptcha] = useState(false);\n  const [requiresMFA, setRequiresMFA] = useState(false);\n\n  useEffect(() => {\n    initializeSecurity();\n    return () => cleanupSecurity();\n  }, []);\n  \n  // Check authentication status from authService\n  useEffect(() => {\n    const checkAuthStatus = () => {\n      try {\n        const isAuthenticated = authService.isAuthenticated();\n        const session = authService.getCurrentSession();\n        \n        // For development/demo mode, allow basic access without full session\n        if (isAuthenticated && session) {\n          setSessionValid(true);\n          setSecurityLevel('basic'); // Start with basic, can be elevated\n        } else {\n          // Allow demo mode - set session as valid with basic security\n          setSessionValid(true);\n          setSecurityLevel('basic');\n        }\n      } catch (error) {\n        logger.debug('Auth check in security middleware:', error);\n        // Allow demo mode even if auth check fails\n        setSessionValid(true);\n        setSecurityLevel('basic');\n      }\n    };\n    \n    checkAuthStatus();\n    // Re-check periodically\n    const _interval = setInterval(checkAuthStatus, 30000); // Every 30 seconds\n    \n    return () => clearInterval(_interval);\n  }, []);\n\n  const initializeSecurity = async () => {\n    try {\n      // Apply CSP to document\n      securityHeaders.applyCSPToDocument();\n      \n      // Set up security monitoring\n      const _unsubscribe = securityMonitor.subscribe(_handleSecurityEvent);\n      \n      // Validate current session if exists\n      const _sessionId = getSessionId();\n      if (_sessionId) {\n        try {\n          const validation = await sessionManager.validateSession(_sessionId, {\n            ipAddress: await getClientIP(),\n            userAgent: navigator.userAgent,\n            fingerprint: await generateFingerprint(),\n          });\n          \n          setSessionValid(validation.isValid);\n          if (!validation.isValid && validation.requiresAction === 'mfa') {\n            setRequiresMFA(true);\n          }\n        } catch (error) {\n          logger.debug('Session validation error:', error);\n          // For demo/development, allow access\n          setSessionValid(true);\n        }\n      } else {\n        // No session ID but allow demo access\n        setSessionValid(true);\n      }\n      \n      // Check security metrics\n      const metrics = securityMonitor.getMetrics();\n      updateThreatLevel(metrics.threatScore);\n      \n      // Set up CSP violation listener\n      setupCSPViolationListener();\n      \n      // Initialize heartbeat for session keep-alive\n      startHeartbeat();\n      \n    } catch (_error) {\n      logger.error('Security initialization failed:');\n      setIsSecure(false);\n    }\n  };\n\n  const cleanupSecurity = () => {\n    // Cleanup tasks\n  };\n\n  const _handleSecurityEvent = async (event: unknown) => {\n    // Update threat _level based on events\n    if (event.severity === 'critical') {\n      setThreatLevel('critical');\n      setIsSecure(false);\n    } else if (event.severity === 'high') {\n      setThreatLevel('high');\n    }\n    \n    // Handle specific event types\n    switch (event.type) {\n      case 'session_hijacking':\n      case 'unauthorized_access':\n        setSessionValid(false);\n        break;\n      case 'brute_force_attack':\n      case 'api_abuse':\n        setRequiresCaptcha(true);\n        break;\n    }\n  };\n\n  const updateThreatLevel = (score: number) => {\n    if (score >= 75) {\n      setThreatLevel('critical');\n    } else if (score >= 50) {\n      setThreatLevel('high');\n    } else if (score >= 25) {\n      setThreatLevel('medium');\n    } else {\n      setThreatLevel('low');\n    }\n  };\n\n  const validateRequest = async (endpoint: string): Promise<boolean> => {\n    try {\n      const ip = await getClientIP();\n      const result = await rateLimiter.checkRateLimit({\n        endpoint,\n        ip,\n        userId: getCurrentUserId(),\n        headers: getRequestHeaders(),\n      });\n      \n      if (!result.allowed) {\n        if (result.reason === 'CAPTCHA verification required') {\n          setRequiresCaptcha(true);\n        }\n        \n        // Log blocked request\n        await auditLogger.log({ event: 'PERMISSION_DENIED',\n          details: {\n            endpoint,\n            reason: result.reason,\n          },\n          severity: 'warning',\n        });\n        \n        return false;\n      }\n      \n      return true;\n    } catch (_error) {\n      logger.error('Request validation failed:');\n      return false;\n    }\n  };\n\n  const encryptField = async (fieldName: string, value: unknown): Promise<unknown> => {\n    try {\n      return await fieldEncryption.encryptField(fieldName, value, getCurrentUserId());\n    } catch (error) {\n      logger.error(`Failed to encrypt field ${fieldName}:`, error);\n      throw error;\n    }\n  };\n\n  const decryptField = async (fieldName: string, encryptedValue: unknown): Promise<unknown> => {\n    try {\n      return await fieldEncryption.decryptField(fieldName, encryptedValue, getCurrentUserId());\n    } catch (error) {\n      logger.error(`Failed to decrypt field ${fieldName}:`, error);\n      throw error;\n    }\n  };\n\n  const reportSecurityEvent = async (event: unknown): Promise<void> => {\n    try {\n      await securityMonitor.reportEvent(event);\n    } catch (_error) {\n      logger.error('Failed to report security event:');\n    }\n  };\n\n  const value: SecurityContextType = {\n    isSecure,\n    sessionValid,\n    securityLevel,\n    threatLevel,\n    requiresCaptcha,\n    requiresMFA,\n    encryptField,\n    decryptField,\n    validateRequest,\n    reportSecurityEvent,\n  };\n\n  return (\n    <SecurityContext.Provider value={value}>\n      {children}\n    </SecurityContext.Provider>\n  );\n};\n\n// Security HOC for protected routes\nexport const withSecurity = <P extends object>(\n  Component: React.ComponentType<P>,\n  requiredLevel: 'basic' | 'elevated' | 'maximum' = 'basic'\n) => {\n  return (props: P) => {\n    const security = useSecurityContext();\n    \n    if (!security.isSecure) {\n      return <SecurityWarning message=\"Security check failed. Please refresh the page.\" />;\n    }\n    \n    if (!security.sessionValid) {\n      return <SessionExpired />;\n    }\n    \n    if (security.requiresCaptcha) {\n      return <CaptchaChallenge onSuccess={() => window.location.reload()} />;\n    }\n    \n    if (security.requiresMFA) {\n      return <MFAChallenge onSuccess={() => window.location.reload()} />;\n    }\n    \n    if (getSecurityLevelValue(security.securityLevel) < getSecurityLevelValue(requiredLevel)) {\n      return <ElevateSecurityLevel required={requiredLevel} />;\n    }\n    \n    return <Component {...props} />;\n  };\n};\n\n// Utility components\nconst SecurityWarning: React.FC<{ message: string }> = ({ message }) => (\n  <div className=\"flex items-center justify-center min-h-screen bg-gray-900\">\n    <div className=\"bg-red-900/20 border border-red-500 rounded-lg p-6 max-w-md\">\n      <h2 className=\"text-xl font-bold text-red-500 mb-2\">Security Alert</h2>\n      <p className=\"text-gray-300\">{message}</p>\n    </div>\n  </div>\n);\n\nconst SessionExpired: React.FC = () => (\n  <div className=\"flex items-center justify-center min-h-screen bg-gray-900\">\n    <div className=\"bg-yellow-900/20 border border-yellow-500 rounded-lg p-6 max-w-md\">\n      <h2 className=\"text-xl font-bold text-yellow-500 mb-2\">Session Expired</h2>\n      <p className=\"text-gray-300 mb-4\">Your session has expired for security reasons.</p>\n      <button\n        onClick={() => window.location.href = '/login'}\n        className=\"px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700\"\n      >\n        Sign In Again\n      </button>\n    </div>\n  </div>\n);\n\nconst CaptchaChallenge: React.FC<{ onSuccess: () => void }> = ({ onSuccess }) => {\n  const [loading, setLoading] = useState(false);\n  \n  const handleVerify = async () => {\n    setLoading(true);\n    // In production, integrate with reCAPTCHA or hCaptcha\n    setTimeout(() => {\n      onSuccess();\n    }, 2000);\n  };\n  \n  return (\n    <div className=\"flex items-center justify-center min-h-screen bg-gray-900\">\n      <div className=\"bg-gray-800 rounded-lg p-6 max-w-md\">\n        <h2 className=\"text-xl font-bold text-white mb-4\">Security Verification</h2>\n        <p className=\"text-gray-300 mb-6\">Please complete the security check to continue.</p>\n        <div className=\"bg-gray-700 rounded-lg p-4 mb-4\">\n          {/* CAPTCHA widget would go here */}\n          <div className=\"h-20 flex items-center justify-center text-gray-400\">\n            [CAPTCHA Challenge]\n          </div>\n        </div>\n        <button\n          onClick={handleVerify}\n          disabled={loading}\n          className=\"w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n        >\n          {loading ? 'Verifying...' : 'Verify'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst MFAChallenge: React.FC<{ onSuccess: () => void }> = ({ onSuccess }) => {\n  const [code, setCode] = useState('');\n  const [loading, setLoading] = useState(false);\n  \n  const handleVerify = async () => {\n    if (code.length !== 6) return;\n    \n    setLoading(true);\n    try {\n      // Verify MFA code\n      // In production, call MFA service\n      setTimeout(() => {\n        onSuccess();\n      }, 1000);\n    } catch (_error) {\n      logger.error('MFA verification failed:');\n    }\n  };\n  \n  return (\n    <div className=\"flex items-center justify-center min-h-screen bg-gray-900\">\n      <div className=\"bg-gray-800 rounded-lg p-6 max-w-md\">\n        <h2 className=\"text-xl font-bold text-white mb-4\">Two-Factor Authentication</h2>\n        <p className=\"text-gray-300 mb-6\">Enter the 6-digit code from your authenticator app.</p>\n        <input\n          type=\"text\"\n          value={code}\n          onChange={(e) => setCode(e.target.value.replace(/\\D/g, '').slice(0, 6))}\n          placeholder=\"000000\"\n          className=\"w-full px-4 py-2 bg-gray-700 text-white rounded-lg mb-4 text-center text-2xl tracking-widest\"\n          maxLength={6}\n        />\n        <button\n          onClick={handleVerify}\n          disabled={loading || code.length !== 6}\n          className=\"w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n        >\n          {loading ? 'Verifying...' : 'Verify'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst ElevateSecurityLevel: React.FC<{ required: string }> = ({ required }) => (\n  <div className=\"flex items-center justify-center min-h-screen bg-gray-900\">\n    <div className=\"bg-blue-900/20 border border-blue-500 rounded-lg p-6 max-w-md\">\n      <h2 className=\"text-xl font-bold text-blue-500 mb-2\">Enhanced Security Required</h2>\n      <p className=\"text-gray-300 mb-4\">\n        This action requires {required} security level. Please authenticate to continue.\n      </p>\n      <button\n        onClick={() => window.location.href = '/security/elevate'}\n        className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n      >\n        Elevate Security\n      </button>\n    </div>\n  </div>\n);\n\n// Utility functions\nconst getSessionId = (): string | null => {\n  // Try to get session from authService first\n  try {\n    const session = authService.getCurrentSession();\n    if (session?._sessionId) {\n      return session._sessionId;\n    }\n  } catch (error) {\n    logger.debug('Could not get session from authService:', error);\n  }\n  \n  // Fallback to localStorage\n  return localStorage.getItem('sessionId');\n};\n\nconst getCurrentUserId = (): string | undefined => {\n  // Try to get user from authService first\n  try {\n    const user = authService.getCurrentUser();\n    if (user?.id) {\n      return user.id;\n    }\n  } catch (error) {\n    logger.debug('Could not get user from authService:', error);\n  }\n  \n  // Fallback to localStorage\n  return localStorage.getItem('userId') || undefined;\n};\n\nconst getClientIP = async (): Promise<string> => {\n  // In production, get from server or use a service\n  return '0.0.0.0';\n};\n\nconst generateFingerprint = async (): Promise<string> => {\n  const _data = [\n    navigator.userAgent,\n    navigator.language,\n    screen.width,\n    screen.height,\n    screen.colorDepth,\n    new Date().getTimezoneOffset(),\n  ].join(':');\n  \n  return btoa(_data);\n};\n\nconst getRequestHeaders = (): Record<string, string> => {\n  return {\n    'User-Agent': navigator.userAgent,\n    'Accept-Language': navigator.language,\n  };\n};\n\nconst getSecurityLevelValue = (_level: string): number => {\n  switch (_level) {\n    case 'maximum': return 3;\n    case 'elevated': return 2;\n    case 'basic': return 1;\n    default: return 0;\n  }\n};\n\nconst setupCSPViolationListener = () => {\n  document.addEventListener('securitypolicyviolation', async (e) => {\n    await securityMonitor.reportEvent({\n      type: 'policy_violation',\n      severity: 'medium',\n      source: 'csp',\n      details: {\n        violatedDirective: e.violatedDirective,\n        blockedUri: e.blockedURI,\n        sourceFile: e.sourceFile,\n        lineNumber: e.lineNumber,\n      },\n    });\n  });\n};\n\nconst startHeartbeat = () => {\n  setInterval(async () => {\n    const _sessionId = getSessionId();\n    if (_sessionId) {\n      await sessionManager.validateSession(_sessionId);\n    }\n  }, 5 * 60 * 1000); // Every 5 minutes\n};","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\pages\\AITherapyPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\pages\\AccessibilitySettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\pages\\Analytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\pages\\CommunityPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setNotifications' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":16,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[866,869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[866,869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Routes, Route, Link, useLocation } from 'react-router-dom';\nimport { motion } from 'framer-motion';\nimport { Users, MessageSquare, Calendar, Award, Shield, Heart, TrendingUp, Activity } from 'lucide-react';\nimport { CommunityPosts } from '../components/community/CommunityPosts';\nimport { SupportGroups } from '../components/community/SupportGroups';\nimport { CommunityEvents } from '../components/community/CommunityEvents';\nimport { useAnonymousAuth } from '../contexts/AnonymousAuthContext';\nimport { toast } from 'react-hot-toast';\n\nexport function CommunityPage() {\n  const { user } = useAnonymousAuth();\n  const location = useLocation();\n  const [activeTab, setActiveTab] = useState('posts');\n  const [onlineCount, setOnlineCount] = useState(0);\n  const [notifications, setNotifications] = useState<any[]>([]);\n\n  // Initialize community connection (simplified for stability)\n  useEffect(() => {\n    if (_user) {\n      // Set mock online count for now\n      setOnlineCount(Math.floor(Math.random() * 50) + 10);\n    }\n  }, [user]);\n\n  // Determine active tab based on route\n  useEffect(() => {\n    const path = location.pathname;\n    if (path.includes('/groups')) setActiveTab('groups');\n    else if (path.includes('/events')) setActiveTab('events');\n    else setActiveTab('posts');\n  }, [location]);\n\n  const tabs = [\n    { id: 'posts', label: 'Community Posts', icon: MessageSquare, path: '/community' },\n    { id: 'groups', label: 'Support Groups', icon: Users, path: '/community/groups' },\n    { id: 'events', label: 'Events', icon: Calendar, path: '/community/events' },\n  ];\n\n  const stats = [\n    { label: 'Online Now', value: onlineCount, icon: Activity, color: 'text-green-600' },\n    { label: 'Active Groups', value: 24, icon: Users, color: 'text-blue-600' },\n    { label: 'Upcoming Events', value: 8, icon: Calendar, color: 'text-purple-600' },\n    { label: 'Peer Supporters', value: 156, icon: Heart, color: 'text-red-600' },\n  ];\n\n  return (\n    <div className=\"min-h-screen relative\">\n      {/* Console Background Effects */}\n      <div className=\"fixed inset-0 pointer-events-none\">\n        <div className=\"absolute top-1/3 left-1/4 w-96 h-96 bg-gradient-to-r from-green-500/5 to-emerald-500/5 rounded-full blur-3xl\" />\n        <div className=\"absolute bottom-1/3 right-1/4 w-80 h-80 bg-gradient-to-r from-blue-500/5 to-green-500/5 rounded-full blur-3xl\" />\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-6 sm:px-8 lg:px-12 py-8 relative z-10\">\n        {/* Console Header */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"mb-8 p-6 rounded-2xl bg-gradient-to-r from-gray-800/90 to-gray-900/90 border border-gray-700/50 backdrop-blur-md shadow-console-depth relative overflow-hidden\"\n        >\n          {/* Header background effects */}\n          <div className=\"absolute inset-0 bg-gradient-to-r from-green-500/5 via-transparent to-emerald-500/5 pointer-events-none\" />\n          \n          <div className=\"relative z-10 flex items-center space-x-4\">\n            <div className=\"p-4 bg-gradient-to-r from-green-400 to-emerald-600 rounded-console-lg shadow-console-glow\">\n              <Users className=\"h-8 w-8 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold text-white mb-2\">\n                💬 Community Support\n              </h1>\n              <p className=\"text-gray-300 text-lg\">\n                Connect with others who understand your journey. Share, support, and grow together.\n              </p>\n            </div>\n          </div>\n\n          {/* Animated border */}\n          <motion.div\n            className=\"absolute bottom-0 left-0 h-1 bg-gradient-to-r from-green-400 to-emerald-500\"\n            initial={{ width: '0%' }}\n            animate={{ width: '100%' }}\n            transition={{ duration: 1.5, ease: 'easeInOut' }}\n          />\n        </motion.div>\n\n        {/* Console Community Stats */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n          className=\"grid grid-cols-2 md:grid-cols-4 gap-6 mb-8\"\n        >\n          {stats.map((stat, index) => {\n            const Icon = stat.icon;\n            return (\n              <motion.div\n                key={stat.label}\n                initial={{ opacity: 0, scale: 0.9 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ delay: 0.3 + index * 0.1 }}\n                className=\"group p-6 rounded-console-lg bg-gradient-to-br from-gray-800/90 to-gray-900/90 border border-gray-700/50 backdrop-blur-md shadow-console-card hover:shadow-console-hover transition-all duration-300 relative overflow-hidden\"\n              >\n                {/* Background glow effect */}\n                <div className=\"absolute inset-0 bg-gradient-to-r from-green-500/5 to-emerald-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                \n                <div className=\"relative z-10 flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-gray-400 mb-1\">{stat.label}</p>\n                    <motion.p\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      transition={{ delay: 0.5 + index * 0.1 }}\n                      className=\"text-3xl font-bold text-white\"\n                    >\n                      {stat.value}\n                    </motion.p>\n                  </div>\n                  <div className={`p-3 rounded-console bg-gradient-to-r ${stat.color === 'text-green-600' ? 'from-green-500/20 to-emerald-500/20' : stat.color === 'text-blue-600' ? 'from-blue-500/20 to-cyan-500/20' : stat.color === 'text-purple-600' ? 'from-purple-500/20 to-pink-500/20' : 'from-red-500/20 to-rose-500/20'} group-hover:scale-110 transition-transform duration-300`}>\n                    <Icon className={`h-6 w-6 ${stat.color === 'text-green-600' ? 'text-green-400' : stat.color === 'text-blue-600' ? 'text-blue-400' : stat.color === 'text-purple-600' ? 'text-purple-400' : 'text-red-400'}`} />\n                  </div>\n                </div>\n              </motion.div>\n            );\n          })}\n        </motion.div>\n\n        {/* Console Safety Notice */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6 }}\n          className=\"bg-gradient-to-r from-blue-500/10 to-cyan-500/10 border border-blue-500/30 rounded-console-lg p-6 mb-8 backdrop-blur-md relative overflow-hidden\"\n        >\n          {/* Safety notice glow */}\n          <div className=\"absolute inset-0 bg-gradient-to-r from-blue-500/5 via-transparent to-cyan-500/5 pointer-events-none\" />\n          \n          <div className=\"relative z-10 flex items-start space-x-4\">\n            <div className=\"p-2 bg-blue-500/20 rounded-console flex-shrink-0\">\n              <Shield className=\"h-6 w-6 text-blue-400\" />\n            </div>\n            <div className=\"flex-1\">\n              <h3 className=\"text-lg font-semibold text-white mb-2\">Community Safety</h3>\n              <p className=\"text-gray-300\">\n                Our community is moderated 24/7 for your safety. Crisis support is available anytime.\n                Remember: this is peer support, not professional medical advice.\n              </p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Console Navigation Tabs */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.7 }}\n          className=\"border-b border-gray-700/30 mb-8\"\n        >\n          <nav className=\"flex space-x-2\">\n            {tabs.map((tab, index) => {\n              const Icon = tab.icon;\n              return (\n                <motion.div\n                  key={tab.id}\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ delay: 0.8 + index * 0.1 }}\n                >\n                  <Link\n                    to={tab.path}\n                    className={`group flex items-center space-x-3 py-4 px-6 rounded-console-lg transition-all duration-300 relative overflow-hidden ${\n                      activeTab === tab.id\n                        ? 'bg-gradient-to-r from-blue-500/20 to-purple-500/20 text-white border border-blue-400/30 shadow-console-glow'\n                        : 'text-gray-400 hover:text-white hover:bg-gray-700/30 border border-transparent hover:border-gray-600/50'\n                    }`}\n                  >\n                    {/* Tab background effect */}\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-blue-500/5 via-transparent to-purple-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                    \n                    <div className={`p-2 rounded-console transition-all duration-300 ${\n                      activeTab === tab.id \n                        ? 'bg-blue-500/20' \n                        : 'bg-gray-700/50 group-hover:bg-gray-600/50'\n                    }`}>\n                      <Icon className=\"h-5 w-5\" />\n                    </div>\n                    <span className=\"font-medium relative z-10\">{tab.label}</span>\n                    \n                    {/* Active indicator */}\n                    {activeTab === tab.id && (\n                      <motion.div\n                        layoutId=\"activeTab\"\n                        className=\"absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-blue-400 to-purple-500 rounded-t-full\"\n                      />\n                    )}\n                  </Link>\n                </motion.div>\n              );\n            })}\n          </nav>\n        </motion.div>\n\n        {/* Recent Notifications */}\n        {notifications.length > 0 && (\n          <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6\">\n            <h3 className=\"text-sm font-medium text-yellow-900 mb-2\">Recent Activity</h3>\n            <div className=\"space-y-1\">\n              {notifications.slice(0, 3).map((notif, index) => (\n                <p key={index} className=\"text-xs text-yellow-700\">\n                  {notif.content}\n                </p>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Content Area */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-2\">\n            <Routes>\n              <Route path=\"/\" element={<CommunityPosts />} />\n              <Route path=\"/groups\" element={<SupportGroups />} />\n              <Route path=\"/events\" element={<CommunityEvents />} />\n            </Routes>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n          {/* Community Guidelines */}\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <h2 className=\"card-title\">Community Guidelines</h2>\n            </div>\n            <div className=\"card-content\">\n              <ul className=\"space-y-2 text-sm text-gray-600\">\n                <li className=\"flex items-start space-x-2\">\n                  <span className=\"text-green-500\">✓</span>\n                  <span>Be respectful and supportive</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <span className=\"text-green-500\">✓</span>\n                  <span>Maintain confidentiality</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <span className=\"text-green-500\">✓</span>\n                  <span>No medical advice</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <span className=\"text-green-500\">✓</span>\n                  <span>Report concerning content</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <span className=\"text-green-500\">✓</span>\n                  <span>Practice active listening</span>\n                </li>\n              </ul>\n            </div>\n          </div>\n\n          {/* Achievement Progress */}\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <h2 className=\"card-title flex items-center space-x-2\">\n                <Award className=\"h-5 w-5 text-yellow-500\" />\n                <span>Your Impact</span>\n              </h2>\n            </div>\n            <div className=\"card-content\">\n              <div className=\"space-y-3\">\n                <div>\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span className=\"text-gray-600\">Supportive Member</span>\n                    <span className=\"font-medium\">Level 3</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div className=\"bg-blue-600 h-2 rounded-full\" style={{ width: '65%' }}></div>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-2 pt-2\">\n                  <div className=\"text-center p-2 bg-gray-50 rounded\">\n                    <p className=\"text-lg font-bold text-gray-900\">42</p>\n                    <p className=\"text-xs text-gray-600\">Posts Shared</p>\n                  </div>\n                  <div className=\"text-center p-2 bg-gray-50 rounded\">\n                    <p className=\"text-lg font-bold text-gray-900\">128</p>\n                    <p className=\"text-xs text-gray-600\">Helpful Votes</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <h2 className=\"card-title\">Quick Actions</h2>\n            </div>\n            <div className=\"card-content\">\n              <div className=\"space-y-2\">\n                <button \n                  onClick={() => toast.success('Peer support request sent! A community member will reach out soon.')}\n                  className=\"w-full px-4 py-2 bg-blue-50 text-blue-700 rounded-lg hover:bg-blue-100 transition-colors text-sm font-medium\"\n                >\n                  Request Peer Support\n                </button>\n                <button className=\"w-full px-4 py-2 bg-purple-50 text-purple-700 rounded-lg hover:bg-purple-100 transition-colors text-sm font-medium\">\n                  Join Live Meditation\n                </button>\n                <Link \n                  to=\"/crisis\"\n                  className=\"block w-full px-4 py-2 bg-red-50 text-red-700 rounded-lg hover:bg-red-100 transition-colors text-sm font-medium text-center\"\n                >\n                  Crisis Support\n                </Link>\n              </div>\n            </div>\n          </div>\n\n          {/* Trending Topics */}\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <h2 className=\"card-title flex items-center space-x-2\">\n                <TrendingUp className=\"h-5 w-5 text-green-500\" />\n                <span>Trending Topics</span>\n              </h2>\n            </div>\n            <div className=\"card-content\">\n              <div className=\"flex flex-wrap gap-2\">\n                {['anxiety', 'self-care', 'mindfulness', 'recovery', 'gratitude', 'boundaries'].map((tag) => (\n                  <span\n                    key={tag}\n                    className=\"px-3 py-1 bg-blue-50 text-blue-700 text-xs rounded-full cursor-pointer hover:bg-blue-100 transition-colors\"\n                  >\n                    #{tag}\n                  </span>\n                ))}\n              </div>\n            </div>\n          </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n// Default export for lazy loading\nexport default CommunityPage;\n","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\pages\\CrisisPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\pages\\HeartbeatPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\pages\\HomePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\pages\\NotificationCenter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\pages\\ProfessionalPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\pages\\Settings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\pages\\WellnessPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\service-worker\\crisis-offline.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":444,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":444,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Crisis offline resources and caching strategies\nimport { openDB } from 'idb';\nimport { logger } from '../utils/logger';\n\ninterface CrisisDB {\n  safetyPlans: {\n    key: string;\n    value: {\n      id: string;\n      userId: string;\n      plan: unknown;\n      lastUpdated: string;\n      syncStatus: 'synced' | 'pending' | 'offline';\n    };\n  };\n  emergencyContacts: {\n    key: string;\n    value: {\n      id: string;\n      name: string;\n      phone: string;\n      relationship: string;\n      isPrimary: boolean;\n    };\n  };\n  copingStrategies: {\n    key: string;\n    value: {\n      id: string;\n      type: 'breathing' | 'grounding' | 'distraction' | 'affirmation';\n      title: string;\n      content: string;\n      steps?: string[];\n      duration?: number;\n    };\n  };\n  crisisLogs: {\n    key: string;\n    value: {\n      id: string;\n      timestamp: string;\n      action: string;\n      severity: 'low' | 'medium' | 'high' | 'critical';\n      location?: { lat: number; lng: number };\n      synced: boolean;\n    };\n  };\n}\n\n// Critical offline resources that must be cached\nconst _CRITICAL_RESOURCES = [\n  '/crisis',\n  '/crisis/emergency-contacts',\n  '/crisis/safety-plan',\n  '/crisis/breathing-exercise',\n  '/crisis/grounding-technique',\n  '/offline-crisis.html',\n];\n\n// Crisis hotline numbers for offline access\nconst EMERGENCY_NUMBERS = {\n  'us': {\n    suicide: '988',\n    crisis: '741741',\n    emergency: '911',\n    domestic: '1-800-799-7233',\n    sexual: '1-800-656-4673',\n    veteran: '1-800-273-8255',\n    lgbtq: '1-866-488-7386',\n    teen: '1-800-852-8336',\n  },\n  'uk': {\n    samaritans: '116123',\n    emergency: '999',\n    nhs: '111',\n  },\n  'au': {\n    lifeline: '131114',\n    emergency: '000',\n    beyondblue: '1300224636',\n  },\n  'ca': {\n    talkSuicide: '1-833-456-4566',\n    emergency: '911',\n    kids: '1-800-668-6868',\n  }\n};\n\n// Initialize crisis database\nexport async function initCrisisDB() {\n  return openDB<CrisisDB>('crisis-offline', 1, {\n    upgrade(db) {\n      // Safety plans store\n      if (!db.objectStoreNames.contains('safetyPlans')) {\n        db.createObjectStore('safetyPlans', { keyPath: 'id' });\n      }\n      \n      // Emergency contacts store\n      if (!db.objectStoreNames.contains('emergencyContacts')) {\n        db.createObjectStore('emergencyContacts', { keyPath: 'id' });\n        // Index creation temporarily disabled for TypeScript compatibility\n        // store.createIndex('isPrimary', 'isPrimary');\n      }\n      \n      // Coping strategies store\n      if (!db.objectStoreNames.contains('copingStrategies')) {\n        db.createObjectStore('copingStrategies', { keyPath: 'id' });\n        // Index creation temporarily disabled for TypeScript compatibility\n        // store.createIndex('type', 'type');\n      }\n      \n      // Crisis logs store\n      if (!db.objectStoreNames.contains('crisisLogs')) {\n        db.createObjectStore('crisisLogs', { keyPath: 'id' });\n        // Index creation temporarily disabled for TypeScript compatibility\n        // store.createIndex('synced', 'synced');\n        // store.createIndex('timestamp', 'timestamp');\n      }\n    },\n  });\n}\n\n// Pre-cache critical crisis resources\nexport async function precacheCrisisResources() {\n  const cache = await caches.open('crisis-v1');\n  \n  // Cache critical pages\n  await cache.addAll(_CRITICAL_RESOURCES);\n  \n  // Create offline crisis page\n  const offlineCrisisHTML = generateOfflineCrisisPage();\n  const response = new Response(offlineCrisisHTML, {\n    headers: { 'Content-Type': 'text/html' }\n  });\n  await cache.put('/offline-crisis.html', response);\n}\n\n// Generate offline crisis page with embedded resources\nfunction generateOfflineCrisisPage(): string {\n  return `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n  <meta name=\"theme-color\" content=\"#ef4444\">\n  <title>Crisis Support - Offline</title>\n  <style>\n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    \n    body {\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      min-height: 100vh;\n      padding: 20px;\n    }\n    \n    .container {\n      max-width: 600px;\n      margin: 0 auto;\n    }\n    \n    .offline-badge {\n      background: #fbbf24;\n      color: #78350f;\n      padding: 8px 16px;\n      border-radius: 20px;\n      font-size: 14px;\n      font-weight: 600;\n      display: inline-block;\n      margin-bottom: 20px;\n    }\n    \n    .crisis-header {\n      background: white;\n      border-radius: 20px;\n      padding: 24px;\n      margin-bottom: 20px;\n      box-shadow: 0 10px 30px rgba(0,0,0,0.1);\n    }\n    \n    .crisis-header h1 {\n      color: #1f2937;\n      margin-bottom: 8px;\n      font-size: 28px;\n    }\n    \n    .crisis-header p {\n      color: #6b7280;\n      line-height: 1.6;\n    }\n    \n    .emergency-btn {\n      display: block;\n      width: 100%;\n      padding: 20px;\n      margin-bottom: 16px;\n      border: none;\n      border-radius: 16px;\n      font-size: 18px;\n      font-weight: 700;\n      cursor: pointer;\n      transition: transform 0.2s, box-shadow 0.2s;\n      text-decoration: none;\n      text-align: center;\n    }\n    \n    .emergency-btn:active {\n      transform: scale(0.98);\n    }\n    \n    .btn-primary {\n      background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);\n      color: white;\n      box-shadow: 0 4px 20px rgba(239, 68, 68, 0.3);\n    }\n    \n    .btn-secondary {\n      background: white;\n      color: #1f2937;\n      box-shadow: 0 4px 20px rgba(0,0,0,0.1);\n    }\n    \n    .breathing-exercise {\n      background: white;\n      border-radius: 20px;\n      padding: 24px;\n      margin-bottom: 20px;\n      text-align: center;\n    }\n    \n    .breathing-circle {\n      width: 150px;\n      height: 150px;\n      border-radius: 50%;\n      background: linear-gradient(135deg, #60a5fa 0%, #3b82f6 100%);\n      margin: 20px auto;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      animation: breathe 4s infinite;\n      color: white;\n      font-size: 20px;\n      font-weight: 600;\n    }\n    \n    @keyframes breathe {\n      0%, 100% { transform: scale(1); }\n      50% { transform: scale(1.2); }\n    }\n    \n    .coping-list {\n      background: white;\n      border-radius: 20px;\n      padding: 24px;\n      margin-bottom: 20px;\n    }\n    \n    .coping-list h2 {\n      color: #1f2937;\n      margin-bottom: 16px;\n      font-size: 20px;\n    }\n    \n    .coping-item {\n      padding: 12px;\n      background: #f3f4f6;\n      border-radius: 12px;\n      margin-bottom: 12px;\n      cursor: pointer;\n      transition: background 0.2s;\n    }\n    \n    .coping-item:active {\n      background: #e5e7eb;\n    }\n    \n    .safety-contacts {\n      background: white;\n      border-radius: 20px;\n      padding: 24px;\n    }\n    \n    .contact-item {\n      display: flex;\n      align-items: center;\n      padding: 12px;\n      background: #fef3c7;\n      border-radius: 12px;\n      margin-bottom: 12px;\n    }\n    \n    .contact-icon {\n      width: 40px;\n      height: 40px;\n      background: #f59e0b;\n      border-radius: 50%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin-right: 12px;\n      color: white;\n      font-size: 20px;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <span class=\"offline-badge\">📵 Offline Mode</span>\n    \n    <div class=\"crisis-header\">\n      <h1>Crisis Support Available</h1>\n      <p>You're offline but help is still accessible. Emergency calls work without internet.</p>\n    </div>\n    \n    <a href=\"tel:988\" class=\"emergency-btn btn-primary\">\n      📞 Call 988 - Crisis Lifeline\n    </a>\n    \n    <a href=\"sms:741741?body=HOME\" class=\"emergency-btn btn-secondary\">\n      💬 Text HOME to 741741\n    </a>\n    \n    <a href=\"tel:911\" class=\"emergency-btn btn-secondary\">\n      🚨 Call 911 - Emergency\n    </a>\n    \n    <div class=\"breathing-exercise\">\n      <h2>Breathing Exercise</h2>\n      <div class=\"breathing-circle\">Breathe</div>\n      <p>Follow the circle: Inhale as it grows, exhale as it shrinks</p>\n    </div>\n    \n    <div class=\"coping-list\">\n      <h2>Quick Coping Strategies</h2>\n      <div class=\"coping-item\">✋ 5-4-3-2-1 Grounding</div>\n      <div class=\"coping-item\">💪 Progressive Muscle Relaxation</div>\n      <div class=\"coping-item\">🎯 Focus on 5 Blue Things</div>\n      <div class=\"coping-item\">🧊 Hold Ice Cubes</div>\n      <div class=\"coping-item\">🎵 Listen to Calming Music</div>\n    </div>\n    \n    <div class=\"safety-contacts\">\n      <h2>Your Safety Contacts</h2>\n      <div class=\"contact-item\">\n        <div class=\"contact-icon\">👤</div>\n        <div>\n          <strong>Emergency Contact 1</strong><br>\n          <small>Tap to add when online</small>\n        </div>\n      </div>\n    </div>\n  </div>\n  \n  <script>\n    // Auto-refresh when connection returns\n    window.addEventListener('online', () => {\n      location.reload();\n    });\n    \n    // Breathing exercise animation\n    const breatheCircle = document.querySelector('.breathing-circle');\n    let breathPhase = 'inhale';\n    let counter = 0;\n    \n    setInterval(() => {\n      counter++;\n      if (counter <= 4) {\n        breatheCircle.textContent = 'Inhale ' + counter;\n      } else if (counter <= 8) {\n        breatheCircle.textContent = 'Hold ' + (counter - 4);\n      } else if (counter <= 12) {\n        breatheCircle.textContent = 'Exhale ' + (counter - 8);\n      } else {\n        counter = 0;\n      }\n    }, 1000);\n  </script>\n</body>\n</html>\n  `;\n}\n\n// Handle offline crisis requests\nexport async function handleOfflineCrisis(request: Request): Promise<Response> {\n  const cache = await caches.open('crisis-v1');\n  \n  // Try cache first\n  const cachedResponse = await cache.match(_request);\n  if (_cachedResponse) {\n    return cachedResponse;\n  }\n  \n  // Return offline crisis page for navigation requests\n  if (request.mode === 'navigate') {\n    const offlinePage = await cache.match('/offline-crisis.html');\n    if (_offlinePage) {\n      return offlinePage;\n    }\n  }\n  \n  // Return basic offline response\n  return new Response('Offline - Crisis resources are limited', {\n    status: 503,\n    statusText: 'Service Unavailable',\n    headers: new Headers({\n      'Content-Type': 'text/plain'\n    })\n  });\n}\n\n// Sync offline crisis data when connection returns\nexport async function syncOfflineData() {\n  const db = await initCrisisDB();\n  \n  // Get unsynced crisis logs - using getAll instead of index for now\n  const allLogs = await db.getAll('crisisLogs');\n  const unsyncedLogs = allLogs.filter(log => !log.synced);\n  \n  if (unsyncedLogs.length > 0) {\n    try {\n      // Send to server\n      const response = await fetch('/api/crisis/sync', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(_unsyncedLogs),\n      });\n      \n      if (response.ok) {\n        // Mark as synced\n        const tx = db.transaction('crisisLogs', 'readwrite');\n        const store = tx.objectStore('crisisLogs');\n        for (const log of unsyncedLogs) {\n          await store.put({ ...log, synced: true });\n        }\n        await tx.done;\n      }\n    } catch (_error) {\n      logger.error('Failed to sync crisis data:');\n    }\n  }\n}\n\n// Log crisis interaction for offline sync\nexport async function logCrisisInteraction(data: unknown) {\n  const db = await initCrisisDB();\n  \n  const log = {\n    id: crypto.randomUUID(),\n    timestamp: new Date().toISOString(),\n    ...data,\n    synced: false,\n  };\n  \n  await db.put('crisisLogs', log);\n  \n  // Try to sync immediately if online\n  if (navigator.onLine) {\n    await syncOfflineData();\n  }\n}\n\n// Export emergency numbers for offline access\nexport function getEmergencyNumbers(country = 'us') {\n  const countryCode = country as keyof typeof EMERGENCY_NUMBERS;\n  return EMERGENCY_NUMBERS[countryCode] || EMERGENCY_NUMBERS['us'];\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\accessibility\\AdvancedAccessibilityService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[221,224],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[221,224],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-cond-assign","severity":2,"message":"Expected a conditional expression and instead saw an assignment.","line":497,"column":12,"nodeType":"AssignmentExpression","messageId":"missing","endLine":497,"endColumn":36}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger, LogCategory } from '../logging/logger';\r\nimport { secureStorage } from '../security/secureStorage';\r\n\r\nexport interface VoiceCommand {\r\n  phrase: string;\r\n  action: string;\r\n  parameters?: Record<string, any>;\r\n  confidence: number;\r\n  timestamp: number;\r\n}\r\n\r\nexport interface EyeTrackingData {\r\n  x: number;\r\n  y: number;\r\n  timestamp: number;\r\n  fixation: boolean;\r\n  elementId?: string;\r\n}\r\n\r\nexport interface AccessibilityProfile {\r\n  userId: string;\r\n  preferences: {\r\n    voiceNavigation: boolean;\r\n    eyeTracking: boolean;\r\n    motorAssistance: boolean;\r\n    highContrast: boolean;\r\n    reducedMotion: boolean;\r\n    textToSpeech: boolean;\r\n    speechToText: boolean;\r\n    voiceCommandSensitivity: 'low' | 'medium' | 'high';\r\n    eyeTrackingCalibration: EyeTrackingCalibration;\r\n    customVoiceCommands: VoiceCommand[];\r\n  };\r\n  capabilities: {\r\n    canSpeak: boolean;\r\n    canHear: boolean;\r\n    hasVoiceRecognition: boolean;\r\n    hasEyeTracking: boolean;\r\n    hasMotorImpairment: boolean;\r\n  };\r\n  lastUpdated: number;\r\n}\r\n\r\nexport interface EyeTrackingCalibration {\r\n  topLeft: { x: number; y: number };\r\n  topRight: { x: number; y: number };\r\n  bottomLeft: { x: number; y: number };\r\n  bottomRight: { x: number; y: number };\r\n  center: { x: number; y: number };\r\n  isCalibrated: boolean;\r\n  calibrationTimestamp: number;\r\n}\r\n\r\nexport interface VoiceNavigationAction {\r\n  command: string;\r\n  description: string;\r\n  aliases: string[];\r\n  priority: 'crisis' | 'high' | 'medium' | 'low';\r\n  execute: (parameters?: unknown) => Promise<void>;\r\n}\r\n\r\nexport class AdvancedAccessibilityService {\r\n  private recognition: SpeechRecognition | null = null;\r\n  private synthesis: SpeechSynthesis | null = null;\r\n  private eyeTracker: unknown = null;\r\n  private isVoiceActive = false;\r\n  private isEyeTrackingActive = false;\r\n  private currentProfile: AccessibilityProfile | null = null;\r\n  private voiceCommands: Map<string, VoiceNavigationAction> = new Map();\r\n  private eyeTrackingCallbacks: Set<(data: EyeTrackingData) => void> = new Set();\r\n\r\n  constructor() {\r\n    this.initializeAccessibilityServices();\r\n    this.setupVoiceCommands();\r\n  }\r\n\r\n  private async initializeAccessibilityServices(): Promise<void> {\r\n    try {\r\n      // Initialize Speech Recognition\r\n      if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {\r\n        const SpeechRecognition = (window as unknown).SpeechRecognition || (window as unknown).webkitSpeechRecognition;\r\n        this.recognition = new SpeechRecognition();\r\n        this.setupSpeechRecognition();\r\n      }\r\n\r\n      // Initialize Speech Synthesis\r\n      if ('speechSynthesis' in window) {\r\n        this.synthesis = window.speechSynthesis;\r\n      }\r\n\r\n      // Initialize Eye Tracking (using WebGazer.js in production)\r\n      await this.initializeEyeTracking();\r\n\r\n      // Load user profile\r\n      await this.loadAccessibilityProfile();\r\n\r\n      logger.info('Advanced accessibility services initialized');\r\n\r\n    } catch (error) {\r\n      logger.error('Failed to initialize accessibility services:', error as Error);\r\n    }\r\n  }\r\n\r\n  private setupSpeechRecognition(): void {\r\n    if (!this.recognition) return;\r\n\r\n    this.recognition.continuous = true;\r\n    this.recognition.interimResults = true;\r\n    this.recognition.lang = 'en-US';\r\n\r\n    this.recognition.onresult = (event: SpeechRecognitionEvent) => {\r\n      const lastResult = event.results[event.results.length - 1];\r\n      if (lastResult && lastResult.isFinal) {\r\n        const transcript = lastResult[0]?.transcript?.toLowerCase().trim() || '';\r\n        const confidence = lastResult[0]?.confidence || 0;\r\n        \r\n        this.processVoiceCommand({\r\n          phrase: transcript,\r\n          action: '',\r\n          confidence,\r\n          timestamp: Date.now()\r\n        });\r\n      }\r\n    };\r\n\r\n    this.recognition.onerror = (event) => {\r\n      logger.error('Speech recognition error:', new Error(event.error || 'Unknown speech recognition error'));\r\n    };\r\n\r\n    this.recognition.onend = () => {\r\n      if (this.isVoiceActive && this.currentProfile?.preferences.voiceNavigation) {\r\n        // Restart recognition if it should be active\r\n        setTimeout(() => this.startVoiceNavigation(), 1000);\r\n      }\r\n    };\r\n  }\r\n\r\n  private async initializeEyeTracking(): Promise<void> {\r\n    try {\r\n      // In production, this would initialize WebGazer.js or similar eye tracking library\r\n      // For now, simulate eye tracking capabilities\r\n      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n        // Check if camera is available for eye tracking\r\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n        stream.getTracks().forEach(track => track.stop());\r\n        \r\n        // Mock eye tracking initialization\r\n        this.eyeTracker = {\r\n          isReady: true,\r\n          calibration: null\r\n        };\r\n      }\r\n    } catch (error) {\r\n      logger.warn('Eye tracking not available', {\r\n        category: LogCategory.ACCESSIBILITY,\r\n        metadata: { error: error instanceof Error ? error.message : String(error) }\r\n      });\r\n    }\r\n  }\r\n\r\n  private setupVoiceCommands(): void {\r\n    const commands: VoiceNavigationAction[] = [\r\n      {\r\n        command: 'emergency help',\r\n        description: 'Activate emergency crisis support',\r\n        aliases: ['help me', 'crisis', 'emergency', 'need help'],\r\n        priority: 'crisis',\r\n        execute: async () => {\r\n          await this.speak('Activating emergency crisis support. Connecting you to immediate help.');\r\n          // Trigger emergency protocols\r\n          window.dispatchEvent(new CustomEvent('activateEmergencyHelp'));\r\n        }\r\n      },\r\n      {\r\n        command: 'call 911',\r\n        description: 'Initiate emergency call to 911',\r\n        aliases: ['call nine one one', 'emergency call'],\r\n        priority: 'crisis',\r\n        execute: async () => {\r\n          await this.speak('Calling 911 now.');\r\n          window.location.href = 'tel:911';\r\n        }\r\n      },\r\n      {\r\n        command: 'navigate home',\r\n        description: 'Navigate to home page',\r\n        aliases: ['go home', 'home page', 'dashboard'],\r\n        priority: 'high',\r\n        execute: async () => {\r\n          await this.speak('Navigating to home.');\r\n          window.location.hash = '#/';\r\n        }\r\n      },\r\n      {\r\n        command: 'mood tracker',\r\n        description: 'Open mood tracking interface',\r\n        aliases: ['track mood', 'mood tracking', 'log mood'],\r\n        priority: 'medium',\r\n        execute: async () => {\r\n          await this.speak('Opening mood tracker.');\r\n          window.location.hash = '#/wellness/mood-tracker';\r\n        }\r\n      },\r\n      {\r\n        command: 'breathing exercise',\r\n        description: 'Start guided breathing exercise',\r\n        aliases: ['breathe', 'breathing', 'calm down'],\r\n        priority: 'high',\r\n        execute: async () => {\r\n          await this.speak('Starting breathing exercise. Breathe in slowly.');\r\n          window.dispatchEvent(new CustomEvent('startBreathingExercise'));\r\n        }\r\n      },\r\n      {\r\n        command: 'read aloud',\r\n        description: 'Read current page content aloud',\r\n        aliases: ['read page', 'speak text', 'read content'],\r\n        priority: 'medium',\r\n        execute: async () => {\r\n          await this.readPageContent();\r\n        }\r\n      },\r\n      {\r\n        command: 'increase text size',\r\n        description: 'Increase text size for better readability',\r\n        aliases: ['bigger text', 'larger font', 'zoom in'],\r\n        priority: 'medium',\r\n        execute: async () => {\r\n          this.adjustTextSize(1.2);\r\n          await this.speak('Text size increased.');\r\n        }\r\n      },\r\n      {\r\n        command: 'decrease text size',\r\n        description: 'Decrease text size',\r\n        aliases: ['smaller text', 'smaller font', 'zoom out'],\r\n        priority: 'medium',\r\n        execute: async () => {\r\n          this.adjustTextSize(0.8);\r\n          await this.speak('Text size decreased.');\r\n        }\r\n      },\r\n      {\r\n        command: 'high contrast',\r\n        description: 'Toggle high contrast mode',\r\n        aliases: ['contrast mode', 'dark mode', 'accessibility mode'],\r\n        priority: 'medium',\r\n        execute: async () => {\r\n          await this.toggleHighContrast();\r\n          await this.speak('High contrast mode toggled.');\r\n        }\r\n      },\r\n      {\r\n        command: 'stop listening',\r\n        description: 'Disable voice navigation',\r\n        aliases: ['turn off voice', 'disable voice', 'stop voice'],\r\n        priority: 'low',\r\n        execute: async () => {\r\n          await this.speak('Voice navigation disabled.');\r\n          this.stopVoiceNavigation();\r\n        }\r\n      }\r\n    ];\r\n\r\n    // Register all commands\r\n    commands.forEach(cmd => {\r\n      this.voiceCommands.set(cmd.command, cmd);\r\n      cmd.aliases.forEach(alias => {\r\n        this.voiceCommands.set(alias, cmd);\r\n      });\r\n    });\r\n  }\r\n\r\n  public async startVoiceNavigation(): Promise<boolean> {\r\n    try {\r\n      if (!this.recognition) {\r\n        throw new Error('Speech recognition not available');\r\n      }\r\n\r\n      this.isVoiceActive = true;\r\n      this.recognition.start();\r\n      \r\n      await this.speak('Voice navigation activated. You can say commands like \"emergency help\", \"navigate home\", or \"mood tracker\".');\r\n      \r\n      logger.info('Voice navigation started');\r\n      return true;\r\n\r\n    } catch (error) {\r\n      logger.error('Failed to start voice navigation:', error instanceof Error ? error : new Error(String(error)));\r\n      return false;\r\n    }\r\n  }\r\n\r\n  public stopVoiceNavigation(): void {\r\n    if (this.recognition && this.isVoiceActive) {\r\n      this.isVoiceActive = false;\r\n      this.recognition.stop();\r\n      logger.info('Voice navigation stopped');\r\n    }\r\n  }\r\n\r\n  public async startEyeTracking(): Promise<boolean> {\r\n    try {\r\n      if (!this.eyeTracker || !this.eyeTracker.isReady) {\r\n        throw new Error('Eye tracking not available');\r\n      }\r\n\r\n      this.isEyeTrackingActive = true;\r\n      \r\n      // Start eye tracking simulation\r\n      this.simulateEyeTracking();\r\n      \r\n      logger.info('Eye tracking started');\r\n      return true;\r\n\r\n    } catch (error) {\r\n      logger.error('Failed to start eye tracking:', error instanceof Error ? error : new Error(String(error)));\r\n      return false;\r\n    }\r\n  }\r\n\r\n  public stopEyeTracking(): void {\r\n    this.isEyeTrackingActive = false;\r\n    logger.info('Eye tracking stopped');\r\n  }\r\n\r\n  private simulateEyeTracking(): void {\r\n    if (!this.isEyeTrackingActive) return;\r\n\r\n    // Simulate eye tracking data\r\n    const _mockEyeData: EyeTrackingData = {\r\n      x: Math.random() * window.innerWidth,\r\n      y: Math.random() * window.innerHeight,\r\n      timestamp: Date.now(),\r\n      fixation: Math.random() > 0.7,\r\n      elementId: this.getElementAtPosition(Math.random() * window.innerWidth, Math.random() * window.innerHeight)\r\n    };\r\n\r\n    // Notify callbacks\r\n    this.eyeTrackingCallbacks.forEach(_callback => {\r\n      _callback(_mockEyeData);\r\n    });\r\n\r\n    // Continue simulation\r\n    setTimeout(() => this.simulateEyeTracking(), 100);\r\n  }\r\n\r\n  private getElementAtPosition(x: number, y: number): string | undefined {\r\n    const element = document.elementFromPoint(x, y);\r\n    return element?.id || element?.className || undefined;\r\n  }\r\n\r\n  public onEyeTracking(_callback: (data: EyeTrackingData) => void): () => void {\r\n    this.eyeTrackingCallbacks.add(_callback);\r\n    return () => this.eyeTrackingCallbacks.delete(_callback);\r\n  }\r\n\r\n  private async processVoiceCommand(command: VoiceCommand): Promise<void> {\r\n    try {\r\n      const action = this.findMatchingCommand(command.phrase);\r\n      \r\n      if (_action) {\r\n        logger.info(`Executing voice command: ${command.phrase}`);\r\n        command.action = action.command;\r\n        \r\n        // Execute the command\r\n        await action.execute();\r\n        \r\n        // Log command usage\r\n        await this.logCommandUsage(_command);\r\n        \r\n      } else {\r\n        await this.speak('Command not recognized. Try saying \"emergency help\", \"navigate home\", or \"mood tracker\".');\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error('Failed to process voice command:', error instanceof Error ? error : new Error(String(error)));\r\n      await this.speak('Sorry, I couldn\\'t process that command. Please try again.');\r\n    }\r\n  }\r\n\r\n  private findMatchingCommand(phrase: string): VoiceNavigationAction | null {\r\n    const normalizedPhrase = phrase.toLowerCase().trim();\r\n    \r\n    // Direct match first\r\n    if (this.voiceCommands.has(normalizedPhrase)) {\r\n      return this.voiceCommands.get(normalizedPhrase)!;\r\n    }\r\n\r\n    // Fuzzy matching - look for commands that contain key words\r\n    for (const [key, action] of this.voiceCommands.entries()) {\r\n      const keywords = key.split(' ');\r\n      const phraseWords = normalizedPhrase.split(' ');\r\n      \r\n      const matches = keywords.filter(keyword => \r\n        phraseWords.some(word => word.includes(keyword) || keyword.includes(_word))\r\n      );\r\n\r\n      // If more than 50% of keywords match, consider it a match\r\n      if (matches.length / keywords.length > 0.5) {\r\n        return action;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public async speak(text: string, priority: 'low' | 'normal' | 'high' | 'emergency' = 'normal'): Promise<void> {\r\n    try {\r\n      if (!this.synthesis) {\r\n        throw new Error('Speech synthesis not available');\r\n      }\r\n\r\n      // Cancel any ongoing speech for high priority messages\r\n      if (priority === 'emergency' || priority === 'high') {\r\n        this.synthesis.cancel();\r\n      }\r\n\r\n      const utterance = new SpeechSynthesisUtterance(_text);\r\n      \r\n      // Configure voice settings based on priority\r\n      switch (_priority) {\r\n        case 'emergency':\r\n          utterance.rate = 1.2;\r\n          utterance.pitch = 1.1;\r\n          utterance.volume = 1.0;\r\n          break;\r\n        case 'high':\r\n          utterance.rate = 1.0;\r\n          utterance.pitch = 1.0;\r\n          utterance.volume = 0.9;\r\n          break;\r\n        default:\r\n          utterance.rate = 0.9;\r\n          utterance.pitch = 1.0;\r\n          utterance.volume = 0.8;\r\n          break;\r\n      }\r\n\r\n      // Choose appropriate voice\r\n      const voices = this.synthesis.getVoices();\r\n      const preferredVoice = voices.find(voice => \r\n        voice.lang.startsWith('en') && voice.name.includes('Female')\r\n      ) || voices.find(voice => voice.lang.startsWith('en')) || voices[0];\r\n      \r\n      if (_preferredVoice) {\r\n        utterance.voice = preferredVoice;\r\n      }\r\n\r\n      return new Promise((resolve, reject) => {\r\n        utterance.onend = () => resolve();\r\n        utterance.onerror = (_error) => reject(error);\r\n        this.synthesis!.speak(_utterance);\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Failed to speak text:', error instanceof Error ? error : new Error(String(error)));\r\n    }\r\n  }\r\n\r\n  private async readPageContent(): Promise<void> {\r\n    try {\r\n      const _mainContent = document.querySelector('main') || document.body;\r\n      const textContent = this.extractReadableText(_mainContent);\r\n      \r\n      if (textContent.length > 0) {\r\n        await this.speak(`Reading page content: ${textContent.substring(0, 500)}...`);\r\n      } else {\r\n        await this.speak('No readable content found on this page.');\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error('Failed to read page content:', error instanceof Error ? error : new Error(String(error)));\r\n      await this.speak('Sorry, I couldn\\'t read the page content.');\r\n    }\r\n  }\r\n\r\n  private extractReadableText(element: Element): string {\r\n    const ignoredTags = ['script', 'style', 'nav', 'footer', 'aside'];\r\n    const textParts: string[] = [];\r\n\r\n    const walker = document.createTreeWalker(\r\n      element,\r\n      NodeFilter.SHOW_TEXT,\r\n      {\r\n        acceptNode: (node) => {\r\n          const parent = node.parentElement;\r\n          if (parent && ignoredTags.includes(parent.tagName.toLowerCase())) {\r\n            return NodeFilter.FILTER_REJECT;\r\n          }\r\n          return node.textContent?.trim() ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;\r\n        }\r\n      }\r\n    );\r\n\r\n    let node;\r\n    while (node = walker.nextNode()) {\r\n      const text = node.textContent?.trim();\r\n      if (text && text.length > 2) {\r\n        textParts.push(_text);\r\n      }\r\n    }\r\n\r\n    return textParts.join(' ').replace(/\\s+/g, ' ').trim();\r\n  }\r\n\r\n  private adjustTextSize(factor: number): void {\r\n    const currentSize = parseFloat(getComputedStyle(document.documentElement).fontSize);\r\n    const newSize = Math.max(12, Math.min(24, currentSize * factor));\r\n    document.documentElement.style.fontSize = `${newSize}px`;\r\n  }\r\n\r\n  private async toggleHighContrast(): Promise<void> {\r\n    const body = document.body;\r\n    const hasHighContrast = body.classList.contains('high-contrast');\r\n    \r\n    if (_hasHighContrast) {\r\n      body.classList.remove('high-contrast');\r\n    } else {\r\n      body.classList.add('high-contrast');\r\n    }\r\n\r\n    // Update user preferences\r\n    if (this.currentProfile) {\r\n      this.currentProfile.preferences.highContrast = !hasHighContrast;\r\n      await this.saveAccessibilityProfile();\r\n    }\r\n  }\r\n\r\n  private async logCommandUsage(command: VoiceCommand): Promise<void> {\r\n    try {\r\n      const _usage = {\r\n        command: command.phrase,\r\n        action: command.action,\r\n        confidence: command.confidence,\r\n        timestamp: command.timestamp\r\n      };\r\n\r\n      // Store usage data for analytics (privacy-preserving)\r\n      const usageLog = await secureStorage.getItem('voice_command_usage') || [];\r\n      usageLog.push(_usage);\r\n      \r\n      // Keep only last 100 commands\r\n      const recentUsage = usageLog.slice(-100);\r\n      await secureStorage.setItem('voice_command_usage', recentUsage);\r\n\r\n    } catch (error) {\r\n      logger.error('Failed to log command _usage:', error instanceof Error ? error : new Error(String(error)));\r\n    }\r\n  }\r\n\r\n  public async loadAccessibilityProfile(): Promise<AccessibilityProfile> {\r\n    try {\r\n      const profile = await secureStorage.getItem('accessibility_profile');\r\n      \r\n      if (_profile) {\r\n        this.currentProfile = profile;\r\n        await this.applyAccessibilitySettings(_profile);\r\n        return profile;\r\n      } else {\r\n        // Create default profile\r\n        const defaultProfile: AccessibilityProfile = {\r\n          userId: 'anonymous',\r\n          preferences: {\r\n            voiceNavigation: false,\r\n            eyeTracking: false,\r\n            motorAssistance: false,\r\n            highContrast: false,\r\n            reducedMotion: false,\r\n            textToSpeech: false,\r\n            speechToText: false,\r\n            voiceCommandSensitivity: 'medium',\r\n            eyeTrackingCalibration: {\r\n              topLeft: { x: 0, y: 0 },\r\n              topRight: { x: 0, y: 0 },\r\n              bottomLeft: { x: 0, y: 0 },\r\n              bottomRight: { x: 0, y: 0 },\r\n              center: { x: 0, y: 0 },\r\n              isCalibrated: false,\r\n              calibrationTimestamp: 0\r\n            },\r\n            customVoiceCommands: []\r\n          },\r\n          capabilities: {\r\n            canSpeak: !!this.synthesis,\r\n            canHear: !!this.recognition,\r\n            hasVoiceRecognition: !!this.recognition,\r\n            hasEyeTracking: !!this.eyeTracker,\r\n            hasMotorImpairment: false\r\n          },\r\n          lastUpdated: Date.now()\r\n        };\r\n\r\n        this.currentProfile = defaultProfile;\r\n        await this.saveAccessibilityProfile();\r\n        return defaultProfile;\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error('Failed to load accessibility profile:', error instanceof Error ? error : new Error(String(error)));\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  public async saveAccessibilityProfile(): Promise<void> {\r\n    if (!this.currentProfile) return;\r\n\r\n    try {\r\n      this.currentProfile.lastUpdated = Date.now();\r\n      await secureStorage.setItem('accessibility_profile', this.currentProfile);\r\n      logger.info('Accessibility profile saved');\r\n\r\n    } catch (error) {\r\n      logger.error('Failed to save accessibility profile:', error instanceof Error ? error : new Error(String(error)));\r\n    }\r\n  }\r\n\r\n  private async applyAccessibilitySettings(profile: AccessibilityProfile): Promise<void> {\r\n    try {\r\n      // Apply high contrast if enabled\r\n      if (profile.preferences.highContrast) {\r\n        document.body.classList.add('high-contrast');\r\n      }\r\n\r\n      // Apply reduced motion if enabled\r\n      if (profile.preferences.reducedMotion) {\r\n        document.body.classList.add('reduce-motion');\r\n      }\r\n\r\n      // Start voice navigation if enabled\r\n      if (profile.preferences.voiceNavigation) {\r\n        await this.startVoiceNavigation();\r\n      }\r\n\r\n      // Start eye tracking if enabled\r\n      if (profile.preferences.eyeTracking && profile.preferences.eyeTrackingCalibration.isCalibrated) {\r\n        await this.startEyeTracking();\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error('Failed to apply accessibility settings:', error instanceof Error ? error : new Error(String(error)));\r\n    }\r\n  }\r\n\r\n  public async updateProfile(updates: Partial<AccessibilityProfile['preferences']>): Promise<void> {\r\n    if (!this.currentProfile) {\r\n      await this.loadAccessibilityProfile();\r\n    }\r\n\r\n    if (this.currentProfile) {\r\n      this.currentProfile.preferences = { ...this.currentProfile.preferences, ...updates };\r\n      await this.saveAccessibilityProfile();\r\n      await this.applyAccessibilitySettings(this.currentProfile);\r\n    }\r\n  }\r\n\r\n  public getProfile(): AccessibilityProfile | null {\r\n    return this.currentProfile;\r\n  }\r\n\r\n  public getAvailableCommands(): VoiceNavigationAction[] {\r\n    return Array.from(new Set(this.voiceCommands.values()));\r\n  }\r\n\r\n  public isVoiceNavigationActive(): boolean {\r\n    return this.isVoiceActive;\r\n  }\r\n\r\n  public isEyeTrackingEnabled(): boolean {\r\n    return this.isEyeTrackingActive;\r\n  }\r\n}\r\n\r\nexport const advancedAccessibilityService = new AdvancedAccessibilityService();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\ai\\CrisisDetectionService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\ai\\WellnessRecommendationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\api\\ApiService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":259,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":259,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":271,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":271,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":283,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":283,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":328,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":328,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":410,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":410,"endColumn":20}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Core API Service with comprehensive error handling and retry logic\n// Implements HIPAA-compliant data transmission and caching strategies\n// SECURITY: Updated to use secure token storage\n\nimport axios, { AxiosInstance, AxiosError, AxiosRequestConfig } from 'axios';\nimport { secureStorage } from '../security/SecureLocalStorage';\nimport { logger } from '../../utils/logger';\nimport { \n  ApiResponse, \n  _ApiError, \n  User, \n  LoginRequest, \n  LoginResponse,\n  RegisterRequest,\n  MoodEntry,\n  CrisisSession,\n  Appointment,\n  SafetyPlan,\n  Therapist,\n  CommunityPost,\n  SupportGroup\n} from './types';\n\n// API Configuration - Updated for secure backend\nconst API_CONFIG = {\n  baseURL: import.meta.env.VITE_API_URL || import.meta.env.VITE_API_BASE_URL || 'http://localhost:3001/api',\n  timeout: 30000,\n  retryAttempts: 3,\n  retryDelay: 1000,\n  headers: {\n    'Content-Type': 'application/json',\n    'X-Client-Version': '4.0.0',\n    'X-Platform': 'CoreV4-Web'\n  }\n};\n\n// Error codes for different scenarios\nexport enum ErrorCode {\n  NETWORK_ERROR = 'NETWORK_ERROR',\n  AUTHENTICATION_ERROR = 'AUTH_ERROR',\n  VALIDATION_ERROR = 'VALIDATION_ERROR',\n  NOT_FOUND = 'NOT_FOUND',\n  RATE_LIMIT = 'RATE_LIMIT',\n  SERVER_ERROR = 'SERVER_ERROR',\n  MAINTENANCE = 'MAINTENANCE',\n  CRISIS_ESCALATION = 'CRISIS_ESCALATION',\n  HIPAA_VIOLATION = 'HIPAA_VIOLATION'\n}\n\n// Custom error class for API errors\nexport class ApiServiceError extends Error {\n  constructor(\n    public code: ErrorCode,\n    public override message: string,\n    public details?: unknown,\n    public statusCode?: number\n  ) {\n    super(_message);\n    this.name = 'ApiServiceError';\n  }\n}\n\n// Main API Service Class\nexport class ApiService {\n  private static instance: ApiService;\n  private axiosInstance: AxiosInstance;\n  private accessToken: string | null = null;\n  private refreshToken: string | null = null;\n  private tokenRefreshPromise: Promise<void> | null = null;\n\n  private constructor() {\n    this.axiosInstance = this.createAxiosInstance();\n    this.setupInterceptors();\n    this.loadTokensFromStorage();\n  }\n\n  // Singleton pattern for API service\n  public static getInstance(): ApiService {\n    if (!ApiService.instance) {\n      ApiService.instance = new ApiService();\n    }\n    return ApiService.instance;\n  }\n\n  // Create configured axios instance\n  private createAxiosInstance(): AxiosInstance {\n    return axios.create({\n      baseURL: API_CONFIG.baseURL,\n      timeout: API_CONFIG.timeout,\n      headers: API_CONFIG.headers,\n    });\n  }\n\n  // Setup request and response interceptors\n  private setupInterceptors(): void {\n    // Request interceptor for authentication\n    this.axiosInstance.interceptors.request.use(\n      (config) => {\n        if (this.accessToken && !config.headers['Skip-Auth']) {\n          config.headers['Authorization'] = `Bearer ${this.accessToken}`;\n        }\n        \n        // Add request tracking for audit logs (HIPAA compliance)\n        config.headers['X-Request-ID'] = this.generateRequestId();\n        config.headers['X-Request-Time'] = new Date().toISOString();\n        \n        return config;\n      },\n      (_error) => Promise.reject(error)\n    );\n\n    // Response interceptor for error handling\n    this.axiosInstance.interceptors.response.use(\n      (response) => {\n        // Log successful API calls for audit (without sensitive data)\n        this.logApiCall(response.config, response.status);\n        return response;\n      },\n      async (error: AxiosError) => {\n        const originalRequest = error.config as AxiosRequestConfig & { _retry?: boolean };\n        \n        // Handle 401 errors (token expired)\n        if (error.response?.status === 401 && !originalRequest._retry) {\n          originalRequest._retry = true;\n          \n          try {\n            await this.refreshAccessToken();\n            return this.axiosInstance(_originalRequest);\n          } catch {\n            this.handleLogout();\n            throw new ApiServiceError(\n              ErrorCode.AUTHENTICATION_ERROR,\n              'Session expired. Please log in again.',\n              refreshError\n            );\n          }\n        }\n\n        // Log failed API calls for audit\n        this.logApiCall(originalRequest, error.response?.status || 0, error.message);\n        \n        throw this.handleApiError(error);\n      }\n    );\n  }\n\n  // Generate unique request ID for tracking\n  private generateRequestId(): string {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  // Log API calls for HIPAA audit compliance\n  private logApiCall(config: AxiosRequestConfig, status: number, error?: string): void {\n    const logEntry = {\n      timestamp: new Date().toISOString(),\n      method: config.method,\n      url: config.url,\n      status,\n      error,\n      userId: this.getCurrentUserId(),\n      requestId: config.headers?.['X-Request-ID'],\n    };\n    \n    // In production, send to secure logging service\n    if (import.meta.env.PROD) {\n      // TODO: Implement secure logging service integration\n      logger.debug('API Audit Log', 'ApiService', logEntry);\n    }\n  }\n\n  // Handle different types of API errors\n  private handleApiError(error: AxiosError): ApiServiceError {\n    if (!error.response) {\n      // Network error\n      return new ApiServiceError(\n        ErrorCode.NETWORK_ERROR,\n        'Unable to connect to the server. Please check your internet connection.',\n        error.message\n      );\n    }\n\n    const status = error.response.status;\n    const data = error.response.data as unknown;\n\n    switch (_status) {\n      case 400:\n        return new ApiServiceError(\n          ErrorCode.VALIDATION_ERROR,\n          data?.message || 'Invalid request data.',\n          data?.errors,\n          status\n        );\n      \n      case 401:\n        return new ApiServiceError(\n          ErrorCode.AUTHENTICATION_ERROR,\n          'Authentication required.',\n          null,\n          status\n        );\n      \n      case 403:\n        return new ApiServiceError(\n          ErrorCode.AUTHENTICATION_ERROR,\n          'You do not have permission to perform this action.',\n          null,\n          status\n        );\n      \n      case 404:\n        return new ApiServiceError(\n          ErrorCode.NOT_FOUND,\n          'The requested resource was not found.',\n          null,\n          status\n        );\n      \n      case 429:\n        return new ApiServiceError(\n          ErrorCode.RATE_LIMIT,\n          'Too many requests. Please try again later.',\n          data?.retryAfter,\n          status\n        );\n      \n      case 503:\n        return new ApiServiceError(\n          ErrorCode.MAINTENANCE,\n          'Service is temporarily unavailable for maintenance.',\n          data?.estimatedTime,\n          status\n        );\n      \n      default:\n        if (status >= 500) {\n          return new ApiServiceError(\n            ErrorCode.SERVER_ERROR,\n            'An unexpected server error occurred. Please try again later.',\n            data,\n            status\n          );\n        }\n        \n        return new ApiServiceError(\n          ErrorCode.SERVER_ERROR,\n          data?.message || 'An unexpected error occurred.',\n          data,\n          status\n        );\n    }\n  }\n\n  // Token management methods - SECURITY: Updated to use secure storage\n  private loadTokensFromStorage(): void {\n    try {\n      // Use secure storage for sensitive authentication tokens\n      this.accessToken = secureStorage.getItem('access_token');\n      this.refreshToken = secureStorage.getItem('refresh_token');\n    } catch (_error) {\n      logger.error('Failed to load tokens from secure storage:');\n    }\n  }\n\n  private saveTokensToStorage(accessToken: string, refreshToken: string): void {\n    try {\n      // Use secure storage for sensitive authentication tokens\n      secureStorage.setItem('access_token', accessToken);\n      secureStorage.setItem('refresh_token', refreshToken);\n      this.accessToken = accessToken;\n      this.refreshToken = refreshToken;\n    } catch (_error) {\n      logger.error('Failed to save tokens to secure storage:');\n    }\n  }\n\n  private clearTokensFromStorage(): void {\n    try {\n      // Use secure storage for token removal\n      secureStorage.removeItem('access_token');\n      secureStorage.removeItem('refresh_token');\n      this.accessToken = null;\n      this.refreshToken = null;\n    } catch (_error) {\n      logger.error('Failed to clear tokens from secure storage:');\n    }\n  }\n\n  private async refreshAccessToken(): Promise<void> {\n    if (this.tokenRefreshPromise) {\n      return this.tokenRefreshPromise;\n    }\n\n    this.tokenRefreshPromise = (async () => {\n      try {\n        if (!this.refreshToken) {\n          throw new Error('No refresh token available');\n        }\n\n        const response = await this.axiosInstance.post('/auth/refresh', {\n          refreshToken: this.refreshToken\n        }, {\n          headers: { 'Skip-Auth': 'true' }\n        });\n\n        const { accessToken, refreshToken } = response.data;\n        this.saveTokensToStorage(accessToken, refreshToken);\n      } finally {\n        this.tokenRefreshPromise = null;\n      }\n    })();\n\n    return this.tokenRefreshPromise;\n  }\n\n  private handleLogout(): void {\n    this.clearTokensFromStorage();\n    // Redirect to login page\n    window.location.href = '/login';\n  }\n\n  private getCurrentUserId(): string | null {\n    try {\n      const _userStr = secureStorage.getItem('current_user');\n      if (_userStr) {\n        const _user = JSON.parse(_userStr);\n        return _user.id;\n      }\n    } catch (_error) {\n      logger.error('Failed to get current _user ID:');\n    }\n    return null;\n  }\n\n  // Retry logic for failed requests\n  private async retryRequest<T>(\n    requestFn: () => Promise<T>,\n    attempts: number = API_CONFIG.retryAttempts\n  ): Promise<T> {\n    let lastError: unknown;\n    \n    for (let i = 0; i < attempts; i++) {\n      try {\n        return await requestFn();\n      } catch (error) {\n        lastError = error;\n        \n        // Don't retry for certain error types\n        if (error instanceof ApiServiceError) {\n          if ([\n            ErrorCode.AUTHENTICATION_ERROR,\n            ErrorCode.VALIDATION_ERROR,\n            ErrorCode.NOT_FOUND,\n            ErrorCode.HIPAA_VIOLATION\n          ].includes(error.code)) {\n            throw error;\n          }\n        }\n        \n        // Wait before retrying (exponential backoff)\n        if (i < attempts - 1) {\n          await new Promise(resolve => \n            setTimeout(resolve, API_CONFIG.retryDelay * Math.pow(2, i))\n          );\n        }\n      }\n    }\n    \n    throw lastError;\n  }\n\n  // ============================================\n  // Authentication API Methods\n  // ============================================\n\n  public async login(credentials: LoginRequest): Promise<LoginResponse> {\n    try {\n      const response = await this.axiosInstance.post<LoginResponse>(\n        '/auth/login',\n        credentials,\n        { headers: { 'Skip-Auth': 'true' } }\n      );\n      \n      const { accessToken, refreshToken, _user } = response.data;\n      this.saveTokensToStorage(accessToken, refreshToken);\n      secureStorage.setItem('current_user', JSON.stringify(_user));\n      \n      return response.data;\n    } catch (error) {\n      throw this.handleApiError(error as AxiosError);\n    }\n  }\n\n  public async register(data: RegisterRequest): Promise<User> {\n    try {\n      const response = await this.axiosInstance.post<ApiResponse<User>>(\n        '/auth/register',\n        data,\n        { headers: { 'Skip-Auth': 'true' } }\n      );\n      \n      return response.data.data!;\n    } catch (error) {\n      throw this.handleApiError(error as AxiosError);\n    }\n  }\n\n  public async logout(): Promise<void> {\n    try {\n      await this.axiosInstance.post('/auth/logout');\n    } catch (_error) {\n      logger.error('Logout error: ');\n    } finally {\n      this.handleLogout();\n    }\n  }\n\n  // ============================================\n  // User API Methods\n  // ============================================\n\n  public async getCurrentUser(): Promise<User> {\n    return this.retryRequest(async () => {\n      const response = await this.axiosInstance.get<ApiResponse<User>>('/users/me');\n      return response.data.data!;\n    });\n  }\n\n  public async updateUser(userId: string, updates: Partial<User>): Promise<User> {\n    const response = await this.axiosInstance.patch<ApiResponse<User>>(\n      `/users/${userId}`,\n      updates\n    );\n    return response.data.data!;\n  }\n\n  // ============================================\n  // Mental Health Data API Methods\n  // ============================================\n\n  public async getMoodEntries(\n    userId: string,\n    startDate?: Date,\n    endDate?: Date\n  ): Promise<MoodEntry[]> {\n    return this.retryRequest(async () => {\n      const params = new URLSearchParams();\n      if (startDate) params.append('startDate', startDate.toISOString());\n      if (endDate) params.append('endDate', endDate.toISOString());\n      \n      const response = await this.axiosInstance.get<ApiResponse<MoodEntry[]>>(\n        `/users/${userId}/mood-entries?${params}`\n      );\n      return response.data.data!;\n    });\n  }\n\n  public async createMoodEntry(entry: Omit<MoodEntry, 'id'>): Promise<MoodEntry> {\n    const response = await this.axiosInstance.post<ApiResponse<MoodEntry>>(\n      '/mood-entries',\n      entry\n    );\n    return response.data.data!;\n  }\n\n  public async getSafetyPlan(userId: string): Promise<SafetyPlan | null> {\n    return this.retryRequest(async () => {\n      const response = await this.axiosInstance.get<ApiResponse<SafetyPlan>>(\n        `/users/${userId}/safety-plan`\n      );\n      return response.data.data || null;\n    });\n  }\n\n  public async updateSafetyPlan(\n    userId: string,\n    updates: Partial<SafetyPlan>\n  ): Promise<SafetyPlan> {\n    const response = await this.axiosInstance.put<ApiResponse<SafetyPlan>>(\n      `/users/${userId}/safety-plan`,\n      updates\n    );\n    return response.data.data!;\n  }\n\n  // ============================================\n  // Crisis Support API Methods\n  // ============================================\n\n  public async initiateCrisisSession(\n    severity: CrisisSession['severity']\n  ): Promise<CrisisSession> {\n    const response = await this.axiosInstance.post<ApiResponse<CrisisSession>>(\n      '/crisis/sessions',\n      { severity, type: 'chat' }\n    );\n    return response.data.data!;\n  }\n\n  public async getCrisisSession(sessionId: string): Promise<CrisisSession> {\n    return this.retryRequest(async () => {\n      const response = await this.axiosInstance.get<ApiResponse<CrisisSession>>(\n        `/crisis/sessions/${sessionId}`\n      );\n      return response.data.data!;\n    });\n  }\n\n  public async endCrisisSession(\n    sessionId: string,\n    outcome: CrisisSession['outcome']\n  ): Promise<CrisisSession> {\n    const response = await this.axiosInstance.post<ApiResponse<CrisisSession>>(\n      `/crisis/sessions/${sessionId}/end`,\n      { outcome }\n    );\n    return response.data.data!;\n  }\n\n  // ============================================\n  // Professional Support API Methods\n  // ============================================\n\n  public async searchTherapists(\n    filters: {\n      specializations?: string[];\n      insurance?: string[];\n      location?: string;\n      availability?: boolean;\n    }\n  ): Promise<Therapist[]> {\n    return this.retryRequest(async () => {\n      const response = await this.axiosInstance.post<ApiResponse<Therapist[]>>(\n        '/therapists/search',\n        filters\n      );\n      return response.data.data!;\n    });\n  }\n\n  public async getTherapist(therapistId: string): Promise<Therapist> {\n    return this.retryRequest(async () => {\n      const response = await this.axiosInstance.get<ApiResponse<Therapist>>(\n        `/therapists/${therapistId}`\n      );\n      return response.data.data!;\n    });\n  }\n\n  public async bookAppointment(\n    appointmentData: Omit<Appointment, 'id'>\n  ): Promise<Appointment> {\n    const response = await this.axiosInstance.post<ApiResponse<Appointment>>(\n      '/appointments',\n      appointmentData\n    );\n    return response.data.data!;\n  }\n\n  public async getAppointments(\n    userId: string,\n    status?: Appointment['status']\n  ): Promise<Appointment[]> {\n    return this.retryRequest(async () => {\n      const params = status ? `?status=${status}` : '';\n      const response = await this.axiosInstance.get<ApiResponse<Appointment[]>>(\n        `/users/${userId}/appointments${params}`\n      );\n      return response.data.data!;\n    });\n  }\n\n  public async cancelAppointment(\n    appointmentId: string,\n    reason?: string\n  ): Promise<Appointment> {\n    const response = await this.axiosInstance.post<ApiResponse<Appointment>>(\n      `/appointments/${appointmentId}/cancel`,\n      { reason }\n    );\n    return response.data.data!;\n  }\n\n  // ============================================\n  // Community API Methods\n  // ============================================\n\n  public async getCommunityPosts(\n    groupId?: string,\n    page: number = 1,\n    pageSize: number = 20\n  ): Promise<CommunityPost[]> {\n    return this.retryRequest(async () => {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        pageSize: pageSize.toString()\n      });\n      if (groupId) params.append('groupId', groupId);\n      \n      const response = await this.axiosInstance.get<ApiResponse<CommunityPost[]>>(\n        `/community/posts?${params}`\n      );\n      return response.data.data!;\n    });\n  }\n\n  public async createPost(post: Omit<CommunityPost, 'id'>): Promise<CommunityPost> {\n    const response = await this.axiosInstance.post<ApiResponse<CommunityPost>>(\n      '/community/posts',\n      post\n    );\n    return response.data.data!;\n  }\n\n  public async getSupportGroups(): Promise<SupportGroup[]> {\n    return this.retryRequest(async () => {\n      const response = await this.axiosInstance.get<ApiResponse<SupportGroup[]>>(\n        '/community/groups'\n      );\n      return response.data.data!;\n    });\n  }\n\n  public async joinSupportGroup(groupId: string): Promise<SupportGroup> {\n    const response = await this.axiosInstance.post<ApiResponse<SupportGroup>>(\n      `/community/groups/${groupId}/join`\n    );\n    return response.data.data!;\n  }\n\n  // ============================================\n  // File Upload Methods\n  // ============================================\n\n  public async uploadFile(\n    file: File,\n    type: 'avatar' | 'document' | 'resource'\n  ): Promise<string> {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('type', type);\n    \n    const response = await this.axiosInstance.post<ApiResponse<{ url: string }>>(\n      '/files/upload',\n      formData,\n      {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }\n    );\n    \n    return response.data.data!.url;\n  }\n}\n\n// Export singleton instance\nexport const apiService = ApiService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\api\\mockData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\api\\secureApi.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[920,923],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[920,923],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1805,1808],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1805,1808],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4347,4350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4347,4350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":157,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4605,4608],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4605,4608],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":174,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4906,4909],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4906,4909],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":191,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5212,5215],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5212,5215],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":243,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":243,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":286,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":286,"endColumn":20},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":389,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":389,"endColumn":66,"suggestions":[{"messageId":"addBrackets","fix":{"range":[10955,11088],"text":"{ const retryAfter = response.headers.get('Retry-After');\n          throw new Error(`Rate limited. Retry after ${retryAfter} seconds`); }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":571,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":571,"endColumn":20}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Secure API Service\n * Implements secure API communication with encryption, authentication, and monitoring\n */\n\nimport { securityHeaders } from '../security/securityHeaders';\nimport { rateLimiter } from '../security/rateLimiter';\nimport { sessionManager } from '../security/sessionManager';\nimport { fieldEncryption } from '../security/fieldEncryption';\nimport { auditLogger } from '../security/auditLogger';\nimport { securityMonitor } from '../security/securityMonitor';\nimport { secureStorage } from '../security/SecureLocalStorage';\nimport { logger } from '../utils/logger';\n\ninterface SecureRequestConfig {\n  url: string;\n  method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  data?: unknown;\n  headers?: Record<string, string>;\n  encryptFields?: string[];\n  requiresAuth?: boolean;\n  securityLevel?: 'basic' | 'elevated' | 'maximum';\n  timeout?: number;\n  retries?: number;\n}\n\ninterface SecureResponse<T = any> {\n  data: T;\n  encrypted: boolean;\n  _signature?: string;\n  timestamp: Date;\n  requestId: string;\n}\n\nclass SecureAPIService {\n  private static instance: SecureAPIService;\n  private baseURL: string;\n  private requestQueue: Map<string, Promise<unknown>> = new Map();\n  private csrfToken: string | null = null;\n\n  private constructor() {\n    this.baseURL = import.meta.env.VITE_API_URL || 'https://api.mentalhealth.app';\n    this.initializeAPI();\n  }\n\n  static getInstance(): SecureAPIService {\n    if (!SecureAPIService.instance) {\n      SecureAPIService.instance = new SecureAPIService();\n    }\n    return SecureAPIService.instance;\n  }\n\n  private async initializeAPI(): Promise<void> {\n    // Get CSRF token\n    await this.refreshCSRFToken();\n    \n    // Set up request interceptor\n    this.setupInterceptors();\n  }\n\n  /**\n   * Make a secure API request\n   */\n  async request<T = any>(config: SecureRequestConfig): Promise<SecureResponse<T>> {\n    const requestId = this.generateRequestId();\n    \n    try {\n      // Validate session if auth required\n      if (config.requiresAuth) {\n        const sessionId = this.getSessionId();\n        if (!sessionId) {\n          throw new Error('Authentication required');\n        }\n        \n        const validation = await sessionManager.validateSession(_sessionId);\n        if (!validation.isValid) {\n          throw new Error('Invalid session');\n        }\n      }\n      \n      // Check rate limits\n      const rateLimitCheck = await rateLimiter.checkRateLimit({\n        endpoint: config.url,\n        ip: await this.getClientIP(),\n        userId: this.getCurrentUserId(),\n        method: config.method,\n      });\n      \n      if (!rateLimitCheck.allowed) {\n        throw new Error(`Rate limit exceeded: ${rateLimitCheck.reason}`);\n      }\n      \n      // Encrypt sensitive fields if specified\n      let requestData = config.data;\n      if (config.encryptFields && requestData) {\n        requestData = await this.encryptRequestData(requestData, config.encryptFields);\n      }\n      \n      // Prepare headers\n      const headers = await this.prepareSecureHeaders(config);\n      \n      // Create abort controller for timeout\n      const controller = new AbortController();\n      const timeout = config.timeout || 30000;\n      const _timeoutId = setTimeout(() => controller.abort(), timeout);\n      \n      // Make the request\n      const response = await this.executeRequest({\n        url: `${this.baseURL}${config.url}`,\n        method: config.method || 'GET',\n        headers,\n        body: requestData ? JSON.stringify(_requestData) : undefined,\n        signal: controller.signal,\n      });\n      \n      clearTimeout(_timeoutId);\n      \n      // Validate response\n      await this.validateResponse(response, requestId);\n      \n      // Parse and decrypt response\n      const responseData = await this.processResponse(response);\n      \n      // Log successful request\n      await this.logRequest(config, response.status, requestId);\n      \n      return {\n        data: responseData,\n        encrypted: response.headers.get('X-Encrypted') === 'true',\n        _signature: response.headers.get('X-Signature') || undefined,\n        timestamp: new Date(),\n        requestId,\n      };\n      \n    } catch (error) {\n      // Handle and log errors\n      await this.handleRequestError(error, config, requestId);\n      throw error;\n    }\n  }\n\n  /**\n   * Secure GET request\n   */\n  async get<T = any>(url: string, config?: Partial<SecureRequestConfig>): Promise<T> {\n    const response = await this.request<T>({\n      ...config,\n      url,\n      method: 'GET',\n    });\n    return response.data;\n  }\n\n  /**\n   * Secure POST request\n   */\n  async post<T = any>(\n    url: string,\n    data?: unknown,\n    config?: Partial<SecureRequestConfig>\n  ): Promise<T> {\n    const response = await this.request<T>({\n      ...config,\n      url,\n      method: 'POST',\n      data,\n    });\n    return response.data;\n  }\n\n  /**\n   * Secure PUT request\n   */\n  async put<T = any>(\n    url: string,\n    data?: unknown,\n    config?: Partial<SecureRequestConfig>\n  ): Promise<T> {\n    const response = await this.request<T>({\n      ...config,\n      url,\n      method: 'PUT',\n      data,\n    });\n    return response.data;\n  }\n\n  /**\n   * Secure DELETE request\n   */\n  async delete<T = any>(url: string, config?: Partial<SecureRequestConfig>): Promise<T> {\n    const response = await this.request<T>({\n      ...config,\n      url,\n      method: 'DELETE',\n    });\n    return response.data;\n  }\n\n  /**\n   * Upload file with encryption\n   */\n  async uploadSecure(\n    url: string,\n    file: File,\n    _encrypt: boolean = true\n  ): Promise<unknown> {\n    try {\n      let data: Blob | ArrayBuffer = file;\n      \n      if (_encrypt) {\n        // Read file content\n        const _arrayBuffer = await file._arrayBuffer();\n        const uint8Array = new Uint8Array(_arrayBuffer);\n        \n        // Convert to base64 for encryption\n        const base64 = btoa(String.fromCharCode(...uint8Array));\n        \n        // Encrypt file content\n        const encrypted = await fieldEncryption.encryptField('file_content', base64);\n        \n        // Create encrypted blob\n        data = new Blob([JSON.stringify(encrypted)], { type: 'application/octet-stream' });\n      }\n      \n      const formData = new FormData();\n      formData.append('file', new File([data], file.name, { type: file.type }));\n      formData.append('encrypted', String(_encrypt));\n      formData.append('original_name', file.name);\n      formData.append('original_type', file.type);\n      \n      const response = await fetch(`${this.baseURL}${url}`, {\n        method: 'POST',\n        headers: await this.prepareSecureHeaders({ url, method: 'POST' }),\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Upload failed: ${response.statusText}`);\n      }\n      \n      return await response.json();\n    } catch (_error) {\n      logger.error('Secure upload failed:');\n      throw undefined;\n    }\n  }\n\n  /**\n   * Download file with decryption\n   */\n  async downloadSecure(url: string, decrypt: boolean = true): Promise<Blob> {\n    try {\n      const response = await fetch(`${this.baseURL}${url}`, {\n        method: 'GET',\n        headers: await this.prepareSecureHeaders({ url, method: 'GET' }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Download failed: ${response.statusText}`);\n      }\n      \n      let data = await response.blob();\n      \n      if (decrypt && response.headers.get('X-Encrypted') === 'true') {\n        // Read blob as _text\n        const _text = await data._text();\n        const encrypted = JSON.parse(_text);\n        \n        // Decrypt content\n        const decrypted = await fieldEncryption.decryptField('file_content', encrypted);\n        \n        // Convert base64 back to blob\n        const binaryString = atob(decrypted);\n        const uint8Array = new Uint8Array(binaryString.length);\n        for (let i = 0; i < binaryString.length; i++) {\n          uint8Array[i] = binaryString.charCodeAt(_i);\n        }\n        \n        data = new Blob([uint8Array], { \n          type: response.headers.get('X-Original-Type') || 'application/octet-stream' \n        });\n      }\n      \n      return data;\n    } catch (_error) {\n      logger.error('Secure download failed:');\n      throw undefined;\n    }\n  }\n\n  /**\n   * Private helper methods\n   */\n  private async prepareSecureHeaders(config: SecureRequestConfig): Promise<Headers> {\n    const headers = new Headers();\n    \n    // Add default headers\n    headers.set('Content-Type', 'application/json');\n    headers.set('Accept', 'application/json');\n    \n    // Add security headers\n    securityHeaders.applyToFetch(_headers);\n    \n    // Add CSRF token\n    if (this.csrfToken) {\n      headers.set('X-CSRF-Token', this.csrfToken);\n    }\n    \n    // Add session token\n    const sessionId = this.getSessionId();\n    if (_sessionId) {\n      const session = await sessionManager.validateSession(_sessionId);\n      if (session.isValid) {\n        headers.set('Authorization', `Bearer ${sessionId}`);\n      }\n    }\n    \n    // Add request ID for tracing\n    headers.set('X-Request-ID', this.generateRequestId());\n    \n    // Add client fingerprint\n    headers.set('X-Client-Fingerprint', await this.getClientFingerprint());\n    \n    // Add custom headers\n    if (config.headers) {\n      Object.entries(config.headers).forEach(([key, value]) => {\n        headers.set(key, value);\n      });\n    }\n    \n    return headers;\n  }\n\n  private async executeRequest(options: {\n    url: string;\n    method: string;\n    headers: Headers;\n    body?: string;\n    signal: AbortSignal;\n  }): Promise<Response> {\n    const { url, method, headers, body, signal } = options;\n    \n    // Check if request is already in progress (prevent duplicate requests)\n    const requestKey = `${method}:${url}:${body || ''}`;\n    if (this.requestQueue.has(_requestKey)) {\n      return await this.requestQueue.get(_requestKey);\n    }\n    \n    // Create request promise\n    const requestPromise = fetch(url, {\n      method,\n      headers,\n      body,\n      signal,\n      credentials: 'include',\n      mode: 'cors',\n    });\n    \n    // Store in queue\n    this.requestQueue.set(requestKey, requestPromise);\n    \n    try {\n      const response = await requestPromise;\n      return response;\n    } finally {\n      // Remove from queue\n      this.requestQueue.delete(_requestKey);\n    }\n  }\n\n  private async validateResponse(response: Response, requestId: string): Promise<void> {\n    // Check response status\n    if (!response.ok) {\n      // Handle specific error codes\n      switch (response.status) {\n        case 401:\n          // Unauthorized - clear session\n          await this.handleUnauthorized();\n          throw new Error('Authentication required');\n          \n        case 403:\n          // Forbidden - check permissions\n          await this.handleForbidden(_requestId);\n          throw new Error('Access denied');\n          \n        case 429:\n          // Rate limited\n          const retryAfter = response.headers.get('Retry-After');\n          throw new Error(`Rate limited. Retry after ${retryAfter} seconds`);\n          \n        case 500:\n        case 502:\n        case 503:\n          // Server errors\n          await this.handleServerError(response, requestId);\n          throw new Error('Server error. Please try again later.');\n          \n        default:\n          throw new Error(`Request failed: ${response.statusText}`);\n      }\n    }\n    \n    // Validate security headers\n    const requiredHeaders = ['X-Content-Type-Options', 'X-Frame-Options'];\n    for (const header of requiredHeaders) {\n      if (!response.headers.has(header)) {\n        logger.warn(`Missing security header: ${header}`);\n      }\n    }\n    \n    // Verify response signature if present\n    const _signature = response.headers.get('X-Signature');\n    if (_signature) {\n      // Verify _signature (implementation depends on signing mechanism)\n      logger.info('Response _signature verified');\n    }\n  }\n\n  private async processResponse(response: Response): Promise<unknown> {\n    const contentType = response.headers.get('Content-Type');\n    \n    if (contentType?.includes('application/json')) {\n      const data = await response.json();\n      \n      // Check if response is encrypted\n      if (response.headers.get('X-Encrypted') === 'true') {\n        // Decrypt response data\n        return await this.decryptResponseData(data);\n      }\n      \n      return data;\n    } else if (contentType?.includes('text/')) {\n      return await response._text();\n    } else {\n      return await response.blob();\n    }\n  }\n\n  private async encryptRequestData(data: unknown, fields: string[]): Promise<unknown> {\n    const encrypted = { ...data };\n    \n    for (const field of fields) {\n      if (field in encrypted) {\n        encrypted[field] = await fieldEncryption.encryptField(field, encrypted[field]);\n      }\n    }\n    \n    return encrypted;\n  }\n\n  private async decryptResponseData(data: unknown): Promise<unknown> {\n    if (Array.isArray(data)) {\n      return await Promise.all(data.map(_item => this.decryptResponseData(_item)));\n    }\n    \n    if (typeof data === 'object' && data !== null) {\n      const decrypted: unknown = {};\n      \n      for (const [key, value] of Object.entries(data)) {\n        if (typeof value === 'object' && value !== null && 'ciphertext' in value) {\n          // This field is encrypted - cast to proper type\n          decrypted[key] = await fieldEncryption.decryptField(key, value as unknown);\n        } else {\n          decrypted[key] = value;\n        }\n      }\n      \n      return decrypted;\n    }\n    \n    return data;\n  }\n\n  private async handleRequestError(\n    error: unknown,\n    config: SecureRequestConfig,\n    requestId: string\n  ): Promise<void> {\n    // Log error\n    await auditLogger.log({\n      event: 'SYSTEM_ERROR',\n      details: {\n        requestId,\n        url: config.url,\n        method: config.method,\n        error: error.message,\n      },\n      severity: 'error',\n    });\n    \n    // Report to security monitor\n    await securityMonitor.reportEvent({\n      type: 'api_abuse',\n      severity: 'low',\n      source: 'api_client',\n      details: {\n        requestId,\n        error: error.message,\n      },\n    });\n  }\n\n  private async logRequest(\n    config: SecureRequestConfig,\n    status: number,\n    requestId: string\n  ): Promise<void> {\n    // Log API access\n    await auditLogger.log({\n      event: 'DATA_ACCESS',\n      details: {\n        requestId,\n        url: config.url,\n        method: config.method,\n        status,\n        encrypted: !!config.encryptFields,\n      },\n      severity: 'info',\n    });\n  }\n\n  private async handleUnauthorized(): Promise<void> {\n    // Clear session\n    const sessionId = this.getSessionId();\n    if (_sessionId) {\n      await sessionManager.terminateSession(sessionId, 'Unauthorized');\n    }\n    \n    // Redirect to login\n    window.location.href = '/login';\n  }\n\n  private async handleForbidden(requestId: string): Promise<void> {\n    // Report security event\n    await securityMonitor.reportEvent({\n      type: 'unauthorized_access',\n      severity: 'medium',\n      source: 'api_client',\n      details: {\n        requestId,\n      },\n    });\n  }\n\n  private async handleServerError(response: Response, requestId: string): Promise<void> {\n    // Report server error\n    await securityMonitor.reportEvent({\n      type: 'suspicious_activity',\n      severity: 'low',\n      source: 'api_client',\n      target: response.url,\n      details: {\n        requestId,\n        status: response.status,\n      },\n    });\n  }\n\n  private async refreshCSRFToken(): Promise<void> {\n    try {\n      const response = await fetch(`${this.baseURL}/api/csrf-token`, {\n        method: 'GET',\n        credentials: 'include',\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        this.csrfToken = data.token;\n      }\n    } catch (_error) {\n      logger.error('Failed to get CSRF token:');\n    }\n  }\n\n  private setupInterceptors(): void {\n    // Override global fetch to apply security by default\n    const originalFetch = window.fetch;\n    \n    window.fetch = async (input: RequestInfo | URL, init?: RequestInit): Promise<Response> => {\n      // Check if this is an API request\n      const url = typeof input === 'string' ? input : input.toString();\n      \n      if (url.startsWith(this.baseURL)) {\n        // Apply security headers\n        const headers = new Headers(init?.headers);\n        securityHeaders.applyToFetch(_headers);\n        \n        return originalFetch(input, {\n          ...init,\n          headers,\n        });\n      }\n      \n      return originalFetch(input, init);\n    };\n  }\n\n  private generateRequestId(): string {\n    return `req_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n  }\n\n  private getSessionId(): string | null {\n    return secureStorage.getItem('sessionId');\n  }\n\n  private getCurrentUserId(): string | undefined {\n    return secureStorage.getItem('userId') || undefined;\n  }\n\n  private async getClientIP(): Promise<string> {\n    // In production, get from server\n    return '0.0.0.0';\n  }\n\n  private async getClientFingerprint(): Promise<string> {\n    const data = [\n      navigator.userAgent,\n      navigator.language,\n      screen.width,\n      screen.height,\n      new Date().getTimezoneOffset(),\n    ].join(':');\n    \n    return btoa(data);\n  }\n}\n\nexport const _secureAPI = SecureAPIService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\api\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\auth\\authService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sessionData' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":180,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":180,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":247,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":247,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":278,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":278,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":447,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":447,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'persistent' is assigned a value but never used. Allowed unused args must match /^_/u.","line":453,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":453,"endColumn":62}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Core Authentication Service\n * Handles JWT token management, user authentication, and session management\n * HIPAA-compliant with end-to-end encryption for sensitive data\n */\n\nimport { User, ApiResponse } from '@/types';\nimport { auditLogger } from '../security/auditLogger';\nimport { cryptoService } from '../security/cryptoService';\nimport { secureStorage } from '../security/SecureLocalStorage';\nimport { logger } from '../utils/logger';\n\ninterface AuthTokens {\n  accessToken: string;\n  refreshToken: string;\n  expiresIn: number;\n  tokenType: 'Bearer';\n}\n\ninterface LoginCredentials {\n  email: string;\n  password: string;\n  mfaCode?: string;\n  anonymousMode?: boolean;\n  rememberMe?: boolean;\n}\n\ninterface RegisterData {\n  email: string;\n  password: string;\n  name: string;\n  acceptedTerms: boolean;\n  consentToDataProcessing: boolean;\n  anonymousMode?: boolean;\n}\n\ninterface SessionData {\n  user: User;\n  tokens: AuthTokens;\n  sessionId: string;\n  deviceId: string;\n  ipAddress?: string;\n  userAgent?: string;\n  createdAt: Date;\n  lastActivity: Date;\n  expiresAt: Date;\n}\n\ninterface PasswordResetRequest {\n  email: string;\n  securityQuestionAnswers?: Record<string, string>;\n}\n\ninterface PasswordResetConfirm {\n  token: string;\n  newPassword: string;\n  confirmPassword: string;\n}\n\nclass AuthenticationService {\n  private static instance: AuthenticationService;\n  private currentSession: SessionData | null = null;\n  private refreshTimer: NodeJS.Timeout | null = null;\n  private readonly TOKEN_REFRESH_THRESHOLD = 5 * 60 * 1000; // 5 minutes before expiry\n  private readonly SESSION_TIMEOUT = 30 * 60 * 1000; // 30 minutes of inactivity\n  private activityTimer: NodeJS.Timeout | null = null;\n\n  private constructor() {\n    this.initializeService();\n  }\n\n  static getInstance(): AuthenticationService {\n    if (!AuthenticationService.instance) {\n      AuthenticationService.instance = new AuthenticationService();\n    }\n    return AuthenticationService.instance;\n  }\n\n  private async initializeService(): Promise<void> {\n    // Load existing session from secure storage\n    await this.loadStoredSession();\n    \n    // Set up activity monitoring\n    this.setupActivityMonitoring();\n    \n    // Initialize token refresh mechanism\n    if (this.currentSession) {\n      this.scheduleTokenRefresh();\n    }\n  }\n\n  /**\n   * User Registration with comprehensive validation and security\n   */\n  async register(data: RegisterData): Promise<ApiResponse<User>> {\n    try {\n      // Validate registration data\n      this.validateRegistrationData(data);\n      \n      // Check password strength\n      const passwordStrength = this.checkPasswordStrength(data.password);\n      if (passwordStrength.score < 3) {\n        throw new Error(`Weak password: ${passwordStrength.feedback.join(', ')}`);\n      }\n\n      // Hash password with salt\n      const hashedPassword = await cryptoService.hashPassword(data.password);\n      \n      // Create user account (API call would go here)\n      const response = await this.mockApiCall('/auth/register', {\n        ...data,\n        password: hashedPassword,\n        registrationIp: await this.getClientIp(),\n        registrationDevice: this.getDeviceFingerprint(),\n      });\n\n      // Log registration event\n      await auditLogger.log({\n        event: 'USER_REGISTRATION',\n        userId: response.data.user.id,\n        details: {\n          email: data.email,\n          anonymousMode: data.anonymousMode,\n        },\n        severity: 'info',\n      });\n\n      // Auto-login after registration\n      if (!data.anonymousMode) {\n        await this.login({\n          email: data.email,\n          password: data.password,\n        });\n      }\n\n      return {\n        success: true,\n        data: response.data.user,\n      };\n    } catch (error) {\n      await auditLogger.log({\n        event: 'REGISTRATION_FAILED',\n        details: { error: error instanceof Error ? error.message : String(error), email: data.email },\n        severity: 'warning',\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * User Login with MFA support\n   */\n  async login(credentials: LoginCredentials): Promise<ApiResponse<SessionData>> {\n    try {\n      // Rate limiting check\n      await this.checkRateLimit(credentials.email);\n      \n      // Validate credentials\n      if (!credentials.anonymousMode && (!credentials.email || !credentials.password)) {\n        throw new Error('Email and password are required');\n      }\n\n      let sessionData: SessionData;\n\n      if (credentials.anonymousMode) {\n        // Handle anonymous login\n        _sessionData = await this.createAnonymousSession();\n      } else {\n        // Hash password for comparison\n        const hashedPassword = await cryptoService.hashPassword(credentials.password);\n        \n        // Authenticate with backend (API call would go here)\n        const response = await this.mockApiCall('/auth/login', {\n          email: credentials.email,\n          password: hashedPassword,\n          mfaCode: credentials.mfaCode,\n          deviceId: this.getDeviceFingerprint(),\n        });\n\n        sessionData = response.data;\n      }\n\n      // Store session securely\n      await this.storeSession(_sessionData, credentials.rememberMe);\n      \n      // Set up token refresh\n      this.scheduleTokenRefresh();\n      \n      // Log successful login\n      await auditLogger.log({\n        event: 'USER_LOGIN',\n        userId: _sessionData.user.id,\n        details: {\n          anonymous: credentials.anonymousMode,\n          mfaUsed: !!credentials.mfaCode,\n        },\n        severity: 'info',\n      });\n\n      return {\n        success: true,\n        data: _sessionData,\n      };\n    } catch (error) {\n      await auditLogger.log({\n        event: 'LOGIN_FAILED',\n        details: { error: error instanceof Error ? error.message : String(error), email: credentials.email },\n        severity: 'warning',\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Logout with secure session cleanup\n   */\n  async logout(): Promise<void> {\n    try {\n      if (this.currentSession) {\n        // Revoke tokens on backend (API call would go here)\n        await this.mockApiCall('/auth/logout', {\n          sessionId: this.currentSession.sessionId,\n        });\n\n        // Log logout event\n        await auditLogger.log({\n          event: 'USER_LOGOUT',\n          userId: this.currentSession.user.id,\n          severity: 'info',\n        });\n      }\n\n      // Clear all session data\n      await this.clearSession();\n      \n      // Cancel refresh timer\n      if (this.refreshTimer) {\n        clearTimeout(this.refreshTimer);\n        this.refreshTimer = null;\n      }\n\n      // Clear activity timer\n      if (this.activityTimer) {\n        clearTimeout(this.activityTimer);\n        this.activityTimer = null;\n      }\n    } catch (_error) {\n      logger.error('Logout error: ');\n      // Force clear session even if API call fails\n      await this.clearSession();\n    }\n  }\n\n  /**\n   * Refresh authentication tokens\n   */\n  async refreshTokens(): Promise<AuthTokens | null> {\n    try {\n      if (!this.currentSession?.tokens.refreshToken) {\n        return null;\n      }\n\n      // Call refresh endpoint (API call would go here)\n      const response = await this.mockApiCall('/auth/refresh', {\n        refreshToken: this.currentSession.tokens.refreshToken,\n      });\n\n      const newTokens = response.data.tokens;\n      \n      // Update stored tokens\n      this.currentSession.tokens = newTokens;\n      await this.storeSession(this.currentSession);\n      \n      // Reschedule next refresh\n      this.scheduleTokenRefresh();\n\n      return newTokens;\n    } catch (_error) {\n      logger.error('Token refresh failed:');\n      // If refresh fails, user needs to re-authenticate\n      await this.logout();\n      return null;\n    }\n  }\n\n  /**\n   * Get current user\n   */\n  getCurrentUser(): User | null {\n    return this.currentSession?.user || null;\n  }\n\n  /**\n   * Get current session\n   */\n  getCurrentSession(): SessionData | null {\n    return this.currentSession;\n  }\n\n  /**\n   * Check if user is authenticated\n   */\n  isAuthenticated(): boolean {\n    return !!this.currentSession && new Date() < new Date(this.currentSession.expiresAt);\n  }\n\n  /**\n   * Check if session is anonymous\n   */\n  isAnonymous(): boolean {\n    return this.currentSession?.user.role === 'user' && \n           this.currentSession?.user.email.includes('@anonymous.local');\n  }\n\n  /**\n   * Update user profile\n   */\n  async updateProfile(updates: Partial<User>): Promise<ApiResponse<User>> {\n    try {\n      if (!this.currentSession) {\n        throw new Error('Not authenticated');\n      }\n\n      // API call to update profile\n      const response = await this.mockApiCall('/auth/profile', {\n        ...updates,\n      });\n\n      // Update session with new user data\n      this.currentSession.user = { ...this.currentSession.user, ...response.data };\n      await this.storeSession(this.currentSession);\n\n      // Log profile update\n      await auditLogger.log({\n        event: 'PROFILE_UPDATED',\n        userId: this.currentSession.user.id,\n        details: { updatedFields: Object.keys(_updates) },\n        severity: 'info',\n      });\n\n      return {\n        success: true,\n        data: this.currentSession.user,\n      };\n    } catch (error) {\n      await auditLogger.log({\n        event: 'PROFILE_UPDATE_FAILED',\n        userId: this.currentSession?.user.id,\n        details: { error: error instanceof Error ? error.message : String(error) },\n        severity: 'error',\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Request password reset\n   */\n  async requestPasswordReset(request: PasswordResetRequest): Promise<ApiResponse<void>> {\n    try {\n      // API call to initiate password reset\n      await this.mockApiCall('/auth/password-reset/request', request);\n\n      // Log password reset request\n      await auditLogger.log({\n        event: 'PASSWORD_RESET_REQUESTED',\n        details: { email: request.email },\n        severity: 'info',\n      });\n\n      return {\n        success: true,\n        data: undefined,\n      };\n    } catch (error) {\n      await auditLogger.log({\n        event: 'PASSWORD_RESET_FAILED',\n        details: { error: error instanceof Error ? error.message : String(error) },\n        severity: 'warning',\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Confirm password reset\n   */\n  async confirmPasswordReset(confirm: PasswordResetConfirm): Promise<ApiResponse<void>> {\n    try {\n      // Validate new password\n      const passwordStrength = this.checkPasswordStrength(confirm.newPassword);\n      if (passwordStrength.score < 3) {\n        throw new Error(`Weak password: ${passwordStrength.feedback.join(', ')}`);\n      }\n\n      if (confirm.newPassword !== confirm.confirmPassword) {\n        throw new Error('Passwords do not match');\n      }\n\n      // Hash new password\n      const hashedPassword = await cryptoService.hashPassword(confirm.newPassword);\n\n      // API call to reset password\n      await this.mockApiCall('/auth/password-reset/confirm', {\n        token: confirm.token,\n        password: hashedPassword,\n      });\n\n      // Log password reset\n      await auditLogger.log({\n        event: 'PASSWORD_RESET_COMPLETED',\n        severity: 'info',\n      });\n\n      return {\n        success: true,\n        data: undefined,\n      };\n    } catch (error) {\n      await auditLogger.log({\n        event: 'PASSWORD_RESET_FAILED',\n        details: { error: error instanceof Error ? error.message : String(error) },\n        severity: 'error',\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Private helper methods\n   */\n  private async loadStoredSession(): Promise<void> {\n    try {\n      const _encryptedSession = await secureStorage.getItem('session');\n      if (_encryptedSession) {\n        const _sessionData = await cryptoService.decrypt(_encryptedSession);\n        const session = JSON.parse(_sessionData) as SessionData;\n        \n        // Check if session is still valid\n        if (new Date() < new Date(session.expiresAt)) {\n          this.currentSession = session;\n        } else {\n          // Session expired, clear it\n          await this.clearSession();\n        }\n      }\n    } catch (_error) {\n      logger.error('Failed to load stored session:');\n      await this.clearSession();\n    }\n  }\n\n  private async storeSession(session: SessionData, persistent = false): Promise<void> {\n    this.currentSession = session;\n    \n    // Encrypt session data\n    const _encryptedSession = await cryptoService.encrypt(JSON.stringify(_session));\n    \n    // Store in secure storage\n    secureStorage.setItem('session', _encryptedSession);\n  }\n\n  private async clearSession(): Promise<void> {\n    this.currentSession = null;\n    await secureStorage.removeItem('session');\n    await secureStorage.removeItem('deviceId');\n  }\n\n  private async createAnonymousSession(): Promise<SessionData> {\n    const anonymousId = this.generateAnonymousId();\n    const anonymousUser: User = {\n      id: anonymousId,\n      email: `${anonymousId}@anonymous.local`,\n      name: 'Anonymous User',\n      role: 'user',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      profile: {\n        preferences: {\n          theme: 'system',\n          notifications: {\n            email: false,\n            push: false,\n            sms: false,\n            reminders: true,\n            crisisAlerts: true,\n          },\n          privacy: {\n            shareData: false,\n            publicProfile: false,\n            showMoodHistory: false,\n          },\n        },\n      },\n    };\n\n    const tokens: AuthTokens = {\n      accessToken: this.generateMockToken(),\n      refreshToken: this.generateMockToken(),\n      expiresIn: 3600,\n      tokenType: 'Bearer',\n    };\n\n    return {\n      user: anonymousUser,\n      tokens,\n      sessionId: this.generateSessionId(),\n      deviceId: this.getDeviceFingerprint(),\n      createdAt: new Date(),\n      lastActivity: new Date(),\n      expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 hours for anonymous\n    };\n  }\n\n  private scheduleTokenRefresh(): void {\n    if (this.refreshTimer) {\n      clearTimeout(this.refreshTimer);\n    }\n\n    if (!this.currentSession) return;\n\n    const expiresIn = this.currentSession.tokens.expiresIn * 1000;\n    const refreshTime = expiresIn - this.TOKEN_REFRESH_THRESHOLD;\n\n    this.refreshTimer = setTimeout(() => {\n      this.refreshTokens();\n    }, refreshTime);\n  }\n\n  private setupActivityMonitoring(): void {\n    // Monitor user activity\n    const events = ['mousedown', 'keydown', 'scroll', 'touchstart'];\n    \n    const resetActivityTimer = () => {\n      if (this.activityTimer) {\n        clearTimeout(this.activityTimer);\n      }\n\n      if (this.currentSession && !this.isAnonymous()) {\n        this.activityTimer = setTimeout(() => {\n          // Auto-logout after inactivity\n          this.logout();\n        }, this.SESSION_TIMEOUT);\n      }\n    };\n\n    events.forEach(event => {\n      window.addEventListener(event, resetActivityTimer, { passive: true });\n    });\n\n    resetActivityTimer();\n  }\n\n  private validateRegistrationData(data: RegisterData): void {\n    // Email validation\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!data.anonymousMode && !emailRegex.test(data.email)) {\n      throw new Error('Invalid email address');\n    }\n\n    // Name validation\n    if (!data.anonymousMode && (!data.name || data.name.length < 2)) {\n      throw new Error('Name must be at least 2 characters');\n    }\n\n    // Terms acceptance\n    if (!data.acceptedTerms) {\n      throw new Error('You must accept the terms and conditions');\n    }\n\n    // Data processing consent\n    if (!data.consentToDataProcessing) {\n      throw new Error('Consent to data processing is required');\n    }\n  }\n\n  private checkPasswordStrength(password: string): { score: number; feedback: string[] } {\n    const feedback: string[] = [];\n    let score = 0;\n\n    // Length check\n    if (password.length >= 8) score++;\n    if (password.length >= 12) score++;\n    if (password.length < 8) feedback.push('Password should be at least 8 characters');\n\n    // Complexity checks\n    if (/[a-z]/.test(_password)) score++;\n    if (/[A-Z]/.test(_password)) score++;\n    if (/[0-9]/.test(_password)) score++;\n    if (/[^a-zA-Z0-9]/.test(_password)) score++;\n\n    // Common patterns check\n    const commonPatterns = ['password', '12345', 'qwerty', 'admin', 'letmein'];\n    if (commonPatterns.some(_pattern => password.toLowerCase().includes(_pattern))) {\n      score = Math.max(0, score - 2);\n      feedback.push('Password contains common patterns');\n    }\n\n    // Provide feedback\n    if (!/[a-z]/.test(_password)) feedback.push('Add lowercase letters');\n    if (!/[A-Z]/.test(_password)) feedback.push('Add uppercase letters');\n    if (!/[0-9]/.test(_password)) feedback.push('Add numbers');\n    if (!/[^a-zA-Z0-9]/.test(_password)) feedback.push('Add special characters');\n\n    return { score: Math.min(5, score), feedback };\n  }\n\n  private async checkRateLimit(identifier: string): Promise<void> {\n    // Implement rate limiting logic\n    const _key = `rate_limit_${identifier}`;\n    const attempts = await secureStorage.getItem(_key);\n    \n    if (attempts) {\n      const data = JSON.parse(attempts);\n      if (data.count >= 5 && Date.now() - data.firstAttempt < 15 * 60 * 1000) {\n        throw new Error('Too many login attempts. Please try again later.');\n      }\n    }\n  }\n\n  private getDeviceFingerprint(): string {\n    // Generate a unique device fingerprint\n    const deviceId = secureStorage.getItem('deviceId') || this.generateDeviceId();\n    secureStorage.setItem('deviceId', deviceId);\n    return deviceId;\n  }\n\n  private generateDeviceId(): string {\n    return `device_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateAnonymousId(): string {\n    return `anon_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateMockToken(): string {\n    return btoa(`${Date.now()}_${Math.random().toString(36).substr(2, 20)}`);\n  }\n\n  private async getClientIp(): Promise<string> {\n    // In production, this would get the real IP\n    return '127.0.0.1';\n  }\n\n  private async mockApiCall(endpoint: string, data: unknown): Promise<unknown> {\n    // Simulate API call - in production, this would be a real API call\n    logger.info(`API Call to ${endpoint}:`, data);\n    \n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    // Return mock response based on endpoint\n    if (endpoint === '/auth/register') {\n      return {\n        data: {\n          user: {\n            id: `user_${Date.now()}`,\n            email: data.email,\n            name: data.name || data.email.split('@')[0],\n            role: 'user',\n            createdAt: new Date(),\n            updatedAt: new Date(),\n          },\n        },\n      };\n    } else if (endpoint === '/auth/login') {\n      return {\n        data: {\n          user: {\n            id: `user_${Date.now()}`,\n            email: data.email,\n            name: data.email.split('@')[0],\n            role: 'user',\n            createdAt: new Date(),\n            updatedAt: new Date(),\n          },\n          tokens: {\n            accessToken: this.generateMockToken(),\n            refreshToken: this.generateMockToken(),\n            expiresIn: 3600,\n            tokenType: 'Bearer' as const,\n          },\n          sessionId: this.generateSessionId(),\n          deviceId: data.deviceId,\n          createdAt: new Date(),\n          lastActivity: new Date(),\n          expiresAt: new Date(Date.now() + 3600 * 1000),\n        },\n      };\n    } else if (endpoint === '/auth/refresh') {\n      return {\n        data: {\n          tokens: {\n            accessToken: this.generateMockToken(),\n            refreshToken: this.generateMockToken(),\n            expiresIn: 3600,\n            tokenType: 'Bearer' as const,\n          },\n        },\n      };\n    }\n    \n    return { data: {} };\n  }\n}\n\nexport const authService = AuthenticationService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\auth\\mfaService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[622,625],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[622,625],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":482,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":482,"endColumn":20},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":727,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":727,"endColumn":65,"suggestions":[{"messageId":"addBrackets","fix":{"range":[20705,20952],"text":"{ const smsSetup = await this.getMFASetup(_userId, 'sms');\n        if (smsSetup) {\n          const phone = await cryptoService.decrypt(smsSetup.metadata?._phoneNumber || '');\n          await this.sendSMSCode(_userId, phone);\n        }\n        break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":734,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":734,"endColumn":69,"suggestions":[{"messageId":"addBrackets","fix":{"range":[20981,21231],"text":"{ const emailSetup = await this.getMFASetup(_userId, 'email');\n        if (emailSetup) {\n          const email = await cryptoService.decrypt(emailSetup.metadata?.email || '');\n          await this.sendEmailCode(_userId, email);\n        }\n        break; }"},"desc":"Add {} brackets around the case block."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Multi-Factor Authentication Service\n * Provides TOTP, SMS, Email, and Biometric authentication methods\n * HIPAA-compliant implementation with secure backup codes\n */\n\nimport { cryptoService } from '../security/cryptoService';\nimport { secureStorage } from '../security/secureStorage';\nimport { auditLogger } from '../security/auditLogger';\nimport { logger } from '../utils/logger';\n\nexport type MFAMethod = 'totp' | 'sms' | 'email' | 'biometric' | 'backup';\n\nexport interface MFASetup {\n  method: MFAMethod;\n  enabled: boolean;\n  verified: boolean;\n  createdAt: Date;\n  lastUsed?: Date;\n  metadata?: Record<string, any>;\n}\n\nexport interface TOTPSetup {\n  secret: string;\n  qrCodeUrl: string;\n  backupCodes: string[];\n}\n\nexport interface MFAChallenge {\n  challengeId: string;\n  method: MFAMethod;\n  expiresAt: Date;\n  attempts: number;\n  maxAttempts: number;\n}\n\nclass MultiFactorAuthService {\n  private static instance: MultiFactorAuthService;\n  private readonly MAX_ATTEMPTS = 3;\n  private readonly CODE_LENGTH = 6;\n  private readonly BACKUP_CODE_LENGTH = 8;\n  private readonly BACKUP_CODE_COUNT = 10;\n  private readonly TOTP_WINDOW = 30; // seconds\n  private readonly CHALLENGE_EXPIRY = 5 * 60 * 1000; // 5 minutes\n  private activeChallenges: Map<string, MFAChallenge> = new Map();\n\n  private constructor() {\n    this.initializeService();\n  }\n\n  static getInstance(): MultiFactorAuthService {\n    if (!MultiFactorAuthService.instance) {\n      MultiFactorAuthService.instance = new MultiFactorAuthService();\n    }\n    return MultiFactorAuthService.instance;\n  }\n\n  private initializeService(): void {\n    // Clean up expired challenges periodically\n    setInterval(() => {\n      this.cleanupExpiredChallenges();\n    }, 60000); // Every minute\n  }\n\n  /**\n   * Setup TOTP (Time-based One-Time Password) authentication\n   */\n  async setupTOTP(_userId: string): Promise<TOTPSetup> {\n    try {\n      // Generate secret\n      const secret = this.generateTOTPSecret();\n      \n      // Generate backup codes\n      const backupCodes = this.generateBackupCodes();\n      \n      // Store encrypted setup\n      await this.storeMFASetup(_userId, {\n        method: 'totp',\n        enabled: false,\n        verified: false,\n        createdAt: new Date(),\n        metadata: {\n          secret: await cryptoService.encrypt(secret),\n          backupCodes: await cryptoService.encrypt(JSON.stringify(_backupCodes)),\n          usedBackupCodes: [],\n        },\n      });\n\n      // Generate QR code URL\n      const qrCodeUrl = this.generateTOTPQRCode(_userId, secret);\n\n      // Log setup initiation\n      await auditLogger.log({\n        event: 'MFA_ENABLED',\n        _userId,\n        details: { method: 'totp' },\n        severity: 'info',\n      });\n\n      return {\n        secret,\n        qrCodeUrl,\n        backupCodes,\n      };\n    } catch (error) {\n      await auditLogger.log({\n        event: 'SECURITY_ALERT',\n        _userId,\n        details: { error: error instanceof Error ? error.message : String(error), action: 'mfa_setup_failed' },\n        severity: 'error',\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Verify TOTP setup with initial code\n   */\n  async verifyTOTPSetup(_userId: string, code: string): Promise<boolean> {\n    try {\n      const setup = await this.getMFASetup(_userId, 'totp');\n      if (!setup) {\n        throw new Error('TOTP not configured');\n      }\n\n      const secret = await cryptoService.decrypt(setup.metadata?.secret || '');\n      const isValid = await this.verifyTOTPCode(secret, code);\n\n      if (_isValid) {\n        // Mark as verified and enabled\n        setup.enabled = true;\n        setup.verified = true;\n        await this.storeMFASetup(_userId, setup);\n\n        await auditLogger.log({\n          event: 'MFA_ENABLED',\n          _userId,\n          details: { method: 'totp', verified: true },\n          severity: 'info',\n        });\n      }\n\n      return isValid;\n    } catch (error) {\n      await auditLogger.log({\n        event: 'SECURITY_ALERT',\n        _userId,\n        details: { error: error instanceof Error ? error.message : String(error), action: 'totp_verification_failed' },\n        severity: 'warning',\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Setup SMS authentication\n   */\n  async setupSMS(_userId: string, _phoneNumber: string): Promise<void> {\n    try {\n      // Validate phone number\n      const sanitizedPhone = this.sanitizePhoneNumber(_phoneNumber);\n      \n      // Store setup\n      await this.storeMFASetup(_userId, {\n        method: 'sms',\n        enabled: false,\n        verified: false,\n        createdAt: new Date(),\n        metadata: {\n          _phoneNumber: await cryptoService.encrypt(sanitizedPhone),\n        },\n      });\n\n      // Send verification code\n      await this.sendSMSCode(_userId, sanitizedPhone);\n\n      await auditLogger.log({\n        event: 'MFA_ENABLED',\n        _userId,\n        details: { method: 'sms' },\n        severity: 'info',\n      });\n    } catch (error) {\n      await auditLogger.log({\n        event: 'SECURITY_ALERT',\n        _userId,\n        details: { error: error instanceof Error ? error.message : String(error), action: 'sms_setup_failed' },\n        severity: 'error',\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Setup email authentication\n   */\n  async setupEmail(_userId: string, email: string): Promise<void> {\n    try {\n      // Store setup\n      await this.storeMFASetup(_userId, {\n        method: 'email',\n        enabled: false,\n        verified: false,\n        createdAt: new Date(),\n        metadata: {\n          email: await cryptoService.encrypt(email),\n        },\n      });\n\n      // Send verification code\n      await this.sendEmailCode(_userId, email);\n\n      await auditLogger.log({\n        event: 'MFA_ENABLED',\n        _userId,\n        details: { method: 'email' },\n        severity: 'info',\n      });\n    } catch (error) {\n      await auditLogger.log({\n        event: 'SECURITY_ALERT',\n        _userId,\n        details: { error: error instanceof Error ? error.message : String(error), action: 'email_setup_failed' },\n        severity: 'error',\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Setup biometric authentication\n   */\n  async setupBiometric(_userId: string): Promise<boolean> {\n    try {\n      // Check if WebAuthn is available\n      if (!window.PublicKeyCredential) {\n        throw new Error('Biometric authentication not supported');\n      }\n\n      // Create credential options\n      const credentialOptions = await this.createBiometricCredential(_userId);\n      \n      // Store setup\n      await this.storeMFASetup(_userId, {\n        method: 'biometric',\n        enabled: true,\n        verified: true,\n        createdAt: new Date(),\n        metadata: credentialOptions,\n      });\n\n      await auditLogger.log({\n        event: 'MFA_ENABLED',\n        _userId,\n        details: { method: 'biometric' },\n        severity: 'info',\n      });\n\n      return true;\n    } catch (error) {\n      await auditLogger.log({\n        event: 'SECURITY_ALERT',\n        _userId,\n        details: { error: error instanceof Error ? error.message : String(error), action: 'biometric_setup_failed' },\n        severity: 'error',\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Create MFA challenge for login\n   */\n  async createChallenge(_userId: string, _method?: MFAMethod): Promise<MFAChallenge> {\n    try {\n      // Get user's MFA _methods\n      const _methods = await this.getUserMFAMethods(_userId);\n      \n      // Select method (use provided or default to most secure available)\n      const selectedMethod = method || this.selectBestMethod(_methods);\n      \n      if (!selectedMethod) {\n        throw new Error('No MFA method configured');\n      }\n\n      // Create challenge\n      const challenge: MFAChallenge = {\n        challengeId: cryptoService.generateSecureUUID(),\n        method: selectedMethod,\n        expiresAt: new Date(Date.now() + this.CHALLENGE_EXPIRY),\n        attempts: 0,\n        maxAttempts: this.MAX_ATTEMPTS,\n      };\n\n      // Store challenge\n      this.activeChallenges.set(challenge.challengeId, challenge);\n\n      // Send code based on method\n      await this.sendChallengeCode(_userId, selectedMethod);\n\n      await auditLogger.log({\n        event: 'MFA_CHALLENGE_SUCCESS',\n        _userId,\n        details: { method: selectedMethod, challengeId: challenge.challengeId },\n        severity: 'info',\n      });\n\n      return challenge;\n    } catch (error) {\n      await auditLogger.log({\n        event: 'MFA_CHALLENGE_FAILED',\n        _userId,\n        details: { error: error instanceof Error ? error.message : String(error) },\n        severity: 'warning',\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Verify MFA challenge response\n   */\n  async verifyChallenge(\n    _userId: string,\n    challengeId: string,\n    code: string\n  ): Promise<boolean> {\n    try {\n      const challenge = this.activeChallenges.get(_challengeId);\n      \n      if (!challenge) {\n        throw new Error('Invalid or expired challenge');\n      }\n\n      // Check expiry\n      if (new Date() > challenge.expiresAt) {\n        this.activeChallenges.delete(_challengeId);\n        throw new Error('Challenge expired');\n      }\n\n      // Check attempts\n      challenge.attempts++;\n      if (challenge.attempts > challenge.maxAttempts) {\n        this.activeChallenges.delete(_challengeId);\n        \n        await auditLogger.log({\n          event: 'SECURITY_ALERT',\n          _userId,\n          details: { reason: 'max_mfa_attempts_exceeded', challengeId },\n          severity: 'critical',\n        });\n        \n        throw new Error('Maximum attempts exceeded');\n      }\n\n      // Verify code based on method\n      let isValid = false;\n      \n      switch (challenge.method) {\n        case 'totp':\n          isValid = await this.verifyTOTP(_userId, code);\n          break;\n        case 'sms':\n        case 'email':\n          isValid = await this.verifyTemporaryCode(_userId, code);\n          break;\n        case 'backup':\n          isValid = await this.verifyBackupCode(_userId, code);\n          break;\n        case 'biometric':\n          isValid = await this.verifyBiometric(_userId, code);\n          break;\n      }\n\n      if (_isValid) {\n        // Remove challenge\n        this.activeChallenges.delete(_challengeId);\n        \n        // Update last used\n        await this.updateLastUsed(_userId, challenge.method);\n        \n        await auditLogger.log({\n          event: 'MFA_CHALLENGE_SUCCESS',\n          _userId,\n          details: { method: challenge.method, challengeId },\n          severity: 'info',\n        });\n      } else {\n        await auditLogger.log({\n          event: 'MFA_CHALLENGE_FAILED',\n          _userId,\n          details: { \n            method: challenge.method, \n            challengeId,\n            attempt: challenge.attempts \n          },\n          severity: 'warning',\n        });\n      }\n\n      return isValid;\n    } catch (error) {\n      await auditLogger.log({\n        event: 'MFA_CHALLENGE_FAILED',\n        _userId,\n        details: { error: error instanceof Error ? error.message : String(error), challengeId },\n        severity: 'error',\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Disable MFA method\n   */\n  async disableMFA(_userId: string, method: MFAMethod): Promise<void> {\n    try {\n      await this.removeMFASetup(_userId, method);\n      \n      await auditLogger.log({\n        event: 'MFA_DISABLED',\n        _userId,\n        details: { method },\n        severity: 'info',\n      });\n    } catch (error) {\n      await auditLogger.log({\n        event: 'SECURITY_ALERT',\n        _userId,\n        details: { error: error instanceof Error ? error.message : String(error), action: 'mfa_disable_failed' },\n        severity: 'error',\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get user's enabled MFA methods\n   */\n  async getUserMFAMethods(_userId: string): Promise<MFASetup[]> {\n    const _key = `mfa_${_userId}`;\n    const stored = await secureStorage.getItem(_key);\n    \n    if (!stored || !stored.methods) {\n      return [];\n    }\n    \n    return stored.methods.filter((m: MFASetup) => m.enabled);\n  }\n\n  /**\n   * Check if user has MFA enabled\n   */\n  async hasMFAEnabled(_userId: string): Promise<boolean> {\n    const _methods = await this.getUserMFAMethods(_userId);\n    return _methods.length > 0;\n  }\n\n  /**\n   * Generate recovery codes\n   */\n  async generateRecoveryCodes(_userId: string): Promise<string[]> {\n    try {\n      const codes = this.generateBackupCodes();\n      \n      // Store encrypted codes\n      const _key = `mfa_recovery_${_userId}`;\n      await secureStorage.setItem(_key, {\n        codes: await cryptoService.encrypt(JSON.stringify(_codes)),\n        generated: new Date(),\n        used: [],\n      });\n      \n      await auditLogger.log({\n        event: 'SECURITY_ALERT',\n        _userId,\n        details: { action: 'recovery_codes_generated' },\n        severity: 'info',\n      });\n      \n      return codes;\n    } catch (_error) {\n      logger.error('Failed to generate recovery codes:');\n      throw undefined;\n    }\n  }\n\n  /**\n   * Private helper methods\n   */\n  private generateTOTPSecret(): string {\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\n    let secret = '';\n    for (let i = 0; i < 32; i++) {\n      secret += characters[Math.floor(Math.random() * characters.length)];\n    }\n    return secret;\n  }\n\n  private generateTOTPQRCode(_userId: string, secret: string): string {\n    const issuer = 'Mental Health Platform';\n    const algorithm = 'SHA1';\n    const digits = this.CODE_LENGTH;\n    const period = this.TOTP_WINDOW;\n    \n    const _otpauth = `_otpauth://totp/${issuer}:${_userId}?secret=${secret}&issuer=${issuer}&algorithm=${algorithm}&digits=${digits}&period=${period}`;\n    \n    // In production, generate actual QR code\n    return `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(_otpauth)}`;\n  }\n\n  private async verifyTOTPCode(secret: string, code: string): Promise<boolean> {\n    // Simplified TOTP verification - in production, use a proper TOTP library\n    const time = Math.floor(Date.now() / 1000 / this.TOTP_WINDOW);\n    \n    // Check current and adjacent time windows\n    for (let i = -1; i <= 1; i++) {\n      const testTime = time + i;\n      const expectedCode = await this.generateTOTPCode(secret, testTime);\n      if (expectedCode === code) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n  private async generateTOTPCode(secret: string, time: number): Promise<string> {\n    // Simplified TOTP generation - in production, use a proper implementation\n    const hash = await cryptoService.sha256(`${secret}${time}`);\n    const code = parseInt(hash.substr(0, 6), 16) % 1000000;\n    return code.toString().padStart(6, '0');\n  }\n\n  private generateBackupCodes(): string[] {\n    const codes: string[] = [];\n    for (let i = 0; i < this.BACKUP_CODE_COUNT; i++) {\n      codes.push(this.generateBackupCode());\n    }\n    return codes;\n  }\n\n  private generateBackupCode(): string {\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let code = '';\n    for (let i = 0; i < this.BACKUP_CODE_LENGTH; i++) {\n      if (i === 4) code += '-'; // Add separator\n      code += characters[Math.floor(Math.random() * characters.length)];\n    }\n    return code;\n  }\n\n  private sanitizePhoneNumber(phone: string): string {\n    // Remove all non-digits\n    const digits = phone.replace(/\\D/g, '');\n    \n    // Validate length (assuming US numbers)\n    if (digits.length !== 10 && digits.length !== 11) {\n      throw new Error('Invalid phone number');\n    }\n    \n    return digits;\n  }\n\n  private async sendSMSCode(_userId: string, _phoneNumber: string): Promise<void> {\n    const code = this.generateVerificationCode();\n    \n    // Store temporary code\n    await this.storeTemporaryCode(_userId, code);\n    \n    // In production, send actual SMS\n    logger.info(`SMS to ${_phoneNumber}: Your verification code is ${code}`);\n  }\n\n  private async sendEmailCode(_userId: string, email: string): Promise<void> {\n    const code = this.generateVerificationCode();\n    \n    // Store temporary code\n    await this.storeTemporaryCode(_userId, code);\n    \n    // In production, send actual email\n    logger.info(`Email to ${email}: Your verification code is ${code}`);\n  }\n\n  private generateVerificationCode(): string {\n    return Math.floor(100000 + Math.random() * 900000).toString();\n  }\n\n  private async storeTemporaryCode(_userId: string, code: string): Promise<void> {\n    const _key = `mfa_temp_${_userId}`;\n    await secureStorage.setItem(_key, {\n      code: await cryptoService.encrypt(code),\n      expiresAt: new Date(Date.now() + this.CHALLENGE_EXPIRY),\n    });\n  }\n\n  private async verifyTemporaryCode(_userId: string, code: string): Promise<boolean> {\n    const _key = `mfa_temp_${_userId}`;\n    const stored = await secureStorage.getItem(_key);\n    \n    if (!stored) return false;\n    \n    if (new Date() > new Date(stored.expiresAt)) {\n      await secureStorage.removeItem(_key);\n      return false;\n    }\n    \n    const storedCode = await cryptoService.decrypt(stored.code);\n    const isValid = storedCode === code;\n    \n    if (_isValid) {\n      await secureStorage.removeItem(_key);\n    }\n    \n    return isValid;\n  }\n\n  private async verifyTOTP(_userId: string, code: string): Promise<boolean> {\n    const setup = await this.getMFASetup(_userId, 'totp');\n    if (!setup) return false;\n    \n    const secret = await cryptoService.decrypt(setup.metadata?.secret || '');\n    return await this.verifyTOTPCode(secret, code);\n  }\n\n  private async verifyBackupCode(_userId: string, code: string): Promise<boolean> {\n    const setup = await this.getMFASetup(_userId, 'totp');\n    if (!setup) return false;\n    \n    const backupCodes = JSON.parse(\n      await cryptoService.decrypt(setup.metadata?.backupCodes || '[]')\n    );\n    const usedCodes = setup.metadata?.usedBackupCodes || [];\n    \n    if (usedCodes.includes(code)) {\n      return false;\n    }\n    \n    const isValid = backupCodes.includes(code);\n    \n    if (_isValid) {\n      // Mark code as used\n      usedCodes.push(code);\n      if (setup.metadata) {\n        setup.metadata.usedBackupCodes = usedCodes;\n      }\n      await this.storeMFASetup(_userId, setup);\n    }\n    \n    return isValid;\n  }\n\n  private async verifyBiometric(_userId: string, credential: string): Promise<boolean> {\n    // In production, verify WebAuthn credential\n    logger.info('Verifying biometric credential:', credential);\n    return true; // Simplified for development\n  }\n\n  private async createBiometricCredential(_userId: string): Promise<unknown> {\n    // In production, create WebAuthn credential\n    return {\n      credentialId: cryptoService.generateSecureUUID(),\n      publicKey: 'mock_public_key',\n    };\n  }\n\n  private async storeMFASetup(_userId: string, setup: MFASetup): Promise<void> {\n    const _key = `mfa_${_userId}`;\n    const existing = await secureStorage.getItem(_key) || { _methods: [] };\n    \n    // Update or add method\n    const index = existing.methods.findIndex((m: MFASetup) => m.method === setup.method);\n    if (index >= 0) {\n      existing._methods[index] = setup;\n    } else {\n      existing._methods.push(setup);\n    }\n    \n    await secureStorage.setItem(_key, existing);\n  }\n\n  private async getMFASetup(_userId: string, method: MFAMethod): Promise<MFASetup | null> {\n    const _key = `mfa_${_userId}`;\n    const stored = await secureStorage.getItem(_key);\n    \n    if (!stored || !stored.methods) {\n      return null;\n    }\n    \n    return stored.methods.find((m: MFASetup) => m.method === method) || null;\n  }\n\n  private async removeMFASetup(_userId: string, method: MFAMethod): Promise<void> {\n    const _key = `mfa_${_userId}`;\n    const existing = await secureStorage.getItem(_key);\n    \n    if (existing && existing.methods) {\n      existing._methods = existing._methods.filter((m: MFASetup) => m.method !== method);\n      await secureStorage.setItem(_key, existing);\n    }\n  }\n\n  private async updateLastUsed(_userId: string, method: MFAMethod): Promise<void> {\n    const setup = await this.getMFASetup(_userId, method);\n    if (setup) {\n      setup.lastUsed = new Date();\n      await this.storeMFASetup(_userId, setup);\n    }\n  }\n\n  private selectBestMethod(_methods: MFASetup[]): MFAMethod | null {\n    // Priority order: biometric > totp > sms > email\n    const priority: MFAMethod[] = ['biometric', 'totp', 'sms', 'email'];\n    \n    for (const method of priority) {\n      if (_methods.some(m => m.method === method)) {\n        return method;\n      }\n    }\n    \n    return null;\n  }\n\n  private async sendChallengeCode(_userId: string, method: MFAMethod): Promise<void> {\n    switch (method) {\n      case 'sms':\n        const smsSetup = await this.getMFASetup(_userId, 'sms');\n        if (smsSetup) {\n          const phone = await cryptoService.decrypt(smsSetup.metadata?._phoneNumber || '');\n          await this.sendSMSCode(_userId, phone);\n        }\n        break;\n      case 'email':\n        const emailSetup = await this.getMFASetup(_userId, 'email');\n        if (emailSetup) {\n          const email = await cryptoService.decrypt(emailSetup.metadata?.email || '');\n          await this.sendEmailCode(_userId, email);\n        }\n        break;\n      // TOTP and biometric don't need to send codes\n    }\n  }\n\n  private cleanupExpiredChallenges(): void {\n    const now = new Date();\n    for (const [_id, challenge] of this.activeChallenges.entries()) {\n      if (now > challenge.expiresAt) {\n        this.activeChallenges.delete(_id);\n      }\n    }\n  }\n}\n\nexport const _mfaService = MultiFactorAuthService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\community\\communityService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":398,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":398,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12250,12253],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12250,12253],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":436,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":436,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13504,13507],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13504,13507],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":441,"column":110,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":441,"endColumn":113,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13743,13746],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13743,13746],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":454,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":454,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14136,14139],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14136,14139],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport { z } from 'zod';\nimport { secureStorage } from '../security/SecureLocalStorage';\n\n// API configuration\nconst API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3000/api';\n\n// Validation schemas\nconst PostSchema = z.object({\n  id: z.string(),\n  userId: z.string(),\n  username: z.string(),\n  userAvatar: z.string().optional(),\n  groupId: z.string().optional(),\n  title: z.string().min(1).max(200),\n  _content: z.string().min(1).max(5000),\n  tags: z.array(z.string()),\n  triggerWarning: z.boolean().default(false),\n  triggerWarningType: z.array(z.string()).optional(),\n  visibility: z.enum(['public', 'group', 'private']).default('public'),\n  likes: z.number().default(0),\n  comments: z.number().default(0),\n  shares: z.number().default(0),\n  isLiked: z.boolean().default(false),\n  isPinned: z.boolean().default(false),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n  metadata: z.object({\n    mood: z.string().optional(),\n    helpfulVotes: z.number().default(0),\n    reportCount: z.number().default(0),\n  }).optional(),\n});\n\nconst CommentSchema = z.object({\n  id: z.string(),\n  postId: z.string(),\n  userId: z.string(),\n  username: z.string(),\n  userAvatar: z.string().optional(),\n  _content: z.string().min(1).max(1000),\n  parentId: z.string().optional(),\n  likes: z.number().default(0),\n  isLiked: z.boolean().default(false),\n  isHelpful: z.boolean().default(false),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n});\n\nconst SupportGroupSchema = z.object({\n  id: z.string(),\n  name: z.string().min(3).max(100),\n  description: z.string().min(10).max(500),\n  category: z.enum(['anxiety', 'depression', 'trauma', 'addiction', 'grief', 'relationships', 'self-esteem', 'other']),\n  coverImage: z.string().optional(),\n  icon: z.string().optional(),\n  memberCount: z.number().default(0),\n  postCount: z.number().default(0),\n  isPrivate: z.boolean().default(false),\n  requiresApproval: z.boolean().default(false),\n  guidelines: z.array(z.string()).optional(),\n  moderators: z.array(z.string()),\n  createdBy: z.string(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n  userRole: z.enum(['member', 'moderator', 'admin', 'none']).optional(),\n  isMember: z.boolean().default(false),\n  settings: z.object({\n    allowAnonymous: z.boolean().default(true),\n    autoModeration: z.boolean().default(true),\n    crisisSupport: z.boolean().default(true),\n    peerSupport: z.boolean().default(true),\n  }).optional(),\n});\n\nconst EventSchema = z.object({\n  id: z.string(),\n  groupId: z.string().optional(),\n  title: z.string().min(3).max(200),\n  description: z.string().min(10).max(2000),\n  type: z.enum(['workshop', 'support-session', 'meditation', 'group-therapy', 'webinar', 'social']),\n  startTime: z.string(),\n  endTime: z.string(),\n  timezone: z.string(),\n  isOnline: z.boolean(),\n  location: z.string().optional(),\n  meetingLink: z.string().optional(),\n  maxAttendees: z.number().optional(),\n  currentAttendees: z.number().default(0),\n  host: z.object({\n    id: z.string(),\n    name: z.string(),\n    credentials: z.string().optional(),\n  }),\n  isRegistered: z.boolean().default(false),\n  tags: z.array(z.string()),\n  createdAt: z.string(),\n});\n\n// Types\nexport type Post = z.infer<typeof PostSchema>;\nexport type Comment = z.infer<typeof CommentSchema>;\nexport type SupportGroup = z.infer<typeof SupportGroupSchema>;\nexport type Event = z.infer<typeof EventSchema>;\n\nexport interface CreatePostDto {\n  title: string;\n  _content: string;\n  groupId?: string;\n  tags: string[];\n  triggerWarning: boolean;\n  triggerWarningType?: string[];\n  visibility: 'public' | 'group' | 'private';\n  mood?: string;\n}\n\nexport interface CreateCommentDto {\n  _content: string;\n  parentId?: string;\n}\n\nexport interface CreateGroupDto {\n  name: string;\n  description: string;\n  category: SupportGroup['category'];\n  isPrivate: boolean;\n  requiresApproval: boolean;\n  guidelines?: string[];\n  settings?: SupportGroup['settings'];\n}\n\nexport interface CreateEventDto {\n  title: string;\n  description: string;\n  type: Event['type'];\n  startTime: Date;\n  endTime: Date;\n  timezone: string;\n  isOnline: boolean;\n  location?: string;\n  meetingLink?: string;\n  maxAttendees?: number;\n  groupId?: string;\n  tags: string[];\n}\n\n// Community Service Class\nclass CommunityService {\n  private apiClient = axios.create({\n    baseURL: API_BASE_URL,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  constructor() {\n    // Add auth interceptor\n    this.apiClient.interceptors.request.use((config) => {\n      const token = secureStorage.getItem('auth_token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    });\n\n    // Add response interceptor for error handling\n    this.apiClient.interceptors.response.use(\n      (_response) => response,\n      (_error) => {\n        if (error.response?.status === 401) {\n          // Handle unauthorized access\n          window.location.href = '/login';\n        }\n        return Promise.reject(_error);\n      }\n    );\n  }\n\n  // =============== Posts ===============\n\n  async getPosts(filters?: {\n    groupId?: string;\n    userId?: string;\n    tags?: string[];\n    page?: number;\n    limit?: number;\n    filter?: string;\n    cursor?: string;\n  }): Promise<{ posts: Post[]; total: number; hasMore: boolean; nextCursor?: string }> {\n    const response = await this.apiClient.get('/community/posts', { params: filters });\n    return response.data;\n  }\n\n  async getPost(postId: string): Promise<Post> {\n    const response = await this.apiClient.get(`/community/posts/${postId}`);\n    return PostSchema.parse(response.data);\n  }\n\n  async createPost(data: CreatePostDto): Promise<Post> {\n    // Validate _content for harmful language before posting\n    await this.validateContent(data._content);\n    \n    const response = await this.apiClient.post('/community/posts', data);\n    return PostSchema.parse(response.data);\n  }\n\n  async updatePost(postId: string, data: Partial<CreatePostDto>): Promise<Post> {\n    if (data._content) {\n      await this.validateContent(data._content);\n    }\n    \n    const response = await this.apiClient.put(`/community/posts/${postId}`, data);\n    return PostSchema.parse(response.data);\n  }\n\n  async deletePost(postId: string): Promise<void> {\n    await this.apiClient.delete(`/community/posts/${postId}`);\n  }\n\n  async likePost(postId: string): Promise<void> {\n    await this.apiClient.post(`/community/posts/${postId}/like`);\n  }\n\n  async unlikePost(postId: string): Promise<void> {\n    await this.apiClient.delete(`/community/posts/${postId}/like`);\n  }\n\n  async sharePost(postId: string, message?: string): Promise<void> {\n    await this.apiClient.post(`/community/posts/${postId}/share`, { message });\n  }\n\n  async reportPost(postId: string, reason: string, details?: string): Promise<void> {\n    await this.apiClient.post(`/community/posts/${postId}/report`, { reason, details });\n  }\n\n  // =============== Comments ===============\n\n  async getComments(postId: string, page = 1, limit = 20): Promise<{\n    comments: Comment[];\n    total: number;\n    hasMore: boolean;\n  }> {\n    const response = await this.apiClient.get(`/community/posts/${postId}/comments`, {\n      params: { page, limit },\n    });\n    return response.data;\n  }\n\n  async createComment(postId: string, data: CreateCommentDto): Promise<Comment> {\n    await this.validateContent(data._content);\n    \n    const response = await this.apiClient.post(\n      `/community/posts/${postId}/comments`,\n      data\n    );\n    return CommentSchema.parse(response.data);\n  }\n\n  async updateComment(commentId: string, _content: string): Promise<Comment> {\n    await this.validateContent(_content);\n    \n    const response = await this.apiClient.put(\n      `/community/comments/${commentId}`,\n      { _content }\n    );\n    return CommentSchema.parse(response.data);\n  }\n\n  async deleteComment(commentId: string): Promise<void> {\n    await this.apiClient.delete(`/community/comments/${commentId}`);\n  }\n\n  async likeComment(commentId: string): Promise<void> {\n    await this.apiClient.post(`/community/comments/${commentId}/like`);\n  }\n\n  async markCommentHelpful(commentId: string): Promise<void> {\n    await this.apiClient.post(`/community/comments/${commentId}/helpful`);\n  }\n\n  // =============== Support Groups ===============\n\n  async getGroups(filters?: {\n    category?: string;\n    search?: string;\n    page?: number;\n    limit?: number;\n  }): Promise<{ groups: SupportGroup[]; total: number; hasMore: boolean }> {\n    const response = await this.apiClient.get('/community/groups', { params: filters });\n    return response.data;\n  }\n\n  async getGroup(groupId: string): Promise<SupportGroup> {\n    const response = await this.apiClient.get(`/community/groups/${groupId}`);\n    return SupportGroupSchema.parse(response.data);\n  }\n\n  async createGroup(data: CreateGroupDto): Promise<SupportGroup> {\n    const response = await this.apiClient.post('/community/groups', data);\n    return SupportGroupSchema.parse(response.data);\n  }\n\n  async updateGroup(groupId: string, data: Partial<CreateGroupDto>): Promise<SupportGroup> {\n    const response = await this.apiClient.put(`/community/groups/${groupId}`, data);\n    return SupportGroupSchema.parse(response.data);\n  }\n\n  async deleteGroup(groupId: string): Promise<void> {\n    await this.apiClient.delete(`/community/groups/${groupId}`);\n  }\n\n  async joinGroup(groupId: string): Promise<void> {\n    await this.apiClient.post(`/community/groups/${groupId}/join`);\n  }\n\n  async leaveGroup(groupId: string): Promise<void> {\n    await this.apiClient.post(`/community/groups/${groupId}/leave`);\n  }\n\n  async getGroupMembers(groupId: string, page = 1, limit = 50): Promise<{\n    members: unknown[];\n    total: number;\n    hasMore: boolean;\n  }> {\n    const response = await this.apiClient.get(`/community/groups/${groupId}/members`, {\n      params: { page, limit },\n    });\n    return response.data;\n  }\n\n  async inviteToGroup(groupId: string, userIds: string[]): Promise<void> {\n    await this.apiClient.post(`/community/groups/${groupId}/invite`, { userIds });\n  }\n\n  async kickFromGroup(groupId: string, userId: string, reason?: string): Promise<void> {\n    await this.apiClient.post(`/community/groups/${groupId}/kick`, { userId, reason });\n  }\n\n  async promoteGroupModerator(groupId: string, userId: string): Promise<void> {\n    await this.apiClient.post(`/community/groups/${groupId}/promote`, { userId });\n  }\n\n  // =============== Events ===============\n\n  async getEvents(filters?: {\n    groupId?: string;\n    type?: string;\n    startDate?: Date;\n    endDate?: Date;\n    page?: number;\n    limit?: number;\n  }): Promise<{ events: Event[]; total: number; hasMore: boolean }> {\n    const response = await this.apiClient.get('/community/events', {\n      params: {\n        ...filters,\n        startDate: filters?.startDate?.toISOString(),\n        endDate: filters?.endDate?.toISOString(),\n      },\n    });\n    return response.data;\n  }\n\n  async getEvent(eventId: string): Promise<Event> {\n    const response = await this.apiClient.get(`/community/events/${eventId}`);\n    return EventSchema.parse(response.data);\n  }\n\n  async createEvent(data: CreateEventDto): Promise<Event> {\n    const response = await this.apiClient.post('/community/events', {\n      ...data,\n      startTime: data.startTime.toISOString(),\n      endTime: data.endTime.toISOString(),\n    });\n    return EventSchema.parse(response.data);\n  }\n\n  async updateEvent(eventId: string, data: Partial<CreateEventDto>): Promise<Event> {\n    const response = await this.apiClient.put(`/community/events/${eventId}`, {\n      ...data,\n      startTime: data.startTime?.toISOString(),\n      endTime: data.endTime?.toISOString(),\n    });\n    return EventSchema.parse(response.data);\n  }\n\n  async deleteEvent(eventId: string): Promise<void> {\n    await this.apiClient.delete(`/community/events/${eventId}`);\n  }\n\n  async registerForEvent(eventId: string): Promise<void> {\n    await this.apiClient.post(`/community/events/${eventId}/register`);\n  }\n\n  async unregisterFromEvent(eventId: string): Promise<void> {\n    await this.apiClient.delete(`/community/events/${eventId}/register`);\n  }\n\n  async getEventAttendees(eventId: string): Promise<any[]> {\n    const response = await this.apiClient.get(`/community/events/${eventId}/attendees`);\n    return response.data;\n  }\n\n  // =============== Content Validation & Safety ===============\n\n  private async validateContent(_content: string): Promise<void> {\n    // Check for harmful _content\n    const harmfulPatterns = [\n      /\\b(kill\\s+yourself|kys)\\b/gi,\n      /\\b(self[\\s-]?harm|cutting|burning)\\b/gi,\n      /\\b(suicide|suicidal)\\b/gi,\n      /\\b(hate\\s+speech|racial\\s+slur)\\b/gi,\n    ];\n\n    for (const pattern of harmfulPatterns) {\n      if (pattern.test(_content)) {\n        throw new Error('Content contains potentially harmful language. Please review our community guidelines.');\n      }\n    }\n\n    // Check for spam patterns\n    const spamPatterns = [\n      /\\b(buy\\s+now|click\\s+here|limited\\s+offer)\\b/gi,\n      /(https?:\\/\\/[^\\s]+){3,}/gi, // Multiple URLs\n      /(.)\\1{10,}/gi, // Repeated characters\n    ];\n\n    for (const pattern of spamPatterns) {\n      if (pattern.test(_content)) {\n        throw new Error('Content appears to be spam. Please ensure your post follows community guidelines.');\n      }\n    }\n  }\n\n  // =============== Achievements & Gamification ===============\n\n  async getUserAchievements(userId: string): Promise<any[]> {\n    const response = await this.apiClient.get(`/community/users/${userId}/achievements`);\n    return response.data;\n  }\n\n  async getLeaderboard(type: 'helpful' | 'supportive' | 'active', period: 'week' | 'month' | 'all'): Promise<any[]> {\n    const response = await this.apiClient.get('/community/leaderboard', {\n      params: { type, period },\n    });\n    return response.data;\n  }\n\n  async awardKudos(userId: string, reason: string): Promise<void> {\n    await this.apiClient.post(`/community/users/${userId}/kudos`, { reason });\n  }\n\n  // =============== Moderation ===============\n\n  async getModerationQueue(): Promise<any[]> {\n    const response = await this.apiClient.get('/community/moderation/queue');\n    return response.data;\n  }\n\n  async moderateContent(contentId: string, action: 'approve' | 'reject' | 'flag', reason?: string): Promise<void> {\n    await this.apiClient.post('/community/moderation/action', {\n      contentId,\n      action,\n      reason,\n    });\n  }\n\n  async banUser(userId: string, duration: number, reason: string): Promise<void> {\n    await this.apiClient.post('/community/moderation/ban', {\n      userId,\n      duration,\n      reason,\n    });\n  }\n\n  async unbanUser(userId: string): Promise<void> {\n    await this.apiClient.post('/community/moderation/unban', { userId });\n  }\n\n  // =============== Search ===============\n\n  async searchCommunity(query: string, filters?: {\n    type?: 'posts' | 'groups' | 'events' | 'users';\n    category?: string;\n    dateRange?: { start: Date; end: Date };\n  }): Promise<unknown> {\n    const response = await this.apiClient.get('/community/search', {\n      params: {\n        q: query,\n        ...filters,\n        startDate: filters?.dateRange?.start.toISOString(),\n        endDate: filters?.dateRange?.end.toISOString(),\n      },\n    });\n    return response.data;\n  }\n}\n\n// Export singleton instance\nexport const communityService = new CommunityService();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\community\\gamificationService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":384,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":384,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11023,11026],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11023,11026],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":391,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":391,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11249,11252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11249,11252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from 'zod';\nimport axios from 'axios';\nimport { toast } from 'react-hot-toast';\nimport { secureStorage } from '../security/SecureLocalStorage';\n\n// API configuration\nconst API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3000/api';\n\n// Achievement schemas\nconst AchievementSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  description: z.string(),\n  icon: z.string(),\n  category: z.enum(['community', 'wellness', 'support', 'consistency', 'milestone', 'special']),\n  tier: z.enum(['bronze', 'silver', 'gold', 'platinum']),\n  points: z.number(),\n  requirements: z.object({\n    type: z.enum(['count', 'streak', 'milestone', 'special']),\n    target: z.number(),\n    current: z.number(),\n    unit: z.string(),\n  }),\n  unlockedAt: z.string().nullable(),\n  progress: z.number(), // 0-100\n  isUnlocked: z.boolean(),\n  isNew: z.boolean().default(false),\n});\n\nconst UserProgressSchema = z.object({\n  userId: z.string(),\n  level: z.number(),\n  currentExp: z.number(),\n  nextLevelExp: z.number(),\n  totalPoints: z.number(),\n  streak: z.object({\n    current: z.number(),\n    longest: z.number(),\n    lastActive: z.string(),\n  }),\n  badges: z.array(z.string()),\n  rank: z.string(),\n  percentile: z.number(), // User's percentile in the community\n});\n\nconst LeaderboardEntrySchema = z.object({\n  rank: z.number(),\n  userId: z.string(),\n  username: z.string(),\n  avatar: z.string().optional(),\n  level: z.number(),\n  points: z.number(),\n  achievements: z.number(),\n  helpfulVotes: z.number(),\n  isCurrentUser: z.boolean().default(false),\n  trend: z.enum(['up', 'down', 'stable']).optional(),\n});\n\nconst MilestoneSchema = z.object({\n  id: z.string(),\n  title: z.string(),\n  description: z.string(),\n  date: z.string(),\n  type: z.enum(['personal', 'community', 'wellness', 'anniversary']),\n  celebratedBy: z.array(z.string()),\n  celebration: z.object({\n    message: z.string(),\n    reactions: z.record(z.string(), z.number()),\n  }).optional(),\n});\n\nconst ChallengeSchema = z.object({\n  id: z.string(),\n  title: z.string(),\n  description: z.string(),\n  type: z.enum(['daily', 'weekly', 'monthly', 'special']),\n  startDate: z.string(),\n  endDate: z.string(),\n  goal: z.object({\n    type: z.string(),\n    target: z.number(),\n    current: z.number(),\n    unit: z.string(),\n  }),\n  reward: z.object({\n    points: z.number(),\n    badge: z.string().optional(),\n    title: z.string().optional(),\n  }),\n  participants: z.number(),\n  isJoined: z.boolean(),\n  isCompleted: z.boolean(),\n  progress: z.number(), // 0-100\n});\n\n// Types\nexport type Achievement = z.infer<typeof AchievementSchema>;\nexport type UserProgress = z.infer<typeof UserProgressSchema>;\nexport type LeaderboardEntry = z.infer<typeof LeaderboardEntrySchema>;\nexport type Milestone = z.infer<typeof MilestoneSchema>;\nexport type Challenge = z.infer<typeof ChallengeSchema>;\n\n// Achievement definitions\nconst _ACHIEVEMENTS = {\n  // Community Achievements\n  FIRST_POST: {\n    id: 'first-post',\n    name: 'First Steps',\n    description: 'Share your first post with the community',\n    category: 'community',\n    tier: 'bronze',\n    points: 10,\n  },\n  HELPFUL_MEMBER: {\n    id: 'helpful-member',\n    name: 'Helpful Member',\n    description: 'Receive 10 helpful votes on your posts or comments',\n    category: 'community',\n    tier: 'silver',\n    points: 25,\n  },\n  COMMUNITY_PILLAR: {\n    id: 'community-pillar',\n    name: 'Community Pillar',\n    description: 'Receive 100 helpful votes',\n    category: 'community',\n    tier: 'gold',\n    points: 100,\n  },\n  \n  // Support Achievements\n  PEER_SUPPORTER: {\n    id: 'peer-supporter',\n    name: 'Peer Supporter',\n    description: 'Provide support to 5 community members',\n    category: 'support',\n    tier: 'bronze',\n    points: 20,\n  },\n  CRISIS_HELPER: {\n    id: 'crisis-helper',\n    name: 'Crisis Helper',\n    description: 'Successfully assist someone in crisis',\n    category: 'support',\n    tier: 'platinum',\n    points: 200,\n  },\n  GROUP_LEADER: {\n    id: 'group-leader',\n    name: 'Group Leader',\n    description: 'Create and maintain an active support group',\n    category: 'support',\n    tier: 'gold',\n    points: 75,\n  },\n  \n  // Wellness Achievements\n  MEDITATION_BEGINNER: {\n    id: 'meditation-beginner',\n    name: 'Mindful Beginner',\n    description: 'Complete 7 meditation sessions',\n    category: 'wellness',\n    tier: 'bronze',\n    points: 15,\n  },\n  MOOD_TRACKER: {\n    id: 'mood-tracker',\n    name: 'Self-Aware',\n    description: 'Track your mood for 30 consecutive days',\n    category: 'wellness',\n    tier: 'silver',\n    points: 30,\n  },\n  WELLNESS_WARRIOR: {\n    id: 'wellness-warrior',\n    name: 'Wellness Warrior',\n    description: 'Complete 100 wellness activities',\n    category: 'wellness',\n    tier: 'gold',\n    points: 80,\n  },\n  \n  // Consistency Achievements\n  WEEK_STREAK: {\n    id: 'week-streak',\n    name: 'Consistent',\n    description: 'Visit the platform for 7 consecutive days',\n    category: 'consistency',\n    tier: 'bronze',\n    points: 10,\n  },\n  MONTH_STREAK: {\n    id: 'month-streak',\n    name: 'Dedicated',\n    description: 'Visit the platform for 30 consecutive days',\n    category: 'consistency',\n    tier: 'silver',\n    points: 40,\n  },\n  YEAR_MEMBER: {\n    id: 'year-member',\n    name: 'Veteran',\n    description: 'Be an active member for one year',\n    category: 'milestone',\n    tier: 'platinum',\n    points: 500,\n  },\n};\n\nclass GamificationService {\n  private apiClient = axios.create({\n    baseURL: API_BASE_URL,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  constructor() {\n    // Add auth interceptor\n    this.apiClient.interceptors.request.use((config) => {\n      const token = secureStorage.getItem('auth_token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    });\n  }\n\n  // =============== User Progress ===============\n\n  async getUserProgress(userId?: string): Promise<UserProgress> {\n    const response = await this.apiClient.get(`/gamification/progress/${userId || 'me'}`);\n    return UserProgressSchema.parse(response.data);\n  }\n\n  async updateUserProgress(action: string, value?: number): Promise<{\n    pointsEarned: number;\n    newAchievements: Achievement[];\n    levelUp?: boolean;\n  }> {\n    const response = await this.apiClient.post('/gamification/progress/update', {\n      action,\n      value,\n    });\n    \n    // Show notifications for achievements\n    if (response.data.newAchievements?.length > 0) {\n      response.data.newAchievements.forEach((_achievement: Achievement) => {\n        this.showAchievementNotification(_achievement);\n      });\n    }\n    \n    // Show level up notification\n    if (response.data.levelUp) {\n      toast.success(`Level Up! You're now level ${response.data.newLevel}!`, {\n        duration: 5000,\n        icon: '🎉',\n      });\n    }\n    \n    return response.data;\n  }\n\n  // =============== Achievements ===============\n\n  async getAchievements(userId?: string): Promise<Achievement[]> {\n    const response = await this.apiClient.get(`/gamification/achievements/${userId || 'me'}`);\n    return response.data.map((a: unknown) => AchievementSchema.parse(a));\n  }\n\n  async getAchievementProgress(achievementId: string): Promise<Achievement> {\n    const response = await this.apiClient.get(`/gamification/achievements/${achievementId}/progress`);\n    return AchievementSchema.parse(response.data);\n  }\n\n  async claimAchievement(achievementId: string): Promise<void> {\n    await this.apiClient.post(`/gamification/achievements/${achievementId}/claim`);\n  }\n\n  private showAchievementNotification(_achievement: Achievement) {\n    const tierEmojis = {\n      bronze: '🥉',\n      silver: '🥈',\n      gold: '🥇',\n      platinum: '💎',\n    };\n\n    const emoji = achievement.icon || tierEmojis[achievement.tier] || '🏆';\n    \n    toast.success(\n      `${emoji} Achievement Unlocked!\\n${_achievement.name}\\n${_achievement.description}\\n+${_achievement.points} points`,\n      {\n        duration: 5000,\n        style: {\n          minWidth: '300px',\n          padding: '16px',\n          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n          color: 'white',\n        },\n      }\n    );\n  }\n\n  // =============== Leaderboard ===============\n\n  async getLeaderboard(\n    type: 'points' | 'helpful' | 'streak' | 'level' = 'points',\n    period: 'day' | 'week' | 'month' | 'all' = 'week',\n    limit = 10\n  ): Promise<LeaderboardEntry[]> {\n    const response = await this.apiClient.get('/gamification/leaderboard', {\n      params: { type, period, limit },\n    });\n    return response.data.map((_entry: unknown) => LeaderboardEntrySchema.parse(_entry));\n  }\n\n  async getUserRank(userId?: string): Promise<{\n    rank: number;\n    percentile: number;\n    totalUsers: number;\n  }> {\n    const response = await this.apiClient.get(`/gamification/rank/${userId || 'me'}`);\n    return response.data;\n  }\n\n  // =============== Milestones ===============\n\n  async getMilestones(userId?: string): Promise<Milestone[]> {\n    const response = await this.apiClient.get(`/gamification/milestones/${userId || 'me'}`);\n    return response.data.map((m: unknown) => MilestoneSchema.parse(m));\n  }\n\n  async celebrateMilestone(milestoneId: string, message?: string): Promise<void> {\n    await this.apiClient.post(`/gamification/milestones/${milestoneId}/celebrate`, {\n      message,\n    });\n    toast.success('Milestone celebrated! 🎉');\n  }\n\n  async reactToMilestone(milestoneId: string, reaction: string): Promise<void> {\n    await this.apiClient.post(`/gamification/milestones/${milestoneId}/react`, {\n      reaction,\n    });\n  }\n\n  // =============== Challenges ===============\n\n  async getActiveChallenges(): Promise<Challenge[]> {\n    const response = await this.apiClient.get('/gamification/challenges/active');\n    return response.data.map((c: unknown) => ChallengeSchema.parse(c));\n  }\n\n  async getMyChallenges(): Promise<Challenge[]> {\n    const response = await this.apiClient.get('/gamification/challenges/my');\n    return response.data.map((c: unknown) => ChallengeSchema.parse(c));\n  }\n\n  async joinChallenge(challengeId: string): Promise<void> {\n    await this.apiClient.post(`/gamification/challenges/${challengeId}/join`);\n    toast.success('Challenge joined! Good luck! 💪');\n  }\n\n  async leaveChallenge(challengeId: string): Promise<void> {\n    await this.apiClient.post(`/gamification/challenges/${challengeId}/leave`);\n  }\n\n  async updateChallengeProgress(challengeId: string, progress: number): Promise<void> {\n    await this.apiClient.post(`/gamification/challenges/${challengeId}/progress`, {\n      progress,\n    });\n  }\n\n  // =============== Recognition & Kudos ===============\n\n  async giveKudos(userId: string, reason: string, category?: string): Promise<void> {\n    await this.apiClient.post('/gamification/kudos', {\n      recipientId: userId,\n      reason,\n      category,\n    });\n    toast.success('Kudos sent! You are making someone\\'s day better 💝');\n  }\n\n  async getKudosHistory(userId?: string): Promise<any[]> {\n    const response = await this.apiClient.get(`/gamification/kudos/${userId || 'me'}`);\n    return response.data;\n  }\n\n  // =============== Badges & Titles ===============\n\n  async getBadges(userId?: string): Promise<any[]> {\n    const response = await this.apiClient.get(`/gamification/badges/${userId || 'me'}`);\n    return response.data;\n  }\n\n  async selectDisplayBadge(badgeId: string): Promise<void> {\n    await this.apiClient.post('/gamification/badges/display', { badgeId });\n    toast.success('Display badge updated!');\n  }\n\n  async selectTitle(title: string): Promise<void> {\n    await this.apiClient.post('/gamification/title', { title });\n    toast.success('Title updated!');\n  }\n\n  // =============== Streaks ===============\n\n  async getStreak(): Promise<{\n    current: number;\n    longest: number;\n    lastActive: Date;\n    willBreakIn: number; // hours\n  }> {\n    const response = await this.apiClient.get('/gamification/streak');\n    return {\n      ...response.data,\n      lastActive: new Date(response.data.lastActive),\n    };\n  }\n\n  async checkIn(): Promise<{\n    streak: number;\n    pointsEarned: number;\n    bonusPoints?: number;\n  }> {\n    const response = await this.apiClient.post('/gamification/checkin');\n    \n    if (response.data.bonusPoints) {\n      toast.success(`Daily check-in! Streak: ${response.data.streak} days (+${response.data.bonusPoints} bonus points!)`, {\n        icon: '🔥',\n      });\n    } else {\n      toast.success(`Daily check-in! Streak: ${response.data.streak} days`, {\n        icon: '✅',\n      });\n    }\n    \n    return response.data;\n  }\n\n  // =============== Analytics ===============\n\n  async getProgressAnalytics(period: 'week' | 'month' | 'year' = 'month'): Promise<{\n    pointsOverTime: { date: string; points: number }[];\n    achievementsUnlocked: number;\n    averageEngagement: number;\n    topCategories: { category: string; count: number }[];\n  }> {\n    const response = await this.apiClient.get('/gamification/analytics', {\n      params: { period },\n    });\n    return response.data;\n  }\n\n  // =============== Helper Methods ===============\n\n  calculateLevel(exp: number): number {\n    // Progressive level system: each level requires more XP\n    return Math.floor(Math.sqrt(exp / 100)) + 1;\n  }\n\n  calculateExpForLevel(level: number): number {\n    return Math.pow(level - 1, 2) * 100;\n  }\n\n  getNextMilestone(currentValue: number, milestones: number[]): number | null {\n    const sorted = milestones.sort((a, b) => a - b);\n    return sorted.find(m => m > currentValue) || null;\n  }\n\n  getRankTitle(level: number): string {\n    if (level >= 100) return 'Mental Health Champion';\n    if (level >= 75) return 'Wellness Master';\n    if (level >= 50) return 'Community Elder';\n    if (level >= 30) return 'Support Specialist';\n    if (level >= 20) return 'Peer Counselor';\n    if (level >= 10) return 'Active Supporter';\n    if (level >= 5) return 'Rising Member';\n    return 'New Member';\n  }\n\n  getTierColor(tier: Achievement['tier']): string {\n    const colors = {\n      bronze: 'text-orange-600 bg-orange-100',\n      silver: 'text-gray-600 bg-gray-100',\n      gold: 'text-yellow-600 bg-yellow-100',\n      platinum: 'text-purple-600 bg-purple-100',\n    };\n    return colors[tier];\n  }\n}\n\n// Export singleton instance\nexport const _gamificationService = new GamificationService();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\compliance\\hipaaService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":265,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":265,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":333,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":333,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":383,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":383,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":396,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":396,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10630,10633],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10630,10633],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":410,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":410,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":507,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":507,"endColumn":20}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * HIPAA Compliance Service\n * Ensures all health data handling meets HIPAA requirements\n * Manages PHI (Protected Health Information) access and security\n */\n\nimport { auditLogger } from '../security/auditLogger';\nimport { cryptoService } from '../security/cryptoService';\nimport { secureStorage } from '../security/secureStorage';\nimport { privacyService } from '../privacy/privacyService';\nimport { logger } from '../../utils/logger';\n\nexport interface PHIAccessControl {\n  _userId: string;\n  resourceId: string;\n  _resourceType: PHIResourceType;\n  _accessLevel: AccessLevel;\n  purpose: string;\n  grantedBy?: string;\n  grantedAt: Date;\n  expiresAt?: Date;\n  conditions?: AccessCondition[];\n}\n\nexport type PHIResourceType =\n  | 'medical_record'\n  | 'mental_health_assessment'\n  | 'therapy_notes'\n  | 'medication_list'\n  | 'diagnosis'\n  | 'treatment_plan'\n  | 'crisis_plan'\n  | 'lab_results'\n  | 'insurance_info';\n\nexport type AccessLevel = 'read' | 'write' | 'modify' | 'delete' | 'share';\n\nexport interface AccessCondition {\n  type: 'time_based' | 'location_based' | 'emergency' | 'consent_required';\n  value: unknown;\n}\n\nexport interface PHIDisclosure {\n  id: string;\n  patientId: string;\n  recipientId: string;\n  recipientType: 'provider' | 'insurance' | 'family' | 'legal' | 'research';\n  disclosedData: string[];\n  purpose: string;\n  legalBasis: string;\n  disclosedAt: Date;\n  authorizedBy: string;\n}\n\nexport interface MinimumNecessaryAssessment {\n  requestId: string;\n  dataRequested: string[];\n  purpose: string;\n  assessment: {\n    necessary: string[];\n    unnecessary: string[];\n    alternatives?: string[];\n  };\n  assessedBy: 'system' | 'manual';\n  assessedAt: Date;\n}\n\nexport interface BreachNotification {\n  id: string;\n  discoveredAt: Date;\n  reportedAt?: Date;\n  affectedUsers: string[];\n  dataCompromised: string[];\n  cause: string;\n  remediation: string[];\n  notificationsSent: boolean;\n}\n\nclass HIPAAComplianceService {\n  private static instance: HIPAAComplianceService;\n  private readonly ENCRYPTION_REQUIRED = true;\n  private readonly PHI_RETENTION_YEARS = 7;\n  private readonly BREACH_NOTIFICATION_DAYS = 60;\n  private readonly SESSION_TIMEOUT_MINUTES = 30;\n  private phiAccessCache: Map<string, PHIAccessControl[]> = new Map();\n\n  private constructor() {\n    this.initializeCompliance();\n  }\n\n  static getInstance(): HIPAAComplianceService {\n    if (!HIPAAComplianceService.instance) {\n      HIPAAComplianceService.instance = new HIPAAComplianceService();\n    }\n    return HIPAAComplianceService.instance;\n  }\n\n  private initializeCompliance(): void {\n    // Set up compliance monitoring\n    this.setupComplianceMonitoring();\n    \n    // Initialize breach detection\n    this.initializeBreachDetection();\n    \n    // Set up automatic PHI encryption\n    this.enforceEncryption();\n  }\n\n  /**\n   * Request access to PHI with validation\n   */\n  async requestPHIAccess(params: {\n    _userId: string;\n    resourceId: string;\n    _resourceType: PHIResourceType;\n    _accessLevel: AccessLevel;\n    purpose: string;\n    duration?: number; // in minutes\n  }): Promise<PHIAccessControl | null> {\n    try {\n      // Verify user authorization\n      const isAuthorized = await this.verifyAuthorization(\n        params._userId,\n        params._resourceType,\n        params._accessLevel\n      );\n\n      if (!isAuthorized) {\n        await auditLogger.log({\n          event: 'PERMISSION_DENIED',\n          _userId: params._userId,\n          resourceId: params.resourceId,\n          _resourceType: params._resourceType,\n          details: {\n            reason: 'Unauthorized PHI access attempt',\n            _accessLevel: params._accessLevel,\n          },\n          severity: 'warning',\n        });\n        return null;\n      }\n\n      // Apply minimum necessary standard\n      const assessment = await this.assessMinimumNecessary(\n        params.resourceId,\n        params.resourceType,\n        params.purpose\n      );\n\n      if (!assessment.assessment.necessary.includes(params.resourceType)) {\n        await auditLogger.log({\n          event: 'COMPLIANCE_VIOLATION',\n          _userId: params._userId,\n          details: {\n            violation: 'minimum_necessary_standard',\n            requested: params._resourceType,\n            alternatives: assessment.assessment.alternatives,\n          },\n          severity: 'warning',\n        });\n        return null;\n      }\n\n      // Check patient consent\n      const hasConsent = await privacyService.hasConsent(\n        params.userId,\n        'health_data',\n        ['health_records']\n      );\n\n      if (!hasConsent && params.accessLevel !== 'read') {\n        await auditLogger.log({\n          event: 'PERMISSION_DENIED',\n          _userId: params._userId,\n          details: {\n            reason: 'No patient consent for PHI modification',\n          },\n          severity: 'warning',\n        });\n        return null;\n      }\n\n      // Grant access\n      const accessControl: PHIAccessControl = {\n        _userId: params._userId,\n        resourceId: params.resourceId,\n        _resourceType: params._resourceType,\n        _accessLevel: params._accessLevel,\n        purpose: params.purpose,\n        grantedAt: new Date(),\n        expiresAt: params.duration\n          ? new Date(Date.now() + params.duration * 60 * 1000)\n          : undefined,\n      };\n\n      // Store access control\n      await this.storePHIAccess(_accessControl);\n\n      // Log PHI access\n      await auditLogger.log({\n        event: 'PHI_ACCESS',\n        _userId: params._userId,\n        resourceId: params.resourceId,\n        _resourceType: params._resourceType,\n        action: params._accessLevel,\n        details: {\n          purpose: params.purpose,\n          duration: params.duration,\n        },\n        severity: 'info',\n      });\n\n      return accessControl;\n    } catch (error) {\n      await auditLogger.log({\n        event: 'SYSTEM_ERROR',\n        _userId: params._userId,\n        details: {\n          error: error instanceof Error ? error.message : String(error),\n          _context: 'PHI access request',\n        },\n        severity: 'error',\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Record PHI disclosure for accounting\n   */\n  async recordDisclosure(params: {\n    patientId: string;\n    recipientId: string;\n    recipientType: 'provider' | 'insurance' | 'family' | 'legal' | 'research';\n    disclosedData: string[];\n    purpose: string;\n    legalBasis: string;\n    authorizedBy: string;\n  }): Promise<PHIDisclosure> {\n    try {\n      const disclosure: PHIDisclosure = {\n        id: cryptoService.generateSecureUUID(),\n        ...params,\n        disclosedAt: new Date(),\n      };\n\n      // Store disclosure record\n      await this.storeDisclosure(_disclosure);\n\n      // Log disclosure\n      await auditLogger.log({\n        event: 'PHI_MODIFICATION',\n        _userId: params.patientId,\n        details: {\n          action: 'disclosure',\n          recipient: params.recipientId,\n          recipientType: params.recipientType,\n          dataTypes: params.disclosedData,\n          purpose: params.purpose,\n        },\n        severity: 'info',\n      });\n\n      return disclosure;\n    } catch (_error) {\n      logger.error('Failed to record PHI disclosure:');\n      throw undefined;\n    }\n  }\n\n  /**\n   * Validate PHI handling for compliance\n   */\n  async validatePHIHandling(params: {\n    _userId: string;\n    action: string;\n    _data: unknown;\n    _context: string;\n  }): Promise<{\n    compliant: boolean;\n    violations: string[];\n    recommendations: string[];\n  }> {\n    const violations: string[] = [];\n    const recommendations: string[] = [];\n\n    try {\n      // Check encryption\n      if (this.ENCRYPTION_REQUIRED && !this.isDataEncrypted(params._data)) {\n        violations.push('PHI must be encrypted at rest and in transit');\n      }\n\n      // Check access controls\n      const hasAccess = await this.checkPHIAccess(\n        params.userId,\n        params.context\n      );\n      if (!hasAccess) {\n        violations.push('User lacks proper authorization for PHI access');\n      }\n\n      // Check audit logging\n      const auditEnabled = await this.isAuditingEnabled();\n      if (!auditEnabled) {\n        violations.push('PHI access auditing is not properly configured');\n      }\n\n      // Check data retention\n      const retentionCompliant = await this.checkRetentionCompliance(params.data);\n      if (!retentionCompliant) {\n        violations.push('PHI retention policy violation');\n      }\n\n      // Check minimum necessary\n      if (params.action === 'share' || params.action === 'disclose') {\n        recommendations.push('Apply minimum necessary standard before sharing');\n      }\n\n      // Check consent\n      const hasConsent = await privacyService.hasConsent(\n        params.userId,\n        'health_data'\n      );\n      if (!hasConsent) {\n        recommendations.push('Obtain patient consent before processing PHI');\n      }\n\n      return {\n        compliant: violations.length === 0,\n        violations,\n        recommendations,\n      };\n    } catch (_error) {\n      logger.error('PHI validation error: ');\n      return {\n        compliant: false,\n        violations: ['Validation undefined occurred'],\n        recommendations: ['Review PHI handling procedures'],\n      };\n    }\n  }\n\n  /**\n   * Report a potential breach\n   */\n  async reportBreach(params: {\n    discoveredBy: string;\n    affectedUsers: string[];\n    dataCompromised: string[];\n    cause: string;\n    immediateActions?: string[];\n  }): Promise<BreachNotification> {\n    try {\n      const breach: BreachNotification = {\n        id: cryptoService.generateSecureUUID(),\n        discoveredAt: new Date(),\n        affectedUsers: params.affectedUsers,\n        dataCompromised: params.dataCompromised,\n        cause: params.cause,\n        remediation: params.immediateActions || [],\n        notificationsSent: false,\n      };\n\n      // Store breach record\n      await this.storeBreachNotification(breach);\n\n      // Log critical security event\n      await auditLogger.log({\n        event: 'SECURITY_ALERT',\n        _userId: params.discoveredBy,\n        details: {\n          type: 'breach_detected',\n          affectedCount: params.affectedUsers.length,\n          dataTypes: params.dataCompromised,\n        },\n        severity: 'critical',\n      });\n\n      // Initiate breach response\n      this.initiateBreachResponse(breach);\n\n      return breach;\n    } catch (_error) {\n      logger.error('Failed to report breach:');\n      throw undefined;\n    }\n  }\n\n  /**\n   * Get PHI access log for a patient\n   */\n  async getPHIAccessLog(\n    patientId: string,\n    startDate?: Date,\n    endDate?: Date\n  ): Promise<any[]> {\n    try {\n      // Query audit logs for PHI access\n      const logs = await auditLogger.query({\n        _userId: patientId,\n        event: 'PHI_ACCESS',\n        startDate,\n        endDate,\n      });\n\n      // Include disclosures\n      const disclosures = await this.getDisclosures(patientId, startDate, endDate);\n\n      return [...logs, ...disclosures];\n    } catch (_error) {\n      logger.error('Failed to get PHI access log:');\n      return [];\n    }\n  }\n\n  /**\n   * Perform HIPAA risk assessment\n   */\n  async performRiskAssessment(): Promise<{\n    overallRisk: 'low' | 'medium' | 'high' | 'critical';\n    findings: Array<{\n      area: string;\n      risk: string;\n      severity: string;\n      mitigation: string;\n    }>;\n    recommendations: string[];\n  }> {\n    const findings: unknown[] = [];\n    const recommendations: string[] = [];\n\n    try {\n      // Check encryption status\n      const encryptionStatus = await this.assessEncryption();\n      if (!encryptionStatus.fullyEncrypted) {\n        findings.push({\n          area: 'Encryption',\n          risk: 'Unencrypted PHI detected',\n          severity: 'high',\n          mitigation: 'Enable encryption for all PHI storage',\n        });\n      }\n\n      // Check access controls\n      const accessControlStatus = await this.assessAccessControls();\n      if (accessControlStatus.weakControls.length > 0) {\n        findings.push({\n          area: 'Access Controls',\n          risk: 'Weak access controls detected',\n          severity: 'medium',\n          mitigation: 'Strengthen role-based access controls',\n        });\n      }\n\n      // Check audit logging\n      const auditStatus = await this.assessAuditLogging();\n      if (!auditStatus.comprehensive) {\n        findings.push({\n          area: 'Audit Logging',\n          risk: 'Incomplete audit trail',\n          severity: 'medium',\n          mitigation: 'Ensure all PHI access is logged',\n        });\n      }\n\n      // Check breach history\n      const breachHistory = await this.getBreachHistory();\n      if (breachHistory.length > 0) {\n        findings.push({\n          area: 'Breach Prevention',\n          risk: 'Previous breaches detected',\n          severity: 'high',\n          mitigation: 'Review and strengthen security measures',\n        });\n      }\n\n      // Calculate overall risk\n      const severityScores = {\n        low: 1,\n        medium: 2,\n        high: 3,\n        critical: 4,\n      };\n\n      const avgSeverity = findings.length > 0\n        ? findings.reduce((sum, f) => sum + (severityScores[f.severity as keyof typeof severityScores] || 0), 0) / findings.length\n        : 0;\n\n      let overallRisk: 'low' | 'medium' | 'high' | 'critical';\n      if (avgSeverity <= 1.5) overallRisk = 'low';\n      else if (avgSeverity <= 2.5) overallRisk = 'medium';\n      else if (avgSeverity <= 3.5) overallRisk = 'high';\n      else overallRisk = 'critical';\n\n      // Generate recommendations\n      if (findings.length > 0) {\n        recommendations.push('Conduct regular security training for all staff');\n        recommendations.push('Implement regular security audits');\n        recommendations.push('Review and update HIPAA policies');\n      }\n\n      return {\n        overallRisk,\n        findings,\n        recommendations,\n      };\n    } catch (_error) {\n      logger.error('Risk assessment failed:');\n      return {\n        overallRisk: 'high',\n        findings: [{\n          area: 'Assessment',\n          risk: 'Assessment failed',\n          severity: 'high',\n          mitigation: 'Manual review required',\n        }],\n        recommendations: ['Perform manual HIPAA compliance review'],\n      };\n    }\n  }\n\n  /**\n   * Private helper methods\n   */\n  private async verifyAuthorization(\n    _userId: string,\n    _resourceType: PHIResourceType,\n    _accessLevel: AccessLevel\n  ): Promise<boolean> {\n    // Check user role and permissions\n    // In production, integrate with RBAC system\n    const userRole = await this.getUserRole(_userId);\n    \n    const permissions = {\n      provider: ['read', 'write', 'modify'],\n      patient: ['read'],\n      admin: ['read', 'write', 'modify', 'delete', 'share'],\n      emergency: ['read', 'write'],\n    };\n\n    return (permissions[userRole as keyof typeof permissions] || []).includes(_accessLevel);\n  }\n\n  private async assessMinimumNecessary(\n    resourceId: string,\n    _resourceType: PHIResourceType,\n    purpose: string\n  ): Promise<MinimumNecessaryAssessment> {\n    // Apply minimum necessary standard\n    const assessment: MinimumNecessaryAssessment = {\n      requestId: cryptoService.generateSecureUUID(),\n      dataRequested: [_resourceType],\n      purpose,\n      assessment: {\n        necessary: [],\n        unnecessary: [],\n      },\n      assessedBy: 'system',\n      assessedAt: new Date(),\n    };\n\n    // Determine what's necessary based on purpose\n    const necessaryData = {\n      treatment: ['medical_record', 'diagnosis', 'medication_list', 'treatment_plan'],\n      payment: ['insurance_info', 'diagnosis'],\n      operations: ['mental_health_assessment'],\n      emergency: ['crisis_plan', 'medication_list', 'emergency_contacts'],\n    };\n\n    const purposeCategory = this.categorizePurpose(_purpose);\n    const categoryData = necessaryData[purposeCategory as keyof typeof necessaryData];\n    if (categoryData) {\n      assessment.assessment.necessary = categoryData.filter(\n        _d => _d === _resourceType\n      );\n      assessment.assessment.unnecessary = [_resourceType].filter(\n        _d => !assessment.assessment.necessary.includes(_d)\n      );\n    }\n\n    return assessment;\n  }\n\n  private categorizePurpose(purpose: string): string {\n    const lowerPurpose = purpose.toLowerCase();\n    if (lowerPurpose.includes('treatment') || lowerPurpose.includes('therapy')) {\n      return 'treatment';\n    } else if (lowerPurpose.includes('payment') || lowerPurpose.includes('billing')) {\n      return 'payment';\n    } else if (lowerPurpose.includes('emergency') || lowerPurpose.includes('crisis')) {\n      return 'emergency';\n    }\n    return 'operations';\n  }\n\n  private async storePHIAccess(access: PHIAccessControl): Promise<void> {\n    const _key = `phi_access_${access._userId}`;\n    const existing = await secureStorage.getItem(_key) || [];\n    existing.push(access);\n    \n    // Keep only recent access records\n    const cutoff = new Date();\n    cutoff.setDate(cutoff.getDate() - 30);\n    const recent = existing.filter((a: PHIAccessControl) => \n      new Date(a.grantedAt) > cutoff\n    );\n    \n    await secureStorage.setItem(_key, recent, { encrypted: true });\n    \n    // Update cache\n    this.phiAccessCache.set(access.userId, recent);\n  }\n\n  private async checkPHIAccess(_userId: string, _context: string): Promise<boolean> {\n    // Check if user has valid PHI access\n    const _key = `phi_access_${_userId}`;\n    const accesses = this.phiAccessCache.get(_userId) || \n                     await secureStorage.getItem(_key) || [];\n    \n    const now = new Date();\n    return accesses.some((a: PHIAccessControl) => \n      (!a.expiresAt || new Date(a.expiresAt) > now) &&\n      a.purpose.includes(_context)\n    );\n  }\n\n  private async storeDisclosure(disclosure: PHIDisclosure): Promise<void> {\n    const _key = `phi_disclosures_${disclosure.patientId}`;\n    const existing = await secureStorage.getItem(_key) || [];\n    existing.push(_disclosure);\n    await secureStorage.setItem(_key, existing, { encrypted: true });\n  }\n\n  private async getDisclosures(\n    patientId: string,\n    startDate?: Date,\n    endDate?: Date\n  ): Promise<PHIDisclosure[]> {\n    const _key = `phi_disclosures_${patientId}`;\n    const all = await secureStorage.getItem(_key) || [];\n    \n    return all.filter((_d: PHIDisclosure) => {\n      const disclosedAt = new Date(_d.disclosedAt);\n      return (!startDate || disclosedAt >= startDate) &&\n             (!endDate || disclosedAt <= endDate);\n    });\n  }\n\n  private async storeBreachNotification(breach: BreachNotification): Promise<void> {\n    const _key = 'hipaa_breaches';\n    const existing = await secureStorage.getItem(_key) || [];\n    existing.push(breach);\n    await secureStorage.setItem(_key, existing, { encrypted: true });\n  }\n\n  private async initiateBreachResponse(breach: BreachNotification): Promise<void> {\n    // In production, implement full breach response protocol\n    logger.error('BREACH DETECTED:', breach);\n    \n    // 1. Contain the breach\n    // 2. Assess the scope\n    // 3. Notify affected individuals within 60 days\n    // 4. Notify HHS\n    // 5. Notify media if > 500 individuals affected\n    \n    setTimeout(async () => {\n      breach.notificationsSent = true;\n      breach.reportedAt = new Date();\n      await this.storeBreachNotification(breach);\n    }, 1000);\n  }\n\n  private async getBreachHistory(): Promise<BreachNotification[]> {\n    const _key = 'hipaa_breaches';\n    return await secureStorage.getItem(_key) || [];\n  }\n\n  private isDataEncrypted(_data: unknown): boolean {\n    // Check if _data appears to be encrypted\n    if (typeof _data === 'string') {\n      // Simple check for base64 encoded encrypted _data\n      return /^[A-Za-z0-9+/]+=*$/.test(_data) && _data.length > 100;\n    }\n    return false;\n  }\n\n  private async isAuditingEnabled(): Promise<boolean> {\n    // Check if audit logging is properly configured\n    return true; // Audit logger is always enabled in our implementation\n  }\n\n  private async checkRetentionCompliance(_data: unknown): Promise<boolean> {\n    // Check if _data retention meets HIPAA requirements (7 years)\n    return true; // Simplified for development\n  }\n\n  private async assessEncryption(): Promise<{ fullyEncrypted: boolean }> {\n    // Assess encryption status of PHI storage\n    return { fullyEncrypted: true }; // Our storage service encrypts by default\n  }\n\n  private async assessAccessControls(): Promise<{ weakControls: string[] }> {\n    // Assess strength of access controls\n    return { weakControls: [] };\n  }\n\n  private async assessAuditLogging(): Promise<{ comprehensive: boolean }> {\n    // Assess completeness of audit logging\n    return { comprehensive: true };\n  }\n\n  private async getUserRole(_userId: string): Promise<string> {\n    // Get user role from auth system\n    // Simplified for development\n    return 'provider';\n  }\n\n  private setupComplianceMonitoring(): void {\n    // Monitor for compliance violations\n    setInterval(async () => {\n      const assessment = await this.performRiskAssessment();\n      if (assessment.overallRisk === 'critical') {\n        logger.error('CRITICAL HIPAA COMPLIANCE ISSUE DETECTED');\n      }\n    }, 24 * 60 * 60 * 1000); // Daily\n  }\n\n  private initializeBreachDetection(): void {\n    // Set up breach detection mechanisms\n    // In production, integrate with security monitoring tools\n  }\n\n  private enforceEncryption(): void {\n    // Ensure all PHI is encrypted\n    // Our secure storage service handles this automatically\n  }\n}\n\nexport const hipaaService = HIPAAComplianceService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\console\\ConsoleSoundSystem.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":532,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":532,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":639,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":639,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19981,19984],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19981,19984],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Console Sound System\r\n * Provides gaming console-style audio feedback and haptic vibrations\r\n */\r\n\r\nimport { logger } from '../../utils/logger';\r\n\r\n/**\r\n * Complete sound configuration with all required properties\r\n */\r\nexport interface SoundConfig {\r\n  type: 'beep' | 'chirp' | 'whoosh' | 'thud' | 'ding' | 'alert' | 'success' | 'error' | 'ambient';\r\n  volume: number; // 0.0 to 1.0\r\n  pitch: number; // Hz\r\n  duration: number; // seconds\r\n  fadeOut?: boolean;\r\n  haptic?: HapticConfig;\r\n}\r\n\r\n/**\r\n * Partial sound configuration for customizing existing sounds or creating new ones.\r\n * All properties are optional and will be filled with defaults if not provided.\r\n */\r\nexport interface PartialSoundConfig {\r\n  type?: 'beep' | 'chirp' | 'whoosh' | 'thud' | 'ding' | 'alert' | 'success' | 'error' | 'ambient';\r\n  volume?: number; // 0.0 to 1.0\r\n  pitch?: number; // Hz\r\n  duration?: number; // seconds\r\n  fadeOut?: boolean;\r\n  haptic?: HapticConfig;\r\n}\r\n\r\nexport interface HapticConfig {\r\n  pattern: number[]; // vibration pattern in ms [vibrate, pause, vibrate, pause...]\r\n  intensity: 'light' | 'medium' | 'strong';\r\n}\r\n\r\ninterface QueuedSound {\r\n  _soundName: keyof ConsoleSoundSystem['CONSOLE_SOUNDS'];\r\n  options?: PartialSoundConfig;\r\n  timestamp: number;\r\n}\r\n\r\ntype PerformanceMode = 'low' | 'medium' | 'high';\r\ntype AudioSource = AudioBufferSourceNode;\r\n\r\nexport class ConsoleSoundSystem {\r\n  private audioContext: AudioContext | null = null;\r\n  private soundEnabled = true;\r\n  private hapticEnabled = true;\r\n  private masterVolume = 0.3; // Default conservative volume\r\n  private soundCache = new Map<string, SoundConfig>();\r\n  \r\n  // Performance optimization properties\r\n  private soundQueue: QueuedSound[] = [];\r\n  private processingQueue = false;\r\n  private audioPool = new Map<string, AudioSource[]>();\r\n  private lastSoundTimes = new Map<string, number>();\r\n  private performanceMode: PerformanceMode = 'medium';\r\n  private isLowLatencyMode = false;\r\n\r\n  // Console sound presets inspired by PS5/Xbox\r\n  private readonly CONSOLE_SOUNDS: Record<string, SoundConfig> = {\r\n    // Navigation sounds\r\n    focus: {\r\n      type: 'chirp',\r\n      volume: 0.2,\r\n      pitch: 800,\r\n      duration: 0.1,\r\n      haptic: { pattern: [20], intensity: 'light' }\r\n    },\r\n    select: {\r\n      type: 'ding',\r\n      volume: 0.4,\r\n      pitch: 600,\r\n      duration: 0.15,\r\n      haptic: { pattern: [40], intensity: 'medium' }\r\n    },\r\n    back: {\r\n      type: 'beep',\r\n      volume: 0.3,\r\n      pitch: 400,\r\n      duration: 0.12,\r\n      haptic: { pattern: [30], intensity: 'light' }\r\n    },\r\n    \r\n    // UI interaction sounds\r\n    hover: {\r\n      type: 'chirp',\r\n      volume: 0.15,\r\n      pitch: 900,\r\n      duration: 0.08,\r\n      haptic: { pattern: [15], intensity: 'light' }\r\n    },\r\n    click: {\r\n      type: 'thud',\r\n      volume: 0.25,\r\n      pitch: 200,\r\n      duration: 0.1,\r\n      haptic: { pattern: [25], intensity: 'medium' }\r\n    },\r\n    \r\n    // System sounds\r\n    startup: {\r\n      type: 'whoosh',\r\n      volume: 0.5,\r\n      pitch: 300,\r\n      duration: 1.2,\r\n      fadeOut: true,\r\n      haptic: { pattern: [100, 50, 100], intensity: 'medium' }\r\n    },\r\n    shutdown: {\r\n      type: 'whoosh',\r\n      volume: 0.4,\r\n      pitch: 150,\r\n      duration: 0.8,\r\n      fadeOut: true,\r\n      haptic: { pattern: [200], intensity: 'light' }\r\n    },\r\n    \r\n    // Notification sounds\r\n    achievement: {\r\n      type: 'success',\r\n      volume: 0.6,\r\n      pitch: 800,\r\n      duration: 0.5,\r\n      haptic: { pattern: [100, 50, 100, 50, 150], intensity: 'strong' }\r\n    },\r\n    levelUp: {\r\n      type: 'success',\r\n      volume: 0.7,\r\n      pitch: 600,\r\n      duration: 0.8,\r\n      haptic: { pattern: [80, 40, 80, 40, 120], intensity: 'strong' }\r\n    },\r\n    notification: {\r\n      type: 'ding',\r\n      volume: 0.3,\r\n      pitch: 700,\r\n      duration: 0.2,\r\n      haptic: { pattern: [50, 50, 50], intensity: 'medium' }\r\n    },\r\n    \r\n    // Emergency/Alert sounds - MUTED: Sound was too loud/annoying for users\r\n    emergency: {\r\n      type: 'alert',\r\n      volume: 0.0, // DISABLED: Sound muted per user feedback\r\n      pitch: 1000,\r\n      duration: 0.3,\r\n      haptic: { pattern: [100, 100, 100, 100, 200], intensity: 'strong' }\r\n    },\r\n    warning: {\r\n      type: 'alert',\r\n      volume: 0.0, // DISABLED: Sound muted per user feedback\r\n      pitch: 600,\r\n      duration: 0.2,\r\n      haptic: { pattern: [80, 80, 80], intensity: 'medium' }\r\n    },\r\n    \r\n    // Mental health specific sounds (gentle, calming)\r\n    breatheIn: {\r\n      type: 'ambient',\r\n      volume: 0.2,\r\n      pitch: 400,\r\n      duration: 4.0,\r\n      fadeOut: true\r\n    },\r\n    breatheOut: {\r\n      type: 'ambient',\r\n      volume: 0.2,\r\n      pitch: 200,\r\n      duration: 4.0,\r\n      fadeOut: true\r\n    },\r\n    meditation: {\r\n      type: 'ambient',\r\n      volume: 0.15,\r\n      pitch: 300,\r\n      duration: 10.0,\r\n      fadeOut: true\r\n    }\r\n  };\r\n\r\n  constructor() {\r\n    this.initializeAudio();\r\n    this.loadUserPreferences();\r\n    this.detectPerformanceMode();\r\n    this.setupAudioPool();\r\n    this.initializeLowLatencyMode();\r\n  }\r\n\r\n  private initializeAudio() {\r\n    try {\r\n      this.audioContext = new (window.AudioContext || (window as unknown).webkitAudioContext)();\r\n    } catch {\r\n      logger.warn('Audio context not supported:');\r\n      this.soundEnabled = false;\r\n    }\r\n  }\r\n\r\n  private loadUserPreferences() {\r\n    // Load user sound preferences from localStorage\r\n    const soundPref = localStorage.getItem('console-sound-enabled');\r\n    const hapticPref = localStorage.getItem('console-haptic-enabled');\r\n    const volumePref = localStorage.getItem('console-master-volume');\r\n\r\n    if (soundPref !== null) {\r\n      this.soundEnabled = JSON.parse(_soundPref);\r\n    }\r\n    \r\n    if (hapticPref !== null) {\r\n      this.hapticEnabled = JSON.parse(_hapticPref);\r\n    }\r\n    \r\n    if (volumePref !== null) {\r\n      this.masterVolume = Math.max(0, Math.min(1, parseFloat(_volumePref)));\r\n    }\r\n  }\r\n\r\n  // Helper method to create a valid sound configuration with defaults\r\n  private createSoundConfig(config: PartialSoundConfig): SoundConfig {\r\n    return {\r\n      type: config.type || 'beep',\r\n      volume: Math.max(0, Math.min(1, config.volume ?? 0.3)),\r\n      pitch: Math.max(50, Math.min(4000, config.pitch ?? 440)),\r\n      duration: Math.max(0.01, Math.min(10, config.duration ?? 0.1)),\r\n      fadeOut: config.fadeOut,\r\n      haptic: config.haptic\r\n    };\r\n  }\r\n\r\n  // Helper method to safely merge sound configurations\r\n  private mergeSoundConfig(base: SoundConfig, options?: PartialSoundConfig): SoundConfig {\r\n    if (!options) return base;\r\n    \r\n    return {\r\n      type: options.type ?? base.type,\r\n      volume: options.volume !== undefined ? Math.max(0, Math.min(1, options.volume)) : base.volume,\r\n      pitch: options.pitch !== undefined ? Math.max(50, Math.min(4000, options.pitch)) : base.pitch,\r\n      duration: options.duration !== undefined ? Math.max(0.01, Math.min(10, options.duration)) : base.duration,\r\n      fadeOut: options.fadeOut ?? base.fadeOut,\r\n      haptic: options.haptic ?? base.haptic\r\n    };\r\n  }\r\n\r\n  // Main sound playing method\r\n  async playSound(_soundName: keyof typeof this.CONSOLE_SOUNDS, options?: PartialSoundConfig) {\r\n    if (!this.soundEnabled || !this.audioContext) return;\r\n\r\n    const baseSound = this.CONSOLE_SOUNDS[_soundName];\r\n    if (!baseSound) {\r\n      logger.warn(`Sound \"${String(_soundName)}\" not found in CONSOLE_SOUNDS`);\r\n      return;\r\n    }\r\n\r\n    const soundConfig = this.mergeSoundConfig(baseSound, options);\r\n    \r\n    try {\r\n      // Ensure audio context is running\r\n      if (this.audioContext.state === 'suspended') {\r\n        await this.audioContext.resume();\r\n      }\r\n\r\n      // Generate and play the sound\r\n      await this.generateSound(soundConfig);\r\n\r\n      // Trigger haptic feedback if available\r\n      if (this.hapticEnabled && soundConfig.haptic) {\r\n        this.triggerHaptic(soundConfig.haptic);\r\n      }\r\n\r\n    } catch {\r\n      logger.warn(`Failed to play console sound \"${String(_soundName)}\":`, error);\r\n    }\r\n  }\r\n\r\n  private async generateSound(config: SoundConfig): Promise<void> {\r\n    if (!this.audioContext) return;\r\n\r\n    // Ensure all config values are valid with defaults\r\n    const safeConfig: SoundConfig = {\r\n      type: config.type || 'beep',\r\n      volume: Math.max(0, Math.min(1, config.volume || 0.3)),\r\n      pitch: Math.max(50, Math.min(4000, config.pitch || 440)),\r\n      duration: Math.max(0.01, Math.min(10, config.duration || 0.1)),\r\n      fadeOut: config.fadeOut,\r\n      haptic: config.haptic\r\n    };\r\n\r\n    const oscillator = this.audioContext.createOscillator();\r\n    const gainNode = this.audioContext.createGain();\r\n    const compressor = this.audioContext.createDynamicsCompressor();\r\n\r\n    // Connect nodes\r\n    oscillator.connect(gainNode);\r\n    gainNode.connect(compressor);\r\n    compressor.connect(this.audioContext.destination);\r\n\r\n    // Configure oscillator based on sound type\r\n    switch (safeConfig.type) {\r\n      case 'beep':\r\n      case 'chirp':\r\n      case 'ding':\r\n        oscillator.type = 'sine';\r\n        break;\r\n      case 'whoosh':\r\n        oscillator.type = 'sawtooth';\r\n        break;\r\n      case 'thud':\r\n        oscillator.type = 'square';\r\n        break;\r\n      case 'alert':\r\n      case 'error':\r\n        oscillator.type = 'triangle';\r\n        break;\r\n      case 'success':\r\n        oscillator.type = 'sine';\r\n        break;\r\n      case 'ambient':\r\n        oscillator.type = 'sine';\r\n        break;\r\n      default:\r\n        oscillator.type = 'sine';\r\n    }\r\n\r\n    const now = this.audioContext.currentTime;\r\n    const volume = safeConfig.volume * this.masterVolume;\r\n\r\n    // Set frequency\r\n    oscillator.frequency.setValueAtTime(safeConfig.pitch, now);\r\n\r\n    // Configure gain envelope\r\n    gainNode.gain.setValueAtTime(0, now);\r\n    gainNode.gain.linearRampToValueAtTime(volume, now + 0.01); // Quick attack\r\n\r\n    if (safeConfig.fadeOut) {\r\n      gainNode.gain.linearRampToValueAtTime(volume * 0.8, now + safeConfig.duration * 0.7);\r\n      gainNode.gain.exponentialRampToValueAtTime(0.001, now + safeConfig.duration);\r\n    } else {\r\n      gainNode.gain.setValueAtTime(volume, now + safeConfig.duration - 0.02);\r\n      gainNode.gain.linearRampToValueAtTime(0, now + safeConfig.duration);\r\n    }\r\n\r\n    // Special effects for certain sound types\r\n    if (safeConfig.type === 'whoosh') {\r\n      oscillator.frequency.exponentialRampToValueAtTime(safeConfig.pitch * 0.5, now + safeConfig.duration);\r\n    } else if (safeConfig.type === 'alert' || safeConfig.type === 'error') {\r\n      // Oscillating frequency for alerts and errors\r\n      oscillator.frequency.setValueAtTime(safeConfig.pitch, now);\r\n      oscillator.frequency.setValueAtTime(safeConfig.pitch * 1.2, now + 0.1);\r\n      oscillator.frequency.setValueAtTime(safeConfig.pitch, now + 0.2);\r\n    } else if (safeConfig.type === 'success') {\r\n      // Rising frequency for success sounds\r\n      oscillator.frequency.exponentialRampToValueAtTime(safeConfig.pitch * 1.5, now + safeConfig.duration * 0.3);\r\n      oscillator.frequency.exponentialRampToValueAtTime(safeConfig.pitch * 1.2, now + safeConfig.duration);\r\n    }\r\n\r\n    // Start and stop\r\n    oscillator.start(_now);\r\n    oscillator.stop(now + safeConfig.duration);\r\n  }\r\n\r\n  private triggerHaptic(config: HapticConfig) {\r\n    if (!navigator.vibrate || !this.hapticEnabled || !config) return;\r\n\r\n    try {\r\n      // Ensure config has valid values with defaults\r\n      const safePattern = Array.isArray(config.pattern) ? config.pattern : [50];\r\n      const safeIntensity = config.intensity || 'medium';\r\n\r\n      // Scale intensity\r\n      const intensityMultiplier = {\r\n        light: 0.5,\r\n        medium: 1.0,\r\n        strong: 1.5\r\n      }[safeIntensity] || 1.0;\r\n\r\n      const scaledPattern = safePattern\r\n        .filter(duration => typeof duration === 'number' && duration > 0)\r\n        .map(duration => Math.round(Math.max(10, Math.min(1000, duration * intensityMultiplier))));\r\n\r\n      if (scaledPattern.length > 0) {\r\n        navigator.vibrate(_scaledPattern);\r\n      }\r\n    } catch {\r\n      logger.warn('Haptic feedback failed:');\r\n    }\r\n  }\r\n\r\n  // Convenience methods for common console interactions\r\n  onFocus() { this.playSound('focus'); }\r\n  onSelect() { this.playSound('select'); }\r\n  onBack() { this.playSound('back'); }\r\n  onHover() { this.playSound('hover'); }\r\n  onClick() { this.playSound('click'); }\r\n  onAchievement() { this.playSound('achievement'); }\r\n  onLevelUp() { this.playSound('levelUp'); }\r\n  onNotification() { this.playSound('notification'); }\r\n  onEmergency() { this.playSound('emergency'); }\r\n  onWarning() { this.playSound('warning'); }\r\n\r\n  // System sounds\r\n  async playStartup() { \r\n    await this.playSound('startup'); \r\n  }\r\n  \r\n  async playShutdown() { \r\n    await this.playSound('shutdown'); \r\n  }\r\n\r\n  // Mental health specific sounds\r\n  playBreatheIn() { this.playSound('breatheIn'); }\r\n  playBreatheOut() { this.playSound('breatheOut'); }\r\n  playMeditation() { this.playSound('meditation'); }\r\n\r\n  // Method to play a custom sound with proper validation\r\n  async playCustomSound(config: PartialSoundConfig) {\r\n    if (!this.soundEnabled || !this.audioContext) return;\r\n\r\n    const validConfig = this.createSoundConfig(config);\r\n    \r\n    try {\r\n      // Ensure audio context is running\r\n      if (this.audioContext.state === 'suspended') {\r\n        await this.audioContext.resume();\r\n      }\r\n\r\n      // Generate and play the sound\r\n      await this.generateSound(validConfig);\r\n\r\n      // Trigger haptic feedback if available\r\n      if (this.hapticEnabled && validConfig.haptic) {\r\n        this.triggerHaptic(validConfig.haptic);\r\n      }\r\n\r\n    } catch {\r\n      logger.warn('Failed to play custom sound:');\r\n    }\r\n  }\r\n\r\n  // Settings management\r\n  setSoundEnabled(enabled: boolean) {\r\n    this.soundEnabled = enabled;\r\n    localStorage.setItem('console-sound-enabled', JSON.stringify(_enabled));\r\n  }\r\n\r\n  setHapticEnabled(enabled: boolean) {\r\n    this.hapticEnabled = enabled;\r\n    localStorage.setItem('console-haptic-enabled', JSON.stringify(_enabled));\r\n  }\r\n\r\n  setMasterVolume(volume: number) {\r\n    this.masterVolume = Math.max(0, Math.min(1, volume));\r\n    localStorage.setItem('console-master-volume', this.masterVolume.toString());\r\n  }\r\n\r\n  // Getters\r\n  get isSoundEnabled() { return this.soundEnabled; }\r\n  get isHapticEnabled() { return this.hapticEnabled; }\r\n  get currentVolume() { return this.masterVolume; }\r\n\r\n  // Test sound for settings\r\n  async testSound() {\r\n    await this.playSound('select');\r\n  }\r\n\r\n  // Enhanced cleanup with performance optimizations\r\n  dispose() {\r\n    // Clear all sound queues and timers\r\n    this.soundQueue = [];\r\n    this.processingQueue = false;\r\n    \r\n    // Clear audio pools\r\n    this.audioPool.forEach((pool: AudioSource[]) => {\r\n      pool.forEach((source: AudioSource) => {\r\n        try {\r\n          source.stop();\r\n          source.disconnect();\r\n        } catch {\r\n          // Source might already be stopped\r\n        }\r\n      });\r\n    });\r\n    this.audioPool.clear();\r\n    \r\n    // Clear caches\r\n    this.soundCache.clear();\r\n    this.lastSoundTimes.clear();\r\n    \r\n    // Close audio context\r\n    if (this.audioContext) {\r\n      this.audioContext.close();\r\n    }\r\n  }\r\n  \r\n  // New performance optimization methods\r\n  private detectPerformanceMode(): void {\r\n    const memory = (navigator as unknown).deviceMemory;\r\n    const cores = navigator.hardwareConcurrency;\r\n    const connection = (navigator as unknown).connection;\r\n    \r\n    if (memory <= 4 || cores <= 2 || connection?.effectiveType === '2g') {\r\n      this.performanceMode = 'low';\r\n    } else if (memory <= 8 || cores <= 4) {\r\n      this.performanceMode = 'medium';\r\n    } else {\r\n      this.performanceMode = 'high';\r\n    }\r\n  }\r\n  \r\n  private setupAudioPool(): void {\r\n    // Pre-create audio sources for commonly used sounds\r\n    const commonSounds = ['focus', 'select', 'back', 'hover', 'click'];\r\n    \r\n    commonSounds.forEach(_soundName => {\r\n      this.audioPool.set(_soundName, []);\r\n    });\r\n  }\r\n  \r\n  private initializeLowLatencyMode(): void {\r\n    if (this.performanceMode === 'high' && this.audioContext) {\r\n      this.isLowLatencyMode = true;\r\n      this.preGenerateCommonSounds();\r\n    }\r\n  }\r\n  \r\n  private async setupAudioWorklet(): Promise<void> {\r\n    try {\r\n      // This would load a custom audio worklet for ultra-low latency\r\n      // await this.audioContext.audioWorklet.addModule('/audio-worklet.js');\r\n      logger.debug('Audio worklet would be set up here for ultra-low latency', 'ConsoleSoundSystem');\r\n    } catch (_error) {\r\n      logger.debug('Audio worklet not available', 'ConsoleSoundSystem');\r\n    }\r\n  }\r\n  \r\n  private async preGenerateCommonSounds(): Promise<void> {\r\n    const commonSounds: (keyof typeof this.CONSOLE_SOUNDS)[] = ['focus', 'select', 'back'];\r\n    \r\n    for (const _soundName of commonSounds) {\r\n      const soundConfig = this.CONSOLE_SOUNDS[_soundName];\r\n      if (soundConfig) {\r\n        try {\r\n          const _audioBuffer = await this.createAudioBuffer(soundConfig);\r\n          // Store the buffer for instant playback\r\n          this.soundCache.set(String(_soundName), soundConfig);\r\n        } catch {\r\n          logger.warn(`Failed to pre-generate sound: ${String(_soundName)}`, error);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n// @ts-expect-error - AudioBuffer is a global API\n  private async createAudioBuffer(_config: SoundConfig): Promise<AudioBuffer | null> {\r\n    if (!this.audioContext) return null;\r\n    \r\n    // This would create an AudioBuffer for instant playback\r\n    // Implementation would depend on the specific sound generation method\r\n    return null;\r\n  }\r\n  \r\n  private async playBufferedSound(_soundName: string, config: SoundConfig): Promise<void> {\r\n    // Play from pre-generated buffer for lowest latency\r\n    // Fall back to generating if buffer doesn't exist\r\n    await this.generateSound(config);\r\n  }\r\n  \r\n  private queueSound(_soundName: keyof typeof this.CONSOLE_SOUNDS, options?: PartialSoundConfig): void {\r\n    this.soundQueue.push({\r\n      _soundName,\r\n      options,\r\n      timestamp: Date.now()\r\n    });\r\n    \r\n    if (!this.processingQueue) {\r\n      this.processQueuedSounds();\r\n    }\r\n  }\r\n  \r\n  private async processQueuedSounds(): Promise<void> {\r\n    this.processingQueue = true;\r\n    \r\n    while (this.soundQueue.length > 0) {\r\n      const sound = this.soundQueue.shift();\r\n      if (!sound) break;\r\n      \r\n      // Only play sounds that are less than 100ms old\r\n      if (Date.now() - sound.timestamp < 100) {\r\n        await this.playSound(sound._soundName, sound.options);\r\n      }\r\n      \r\n      // Throttle to maintain 60fps\r\n      await new Promise(resolve => setTimeout(resolve, 16));\r\n    }\r\n    \r\n    this.processingQueue = false;\r\n  }\r\n  \r\n  private shouldTriggerHaptic(): boolean {\r\n    // Throttle haptic feedback for better performance\r\n    const lastHaptic = this.lastSoundTimes.get('haptic') || 0;\r\n    const now = Date.now();\r\n    \r\n    if (now - lastHaptic >= 100) { // Max 10 haptic events per second\r\n      this.lastSoundTimes.set('haptic', now);\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n  \r\n  // New getter methods for performance monitoring\r\n  get currentPerformanceMode(): string {\r\n    return this.performanceMode;\r\n  }\r\n  \r\n  get isLowLatencyEnabled(): boolean {\r\n    return this.isLowLatencyMode;\r\n  }\r\n  \r\n  get queueLength(): number {\r\n    return this.soundQueue.length;\r\n  }\r\n  \r\n  // Method to adjust performance mode dynamically\r\n  setPerformanceMode(mode: 'high' | 'medium' | 'low'): void {\r\n    this.performanceMode = mode;\r\n    localStorage.setItem('console-performance-mode', mode);\r\n    \r\n    if (mode === 'low') {\r\n      this.isLowLatencyMode = false;\r\n    } else if (mode === 'high') {\r\n      this.initializeLowLatencyMode();\r\n    }\r\n  }\r\n  \r\n  // Performance metrics\r\n  getPerformanceMetrics(): Record<string, any> {\r\n    return {\r\n      performanceMode: this.performanceMode,\r\n      lowLatencyMode: this.isLowLatencyMode,\r\n      queueLength: this.soundQueue.length,\r\n      cachedSounds: this.soundCache.size,\r\n      audioPoolSize: Array.from(this.audioPool.values()).reduce((total, pool) => total + pool.length, 0),\r\n      soundEnabled: this.soundEnabled,\r\n      hapticEnabled: this.hapticEnabled,\r\n      masterVolume: this.masterVolume\r\n    };\r\n  }\r\n}\r\n\r\n// Global instance\r\nexport const consoleSoundSystem = new ConsoleSoundSystem();\r\n\r\n// React hook for easy access\r\nimport { useEffect, useRef } from 'react';\r\n\r\nexport function useConsoleSound() {\r\n  const soundSystemRef = useRef(_consoleSoundSystem);\r\n\r\n  useEffect(() => {\r\n    const _soundSystem = soundSystemRef.current;\r\n    \r\n    return () => {\r\n      // Cleanup if component unmounts\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    playSound: soundSystemRef.current.playSound.bind(soundSystemRef.current),\r\n    playCustomSound: soundSystemRef.current.playCustomSound.bind(soundSystemRef.current),\r\n    onFocus: soundSystemRef.current.onFocus.bind(soundSystemRef.current),\r\n    onSelect: soundSystemRef.current.onSelect.bind(soundSystemRef.current),\r\n    onBack: soundSystemRef.current.onBack.bind(soundSystemRef.current),\r\n    onHover: soundSystemRef.current.onHover.bind(soundSystemRef.current),\r\n    onClick: soundSystemRef.current.onClick.bind(soundSystemRef.current),\r\n    onAchievement: soundSystemRef.current.onAchievement.bind(soundSystemRef.current),\r\n    onLevelUp: soundSystemRef.current.onLevelUp.bind(soundSystemRef.current),\r\n    onNotification: soundSystemRef.current.onNotification.bind(soundSystemRef.current),\r\n    onEmergency: soundSystemRef.current.onEmergency.bind(soundSystemRef.current),\r\n    onWarning: soundSystemRef.current.onWarning.bind(soundSystemRef.current),\r\n    playBreatheIn: soundSystemRef.current.playBreatheIn.bind(soundSystemRef.current),\r\n    playBreatheOut: soundSystemRef.current.playBreatheOut.bind(soundSystemRef.current),\r\n    playMeditation: soundSystemRef.current.playMeditation.bind(soundSystemRef.current),\r\n    settings: {\r\n      setSoundEnabled: soundSystemRef.current.setSoundEnabled.bind(soundSystemRef.current),\r\n      setHapticEnabled: soundSystemRef.current.setHapticEnabled.bind(soundSystemRef.current),\r\n      setMasterVolume: soundSystemRef.current.setMasterVolume.bind(soundSystemRef.current),\r\n      isSoundEnabled: soundSystemRef.current.isSoundEnabled,\r\n      isHapticEnabled: soundSystemRef.current.isHapticEnabled,\r\n      currentVolume: soundSystemRef.current.currentVolume,\r\n      testSound: soundSystemRef.current.testSound.bind(soundSystemRef.current),\r\n    }\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\crisis\\MockCrisisServer.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":292,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":292,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":468,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":468,"endColumn":22}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Mock Crisis Chat Server - Simulates real crisis counselor interactions\r\n// CRITICAL: This is for DEMO PURPOSES ONLY - Production requires certified counselors\r\n\r\nimport { RealtimeMessage } from '../realtime/websocketService';\r\nimport { logger } from '../../utils/logger';\r\n\r\n// Crisis Counselor Personas with Different Specializations\r\nexport interface MockCounselor {\r\n  id: string;\r\n  name: string;\r\n  credentials: string;\r\n  avatar?: string;\r\n  status: 'available' | 'busy' | 'offline';\r\n  specialties: string[];\r\n  responseTime: number; // seconds\r\n  personality: 'empathetic' | 'solution-focused' | 'trauma-informed' | 'cognitive';\r\n  crisisExperience: number; // years\r\n}\r\n\r\nexport const MOCK_COUNSELORS: MockCounselor[] = [\r\n  {\r\n    id: 'counselor-1',\r\n    name: 'Dr. Sarah Chen',\r\n    credentials: 'LCSW, Crisis Specialist',\r\n    status: 'available',\r\n    specialties: ['Suicide Prevention', 'Depression', 'Anxiety', 'Trauma'],\r\n    responseTime: 30,\r\n    personality: 'empathetic',\r\n    crisisExperience: 8\r\n  },\r\n  {\r\n    id: 'counselor-2',\r\n    name: 'Michael Rodriguez',\r\n    credentials: 'Licensed Crisis Counselor',\r\n    status: 'available',\r\n    specialties: ['Substance Abuse', 'Family Crisis', 'PTSD'],\r\n    responseTime: 45,\r\n    personality: 'solution-focused',\r\n    crisisExperience: 5\r\n  },\r\n  {\r\n    id: 'counselor-3',\r\n    name: 'Dr. Emily Watson',\r\n    credentials: 'PhD, Clinical Psychology',\r\n    status: 'available',\r\n    specialties: ['Bipolar Disorder', 'Panic Disorders', 'Self-Harm'],\r\n    responseTime: 25,\r\n    personality: 'trauma-informed',\r\n    crisisExperience: 12\r\n  },\r\n  {\r\n    id: 'counselor-4',\r\n    name: 'James Thompson',\r\n    credentials: 'MA, Crisis Intervention',\r\n    status: 'available',\r\n    specialties: ['LGBTQ+ Support', 'Teen Crisis', 'Relationship Issues'],\r\n    responseTime: 35,\r\n    personality: 'cognitive',\r\n    crisisExperience: 7\r\n  }\r\n];\r\n\r\n// Crisis Response Templates Based on Assessment Level\r\nexport interface CrisisResponseTemplate {\r\n  level: 'low' | 'medium' | 'high' | 'critical';\r\n  keywords: string[];\r\n  responses: string[];\r\n  escalationActions: string[];\r\n  followUpQuestions: string[];\r\n}\r\n\r\nexport const CRISIS_RESPONSE_TEMPLATES: CrisisResponseTemplate[] = [\r\n  {\r\n    level: 'critical',\r\n    keywords: ['suicide', 'kill myself', 'end it all', 'die', 'death', 'hurt myself', 'pills', 'gun', 'bridge', 'rope'],\r\n    responses: [\r\n      \"I'm really concerned about what you've shared. Your life has value, and I want to help you stay safe right now. Are you in immediate physical danger?\",\r\n      \"Thank you for trusting me with this. I can hear how much pain you're in. Let's work together to keep you safe. Do you have access to means to harm yourself right now?\",\r\n      \"I'm here with you, and I want you to know that these feelings can change. You've reached out, which shows incredible strength. Can you tell me where you are right now?\",\r\n      \"What you're feeling is temporary, even though it doesn't feel that way. I'm going to stay with you through this. Do you have someone who can be with you right now?\"\r\n    ],\r\n    escalationActions: [\r\n      'initiate_emergency_contact',\r\n      'request_location_for_dispatch',\r\n      'connect_to_crisis_specialist',\r\n      'safety_plan_review'\r\n    ],\r\n    followUpQuestions: [\r\n      \"What's your current location?\",\r\n      \"Is there someone you trust who can come be with you?\",\r\n      \"Have you taken any substances today?\",\r\n      \"Do you have access to weapons or means to hurt yourself?\",\r\n      \"What's one small thing that has kept you going until now?\"\r\n    ]\r\n  },\r\n  {\r\n    level: 'high',\r\n    keywords: ['hopeless', 'worthless', 'can\\'t go on', 'give up', 'no point', 'alone', 'nobody cares', 'trapped'],\r\n    responses: [\r\n      \"I can hear how much pain you're in right now. Those feelings of hopelessness are real, but they don't define your worth. Can you tell me more about what's making you feel this way?\",\r\n      \"It sounds like you're going through something really difficult. I want you to know that you're not alone - I'm here with you. What's been the hardest part of today?\",\r\n      \"These feelings of being worthless aren't the truth about who you are. Depression and crisis can make us believe things that aren't accurate. What's one thing you used to enjoy?\",\r\n      \"I hear you saying you feel trapped. That must be overwhelming. Sometimes when we're in crisis, solutions aren't visible. Can we explore what support might be available to you?\"\r\n    ],\r\n    escalationActions: [\r\n      'assess_suicide_risk',\r\n      'explore_support_system',\r\n      'safety_planning',\r\n      'resource_referral'\r\n    ],\r\n    followUpQuestions: [\r\n      \"How long have you been feeling this way?\",\r\n      \"Have you had thoughts of hurting yourself?\",\r\n      \"What usually helps when you're feeling overwhelmed?\",\r\n      \"Who in your life cares about you?\",\r\n      \"What's something small that might help you get through tonight?\"\r\n    ]\r\n  },\r\n  {\r\n    level: 'medium',\r\n    keywords: ['anxious', 'panic', 'scared', 'overwhelmed', 'stressed', 'crying', 'can\\'t cope', 'breaking down'],\r\n    responses: [\r\n      \"It sounds like you're feeling really overwhelmed right now. That's a valid response to stress. Let's work together to help you feel more grounded. Can you tell me what's contributing to these feelings?\",\r\n      \"Panic and anxiety can feel really scary in the moment. You're safe right now, and these feelings will pass. Let's focus on your breathing. Can you take a slow, deep breath with me?\",\r\n      \"I can hear that you're struggling to cope. That takes courage to reach out. What's been the most stressful part of your situation?\",\r\n      \"Crying can actually be really helpful - it's your body's way of releasing stress. You don't have to handle everything alone. What kind of support do you need right now?\"\r\n    ],\r\n    escalationActions: [\r\n      'breathing_exercise',\r\n      'grounding_technique',\r\n      'coping_strategy_review',\r\n      'stress_management'\r\n    ],\r\n    followUpQuestions: [\r\n      \"When did you first start feeling this way?\",\r\n      \"What usually helps you when you're anxious?\",\r\n      \"Have you been sleeping and eating regularly?\",\r\n      \"What's one thing you can do to take care of yourself today?\",\r\n      \"Who in your support network could you reach out to?\"\r\n    ]\r\n  },\r\n  {\r\n    level: 'low',\r\n    keywords: ['sad', 'worried', 'upset', 'confused', 'lonely', 'tired', 'frustrated', 'down'],\r\n    responses: [\r\n      \"Thank you for sharing how you're feeling. It's completely normal to have ups and downs. Sometimes talking through what's bothering us can really help. What's been on your mind lately?\",\r\n      \"I hear that you're going through a difficult time. It's good that you're reaching out for support. What's been the most challenging part of your day?\",\r\n      \"Feeling sad or worried is part of being human. These _emotions are valid, and they're telling us something important. Can you tell me more about what's troubling you?\",\r\n      \"It sounds like you might be dealing with some stress or changes in your life. That can be really draining. What's been different or difficult recently?\"\r\n    ],\r\n    escalationActions: [\r\n      'active_listening',\r\n      'emotional_validation',\r\n      'coping_resource_sharing',\r\n      'self_care_planning'\r\n    ],\r\n    followUpQuestions: [\r\n      \"What's been the highlight of your week?\",\r\n      \"How has your sleep been?\",\r\n      \"What activities usually make you feel better?\",\r\n      \"Who are the people you feel closest to?\",\r\n      \"What's one thing you're looking forward to?\"\r\n    ]\r\n  }\r\n];\r\n\r\n// Emergency Protocol Actions\r\nexport interface EmergencyProtocol {\r\n  trigger: string;\r\n  action: string;\r\n  message: string;\r\n  immediateResponse: boolean;\r\n}\r\n\r\nexport const EMERGENCY_PROTOCOLS: EmergencyProtocol[] = [\r\n  {\r\n    trigger: 'imminent_suicide_risk',\r\n    action: 'auto_dial_988',\r\n    message: '🚨 EMERGENCY: I need to connect you with emergency services immediately. I\\'m initiating a call to 988 Crisis Lifeline.',\r\n    immediateResponse: true\r\n  },\r\n  {\r\n    trigger: 'substance_overdose',\r\n    action: 'auto_dial_911',\r\n    message: '🚨 MEDICAL EMERGENCY: Based on what you\\'ve shared, this is a medical emergency. I\\'m calling 911.',\r\n    immediateResponse: true\r\n  },\r\n  {\r\n    trigger: 'domestic_violence',\r\n    action: 'safety_protocol',\r\n    message: '⚠️ SAFETY CONCERN: I\\'m concerned about your safety. Let me help you connect with specialized domestic violence support.',\r\n    immediateResponse: true\r\n  },\r\n  {\r\n    trigger: 'child_abuse',\r\n    action: 'mandatory_reporting',\r\n    message: '⚠️ CHILD SAFETY: I\\'m required by law to report concerns about child safety. Let me connect you with child protective services.',\r\n    immediateResponse: true\r\n  }\r\n];\r\n\r\n// Mock Crisis Server Class\r\nexport class MockCrisisServer {\r\n  private static instance: MockCrisisServer;\r\n  private activeSessions: Map<string, MockCrisisSession> = new Map();\r\n  private counselorPool: MockCounselor[] = [...MOCK_COUNSELORS];\r\n  private emergencyCallbacks: ((action: string, data: unknown) => void)[] = [];\r\n\r\n  private constructor() {\r\n    this.initializeServer();\r\n  }\r\n\r\n  public static getInstance(): MockCrisisServer {\r\n    if (!MockCrisisServer.instance) {\r\n      MockCrisisServer.instance = new MockCrisisServer();\r\n    }\r\n    return MockCrisisServer.instance;\r\n  }\r\n\r\n  private initializeServer(): void {\r\n    logger.info('🟢 Mock Crisis Server initialized with', this.counselorPool.length, 'counselors');\r\n  }\r\n\r\n  // Register emergency callback for auto-dial functionality\r\n  public onEmergency(callback: (action: string, data: unknown) => void): void {\r\n    this.emergencyCallbacks.push(callback);\r\n  }\r\n\r\n  // Create new crisis session\r\n  public createCrisisSession(userId: string, priority: 'low' | 'medium' | 'high' | 'critical' = 'medium'): MockCrisisSession {\r\n    const _sessionId = `crisis-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    // Assign best available counselor\r\n    const counselor = this.assignCounselor(priority);\r\n    \r\n    const session = new MockCrisisSession(_sessionId, userId, counselor, priority);\r\n    this.activeSessions.set(_sessionId, session);\r\n\r\n    // Set up emergency protocols\r\n    session.onEmergency((action, data) => {\r\n      this.triggerEmergencyProtocol(action, data);\r\n    });\r\n\r\n    logger.crisis(`Crisis session ${_sessionId} created with counselor ${counselor.name}`, 'medium', 'MockCrisisServer', { _sessionId, counselor: counselor.name });\r\n    return session;\r\n  }\r\n\r\n  // Assign counselor based on priority and availability\r\n  private assignCounselor(priority: string): MockCounselor {\r\n    const availableCounselors = this.counselorPool.filter(c => c.status === 'available');\r\n    \r\n    if (availableCounselors.length === 0) {\r\n      // Fallback - use first counselor and mark as busy\r\n      logger.warn('⚠️ No available counselors - using fallback');\r\n      return this.counselorPool[0]!;\r\n    }\r\n\r\n    // For critical cases, assign most experienced counselor\r\n    if (priority === 'critical') {\r\n      return availableCounselors.reduce((best, current) => \r\n        current.crisisExperience > best.crisisExperience ? current : best\r\n      );\r\n    }\r\n\r\n    // For high priority, prefer trauma-informed or empathetic counselors\r\n    if (priority === 'high') {\r\n      const preferred = availableCounselors.filter(c => \r\n        c.personality === 'trauma-informed' || c.personality === 'empathetic'\r\n      );\r\n      if (preferred.length > 0) {\r\n        return preferred[Math.floor(Math.random() * preferred.length)]!;\r\n      }\r\n    }\r\n\r\n    // Default - assign based on shortest response time\r\n    return availableCounselors.reduce((fastest, current) => \r\n      current.responseTime < fastest.responseTime ? current : fastest\r\n    );\r\n  }\r\n\r\n  // Trigger emergency protocol\r\n  private triggerEmergencyProtocol(action: string, data: unknown): void {\r\n    const protocol = EMERGENCY_PROTOCOLS.find(p => p.action === action);\r\n    if (!protocol) return;\r\n\r\n    logger.error('🚨 EMERGENCY PROTOCOL TRIGGERED:', action, data);\r\n\r\n    // Execute emergency callbacks\r\n    this.emergencyCallbacks.forEach(callback => {\r\n      try {\r\n        callback(action, { ...data, protocol });\r\n      } catch (_error) {\r\n        logger.error('Emergency callback failed:');\r\n      }\r\n    });\r\n\r\n    // Immediate response actions\r\n    if (protocol.immediateResponse) {\r\n      if (action === 'auto_dial_988') {\r\n        this.initiateEmergencyCall('988', 'Suicide & Crisis Lifeline');\r\n      } else if (action === 'auto_dial_911') {\r\n        this.initiateEmergencyCall('911', 'Emergency Services');\r\n      }\r\n    }\r\n  }\r\n\r\n  // Simulate emergency call initiation\r\n  private initiateEmergencyCall(number: string, service: string): void {\r\n    logger.crisis(`INITIATING EMERGENCY CALL: ${service} (${number})`, 'critical', 'MockCrisisServer', { service, number });\r\n    \r\n    // In production, this would interface with actual emergency services\r\n    // For demo, we simulate the call initiation\r\n    \r\n    setTimeout(() => {\r\n      alert(`🚨 EMERGENCY CALL INITIATED\\n\\nService: ${service}\\nNumber: ${number}\\n\\nThis is a simulation - in production, real emergency services would be contacted.`);\r\n      \r\n      // Actually trigger the tel: link\r\n      if (typeof window !== 'undefined') {\r\n        window.location.href = `tel:${number}`;\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  // Get session\r\n  public getSession(_sessionId: string): MockCrisisSession | undefined {\r\n    return this.activeSessions.get(_sessionId);\r\n  }\r\n\r\n  // End session\r\n  public endSession(_sessionId: string): void {\r\n    const session = this.activeSessions.get(_sessionId);\r\n    if (session) {\r\n      session.end();\r\n      this.activeSessions.delete(_sessionId);\r\n    }\r\n  }\r\n\r\n  // Get server statistics\r\n  public getStats(): {\r\n    activeSessions: number;\r\n    availableCounselors: number;\r\n    totalCounselors: number;\r\n  } {\r\n    return {\r\n      activeSessions: this.activeSessions.size,\r\n      availableCounselors: this.counselorPool.filter(c => c.status === 'available').length,\r\n      totalCounselors: this.counselorPool.length\r\n    };\r\n  }\r\n}\r\n\r\n// Mock Crisis Session Class\r\nexport class MockCrisisSession {\r\n  private messageCallbacks: ((message: RealtimeMessage) => void)[] = [];\r\n  private emergencyCallbacks: ((action: string, data: unknown) => void)[] = [];\r\n  private typingCallbacks: ((isTyping: boolean) => void)[] = [];\r\n  private messages: RealtimeMessage[] = [];\r\n  private isActive: boolean = true;\r\n  private typingTimeout: NodeJS.Timeout | null = null;\r\n  private responseAnalyzer: CrisisMessageAnalyzer;\r\n  \r\n  constructor(\r\n    public readonly _sessionId: string,\r\n    public readonly userId: string,\r\n    public readonly counselor: MockCounselor,\r\n    public readonly priority: string\r\n  ) {\r\n    this.responseAnalyzer = new CrisisMessageAnalyzer();\r\n    this.startSession();\r\n  }\r\n\r\n  private startSession(): void {\r\n    // Send welcome message\r\n    setTimeout(() => {\r\n      const _welcomeMessage = this.generateWelcomeMessage();\r\n      this.sendCounselorMessage(_welcomeMessage);\r\n    }, 1000);\r\n  }\r\n\r\n  private generateWelcomeMessage(): string {\r\n    const messages = [\r\n      `Hi, I'm ${this.counselor.name}, a ${this.counselor.credentials}. I'm here to listen and support you. You've taken a brave step by reaching out. How are you feeling right now?`,\r\n      `Hello, my name is ${this.counselor.name}. I'm a crisis counselor with expertise in ${this.counselor.specialties.slice(0, 2).join(' and ')}. I want you to know that this is a safe, confidential space. What brought you here today?`,\r\n      `I'm ${this.counselor.name}, and I'm glad you reached out. It takes courage to ask for help. I have experience with ${this.counselor.specialties[0]?.toLowerCase() || 'crisis counseling'} and I'm here to support you through this. What's going on for you right now?`,\r\n    ];\r\n\r\n    return messages[Math.floor(Math.random() * messages.length)]!;\r\n  }\r\n\r\n  // Send message to counselor (from user)\r\n  public sendMessage(content: string): void {\r\n    if (!this.isActive) return;\r\n\r\n    const _userMessage: RealtimeMessage = {\r\n      id: `msg-${Date.now()}`,\r\n      roomId: this.sessionId,\r\n      userId: this.userId,\r\n      username: 'You',\r\n      content,\r\n      timestamp: new Date(),\r\n      type: 'text'\r\n    };\r\n\r\n    this.messages.push(_userMessage);\r\n\r\n    // Analyze message for crisis indicators\r\n    const analysis = this.responseAnalyzer.analyzeMessage(_content);\r\n    \r\n    // Trigger emergency protocols if needed\r\n    if (analysis.emergencyLevel === 'critical') {\r\n      this.triggerEmergency(analysis);\r\n    }\r\n\r\n    // Generate counselor response with realistic delay\r\n    this.generateCounselorResponse(content, analysis);\r\n  }\r\n\r\n  private generateCounselorResponse(_userMessage: string, analysis: unknown): void {\r\n    // Show typing indicator\r\n    this.startTyping();\r\n\r\n    // Realistic response delay based on counselor and message complexity\r\n    const baseDelay = this.counselor.responseTime * 1000; // Convert to milliseconds\r\n    const complexityDelay = _userMessage.length * 20; // More complex messages take longer\r\n    const totalDelay = baseDelay + complexityDelay + Math.random() * 2000; // Add some randomness\r\n\r\n    setTimeout(() => {\r\n      this.stopTyping();\r\n      \r\n      const response = this.responseAnalyzer.generateResponse(\r\n        _userMessage,\r\n        analysis,\r\n        this.counselor,\r\n        this.messages\r\n      );\r\n\r\n      this.sendCounselorMessage(response);\r\n\r\n      // Follow up questions for critical situations\r\n      if (analysis.crisisLevel === 'critical' || analysis.crisisLevel === 'high') {\r\n        setTimeout(() => {\r\n          const _followUp = this.responseAnalyzer.generateFollowUp(analysis, this.counselor);\r\n          if (_followUp) {\r\n            this.sendCounselorMessage(_followUp);\r\n          }\r\n        }, 3000);\r\n      }\r\n    }, Math.min(totalDelay, 10000)); // Cap at 10 seconds maximum\r\n  }\r\n\r\n  private sendCounselorMessage(content: string): void {\r\n    const _counselorMessage: RealtimeMessage = {\r\n      id: `msg-${Date.now()}`,\r\n      roomId: this.sessionId,\r\n      userId: this.counselor.id,\r\n      username: this.counselor.name,\r\n      content,\r\n      timestamp: new Date(),\r\n      type: 'text'\r\n    };\r\n\r\n    this.messages.push(_counselorMessage);\r\n    \r\n    // Notify message callbacks\r\n    this.messageCallbacks.forEach(callback => {\r\n      try {\r\n        callback(_counselorMessage);\r\n      } catch (_error) {\r\n        logger.error('Message callback failed:');\r\n      }\r\n    });\r\n  }\r\n\r\n  private startTyping(): void {\r\n    this.typingCallbacks.forEach(callback => callback(true));\r\n    \r\n    // Auto-stop typing after a reasonable time\r\n    if (this.typingTimeout) clearTimeout(this.typingTimeout);\r\n    this.typingTimeout = setTimeout(() => {\r\n      this.stopTyping();\r\n    }, 30000);\r\n  }\r\n\r\n  private stopTyping(): void {\r\n    if (this.typingTimeout) {\r\n      clearTimeout(this.typingTimeout);\r\n      this.typingTimeout = null;\r\n    }\r\n    this.typingCallbacks.forEach(callback => callback(false));\r\n  }\r\n\r\n  private triggerEmergency(analysis: unknown): void {\r\n    logger.error('🚨 EMERGENCY TRIGGERED:', analysis);\r\n    \r\n    this.emergencyCallbacks.forEach(callback => {\r\n      callback('crisis_escalation', {\r\n        _sessionId: this._sessionId,\r\n        userId: this.userId,\r\n        counselor: this.counselor,\r\n        analysis,\r\n        timestamp: new Date()\r\n      });\r\n    });\r\n\r\n    // Immediate emergency response\r\n    if (analysis.indicators.includes('suicide_plan') || analysis.indicators.includes('immediate_danger')) {\r\n      this.emergencyCallbacks.forEach(callback => {\r\n        callback('auto_dial_988', {\r\n          reason: 'Imminent suicide risk detected',\r\n          _sessionId: this._sessionId\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  // Event handlers\r\n  public onMessage(callback: (message: RealtimeMessage) => void): void {\r\n    this.messageCallbacks.push(callback);\r\n  }\r\n\r\n  public onEmergency(callback: (action: string, data: unknown) => void): void {\r\n    this.emergencyCallbacks.push(callback);\r\n  }\r\n\r\n  public onTyping(callback: (isTyping: boolean) => void): void {\r\n    this.typingCallbacks.push(callback);\r\n  }\r\n\r\n  public end(): void {\r\n    this.isActive = false;\r\n    if (this.typingTimeout) {\r\n      clearTimeout(this.typingTimeout);\r\n    }\r\n    \r\n    // Send session end message\r\n    this.sendCounselorMessage(\r\n      \"Thank you for sharing with me today. Remember, you can reach out anytime you need support. Take care of yourself, and please don't hesitate to call 988 if you need immediate help.\"\r\n    );\r\n  }\r\n\r\n  public getMessages(): RealtimeMessage[] {\r\n    return [...this.messages];\r\n  }\r\n\r\n  public isSessionActive(): boolean {\r\n    return this.isActive;\r\n  }\r\n}\r\n\r\n// Crisis Message Analyzer - AI-like response generation\r\nclass CrisisMessageAnalyzer {\r\n  public analyzeMessage(content: string): {\r\n    crisisLevel: 'low' | 'medium' | 'high' | 'critical';\r\n    emergencyLevel: 'none' | 'moderate' | 'high' | 'critical';\r\n    indicators: string[];\r\n    _emotions: string[];\r\n    riskFactors: string[];\r\n  } {\r\n    const lowerContent = content.toLowerCase();\r\n    const indicators: string[] = [];\r\n    const _emotions: string[] = [];\r\n    const riskFactors: string[] = [];\r\n    \r\n    // Analyze for crisis keywords\r\n    let crisisScore = 0;\r\n    let emergencyScore = 0;\r\n\r\n    // Critical indicators\r\n    const suicideKeywords = ['kill myself', 'want to die', 'end it all', 'suicide', 'not worth living'];\r\n    const planKeywords = ['plan to', 'going to', 'pills', 'gun', 'bridge', 'rope', 'tonight'];\r\n    const immediateKeywords = ['right now', 'can\\'t take it', 'goodbye', 'final message'];\r\n\r\n    suicideKeywords.forEach(_keyword => {\r\n      if (lowerContent.includes(_keyword)) {\r\n        indicators.push('suicide_ideation');\r\n        crisisScore += 10;\r\n        emergencyScore += 5;\r\n      }\r\n    });\r\n\r\n    planKeywords.forEach(_keyword => {\r\n      if (lowerContent.includes(_keyword) && suicideKeywords.some(_sk => lowerContent.includes(_sk))) {\r\n        indicators.push('suicide_plan');\r\n        crisisScore += 20;\r\n        emergencyScore += 15;\r\n      }\r\n    });\r\n\r\n    immediateKeywords.forEach(_keyword => {\r\n      if (lowerContent.includes(_keyword)) {\r\n        indicators.push('immediate_danger');\r\n        crisisScore += 15;\r\n        emergencyScore += 20;\r\n      }\r\n    });\r\n\r\n    // Emotional indicators\r\n    const _emotionMap: { [key: string]: { emotion: string; weight: number } } = {\r\n      'hopeless': { emotion: 'hopelessness', weight: 8 },\r\n      'worthless': { emotion: 'low_self_worth', weight: 6 },\r\n      'alone': { emotion: 'isolation', weight: 4 },\r\n      'scared': { emotion: 'fear', weight: 3 },\r\n      'overwhelmed': { emotion: 'overwhelm', weight: 5 },\r\n      'trapped': { emotion: 'trapped', weight: 7 },\r\n      'panic': { emotion: 'panic', weight: 5 }\r\n    };\r\n\r\n    Object.entries(_emotionMap).forEach(([_keyword, data]) => {\r\n      if (lowerContent.includes(_keyword)) {\r\n        _emotions.push(data.emotion);\r\n        crisisScore += data.weight;\r\n      }\r\n    });\r\n\r\n    // Risk factors\r\n    const _riskFactorMap: { [key: string]: { factor: string; weight: number } } = {\r\n      'drinking': { factor: 'substance_use', weight: 4 },\r\n      'drugs': { factor: 'substance_use', weight: 4 },\r\n      'lost my job': { factor: 'employment_loss', weight: 3 },\r\n      'broke up': { factor: 'relationship_loss', weight: 3 },\r\n      'no friends': { factor: 'social_isolation', weight: 5 },\r\n      'abuse': { factor: 'abuse_history', weight: 6 }\r\n    };\r\n\r\n    Object.entries(_riskFactorMap).forEach(([_keyword, data]) => {\r\n      if (lowerContent.includes(_keyword)) {\r\n        riskFactors.push(data.factor);\r\n        crisisScore += data.weight;\r\n      }\r\n    });\r\n\r\n    // Determine crisis level\r\n    let crisisLevel: 'low' | 'medium' | 'high' | 'critical';\r\n    if (crisisScore >= 30) crisisLevel = 'critical';\r\n    else if (crisisScore >= 20) crisisLevel = 'high';\r\n    else if (crisisScore >= 10) crisisLevel = 'medium';\r\n    else crisisLevel = 'low';\r\n\r\n    // Determine emergency level\r\n    let emergencyLevel: 'none' | 'moderate' | 'high' | 'critical';\r\n    if (emergencyScore >= 25) emergencyLevel = 'critical';\r\n    else if (emergencyScore >= 15) emergencyLevel = 'high';\r\n    else if (emergencyScore >= 5) emergencyLevel = 'moderate';\r\n    else emergencyLevel = 'none';\r\n\r\n    return {\r\n      crisisLevel,\r\n      emergencyLevel,\r\n      indicators,\r\n      _emotions,\r\n      riskFactors\r\n    };\r\n  }\r\n\r\n  public generateResponse(\r\n    _userMessage: string,\r\n    analysis: unknown,\r\n    counselor: MockCounselor,\r\n    _messageHistory: RealtimeMessage[]\r\n  ): string {\r\n    const templates = CRISIS_RESPONSE_TEMPLATES.find(t => t.level === analysis.crisisLevel);\r\n    if (!templates) {\r\n      return \"I hear what you're saying. Can you tell me more about how you're feeling?\";\r\n    }\r\n\r\n    // Personalize response based on counselor personality\r\n    let baseResponse = templates.responses[Math.floor(Math.random() * templates.responses.length)] || \r\n                      \"I hear what you're saying. Can you tell me more about how you're feeling?\";\r\n\r\n    // Add personality-specific modifications\r\n    if (counselor.personality === 'empathetic') {\r\n      baseResponse = this.addEmpathy(baseResponse, analysis._emotions ?? []);\r\n    } else if (counselor.personality === 'solution-focused') {\r\n      baseResponse = this.addSolutionFocus(_baseResponse);\r\n    } else if (counselor.personality === 'trauma-informed') {\r\n      baseResponse = this.addTraumaAwareness(_baseResponse);\r\n    }\r\n\r\n    return baseResponse || 'I understand you are going through a difficult time. Can you tell me more about what you are experiencing?';\r\n  }\r\n\r\n  public generateFollowUp(analysis: unknown, _counselor: MockCounselor): string | null {\r\n    const templates = CRISIS_RESPONSE_TEMPLATES.find(t => t.level === analysis.crisisLevel);\r\n    if (!templates || templates.followUpQuestions.length === 0) return null;\r\n\r\n    const question = templates.followUpQuestions[Math.floor(Math.random() * templates.followUpQuestions.length)];\r\n    return question || null;\r\n  }\r\n\r\n  private addEmpathy(response: string, _emotions: string[]): string {\r\n    const empathyPhrases = [\r\n      \"I can really hear the pain in your words.\",\r\n      \"That sounds incredibly difficult.\",\r\n      \"I want you to know that your feelings are completely valid.\",\r\n      \"It takes so much courage to share what you've shared with me.\"\r\n    ];\r\n\r\n    const phrase = empathyPhrases[Math.floor(Math.random() * empathyPhrases.length)];\r\n    return `${phrase} ${response}`;\r\n  }\r\n\r\n  private addSolutionFocus(response: string): string {\r\n    const solutionPhrases = [\r\n      \"Let's work together to find some steps forward.\",\r\n      \"I wonder what small step we might take to help you feel a bit better.\",\r\n      \"What's worked for you in the past when you've felt this way?\"\r\n    ];\r\n\r\n    const phrase = solutionPhrases[Math.floor(Math.random() * solutionPhrases.length)];\r\n    return `${response} ${phrase}`;\r\n  }\r\n\r\n  private addTraumaAwareness(response: string): string {\r\n    const traumaPhrases = [\r\n      \"I want you to feel safe in this space.\",\r\n      \"You have control over how much you share.\",\r\n      \"Your body and mind have been through a lot.\"\r\n    ];\r\n\r\n    const phrase = traumaPhrases[Math.floor(Math.random() * traumaPhrases.length)];\r\n    return `${phrase} ${response}`;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const _mockCrisisServer = MockCrisisServer.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\crisis\\MockWebSocketAdapter.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":12,"column":42,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":12,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":300,"column":37,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":300,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":307,"column":38,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":307,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":320,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":320,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":336,"column":55,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":336,"endColumn":63}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Mock WebSocket Adapter - Seamlessly integrates MockCrisisServer with existing WebSocket interface\r\n// Provides realistic demo functionality without requiring backend services\r\n\r\nimport { RealtimeMessage } from '../realtime/websocketService';\r\nimport { mockCrisisServer, MockCrisisSession, MockCounselor } from './MockCrisisServer';\r\nimport { toast } from 'react-hot-toast';\r\nimport { logger } from '../../utils/logger';\r\n\r\n// Mock WebSocket Adapter that mimics the real WebSocketService interface\r\nexport class MockWebSocketAdapter {\r\n  private static instance: MockWebSocketAdapter;\r\n  private eventHandlers: Map<string, Set<Function>> = new Map();\r\n  private isConnected: boolean = false;\r\n  private currentUserId: string | null = null;\r\n  private activeSessions: Map<string, MockCrisisSession> = new Map();\r\n  private connectionSimulationTimeout: NodeJS.Timeout | null = null;\r\n\r\n  private constructor() {\r\n    this.setupMockCrisisServer();\r\n  }\r\n\r\n  public static getInstance(): MockWebSocketAdapter {\r\n    if (!MockWebSocketAdapter.instance) {\r\n      MockWebSocketAdapter.instance = new MockWebSocketAdapter();\r\n    }\r\n    return MockWebSocketAdapter.instance;\r\n  }\r\n\r\n  // Setup mock crisis server event handlers\r\n  private setupMockCrisisServer(): void {\r\n    mockCrisisServer.onEmergency((action: string, data: unknown) => {\r\n      this.handleEmergencyProtocol(action, data);\r\n    });\r\n  }\r\n\r\n  // Simulate WebSocket connection\r\n  public async connect(userId: string, _token: string): Promise<void> {\r\n    return new Promise((resolve, _reject) => {\r\n      if (this.isConnected) {\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      this.currentUserId = userId;\r\n\r\n      // Simulate connection delay\r\n      this.connectionSimulationTimeout = setTimeout(() => {\r\n        this.isConnected = true;\r\n        logger.info('Mock WebSocket connected successfully', 'MockWebSocketAdapter');\r\n        \r\n        this.emit('connection:established', { userId });\r\n        toast.success('Connected to crisis support system');\r\n        \r\n        resolve();\r\n      }, 1000 + Math.random() * 2000); // 1-3 second delay\r\n    });\r\n  }\r\n\r\n  // Simulate joining a crisis room\r\n  public async joinRoom(_roomId: string): Promise<void> {\r\n    return new Promise((resolve) => {\r\n      if (!this.isConnected) {\r\n        throw new Error('Not connected to server');\r\n      }\r\n\r\n      // Simulate join delay\r\n      setTimeout(() => {\r\n        this.emit('room:joined', _roomId);\r\n        logger.info(`Joined room: ${_roomId}`, 'MockWebSocketAdapter');\r\n        resolve();\r\n      }, 500);\r\n    });\r\n  }\r\n\r\n  // Simulate leaving a room\r\n  public leaveRoom(_roomId: string): void {\r\n    if (!this.isConnected) return;\r\n    \r\n    // End any active crisis sessions\r\n    const session = this.activeSessions.get(_roomId);\r\n    if (session) {\r\n      session.end();\r\n      this.activeSessions.delete(_roomId);\r\n    }\r\n\r\n    this.emit('room:left', _roomId);\r\n    logger.info(`Left room: ${_roomId}`, 'MockWebSocketAdapter');\r\n  }\r\n\r\n  // Create and join a crisis session\r\n  public async createCrisisSession(priority: 'low' | 'medium' | 'high' | 'critical' = 'medium'): Promise<{\r\n    _sessionId: string;\r\n    counselor: MockCounselor;\r\n  }> {\r\n    if (!this.currentUserId) {\r\n      throw new Error('User not authenticated');\r\n    }\r\n\r\n    // Create crisis session through mock server\r\n    const session = mockCrisisServer.createCrisisSession(this.currentUserId, priority);\r\n    this.activeSessions.set(session.sessionId, session);\r\n\r\n    // Setup session event handlers\r\n    session.onMessage((message: RealtimeMessage) => {\r\n      this.emit('message:new', message);\r\n    });\r\n\r\n    session.onTyping((_isTyping: boolean) => {\r\n      if (_isTyping) {\r\n        this.emit('typing:start', {\r\n          userId: session.counselor.id,\r\n          username: session.counselor.name,\r\n          _roomId: session._sessionId\r\n        });\r\n      } else {\r\n        this.emit('typing:stop', {\r\n          userId: session.counselor.id,\r\n          username: session.counselor.name,\r\n          _roomId: session._sessionId\r\n        });\r\n      }\r\n    });\r\n\r\n    session.onEmergency((action: string, data: unknown) => {\r\n      this.emit('crisis:escalated', { action, data, _sessionId: session._sessionId });\r\n    });\r\n\r\n    // Join the room\r\n    await this.joinRoom(session.sessionId);\r\n\r\n    // Simulate counselor assignment process\r\n    setTimeout(() => {\r\n      this.emit('counselor:assigned', {\r\n        id: session.counselor.id,\r\n        name: session.counselor.name,\r\n        credentials: session.counselor.credentials,\r\n        specialties: session.counselor.specialties,\r\n        responseTime: session.counselor.responseTime\r\n      });\r\n    }, 2000);\r\n\r\n    // Simulate queue position updates\r\n    this.simulateQueueUpdates(session.sessionId);\r\n\r\n    return {\r\n      _sessionId: session._sessionId,\r\n      counselor: session.counselor\r\n    };\r\n  }\r\n\r\n  // Simulate queue position updates before counselor assignment\r\n  private simulateQueueUpdates(_sessionId: string): void {\r\n    let position = Math.floor(Math.random() * 5) + 1; // 1-5 position\r\n    let estimatedWait = position * 30; // 30 seconds per position\r\n\r\n    const updateQueue = () => {\r\n      if (position > 1) {\r\n        this.emit('queue:update', {\r\n          position,\r\n          estimatedWait\r\n        });\r\n\r\n        position--;\r\n        estimatedWait = Math.max(30, estimatedWait - 30);\r\n\r\n        setTimeout(updateQueue, 2000 + Math.random() * 3000); // 2-5 seconds between updates\r\n      }\r\n    };\r\n\r\n    // Start queue simulation only if there's a queue\r\n    if (position > 1) {\r\n      setTimeout(updateQueue, 1000);\r\n    }\r\n  }\r\n\r\n  // Send message to crisis session\r\n  public sendMessage(_roomId: string, content: string, _type: 'text' | 'system' = 'text'): void {\r\n    const session = this.activeSessions.get(_roomId);\r\n    if (!session) {\r\n      logger.warn(`No active session found for room: ${_roomId}`);\r\n      return;\r\n    }\r\n\r\n    // Send message to mock crisis session\r\n    session.sendMessage(_content);\r\n  }\r\n\r\n  // Send typing indicator\r\n  public sendTypingIndicator(_roomId: string, _isTyping: boolean): void {\r\n    // Mock typing indicators are handled automatically by the crisis session\r\n    // This is a no-op in the mock implementation\r\n  }\r\n\r\n  // Handle emergency protocols\r\n  private handleEmergencyProtocol(action: string, data: unknown): void {\r\n    logger.error('🚨 EMERGENCY PROTOCOL TRIGGERED:', action, data);\r\n\r\n    switch (_action) {\r\n      case 'auto_dial_988':\r\n        this.triggerEmergencyCall('988', 'Suicide & Crisis Lifeline', data);\r\n        break;\r\n      case 'auto_dial_911':\r\n        this.triggerEmergencyCall('911', 'Emergency Services', data);\r\n        break;\r\n      case 'crisis_escalation':\r\n        this.handleCrisisEscalation(data);\r\n        break;\r\n      default:\r\n        logger.warn('Unknown emergency action:', action);\r\n    }\r\n\r\n    // Emit crisis event for UI handling\r\n    this.emit('crisis:emergency', { action, data });\r\n  }\r\n\r\n  // Trigger emergency call\r\n  private triggerEmergencyCall(number: string, service: string, data: unknown): void {\r\n    // Show immediate emergency modal\r\n    const emergencyMessage = {\r\n      id: `emergency-${Date.now()}`,\r\n      _roomId: data.sessionId || 'system',\r\n      userId: 'system',\r\n      username: 'Emergency System',\r\n      content: `🚨 EMERGENCY PROTOCOL ACTIVATED\\n\\nI'm initiating an emergency call to ${service} (${number}) based on your situation. This is for your immediate safety.\\n\\nIf you're in immediate danger, please call ${number} directly or go to your nearest emergency room.`,\r\n      timestamp: new Date(),\r\n      _type: 'crisis-alert' as const\r\n    };\r\n\r\n    this.emit('message:new', emergencyMessage);\r\n\r\n    // Simulate emergency call initiation after brief delay\r\n    setTimeout(() => {\r\n      // Show browser alert with emergency information\r\n      const _alertMessage = `🚨 EMERGENCY CALL INITIATED\\n\\nService: ${service}\\nNumber: ${number}\\n\\n⚠️ IMPORTANT: This is a demonstration system.\\nIn a real emergency, please call ${number} immediately.\\n\\nPressing OK will simulate dialing ${number}.`;\r\n      \r\n      if (confirm(_alertMessage)) {\r\n        // Actually initiate the phone call\r\n        if (typeof window !== 'undefined') {\r\n          window.location.href = `tel:${number}`;\r\n        }\r\n      }\r\n    }, 2000);\r\n\r\n    // Log emergency event\r\n    logger.error(`📞 EMERGENCY CALL: ${service} (${number}) - Session: ${data._sessionId}`);\r\n  }\r\n\r\n  // Handle crisis escalation\r\n  private handleCrisisEscalation(data: unknown): void {\r\n    const escalationMessage = {\r\n      id: `escalation-${Date.now()}`,\r\n      _roomId: data.sessionId || 'system',\r\n      userId: 'system',\r\n      username: 'Crisis Team',\r\n      content: '🆘 CRISIS ESCALATION: Your situation has been escalated to our emergency response team. A crisis specialist is being notified immediately. Please stay on the line.',\r\n      timestamp: new Date(),\r\n      _type: 'crisis-alert' as const\r\n    };\r\n\r\n    this.emit('message:new', escalationMessage);\r\n\r\n    // Simulate crisis specialist joining\r\n    setTimeout(() => {\r\n      const specialistMessage = {\r\n        id: `specialist-${Date.now()}`,\r\n        _roomId: data.sessionId || 'system',\r\n        userId: 'crisis-specialist',\r\n        username: 'Dr. Crisis Specialist',\r\n        content: 'Hello, I\\'m Dr. Martinez, a crisis intervention specialist. I\\'ve been notified of your situation and I\\'m here to help. Your safety is our absolute priority. Can you tell me your current location?',\r\n        timestamp: new Date(),\r\n        _type: 'text' as const\r\n      };\r\n\r\n      this.emit('message:new', specialistMessage);\r\n    }, 3000);\r\n  }\r\n\r\n  // Simulate connection loss and recovery\r\n  public simulateConnectionLoss(): void {\r\n    if (!this.isConnected) return;\r\n\r\n    this.isConnected = false;\r\n    this.emit('connection:lost', { reason: 'Network disruption' });\r\n    toast.error('Connection lost. Attempting to reconnect...');\r\n\r\n    // Simulate reconnection after 3-8 seconds\r\n    setTimeout(() => {\r\n      this.isConnected = true;\r\n      this.emit('connection:established', { userId: this.currentUserId });\r\n      toast.success('Connection restored');\r\n      \r\n      // Re-establish active sessions\r\n      this.activeSessions.forEach((session, _sessionId) => {\r\n        this.emit('room:joined', _sessionId);\r\n      });\r\n    }, 3000 + Math.random() * 5000);\r\n  }\r\n\r\n  // Event emitter methods\r\n  public on(event: string, handler: Function): void {\r\n    if (!this.eventHandlers.has(event)) {\r\n      this.eventHandlers.set(event, new Set());\r\n    }\r\n    this.eventHandlers.get(event)!.add(handler);\r\n  }\r\n\r\n  public off(event: string, handler: Function): void {\r\n    const handlers = this.eventHandlers.get(event);\r\n    if (handlers) {\r\n      handlers.delete(handler);\r\n    }\r\n  }\r\n\r\n  public emit(event: string, data: unknown): void {\r\n    const handlers = this.eventHandlers.get(event);\r\n    if (handlers) {\r\n      handlers.forEach(handler => {\r\n        try {\r\n          handler(data);\r\n        } catch (_error) {\r\n          logger.error(`Error in event handler for ${event}`);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Utility methods\r\n  public isConnectedToServer(): boolean {\r\n    return this.isConnected;\r\n  }\r\n\r\n  public getSocket(): unknown {\r\n    // Return a mock socket object with limited functionality\r\n    return {\r\n      connected: this.isConnected,\r\n      emit: (event: string, data: unknown, callback?: Function) => {\r\n        // Handle specific socket events\r\n        switch (event) {\r\n          case 'crisis:request-counselor':\r\n            this.handleCounselorRequest(data);\r\n            break;\r\n          case 'crisis:escalate':\r\n            this.handleCrisisEscalation(data);\r\n            break;\r\n          default:\r\n            logger.debug(`Mock socket emit: ${event}`, 'MockWebSocketAdapter', data);\r\n        }\r\n        \r\n        if (callback) {\r\n          setTimeout(() => callback({ success: true }), 100);\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  // Handle counselor request\r\n  private handleCounselorRequest(data: unknown): void {\r\n    logger.crisis('Crisis counselor requested', 'high', 'MockWebSocketAdapter', data);\r\n    \r\n    // This is handled automatically when creating a crisis session\r\n    // The MockCrisisServer manages counselor assignment\r\n  }\r\n\r\n  // Disconnect\r\n  public disconnect(): void {\r\n    if (this.connectionSimulationTimeout) {\r\n      clearTimeout(this.connectionSimulationTimeout);\r\n    }\r\n\r\n    // End all active sessions\r\n    this.activeSessions.forEach(session => session.end());\r\n    this.activeSessions.clear();\r\n\r\n    this.isConnected = false;\r\n    this.currentUserId = null;\r\n    this.eventHandlers.clear();\r\n    \r\n    logger.info('Mock WebSocket disconnected', 'MockWebSocketAdapter');\r\n  }\r\n\r\n  // Get current session for a room\r\n  public getSession(_roomId: string): MockCrisisSession | undefined {\r\n    return this.activeSessions.get(_roomId);\r\n  }\r\n\r\n  // Get mock server statistics\r\n  public getServerStats(): {\r\n    activeSessions: number;\r\n    availableCounselors: number;\r\n    totalCounselors: number;\r\n  } {\r\n    return mockCrisisServer.getStats();\r\n  }\r\n\r\n  // Test emergency protocols (for demo purposes)\r\n  public testEmergencyProtocol(_type: 'suicide_risk' | 'medical_emergency' | 'connection_loss'): void {\r\n    logger.crisis(`Testing emergency protocol: ${_type}`, 'critical', 'MockWebSocketAdapter');\r\n    \r\n    switch (_type) {\r\n      case 'suicide_risk':\r\n        this.handleEmergencyProtocol('auto_dial_988', {\r\n          reason: 'Test suicide risk protocol',\r\n          _sessionId: 'test-session'\r\n        });\r\n        break;\r\n      case 'medical_emergency':\r\n        this.handleEmergencyProtocol('auto_dial_911', {\r\n          reason: 'Test medical emergency protocol',\r\n          _sessionId: 'test-session'\r\n        });\r\n        break;\r\n      case 'connection_loss':\r\n        this.simulateConnectionLoss();\r\n        break;\r\n    }\r\n  }\r\n\r\n  // End call functionality for testing\r\n  public endCall(): void {\r\n    logger.info('Ending mock crisis call session', 'MockWebSocketAdapter');\r\n    \r\n    // Clear all active sessions\r\n    for (const [_sessionId, session] of this.activeSessions.entries()) {\r\n      logger.info(`Ending session: ${_sessionId}`, 'MockWebSocketAdapter');\r\n      // Emit session end event\r\n      this.emit('session:ended', {\r\n        _sessionId,\r\n        counselorId: session.counselor.id,\r\n        timestamp: new Date()\r\n      });\r\n    }\r\n    \r\n    // Clear the sessions map\r\n    this.activeSessions.clear();\r\n    \r\n    // Emit call ended event\r\n    this.emit('call:ended', {\r\n      timestamp: new Date(),\r\n      reason: 'user_ended'\r\n    });\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const _mockWebSocketAdapter = MockWebSocketAdapter.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\crisis\\OfflineCrisisResources.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":327,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":327,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":350,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":350,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":362,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":362,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":452,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":452,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":498,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":498,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":544,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":544,"endColumn":20}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Offline Crisis Resources - Ensures critical crisis support works without internet\r\n// CRITICAL: These resources must be available 24/7 regardless of connectivity\r\n\r\nimport { secureStorage } from '../security/SecureLocalStorage';\r\nimport { logger } from '../../utils/logger';\r\n\r\n// Offline Crisis Resource Types\r\nexport interface OfflineCrisisResource {\r\n  id: string;\r\n  type: 'hotline' | 'technique' | 'safety_plan' | 'emergency_contact' | 'self_help' | 'breathing' | 'grounding';\r\n  title: string;\r\n  content: string;\r\n  urgency: 'immediate' | 'urgent' | 'important' | 'helpful';\r\n  category: string;\r\n  estimatedTime?: string;\r\n  instructions?: string[];\r\n  audioGuidance?: string; // For offline audio files\r\n  accessibility?: {\r\n    screenReader: boolean;\r\n    keyboardNav: boolean;\r\n    highContrast: boolean;\r\n  };\r\n  lastUpdated: Date;\r\n}\r\n\r\nexport interface OfflineEmergencyContact {\r\n  id: string;\r\n  name: string;\r\n  phone: string;\r\n  type: 'crisis_line' | 'emergency' | 'personal' | 'professional';\r\n  available24_7: boolean;\r\n  description: string;\r\n  instructions: string;\r\n}\r\n\r\nexport interface OfflineSafetyPlan {\r\n  id: string;\r\n  userId?: string;\r\n  warningSignals: string[];\r\n  copingStrategies: string[];\r\n  socialContacts: string[];\r\n  professionalContacts: string[];\r\n  environmentSafety: string[];\r\n  emergencyContacts: string[];\r\n  lastUpdated: Date;\r\n  isActive: boolean;\r\n}\r\n\r\n// Critical offline resources that must always be available\r\nexport const CRITICAL_OFFLINE_RESOURCES: OfflineCrisisResource[] = [\r\n  {\r\n    id: 'emergency-988',\r\n    type: 'hotline',\r\n    title: '988 Suicide & Crisis Lifeline',\r\n    content: 'Available 24/7 for crisis support. Free, confidential, and staffed by trained crisis counselors.',\r\n    urgency: 'immediate',\r\n    category: 'Emergency Support',\r\n    instructions: [\r\n      'Dial 988 from any phone',\r\n      'Wait to be connected (usually under 1 minute)',\r\n      'Speak with a trained crisis counselor',\r\n      'Your call is confidential and free'\r\n    ],\r\n    accessibility: {\r\n      screenReader: true,\r\n      keyboardNav: true,\r\n      highContrast: true\r\n    },\r\n    lastUpdated: new Date()\r\n  },\r\n  {\r\n    id: 'emergency-911',\r\n    type: 'hotline',\r\n    title: '911 Emergency Services',\r\n    content: 'For life-threatening emergencies requiring immediate medical, police, or fire response.',\r\n    urgency: 'immediate',\r\n    category: 'Emergency Services',\r\n    instructions: [\r\n      'Call 911 immediately',\r\n      'State your emergency clearly',\r\n      'Provide your location',\r\n      'Stay on the line until help arrives',\r\n      'Follow dispatcher instructions'\r\n    ],\r\n    accessibility: {\r\n      screenReader: true,\r\n      keyboardNav: true,\r\n      highContrast: true\r\n    },\r\n    lastUpdated: new Date()\r\n  },\r\n  {\r\n    id: 'crisis-text-line',\r\n    type: 'hotline',\r\n    title: 'Crisis Text Line',\r\n    content: 'Text-based crisis support available 24/7. Text HOME to 741741 to connect with a crisis counselor.',\r\n    urgency: 'immediate',\r\n    category: 'Text Support',\r\n    instructions: [\r\n      'Text HOME to 741741',\r\n      'Wait for response (usually 2-3 minutes)',\r\n      'Text with a trained crisis counselor',\r\n      'All conversations are confidential'\r\n    ],\r\n    accessibility: {\r\n      screenReader: true,\r\n      keyboardNav: true,\r\n      highContrast: true\r\n    },\r\n    lastUpdated: new Date()\r\n  },\r\n  {\r\n    id: 'breathing-4-7-8',\r\n    type: 'breathing',\r\n    title: '4-7-8 Breathing Technique',\r\n    content: 'A calming breathing exercise that can help reduce anxiety and panic in crisis moments.',\r\n    urgency: 'urgent',\r\n    category: 'Self-Help Techniques',\r\n    estimatedTime: '2-5 minutes',\r\n    instructions: [\r\n      'Find a comfortable position',\r\n      'Exhale completely',\r\n      'Inhale through nose for 4 counts',\r\n      'Hold breath for 7 counts',\r\n      'Exhale through mouth for 8 counts',\r\n      'Repeat 3-4 times',\r\n      'Focus only on counting and breathing'\r\n    ],\r\n    accessibility: {\r\n      screenReader: true,\r\n      keyboardNav: true,\r\n      highContrast: true\r\n    },\r\n    lastUpdated: new Date()\r\n  },\r\n  {\r\n    id: 'grounding-5-4-3-2-1',\r\n    type: 'grounding',\r\n    title: '5-4-3-2-1 Grounding Technique',\r\n    content: 'A sensory grounding technique to help you stay present and calm during overwhelming moments.',\r\n    urgency: 'urgent',\r\n    category: 'Grounding Techniques',\r\n    estimatedTime: '3-5 minutes',\r\n    instructions: [\r\n      'Look around and name 5 things you can see',\r\n      'Notice 4 things you can touch',\r\n      'Listen for 3 things you can hear',\r\n      'Identify 2 things you can smell',\r\n      'Name 1 thing you can taste',\r\n      'Take slow, deep breaths throughout',\r\n      'Focus on being present in this moment'\r\n    ],\r\n    accessibility: {\r\n      screenReader: true,\r\n      keyboardNav: true,\r\n      highContrast: true\r\n    },\r\n    lastUpdated: new Date()\r\n  },\r\n  {\r\n    id: 'immediate-safety-checklist',\r\n    type: 'safety_plan',\r\n    title: 'Immediate Safety Checklist',\r\n    content: 'Quick safety steps to take when experiencing crisis thoughts or feelings.',\r\n    urgency: 'immediate',\r\n    category: 'Safety Planning',\r\n    instructions: [\r\n      '✓ Remove any means of self-harm from your immediate area',\r\n      '✓ Call someone you trust or a crisis line',\r\n      '✓ Go to a safe place with other people if possible',\r\n      '✓ Use your coping strategies (breathing, grounding)',\r\n      '✓ Remind yourself that these feelings are temporary',\r\n      '✓ If in immediate danger, call 911',\r\n      '✓ Consider going to an emergency room'\r\n    ],\r\n    accessibility: {\r\n      screenReader: true,\r\n      keyboardNav: true,\r\n      highContrast: true\r\n    },\r\n    lastUpdated: new Date()\r\n  },\r\n  {\r\n    id: 'progressive-muscle-relaxation',\r\n    type: 'technique',\r\n    title: 'Progressive Muscle Relaxation',\r\n    content: 'A technique to reduce physical tension and anxiety by systematically relaxing muscle groups.',\r\n    urgency: 'helpful',\r\n    category: 'Relaxation Techniques',\r\n    estimatedTime: '10-15 minutes',\r\n    instructions: [\r\n      'Find a quiet, comfortable place to sit or lie down',\r\n      'Start with your toes - tense for 5 seconds, then relax',\r\n      'Move to your calves - tense and relax',\r\n      'Continue with thighs, abdomen, hands, arms, shoulders',\r\n      'Tense your face muscles, then relax',\r\n      'Notice the contrast between tension and relaxation',\r\n      'End by taking several deep breaths'\r\n    ],\r\n    accessibility: {\r\n      screenReader: true,\r\n      keyboardNav: true,\r\n      highContrast: true\r\n    },\r\n    lastUpdated: new Date()\r\n  },\r\n  {\r\n    id: 'crisis-affirmations',\r\n    type: 'self_help',\r\n    title: 'Crisis Affirmations',\r\n    content: 'Positive statements to help you through difficult moments.',\r\n    urgency: 'helpful',\r\n    category: 'Self-Help',\r\n    instructions: [\r\n      'This feeling is temporary and will pass',\r\n      'I have survived difficult times before',\r\n      'I am stronger than this moment',\r\n      'Help is available and I deserve support',\r\n      'I can take this one moment at a time',\r\n      'My life has value and meaning',\r\n      'I am not alone in this struggle',\r\n      'Recovery and healing are possible'\r\n    ],\r\n    accessibility: {\r\n      screenReader: true,\r\n      keyboardNav: true,\r\n      highContrast: true\r\n    },\r\n    lastUpdated: new Date()\r\n  }\r\n];\r\n\r\n// Default emergency contacts available offline\r\nexport const DEFAULT_EMERGENCY_CONTACTS: OfflineEmergencyContact[] = [\r\n  {\r\n    id: '988-lifeline',\r\n    name: '988 Suicide & Crisis Lifeline',\r\n    phone: '988',\r\n    type: 'crisis_line',\r\n    available24_7: true,\r\n    description: 'National suicide prevention and crisis support',\r\n    instructions: 'Dial 988 for immediate crisis support. Free and confidential.'\r\n  },\r\n  {\r\n    id: 'crisis-text',\r\n    name: 'Crisis Text Line',\r\n    phone: '741741',\r\n    type: 'crisis_line',\r\n    available24_7: true,\r\n    description: 'Text-based crisis support',\r\n    instructions: 'Text HOME to 741741 for crisis counseling via text message.'\r\n  },\r\n  {\r\n    id: 'emergency-services',\r\n    name: '911 Emergency Services',\r\n    phone: '911',\r\n    type: 'emergency',\r\n    available24_7: true,\r\n    description: 'Emergency medical, police, and fire services',\r\n    instructions: 'Call 911 for life-threatening emergencies only.'\r\n  },\r\n  {\r\n    id: 'nami-helpline',\r\n    name: 'NAMI HelpLine',\r\n    phone: '1-800-950-6264',\r\n    type: 'crisis_line',\r\n    available24_7: false,\r\n    description: 'Mental health information and referrals',\r\n    instructions: 'Call for mental health information, resources, and referrals. Available Mon-Fri 10am-10pm ET.'\r\n  },\r\n  {\r\n    id: 'samhsa-helpline',\r\n    name: 'SAMHSA National Helpline',\r\n    phone: '1-800-662-4357',\r\n    type: 'professional',\r\n    available24_7: true,\r\n    description: 'Treatment referral and information service',\r\n    instructions: 'Free, confidential treatment referral service for substance abuse and mental health.'\r\n  },\r\n  {\r\n    id: 'domestic-violence-hotline',\r\n    name: 'National Domestic Violence Hotline',\r\n    phone: '1-800-799-7233',\r\n    type: 'crisis_line',\r\n    available24_7: true,\r\n    description: 'Support for domestic violence situations',\r\n    instructions: 'Confidential support for those experiencing domestic violence.'\r\n  }\r\n];\r\n\r\n// Offline Crisis Resource Manager\r\nexport class OfflineCrisisResourceManager {\r\n  private static instance: OfflineCrisisResourceManager;\r\n  private resources: OfflineCrisisResource[] = [];\r\n  private emergencyContacts: OfflineEmergencyContact[] = [];\r\n  private safetyPlans: OfflineSafetyPlan[] = [];\r\n  private isInitialized: boolean = false;\r\n\r\n  private constructor() {\r\n    this.initializeOfflineResources();\r\n  }\r\n\r\n  public static getInstance(): OfflineCrisisResourceManager {\r\n    if (!OfflineCrisisResourceManager.instance) {\r\n      OfflineCrisisResourceManager.instance = new OfflineCrisisResourceManager();\r\n    }\r\n    return OfflineCrisisResourceManager.instance;\r\n  }\r\n\r\n  // Initialize offline resources\r\n  private async initializeOfflineResources(): Promise<void> {\r\n    try {\r\n      // Load critical resources\r\n      this.resources = [...CRITICAL_OFFLINE_RESOURCES];\r\n      \r\n      // Load default emergency contacts\r\n      this.emergencyContacts = [...DEFAULT_EMERGENCY_CONTACTS];\r\n      \r\n      // Load any _saved custom resources\r\n      await this.loadCustomResources();\r\n      \r\n      // Load safety plans\r\n      await this.loadSafetyPlans();\r\n      \r\n      this.isInitialized = true;\r\n      logger.info('Offline crisis resources initialized successfully', 'OfflineCrisisResources');\r\n    } catch (_error) {\r\n      logger.error('Failed to initialize offline crisis resources:');\r\n      // Even if loading fails, ensure critical resources are available\r\n      this.resources = [...CRITICAL_OFFLINE_RESOURCES];\r\n      this.emergencyContacts = [...DEFAULT_EMERGENCY_CONTACTS];\r\n      this.isInitialized = true;\r\n    }\r\n  }\r\n\r\n  // Load custom resources from storage\r\n  private async loadCustomResources(): Promise<void> {\r\n    try {\r\n      const _saved = secureStorage.getItem('offline_crisis_resources');\r\n      if (_saved) {\r\n        const _customResources = JSON.parse(_saved) as OfflineCrisisResource[];\r\n        this.resources = [...this.resources, ..._customResources];\r\n      }\r\n\r\n      const _savedContacts = secureStorage.getItem('offline_emergency_contacts');\r\n      if (_savedContacts) {\r\n        const _customContacts = JSON.parse(_savedContacts) as OfflineEmergencyContact[];\r\n        this.emergencyContacts = [...this.emergencyContacts, ..._customContacts];\r\n      }\r\n    } catch (_error) {\r\n      logger.error('Failed to load custom offline resources:');\r\n    }\r\n  }\r\n\r\n  // Load safety plans\r\n  private async loadSafetyPlans(): Promise<void> {\r\n    try {\r\n      const _saved = secureStorage.getItem('offline_safety_plans');\r\n      if (_saved) {\r\n        this.safetyPlans = JSON.parse(_saved);\r\n      }\r\n    } catch (_error) {\r\n      logger.error('Failed to load safety plans:');\r\n      this.safetyPlans = [];\r\n    }\r\n  }\r\n\r\n  // Get all resources by urgency\r\n  public getResourcesByUrgency(urgency: 'immediate' | 'urgent' | 'important' | 'helpful'): OfflineCrisisResource[] {\r\n    return this.resources.filter(resource => resource.urgency === urgency);\r\n  }\r\n\r\n  // Get resources by type\r\n  public getResourcesByType(type: OfflineCrisisResource['type']): OfflineCrisisResource[] {\r\n    return this.resources.filter(resource => resource.type === type);\r\n  }\r\n\r\n  // Get immediate crisis resources\r\n  public getImmediateCrisisResources(): OfflineCrisisResource[] {\r\n    return this.resources.filter(resource => \r\n      resource.urgency === 'immediate' || \r\n      (resource.type === 'hotline' && resource.urgency === 'urgent')\r\n    ).sort((a, b) => {\r\n      const urgencyOrder = { 'immediate': 0, 'urgent': 1, 'important': 2, 'helpful': 3 };\r\n      return urgencyOrder[a.urgency] - urgencyOrder[b.urgency];\r\n    });\r\n  }\r\n\r\n  // Get emergency contacts\r\n  public getEmergencyContacts(): OfflineEmergencyContact[] {\r\n    return this.emergencyContacts.sort((a, b) => {\r\n      if (a.available24_7 && !b.available24_7) return -1;\r\n      if (!a.available24_7 && b.available24_7) return 1;\r\n      const typeOrder = { 'emergency': 0, 'crisis_line': 1, 'professional': 2, 'personal': 3 };\r\n      return typeOrder[a.type] - typeOrder[b.type];\r\n    });\r\n  }\r\n\r\n  // Get crisis hotlines only\r\n  public getCrisisHotlines(): OfflineEmergencyContact[] {\r\n    return this.emergencyContacts.filter(contact => \r\n      contact.type === 'crisis_line' || contact.type === 'emergency'\r\n    );\r\n  }\r\n\r\n  // Get breathing exercises\r\n  public getBreathingExercises(): OfflineCrisisResource[] {\r\n    return this.getResourcesByType('breathing');\r\n  }\r\n\r\n  // Get grounding techniques\r\n  public getGroundingTechniques(): OfflineCrisisResource[] {\r\n    return this.getResourcesByType('grounding');\r\n  }\r\n\r\n  // Search resources\r\n  public searchResources(query: string): OfflineCrisisResource[] {\r\n    const _lowercaseQuery = query.toLowerCase();\r\n    return this.resources.filter(resource =>\r\n      resource.title.toLowerCase().includes(_lowercaseQuery) ||\r\n      resource.content.toLowerCase().includes(_lowercaseQuery) ||\r\n      resource.category.toLowerCase().includes(_lowercaseQuery) ||\r\n      resource.instructions?.some(instruction => \r\n        instruction.toLowerCase().includes(_lowercaseQuery)\r\n      )\r\n    );\r\n  }\r\n\r\n  // Add custom resource\r\n  public addCustomResource(resource: OfflineCrisisResource): void {\r\n    resource.id = `custom-${Date.now()}`;\r\n    resource.lastUpdated = new Date();\r\n    this.resources.push(resource);\r\n    this.saveCustomResources();\r\n  }\r\n\r\n  // Add custom emergency contact\r\n  public addCustomEmergencyContact(contact: OfflineEmergencyContact): void {\r\n    contact.id = `custom-${Date.now()}`;\r\n    this.emergencyContacts.push(_contact);\r\n    this.saveCustomResources();\r\n  }\r\n\r\n  // Save custom resources to storage\r\n  private saveCustomResources(): void {\r\n    try {\r\n      const _customResources = this.resources.filter(r => r.id.startsWith('custom-'));\r\n      secureStorage.setItem('offline_crisis_resources', JSON.stringify(_customResources));\r\n      \r\n      const _customContacts = this.emergencyContacts.filter(c => c.id.startsWith('custom-'));\r\n      secureStorage.setItem('offline_emergency_contacts', JSON.stringify(_customContacts));\r\n    } catch (_error) {\r\n      logger.error('Failed to save custom resources:');\r\n    }\r\n  }\r\n\r\n  // Create or update safety plan\r\n  public createSafetyPlan(plan: Partial<OfflineSafetyPlan>): OfflineSafetyPlan {\r\n    const safetyPlan: OfflineSafetyPlan = {\r\n      id: plan.id || `safety-plan-${Date.now()}`,\r\n      userId: plan.userId,\r\n      warningSignals: plan.warningSignals || [],\r\n      copingStrategies: plan.copingStrategies || [],\r\n      socialContacts: plan.socialContacts || [],\r\n      professionalContacts: plan.professionalContacts || [],\r\n      environmentSafety: plan.environmentSafety || [],\r\n      emergencyContacts: plan.emergencyContacts || [],\r\n      lastUpdated: new Date(),\r\n      isActive: plan.isActive !== false\r\n    };\r\n\r\n    // Remove existing plan with same id\r\n    this.safetyPlans = this.safetyPlans.filter(p => p.id !== safetyPlan.id);\r\n    \r\n    // Add new plan\r\n    this.safetyPlans.push(_safetyPlan);\r\n    this.saveSafetyPlans();\r\n    \r\n    return safetyPlan;\r\n  }\r\n\r\n  // Get active safety plan\r\n  public getActiveSafetyPlan(userId?: string): OfflineSafetyPlan | null {\r\n    const activePlans = this.safetyPlans.filter(plan => \r\n      plan.isActive && (userId ? plan.userId === userId : true)\r\n    );\r\n    \r\n    // Return most recent active plan\r\n    return activePlans.sort((a, b) => \r\n      new Date(b.lastUpdated).getTime() - new Date(a.lastUpdated).getTime()\r\n    )[0] || null;\r\n  }\r\n\r\n  // Save safety plans to storage\r\n  private saveSafetyPlans(): void {\r\n    try {\r\n      secureStorage.setItem('offline_safety_plans', JSON.stringify(this.safetyPlans));\r\n    } catch (_error) {\r\n      logger.error('Failed to save safety plans:');\r\n    }\r\n  }\r\n\r\n  // Check if resources are available offline\r\n  public isAvailableOffline(): boolean {\r\n    return this.isInitialized && this.resources.length > 0 && this.emergencyContacts.length > 0;\r\n  }\r\n\r\n  // Get connection status\r\n  public getConnectionStatus(): {\r\n    isOnline: boolean;\r\n    hasOfflineResources: boolean;\r\n    resourceCount: number;\r\n    lastUpdated: Date | null;\r\n  } {\r\n    return {\r\n      isOnline: navigator.onLine,\r\n      hasOfflineResources: this.isAvailableOffline(),\r\n      resourceCount: this.resources.length,\r\n      lastUpdated: this.resources.length > 0 ? \r\n        new Date(Math.max(...this.resources.map(r => r.lastUpdated.getTime()))) : null\r\n    };\r\n  }\r\n\r\n  // Update resource cache (when online)\r\n  public async updateResourceCache(): Promise<void> {\r\n    if (!navigator.onLine) {\r\n      logger.warn('Cannot update resource cache - offline');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // In production, this would fetch updated resources from server\r\n      logger.info('Updating offline resource cache...', 'OfflineCrisisResources');\r\n      \r\n      // Update timestamps for existing resources\r\n      this.resources.forEach(resource => {\r\n        if (!resource.id.startsWith('custom-')) {\r\n          resource.lastUpdated = new Date();\r\n        }\r\n      });\r\n      \r\n      this.saveCustomResources();\r\n      logger.info('Offline resource cache updated', 'OfflineCrisisResources');\r\n    } catch (_error) {\r\n      logger.error('Failed to update resource cache:');\r\n    }\r\n  }\r\n\r\n  // Export safety plan as text (for sharing or backup)\r\n  public exportSafetyPlan(planId: string): string | null {\r\n    const plan = this.safetyPlans.find(p => p.id === planId);\r\n    if (!plan) return null;\r\n\r\n    return `\r\nPERSONAL SAFETY PLAN\r\nLast Updated: ${plan.lastUpdated.toLocaleDateString()}\r\n\r\nWARNING SIGNALS:\r\n${plan.warningSignals.map(signal => `• ${signal}`).join('\\n')}\r\n\r\nCOPING STRATEGIES:\r\n${plan.copingStrategies.map(strategy => `• ${strategy}`).join('\\n')}\r\n\r\nSOCIAL SUPPORT CONTACTS:\r\n${plan.socialContacts.map(contact => `• ${contact}`).join('\\n')}\r\n\r\nPROFESSIONAL CONTACTS:\r\n${plan.professionalContacts.map(contact => `• ${contact}`).join('\\n')}\r\n\r\nENVIRONMENT SAFETY STEPS:\r\n${plan.environmentSafety.map(step => `• ${step}`).join('\\n')}\r\n\r\nEMERGENCY CONTACTS:\r\n${plan.emergencyContacts.map(contact => `• ${contact}`).join('\\n')}\r\n\r\nCRISIS HOTLINES:\r\n• 988 Suicide & Crisis Lifeline\r\n• Text HOME to 741741 (Crisis Text Line)\r\n• 911 for emergencies\r\n\r\nRemember: This feeling is temporary. You have support. Help is available.\r\n    `.trim();\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const _offlineCrisisResources = OfflineCrisisResourceManager.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\crisis\\emergencyServices.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\emergency\\GeolocationEmergencyService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\integration\\CrisisIntegrationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\integration\\DataIntegrationService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1814,1817],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1814,1817],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1982,1985],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1982,1985],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2378,2381],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2378,2381],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":593,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":593,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16709,16712],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16709,16712],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Core Data Integration Service\n * Manages data flow and synchronization between all components\n */\n\nimport { _create } from 'zustand';\nimport { _subscribeWithSelector } from 'zustand/middleware';\nimport { useWellnessStore } from '../../stores/wellnessStore';\nimport { useActivityStore } from '../../stores/activityStore';\nimport { useAccessibilityStore } from '../../stores/accessibilityStore';\nimport { WebSocketService } from '../websocket/WebSocketService';\nimport { _User } from '../api/types';\nimport { EventEmitter } from 'events';\nimport { logger } from '../../utils/logger';\n\n// Integration event types\nexport enum IntegrationEvent {\n  // Data sync events\n  STORE_SYNC_STARTED = 'store:sync:started',\n  STORE_SYNC_COMPLETED = 'store:sync:completed',\n  STORE_SYNC_FAILED = 'store:sync:failed',\n  \n  // Cross-feature events\n  MOOD_UPDATED = 'mood:updated',\n  CRISIS_TRIGGERED = 'crisis:triggered',\n  GOAL_ACHIEVED = 'goal:achieved',\n  THERAPY_SESSION_COMPLETED = 'therapy:completed',\n  MEDICATION_TAKEN = 'medication:taken',\n  COMMUNITY_INTERACTION = 'community:interaction',\n  \n  // Real-time events\n  REALTIME_CONNECTED = 'realtime:connected',\n  REALTIME_DISCONNECTED = 'realtime:disconnected',\n  REALTIME_MESSAGE = 'realtime:message',\n  \n  // System events\n  OFFLINE_MODE_ENABLED = 'offline:enabled',\n  OFFLINE_MODE_DISABLED = 'offline:disabled',\n  DATA_PERSISTED = 'data:persisted',\n  DATA_RESTORED = 'data:restored'\n}\n\n// Data flow configuration\ninterface DataFlowConfig {\n  enableRealtime: boolean;\n  enableOfflineSync: boolean;\n  syncInterval: number; // milliseconds\n  retryAttempts: number;\n  batchSize: number;\n}\n\n// Integration state\ninterface IntegrationState {\n  isConnected: boolean;\n  isSyncing: boolean;\n  lastSyncTime: Date | null;\n  syncErrors: Error[];\n  pendingChanges: Map<string, any>;\n  dataFlowConfig: DataFlowConfig;\n}\n\n// Cross-component data mapping\ninterface DataMapping {\n  source: string;\n  target: string;\n  transform?: (data: unknown) => any;\n  filter?: (data: unknown) => boolean;\n  bidirectional?: boolean;\n}\n\nclass DataIntegrationService extends EventEmitter {\n  private static instance: DataIntegrationService;\n  private wsService: WebSocketService | null = null;\n  private state: IntegrationState;\n  private dataMappings: DataMapping[] = [];\n  private syncTimer: NodeJS.Timeout | null = null;\n  private offlineQueue: Map<string, any> = new Map();\n  \n  private constructor() {\n    super();\n    \n    this.state = {\n      isConnected: false,\n      isSyncing: false,\n      lastSyncTime: null,\n      syncErrors: [],\n      pendingChanges: new Map(),\n      dataFlowConfig: {\n        enableRealtime: true,\n        enableOfflineSync: true,\n        syncInterval: 30000, // 30 seconds\n        retryAttempts: 3,\n        batchSize: 50\n      }\n    };\n    \n    this.initializeDataMappings();\n    this.setupStoreSubscriptions();\n    this.initializeWebSocket();\n    this.startPeriodicSync();\n  }\n  \n  public static getInstance(): DataIntegrationService {\n    if (!DataIntegrationService.instance) {\n      DataIntegrationService.instance = new DataIntegrationService();\n    }\n    return DataIntegrationService.instance;\n  }\n  \n  /**\n   * Initialize data mappings between components\n   */\n  private initializeDataMappings() {\n    this.dataMappings = [\n      // Mood to Crisis mapping\n      {\n        source: 'wellness.mood',\n        target: 'crisis.riskAssessment',\n        transform: (moodData) => ({\n          riskLevel: this.calculateRiskFromMood(moodData),\n          timestamp: new Date(),\n          factors: moodData.triggers || []\n        }),\n        filter: (moodData) => moodData.moodScore <= 3\n      },\n      \n      // Activity to Wellness mapping\n      {\n        source: 'activity.completed',\n        target: 'wellness.metrics',\n        transform: (activity) => ({\n          activityType: activity.type,\n          moodImpact: activity.actualMoodImpact,\n          completedAt: activity.completedAt\n        }),\n        bidirectional: false\n      },\n      \n      // Therapy to Goals mapping\n      {\n        source: 'therapy.homework',\n        target: 'activity.tasks',\n        transform: (homework) => ({\n          title: homework.title,\n          type: 'therapy',\n          therapyHomework: true,\n          linkedGoalId: homework.goalId\n        }),\n        bidirectional: true\n      },\n      \n      // Community to Wellness mapping\n      {\n        source: 'community.interaction',\n        target: 'wellness.socialMetrics',\n        transform: (interaction) => ({\n          type: interaction.type,\n          timestamp: interaction.timestamp,\n          positiveImpact: interaction.sentiment > 0\n        })\n      },\n      \n      // Crisis to Professional Care mapping\n      {\n        source: 'crisis.event',\n        target: 'professional.alerts',\n        transform: (crisisEvent) => ({\n          severity: crisisEvent.severity,\n          timestamp: crisisEvent.timestamp,\n          requiresImmediate: crisisEvent.severity === 'critical'\n        }),\n        filter: (crisisEvent) => crisisEvent.severity !== 'low'\n      }\n    ];\n  }\n  \n  /**\n   * Setup store subscriptions for data flow\n   */\n  private setupStoreSubscriptions() {\n    // Subscribe to wellness store changes\n    useWellnessStore.subscribe((state) => {\n      if (state.moodEntries.length > 0) {\n        this.handleDataChange('wellness.mood', state.moodEntries[state.moodEntries.length - 1]);\n      }\n    });\n    \n    // Subscribe to activity store changes\n    useActivityStore.subscribe((state) => {\n      const completed = state.activities.filter((a: unknown) => a.completed && !a.synced);\n      completed.forEach((activity: unknown) => {\n        this.handleDataChange('activity.completed', activity);\n      });\n    });\n    \n    // Subscribe to accessibility store for user preferences\n    useAccessibilityStore.subscribe((state) => {\n      this.updateDataFlowConfig({\n        enableRealtime: !state.settings.reducedMotion\n      });\n    });\n  }\n  \n  /**\n   * Initialize WebSocket connection for real-time features\n   */\n  private async initializeWebSocket() {\n    if (!this.state.dataFlowConfig.enableRealtime) return;\n    \n    try {\n      this.wsService = WebSocketService.getInstance();\n      this.wsService.connect('', { \n        id: 'anonymous',\n        email: 'anonymous@example.com',\n        username: 'anonymous',\n        role: 'patient',\n        profile: {\n          firstName: 'Anonymous',\n          lastName: '_User',\n          timezone: 'UTC'\n        },\n        preferences: {\n          theme: 'auto',\n          notifications: {\n            email: false,\n            push: false,\n            sms: false,\n            crisisAlerts: true,\n            appointmentReminders: false,\n            medicationReminders: false,\n            communityUpdates: false\n          },\n          privacy: {\n            profileVisibility: 'private',\n            shareDataWithTherapist: false,\n            anonymousMode: true,\n            allowResearch: false\n          },\n          accessibility: {\n            fontSize: 'medium',\n            highContrast: false,\n            screenReaderMode: false,\n            reducedMotion: false\n          }\n        },\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        lastActive: new Date(),\n        isVerified: false,\n        twoFactorEnabled: false\n      });\n      \n      // Setup WebSocket event listeners\n      this.wsService.on('connect', () => {\n        this.state.isConnected = true;\n        this.emit(IntegrationEvent.REALTIME_CONNECTED);\n        this.syncOfflineQueue();\n      });\n      \n      this.wsService.on('disconnect', () => {\n        this.state.isConnected = false;\n        this.emit(IntegrationEvent.REALTIME_DISCONNECTED);\n      });\n      \n      // Handle real-time data updates\n      this.wsService.on('data:update', (data: unknown) => {\n        this.handleRealtimeUpdate(data);\n      });\n      \n      // Handle crisis events\n      this.wsService.on('crisis:alert', (_alert: unknown) => {\n        this.handleCrisisAlert(_alert);\n      });\n      \n      // Handle community updates\n      this.wsService.on('community:update', (update: unknown) => {\n        this.handleCommunityUpdate(update);\n      });\n      \n    } catch (error) {\n      logger.error('Failed to initialize WebSocket:');\n      this.state.syncErrors.push(error as Error);\n    }\n  }\n  \n  /**\n   * Handle data changes from stores\n   */\n  private handleDataChange(source: string, data: unknown) {\n    if (!data) return;\n    \n    // Find relevant mappings\n    const mappings = this.dataMappings.filter(m => m.source === source);\n    \n    mappings.forEach(mapping => {\n      // Apply filter if exists\n      if (mapping.filter && !mapping.filter(data)) return;\n      \n      // Transform data if needed\n      const transformedData = mapping.transform ? mapping.transform(data) : data;\n      \n      // Route to target\n      this.routeDataToTarget(mapping.target, transformedData);\n      \n      // Handle bidirectional sync\n      if (mapping.bidirectional) {\n        this.syncBidirectional(mapping, transformedData);\n      }\n    });\n    \n    // Queue for persistence\n    this.queueForPersistence(source, data);\n    \n    // Emit integration event\n    this.emitDataChangeEvent(source, data);\n  }\n  \n  /**\n   * Route data to target component/store\n   */\n  private routeDataToTarget(target: string, data: unknown) {\n    const [store, property] = target.split('.');\n    \n    if (!property) {\n      logger.warn('Invalid target format:', target);\n      return;\n    }\n    \n    switch (_store) {\n      case 'wellness':\n        this.updateWellnessStore(property, data);\n        break;\n      case 'activity':\n        this.updateActivityStore(property, data);\n        break;\n      case 'crisis':\n        this.updateCrisisData(property, data);\n        break;\n      case 'professional':\n        this.updateProfessionalData(property, data);\n        break;\n      case 'community':\n        this.updateCommunityData(property, data);\n        break;\n      default:\n        logger.warn(`Unknown target store: ${store}`);\n    }\n  }\n  \n  /**\n   * Update wellness store with integrated data\n   */\n  private updateWellnessStore(property: string, data: unknown) {\n    const store = useWellnessStore.getState();\n    \n    switch (_property) {\n      case 'metrics':\n        store.addWellnessMetric(data);\n        break;\n      case 'mood':\n        store.addMoodEntry(data);\n        break;\n      case 'insights':\n        // Insights are generated, not directly added\n        store.generateInsights();\n        break;\n    }\n  }\n  \n  /**\n   * Update activity store with integrated data\n   */\n  private updateActivityStore(property: string, data: unknown) {\n    const store = useActivityStore.getState();\n    \n    switch (_property) {\n      case 'tasks':\n        store.addActivity(data);\n        break;\n      case 'goals':\n        if (data.id) {\n          store.updateGoal(data.id, data);\n        } else {\n          store.addGoal(data);\n        }\n        break;\n    }\n  }\n  \n  /**\n   * Update crisis data\n   */\n  private updateCrisisData(property: string, data: unknown) {\n    // Send to crisis service/store\n    if (this.wsService && this.state.isConnected) {\n      this.wsService.emit('crisis:update', { property, data });\n    } else {\n      this.offlineQueue.set(`crisis:${property}`, data);\n    }\n  }\n  \n  /**\n   * Update professional care data\n   */\n  private updateProfessionalData(property: string, data: unknown) {\n    // Send to professional care service\n    if (this.wsService && this.state.isConnected) {\n      this.wsService.emit('professional:update', { property, data });\n    } else {\n      this.offlineQueue.set(`professional:${property}`, data);\n    }\n  }\n  \n  /**\n   * Update community data\n   */\n  private updateCommunityData(property: string, data: unknown) {\n    // Send to community service\n    if (this.wsService && this.state.isConnected) {\n      this.wsService.emit('community:update', { property, data });\n    } else {\n      this.offlineQueue.set(`community:${property}`, data);\n    }\n  }\n  \n  /**\n   * Handle real-time updates from WebSocket\n   */\n  private handleRealtimeUpdate(update: unknown) {\n    const { source, data, timestamp } = update;\n    \n    // Check if update is newer than local data\n    if (this.isNewerData(source, timestamp)) {\n      this.handleDataChange(source, data);\n    }\n    \n    this.emit(IntegrationEvent.REALTIME_MESSAGE, update);\n  }\n  \n  /**\n   * Handle crisis alerts\n   */\n  private handleCrisisAlert(_alert: unknown) {\n    // Immediate routing to crisis components\n    this.emit(IntegrationEvent.CRISIS_TRIGGERED, _alert);\n    \n    // Update relevant stores\n    this.routeDataToTarget('crisis._alert', _alert);\n    this.routeDataToTarget('wellness.crisisEvent', _alert);\n    \n    // Notify professional care if needed\n    if (_alert.severity === 'critical') {\n      this.routeDataToTarget('professional.emergencyAlert', _alert);\n    }\n  }\n  \n  /**\n   * Handle community updates\n   */\n  private handleCommunityUpdate(update: unknown) {\n    this.emit(IntegrationEvent.COMMUNITY_INTERACTION, update);\n    this.routeDataToTarget('community.update', update);\n  }\n  \n  /**\n   * Calculate risk level from mood data\n   */\n  private calculateRiskFromMood(moodData: unknown): string {\n    if (!moodData) return 'unknown';\n    \n    const { moodScore, triggers, stressLevel, anxietyLevel } = moodData;\n    \n    // Simple risk calculation (should be enhanced with ML model)\n    let riskScore = 0;\n    \n    if (moodScore <= 2) riskScore += 3;\n    else if (moodScore <= 3) riskScore += 2;\n    else if (moodScore <= 4) riskScore += 1;\n    \n    if (stressLevel >= 8) riskScore += 2;\n    else if (stressLevel >= 6) riskScore += 1;\n    \n    if (anxietyLevel >= 8) riskScore += 2;\n    else if (anxietyLevel >= 6) riskScore += 1;\n    \n    if (triggers?.includes('suicidal_thoughts')) riskScore += 5;\n    if (triggers?.includes('self_harm')) riskScore += 4;\n    \n    if (riskScore >= 7) return 'critical';\n    if (riskScore >= 5) return 'high';\n    if (riskScore >= 3) return 'medium';\n    return 'low';\n  }\n  \n  /**\n   * Queue data for persistence\n   */\n  private queueForPersistence(source: string, data: unknown) {\n    this.state.pendingChanges.set(source, {\n      data,\n      timestamp: new Date(),\n      synced: false\n    });\n  }\n  \n  /**\n   * Sync bidirectional data\n   */\n  private syncBidirectional(mapping: DataMapping, data: unknown) {\n    // Implement bidirectional sync logic\n    const _reverseMapping = {\n      source: mapping.target,\n      target: mapping.source,\n      transform: mapping.transform // May need reverse transform\n    };\n    \n    // Add to sync queue\n    this.queueForPersistence(`sync:${mapping.target}`, data);\n  }\n  \n  /**\n   * Check if update is newer than local data\n   */\n  private isNewerData(source: string, timestamp: Date): boolean {\n    const lastUpdate = this.state.pendingChanges.get(_source);\n    if (!lastUpdate) return true;\n    \n    return timestamp > lastUpdate.timestamp;\n  }\n  \n  /**\n   * Emit data change event\n   */\n  private emitDataChangeEvent(source: string, data: unknown) {\n    const eventMap: Record<string, IntegrationEvent> = {\n      'wellness.mood': IntegrationEvent.MOOD_UPDATED,\n      'activity.completed': IntegrationEvent.GOAL_ACHIEVED,\n      'therapy.session': IntegrationEvent.THERAPY_SESSION_COMPLETED,\n      'medication.taken': IntegrationEvent.MEDICATION_TAKEN,\n      'community.interaction': IntegrationEvent.COMMUNITY_INTERACTION\n    };\n    \n    const event = eventMap[source];\n    if (_event) {\n      this.emit(event, data);\n    }\n  }\n  \n  /**\n   * Start periodic sync\n   */\n  private startPeriodicSync() {\n    if (!this.state.dataFlowConfig.enableOfflineSync) return;\n    \n    this.syncTimer = setInterval(() => {\n      this.syncPendingChanges();\n    }, this.state.dataFlowConfig.syncInterval);\n  }\n  \n  /**\n   * Sync pending changes\n   */\n  private async syncPendingChanges() {\n    if (this.state.isSyncing) return;\n    \n    this.state.isSyncing = true;\n    this.emit(IntegrationEvent.STORE_SYNC_STARTED);\n    \n    try {\n      const changes = Array.from(this.state.pendingChanges.entries());\n      const batches = this.createBatches(changes, this.state.dataFlowConfig.batchSize);\n      \n      for (const _batch of batches) {\n        await this.syncBatch(_batch);\n      }\n      \n      this.state.lastSyncTime = new Date();\n      this.emit(IntegrationEvent.STORE_SYNC_COMPLETED);\n      \n    } catch (error) {\n      logger.error('Sync failed:');\n      this.state.syncErrors.push(error as Error);\n      this.emit(IntegrationEvent.STORE_SYNC_FAILED, undefined);\n      \n    } finally {\n      this.state.isSyncing = false;\n    }\n  }\n  \n  /**\n   * Sync a batch of changes\n   */\n  private async syncBatch(_batch: [string, any][]): Promise<void> {\n    // Implement _batch sync logic\n    // This would typically make an API call to sync data\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        _batch.forEach(([key]) => {\n          this.state.pendingChanges.delete(key);\n        });\n        resolve();\n      }, 100);\n    });\n  }\n  \n  /**\n   * Create batches from changes\n   */\n  private createBatches<T>(items: T[], batchSize: number): T[][] {\n    const batches: T[][] = [];\n    for (let i = 0; i < items.length; i += batchSize) {\n      batches.push(items.slice(i, i + batchSize));\n    }\n    return batches;\n  }\n  \n  /**\n   * Sync offline queue when reconnected\n   */\n  private async syncOfflineQueue() {\n    if (this.offlineQueue.size === 0) return;\n    \n    const entries = Array.from(this.offlineQueue.entries());\n    \n    for (const [key, data] of entries) {\n      try {\n        const [store, property] = key.split(':');\n        this.routeDataToTarget(`${store}.${property}`, data);\n        this.offlineQueue.delete(key);\n      } catch (error) {\n        logger.error(`Failed to sync offline item ${key}:`, error);\n      }\n    }\n  }\n  \n  /**\n   * Update data flow configuration\n   */\n  public updateDataFlowConfig(config: Partial<DataFlowConfig>) {\n    this.state.dataFlowConfig = {\n      ...this.state.dataFlowConfig,\n      ...config\n    };\n    \n    // Restart services if needed\n    if (config.syncInterval !== undefined) {\n      if (this.syncTimer) clearInterval(this.syncTimer);\n      this.startPeriodicSync();\n    }\n    \n    if (config.enableRealtime !== undefined) {\n      if (config.enableRealtime && !this.wsService) {\n        this.initializeWebSocket();\n      } else if (!config.enableRealtime && this.wsService) {\n        this.wsService.disconnect();\n        this.wsService = null;\n      }\n    }\n  }\n  \n  /**\n   * Get integration state\n   */\n  public getState(): IntegrationState {\n    return { ...this.state };\n  }\n  \n  /**\n   * Force sync all data\n   */\n  public async forceSync(): Promise<void> {\n    await this.syncPendingChanges();\n  }\n  \n  /**\n   * Clear sync errors\n   */\n  public clearErrors() {\n    this.state.syncErrors = [];\n  }\n  \n  /**\n   * Cleanup and disconnect\n   */\n  public cleanup() {\n    if (this.syncTimer) {\n      clearInterval(this.syncTimer);\n    }\n    \n    if (this.wsService) {\n      this.wsService.disconnect();\n    }\n    \n    this.removeAllListeners();\n  }\n}\n\n// Export singleton instance\nexport const _dataIntegrationService = DataIntegrationService.getInstance();\n\n// Export hook for React components\nexport function useDataIntegration() {\n  const service = DataIntegrationService.getInstance();\n  \n  return {\n    forceSync: () => service.forceSync(),\n    getState: () => service.getState(),\n    updateConfig: (config: Partial<DataFlowConfig>) => service.updateDataFlowConfig(config),\n    clearErrors: () => service.clearErrors(),\n    on: (event: IntegrationEvent, callback: (...args: unknown[]) => void) => {\n      service.on(event, callback);\n      return () => service.off(event, callback);\n    }\n  };\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\integration\\RealtimeSyncService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1809,1812],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1809,1812],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Real-time Synchronization Service\n * Manages WebSocket connections and real-time data updates across components\n */\n\nimport { io, Socket } from 'socket.io-client';\nimport { EventEmitter } from 'events';\nimport { useWellnessStore } from '../../stores/wellnessStore';\nimport { useActivityStore } from '../../stores/activityStore';\nimport { logger } from '../../utils/logger';\n\n// Real-time event types\nexport enum RealtimeEvent {\n  // Connection events\n  CONNECTED = 'connected',\n  DISCONNECTED = 'disconnected',\n  RECONNECTING = 'reconnecting',\n  ERROR = 'error',\n  \n  // Crisis events\n  CRISIS_ALERT_RECEIVED = 'crisis:alert:received',\n  CRISIS_SUPPORT_CONNECTED = 'crisis:support:connected',\n  CRISIS_MESSAGE_RECEIVED = 'crisis:message:received',\n  CRISIS_STATUS_UPDATED = 'crisis:status:updated',\n  \n  // Community events\n  COMMUNITY_POST_CREATED = 'community:post:created',\n  COMMUNITY_COMMENT_ADDED = 'community:comment:added',\n  COMMUNITY_USER_JOINED = 'community:user:joined',\n  COMMUNITY_USER_LEFT = 'community:user:left',\n  COMMUNITY_TYPING = 'community:typing',\n  \n  // Professional care events\n  THERAPIST_AVAILABLE = 'therapist:available',\n  APPOINTMENT_REMINDER = 'appointment:reminder',\n  PRESCRIPTION_UPDATE = 'prescription:update',\n  CARE_TEAM_MESSAGE = 'care:team:message',\n  \n  // Wellness tracking events\n  MOOD_CHECK_REMINDER = 'mood:check:reminder',\n  GOAL_MILESTONE_REACHED = 'goal:milestone:reached',\n  WELLNESS_INSIGHT = 'wellness:insight',\n  \n  // Notification events\n  NOTIFICATION_RECEIVED = 'notification:received',\n  NOTIFICATION_READ = 'notification:read',\n  NOTIFICATION_CLEARED = 'notification:cleared'\n}\n\n// Message types\ninterface RealtimeMessage {\n  _id: string;\n  _type: string;\n  _payload: unknown;\n  timestamp: Date;\n  _userId?: string;\n  metadata?: Record<string, any>;\n}\n\n// Subscription configuration\ninterface SubscriptionConfig {\n  channel: string;\n  events: string[];\n  handler: (data: unknown) => void;\n  filter?: (data: unknown) => boolean;\n}\n\n// Connection configuration\ninterface ConnectionConfig {\n  url: string;\n  reconnection: boolean;\n  reconnectionAttempts: number;\n  reconnectionDelay: number;\n  _timeout: number;\n  _auth?: {\n    token: string;\n    _userId: string;\n  };\n}\n\n// Presence information\ninterface UserPresence {\n  _userId: string;\n  status: 'online' | 'away' | 'busy' | 'offline';\n  lastSeen: Date;\n  location?: string;\n  activity?: string;\n}\n\nclass RealtimeSyncService extends EventEmitter {\n  private static instance: RealtimeSyncService;\n  private socket: Socket | null = null;\n  private config: ConnectionConfig;\n  private subscriptions: Map<string, SubscriptionConfig> = new Map();\n  private messageQueue: RealtimeMessage[] = [];\n  private _presence: Map<string, UserPresence> = new Map();\n  private reconnectAttempts = 0;\n  private isConnected = false;\n  private heartbeatInterval: NodeJS.Timeout | null = null;\n  \n  private constructor() {\n    super();\n    \n    this.config = {\n      url: import.meta.env.VITE_WS_URL || 'ws://localhost:3002',\n      reconnection: true,\n      reconnectionAttempts: 10,\n      reconnectionDelay: 1000,\n      _timeout: 20000\n    };\n    \n    this.setupDefaultSubscriptions();\n  }\n  \n  public static getInstance(): RealtimeSyncService {\n    if (!RealtimeSyncService.instance) {\n      RealtimeSyncService.instance = new RealtimeSyncService();\n    }\n    return RealtimeSyncService.instance;\n  }\n  \n  /**\n   * Connect to WebSocket server\n   */\n  public async connect(_auth?: { token: string; _userId: string }): Promise<void> {\n    if (this.isConnected) return;\n    \n    return new Promise((resolve, reject) => {\n      try {\n        this.config._auth = _auth;\n        \n        this.socket = io(this.config.url, {\n          reconnection: this.config.reconnection,\n          reconnectionAttempts: this.config.reconnectionAttempts,\n          reconnectionDelay: this.config.reconnectionDelay,\n          _timeout: this.config._timeout,\n          _auth: _auth || {}\n        });\n        \n        this.setupSocketListeners();\n        \n        // Set connection timeout\n        const _timeout = setTimeout(() => {\n          reject(new Error('Connection _timeout'));\n        }, this.config.timeout);\n        \n        this.socket.once('connect', () => {\n          clearTimeout(_timeout);\n          this.isConnected = true;\n          this.reconnectAttempts = 0;\n          this.emit(RealtimeEvent.CONNECTED);\n          this.startHeartbeat();\n          this.flushMessageQueue();\n          resolve();\n        });\n        \n        this.socket.once('connect_error', (error: unknown) => {\n          clearTimeout(_timeout);\n          this.emit(RealtimeEvent.ERROR, error);\n          reject(_error);\n        });\n        \n      } catch (_error) {\n        reject(_error);\n      }\n    });\n  }\n  \n  /**\n   * Setup default subscriptions\n   */\n  private setupDefaultSubscriptions() {\n    // Crisis channel subscription\n    this.subscribe({\n      channel: 'crisis',\n      events: ['alert', 'support_connected', 'message', 'status_update'],\n      handler: (_data) => this.handleCrisisUpdate(data)\n    });\n    \n    // Community channel subscription\n    this.subscribe({\n      channel: 'community',\n      events: ['post_created', 'comment_added', 'user_joined', 'user_left', 'typing'],\n      handler: (_data) => this.handleCommunityUpdate(data)\n    });\n    \n    // Professional care channel subscription\n    this.subscribe({\n      channel: 'professional',\n      events: ['therapist_available', 'appointment_reminder', 'prescription_update', 'care_team_message'],\n      handler: (_data) => this.handleProfessionalUpdate(data)\n    });\n    \n    // Wellness channel subscription\n    this.subscribe({\n      channel: 'wellness',\n      events: ['mood_check_reminder', 'goal_milestone', 'insight'],\n      handler: (_data) => this.handleWellnessUpdate(data)\n    });\n    \n    // Notifications channel subscription\n    this.subscribe({\n      channel: 'notifications',\n      events: ['received', 'read', 'cleared'],\n      handler: (_data) => this.handleNotificationUpdate(data)\n    });\n  }\n  \n  /**\n   * Setup socket event listeners\n   */\n  private setupSocketListeners() {\n    if (!this.socket) return;\n    \n    // Connection events\n    this.socket.on('disconnect', () => {\n      this.isConnected = false;\n      this.stopHeartbeat();\n      this.emit(RealtimeEvent.DISCONNECTED);\n    });\n    \n    this.socket.on('reconnect', (attempt: number) => {\n      this.reconnectAttempts = attempt;\n      this.isConnected = true;\n      this.emit(RealtimeEvent.RECONNECTING, attempt);\n      this.startHeartbeat();\n      this.flushMessageQueue();\n    });\n    \n    this.socket.on('error', (error: Error) => {\n      this.emit(RealtimeEvent.ERROR, error);\n    });\n    \n    // Message handling\n    this.socket.on('message', (message: RealtimeMessage) => {\n      this.handleMessage(message);\n    });\n    \n    // Presence updates\n    this.socket.on('presence:update', (_presence: UserPresence) => {\n      this.updatePresence(_presence);\n    });\n    \n    // Subscribe to configured channels\n    this.subscriptions.forEach((_config, _key) => {\n      config.events.forEach(event => {\n        const _eventName = `${config.channel}:${event}`;\n        this.socket!.on(_eventName, (data: unknown) => {\n          if (!config.filter || config.filter(data)) {\n            config.handler(data);\n          }\n        });\n      });\n    });\n  }\n  \n  /**\n   * Handle incoming messages\n   */\n  private handleMessage(message: RealtimeMessage) {\n    // Process message based on _type\n    switch (message._type) {\n      case 'crisis':\n        this.handleCrisisMessage(message);\n        break;\n      case 'community':\n        this.handleCommunityMessage(message);\n        break;\n      case 'professional':\n        this.handleProfessionalMessage(message);\n        break;\n      case 'wellness':\n        this.handleWellnessMessage(message);\n        break;\n      case 'notification':\n        this.handleNotificationMessage(message);\n        break;\n      default:\n        logger.warn('Unknown message _type:', message._type);\n    }\n    \n    // Emit generic message event\n    this.emit('message', message);\n  }\n  \n  /**\n   * Handle crisis updates\n   */\n  private handleCrisisUpdate(data: unknown) {\n    const { _type, _payload } = data;\n    \n    switch (_type) {\n      case 'alert':\n        this.emit(RealtimeEvent.CRISIS_ALERT_RECEIVED, _payload);\n        // Update wellness store with crisis event\n        useWellnessStore.getState().recordCrisisEvent(_payload);\n        break;\n        \n      case 'support_connected':\n        this.emit(RealtimeEvent.CRISIS_SUPPORT_CONNECTED, _payload);\n        break;\n        \n      case 'message':\n        this.emit(RealtimeEvent.CRISIS_MESSAGE_RECEIVED, _payload);\n        break;\n        \n      case 'status_update':\n        this.emit(RealtimeEvent.CRISIS_STATUS_UPDATED, _payload);\n        break;\n    }\n  }\n  \n  /**\n   * Handle community updates\n   */\n  private handleCommunityUpdate(data: unknown) {\n    const { _type, _payload } = data;\n    \n    switch (_type) {\n      case 'post_created':\n        this.emit(RealtimeEvent.COMMUNITY_POST_CREATED, _payload);\n        break;\n        \n      case 'comment_added':\n        this.emit(RealtimeEvent.COMMUNITY_COMMENT_ADDED, _payload);\n        break;\n        \n      case 'user_joined':\n        this.emit(RealtimeEvent.COMMUNITY_USER_JOINED, _payload);\n        this.updatePresence({\n          _userId: _payload._userId,\n          status: 'online',\n          lastSeen: new Date()\n        });\n        break;\n        \n      case 'user_left':\n        this.emit(RealtimeEvent.COMMUNITY_USER_LEFT, _payload);\n        this.updatePresence({\n          _userId: _payload._userId,\n          status: 'offline',\n          lastSeen: new Date()\n        });\n        break;\n        \n      case 'typing':\n        this.emit(RealtimeEvent.COMMUNITY_TYPING, _payload);\n        break;\n    }\n  }\n  \n  /**\n   * Handle professional care updates\n   */\n  private handleProfessionalUpdate(data: unknown) {\n    const { _type, _payload } = data;\n    \n    switch (_type) {\n      case 'therapist_available':\n        this.emit(RealtimeEvent.THERAPIST_AVAILABLE, _payload);\n        break;\n        \n      case 'appointment_reminder':\n        this.emit(RealtimeEvent.APPOINTMENT_REMINDER, _payload);\n        // Update activity store with appointment reminder\n        useActivityStore.getState().addActivity({\n          title: _payload.title,\n          _type: 'appointment',\n          category: 'professional',\n          scheduledTime: new Date(_payload.time),\n          completed: false\n        });\n        break;\n        \n      case 'prescription_update':\n        this.emit(RealtimeEvent.PRESCRIPTION_UPDATE, _payload);\n        break;\n        \n      case 'care_team_message':\n        this.emit(RealtimeEvent.CARE_TEAM_MESSAGE, _payload);\n        break;\n    }\n  }\n  \n  /**\n   * Handle wellness updates\n   */\n  private handleWellnessUpdate(data: unknown) {\n    const { _type, _payload } = data;\n    \n    switch (_type) {\n      case 'mood_check_reminder':\n        this.emit(RealtimeEvent.MOOD_CHECK_REMINDER, _payload);\n        break;\n        \n      case 'goal_milestone':\n        this.emit(RealtimeEvent.GOAL_MILESTONE_REACHED, _payload);\n        // Update activity store with milestone\n        useActivityStore.getState().updateGoalProgress(\n          _payload.goalId,\n          _payload.progress\n        );\n        break;\n        \n      case 'insight':\n        this.emit(RealtimeEvent.WELLNESS_INSIGHT, _payload);\n        // Regenerate insights in wellness store\n        useWellnessStore.getState().generateInsights();\n        break;\n    }\n  }\n  \n  /**\n   * Handle notification updates\n   */\n  private handleNotificationUpdate(data: unknown) {\n    const { _type, _payload } = data;\n    \n    switch (_type) {\n      case 'received':\n        this.emit(RealtimeEvent.NOTIFICATION_RECEIVED, _payload);\n        break;\n        \n      case 'read':\n        this.emit(RealtimeEvent.NOTIFICATION_READ, _payload);\n        break;\n        \n      case 'cleared':\n        this.emit(RealtimeEvent.NOTIFICATION_CLEARED, _payload);\n        break;\n    }\n  }\n  \n  /**\n   * Handle crisis messages\n   */\n  private handleCrisisMessage(message: RealtimeMessage) {\n    this.emit(RealtimeEvent.CRISIS_MESSAGE_RECEIVED, message._payload);\n  }\n  \n  /**\n   * Handle community messages\n   */\n  private handleCommunityMessage(message: RealtimeMessage) {\n    // Process community messages\n    this.emit('community:message', message._payload);\n  }\n  \n  /**\n   * Handle professional messages\n   */\n  private handleProfessionalMessage(message: RealtimeMessage) {\n    this.emit('professional:message', message._payload);\n  }\n  \n  /**\n   * Handle wellness messages\n   */\n  private handleWellnessMessage(message: RealtimeMessage) {\n    this.emit('wellness:message', message._payload);\n  }\n  \n  /**\n   * Handle notification messages\n   */\n  private handleNotificationMessage(message: RealtimeMessage) {\n    this.emit(RealtimeEvent.NOTIFICATION_RECEIVED, message._payload);\n  }\n  \n  /**\n   * Update user presence\n   */\n  private updatePresence(_presence: UserPresence) {\n    this._presence.set(_presence._userId, _presence);\n    this.emit('_presence:updated', _presence);\n  }\n  \n  /**\n   * Subscribe to a channel\n   */\n  public subscribe(config: SubscriptionConfig): string {\n    const subscriptionId = `${config.channel}-${Date.now()}`;\n    this.subscriptions.set(subscriptionId, config);\n    \n    // If already connected, setup listener immediately\n    if (this.socket && this.isConnected) {\n      config.events.forEach(event => {\n        const _eventName = `${config.channel}:${event}`;\n        this.socket!.on(_eventName, (data: unknown) => {\n          if (!config.filter || config.filter(data)) {\n            config.handler(data);\n          }\n        });\n      });\n      \n      // Join channel\n      this.socket.emit('subscribe', config.channel);\n    }\n    \n    return subscriptionId;\n  }\n  \n  /**\n   * Unsubscribe from a channel\n   */\n  public unsubscribe(subscriptionId: string) {\n    const config = this.subscriptions.get(subscriptionId);\n    if (!config) return;\n    \n    // Remove listeners if connected\n    if (this.socket) {\n      config.events.forEach(event => {\n        const _eventName = `${config.channel}:${event}`;\n        this.socket!.off(_eventName);\n      });\n      \n      // Leave channel if no other subscriptions\n      const hasOtherSubs = Array.from(this.subscriptions.values())\n        .some(sub => sub.channel === config.channel && sub !== config);\n        \n      if (!hasOtherSubs) {\n        this.socket.emit('unsubscribe', config.channel);\n      }\n    }\n    \n    this.subscriptions.delete(subscriptionId);\n  }\n  \n  /**\n   * Send a message\n   */\n  public send(channel: string, event: string, data: unknown): void {\n    const message: RealtimeMessage = {\n      _id: `msg-${Date.now()}-${Math.random()}`,\n      _type: channel,\n      _payload: data,\n      timestamp: new Date(),\n      _userId: this.config.auth?.userId,\n      metadata: { event }\n    };\n    \n    if (this.socket && this.isConnected) {\n      this.socket.emit(`${channel}:${event}`, message);\n    } else {\n      // Queue message for later delivery\n      this.messageQueue.push(message);\n    }\n  }\n  \n  /**\n   * Flush message queue\n   */\n  private flushMessageQueue() {\n    if (!this.socket || !this.isConnected) return;\n    \n    while (this.messageQueue.length > 0) {\n      const message = this.messageQueue.shift();\n      if (message) {\n        const { _type, metadata, _payload } = message;\n        this.socket.emit(`${_type}:${metadata?.event}`, message);\n      }\n    }\n  }\n  \n  /**\n   * Start heartbeat\n   */\n  private startHeartbeat() {\n    this.stopHeartbeat();\n    \n    this.heartbeatInterval = setInterval(() => {\n      if (this.socket && this.isConnected) {\n        this.socket.emit('heartbeat', { timestamp: Date.now() });\n      }\n    }, 30000); // Every 30 seconds\n  }\n  \n  /**\n   * Stop heartbeat\n   */\n  private stopHeartbeat() {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n      this.heartbeatInterval = null;\n    }\n  }\n  \n  /**\n   * Get user presence\n   */\n  public getPresence(_userId: string): UserPresence | undefined {\n    return this._presence.get(_userId);\n  }\n  \n  /**\n   * Get all online users\n   */\n  public getOnlineUsers(): UserPresence[] {\n    return Array.from(this._presence.values())\n      .filter(p => p.status === 'online');\n  }\n  \n  /**\n   * Update own presence\n   */\n  public updateOwnPresence(status: UserPresence['status'], activity?: string) {\n    if (!this.socket || !this.isConnected || !this.config._auth?._userId) return;\n    \n    const _presence: UserPresence = {\n      _userId: this.config._auth._userId,\n      status,\n      lastSeen: new Date(),\n      activity\n    };\n    \n    this.socket.emit('presence:update', _presence);\n    this.updatePresence(_presence);\n  }\n  \n  /**\n   * Join a room\n   */\n  public joinRoom(_roomId: string) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('join', _roomId);\n    }\n  }\n  \n  /**\n   * Leave a room\n   */\n  public leaveRoom(_roomId: string) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('leave', _roomId);\n    }\n  }\n  \n  /**\n   * Disconnect from server\n   */\n  public disconnect() {\n    this.stopHeartbeat();\n    \n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    \n    this.isConnected = false;\n    this.subscriptions.clear();\n    this.messageQueue = [];\n    this.presence.clear();\n    this.emit(RealtimeEvent.DISCONNECTED);\n  }\n  \n  /**\n   * Check if connected\n   */\n  public get connected(): boolean {\n    return this.isConnected;\n  }\n  \n  /**\n   * Get connection state\n   */\n  public getConnectionState() {\n    return {\n      connected: this.isConnected,\n      reconnectAttempts: this.reconnectAttempts,\n      queuedMessages: this.messageQueue.length,\n      onlineUsers: this.getOnlineUsers().length\n    };\n  }\n}\n\n// Export singleton instance\nexport const _realtimeSyncService = RealtimeSyncService.getInstance();\n\n// Export React hook\nexport function useRealtimeSync() {\n  const service = RealtimeSyncService.getInstance();\n  \n  return {\n    connect: (_auth?: { token: string; _userId: string }) => service.connect(_auth),\n    disconnect: () => service.disconnect(),\n    subscribe: (config: SubscriptionConfig) => service.subscribe(config),\n    unsubscribe: (_id: string) => service.unsubscribe(_id),\n    send: (channel: string, event: string, data: unknown) => service.send(channel, event, data),\n    getPresence: (_userId: string) => service.getPresence(_userId),\n    getOnlineUsers: () => service.getOnlineUsers(),\n    updatePresence: (status: UserPresence['status'], activity?: string) => \n      service.updateOwnPresence(status, activity),\n    joinRoom: (_roomId: string) => service.joinRoom(_roomId),\n    leaveRoom: (_roomId: string) => service.leaveRoom(_roomId),\n    getConnectionState: () => service.getConnectionState(),\n    on: (event: string, callback: (...args: unknown[]) => void) => {\n      service.on(event, callback);\n      return () => service.off(event, callback);\n    }\n  };\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\integration\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":53,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Integration Services Export\n * Central export point for all integration services\n */\n\n// Import services\nimport { dataIntegrationService, _IntegrationEvent } from './DataIntegrationService';\nimport { realtimeSyncService, _RealtimeEvent } from './RealtimeSyncService';\nimport { crisisIntegrationService, _CrisisEventType, _CrisisSeverity } from './CrisisIntegrationService';\nimport { logger } from '../utils/logger';\n\n// Core integration services\nexport { \n  dataIntegrationService,\n  useDataIntegration,\n  _IntegrationEvent\n} from './DataIntegrationService';\n\nexport {\n  realtimeSyncService,\n  useRealtimeSync,\n  _RealtimeEvent\n} from './RealtimeSyncService';\n\nexport {\n  crisisIntegrationService,\n  useCrisisIntegration,\n  _CrisisEventType,\n  _CrisisSeverity\n} from './CrisisIntegrationService';\n\n// Integration utilities\nexport const _initializeIntegration = async (userId: string, token: string) => {\n  try {\n    // Initialize real-time connection\n    await realtimeSyncService.connect({ userId, token });\n    \n    // Start data integration monitoring\n    dataIntegrationService.forceSync();\n    \n    // Initialize crisis monitoring\n    const crisisStatus = crisisIntegrationService.getCrisisStatus();\n    logger.info('Crisis monitoring initialized:', crisisStatus);\n    \n    return {\n      success: true,\n      services: {\n        realtime: realtimeSyncService.getConnectionState(),\n        integration: dataIntegrationService.getState(),\n        crisis: crisisStatus\n      }\n    };\n  } catch (_error) {\n    logger.error('Failed to initialize integration services:');\n    return {\n      success: false,\n      undefined\n    };\n  }\n};\n\nexport const _cleanupIntegration = () => {\n  // Cleanup all services\n  realtimeSyncService.disconnect();\n  dataIntegrationService.cleanup();\n  crisisIntegrationService.cleanup();\n};","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\logging\\logger.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1124,1127],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1124,1127],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":130,"column":18,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":130,"endColumn":32,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[2851,2871],"text":"Object.prototype.hasOwnProperty.call(data, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":208,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":208,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":316,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":316,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8369,8372],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8369,8372],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":325,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":325,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8638,8641],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8638,8641],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":334,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":334,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8899,8902],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8899,8902],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":345,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":345,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9193,9196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9193,9196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-redeclare","severity":2,"message":"'logger' is already defined.","line":387,"column":14,"nodeType":"Identifier","messageId":"redeclared","endLine":387,"endColumn":20},{"ruleId":"no-import-assign","severity":2,"message":"'logger' is read-only.","line":387,"column":14,"nodeType":"Identifier","messageId":"readonly","endLine":387,"endColumn":20}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * HIPAA-Compliant Structured Logging Service\n * \n * This service provides structured logging with:\n * - HIPAA compliance (no PII/PHI in logs)\n * - Performance metrics tracking\n * - Crisis intervention audit trail\n * - Error boundary integration\n * - Configurable log levels based on environment\n */\n\nimport { auditLogger } from '../security/auditLogger';\nimport { logger } from '../utils/logger';\n\nexport enum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n  CRITICAL = 4,\n  SILENT = 5\n}\n\nexport enum LogCategory {\n  CRISIS = 'CRISIS',\n  AUTH = 'AUTH',\n  WELLNESS = 'WELLNESS',\n  COMMUNITY = 'COMMUNITY',\n  PERFORMANCE = 'PERFORMANCE',\n  SECURITY = 'SECURITY',\n  SYSTEM = 'SYSTEM',\n  USER_ACTION = 'USER_ACTION',\n  API = 'API',\n  ERROR = 'ERROR',\n  AI = 'AI',\n  EMERGENCY = 'EMERGENCY',\n  NOTIFICATIONS = 'NOTIFICATIONS',\n  ACCESSIBILITY = 'ACCESSIBILITY'\n}\n\ninterface LogContext {\n  category: LogCategory;\n  action?: string;\n  userId?: string;\n  sessionId?: string;\n  signId?: string;\n  contactId?: string;\n  buddyId?: string;\n  newStatus?: boolean;\n  relationship?: string;\n  _metadata?: Record<string, any>;\n  performanceMetrics?: {\n    duration?: number;\n    memoryUsage?: number;\n    responseTime?: number;\n  };\n  error?: {\n    message: string;\n    stack?: string;\n    code?: string;\n  };\n}\n\ninterface LogEntry {\n  timestamp: string;\n  level: LogLevel;\n  category: LogCategory;\n  message: string;\n  context?: LogContext;\n  environment: string;\n}\n\nclass Logger {\n  private static instance: Logger;\n  private logLevel: LogLevel;\n  private isDevelopment: boolean;\n  private logBuffer: LogEntry[] = [];\n  private maxBufferSize = 100;\n  private flushInterval = 5000; // 5 seconds\n  private flushTimer: NodeJS.Timeout | null = null;\n\n  private constructor() {\n    this.isDevelopment = import.meta.env.DEV;\n    this.logLevel = this.isDevelopment ? LogLevel.DEBUG : LogLevel.INFO;\n    this.startFlushTimer();\n  }\n\n  static getInstance(): Logger {\n    if (!Logger.instance) {\n      Logger.instance = new Logger();\n    }\n    return Logger.instance;\n  }\n\n  private startFlushTimer(): void {\n    if (this.flushTimer) {\n      clearInterval(this.flushTimer);\n    }\n    this.flushTimer = setInterval(() => {\n      this.flush();\n    }, this.flushInterval);\n  }\n\n  private sanitizeData(data: unknown): unknown {\n    if (data === null || data === undefined) {\n      return data;\n    }\n\n    // Remove sensitive fields\n    const sensitiveFields = [\n      'password',\n      'token',\n      'apiKey',\n      'ssn',\n      'dateOfBirth',\n      'email',\n      'phone',\n      'address',\n      'creditCard',\n      'diagnosis',\n      'medication',\n      'therapyNotes',\n      'mentalHealthHistory'\n    ];\n\n    if (typeof data === 'object') {\n      const sanitized: unknown = Array.isArray(data) ? [] : {};\n      \n      for (const key in data) {\n        if (data.hasOwnProperty(key)) {\n          const lowerKey = key.toLowerCase();\n          if (sensitiveFields.some(_field => lowerKey.includes(_field))) {\n            sanitized[key] = '[REDACTED]';\n          } else if (typeof data[key] === 'object') {\n            sanitized[key] = this.sanitizeData(data[key]);\n          } else {\n            sanitized[key] = data[key];\n          }\n        }\n      }\n      \n      return sanitized;\n    }\n\n    return data;\n  }\n\n  private formatMessage(level: LogLevel, message: string, context?: LogContext): LogEntry {\n    return {\n      timestamp: new Date().toISOString(),\n      level,\n      category: context?.category || LogCategory.SYSTEM,\n      message,\n      context: context ? this.sanitizeData(_context) : undefined,\n      environment: this.isDevelopment ? 'development' : 'production'\n    };\n  }\n\n  private shouldLog(level: LogLevel): boolean {\n    return level >= this.logLevel;\n  }\n\n  private writeToConsole(entry: LogEntry): void {\n    if (!this.isDevelopment && entry.level < LogLevel.WARN) {\n      return; // Only log warnings and errors in production\n    }\n\n    const prefix = `[${entry.timestamp}] [${LogLevel[entry.level]}] [${entry.category}]`;\n    const message = `${prefix} ${entry.message}`;\n\n    switch (entry.level) {\n      case LogLevel.DEBUG:\n      case LogLevel.INFO:\n        if (this.isDevelopment) {\n          logger.info(message, entry.context || '');\n        }\n        break;\n      case LogLevel.WARN:\n        logger.warn(message, entry.context || '');\n        break;\n      case LogLevel.ERROR:\n      case LogLevel.CRITICAL:\n        logger.error(message, entry.context || '');\n        break;\n    }\n  }\n\n  private addToBuffer(entry: LogEntry): void {\n    this.logBuffer.push(entry);\n    \n    if (this.logBuffer.length >= this.maxBufferSize) {\n      this.flush();\n    }\n  }\n\n  private async flush(): Promise<void> {\n    if (this.logBuffer.length === 0) {\n      return;\n    }\n\n    const entriesToFlush = [...this.logBuffer];\n    this.logBuffer = [];\n\n    // Send to remote logging service (if configured)\n    if (!this.isDevelopment) {\n      try {\n        await this.sendToRemoteLogging(_entriesToFlush);\n      } catch (_error) {\n        // Fallback to console if remote logging fails\n        logger.error('[Logger] Failed to send logs to remote service');\n      }\n    }\n\n    // Send critical logs to audit service\n    const criticalLogs = entriesToFlush.filter(\n      entry => entry.level >= LogLevel.ERROR || entry.category === LogCategory.CRISIS\n    );\n    \n    for (const log of criticalLogs) {\n      if (log.context?.userId) {\n        await auditLogger.log({\n          event: 'SECURITY_ALERT' as const,\n          userId: log.context.userId,\n          action: 'CRITICAL_EVENT',\n          outcome: 'success',\n          severity: 'critical',\n          details: {\n            message: log.message,\n            ...log.context._metadata\n          }\n        });\n      }\n    }\n  }\n\n  private async sendToRemoteLogging(entries: LogEntry[]): Promise<void> {\n    // Implementation would send to your logging service (e.g., Sentry, LogRocket, etc.)\n    // For now, this is a placeholder\n    if (typeof window !== 'undefined' && window.Sentry) {\n      entries.forEach(entry => {\n        if (entry.level >= LogLevel.ERROR && window.Sentry) {\n          window.Sentry.captureMessage(entry.message, {\n            level: entry.level === LogLevel.CRITICAL ? 'fatal' : 'error',\n            extra: entry.context\n          });\n        }\n      });\n    }\n  }\n\n  // Public logging methods\n\n  debug(message: string, context?: LogContext): void {\n    if (this.shouldLog(LogLevel.DEBUG)) {\n      const entry = this.formatMessage(LogLevel.DEBUG, message, context);\n      this.writeToConsole(entry);\n      this.addToBuffer(entry);\n    }\n  }\n\n  info(message: string, context?: LogContext): void {\n    if (this.shouldLog(LogLevel.INFO)) {\n      const entry = this.formatMessage(LogLevel.INFO, message, context);\n      this.writeToConsole(entry);\n      this.addToBuffer(entry);\n    }\n  }\n\n  warn(message: string, context?: LogContext): void {\n    if (this.shouldLog(LogLevel.WARN)) {\n      const entry = this.formatMessage(LogLevel.WARN, message, context);\n      this.writeToConsole(entry);\n      this.addToBuffer(entry);\n    }\n  }\n\n  error(message: string, error?: Error, context?: LogContext): void {\n    if (this.shouldLog(LogLevel.ERROR)) {\n      const enrichedContext: LogContext = {\n        ...context,\n        category: context?.category || LogCategory.ERROR,\n        error: error ? {\n          message: error.message,\n          stack: error.stack,\n          code: (error as unknown).code\n        } : undefined\n      };\n      \n      const entry = this.formatMessage(LogLevel.ERROR, message, enrichedContext);\n      this.writeToConsole(entry);\n      this.addToBuffer(entry);\n    }\n  }\n\n  critical(message: string, error?: Error, context?: LogContext): void {\n    const enrichedContext: LogContext = {\n      ...context,\n      category: context?.category || LogCategory.CRISIS,\n      error: error ? {\n        message: error.message,\n        stack: error.stack,\n        code: (error as unknown).code\n      } : undefined\n    };\n    \n    const entry = this.formatMessage(LogLevel.CRITICAL, message, enrichedContext);\n    this.writeToConsole(entry);\n    this.addToBuffer(entry);\n    \n    // Immediately flush critical logs\n    this.flush();\n  }\n\n  // Specialized logging methods for mental health features\n\n  logCrisisIntervention(action: string, userId?: string, _metadata?: Record<string, any>): void {\n    this.info(`Crisis intervention: ${action}`, {\n      category: LogCategory.CRISIS,\n      action,\n      userId,\n      _metadata: this.sanitizeData(_metadata)\n    });\n  }\n\n  logWellnessActivity(action: string, userId?: string, _metadata?: Record<string, any>): void {\n    this.info(`Wellness activity: ${action}`, {\n      category: LogCategory.WELLNESS,\n      action,\n      userId,\n      _metadata: this.sanitizeData(_metadata)\n    });\n  }\n\n  logPerformance(metric: string, value: number, metadata?: Record<string, any>): void {\n    this.debug(`Performance metric: ${metric}`, {\n      category: LogCategory.PERFORMANCE,\n      action: metric,\n      performanceMetrics: {\n        duration: value\n      },\n      metadata\n    });\n  }\n\n  logSecurityEvent(event: string, userId?: string, _metadata?: Record<string, any>): void {\n    this.warn(`Security event: ${event}`, {\n      category: LogCategory.SECURITY,\n      action: event,\n      userId,\n      _metadata: this.sanitizeData(_metadata)\n    });\n  }\n\n  logApiCall(endpoint: string, method: string, statusCode?: number, duration?: number): void {\n    const message = `API ${method} ${endpoint} - ${statusCode || 'pending'}`;\n    this.debug(message, {\n      category: LogCategory.API,\n      action: `${method} ${endpoint}`,\n      performanceMetrics: duration ? { duration } : undefined,\n      _metadata: { statusCode }\n    });\n  }\n\n  // Performance tracking\n\n  startTimer(label: string): () => void {\n    const start = performance.now();\n    return () => {\n      const duration = performance.now() - start;\n      this.logPerformance(label, duration);\n      return duration;\n    };\n  }\n\n  // Cleanup\n\n  destroy(): void {\n    if (this.flushTimer) {\n      clearInterval(this.flushTimer);\n      this.flushTimer = null;\n    }\n    this.flush();\n  }\n}\n\n// Export singleton instance\nexport const logger = Logger.getInstance();\n\n// Export convenience functions\nexport const _logDebug = (message: string, context?: LogContext) => logger.debug(message, context);\nexport const _logInfo = (message: string, context?: LogContext) => logger.info(message, context);\nexport const _logWarn = (message: string, context?: LogContext) => logger.warn(message, context);\nexport const _logError = (message: string, error?: Error, context?: LogContext) => logger.error(message, error, context);\nexport const _logCritical = (message: string, error?: Error, context?: LogContext) => logger.critical(message, error, context);\n\n// Extend window interface for Sentry integration\ndeclare global {\n  interface Window {\n    Sentry?: {\n      captureMessage: (message: string, options?: unknown) => void;\n      captureException: (error: Error, options?: unknown) => void;\n    };\n  }\n}\n\nexport default logger;","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\monitoring\\HealthCheckService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[637,640],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[637,640],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":123,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":648,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":648,"endColumn":20}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Health Check and Monitoring Service\n// Provides comprehensive health monitoring for the mental health platform\n\nimport { _apiService } from '../api/ApiService';\nimport { wsService } from '../websocket/WebSocketService';\nimport { logger } from '../utils/logger';\n\n// Health check status types\nexport enum HealthStatus {\n  HEALTHY = 'healthy',\n  DEGRADED = 'degraded',\n  UNHEALTHY = 'unhealthy',\n  UNKNOWN = 'unknown'\n}\n\n// Service health check result\nexport interface ServiceHealth {\n  name: string;\n  status: HealthStatus;\n  responseTime: number;\n  message?: string;\n  lastChecked: Date;\n  uptime?: number;\n  details?: Record<string, any>;\n}\n\n// System health overview\nexport interface SystemHealth {\n  overall: HealthStatus;\n  services: ServiceHealth[];\n  _metrics: SystemMetrics;\n  timestamp: Date;\n  version: string;\n}\n\n// System metrics\nexport interface SystemMetrics {\n  cpu: {\n    usage: number;\n    cores: number;\n  };\n  memory: {\n    used: number;\n    total: number;\n    percentage: number;\n  };\n  storage: {\n    used: number;\n    total: number;\n    percentage: number;\n  };\n  network: {\n    latency: number;\n    bandwidth: number;\n    packetsLost: number;\n  };\n  activeUsers: number;\n  activeSessions: number;\n  requestsPerMinute: number;\n  errorRate: number;\n}\n\n// Crisis system metrics\nexport interface CrisisMetrics {\n  activecrisisSessions: number;\n  waitingUsers: number;\n  averageWaitTime: number;\n  availableCounselors: number;\n  escalationRate: number;\n  responseTime: {\n    p50: number;\n    p95: number;\n    p99: number;\n  };\n}\n\n// Performance metrics\nexport interface PerformanceMetrics {\n  pageLoadTime: number;\n  timeToFirstByte: number;\n  firstContentfulPaint: number;\n  largestContentfulPaint: number;\n  cumulativeLayoutShift: number;\n  firstInputDelay: number;\n  totalBlockingTime: number;\n}\n\n// Health Check Service Class\nexport class HealthCheckService {\n  private static instance: HealthCheckService;\n  private healthCheckInterval: NodeJS.Timeout | null = null;\n  private metricsCollectionInterval: NodeJS.Timeout | null = null;\n  private healthHistory: Map<string, ServiceHealth[]> = new Map();\n  private performanceObserver: PerformanceObserver | null = null;\n  private readonly maxHistorySize = 100;\n\n  private constructor() {\n    this.initializePerformanceObserver();\n  }\n\n  // Singleton pattern\n  public static getInstance(): HealthCheckService {\n    if (!HealthCheckService.instance) {\n      HealthCheckService.instance = new HealthCheckService();\n    }\n    return HealthCheckService.instance;\n  }\n\n  // Initialize performance observer\n  private initializePerformanceObserver(): void {\n    if (typeof window !== 'undefined' && 'PerformanceObserver' in window) {\n      this.performanceObserver = new PerformanceObserver((list) => {\n        for (const _entry of list.getEntries()) {\n          this.recordPerformanceMetric(_entry);\n        }\n      });\n\n      // Observe different performance entry types\n      try {\n        this.performanceObserver.observe({ \n          entryTypes: ['navigation', 'resource', 'paint', 'largest-contentful-paint', 'layout-shift', 'first-input'] \n        });\n      } catch (_error) {\n        logger.error('Failed to initialize performance observer:');\n      }\n    }\n  }\n\n  // Start health monitoring\n  public startMonitoring(intervalMs: number = 30000): void {\n    if (this.healthCheckInterval) {\n      logger.info('Health monitoring already running');\n      return;\n    }\n\n    // Initial health check\n    this.performHealthCheck();\n\n    // Set up recurring health checks\n    this.healthCheckInterval = setInterval(() => {\n      this.performHealthCheck();\n    }, intervalMs);\n\n    // Set up metrics collection\n    this.metricsCollectionInterval = setInterval(() => {\n      this.collectMetrics();\n    }, 60000); // Every minute\n\n    logger.info(`Health monitoring started with ${intervalMs}ms interval`);\n  }\n\n  // Stop health monitoring\n  public stopMonitoring(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n      this.healthCheckInterval = null;\n    }\n\n    if (this.metricsCollectionInterval) {\n      clearInterval(this.metricsCollectionInterval);\n      this.metricsCollectionInterval = null;\n    }\n\n    if (this.performanceObserver) {\n      this.performanceObserver.disconnect();\n    }\n\n    logger.info('Health monitoring stopped');\n  }\n\n  // Perform comprehensive health check\n  private async performHealthCheck(): Promise<SystemHealth> {\n    const services: ServiceHealth[] = [];\n    \n    // Check API health\n    services.push(await this.checkAPIHealth());\n    \n    // Check WebSocket health\n    services.push(await this.checkWebSocketHealth());\n    \n    // Check database health\n    services.push(await this.checkDatabaseHealth());\n    \n    // Check cache health\n    services.push(await this.checkCacheHealth());\n    \n    // Check crisis system health\n    services.push(await this.checkCrisisSystemHealth());\n    \n    // Check third-party integrations\n    services.push(await this.checkIntegrationsHealth());\n    \n    // Determine overall health\n    const overall = this.calculateOverallHealth(_services);\n    \n    // Collect system _metrics\n    const _metrics = await this.collectSystemMetrics();\n    \n    const systemHealth: SystemHealth = {\n      overall,\n      services,\n      _metrics,\n      timestamp: new Date(),\n      version: '4.0.0'\n    };\n    \n    // Store in history\n    this.storeHealthHistory(_systemHealth);\n    \n    // Send to monitoring service\n    this.reportHealthStatus(_systemHealth);\n    \n    return systemHealth;\n  }\n\n  // Check API health\n  private async checkAPIHealth(): Promise<ServiceHealth> {\n    const startTime = performance.now();\n    \n    try {\n      const response = await fetch('/api/health', {\n        method: 'GET',\n        signal: AbortSignal.timeout(5000)\n      });\n      \n      const responseTime = performance.now() - startTime;\n      \n      if (response.ok) {\n        const data = await response.json();\n        return {\n          name: 'API',\n          status: HealthStatus.HEALTHY,\n          responseTime,\n          lastChecked: new Date(),\n          uptime: data.uptime,\n          details: data\n        };\n      } else {\n        return {\n          name: 'API',\n          status: response.status >= 500 ? HealthStatus.UNHEALTHY : HealthStatus.DEGRADED,\n          responseTime,\n          message: `HTTP ${response.status}`,\n          lastChecked: new Date()\n        };\n      }\n    } catch (error) {\n      return {\n        name: 'API',\n        status: HealthStatus.UNHEALTHY,\n        responseTime: performance.now() - startTime,\n        message: error instanceof Error ? error.message : 'Connection failed',\n        lastChecked: new Date()\n      };\n    }\n  }\n\n  // Check WebSocket health\n  private async checkWebSocketHealth(): Promise<ServiceHealth> {\n    const startTime = performance.now();\n    \n    try {\n      const isConnected = wsService.isConnected();\n      const latency = wsService.getLatency();\n      \n      return {\n        name: 'WebSocket',\n        status: isConnected ? HealthStatus.HEALTHY : HealthStatus.UNHEALTHY,\n        responseTime: latency,\n        lastChecked: new Date(),\n        details: {\n          connected: isConnected,\n          latency\n        }\n      };\n    } catch (error) {\n      return {\n        name: 'WebSocket',\n        status: HealthStatus.UNHEALTHY,\n        responseTime: performance.now() - startTime,\n        message: error instanceof Error ? error.message : 'Check failed',\n        lastChecked: new Date()\n      };\n    }\n  }\n\n  // Check database health\n  private async checkDatabaseHealth(): Promise<ServiceHealth> {\n    const startTime = performance.now();\n    \n    try {\n      const response = await fetch('/api/health/database', {\n        method: 'GET',\n        signal: AbortSignal.timeout(5000)\n      });\n      \n      const responseTime = performance.now() - startTime;\n      \n      if (response.ok) {\n        const data = await response.json();\n        return {\n          name: 'Database',\n          status: data.healthy ? HealthStatus.HEALTHY : HealthStatus.DEGRADED,\n          responseTime,\n          lastChecked: new Date(),\n          details: {\n            connections: data.connections,\n            replicationLag: data.replicationLag\n          }\n        };\n      } else {\n        return {\n          name: 'Database',\n          status: HealthStatus.UNHEALTHY,\n          responseTime,\n          message: `HTTP ${response.status}`,\n          lastChecked: new Date()\n        };\n      }\n    } catch {\n      return {\n        name: 'Database',\n        status: HealthStatus.UNHEALTHY,\n        responseTime: performance.now() - startTime,\n        message: 'Database check failed',\n        lastChecked: new Date()\n      };\n    }\n  }\n\n  // Check cache health\n  private async checkCacheHealth(): Promise<ServiceHealth> {\n    const startTime = performance.now();\n    \n    try {\n      const response = await fetch('/api/health/cache', {\n        method: 'GET',\n        signal: AbortSignal.timeout(3000)\n      });\n      \n      const responseTime = performance.now() - startTime;\n      \n      if (response.ok) {\n        const data = await response.json();\n        return {\n          name: 'Cache',\n          status: data.healthy ? HealthStatus.HEALTHY : HealthStatus.DEGRADED,\n          responseTime,\n          lastChecked: new Date(),\n          details: {\n            hitRate: data.hitRate,\n            memoryUsage: data.memoryUsage\n          }\n        };\n      } else {\n        return {\n          name: 'Cache',\n          status: HealthStatus.DEGRADED,\n          responseTime,\n          message: 'Cache degraded',\n          lastChecked: new Date()\n        };\n      }\n    } catch {\n      return {\n        name: 'Cache',\n        status: HealthStatus.DEGRADED,\n        responseTime: performance.now() - startTime,\n        message: 'Cache check failed',\n        lastChecked: new Date()\n      };\n    }\n  }\n\n  // Check crisis system health\n  private async checkCrisisSystemHealth(): Promise<ServiceHealth> {\n    const startTime = performance.now();\n    \n    try {\n      const response = await fetch('/api/health/crisis', {\n        method: 'GET',\n        signal: AbortSignal.timeout(3000)\n      });\n      \n      const responseTime = performance.now() - startTime;\n      \n      if (response.ok) {\n        const data: CrisisMetrics = await response.json();\n        \n        // Determine health based on crisis _metrics\n        let status = HealthStatus.HEALTHY;\n        let message: string | undefined;\n        \n        if (data.waitingUsers > 10) {\n          status = HealthStatus.DEGRADED;\n          message = 'High number of waiting users';\n        }\n        \n        if (data.availableCounselors === 0) {\n          status = HealthStatus.UNHEALTHY;\n          message = 'No counselors available';\n        }\n        \n        if (data.responseTime.p95 > 60000) { // 60 seconds\n          status = HealthStatus.DEGRADED;\n          message = 'High response times';\n        }\n        \n        return {\n          name: 'Crisis System',\n          status,\n          responseTime,\n          message,\n          lastChecked: new Date(),\n          details: data\n        };\n      } else {\n        return {\n          name: 'Crisis System',\n          status: HealthStatus.UNHEALTHY,\n          responseTime,\n          message: 'Crisis system unavailable',\n          lastChecked: new Date()\n        };\n      }\n    } catch {\n      return {\n        name: 'Crisis System',\n        status: HealthStatus.UNKNOWN,\n        responseTime: performance.now() - startTime,\n        message: 'Crisis system check failed',\n        lastChecked: new Date()\n      };\n    }\n  }\n\n  // Check third-party integrations\n  private async checkIntegrationsHealth(): Promise<ServiceHealth> {\n    const startTime = performance.now();\n    const integrations = ['payment', 'video', 'sms', 'email'];\n    const results: Record<string, boolean> = {};\n    \n    try {\n      // Check each integration in parallel\n      const _checks = integrations.map(async (integration) => {\n        try {\n          const response = await fetch(`/api/health/integration/${integration}`, {\n            method: 'GET',\n            signal: AbortSignal.timeout(3000)\n          });\n          results[integration] = response.ok;\n        } catch {\n          results[integration] = false;\n        }\n      });\n      \n      await Promise.all(_checks);\n      \n      const healthyCount = Object.values(_results).filter(v => v).length;\n      const totalCount = Object.values(_results).length;\n      \n      let status = HealthStatus.HEALTHY;\n      if (healthyCount < totalCount) {\n        status = healthyCount > totalCount / 2 ? HealthStatus.DEGRADED : HealthStatus.UNHEALTHY;\n      }\n      \n      return {\n        name: 'Integrations',\n        status,\n        responseTime: performance.now() - startTime,\n        lastChecked: new Date(),\n        details: results\n      };\n    } catch {\n      return {\n        name: 'Integrations',\n        status: HealthStatus.UNKNOWN,\n        responseTime: performance.now() - startTime,\n        message: 'Integration check failed',\n        lastChecked: new Date()\n      };\n    }\n  }\n\n  // Calculate overall system health\n  private calculateOverallHealth(services: ServiceHealth[]): HealthStatus {\n    const criticalServices = ['API', 'Database', 'Crisis System'];\n    \n    // Check critical services\n    for (const service of services) {\n      if (criticalServices.includes(service.name) && service.status === HealthStatus.UNHEALTHY) {\n        return HealthStatus.UNHEALTHY;\n      }\n    }\n    \n    // Check for degraded services\n    const degradedCount = services.filter(s => s.status === HealthStatus.DEGRADED).length;\n    if (degradedCount > services.length / 3) {\n      return HealthStatus.DEGRADED;\n    }\n    \n    // Check for any unhealthy services\n    const unhealthyCount = services.filter(s => s.status === HealthStatus.UNHEALTHY).length;\n    if (unhealthyCount > 0) {\n      return HealthStatus.DEGRADED;\n    }\n    \n    return HealthStatus.HEALTHY;\n  }\n\n  // Collect system metrics\n  private async collectSystemMetrics(): Promise<SystemMetrics> {\n    // In a real implementation, these would come from actual system monitoring\n    return {\n      cpu: {\n        usage: this.getRandomMetric(10, 80),\n        cores: navigator.hardwareConcurrency || 4\n      },\n      memory: {\n        used: this.getRandomMetric(1000, 3000),\n        total: 4096,\n        percentage: this.getRandomMetric(25, 75)\n      },\n      storage: {\n        used: this.getRandomMetric(10000, 50000),\n        total: 100000,\n        percentage: this.getRandomMetric(10, 50)\n      },\n      network: {\n        latency: this.getRandomMetric(10, 100),\n        bandwidth: this.getRandomMetric(50, 100),\n        packetsLost: this.getRandomMetric(0, 0.1)\n      },\n      activeUsers: Math.floor(this.getRandomMetric(100, 1000)),\n      activeSessions: Math.floor(this.getRandomMetric(50, 500)),\n      requestsPerMinute: Math.floor(this.getRandomMetric(1000, 5000)),\n      errorRate: this.getRandomMetric(0, 0.05)\n    };\n  }\n\n  // Collect performance metrics\n  private collectMetrics(): void {\n    if (typeof window === 'undefined') return;\n    \n    const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n    const paint = performance.getEntriesByType('paint');\n    \n    const _metrics: PerformanceMetrics = {\n      pageLoadTime: navigation ? navigation.loadEventEnd - navigation.fetchStart : 0,\n      timeToFirstByte: navigation ? navigation.responseStart - navigation.fetchStart : 0,\n      firstContentfulPaint: this.getMetricValue(paint, 'first-contentful-paint'),\n      largestContentfulPaint: this.getLCPValue(),\n      cumulativeLayoutShift: this.getCLSValue(),\n      firstInputDelay: this.getFIDValue(),\n      totalBlockingTime: this.getTBTValue()\n    };\n    \n    this.reportPerformanceMetrics(_metrics);\n  }\n\n  // Record performance metric\n  private recordPerformanceMetric(_entry: PerformanceEntry): void {\n    // Store and analyze performance entries\n    logger.info(`Performance metric: ${_entry.name} - ${_entry.entryType} - ${_entry.duration}ms`);\n  }\n\n  // Helper methods for performance metrics\n  private getMetricValue(entries: PerformanceEntryList, name: string): number {\n    const _entry = entries.find(e => e.name === name);\n    return _entry ? _entry.startTime : 0;\n  }\n\n  private getLCPValue(): number {\n    // In production, use PerformanceObserver for LCP\n    return this.getRandomMetric(1000, 3000);\n  }\n\n  private getCLSValue(): number {\n    // In production, calculate actual CLS\n    return this.getRandomMetric(0, 0.1);\n  }\n\n  private getFIDValue(): number {\n    // In production, measure actual FID\n    return this.getRandomMetric(10, 100);\n  }\n\n  private getTBTValue(): number {\n    // In production, calculate actual TBT\n    return this.getRandomMetric(50, 300);\n  }\n\n  // Store health history\n  private storeHealthHistory(health: SystemHealth): void {\n    health.services.forEach(service => {\n      if (!this.healthHistory.has(service.name)) {\n        this.healthHistory.set(service.name, []);\n      }\n      \n      const history = this.healthHistory.get(service.name)!;\n      history.push(_service);\n      \n      // Limit history size\n      if (history.length > this.maxHistorySize) {\n        history.shift();\n      }\n    });\n  }\n\n  // Report health status to monitoring service\n  private reportHealthStatus(health: SystemHealth): void {\n    // Send to monitoring endpoint\n    if (health.overall !== HealthStatus.HEALTHY) {\n      logger.warn('System health degraded:', health);\n    }\n    \n    // Send metrics to Prometheus/Grafana\n    this.sendMetricsToMonitoring(_health);\n  }\n\n  // Report performance metrics\n  private reportPerformanceMetrics(_metrics: PerformanceMetrics): void {\n    // Send to analytics service\n    logger.info('Performance _metrics:', _metrics);\n  }\n\n  // Send metrics to monitoring service\n  private sendMetricsToMonitoring(health: SystemHealth): void {\n    // In production, send to Prometheus pushgateway\n    try {\n      fetch('/api/_metrics/push', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          timestamp: health.timestamp,\n          _metrics: health._metrics,\n          services: health.services.map(s => ({\n            name: s.name,\n            status: s.status,\n            responseTime: s.responseTime\n          }))\n        })\n      }).catch(error => {\n        logger.error('Failed to send _metrics:', error);\n      });\n    } catch (_error) {\n      logger.error('Failed to send _metrics:');\n    }\n  }\n\n  // Utility method for generating random metrics (for demo)\n  private getRandomMetric(min: number, max: number): number {\n    return Math.random() * (max - min) + min;\n  }\n\n  // Public methods for accessing health data\n  public async getSystemHealth(): Promise<SystemHealth> {\n    return this.performHealthCheck();\n  }\n\n  public getHealthHistory(_serviceName: string): ServiceHealth[] {\n    return this.healthHistory.get(_serviceName) || [];\n  }\n\n  public async getCrisisMetrics(): Promise<CrisisMetrics> {\n    const response = await fetch('/api/_metrics/crisis');\n    return response.json();\n  }\n\n  public getPerformanceMetrics(): PerformanceMetrics {\n    // Return latest collected _metrics\n    const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n    const paint = performance.getEntriesByType('paint');\n    \n    return {\n      pageLoadTime: navigation ? navigation.loadEventEnd - navigation.fetchStart : 0,\n      timeToFirstByte: navigation ? navigation.responseStart - navigation.fetchStart : 0,\n      firstContentfulPaint: this.getMetricValue(paint, 'first-contentful-paint'),\n      largestContentfulPaint: this.getLCPValue(),\n      cumulativeLayoutShift: this.getCLSValue(),\n      firstInputDelay: this.getFIDValue(),\n      totalBlockingTime: this.getTBTValue()\n    };\n  }\n}\n\n// Export singleton instance\nexport const _healthCheckService = HealthCheckService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\notifications\\ComprehensiveNotificationService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1745,1748],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1745,1748],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2496,2499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2496,2499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2541,2544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2541,2544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":574,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":574,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17639,17642],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17639,17642],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unreachable","severity":2,"message":"Unreachable code.","line":631,"column":21,"nodeType":"BlockStatement","messageId":"unreachableCode","endLine":636,"endColumn":6},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":641,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":641,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19954,19957],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19954,19957],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":642,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":642,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20031,20034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20031,20034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":645,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":645,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20171,20174],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20171,20174],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unreachable","severity":2,"message":"Unreachable code.","line":722,"column":13,"nodeType":"BlockStatement","messageId":"unreachableCode","endLine":724,"endColumn":6}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger, LogCategory } from '../logging/logger';\r\nimport { secureStorage } from '../security/secureStorage';\r\nimport { CrisisProfile } from '../../types/ai-insights';\r\n\r\nexport interface NotificationRule {\r\n  id: string;\r\n  name: string;\r\n  type: 'wellness_reminder' | 'medication_reminder' | 'mood_check' | 'crisis_followup' | 'appointment_reminder' | 'self_care_prompt';\r\n  priority: 'low' | 'medium' | 'high' | 'critical';\r\n  trigger: NotificationTrigger;\r\n  conditions: NotificationCondition[];\r\n  content: NotificationContent;\r\n  schedule: NotificationSchedule;\r\n  isActive: boolean;\r\n  createdAt: number;\r\n  lastTriggered?: number;\r\n}\r\n\r\nexport interface NotificationTrigger {\r\n  type: 'time_based' | 'event_based' | 'condition_based' | 'geolocation_based';\r\n  parameters: {\r\n    timePattern?: string; // cron-like pattern\r\n    eventType?: string;\r\n    condition?: string;\r\n    location?: { latitude: number; longitude: number; radius: number };\r\n  };\r\n}\r\n\r\nexport interface NotificationCondition {\r\n  type: 'mood_score' | 'stress_level' | 'activity_level' | 'sleep_quality' | 'medication_adherence' | 'crisis_risk';\r\n  operator: 'equals' | 'greater_than' | 'less_than' | 'between';\r\n  value: number | string | [number, number];\r\n}\r\n\r\nexport interface NotificationContent {\r\n  title: string;\r\n  body: string;\r\n  icon?: string;\r\n  image?: string;\r\n  actions?: NotificationAction[];\r\n  personalizedElements?: {\r\n    userName?: boolean;\r\n    moodContext?: boolean;\r\n    progressData?: boolean;\r\n  };\r\n}\r\n\r\nexport interface NotificationAction {\r\n  id: string;\r\n  title: string;\r\n  icon?: string;\r\n  action: 'open_app' | 'log_mood' | 'start_breathing' | 'call_crisis_line' | 'view_resources' | 'dismiss';\r\n  parameters?: Record<string, any>;\r\n}\r\n\r\nexport interface NotificationSchedule {\r\n  frequency: 'once' | 'daily' | 'weekly' | 'monthly' | 'custom';\r\n  daysOfWeek?: number[]; // 0 = Sunday, 1 = Monday, etc.\r\n  timeOfDay?: string; // HH:MM format\r\n  timezone?: string;\r\n  endDate?: number;\r\n  respectSleepHours?: boolean;\r\n  sleepStart?: string; // HH:MM\r\n  sleepEnd?: string; // HH:MM\r\n}\r\n\r\nexport interface SmartNotification {\r\n  id: string;\r\n  _ruleId: string;\r\n  title: string;\r\n  body: string;\r\n  priority: 'low' | 'medium' | 'high' | 'critical';\r\n  _timestamp: number;\r\n  scheduledFor: number;\r\n  status: 'pending' | 'sent' | 'delivered' | 'clicked' | 'dismissed' | 'expired';\r\n  actions: NotificationAction[];\r\n  metadata: {\r\n    userId: string;\r\n    context?: Record<string, any>;\r\n    personalizedData?: Record<string, any>;\r\n  };\r\n}\r\n\r\nexport interface NotificationPreferences {\r\n  userId: string;\r\n  globalEnabled: boolean;\r\n  quietHours: {\r\n    enabled: boolean;\r\n    start: string; // HH:MM\r\n    end: string; // HH:MM\r\n  };\r\n  categories: {\r\n    wellness_reminders: boolean;\r\n    medication_reminders: boolean;\r\n    mood_checks: boolean;\r\n    crisis_alerts: boolean;\r\n    appointment_reminders: boolean;\r\n    self_care_prompts: boolean;\r\n  };\r\n  delivery: {\r\n    push: boolean;\r\n    email: boolean;\r\n    sms: boolean;\r\n    inApp: boolean;\r\n  };\r\n  frequency: {\r\n    maxPerDay: number;\r\n    respectDoNotDisturb: boolean;\r\n  };\r\n}\r\n\r\nexport class ComprehensiveNotificationService {\r\n  private rules: Map<string, NotificationRule> = new Map();\r\n  private notifications: Map<string, SmartNotification> = new Map();\r\n  private preferences: NotificationPreferences | null = null;\r\n  private scheduledNotifications: Set<number> = new Set();\r\n  private serviceWorker: ServiceWorker | null = null;\r\n\r\n  constructor() {\r\n    this.initializeService();\r\n  }\r\n\r\n  private async initializeService(): Promise<void> {\r\n    try {\r\n      // Register service worker for background notifications\r\n      await this.registerServiceWorker();\r\n      \r\n      // Load user preferences and rules\r\n      await this.loadPreferences();\r\n      await this.loadNotificationRules();\r\n      \r\n      // Set up default notification rules\r\n      await this.setupDefaultRules();\r\n      \r\n      // Start notification scheduler\r\n      this.startNotificationScheduler();\r\n      \r\n      logger.info('Comprehensive notification service initialized', {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Failed to initialize notification service:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n    }\r\n  }\r\n\r\n  private async registerServiceWorker(): Promise<void> {\r\n    try {\r\n      if ('serviceWorker' in navigator && 'Notification' in window) {\r\n        const registration = await navigator.serviceWorker.register('/service-worker.js');\r\n        this.serviceWorker = registration.active;\r\n        \r\n        // Request notification permission\r\n        if (Notification.permission === 'default') {\r\n          const permission = await Notification.requestPermission();\r\n          logger.info(`Notification permission: ${permission}`, {\r\n            category: LogCategory.NOTIFICATIONS,\r\n            metadata: { permission }\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      logger.error('Service worker registration failed:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n    }\r\n  }\r\n\r\n  private async loadPreferences(): Promise<void> {\r\n    try {\r\n      const preferences = await secureStorage.getItem('notification_preferences');\r\n      \r\n      if (_preferences) {\r\n        this.preferences = preferences;\r\n      } else {\r\n        // Create default preferences\r\n        this.preferences = {\r\n          userId: 'anonymous',\r\n          globalEnabled: true,\r\n          quietHours: {\r\n            enabled: true,\r\n            start: '22:00',\r\n            end: '08:00'\r\n          },\r\n          categories: {\r\n            wellness_reminders: true,\r\n            medication_reminders: true,\r\n            mood_checks: true,\r\n            crisis_alerts: true,\r\n            appointment_reminders: true,\r\n            self_care_prompts: true\r\n          },\r\n          delivery: {\r\n            push: true,\r\n            email: false,\r\n            sms: false,\r\n            inApp: true\r\n          },\r\n          frequency: {\r\n            maxPerDay: 8,\r\n            respectDoNotDisturb: true\r\n          }\r\n        };\r\n        \r\n        await this.savePreferences();\r\n      }\r\n    } catch (error) {\r\n      logger.error('Failed to load notification preferences:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n    }\r\n  }\r\n\r\n  private async loadNotificationRules(): Promise<void> {\r\n    try {\r\n      const rules = await secureStorage.getItem('notification_rules') || [];\r\n      \r\n      rules.forEach((rule: NotificationRule) => {\r\n        this.rules.set(rule.id, rule);\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Failed to load notification rules:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n    }\r\n  }\r\n\r\n  private async setupDefaultRules(): Promise<void> {\r\n    const defaultRules: Omit<NotificationRule, 'id' | 'createdAt'>[] = [\r\n      {\r\n        name: 'Morning Mood Check-in',\r\n        type: 'mood_check',\r\n        priority: 'medium',\r\n        trigger: {\r\n          type: 'time_based',\r\n          parameters: {\r\n            timePattern: '0 9 * * *' // 9:00 AM daily\r\n          }\r\n        },\r\n        conditions: [],\r\n        content: {\r\n          title: 'Good morning! 🌅',\r\n          body: 'How are you feeling today? Take a moment to check in with yourself.',\r\n          icon: '/icons/mood-check.png',\r\n          actions: [\r\n            {\r\n              id: 'log_mood',\r\n              title: 'Log Mood',\r\n              icon: '😊',\r\n              action: 'log_mood'\r\n            },\r\n            {\r\n              id: 'dismiss',\r\n              title: 'Later',\r\n              action: 'dismiss'\r\n            }\r\n          ],\r\n          personalizedElements: {\r\n            userName: true,\r\n            moodContext: true\r\n          }\r\n        },\r\n        schedule: {\r\n          frequency: 'daily',\r\n          respectSleepHours: true\r\n        },\r\n        isActive: true\r\n      },\r\n      {\r\n        name: 'Evening Self-Care Reminder',\r\n        type: 'self_care_prompt',\r\n        priority: 'low',\r\n        trigger: {\r\n          type: 'time_based',\r\n          parameters: {\r\n            timePattern: '0 19 * * *' // 7:00 PM daily\r\n          }\r\n        },\r\n        conditions: [],\r\n        content: {\r\n          title: 'Self-Care Time 🧘‍♀️',\r\n          body: 'You\\'ve worked hard today. Take some time for yourself with a relaxing activity.',\r\n          icon: '/icons/self-care.png',\r\n          actions: [\r\n            {\r\n              id: 'breathing',\r\n              title: 'Breathing Exercise',\r\n              icon: '🫁',\r\n              action: 'start_breathing'\r\n            },\r\n            {\r\n              id: 'meditation',\r\n              title: 'Meditation',\r\n              icon: '🧘',\r\n              action: 'open_app',\r\n              parameters: { page: 'meditation' }\r\n            }\r\n          ]\r\n        },\r\n        schedule: {\r\n          frequency: 'daily',\r\n          respectSleepHours: true\r\n        },\r\n        isActive: true\r\n      },\r\n      {\r\n        name: 'Crisis Follow-up Check',\r\n        type: 'crisis_followup',\r\n        priority: 'high',\r\n        trigger: {\r\n          type: 'condition_based',\r\n          parameters: {\r\n            condition: 'crisis_event_occurred'\r\n          }\r\n        },\r\n        conditions: [\r\n          {\r\n            type: 'crisis_risk',\r\n            operator: 'greater_than',\r\n            value: 0.7\r\n          }\r\n        ],\r\n        content: {\r\n          title: 'Checking in on you 💙',\r\n          body: 'We noticed you accessed crisis support. How are you feeling now?',\r\n          icon: '/icons/crisis-support.png',\r\n          actions: [\r\n            {\r\n              id: 'talk_now',\r\n              title: 'Talk to Someone',\r\n              icon: '💬',\r\n              action: 'call_crisis_line'\r\n            },\r\n            {\r\n              id: 'resources',\r\n              title: 'View Resources',\r\n              icon: '📚',\r\n              action: 'view_resources'\r\n            },\r\n            {\r\n              id: 'im_safe',\r\n              title: 'I\\'m Safe Now',\r\n              icon: '✅',\r\n              action: 'dismiss',\r\n              parameters: { feedback: 'safe' }\r\n            }\r\n          ]\r\n        },\r\n        schedule: {\r\n          frequency: 'once'\r\n        },\r\n        isActive: true\r\n      },\r\n      {\r\n        name: 'Weekly Progress Celebration',\r\n        type: 'wellness_reminder',\r\n        priority: 'medium',\r\n        trigger: {\r\n          type: 'time_based',\r\n          parameters: {\r\n            timePattern: '0 10 * * 1' // Mondays at 10 AM\r\n          }\r\n        },\r\n        conditions: [],\r\n        content: {\r\n          title: 'Weekly Check-in 📈',\r\n          body: 'Let\\'s review your wellness progress from last week and set goals for this week.',\r\n          icon: '/icons/progress.png',\r\n          actions: [\r\n            {\r\n              id: 'view_progress',\r\n              title: 'View Progress',\r\n              icon: '📊',\r\n              action: 'open_app',\r\n              parameters: { page: 'analytics' }\r\n            }\r\n          ],\r\n          personalizedElements: {\r\n            progressData: true\r\n          }\r\n        },\r\n        schedule: {\r\n          frequency: 'weekly',\r\n          daysOfWeek: [1] // Monday\r\n        },\r\n        isActive: true\r\n      },\r\n      {\r\n        name: 'Medication Reminder',\r\n        type: 'medication_reminder',\r\n        priority: 'high',\r\n        trigger: {\r\n          type: 'time_based',\r\n          parameters: {\r\n            timePattern: '0 8,20 * * *' // 8 AM and 8 PM daily\r\n          }\r\n        },\r\n        conditions: [],\r\n        content: {\r\n          title: 'Medication Reminder 💊',\r\n          body: 'Time to take your prescribed medication. Stay consistent with your treatment.',\r\n          icon: '/icons/medication.png',\r\n          actions: [\r\n            {\r\n              id: 'taken',\r\n              title: 'Taken',\r\n              icon: '✅',\r\n              action: 'dismiss',\r\n              parameters: { logged: true }\r\n            },\r\n            {\r\n              id: 'snooze',\r\n              title: 'Remind in 30min',\r\n              icon: '⏰',\r\n              action: 'dismiss',\r\n              parameters: { snooze: 30 }\r\n            }\r\n          ]\r\n        },\r\n        schedule: {\r\n          frequency: 'daily',\r\n          respectSleepHours: true\r\n        },\r\n        isActive: false // Disabled by default, user can enable if needed\r\n      }\r\n    ];\r\n\r\n    // Add default rules if they don't exist\r\n    for (const ruleData of defaultRules) {\r\n      const existingRule = Array.from(this.rules.values()).find(r => r.name === ruleData.name);\r\n      \r\n      if (!existingRule) {\r\n        const rule: NotificationRule = {\r\n          ...ruleData,\r\n          id: `rule_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n          createdAt: Date.now()\r\n        };\r\n        \r\n        this.rules.set(rule.id, rule);\r\n      }\r\n    }\r\n\r\n    await this.saveNotificationRules();\r\n  }\r\n\r\n  private startNotificationScheduler(): void {\r\n    // Check for pending notifications every minute\r\n    setInterval(() => {\r\n      this.processScheduledNotifications();\r\n    }, 60000);\r\n\r\n    // Initial check\r\n    this.processScheduledNotifications();\r\n  }\r\n\r\n  private async processScheduledNotifications(): Promise<void> {\r\n    try {\r\n      const now = Date.now();\r\n      \r\n      // Process time-based notifications\r\n      for (const rule of this.rules.values()) {\r\n        if (!rule.isActive || !this.isRuleEnabled(_rule)) continue;\r\n\r\n        if (rule.trigger.type === 'time_based') {\r\n          const _shouldTrigger = await this.shouldTriggerTimeBasedRule(rule, now);\r\n          if (_shouldTrigger) {\r\n            await this.createAndScheduleNotification(_rule);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Send pending notifications\r\n      await this.sendPendingNotifications();\r\n\r\n    } catch (error) {\r\n      logger.error('Failed to process scheduled notifications:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n    }\r\n  }\r\n\r\n  private async shouldTriggerTimeBasedRule(rule: NotificationRule, now: number): Promise<boolean> {\r\n    try {\r\n      // Check if we're in quiet hours\r\n      if (this.preferences?.quietHours.enabled && this.isInQuietHours()) {\r\n        return false;\r\n      }\r\n\r\n      // Check daily frequency limit\r\n      if (!await this.checkDailyFrequencyLimit()) {\r\n        return false;\r\n      }\r\n\r\n      // Check if rule was already triggered today (for daily rules)\r\n      if (rule.schedule.frequency === 'daily' && rule.lastTriggered) {\r\n        const lastTriggeredDate = new Date(rule.lastTriggered);\r\n        const currentDate = new Date(_now);\r\n        \r\n        if (lastTriggeredDate.toDateString() === currentDate.toDateString()) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      // Parse time pattern (simplified cron-like)\r\n      const timePattern = rule.trigger.parameters.timePattern;\r\n      if (_timePattern) {\r\n        return this.matchesTimePattern(timePattern, now);\r\n      }\r\n\r\n      return false;\r\n\r\n    } catch (error) {\r\n      logger.error('Error checking time-based rule:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private matchesTimePattern(pattern: string, _timestamp: number): boolean {\r\n    const date = new Date(_timestamp);\r\n    const parts = pattern.split(' ');\r\n    const minute = parts[0] || '*';\r\n    const hour = parts[1] || '*';\r\n    \r\n    const currentMinute = date.getMinutes();\r\n    const currentHour = date.getHours();\r\n    \r\n    // Simple pattern matching (full cron implementation would be more complex)\r\n    const minuteMatch = minute === '*' || parseInt(_minute) === currentMinute;\r\n    const hourMatch = hour === '*' || parseInt(_hour) === currentHour;\r\n    \r\n    return minuteMatch && hourMatch;\r\n  }\r\n\r\n  private isInQuietHours(): boolean {\r\n    if (!this.preferences?.quietHours.enabled) return false;\r\n\r\n    const now = new Date();\r\n    const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\r\n    \r\n    const startTime = this.preferences.quietHours.start;\r\n    const endTime = this.preferences.quietHours.end;\r\n    \r\n    // Handle overnight quiet hours (e.g., 22:00 to 08:00)\r\n    if (startTime > endTime) {\r\n      return currentTime >= startTime || currentTime <= endTime;\r\n    } else {\r\n      return currentTime >= startTime && currentTime <= endTime;\r\n    }\r\n  }\r\n\r\n  private async checkDailyFrequencyLimit(): Promise<boolean> {\r\n    const today = new Date().toDateString();\r\n    const todaysNotifications = Array.from(this.notifications.values())\r\n      .filter(n => new Date(n._timestamp).toDateString() === today && n.status === 'sent');\r\n    \r\n    const maxPerDay = this.preferences?.frequency.maxPerDay || 8;\r\n    return todaysNotifications.length < maxPerDay;\r\n  }\r\n\r\n  private isRuleEnabled(rule: NotificationRule): boolean {\r\n    if (!this.preferences?.globalEnabled) return false;\r\n    \r\n    const categoryKey = `${rule.type  }s` as keyof typeof this.preferences.categories;\r\n    return this.preferences.categories[categoryKey] !== false;\r\n  }\r\n\r\n  public async createAndScheduleNotification(\r\n    rule: NotificationRule, \r\n    _customData?: Record<string, any>\r\n  ): Promise<string | null> {\r\n    try {\r\n      // Check if conditions are met\r\n      const conditionsMet = await this.checkConditions(rule.conditions);\r\n      if (!conditionsMet) return null;\r\n\r\n      // Personalize notification content\r\n      const personalizedContent = await this.personalizeContent(rule.content, _customData);\r\n\r\n      const notification: SmartNotification = {\r\n        id: `notification_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n        _ruleId: rule.id,\r\n        title: personalizedContent.title,\r\n        body: personalizedContent.body,\r\n        priority: rule.priority,\r\n        _timestamp: Date.now(),\r\n        scheduledFor: Date.now(),\r\n        status: 'pending',\r\n        actions: personalizedContent.actions || [],\r\n        metadata: {\r\n          userId: this.preferences?.userId || 'anonymous',\r\n          context: _customData,\r\n          personalizedData: personalizedContent.personalizedData\r\n        }\r\n      };\r\n\r\n      this.notifications.set(notification.id, notification);\r\n      \r\n      // Update rule's last triggered time\r\n      rule.lastTriggered = Date.now();\r\n      this.rules.set(rule.id, rule);\r\n      \r\n      await this.saveNotificationRules();\r\n      \r\n      logger.info(`Notification created and scheduled: ${notification.id}`, {\r\n        category: LogCategory.NOTIFICATIONS,\r\n        metadata: { notificationId: notification.id }\r\n      });\r\n      return notification.id;\r\n\r\n    } catch (error) {\r\n      logger.error('Failed to create notification:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private async checkConditions(conditions: NotificationCondition[]): Promise<boolean> {\r\n    if (conditions.length === 0) return true;\r\n\r\n    try {\r\n      // In a real implementation, this would check actual user data\r\n      // For now, return true to allow notifications\r\n      return true;\r\n\r\n    } catch (error) {\r\n      logger.error('Error checking notification conditions:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private async personalizeContent(\r\n    content: NotificationContent, \r\n    _customData?: Record<string, any>\r\n  ): Promise<NotificationContent & { personalizedData?: Record<string, any> }> {\r\n    let personalizedTitle = content.title;\r\n    let personalizedBody = content.body;\r\n    const personalizedData: Record<string, any> = {};\r\n\r\n    try {\r\n      // Add user name if requested\r\n      if (content.personalizedElements?.userName) {\r\n        const userName = await this.getUserName();\r\n        if (_userName) {\r\n          personalizedTitle = personalizedTitle.replace(/Good morning!/g, `Good morning, ${userName}!`);\r\n          personalizedData.userName = userName;\r\n        }\r\n      }\r\n\r\n      // Add mood context if requested\r\n      if (content.personalizedElements?.moodContext) {\r\n        const moodContext = await this.getMoodContext();\r\n        if (_moodContext) {\r\n          personalizedData.moodContext = moodContext;\r\n        }\r\n      }\r\n\r\n      // Add progress data if requested\r\n      if (content.personalizedElements?.progressData) {\r\n        const progressData = await this.getProgressData();\r\n        if (progressData) {\r\n          personalizedBody += ` You've made great progress: ${progressData.summary}`;\r\n          personalizedData.progressData = progressData;\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...content,\r\n        title: personalizedTitle,\r\n        body: personalizedBody,\r\n        personalizedData\r\n      };\r\n\r\n    } catch (error) {\r\n      logger.error('Error personalizing content:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n      return content;\r\n    }\r\n  }\r\n\r\n  private async getUserName(): Promise<string | null> {\r\n    try {\r\n      const userProfile = await secureStorage.getItem('user_profile');\r\n      return userProfile?.name || null;\r\n    } catch {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private async getMoodContext(): Promise<string | null> {\r\n    try {\r\n      const recentMood = await secureStorage.getItem('recent_mood_data');\r\n      if (recentMood && recentMood.length > 0) {\r\n        const latest = recentMood[recentMood.length - 1];\r\n        return `Last mood: ${latest.mood} (${latest.energy}/10 energy)`;\r\n      }\r\n      return null;\r\n    } catch {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private async getProgressData(): Promise<{ summary: string; details: unknown } | null> {\r\n    try {\r\n      // Mock progress data\r\n      return {\r\n        summary: \"3 mood logs this week, 2 breathing sessions completed\",\r\n        details: {\r\n          moodLogs: 3,\r\n          breathingSessions: 2,\r\n          weeklyStreak: 5\r\n        }\r\n      };\r\n    } catch {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private async sendPendingNotifications(): Promise<void> {\r\n    const pendingNotifications = Array.from(this.notifications.values())\r\n      .filter(n => n.status === 'pending' && n.scheduledFor <= Date.now());\r\n\r\n    for (const notification of pendingNotifications) {\r\n      await this.sendNotification(notification);\r\n    }\r\n  }\r\n\r\n  private async sendNotification(notification: SmartNotification): Promise<void> {\r\n    try {\r\n      if (!this.preferences?.globalEnabled) return;\r\n\r\n      // Send push notification if enabled and supported\r\n      if (this.preferences.delivery.push && 'Notification' in window && Notification.permission === 'granted') {\r\n        const pushNotification = new Notification(notification.title, {\r\n          body: notification.body,\r\n          icon: '/icons/app-icon-192.png',\r\n          badge: '/icons/badge-72.png',\r\n          tag: notification.id,\r\n          requireInteraction: notification.priority === 'critical',\r\n          actions: notification.actions.slice(0, 2).map(action => ({\r\n            action: action.id,\r\n            title: action.title,\r\n            icon: action.icon\r\n          }))\r\n        });\r\n\r\n        pushNotification.onclick = () => {\r\n          this.handleNotificationClick(notification.id, 'main');\r\n        };\r\n\r\n        // Auto-close non-critical notifications after 10 seconds\r\n        if (notification.priority !== 'critical') {\r\n          setTimeout(() => pushNotification.close(), 10000);\r\n        }\r\n      }\r\n\r\n      // Send in-app notification if enabled\r\n      if (this.preferences.delivery.inApp) {\r\n        this.sendInAppNotification(notification);\r\n      }\r\n\r\n      // Update notification status\r\n      notification.status = 'sent';\r\n      notification.timestamp = Date.now();\r\n      this.notifications.set(notification.id, notification);\r\n\r\n      await this.saveNotifications();\r\n\r\n      logger.info(`Notification sent: ${notification.id}`, {\r\n        category: LogCategory.NOTIFICATIONS,\r\n        metadata: { notificationId: notification.id }\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Failed to send notification:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n      notification.status = 'expired';\r\n      this.notifications.set(notification.id, notification);\r\n    }\r\n  }\r\n\r\n  private sendInAppNotification(notification: SmartNotification): void {\r\n    // Dispatch custom event for in-app notifications\r\n    window.dispatchEvent(new CustomEvent('inAppNotification', {\r\n      detail: {\r\n        id: notification.id,\r\n        title: notification.title,\r\n        body: notification.body,\r\n        priority: notification.priority,\r\n        actions: notification.actions\r\n      }\r\n    }));\r\n  }\r\n\r\n  public async handleNotificationClick(notificationId: string, actionId: string): Promise<void> {\r\n    try {\r\n      const notification = this.notifications.get(_notificationId);\r\n      if (!notification) return;\r\n\r\n      // Update notification status\r\n      notification.status = 'clicked';\r\n      this.notifications.set(notificationId, notification);\r\n\r\n      // Find the action\r\n      const action = notification.actions.find(a => a.id === actionId);\r\n      if (!action) return;\r\n\r\n      // Execute action\r\n      await this.executeNotificationAction(action, notification);\r\n\r\n      await this.saveNotifications();\r\n\r\n    } catch (error) {\r\n      logger.error('Failed to handle notification click:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n    }\r\n  }\r\n\r\n  private async executeNotificationAction(\r\n    action: NotificationAction, \r\n    notification: SmartNotification\r\n  ): Promise<void> {\r\n    try {\r\n      switch (action.action) {\r\n        case 'open_app':\r\n          if (action.parameters?.page) {\r\n            window.location.hash = `#/${action.parameters.page}`;\r\n          } else {\r\n            window.focus();\r\n          }\r\n          break;\r\n\r\n        case 'log_mood':\r\n          window.location.hash = '#/wellness/mood-tracker';\r\n          break;\r\n\r\n        case 'start_breathing':\r\n          window.dispatchEvent(new CustomEvent('startBreathingExercise'));\r\n          break;\r\n\r\n        case 'call_crisis_line':\r\n          window.location.href = 'tel:988';\r\n          break;\r\n\r\n        case 'view_resources':\r\n          window.location.hash = '#/resources';\r\n          break;\r\n\r\n        case 'dismiss':\r\n          if (action.parameters?.snooze) {\r\n            // Snooze notification\r\n            const snoozeTime = action.parameters.snooze * 60 * 1000; // Convert minutes to ms\r\n            notification.scheduledFor = Date.now() + snoozeTime;\r\n            notification.status = 'pending';\r\n          }\r\n          break;\r\n      }\r\n\r\n      logger.info(`Notification action executed: ${action.action}`, {\r\n        category: LogCategory.NOTIFICATIONS,\r\n        metadata: { action: action.action }\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Failed to execute notification action:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n    }\r\n  }\r\n\r\n  public async triggerCrisisNotification(crisisProfile: CrisisProfile): Promise<void> {\r\n    try {\r\n      const crisisRule: Omit<NotificationRule, 'id' | 'createdAt'> = {\r\n        name: 'Crisis Alert',\r\n        type: 'crisis_followup',\r\n        priority: 'critical',\r\n        trigger: {\r\n          type: 'event_based',\r\n          parameters: {\r\n            eventType: 'crisis_detected'\r\n          }\r\n        },\r\n        conditions: [],\r\n        content: {\r\n          title: 'Crisis Support Available 🚨',\r\n          body: 'We detected you might need immediate support. Help is available right now.',\r\n          icon: '/icons/crisis-alert.png',\r\n          actions: [\r\n            {\r\n              id: 'call_911',\r\n              title: 'Call 911',\r\n              icon: '🚨',\r\n              action: 'open_app',\r\n              parameters: { phone: '911' }\r\n            },\r\n            {\r\n              id: 'crisis_chat',\r\n              title: 'Crisis Chat',\r\n              icon: '💬',\r\n              action: 'open_app',\r\n              parameters: { page: 'crisis-chat' }\r\n            },\r\n            {\r\n              id: 'call_988',\r\n              title: 'Call 988',\r\n              icon: '📞',\r\n              action: 'call_crisis_line'\r\n            }\r\n          ]\r\n        },\r\n        schedule: {\r\n          frequency: 'once'\r\n        },\r\n        isActive: true\r\n      };\r\n\r\n      const rule: NotificationRule = {\r\n        ...crisisRule,\r\n        id: `crisis_${Date.now()}`,\r\n        createdAt: Date.now()\r\n      };\r\n\r\n      await this.createAndScheduleNotification(rule, {\r\n        crisisProfile,\r\n        urgency: 'immediate'\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Failed to trigger crisis notification:', error instanceof Error ? error : new Error(String(error)), {\r\n        category: LogCategory.NOTIFICATIONS\r\n      });\r\n    }\r\n  }\r\n\r\n  public async updatePreferences(updates: Partial<NotificationPreferences>): Promise<void> {\r\n    if (!this.preferences) {\r\n      await this.loadPreferences();\r\n    }\r\n\r\n    if (this.preferences) {\r\n      this.preferences = { ...this.preferences, ...updates };\r\n      await this.savePreferences();\r\n    }\r\n  }\r\n\r\n  public async addCustomRule(rule: Omit<NotificationRule, 'id' | 'createdAt'>): Promise<string> {\r\n    const newRule: NotificationRule = {\r\n      ...rule,\r\n      id: `custom_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      createdAt: Date.now()\r\n    };\r\n\r\n    this.rules.set(newRule.id, newRule);\r\n    await this.saveNotificationRules();\r\n\r\n    return newRule.id;\r\n  }\r\n\r\n  public async removeRule(_ruleId: string): Promise<boolean> {\r\n    const deleted = this.rules.delete(_ruleId);\r\n    if (_deleted) {\r\n      await this.saveNotificationRules();\r\n    }\r\n    return deleted;\r\n  }\r\n\r\n  public getPreferences(): NotificationPreferences | null {\r\n    return this.preferences;\r\n  }\r\n\r\n  public getAllRules(): NotificationRule[] {\r\n    return Array.from(this.rules.values());\r\n  }\r\n\r\n  public getNotificationHistory(): SmartNotification[] {\r\n    return Array.from(this.notifications.values())\r\n      .sort((a, b) => b._timestamp - a._timestamp);\r\n  }\r\n\r\n  private async savePreferences(): Promise<void> {\r\n    if (this.preferences) {\r\n      await secureStorage.setItem('notification_preferences', this.preferences);\r\n    }\r\n  }\r\n\r\n  private async saveNotificationRules(): Promise<void> {\r\n    const rules = Array.from(this.rules.values());\r\n    await secureStorage.setItem('notification_rules', rules);\r\n  }\r\n\r\n  private async saveNotifications(): Promise<void> {\r\n    const notifications = Array.from(this.notifications.values());\r\n    // Keep only last 100 notifications to prevent storage bloat\r\n    const recentNotifications = notifications.slice(-100);\r\n    await secureStorage.setItem('notification_history', recentNotifications);\r\n  }\r\n}\r\n\r\nexport const comprehensiveNotificationService = new ComprehensiveNotificationService();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\privacy\\privacyService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":164,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":164,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":212,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":212,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":257,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":257,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":296,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":296,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":337,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":337,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":377,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":377,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":421,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":421,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":483,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":483,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":525,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":525,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":555,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":555,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":594,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":594,"endColumn":20}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Privacy and Consent Management Service\n * GDPR and HIPAA compliant privacy controls\n * Manages user consent, data sharing preferences, and privacy settings\n */\n\nimport { secureStorage } from '../security/secureStorage';\nimport { auditLogger } from '../security/auditLogger';\nimport { cryptoService } from '../security/cryptoService';\nimport { logger } from '../utils/logger';\n\nexport interface ConsentRecord {\n  id: string;\n  userId: string;\n  type: ConsentType;\n  consentGiven: boolean;\n  purpose: string;\n  dataCategories: DataCategory[];\n  expiresAt?: Date;\n  withdrawable: boolean;\n  timestamp: Date;\n  ipAddress?: string;\n  version: string;\n}\n\nexport type ConsentType =\n  | 'data_processing'\n  | 'data_sharing'\n  | 'marketing'\n  | 'analytics'\n  | 'cookies'\n  | 'health_data'\n  | 'crisis_intervention'\n  | 'emergency_contact'\n  | 'therapist_access'\n  | 'research'\n  | 'third_party';\n\nexport type DataCategory =\n  | 'personal_info'\n  | 'health_records'\n  | 'mood_data'\n  | 'journal_entries'\n  | 'crisis_plans'\n  | 'medications'\n  | 'therapy_notes'\n  | 'community_posts'\n  | 'usage_analytics'\n  | 'device_info';\n\nexport interface PrivacySettings {\n  userId: string;\n  dataMinimization: boolean;\n  anonymousMode: boolean;\n  shareData: boolean;\n  shareWithTherapist: boolean;\n  shareWithEmergencyContacts: boolean;\n  allowAnalytics: boolean;\n  allowResearch: boolean;\n  publicProfile: boolean;\n  showMoodHistory: boolean;\n  encryptLocalData: boolean;\n  autoDeleteInactiveDays?: number;\n  dataRetentionDays?: number;\n  exportFormat: 'json' | 'csv' | 'pdf';\n}\n\nexport interface DataAccessRequest {\n  id: string;\n  userId: string;\n  requestType: 'access' | 'portability' | 'deletion' | 'rectification';\n  status: 'pending' | 'processing' | 'completed' | 'rejected';\n  requestedAt: Date;\n  completedAt?: Date;\n  dataCategories?: DataCategory[];\n  reason?: string;\n  response?: unknown;\n}\n\nexport interface DataSharingAgreement {\n  id: string;\n  userId: string;\n  recipientId: string;\n  recipientType: 'therapist' | 'emergency_contact' | 'researcher' | 'third_party';\n  dataCategories: DataCategory[];\n  purpose: string;\n  startDate: Date;\n  endDate?: Date;\n  revocable: boolean;\n  active: boolean;\n}\n\nclass PrivacyService {\n  private static instance: PrivacyService;\n  private readonly CONSENT_VERSION = '2.0';\n  private readonly DEFAULT_RETENTION_DAYS = 365;\n  private readonly MIN_AGE_OF_CONSENT = 13;\n  private privacyCache: Map<string, PrivacySettings> = new Map();\n\n  private constructor() {\n    this.initializeService();\n  }\n\n  static getInstance(): PrivacyService {\n    if (!PrivacyService.instance) {\n      PrivacyService.instance = new PrivacyService();\n    }\n    return PrivacyService.instance;\n  }\n\n  private initializeService(): void {\n    // Set up periodic consent review reminders\n    this.setupConsentReview();\n    \n    // Set up data retention cleanup\n    this.setupDataRetention();\n  }\n\n  /**\n   * Record user consent\n   */\n  async recordConsent(params: {\n    userId: string;\n    type: ConsentType;\n    consentGiven: boolean;\n    purpose: string;\n    dataCategories: DataCategory[];\n    expiresInDays?: number;\n    withdrawable?: boolean;\n  }): Promise<ConsentRecord> {\n    try {\n      const consent: ConsentRecord = {\n        id: cryptoService.generateSecureUUID(),\n        userId: params.userId,\n        type: params.type,\n        consentGiven: params.consentGiven,\n        purpose: params.purpose,\n        dataCategories: params.dataCategories,\n        expiresAt: params.expiresInDays \n          ? new Date(Date.now() + params.expiresInDays * 24 * 60 * 60 * 1000)\n          : undefined,\n        withdrawable: params.withdrawable !== false,\n        timestamp: new Date(),\n        ipAddress: await this.getClientIp(),\n        version: this.CONSENT_VERSION,\n      };\n\n      // Store consent record\n      await this.storeConsentRecord(consent);\n\n      // Log consent event\n      await auditLogger.log({\n        event: params.consentGiven ? 'CONSENT_GRANTED' : 'CONSENT_REVOKED',\n        userId: params.userId,\n        details: {\n          type: params.type,\n          dataCategories: params.dataCategories,\n          purpose: params.purpose,\n        },\n        severity: 'info',\n      });\n\n      return consent;\n    } catch (_error) {\n      logger.error('Failed to record consent:');\n      throw undefined;\n    }\n  }\n\n  /**\n   * Withdraw consent\n   */\n  async withdrawConsent(\n    userId: string,\n    consentId: string\n  ): Promise<void> {\n    try {\n      const consent = await this.getConsentRecord(consentId);\n      \n      if (!consent) {\n        throw new Error('Consent record not found');\n      }\n\n      if (consent.userId !== userId) {\n        throw new Error('Unauthorized');\n      }\n\n      if (!consent.withdrawable) {\n        throw new Error('This consent cannot be withdrawn');\n      }\n\n      // Mark consent as withdrawn\n      consent.consentGiven = false;\n      await this.storeConsentRecord(consent);\n\n      // Trigger data deletion if required\n      if (consent.dataCategories.includes('health_records')) {\n        await this.scheduleDataDeletion(userId, consent.dataCategories);\n      }\n\n      // Log withdrawal\n      await auditLogger.log({\n        event: 'CONSENT_REVOKED',\n        userId,\n        details: {\n          consentId,\n          type: consent.type,\n          dataCategories: consent.dataCategories,\n        },\n        severity: 'info',\n      });\n    } catch (_error) {\n      logger.error('Failed to withdraw consent:');\n      throw undefined;\n    }\n  }\n\n  /**\n   * Get user's privacy settings\n   */\n  async getPrivacySettings(userId: string): Promise<PrivacySettings> {\n    try {\n      // Check cache first\n      if (this.privacyCache.has(userId)) {\n        return this.privacyCache.get(userId)!;\n      }\n\n      // Load from storage\n      const key = `privacy_settings_${userId}`;\n      const stored = await secureStorage.getItem(key);\n\n      if (stored) {\n        this.privacyCache.set(userId, stored);\n        return stored;\n      }\n\n      // Return defaults\n      const defaults: PrivacySettings = {\n        userId,\n        dataMinimization: true,\n        anonymousMode: false,\n        shareData: false,\n        shareWithTherapist: false,\n        shareWithEmergencyContacts: false,\n        allowAnalytics: false,\n        allowResearch: false,\n        publicProfile: false,\n        showMoodHistory: false,\n        encryptLocalData: true,\n        autoDeleteInactiveDays: 365,\n        dataRetentionDays: this.DEFAULT_RETENTION_DAYS,\n        exportFormat: 'json',\n      };\n\n      this.privacyCache.set(userId, defaults);\n      return defaults;\n    } catch (_error) {\n      logger.error('Failed to get privacy settings:');\n      throw undefined;\n    }\n  }\n\n  /**\n   * Update privacy settings\n   */\n  async updatePrivacySettings(\n    userId: string,\n    updates: Partial<PrivacySettings>\n  ): Promise<PrivacySettings> {\n    try {\n      const current = await this.getPrivacySettings(userId);\n      const updated = { ...current, ...updates };\n\n      // Store updated settings\n      const key = `privacy_settings_${userId}`;\n      await secureStorage.setItem(key, updated);\n\n      // Update cache\n      this.privacyCache.set(userId, updated);\n\n      // Log changes\n      await auditLogger.log({\n        event: 'CONFIGURATION_CHANGE',\n        userId,\n        details: {\n          type: 'privacy_settings',\n          changes: Object.keys(updates),\n        },\n        severity: 'info',\n      });\n\n      // Apply immediate changes\n      await this.applyPrivacySettings(userId, updated);\n\n      return updated;\n    } catch (_error) {\n      logger.error('Failed to update privacy settings:');\n      throw undefined;\n    }\n  }\n\n  /**\n   * Handle data access request (GDPR Article 15)\n   */\n  async requestDataAccess(\n    userId: string,\n    dataCategories?: DataCategory[]\n  ): Promise<DataAccessRequest> {\n    try {\n      const request: DataAccessRequest = {\n        id: cryptoService.generateSecureUUID(),\n        userId,\n        requestType: 'access',\n        status: 'pending',\n        requestedAt: new Date(),\n        dataCategories,\n      };\n\n      // Store request\n      await this.storeDataRequest(request);\n\n      // Process request asynchronously\n      this.processDataAccessRequest(request);\n\n      // Log request\n      await auditLogger.log({\n        event: 'DATA_ACCESS',\n        userId,\n        details: {\n          requestId: request.id,\n          dataCategories,\n        },\n        severity: 'info',\n      });\n\n      return request;\n    } catch (_error) {\n      logger.error('Failed to create data access request:');\n      throw undefined;\n    }\n  }\n\n  /**\n   * Request data portability (GDPR Article 20)\n   */\n  async requestDataPortability(\n    userId: string,\n    _format: 'json' | 'csv' | 'pdf' = 'json'\n  ): Promise<DataAccessRequest> {\n    try {\n      const request: DataAccessRequest = {\n        id: cryptoService.generateSecureUUID(),\n        userId,\n        requestType: 'portability',\n        status: 'pending',\n        requestedAt: new Date(),\n      };\n\n      // Store request\n      await this.storeDataRequest(request);\n\n      // Process request\n      this.processDataPortabilityRequest(request, _format);\n\n      // Log request\n      await auditLogger.log({\n        event: 'PHI_EXPORT',\n        userId,\n        details: {\n          requestId: request.id,\n          _format,\n        },\n        severity: 'info',\n      });\n\n      return request;\n    } catch (_error) {\n      logger.error('Failed to create data portability request:');\n      throw undefined;\n    }\n  }\n\n  /**\n   * Request data deletion (GDPR Article 17 - Right to be forgotten)\n   */\n  async requestDataDeletion(\n    userId: string,\n    dataCategories?: DataCategory[],\n    reason?: string\n  ): Promise<DataAccessRequest> {\n    try {\n      const request: DataAccessRequest = {\n        id: cryptoService.generateSecureUUID(),\n        userId,\n        requestType: 'deletion',\n        status: 'pending',\n        requestedAt: new Date(),\n        dataCategories,\n        reason,\n      };\n\n      // Store request\n      await this.storeDataRequest(request);\n\n      // Process request with verification\n      this.processDataDeletionRequest(request);\n\n      // Log request\n      await auditLogger.log({\n        event: 'DATA_DELETION',\n        userId,\n        details: {\n          requestId: request.id,\n          dataCategories,\n          reason,\n        },\n        severity: 'warning',\n      });\n\n      return request;\n    } catch (_error) {\n      logger.error('Failed to create data deletion request:');\n      throw undefined;\n    }\n  }\n\n  /**\n   * Create data sharing agreement\n   */\n  async createDataSharingAgreement(params: {\n    userId: string;\n    recipientId: string;\n    recipientType: 'therapist' | 'emergency_contact' | 'researcher' | 'third_party';\n    dataCategories: DataCategory[];\n    purpose: string;\n    durationDays?: number;\n    revocable?: boolean;\n  }): Promise<DataSharingAgreement> {\n    try {\n      const agreement: DataSharingAgreement = {\n        id: cryptoService.generateSecureUUID(),\n        userId: params.userId,\n        recipientId: params.recipientId,\n        recipientType: params.recipientType,\n        dataCategories: params.dataCategories,\n        purpose: params.purpose,\n        startDate: new Date(),\n        endDate: params.durationDays\n          ? new Date(Date.now() + params.durationDays * 24 * 60 * 60 * 1000)\n          : undefined,\n        revocable: params.revocable !== false,\n        active: true,\n      };\n\n      // Store agreement\n      await this.storeDataSharingAgreement(agreement);\n\n      // Record consent for sharing\n      await this.recordConsent({\n        userId: params.userId,\n        type: 'data_sharing',\n        consentGiven: true,\n        purpose: params.purpose,\n        dataCategories: params.dataCategories,\n        expiresInDays: params.durationDays,\n        withdrawable: params.revocable,\n      });\n\n      // Log agreement\n      await auditLogger.log({\n        event: 'PERMISSION_GRANTED',\n        userId: params.userId,\n        details: {\n          agreementId: agreement.id,\n          recipientId: params.recipientId,\n          recipientType: params.recipientType,\n          dataCategories: params.dataCategories,\n        },\n        severity: 'info',\n      });\n\n      return agreement;\n    } catch (_error) {\n      logger.error('Failed to create data sharing agreement:');\n      throw undefined;\n    }\n  }\n\n  /**\n   * Revoke data sharing agreement\n   */\n  async revokeDataSharingAgreement(\n    userId: string,\n    agreementId: string\n  ): Promise<void> {\n    try {\n      const agreement = await this.getDataSharingAgreement(agreementId);\n      \n      if (!agreement) {\n        throw new Error('Agreement not found');\n      }\n\n      if (agreement.userId !== userId) {\n        throw new Error('Unauthorized');\n      }\n\n      if (!agreement.revocable) {\n        throw new Error('This agreement cannot be revoked');\n      }\n\n      // Mark as inactive\n      agreement.active = false;\n      await this.storeDataSharingAgreement(agreement);\n\n      // Log revocation\n      await auditLogger.log({\n        event: 'PERMISSION_DENIED',\n        userId,\n        details: {\n          agreementId,\n          recipientId: agreement.recipientId,\n        },\n        severity: 'info',\n      });\n    } catch (_error) {\n      logger.error('Failed to revoke data sharing agreement:');\n      throw undefined;\n    }\n  }\n\n  /**\n   * Check if user has given consent for specific data processing\n   */\n  async hasConsent(\n    userId: string,\n    type: ConsentType,\n    dataCategories?: DataCategory[]\n  ): Promise<boolean> {\n    try {\n      const consents = await this.getUserConsents(userId);\n      \n      const relevantConsents = consents.filter(c => \n        c.type === type && \n        c.consentGiven &&\n        (!c.expiresAt || new Date() < new Date(c.expiresAt))\n      );\n\n      if (dataCategories) {\n        return relevantConsents.some(c =>\n          dataCategories.every(_cat => c.dataCategories.includes(_cat))\n        );\n      }\n\n      return relevantConsents.length > 0;\n    } catch (_error) {\n      logger.error('Failed to check consent:');\n      return false;\n    }\n  }\n\n  /**\n   * Get user's consent history\n   */\n  async getUserConsents(userId: string): Promise<ConsentRecord[]> {\n    const key = `consents_${userId}`;\n    const stored = await secureStorage.getItem(key);\n    return stored || [];\n  }\n\n  /**\n   * Anonymize user data\n   */\n  async anonymizeUserData(userId: string): Promise<void> {\n    try {\n      // Update privacy settings\n      await this.updatePrivacySettings(userId, {\n        anonymousMode: true,\n        publicProfile: false,\n        showMoodHistory: false,\n      });\n\n      // Anonymize stored data\n      await this.anonymizeStoredData(userId);\n\n      // Log anonymization\n      await auditLogger.log({\n        event: 'DATA_MODIFICATION',\n        userId,\n        details: {\n          action: 'anonymization',\n        },\n        severity: 'info',\n      });\n    } catch (_error) {\n      logger.error('Failed to anonymize user data:');\n      throw undefined;\n    }\n  }\n\n  /**\n   * Private helper methods\n   */\n  private async storeConsentRecord(consent: ConsentRecord): Promise<void> {\n    const key = `consents_${consent.userId}`;\n    const existing = await secureStorage.getItem(key) || [];\n    \n    // Update or add consent\n    const index = existing.findIndex((c: ConsentRecord) => c.id === consent.id);\n    if (index >= 0) {\n      existing[index] = consent;\n    } else {\n      existing.push(consent);\n    }\n    \n    await secureStorage.setItem(key, existing);\n  }\n\n  private async getConsentRecord(consentId: string): Promise<ConsentRecord | null> {\n    // Search all user consents (in production, use indexed database)\n    const allKeys = await secureStorage.getAllKeys();\n    const consentKeys = allKeys.filter(k => k.startsWith('consents_'));\n    \n    for (const key of consentKeys) {\n      const consents = await secureStorage.getItem(key) || [];\n      const consent = consents.find((c: ConsentRecord) => c.id === consentId);\n      if (consent) return consent;\n    }\n    \n    return null;\n  }\n\n  private async storeDataRequest(request: DataAccessRequest): Promise<void> {\n    const key = `data_requests_${request.userId}`;\n    const existing = await secureStorage.getItem(key) || [];\n    existing.push(request);\n    await secureStorage.setItem(key, existing);\n  }\n\n  private async storeDataSharingAgreement(agreement: DataSharingAgreement): Promise<void> {\n    const key = `sharing_agreements_${agreement.userId}`;\n    const existing = await secureStorage.getItem(key) || [];\n    \n    const index = existing.findIndex((a: DataSharingAgreement) => a.id === agreement.id);\n    if (index >= 0) {\n      existing[index] = agreement;\n    } else {\n      existing.push(agreement);\n    }\n    \n    await secureStorage.setItem(key, existing);\n  }\n\n  private async getDataSharingAgreement(agreementId: string): Promise<DataSharingAgreement | null> {\n    // Search all agreements (in production, use indexed database)\n    const allKeys = await secureStorage.getAllKeys();\n    const agreementKeys = allKeys.filter(k => k.startsWith('sharing_agreements_'));\n    \n    for (const key of agreementKeys) {\n      const agreements = await secureStorage.getItem(key) || [];\n      const agreement = agreements.find((a: DataSharingAgreement) => a.id === agreementId);\n      if (agreement) return agreement;\n    }\n    \n    return null;\n  }\n\n  private async processDataAccessRequest(request: DataAccessRequest): Promise<void> {\n    // Simulate async processing\n    setTimeout(async () => {\n      try {\n        // Gather requested data\n        const userData = await this.gatherUserData(request.userId, request.dataCategories);\n        \n        // Update request status\n        request.status = 'completed';\n        request.completedAt = new Date();\n        request.response = userData;\n        \n        await this.storeDataRequest(request);\n        \n        // Notify user (in production, send email/notification)\n        logger.info('Data access request completed:', request.id);\n      } catch {\n        request.status = 'rejected';\n        await this.storeDataRequest(request);\n      }\n    }, 5000);\n  }\n\n  private async processDataPortabilityRequest(\n    request: DataAccessRequest,\n    _format: string\n  ): Promise<void> {\n    // Simulate async processing\n    setTimeout(async () => {\n      try {\n        // Gather all user data\n        const userData = await this.gatherUserData(request.userId);\n        \n        // Convert to requested _format\n        let exportedData: string;\n        switch (_format) {\n          case 'csv':\n            exportedData = this.convertToCSV(userData);\n            break;\n          case 'pdf':\n            exportedData = await this.convertToPDF(userData);\n            break;\n          default:\n            exportedData = JSON.stringify(userData, null, 2);\n        }\n        \n        // Update request\n        request.status = 'completed';\n        request.completedAt = new Date();\n        request.response = exportedData;\n        \n        await this.storeDataRequest(request);\n        \n        // Notify user\n        logger.info('Data portability request completed:', request.id);\n      } catch {\n        request.status = 'rejected';\n        await this.storeDataRequest(request);\n      }\n    }, 5000);\n  }\n\n  private async processDataDeletionRequest(request: DataAccessRequest): Promise<void> {\n    // Simulate async processing with verification\n    setTimeout(async () => {\n      try {\n        // Verify user identity (in production, require additional confirmation)\n        \n        // Delete specified data categories\n        await this.deleteUserData(request.userId, request.dataCategories);\n        \n        // Update request\n        request.status = 'completed';\n        request.completedAt = new Date();\n        \n        await this.storeDataRequest(request);\n        \n        // Notify user\n        logger.info('Data deletion request completed:', request.id);\n      } catch {\n        request.status = 'rejected';\n        await this.storeDataRequest(request);\n      }\n    }, 10000); // Longer delay for deletion\n  }\n\n  private async gatherUserData(\n    userId: string,\n    categories?: DataCategory[]\n  ): Promise<unknown> {\n    // In production, gather actual user data from various sources\n    const allData: unknown = {\n      personal_info: { userId, email: 'user@example.com' },\n      health_records: [],\n      mood_data: [],\n      journal_entries: [],\n      crisis_plans: [],\n      medications: [],\n      therapy_notes: [],\n      community_posts: [],\n      usage_analytics: [],\n      device_info: [],\n    };\n\n    if (!categories) {\n      return allData;\n    }\n\n    const filtered: unknown = {};\n    for (const category of categories) {\n      if (allData[category]) {\n        filtered[category] = allData[category];\n      }\n    }\n    \n    return filtered;\n  }\n\n  private async deleteUserData(\n    userId: string,\n    categories?: DataCategory[]\n  ): Promise<void> {\n    // In production, actually delete user data\n    logger.info(`Deleting user data for ${userId}:`, categories);\n    \n    // Clear from all storage\n    if (!categories || categories.length === 0) {\n      // Delete all user data\n      const allKeys = await secureStorage.getAllKeys();\n      const userKeys = allKeys.filter(k => k.includes(userId));\n      \n      for (const key of userKeys) {\n        await secureStorage.removeItem(key);\n      }\n    } else {\n      // Delete specific categories\n      for (const category of categories) {\n        const key = `${category}_${userId}`;\n        await secureStorage.removeItem(key);\n      }\n    }\n  }\n\n  private async anonymizeStoredData(userId: string): Promise<void> {\n    // Replace PII with anonymous identifiers\n    const anonymousId = `anon_${cryptoService.generateSecureUUID()}`;\n    \n    // In production, update all references to user ID\n    logger.info(`Anonymizing data for user ${userId} -> ${anonymousId}`);\n  }\n\n  private async scheduleDataDeletion(\n    userId: string,\n    categories: DataCategory[]\n  ): Promise<void> {\n    // Schedule deletion after grace period\n    setTimeout(() => {\n      this.deleteUserData(userId, categories);\n    }, 7 * 24 * 60 * 60 * 1000); // 7 days grace period\n  }\n\n  private async applyPrivacySettings(\n    userId: string,\n    settings: PrivacySettings\n  ): Promise<void> {\n    // Apply privacy settings immediately\n    if (settings.anonymousMode) {\n      await this.anonymizeUserData(userId);\n    }\n    \n    if (settings.autoDeleteInactiveDays) {\n      // Schedule auto-deletion\n      logger.info(`Auto-deletion scheduled after ${settings.autoDeleteInactiveDays} days of inactivity`);\n    }\n  }\n\n  private setupConsentReview(): void {\n    // Check for expired consents daily\n    setInterval(async () => {\n      const allKeys = await secureStorage.getAllKeys();\n      const consentKeys = allKeys.filter(k => k.startsWith('consents_'));\n      \n      for (const key of consentKeys) {\n        const consents = await secureStorage.getItem(key) || [];\n        const userId = key.replace('consents_', '');\n        \n        for (const consent of consents) {\n          if (consent.expiresAt && new Date() > new Date(consent.expiresAt)) {\n            // Notify user to renew consent\n            logger.info(`Consent expired for user ${userId}:`, consent.type);\n          }\n        }\n      }\n    }, 24 * 60 * 60 * 1000);\n  }\n\n  private setupDataRetention(): void {\n    // Clean up old data based on retention policies\n    setInterval(async () => {\n      const allKeys = await secureStorage.getAllKeys();\n      \n      for (const key of allKeys) {\n        if (key.includes('_')) {\n          const userId = key.split('_').pop();\n          if (userId) {\n            const settings = await this.getPrivacySettings(userId);\n            \n            if (settings.dataRetentionDays) {\n              // Check and delete old data\n              logger.info(`Checking data retention for user ${userId}`);\n            }\n          }\n        }\n      }\n    }, 24 * 60 * 60 * 1000);\n  }\n\n  private async getClientIp(): Promise<string> {\n    // In production, get actual client IP\n    return '127.0.0.1';\n  }\n\n  private convertToCSV(_data: unknown): string {\n    // Convert data to CSV _format\n    return 'CSV data export';\n  }\n\n  private async convertToPDF(_data: unknown): Promise<string> {\n    // Convert data to PDF _format\n    return 'PDF data export';\n  }\n}\n\nexport const privacyService = PrivacyService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\professional\\TherapistService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":254,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":254,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":329,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":329,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":442,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":442,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":585,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":585,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":650,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":650,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":731,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":731,"endColumn":20}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Professional Support System Integration Service\n// Manages therapist onboarding, verification, appointments, and video sessions\n\nimport { apiService } from '../api/ApiService';\nimport { wsService } from '../websocket/WebSocketService';\nimport { logger } from '../utils/logger';\nimport {\n  Therapist,\n  Appointment,\n  User,\n  TherapistCredentials,\n  PaymentInfo,\n  _ApiResponse\n} from '../api/types';\n\n// Video calling providers\nexport enum VideoProvider {\n  AGORA = 'agora',\n  TWILIO = 'twilio',\n  ZOOM = 'zoom',\n  CUSTOM = 'custom'\n}\n\n// Payment providers\nexport enum PaymentProvider {\n  STRIPE = 'stripe',\n  PAYPAL = 'paypal',\n  SQUARE = 'square'\n}\n\n// Therapist verification status\nexport enum VerificationStatus {\n  PENDING = 'pending',\n  IN_REVIEW = 'in_review',\n  APPROVED = 'approved',\n  REJECTED = 'rejected',\n  SUSPENDED = 'suspended'\n}\n\n// Video session configuration\ninterface VideoConfig {\n  provider: VideoProvider;\n  apiKey?: string;\n  apiSecret?: string;\n  roomId?: string;\n  token?: string;\n  settings: VideoSettings;\n}\n\ninterface VideoSettings {\n  resolution: '720p' | '1080p' | '480p';\n  frameRate: 15 | 24 | 30;\n  audioBitrate: number;\n  videoBitrate: number;\n  screenShare: boolean;\n  recording: boolean;\n  virtualBackground: boolean;\n}\n\n// Payment configuration\ninterface PaymentConfig {\n  provider: PaymentProvider;\n  apiKey: string;\n  apiSecret?: string;\n  webhookSecret?: string;\n  currency: string;\n  testMode: boolean;\n}\n\n// Therapist onboarding data\ninterface TherapistOnboarding {\n  personalInfo: {\n    firstName: string;\n    lastName: string;\n    email: string;\n    phone: string;\n    dateOfBirth: Date;\n  };\n  credentials: TherapistCredentials;\n  practiceInfo: {\n    practiceName?: string;\n    practiceAddress?: string;\n    website?: string;\n    specializations: string[];\n    treatmentApproaches: string[];\n    languages: string[];\n  };\n  insurance: {\n    acceptsInsurance: boolean;\n    providers: string[];\n    npiNumber?: string;\n  };\n  availability: {\n    timezone: string;\n    regularHours: unknown;\n    sessionDuration: number;\n    bufferTime: number;\n  };\n  rates: {\n    individualSession: number;\n    coupleSession?: number;\n    groupSession?: number;\n    slidingScale: boolean;\n    slidingScaleMin?: number;\n    slidingScaleMax?: number;\n  };\n  documents: {\n    license: File | string;\n    insurance: File | string;\n    resume?: File | string;\n    certifications?: (File | string)[];\n  };\n  agreements: {\n    termsAccepted: boolean;\n    hipaaCompliance: boolean;\n    backgroundCheck: boolean;\n    liabilityInsurance: boolean;\n  };\n}\n\n// Appointment booking data\ninterface BookingRequest {\n  _therapistId: string;\n  patientId: string;\n  date: Date;\n  time: string;\n  duration: number;\n  type: 'initial' | 'followup' | 'crisis';\n  format: 'video' | 'phone' | 'in-person';\n  reason?: string;\n  insurance?: {\n    provider: string;\n    memberId: string;\n    groupNumber: string;\n  };\n  paymentMethod: 'insurance' | 'self-pay' | 'sliding-scale';\n}\n\n// Video session state\ninterface VideoSession {\n  sessionId: string;\n  appointmentId: string;\n  roomId: string;\n  participants: string[];\n  startTime?: Date;\n  endTime?: Date;\n  duration: number;\n  recording?: string;\n  _status: 'waiting' | 'active' | 'ended';\n}\n\n// Professional Support Service Class\nexport class TherapistService {\n  private static instance: TherapistService;\n  private videoConfig: VideoConfig | null = null;\n  private paymentConfig: PaymentConfig | null = null;\n  private activeVideoSession: VideoSession | null = null;\n  private verificationCache: Map<string, VerificationStatus> = new Map();\n\n  private constructor() {\n    this.initializeConfigurations();\n    this.setupWebSocketHandlers();\n  }\n\n  // Singleton pattern\n  public static getInstance(): TherapistService {\n    if (!TherapistService.instance) {\n      TherapistService.instance = new TherapistService();\n    }\n    return TherapistService.instance;\n  }\n\n  // Initialize service configurations\n  private initializeConfigurations(): void {\n    // Load video provider configuration\n    this.videoConfig = {\n      provider: (import.meta.env.VITE_VIDEO_PROVIDER as VideoProvider) || VideoProvider.AGORA,\n      apiKey: import.meta.env.VITE_VIDEO_API_KEY,\n      apiSecret: import.meta.env.VITE_VIDEO_API_SECRET,\n      settings: {\n        resolution: '720p',\n        frameRate: 30,\n        audioBitrate: 48000,\n        videoBitrate: 1000000,\n        screenShare: true,\n        recording: true,\n        virtualBackground: true\n      }\n    };\n\n    // Load payment provider configuration\n    this.paymentConfig = {\n      provider: (import.meta.env.VITE_PAYMENT_PROVIDER as PaymentProvider) || PaymentProvider.STRIPE,\n      apiKey: import.meta.env.VITE_PAYMENT_API_KEY || '',\n      apiSecret: import.meta.env.VITE_PAYMENT_API_SECRET,\n      webhookSecret: import.meta.env.VITE_PAYMENT_WEBHOOK_SECRET,\n      currency: 'USD',\n      testMode: import.meta.env.MODE !== 'production'\n    };\n  }\n\n  // Setup WebSocket event handlers\n  private setupWebSocketHandlers(): void {\n    // Listen for therapist availability updates\n    wsService.on('therapist:available', (data: unknown) => {\n      this.handleTherapistAvailability(data);\n    });\n\n    // Listen for appointment updates\n    wsService.on('appointment:update', (data: unknown) => {\n      this.handleAppointmentUpdate(data);\n    });\n\n    // Listen for video session events\n    wsService.on('video:session:start', (data: unknown) => {\n      this.handleVideoSessionStart(data);\n    });\n\n    wsService.on('video:session:end', (data: unknown) => {\n      this.handleVideoSessionEnd(data);\n    });\n  }\n\n  // ============================================\n  // Therapist Onboarding & Verification\n  // ============================================\n\n  public async startOnboarding(data: TherapistOnboarding): Promise<{\n    _therapistId: string;\n    verificationStatus: VerificationStatus;\n    nextSteps: string[];\n  }> {\n    try {\n      // Step 1: Create therapist account\n      const therapist = await this.createTherapistAccount(data);\n      \n      // Step 2: Upload documents\n      const _documentsUploaded = await this.uploadVerificationDocuments(\n        therapist.id,\n        data.documents\n      );\n      \n      // Step 3: Initiate verification process\n      const verificationStatus = await this.initiateVerification(therapist.id);\n      \n      // Step 4: Schedule onboarding call if needed\n      const nextSteps = this.determineNextSteps(_verificationStatus);\n      \n      return {\n        _therapistId: therapist.id,\n        verificationStatus,\n        nextSteps\n      };\n    } catch (_error) {\n      logger.error('Onboarding failed:');\n      throw undefined;\n    }\n  }\n\n  private async createTherapistAccount(data: TherapistOnboarding): Promise<Therapist> {\n    // Create user account with therapist role\n    const userResponse = await apiService.register({\n      email: data.personalInfo.email,\n      password: '', // Temporary, will be set by therapist\n      username: `dr_${data.personalInfo.lastName.toLowerCase()}`,\n      role: 'therapist',\n      acceptedTerms: data.agreements.termsAccepted,\n      marketingConsent: false\n    });\n\n    // Create therapist profile\n    const therapist: Partial<Therapist> = {\n      userId: userResponse.id,\n      credentials: data.credentials,\n      specializations: data.practiceInfo.specializations,\n      availability: {\n        timezone: data.availability.timezone,\n        regularHours: data.availability.regularHours,\n        exceptions: []\n      },\n      acceptingNewClients: true,\n      languages: data.practiceInfo.languages,\n      insuranceAccepted: data.insurance.providers,\n      sessionRate: data.rates.individualSession,\n      slidingScale: data.rates.slidingScale,\n      verified: false,\n      clients: [],\n      ratings: []\n    };\n\n    // Save to backend\n    // In production, this would be an API call\n    return therapist as Therapist;\n  }\n\n  private async uploadVerificationDocuments(\n    _therapistId: string,\n    documents: TherapistOnboarding['documents']\n  ): Promise<boolean> {\n    try {\n      const uploads = [];\n\n      // Upload license\n      if (documents.license instanceof File) {\n        uploads.push(apiService.uploadFile(documents.license, 'document'));\n      }\n\n      // Upload insurance\n      if (documents.insurance instanceof File) {\n        uploads.push(apiService.uploadFile(documents.insurance, 'document'));\n      }\n\n      // Upload resume if provided\n      if (documents.resume instanceof File) {\n        uploads.push(apiService.uploadFile(documents.resume, 'document'));\n      }\n\n      // Upload certifications\n      if (documents.certifications) {\n        for (const cert of documents.certifications) {\n          if (cert instanceof File) {\n            uploads.push(apiService.uploadFile(cert, 'document'));\n          }\n        }\n      }\n\n      await Promise.all(_uploads);\n      return true;\n    } catch (_error) {\n      logger.error('Document upload failed:');\n      return false;\n    }\n  }\n\n  private async initiateVerification(_therapistId: string): Promise<VerificationStatus> {\n    // In production, this would trigger actual verification workflows\n    // Including license verification, background checks, etc.\n    \n    // For now, set to pending review\n    this.verificationCache.set(_therapistId, VerificationStatus.IN_REVIEW);\n    \n    // Simulate verification process\n    setTimeout(() => {\n      this.verificationCache.set(_therapistId, VerificationStatus.APPROVED);\n      this.notifyVerificationComplete(_therapistId);\n    }, 5000);\n    \n    return VerificationStatus.IN_REVIEW;\n  }\n\n  private determineNextSteps(_status: VerificationStatus): string[] {\n    switch (_status) {\n      case VerificationStatus.PENDING:\n        return [\n          'Complete document upload',\n          'Schedule verification call',\n          'Complete background check authorization'\n        ];\n      \n      case VerificationStatus.IN_REVIEW:\n        return [\n          'Verification in progress (typically 2-3 business days)',\n          'Set up payment information',\n          'Complete platform training modules'\n        ];\n      \n      case VerificationStatus.APPROVED:\n        return [\n          'Set up availability calendar',\n          'Create professional profile',\n          'Begin accepting clients'\n        ];\n      \n      case VerificationStatus.REJECTED:\n        return [\n          'Review rejection reasons',\n          'Submit additional documentation',\n          'Contact support for assistance'\n        ];\n      \n      default:\n        return [];\n    }\n  }\n\n  private notifyVerificationComplete(_therapistId: string): void {\n    // Send notification via WebSocket\n    wsService.emit('therapist:verification:complete', {\n      _therapistId,\n      _status: this.verificationCache.get(_therapistId)\n    });\n  }\n\n  // ============================================\n  // Appointment Scheduling & Management\n  // ============================================\n\n  public async bookAppointment(request: BookingRequest): Promise<Appointment> {\n    try {\n      // Step 1: Check therapist availability\n      const isAvailable = await this.checkAvailability(\n        request._therapistId,\n        request.date,\n        request.time,\n        request.duration\n      );\n      \n      if (!isAvailable) {\n        throw new Error('Selected time slot is not available');\n      }\n      \n      // Step 2: Process payment or insurance\n      const paymentInfo = await this.processPayment(request);\n      \n      // Step 3: Create appointment\n      const appointment = await apiService.bookAppointment({\n        patientId: request.patientId,\n        _therapistId: request._therapistId,\n        scheduledTime: this.combineDateAndTime(request.date, request.time),\n        duration: request.duration,\n        type: request.type,\n        format: request.format,\n        _status: 'scheduled',\n        payment: paymentInfo,\n        reminder: {\n          email: true,\n          sms: true,\n          push: true,\n          leadTime: 1440 // 24 hours\n        }\n      });\n      \n      // Step 4: Generate video room if needed\n      if (request.format === 'video') {\n        appointment.videoUrl = await this.generateVideoRoom(appointment.id);\n      }\n      \n      // Step 5: Send confirmation\n      await this.sendAppointmentConfirmation(_appointment);\n      \n      return appointment;\n    } catch (_error) {\n      logger.error('Appointment booking failed:');\n      throw undefined;\n    }\n  }\n\n  private async checkAvailability(\n    _therapistId: string,\n    date: Date,\n    time: string,\n    duration: number\n  ): Promise<boolean> {\n    // Get therapist's schedule\n    const therapist = await apiService.getTherapist(_therapistId);\n    \n    // Check if time slot is within regular hours\n    const dayOfWeek = date.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();\n    const regularHours = therapist.availability.regularHours[dayOfWeek];\n    \n    if (!regularHours) return false;\n    \n    // Check for conflicts with existing appointments\n    const appointments = await apiService.getAppointments(_therapistId, 'scheduled');\n    \n    const requestedStart = this.combineDateAndTime(date, time);\n    const requestedEnd = new Date(requestedStart.getTime() + duration * 60000);\n    \n    for (const appt of appointments) {\n      const apptEnd = new Date(appt.scheduledTime.getTime() + appt.duration * 60000);\n      \n      // Check for overlap\n      if (\n        (requestedStart >= appt.scheduledTime && requestedStart < apptEnd) ||\n        (requestedEnd > appt.scheduledTime && requestedEnd <= apptEnd) ||\n        (requestedStart <= appt.scheduledTime && requestedEnd >= apptEnd)\n      ) {\n        return false;\n      }\n    }\n    \n    return true;\n  }\n\n  private combineDateAndTime(date: Date, time: string): Date {\n    const [hours, minutes] = time.split(':').map(_Number);\n    const combined = new Date(_date);\n    combined.setHours(hours || 0, minutes || 0, 0, 0);\n    return combined;\n  }\n\n  private async processPayment(request: BookingRequest): Promise<PaymentInfo> {\n    const therapist = await apiService.getTherapist(request._therapistId);\n    \n    let _amount = therapist.sessionRate;\n    const method = request.paymentMethod;\n    \n    // Handle sliding scale\n    if (method === 'sliding-scale' && therapist.slidingScale) {\n      // In production, calculate based on income verification\n      _amount = therapist.sessionRate * 0.5; // 50% discount for demo\n    }\n    \n    // Handle insurance\n    if (method === 'insurance' && request.insurance) {\n      // In production, verify insurance and get copay _amount\n      return {\n        _amount: 30, // Typical copay\n        currency: this.paymentConfig!.currency,\n        method: 'insurance',\n        _status: 'pending',\n        insuranceClaim: {\n          claimNumber: `CLM-${Date.now()}`,\n          provider: request.insurance.provider,\n          _status: 'submitted',\n          copay: 30\n        }\n      };\n    }\n    \n    // Handle self-pay\n    if (method === 'self-pay') {\n      // In production, process payment via Stripe/PayPal\n      const _paymentIntent = await this.createPaymentIntent(_amount, request);\n      \n      return {\n        _amount,\n        currency: this.paymentConfig!.currency,\n        method: 'self-pay',\n        _status: 'pending'\n      };\n    }\n    \n    return {\n      _amount,\n      currency: this.paymentConfig!.currency,\n      method,\n      _status: 'pending'\n    };\n  }\n\n  private async createPaymentIntent(_amount: number, _request: BookingRequest): Promise<string> {\n    // In production, integrate with actual payment provider\n    switch (this.paymentConfig?.provider) {\n      case PaymentProvider.STRIPE:\n        // Create Stripe payment intent\n        return `pi_${Date.now()}`;\n      \n      case PaymentProvider.PAYPAL:\n        // Create PayPal order\n        return `paypal_${Date.now()}`;\n      \n      default:\n        return `payment_${Date.now()}`;\n    }\n  }\n\n  private async sendAppointmentConfirmation(appointment: Appointment): Promise<void> {\n    // Send confirmation via WebSocket\n    wsService.emit('appointment:confirmed', appointment);\n    \n    // In production, also send email/SMS confirmation\n    logger.info('Appointment confirmed:', appointment);\n  }\n\n  public async cancelAppointment(\n    appointmentId: string,\n    reason: string,\n    cancelledBy: 'patient' | 'therapist'\n  ): Promise<void> {\n    try {\n      const appointment = await apiService.cancelAppointment(appointmentId, reason);\n      \n      // Process refund if needed\n      if (appointment.payment?._status === 'paid') {\n        await this.processRefund(_appointment);\n      }\n      \n      // Notify both parties\n      wsService.emit('appointment:cancelled', {\n        appointment,\n        reason,\n        cancelledBy\n      });\n    } catch (_error) {\n      logger.error('Appointment cancellation failed:');\n      throw undefined;\n    }\n  }\n\n  private async processRefund(appointment: Appointment): Promise<void> {\n    // Calculate refund based on cancellation policy\n    const hoursUntilAppointment = \n      (appointment.scheduledTime.getTime() - Date.now()) / (1000 * 60 * 60);\n    \n    let refundAmount = 0;\n    \n    if (hoursUntilAppointment >= 24) {\n      refundAmount = appointment.payment!._amount; // Full refund\n    } else if (hoursUntilAppointment >= 12) {\n      refundAmount = appointment.payment!._amount * 0.5; // 50% refund\n    }\n    // No refund for < 12 hours\n    \n    if (refundAmount > 0) {\n      // In production, process actual refund\n      logger.info(`Processing refund of ${refundAmount} for appointment ${appointment.id}`);\n    }\n  }\n\n  // ============================================\n  // Video Session Management\n  // ============================================\n\n  public async startVideoSession(appointmentId: string): Promise<VideoSession> {\n    try {\n      const appointment = await this.getAppointmentDetails(_appointmentId);\n      \n      // Generate video room and tokens\n      const roomId = await this.generateVideoRoom(_appointmentId);\n      const tokens = await this.generateVideoTokens(roomId, [\n        appointment.patientId,\n        appointment._therapistId\n      ]);\n      \n      // Create session\n      this.activeVideoSession = {\n        sessionId: `session_${Date.now()}`,\n        appointmentId,\n        roomId,\n        participants: [appointment.patientId, appointment.therapistId],\n        startTime: new Date(),\n        duration: appointment.duration,\n        _status: 'active'\n      };\n      \n      // Start recording if enabled\n      if (this.videoConfig?.settings.recording) {\n        await this.startRecording(_roomId);\n      }\n      \n      // Notify participants\n      wsService.emit('video:session:ready', {\n        sessionId: this.activeVideoSession.sessionId,\n        roomId,\n        tokens\n      });\n      \n      return this.activeVideoSession;\n    } catch (_error) {\n      logger.error('Failed to start video session:');\n      throw undefined;\n    }\n  }\n\n  private async getAppointmentDetails(appointmentId: string): Promise<Appointment> {\n    // In production, fetch from API\n    // For now, return mock data\n    return {\n      id: appointmentId,\n      patientId: 'patient-1',\n      _therapistId: 'therapist-1',\n      scheduledTime: new Date(),\n      duration: 50,\n      type: 'followup',\n      format: 'video',\n      _status: 'in-progress'\n    } as Appointment;\n  }\n\n  private async generateVideoRoom(appointmentId: string): Promise<string> {\n    switch (this.videoConfig?.provider) {\n      case VideoProvider.AGORA:\n        return `agora_${appointmentId}`;\n      \n      case VideoProvider.TWILIO:\n        return `twilio_${appointmentId}`;\n      \n      case VideoProvider.ZOOM:\n        return `zoom_${appointmentId}`;\n      \n      default:\n        return `room_${appointmentId}`;\n    }\n  }\n\n  private async generateVideoTokens(\n    roomId: string,\n    participants: string[]\n  ): Promise<Record<string, string>> {\n    const tokens: Record<string, string> = {};\n    \n    for (const participantId of participants) {\n      // In production, generate actual provider-specific tokens\n      tokens[participantId] = `token_${participantId}_${Date.now()}`;\n    }\n    \n    return tokens;\n  }\n\n  private async startRecording(roomId: string): Promise<void> {\n    // In production, start actual recording via provider API\n    logger.info(`Recording started for room ${roomId}`);\n  }\n\n  public async endVideoSession(sessionId: string): Promise<void> {\n    if (this.activeVideoSession?.sessionId !== sessionId) {\n      throw new Error('Session not found');\n    }\n    \n    try {\n      // Stop recording\n      if (this.videoConfig?.settings.recording) {\n        const recordingUrl = await this.stopRecording(this.activeVideoSession.roomId);\n        this.activeVideoSession.recording = recordingUrl;\n      }\n      \n      // Update session status\n      this.activeVideoSession.endTime = new Date();\n      this.activeVideoSession.status = 'ended';\n      \n      // Notify participants\n      wsService.emit('video:session:ended', {\n        sessionId,\n        duration: this.activeVideoSession.endTime.getTime() - \n                  this.activeVideoSession.startTime!.getTime()\n      });\n      \n      // Clean up\n      this.activeVideoSession = null;\n    } catch (_error) {\n      logger.error('Failed to end video session:');\n      throw undefined;\n    }\n  }\n\n  private async stopRecording(roomId: string): Promise<string> {\n    // In production, stop recording and get URL\n    return `https://recordings.example.com/${roomId}`;\n  }\n\n  // ============================================\n  // Event Handlers\n  // ============================================\n\n  private handleTherapistAvailability(data: unknown): void {\n    // Update local cache\n    logger.info('Therapist availability update:', data);\n  }\n\n  private handleAppointmentUpdate(data: unknown): void {\n    // Handle appointment updates\n    logger.info('Appointment update:', data);\n  }\n\n  private handleVideoSessionStart(data: unknown): void {\n    // Handle video session start\n    logger.info('Video session started:', data);\n  }\n\n  private handleVideoSessionEnd(data: unknown): void {\n    // Handle video session end\n    logger.info('Video session ended:', data);\n  }\n\n  // ============================================\n  // Dashboard & Analytics\n  // ============================================\n\n  public async getTherapistDashboard(_therapistId: string): Promise<{\n    appointments: Appointment[];\n    clients: User[];\n    revenue: number;\n    ratings: number;\n    upcomingSessions: Appointment[];\n  }> {\n    const therapist = await apiService.getTherapist(_therapistId);\n    const appointments = await apiService.getAppointments(_therapistId);\n    \n    // Calculate metrics\n    const revenue = appointments\n      .filter(a => a.payment?._status === 'paid')\n      .reduce((sum, a) => sum + (a.payment?._amount || 0), 0);\n    \n    const avgRating = therapist.ratings.length > 0\n      ? therapist.ratings.reduce((sum, r) => sum + r.rating, 0) / therapist.ratings.length\n      : 0;\n    \n    const upcomingSessions = appointments\n      .filter(a => a._status === 'scheduled' && a.scheduledTime > new Date())\n      .sort((a, b) => a.scheduledTime.getTime() - b.scheduledTime.getTime())\n      .slice(0, 5);\n    \n    return {\n      appointments,\n      clients: [], // Would fetch actual client data\n      revenue,\n      ratings: avgRating,\n      upcomingSessions\n    };\n  }\n\n  // ============================================\n  // Client Management\n  // ============================================\n\n  public async getClientNotes(_therapistId: string, clientId: string): Promise<unknown> {\n    // In production, fetch encrypted client notes\n    return {\n      clientId,\n      sessions: [],\n      treatmentPlan: '',\n      progress: [],\n      notes: []\n    };\n  }\n\n  public async updateClientNotes(\n    _therapistId: string,\n    clientId: string,\n    notes: unknown\n  ): Promise<void> {\n    // In production, save encrypted notes\n    logger.info('Updating client notes:', { _therapistId, clientId, notes });\n  }\n}\n\n// Export singleton instance\nexport const therapistService = TherapistService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\pushNotifications.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":55,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":107,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":107,"endColumn":20},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\-.","line":116,"column":17,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":116,"endColumn":18,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3446,3447],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3446,3446],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":147,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":147,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":369,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":369,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":442,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":442,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":461,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":461,"endColumn":20}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Push Notification Service for Wellness Reminders\nimport { openDB } from 'idb';\nimport { logger } from '../utils/logger';\n\ninterface NotificationSchedule {\n  id: string;\n  type: 'medication' | 'therapy' | 'exercise' | 'mindfulness' | 'check-in' | 'crisis-plan';\n  title: string;\n  body: string;\n  time: string; // HH:MM format\n  days: number[]; // 0-6 (Sunday-Saturday)\n  enabled: boolean;\n  icon?: string;\n  badge?: string;\n  tag?: string;\n  requireInteraction?: boolean;\n  actions?: NotificationAction[];\n}\n\ninterface NotificationAction {\n  action: string;\n  title: string;\n  icon?: string;\n}\n\nclass PushNotificationService {\n  private registration: ServiceWorkerRegistration | null = null;\n  private permission: NotificationPermission = 'default';\n  private vapidPublicKey = process.env.VITE_VAPID_PUBLIC_KEY || 'BJ5CjVqLjf7OFLKGnGlOV5m4W4c3K5xW7Q_8ZK1X2M3NjYEZO4YM5F8L1Q6R9S3D4K7H2V6A8B1C0E'; // Default fallback key\n\n  async init(): Promise<boolean> {\n    // Check if notifications are supported\n    if (!('Notification' in window)) {\n      logger.warn('Notifications not supported');\n      return false;\n    }\n\n    // Check if service worker is supported\n    if (!('serviceWorker' in navigator)) {\n      logger.warn('Service Worker not supported');\n      return false;\n    }\n\n    // Get service worker registration\n    try {\n      this.registration = await navigator.serviceWorker.ready;\n      \n      // Request permission if not already granted\n      this.permission = await this.requestPermission();\n      \n      if (this.permission === 'granted') {\n        await this.subscribeToNotifications();\n        return true;\n      }\n    } catch (_error) {\n      logger.error('Failed to initialize push notifications:');\n    }\n\n    return false;\n  }\n\n  async requestPermission(): Promise<NotificationPermission> {\n    // Check current permission status\n    if (Notification.permission === 'granted') {\n      return 'granted';\n    }\n\n    // Don't re-request if denied\n    if (Notification.permission === 'denied') {\n      logger.warn('Notification permission denied');\n      return 'denied';\n    }\n\n    // Request permission with context\n    const permission = await Notification.requestPermission();\n    \n    if (permission === 'granted') {\n      // Show welcome notification\n      await this.showWelcomeNotification();\n    }\n    \n    return permission;\n  }\n\n// @ts-expect-error - PushSubscription is a global API\n  async subscribeToNotifications(): Promise<PushSubscription | null> {\n    if (!this.registration) return null;\n\n    try {\n      // Check for existing subscription\n      let subscription = await this.registration.pushManager.getSubscription();\n      \n      if (!subscription) {\n        // Create new subscription\n        const convertedVapidKey = this.urlBase64ToUint8Array(this.vapidPublicKey);\n        \n        subscription = await this.registration.pushManager.subscribe({\n          userVisibleOnly: true,\n          applicationServerKey: convertedVapidKey\n        });\n\n        // Send subscription to server\n        await this.sendSubscriptionToServer(_subscription);\n      }\n      \n      return subscription;\n    } catch (_error) {\n      logger.error('Failed to subscribe to push notifications:');\n      return null;\n    }\n  }\n\n  private urlBase64ToUint8Array(base64String: string): BufferSource {\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\n    const _base64 = (base64String + padding)\n      .replace(/\\-/g, '+')\n      .replace(/_/g, '/');\n\n    const rawData = window.atob(_base64);\n    const outputArray = new Uint8Array(rawData.length);\n\n    for (let i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(_i);\n    }\n    return outputArray;\n  }\n// @ts-expect-error - PushSubscription is a global API\n\n  private async sendSubscriptionToServer(subscription: PushSubscription): Promise<void> {\n    // Send subscription to your server\n    try {\n      const response = await fetch('/api/notifications/subscribe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          subscription,\n          userAgent: navigator.userAgent,\n          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to send subscription to server');\n      }\n    } catch (_error) {\n      logger.error('Error sending subscription to server:');\n    }\n  }\n\n  async showWelcomeNotification(): Promise<void> {\n    if (!this.registration || this.permission !== 'granted') return;\n\n    await this.registration.showNotification('Welcome to CoreV4! 🌟', {\n      body: 'Your mental health journey starts here. We\\'ll send you helpful reminders and support.',\n      icon: '/icons/icon-192x192.png',\n      badge: '/icons/badge-72x72.png',\n      tag: 'welcome',\n      requireInteraction: false,\n      actions: [\n        { action: 'explore', title: 'Explore Features' },\n        { action: 'dismiss', title: 'Got it!' }\n      ]\n    } as NotificationOptions);\n  }\n\n  // Wellness reminder notifications\n  async scheduleWellnessReminder(schedule: NotificationSchedule): Promise<void> {\n    // Store schedule in IndexedDB\n    const db = await this.openNotificationDB();\n    await db.put('schedules', schedule);\n\n    // Register with service worker\n    if (this.registration) {\n      this.registration.active?.postMessage({\n        type: 'SCHEDULE_NOTIFICATION',\n        schedule\n      });\n    }\n  }\n\n  async showMedicationReminder(medication: string, dosage: string): Promise<void> {\n    if (!this.registration || this.permission !== 'granted') return;\n\n    await this.registration.showNotification('💊 Medication Reminder', {\n      body: `Time to take ${medication} (${dosage})`,\n      icon: '/icons/medication-icon.png',\n      badge: '/icons/badge-72x72.png',\n      tag: 'medication',\n      requireInteraction: true,\n      actions: [\n        { action: 'taken', title: '✅ Taken' },\n        { action: 'snooze', title: '⏰ Snooze 10 min' },\n        { action: 'skip', title: '❌ Skip' }\n      ],\n      data: { medication, dosage, timestamp: Date.now() }\n    } as NotificationOptions);\n  }\n\n  async showMoodCheckIn(): Promise<void> {\n    if (!this.registration || this.permission !== 'granted') return;\n\n    await this.registration.showNotification('🌈 Daily Check-In', {\n      body: 'How are you feeling today? Take a moment to log your mood.',\n      icon: '/icons/mood-icon.png',\n      badge: '/icons/badge-72x72.png',\n      tag: 'mood-checkin',\n      requireInteraction: false,\n      actions: [\n        { action: 'log-mood', title: '📝 Log Mood' },\n        { action: 'remind-later', title: '⏰ Later' }\n      ],\n      vibrate: [200, 100, 200],\n      data: { type: 'mood-checkin', timestamp: Date.now() }\n    } as NotificationOptions);\n  }\n\n  async showBreathingExerciseReminder(): Promise<void> {\n    if (!this.registration || this.permission !== 'granted') return;\n\n    await this.registration.showNotification('🧘 Mindfulness Break', {\n      body: 'Take a 2-minute breathing break to reduce stress and refocus.',\n      icon: '/icons/breathing-icon.png',\n      badge: '/icons/badge-72x72.png',\n      tag: 'breathing',\n      requireInteraction: false,\n      actions: [\n        { action: 'start-breathing', title: '🌬️ Start' },\n        { action: 'dismiss', title: '❌ Not now' }\n      ],\n      silent: false,\n      data: { type: 'breathing-exercise' }\n    } as NotificationOptions);\n  }\n\n  async showCrisisCheckIn(): Promise<void> {\n    if (!this.registration || this.permission !== 'granted') return;\n\n    await this.registration.showNotification('💙 Wellness Check', {\n      body: 'We noticed you accessed crisis resources earlier. How are you feeling now?',\n      icon: '/icons/heart-icon.png',\n      badge: '/icons/badge-72x72.png',\n      tag: 'crisis-followup',\n      requireInteraction: true,\n      actions: [\n        { action: 'feeling-better', title: '😊 Better' },\n        { action: 'need-support', title: '🤝 Need Support' },\n        { action: 'call-hotline', title: '📞 Call 988' }\n      ],\n      vibrate: [100, 50, 100],\n      data: { type: 'crisis-followup', priority: 'high' }\n    } as NotificationOptions);\n  }\n\n  async showTherapyReminder(therapistName: string, time: string): Promise<void> {\n    if (!this.registration || this.permission !== 'granted') return;\n\n    await this.registration.showNotification('🗓️ Therapy Session', {\n      body: `Your session with ${therapistName} is in 30 minutes`,\n      icon: '/icons/therapy-icon.png',\n      badge: '/icons/badge-72x72.png',\n      tag: 'therapy-reminder',\n      requireInteraction: true,\n      actions: [\n        { action: 'confirm', title: '✅ Confirmed' },\n        { action: 'reschedule', title: '📅 Reschedule' }\n      ],\n      vibrate: [500],\n      data: { \n        type: 'therapy-reminder',\n        therapist: therapistName,\n        time\n      }\n    } as NotificationOptions);\n  }\n\n  // Get all scheduled notifications\n  async getScheduledNotifications(): Promise<NotificationSchedule[]> {\n    const db = await this.openNotificationDB();\n    return await db.getAll('schedules');\n  }\n\n  // Update notification schedule\n  async updateSchedule(scheduleId: string, updates: Partial<NotificationSchedule>): Promise<void> {\n    const db = await this.openNotificationDB();\n    const schedule = await db.get('schedules', scheduleId);\n    \n    if (_schedule) {\n      const updated = { ...schedule, ...updates };\n      await db.put('schedules', updated);\n      \n      // Notify service worker\n      if (this.registration) {\n        this.registration.active?.postMessage({\n          type: 'UPDATE_SCHEDULE',\n          schedule: updated\n        });\n      }\n    }\n  }\n\n  // Delete notification schedule\n  async deleteSchedule(scheduleId: string): Promise<void> {\n    const db = await this.openNotificationDB();\n    await db.delete('schedules', scheduleId);\n    \n    // Notify service worker\n    if (this.registration) {\n      this.registration.active?.postMessage({\n        type: 'DELETE_SCHEDULE',\n        scheduleId\n      });\n    }\n  }\n\n  // Handle notification clicks\n  async handleNotificationClick(action: string, data: unknown): Promise<void> {\n    switch (_action) {\n      case 'taken':\n        // Log medication taken\n        await this.logMedicationTaken(data);\n        break;\n      \n      case 'snooze':\n        // Snooze for 10 minutes\n        setTimeout(() => {\n          this.showMedicationReminder(data.medication, data.dosage);\n        }, 10 * 60 * 1000);\n        break;\n      \n      case 'log-mood':\n        // Open mood tracking page\n        window.location.href = '/wellness/mood-tracker';\n        break;\n      \n      case 'start-breathing':\n        // Open breathing exercise\n        window.location.href = '/wellness/breathing';\n        break;\n      \n      case 'need-support':\n        // Open crisis page\n        window.location.href = '/crisis';\n        break;\n      \n      case 'call-hotline':\n        // Call crisis hotline\n        window.location.href = 'tel:988';\n        break;\n      \n      default:\n        logger.info('Unknown notification action:', action);\n    }\n  }\n\n  private async logMedicationTaken(data: unknown): Promise<void> {\n    try {\n      await fetch('/api/wellness/medication/log', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          medication: data.medication,\n          dosage: data.dosage,\n          timestamp: data.timestamp,\n          action: 'taken'\n        })\n      });\n    } catch (_error) {\n      logger.error('Failed to log medication:');\n    }\n  }\n\n  private async openNotificationDB() {\n    return openDB('NotificationDB', 1, {\n      upgrade(db) {\n        if (!db.objectStoreNames.contains('schedules')) {\n          db.createObjectStore('schedules', { keyPath: 'id' });\n        }\n        if (!db.objectStoreNames.contains('logs')) {\n          const store = db.createObjectStore('logs', { \n            keyPath: 'id',\n            autoIncrement: true \n          });\n          store.createIndex('timestamp', 'timestamp');\n        }\n      }\n    });\n  }\n\n  // Check if notifications are enabled\n  isEnabled(): boolean {\n    return this.permission === 'granted';\n  }\n\n  // Get permission status\n  getPermissionStatus(): NotificationPermission {\n    return Notification.permission;\n  }\n\n  // Enhanced crisis alert notification\n  async showCrisisAlert(message: string, urgency: 'low' | 'medium' | 'high' = 'medium'): Promise<void> {\n    if (!this.registration || this.permission !== 'granted') return;\n\n    const vibrationPattern = {\n      low: [200],\n      medium: [200, 100, 200],\n      high: [500, 200, 500, 200, 500]\n    };\n\n    await this.registration.showNotification('🚨 Crisis Alert', {\n      body: message,\n      icon: '/icons/crisis-icon.png',\n      badge: '/icons/badge-72x72.png',\n      tag: `crisis-alert-${urgency}`,\n      requireInteraction: urgency === 'high',\n      actions: [\n        { action: 'view-crisis', title: '🆘 View Resources' },\n        { action: 'call-988', title: '📞 Call 988' },\n        { action: 'dismiss', title: '❌ Dismiss' }\n      ],\n      vibrate: vibrationPattern[urgency],\n      data: { type: 'crisis-alert', urgency, timestamp: Date.now() },\n      silent: urgency === 'low'\n    } as NotificationOptions);\n  }\n\n  // Schedule emergency notification (for crisis situations)\n  async scheduleEmergencyNotification(delayMs: number, message: string): Promise<void> {\n    setTimeout(async () => {\n      await this.showCrisisAlert(message, 'high');\n    }, delayMs);\n  }\n\n  // Cancel all notifications of a specific type\n  async cancelNotifications(tag?: string): Promise<void> {\n    if (!this.registration) return;\n\n    try {\n      const notifications = await this.registration.getNotifications({ tag });\n      notifications.forEach(notification => notification.close());\n    } catch (_error) {\n      logger.error('Failed to cancel notifications:');\n    }\n  }\n\n  // Get notification statistics\n  async getNotificationStats(): Promise<{ active: number; scheduled: number }> {\n    if (!this.registration) return { active: 0, scheduled: 0 };\n\n    try {\n      const notifications = await this.registration.getNotifications();\n      const db = await this.openNotificationDB();\n      const schedules = await db.getAll('schedules');\n      const activeSchedules = schedules.filter(s => s.enabled);\n      \n      return {\n        active: notifications.length,\n        scheduled: activeSchedules.length\n      };\n    } catch (_error) {\n      logger.error('Failed to get notification stats:');\n      return { active: 0, scheduled: 0 };\n    }\n  }\n}\n\n// Export singleton instance\nexport const _pushNotifications = new PushNotificationService();\n\n// Export types\nexport type { NotificationSchedule, NotificationAction };","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\realtime\\websocketService.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":58,"column":42,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":58,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":104,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":104,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":389,"column":30,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":389,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":396,"column":31,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":396,"endColumn":39}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { io, Socket } from 'socket.io-client';\nimport { toast } from 'react-hot-toast';\nimport { logger } from '../../utils/logger';\n\n// Types for real-time events\nexport interface UserPresence {\n  userId: string;\n  username: string;\n  status: 'online' | 'away' | 'busy' | 'offline';\n  lastSeen: Date;\n  currentRoom?: string;\n}\n\nexport interface TypingIndicator {\n  userId: string;\n  username: string;\n  roomId: string;\n  _isTyping: boolean;\n}\n\nexport interface RealtimeMessage {\n  id: string;\n  roomId: string;\n  userId: string;\n  username: string;\n  content: string;\n  timestamp: Date;\n  type: 'text' | 'system' | 'crisis-alert' | 'moderation';\n  metadata?: {\n    crisisLevel?: 'low' | 'medium' | 'high' | 'critical';\n    edited?: boolean;\n    editedAt?: Date;\n    reactions?: { [emoji: string]: string[] };\n  };\n}\n\nexport interface NotificationEvent {\n  id: string;\n  type: 'message' | 'mention' | 'reply' | 'group-invite' | 'crisis-support' | 'achievement';\n  title: string;\n  content: string;\n  timestamp: Date;\n  read: boolean;\n  actionUrl?: string;\n  priority?: 'low' | 'normal' | 'high' | 'urgent';\n}\n\n// WebSocket service configuration\nconst WEBSOCKET_URL = import.meta.env.VITE_WS_URL || 'ws://localhost:3000';\nconst RECONNECT_ATTEMPTS = 5;\nconst RECONNECT_DELAY = 3000;\n\nclass WebSocketService {\n  private socket: Socket | null = null;\n  private isConnected: boolean = false;\n  private reconnectAttempts: number = 0;\n  private reconnectTimer: NodeJS.Timeout | null = null;\n  private eventHandlers: Map<string, Set<Function>> = new Map();\n  private presenceCache: Map<string, UserPresence> = new Map();\n  private typingTimers: Map<string, NodeJS.Timeout> = new Map();\n\n  // Initialize WebSocket connection\n  connect(userId: string, token: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (this.socket?.connected) {\n        resolve();\n        return;\n      }\n\n      try {\n        // Create socket connection with authentication\n        this.socket = io(WEBSOCKET_URL, {\n          auth: { token, userId },\n          reconnection: true,\n          reconnectionDelay: RECONNECT_DELAY,\n          reconnectionAttempts: RECONNECT_ATTEMPTS,\n          timeout: 10000,\n        });\n\n        // Connection event handlers\n        this.socket.on('connect', () => {\n          this.isConnected = true;\n          this.reconnectAttempts = 0;\n          logger.info('WebSocket connected successfully', 'RealtimeWebSocket');\n          this.emit('connection:established', { userId });\n          resolve();\n        });\n\n        this.socket.on('disconnect', (reason: unknown) => {\n          this.isConnected = false;\n          logger.warn('WebSocket disconnected:', reason);\n          this.emit('connection:lost', { reason });\n          this.handleReconnection();\n        });\n\n        this.socket.on('connect_error', (error: unknown) => {\n          logger.error('WebSocket connection error:', error);\n          this.emit('connection:error', { error: error.message });\n          reject(error);\n        });\n\n        // Set up core event listeners\n        this.setupCoreEventListeners();\n      } catch (_error) {\n        logger.error('Failed to initialize WebSocket:');\n        reject(_undefined);\n      }\n    });\n  }\n\n  // Set up core event listeners for real-time features\n  private setupCoreEventListeners(): void {\n    if (!this.socket) return;\n\n    // User presence events\n    this.socket.on('presence:update', (data: UserPresence) => {\n      this.presenceCache.set(data.userId, data);\n      this.emit('presence:update', data);\n    });\n\n    this.socket.on('presence:bulk', (users: UserPresence[]) => {\n      users.forEach(user => this.presenceCache.set(user.userId, user));\n      this.emit('presence:bulk', users);\n    });\n\n    // Typing indicators\n    this.socket.on('typing:start', (data: TypingIndicator) => {\n      this.emit('typing:start', data);\n    });\n\n    this.socket.on('typing:stop', (data: TypingIndicator) => {\n      this.emit('typing:stop', data);\n    });\n\n    // Real-time messages\n    this.socket.on('message:new', (message: RealtimeMessage) => {\n      // Check for crisis keywords and handle appropriately\n      if (this.detectCrisisContent(message.content)) {\n        this.handleCrisisMessage(message);\n      }\n      this.emit('message:new', message);\n    });\n\n    this.socket.on('message:update', (message: RealtimeMessage) => {\n      this.emit('message:update', message);\n    });\n\n    this.socket.on('message:delete', (messageId: string) => {\n      this.emit('message:delete', messageId);\n    });\n\n    // Notifications\n    this.socket.on('notification:new', (notification: NotificationEvent) => {\n      this.handleNotification(notification);\n      this.emit('notification:new', notification);\n    });\n\n    // Room events\n    this.socket.on('room:joined', (roomId: string) => {\n      this.emit('room:joined', roomId);\n    });\n\n    this.socket.on('room:left', (roomId: string) => {\n      this.emit('room:left', roomId);\n    });\n\n    // Crisis support events\n    this.socket.on('crisis:alert', (data: unknown) => {\n      this.handleCrisisAlert(data);\n    });\n\n    this.socket.on('support:request', (data: unknown) => {\n      this.emit('support:request', data);\n    });\n  }\n\n  // Send a message to a room\n  sendMessage(roomId: string, content: string, type: 'text' | 'system' = 'text'): void {\n    if (!this.socket?.connected) {\n      toast.error('Not connected to chat server');\n      return;\n    }\n\n    const message = {\n      roomId,\n      content,\n      type,\n      timestamp: new Date(),\n    };\n\n    this.socket.emit('message:send', message);\n  }\n\n  // Join a room (support group, chat room, etc.)\n  joinRoom(roomId: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (!this.socket?.connected) {\n        reject(new Error('Not connected to server'));\n        return;\n      }\n\n      this.socket.emit('room:join', roomId, (response: unknown) => {\n        if (response.success) {\n          resolve();\n        } else {\n          reject(new Error(response.error || 'Failed to join room'));\n        }\n      });\n    });\n  }\n\n  // Leave a room\n  leaveRoom(roomId: string): void {\n    if (!this.socket?.connected) return;\n    this.socket.emit('room:leave', roomId);\n  }\n\n  // Update user presence status\n  updatePresence(status: 'online' | 'away' | 'busy'): void {\n    if (!this.socket?.connected) return;\n    this.socket.emit('presence:update', { status });\n  }\n\n  // Send typing indicator\n  sendTypingIndicator(roomId: string, _isTyping: boolean): void {\n    if (!this.socket?.connected) return;\n\n    // Clear existing timer for this room\n    const _timerId = this.typingTimers.get(_roomId);\n    if (_timerId) {\n      clearTimeout(_timerId);\n      this.typingTimers.delete(_roomId);\n    }\n\n    if (_isTyping) {\n      this.socket.emit('typing:start', { roomId });\n      \n      // Auto-stop typing after 5 seconds\n      const timer = setTimeout(() => {\n        this.sendTypingIndicator(roomId, false);\n      }, 5000);\n      this.typingTimers.set(roomId, timer);\n    } else {\n      this.socket.emit('typing:stop', { roomId });\n    }\n  }\n\n  // React to a message\n  addReaction(messageId: string, emoji: string): void {\n    if (!this.socket?.connected) return;\n    this.socket.emit('message:react', { messageId, emoji });\n  }\n\n  // Request peer support\n  requestPeerSupport(topic: string, urgency: 'low' | 'medium' | 'high'): void {\n    if (!this.socket?.connected) {\n      toast.error('Unable to request support. Please check your connection.');\n      return;\n    }\n\n    this.socket.emit('support:request', { topic, urgency });\n    toast.success('Support request sent. A peer counselor will connect with you soon.');\n  }\n\n  // Report content for moderation\n  reportContent(contentId: string, contentType: 'message' | 'post' | 'comment', reason: string): void {\n    if (!this.socket?.connected) return;\n    \n    this.socket.emit('moderation:report', {\n      contentId,\n      contentType,\n      reason,\n      timestamp: new Date(),\n    });\n    \n    toast.success('Content reported. Our moderation team will review it promptly.');\n  }\n\n  // Crisis content detection\n  private detectCrisisContent(content: string): boolean {\n    const crisisKeywords = [\n      'suicide', 'kill myself', 'end it all', 'self harm',\n      'hurt myself', 'die', 'death wish', 'not worth living'\n    ];\n    \n    const lowerContent = content.toLowerCase();\n    return crisisKeywords.some(_keyword => lowerContent.includes(_keyword));\n  }\n\n  // Handle crisis messages\n  private handleCrisisMessage(message: RealtimeMessage): void {\n    // Alert moderators and crisis counselors\n    this.socket?.emit('crisis:detected', {\n      messageId: message.id,\n      userId: message.userId,\n      roomId: message.roomId,\n      content: message.content,\n      timestamp: message.timestamp,\n    });\n\n    // Update message metadata with crisis flag\n    message.metadata = {\n      ...message.metadata,\n      crisisLevel: this.assessCrisisLevel(message.content),\n    };\n  }\n\n  // Assess crisis level based on content\n  private assessCrisisLevel(content: string): 'low' | 'medium' | 'high' | 'critical' {\n    const lowerContent = content.toLowerCase();\n    \n    if (lowerContent.includes('suicide') || lowerContent.includes('kill myself')) {\n      return 'critical';\n    } else if (lowerContent.includes('hurt myself') || lowerContent.includes('self harm')) {\n      return 'high';\n    } else if (lowerContent.includes('hopeless') || lowerContent.includes('worthless')) {\n      return 'medium';\n    }\n    \n    return 'low';\n  }\n\n  // Handle crisis alerts\n  private handleCrisisAlert(data: unknown): void {\n    // Show urgent notification to available crisis counselors\n    toast.error(`Crisis support needed in ${data.roomName || 'chat'}`, {\n      duration: 10000,\n      icon: '🚨',\n    });\n    \n    this.emit('crisis:alert', data);\n  }\n\n  // Handle notifications\n  private handleNotification(notification: NotificationEvent): void {\n    // Show toast based on priority\n    const options = {\n      duration: notification.priority === 'urgent' ? 10000 : 5000,\n    };\n\n    switch (notification.priority) {\n      case 'urgent':\n        toast.error(notification.content, options);\n        break;\n      case 'high':\n        toast.success(notification.content, options);\n        break;\n      default:\n        toast(notification.content, options);\n    }\n\n    // Play notification sound for high priority\n    if (notification.priority === 'high' || notification.priority === 'urgent') {\n      this.playNotificationSound();\n    }\n  }\n\n  // Play notification sound - DISABLED: Sound was too annoying for users\n  private playNotificationSound(): void {\n    // DISABLED: Sound muted per user feedback - all notification sounds are off\n    return;\n    \n    // Original code kept for reference but disabled:\n    // const audioContext = new (window.AudioContext || (window as unknown).webkitAudioContext)();\n    // const _oscillator = audioContext.createOscillator();\n    // const _gainNode = audioContext.createGain();\n    // ... rest of sound generation code disabled\n  }\n\n  // Handle reconnection\n  private handleReconnection(): void {\n    if (this.reconnectTimer) return;\n    \n    this.reconnectTimer = setTimeout(() => {\n      this.reconnectAttempts++;\n      \n      if (this.reconnectAttempts <= RECONNECT_ATTEMPTS) {\n        logger.info(`Attempting to reconnect... (${this.reconnectAttempts}/${RECONNECT_ATTEMPTS})`, 'RealtimeWebSocket');\n        this.socket?.connect();\n      } else {\n        toast.error('Connection lost. Please refresh the page to reconnect.');\n      }\n      \n      this.reconnectTimer = null;\n    }, RECONNECT_DELAY);\n  }\n\n  // Event emitter methods\n  on(event: string, handler: Function): void {\n    if (!this.eventHandlers.has(event)) {\n      this.eventHandlers.set(event, new Set());\n    }\n    this.eventHandlers.get(event)?.add(handler);\n  }\n\n  off(event: string, handler: Function): void {\n    this.eventHandlers.get(event)?.delete(handler);\n  }\n\n  private emit(event: string, data?: unknown): void {\n    this.eventHandlers.get(event)?.forEach(handler => handler(data));\n  }\n\n  // Get current presence for a user\n  getUserPresence(userId: string): UserPresence | undefined {\n    return this.presenceCache.get(userId);\n  }\n\n  // Get all online users\n  getOnlineUsers(): UserPresence[] {\n    return Array.from(this.presenceCache.values()).filter(\n      user => user.status === 'online'\n    );\n  }\n\n  // Disconnect from WebSocket\n  disconnect(): void {\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n    \n    this.typingTimers.forEach(timer => clearTimeout(timer));\n    this.typingTimers.clear();\n    \n    this.socket?.disconnect();\n    this.socket = null;\n    this.isConnected = false;\n    this.presenceCache.clear();\n    this.eventHandlers.clear();\n  }\n\n  // Check connection status\n  isConnectedToServer(): boolean {\n    return this.isConnected && this.socket?.connected === true;\n  }\n\n  // Get socket instance (for advanced usage)\n  getSocket(): Socket | null {\n    return this.socket;\n  }\n}\n\n// Export singleton instance\nexport const websocketService = new WebSocketService();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\security\\HIPAAComplianceService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1499,1502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1499,1502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1943,1946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1943,1946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":206,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":206,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":218,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":218,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":230,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6718,6721],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6718,6721],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":243,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7105,7108],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7105,7108],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":318,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":318,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9229,9232],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9229,9232],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":384,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":384,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10917,10920],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10917,10920],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":409,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":409,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11541,11544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11541,11544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":443,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":443,"endColumn":20},{"ruleId":"no-unreachable","severity":2,"message":"Unreachable code.","line":678,"column":13,"nodeType":"BlockStatement","messageId":"unreachableCode","endLine":680,"endColumn":6}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// HIPAA Compliance and Security Service\n// Ensures all PHI (Protected Health Information) is handled according to HIPAA standards\n\nimport CryptoJS from 'crypto-js';\nimport { _secureStorage } from './SecureLocalStorage';\nimport { logger } from '../../utils/logger';\n\n// HIPAA compliance requirements\nexport enum ComplianceRequirement {\n  ENCRYPTION_AT_REST = 'encryption_at_rest',\n  ENCRYPTION_IN_TRANSIT = 'encryption_in_transit',\n  ACCESS_CONTROL = 'access_control',\n  AUDIT_LOGGING = 'audit_logging',\n  DATA_INTEGRITY = 'data_integrity',\n  TRANSMISSION_SECURITY = 'transmission_security',\n  DATA_BACKUP = 'data_backup',\n  DISASTER_RECOVERY = 'disaster_recovery',\n  BREACH_NOTIFICATION = 'breach_notification',\n  MINIMUM_NECESSARY = 'minimum_necessary'\n}\n\n// PHI field types\nexport enum PHIFieldType {\n  NAME = 'name',\n  DATE_OF_BIRTH = 'date_of_birth',\n  SSN = 'ssn',\n  MEDICAL_RECORD = 'medical_record',\n  HEALTH_PLAN = 'health_plan',\n  ACCOUNT_NUMBER = 'account_number',\n  CERTIFICATE_LICENSE = 'certificate_license',\n  VEHICLE_ID = 'vehicle_id',\n  DEVICE_ID = 'device_id',\n  WEB_URL = 'web_url',\n  IP_ADDRESS = 'ip_address',\n  BIOMETRIC = 'biometric',\n  PHOTO = 'photo',\n  OTHER_UNIQUE_ID = 'other_unique_id'\n}\n\n// Audit log entry\nexport interface AuditLogEntry {\n  id: string;\n  timestamp: Date;\n  userId: string;\n  action: string;\n  _resourceType: string;\n  resourceId: string;\n  ipAddress: string;\n  userAgent: string;\n  result: 'success' | 'failure' | 'denied';\n  details?: Record<string, any>;\n  phiAccessed?: boolean;\n  dataFields?: string[];\n}\n\n// Encryption configuration\ninterface EncryptionConfig {\n  algorithm: string;\n  keySize: number;\n  iterations: number;\n  saltSize: number;\n}\n\n// Access control entry\nexport interface AccessControlEntry {\n  userId: string;\n  _resourceType: string;\n  resourceId?: string;\n  permissions: string[];\n  grantedBy: string;\n  grantedAt: Date;\n  expiresAt?: Date;\n  conditions?: Record<string, any>;\n}\n\n// Data retention policy\nexport interface RetentionPolicy {\n  dataType: string;\n  retentionPeriod: number; // in days\n  purgeAfter: number; // in days\n  archiveRequired: boolean;\n  legalHold?: boolean;\n}\n\n// Breach notification\nexport interface BreachNotification {\n  id: string;\n  detectedAt: Date;\n  reportedAt?: Date;\n  affectedUsers: string[];\n  dataTypes: PHIFieldType[];\n  severity: 'low' | 'medium' | 'high' | '_critical';\n  description: string;\n  remediation: string;\n  notificationsSent: boolean;\n}\n\n// HIPAA Compliance Service Class\nexport class HIPAAComplianceService {\n  private static instance: HIPAAComplianceService;\n  private encryptionKey: string;\n  private auditQueue: AuditLogEntry[] = [];\n  private encryptionConfig: EncryptionConfig = {\n    algorithm: 'AES',\n    keySize: 256,\n    iterations: 10000,\n    saltSize: 128\n  };\n  private retentionPolicies: Map<string, RetentionPolicy> = new Map();\n  private accessControlList: Map<string, AccessControlEntry[]> = new Map();\n\n  private constructor() {\n    this.encryptionKey = this.getOrGenerateEncryptionKey();\n    this.initializeRetentionPolicies();\n    this.startAuditProcessor();\n  }\n\n  // Singleton pattern\n  public static getInstance(): HIPAAComplianceService {\n    if (!HIPAAComplianceService.instance) {\n      HIPAAComplianceService.instance = new HIPAAComplianceService();\n    }\n    return HIPAAComplianceService.instance;\n  }\n\n  // Initialize encryption key\n  private getOrGenerateEncryptionKey(): string {\n    // SECURITY FIX: Never store encryption keys in localStorage\n    // Use environment variables or secure key management service\n    \n    // Get key from environment variable (secure approach)\n    let key = import.meta.env.VITE_ENCRYPTION_KEY;\n    \n    if (!key) {\n      // Generate a temporary key for development ONLY\n      // WARNING: This key will not persist between sessions\n      key = `temp_key_${  Date.now()  }_${  Math.random().toString(36)}`;\n      \n      // Log warning about temporary key\n      logger.warn('⚠️ Using temporary encryption key. Set VITE_ENCRYPTION_KEY for production.');\n      \n      // NEVER store in localStorage - this was the critical vulnerability\n      // secureStorage.setItem('hipaa_encryption_key', key); // REMOVED\n    }\n    \n    return key;\n  }\n\n  // Initialize retention policies\n  private initializeRetentionPolicies(): void {\n    // Set default retention policies based on HIPAA requirements\n    this.retentionPolicies.set('medical_records', {\n      dataType: 'medical_records',\n      retentionPeriod: 2190, // 6 years\n      purgeAfter: 2555, // 7 years\n      archiveRequired: true\n    });\n\n    this.retentionPolicies.set('audit_logs', {\n      dataType: 'audit_logs',\n      retentionPeriod: 2190, // 6 years\n      purgeAfter: 2555, // 7 years\n      archiveRequired: true\n    });\n\n    this.retentionPolicies.set('appointment_records', {\n      dataType: 'appointment_records',\n      retentionPeriod: 2190, // 6 years\n      purgeAfter: 2555, // 7 years\n      archiveRequired: true\n    });\n\n    this.retentionPolicies.set('crisis_sessions', {\n      dataType: 'crisis_sessions',\n      retentionPeriod: 2555, // 7 years (_critical mental health data)\n      purgeAfter: 3650, // 10 years\n      archiveRequired: true\n    });\n\n    this.retentionPolicies.set('community_posts', {\n      dataType: 'community_posts',\n      retentionPeriod: 365, // 1 year\n      purgeAfter: 730, // 2 years\n      archiveRequired: false\n    });\n  }\n\n  // Start audit log processor\n  private startAuditProcessor(): void {\n    // Process audit queue every 5 seconds\n    setInterval(() => {\n      this.flushAuditQueue();\n    }, 5000);\n  }\n\n  // ============================================\n  // Encryption Methods\n  // ============================================\n\n  // Encrypt PHI data\n  public encryptPHI(data: string): string {\n    try {\n      const encrypted = CryptoJS.AES.encrypt(data, this.encryptionKey);\n      \n      return encrypted.toString();\n    } catch (_error) {\n      this.logSecurityEvent('encryption_failure', { error: 'Processing error' });\n      throw new Error('Failed to encrypt PHI data');\n    }\n  }\n\n  // Decrypt PHI data\n  public decryptPHI(encryptedData: string): string {\n    try {\n      const decrypted = CryptoJS.AES.decrypt(encryptedData, this.encryptionKey);\n      \n      return decrypted.toString(CryptoJS.enc.Utf8);\n    } catch (_error) {\n      this.logSecurityEvent('decryption_failure', { error: 'Processing error' });\n      throw new Error('Failed to decrypt PHI data');\n    }\n  }\n\n  // Hash sensitive identifiers\n  public hashIdentifier(identifier: string): string {\n    return btoa(identifier + this.encryptionKey).replace(/[^A-Za-z0-9]/g, '');\n  }\n\n  // Encrypt object with PHI fields\n  public encryptObject<T extends Record<string, any>>(obj: T, phiFields: string[]): T {\n    const encrypted = { ...obj } as unknown;\n    \n    for (const field of phiFields) {\n      if (field in encrypted && encrypted[field]) {\n        encrypted[field] = this.encryptPHI(JSON.stringify(encrypted[field]));\n      }\n    }\n    \n    return encrypted;\n  }\n\n  // Decrypt object with PHI fields\n  public decryptObject<T extends Record<string, any>>(obj: T, phiFields: string[]): T {\n    const decrypted = { ...obj } as unknown;\n    \n    for (const field of phiFields) {\n      if (field in decrypted && decrypted[field]) {\n        try {\n          decrypted[field] = JSON.parse(this.decryptPHI(decrypted[field]));\n        } catch {\n          // If not JSON, return as string\n          decrypted[field] = this.decryptPHI(decrypted[field]);\n        }\n      }\n    }\n    \n    return decrypted;\n  }\n\n  // ============================================\n  // Access Control Methods\n  // ============================================\n\n  // Check access permission\n  public async checkAccess(\n    userId: string,\n    _resourceType: string,\n    resourceId: string,\n    permission: string\n  ): Promise<boolean> {\n    // Log access attempt\n    this.auditAccess(userId, _resourceType, resourceId, 'access_check', { permission });\n    \n    // Get user's access control entries\n    const userAcl = this.accessControlList.get(userId) || [];\n    \n    // Check for matching permission\n    const hasAccess = userAcl.some(acl => {\n      // Check resource type match\n      if (acl._resourceType !== _resourceType) return false;\n      \n      // Check resource ID match (if specified)\n      if (acl.resourceId && acl.resourceId !== resourceId) return false;\n      \n      // Check permission\n      if (!acl.permissions.includes(_permission)) return false;\n      \n      // Check expiration\n      if (acl.expiresAt && acl.expiresAt < new Date()) return false;\n      \n      // Check conditions\n      if (acl.conditions) {\n        // Implement condition checking logic\n        // For example: time-based, location-based, etc.\n      }\n      \n      return true;\n    });\n    \n    // Log result\n    this.auditAccess(userId, _resourceType, resourceId, 'access_result', {\n      permission,\n      granted: hasAccess\n    });\n    \n    return hasAccess;\n  }\n\n  // Grant access\n  public grantAccess(\n    userId: string,\n    _resourceType: string,\n    permissions: string[],\n    grantedBy: string,\n    options?: {\n      resourceId?: string;\n      expiresIn?: number; // minutes\n      conditions?: Record<string, any>;\n    }\n  ): void {\n    const _entry: AccessControlEntry = {\n      userId,\n      _resourceType,\n      resourceId: options?.resourceId,\n      permissions,\n      grantedBy,\n      grantedAt: new Date(),\n      expiresAt: options?.expiresIn \n        ? new Date(Date.now() + options.expiresIn * 60000)\n        : undefined,\n      conditions: options?.conditions\n    };\n    \n    if (!this.accessControlList.has(userId)) {\n      this.accessControlList.set(userId, []);\n    }\n    \n    this.accessControlList.get(userId)!.push(_entry);\n    \n    // Audit the grant\n    this.auditAccess(grantedBy, 'access_control', userId, 'grant_access', {\n      _resourceType,\n      permissions,\n      expiresAt: _entry.expiresAt\n    });\n  }\n\n  // Revoke access\n  public revokeAccess(\n    userId: string,\n    _resourceType: string,\n    resourceId?: string,\n    revokedBy?: string\n  ): void {\n    const userAcl = this.accessControlList.get(userId);\n    \n    if (userAcl) {\n      const filtered = userAcl.filter(acl => {\n        if (acl._resourceType !== _resourceType) return true;\n        if (resourceId && acl.resourceId !== resourceId) return true;\n        return false;\n      });\n      \n      this.accessControlList.set(userId, filtered);\n    }\n    \n    // Audit the revocation\n    this.auditAccess(revokedBy || 'system', 'access_control', userId, 'revoke_access', {\n      _resourceType,\n      resourceId\n    });\n  }\n\n  // ============================================\n  // Audit Logging Methods\n  // ============================================\n\n  // Log PHI access\n  public auditAccess(\n    userId: string,\n    _resourceType: string,\n    resourceId: string,\n    action: string,\n    details?: Record<string, any>\n  ): void {\n    const _entry: AuditLogEntry = {\n      id: this.generateAuditId(),\n      timestamp: new Date(),\n      userId,\n      action,\n      _resourceType,\n      resourceId,\n      ipAddress: this.getClientIP(),\n      userAgent: navigator.userAgent,\n      result: 'success',\n      details,\n      phiAccessed: this.isPHIResource(_resourceType)\n    };\n    \n    this.auditQueue.push(_entry);\n    \n    // Flush immediately for critical actions\n    if (this.isCriticalAction(_action)) {\n      this.flushAuditQueue();\n    }\n  }\n\n  // Log security event\n  public logSecurityEvent(eventType: string, details: Record<string, any>): void {\n    const _entry: AuditLogEntry = {\n      id: this.generateAuditId(),\n      timestamp: new Date(),\n      userId: this.getCurrentUserId(),\n      action: `security:${eventType}`,\n      _resourceType: 'security',\n      resourceId: '',\n      ipAddress: this.getClientIP(),\n      userAgent: navigator.userAgent,\n      result: 'failure',\n      details\n    };\n    \n    this.auditQueue.push(_entry);\n    this.flushAuditQueue(); // Security events are always flushed immediately\n  }\n\n  // Flush audit queue to storage\n  private async flushAuditQueue(): Promise<void> {\n    if (this.auditQueue.length === 0) return;\n    \n    const entries = [...this.auditQueue];\n    this.auditQueue = [];\n    \n    try {\n      // Send to audit logging service\n      await fetch('/api/audit/log', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ entries })\n      });\n    } catch (_error) {\n      logger.error('Failed to flush audit logs:');\n      \n      // Re-queue failed entries\n      this.auditQueue.unshift(...entries);\n    }\n  }\n\n  // ============================================\n  // Data Integrity Methods\n  // ============================================\n\n  // Generate checksum for data integrity\n  public generateChecksum(data: string): string {\n    return btoa(data).substring(0, 32);\n  }\n\n  // Verify data integrity\n  public verifyIntegrity(data: string, checksum: string): boolean {\n    const calculatedChecksum = this.generateChecksum(data);\n    return calculatedChecksum === checksum;\n  }\n\n  // Sign data for non-repudiation\n  public signData(data: string): string {\n    const signature = btoa(data + this.encryptionKey).substring(0, 32);\n    return `${data}.${signature}`;\n  }\n\n  // Verify signed data\n  public verifySignature(signedData: string): boolean {\n    const parts = signedData.split('.');\n    if (parts.length !== 2) return false;\n    \n    const [data, signature] = parts;\n    const calculatedSignature = btoa(data + this.encryptionKey).substring(0, 32);\n    \n    return signature === calculatedSignature;\n  }\n\n  // ============================================\n  // Data Retention & Disposal Methods\n  // ============================================\n\n  // Check if data should be retained\n  public shouldRetainData(dataType: string, createdDate: Date): boolean {\n    const policy = this.retentionPolicies.get(dataType);\n    if (!policy) return true; // Default to retention if no policy\n    \n    const ageInDays = (Date.now() - createdDate.getTime()) / (1000 * 60 * 60 * 24);\n    return ageInDays < policy.retentionPeriod;\n  }\n\n  // Check if data should be purged\n  public shouldPurgeData(dataType: string, createdDate: Date): boolean {\n    const policy = this.retentionPolicies.get(dataType);\n    if (!policy) return false; // Default to no purge if no policy\n    \n    if (policy.legalHold) return false; // Don't purge if under legal hold\n    \n    const ageInDays = (Date.now() - createdDate.getTime()) / (1000 * 60 * 60 * 24);\n    return ageInDays > policy.purgeAfter;\n  }\n\n  // Securely dispose of data\n  public async secureDispose(dataType: string, dataId: string): Promise<void> {\n    // Audit the disposal\n    this.auditAccess('system', dataType, dataId, 'secure_disposal', {\n      timestamp: new Date().toISOString()\n    });\n    \n    // In production, this would:\n    // 1. Delete from primary storage\n    // 2. Delete from backups (after retention period)\n    // 3. Overwrite memory locations\n    // 4. Update disposal records\n    \n    logger.info(`Securely disposed ${dataType} with ID ${dataId}`, 'HIPAACompliance', { isPrivacySafe: true });\n  }\n\n  // ============================================\n  // Breach Detection & Response\n  // ============================================\n\n  // Detect potential breach\n  public detectBreach(_indicators: {\n    unusualAccess?: boolean;\n    multipleFailedAttempts?: boolean;\n    unauthorizedDataAccess?: boolean;\n    abnormalDataVolume?: boolean;\n  }): boolean {\n    const breachScore = Object.values(_indicators).filter(v => v).length;\n    return breachScore >= 2; // Breach detected if 2+ _indicators\n  }\n\n  // Report breach\n  public async reportBreach(breach: Omit<BreachNotification, 'id' | 'reportedAt'>): Promise<void> {\n    const notification: BreachNotification = {\n      ...breach,\n      id: this.generateBreachId(),\n      reportedAt: new Date()\n    };\n    \n    // Log the breach\n    this.logSecurityEvent('breach_detected', notification);\n    \n    // In production, this would:\n    // 1. Notify security team\n    // 2. Notify affected users (within 60 days per HIPAA)\n    // 3. Notify HHS (within 60 days)\n    // 4. Notify media if > 500 individuals affected\n    // 5. Document remediation steps\n    \n    // Send breach notification\n    await this.sendBreachNotifications(_notification);\n  }\n\n  // Send breach notifications\n  private async sendBreachNotifications(breach: BreachNotification): Promise<void> {\n    // Notify affected users\n    for (const userId of breach.affectedUsers) {\n      await this.notifyUser(userId, breach);\n    }\n    \n    // Notify authorities if required\n    if (breach.affectedUsers.length > 500) {\n      await this.notifyAuthorities(breach);\n    }\n    \n    breach.notificationsSent = true;\n  }\n\n  // ============================================\n  // Compliance Validation Methods\n  // ============================================\n\n  // Validate HIPAA compliance\n  public validateCompliance(): Record<ComplianceRequirement, boolean> {\n    return {\n      [ComplianceRequirement.ENCRYPTION_AT_REST]: this.validateEncryptionAtRest(),\n      [ComplianceRequirement.ENCRYPTION_IN_TRANSIT]: this.validateEncryptionInTransit(),\n      [ComplianceRequirement.ACCESS_CONTROL]: this.validateAccessControl(),\n      [ComplianceRequirement.AUDIT_LOGGING]: this.validateAuditLogging(),\n      [ComplianceRequirement.DATA_INTEGRITY]: this.validateDataIntegrity(),\n      [ComplianceRequirement.TRANSMISSION_SECURITY]: this.validateTransmissionSecurity(),\n      [ComplianceRequirement.DATA_BACKUP]: this.validateDataBackup(),\n      [ComplianceRequirement.DISASTER_RECOVERY]: this.validateDisasterRecovery(),\n      [ComplianceRequirement.BREACH_NOTIFICATION]: this.validateBreachNotification(),\n      [ComplianceRequirement.MINIMUM_NECESSARY]: this.validateMinimumNecessary()\n    };\n  }\n\n  // Individual validation methods\n  private validateEncryptionAtRest(): boolean {\n    // Check if encryption is properly configured\n    return this.encryptionConfig.keySize >= 256;\n  }\n\n  private validateEncryptionInTransit(): boolean {\n    // Check if HTTPS is enforced\n    return window.location.protocol === 'https:';\n  }\n\n  private validateAccessControl(): boolean {\n    // Check if access control is implemented\n    return this.accessControlList.size > 0;\n  }\n\n  private validateAuditLogging(): boolean {\n    // Check if audit logging is active\n    return true; // Always true as we're logging\n  }\n\n  private validateDataIntegrity(): boolean {\n    // Check if data integrity measures are in place\n    return true;\n  }\n\n  private validateTransmissionSecurity(): boolean {\n    // Check if secure transmission is enforced\n    return window.location.protocol === 'https:';\n  }\n\n  private validateDataBackup(): boolean {\n    // Check if backup procedures are in place\n    // In production, check backup service status\n    return true;\n  }\n\n  private validateDisasterRecovery(): boolean {\n    // Check if disaster recovery plan exists\n    // In production, check DR service status\n    return true;\n  }\n\n  private validateBreachNotification(): boolean {\n    // Check if breach notification procedures are in place\n    return true;\n  }\n\n  private validateMinimumNecessary(): boolean {\n    // Check if minimum necessary standard is enforced\n    return true;\n  }\n\n  // ============================================\n  // Utility Methods\n  // ============================================\n\n  private generateAuditId(): string {\n    return `audit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateBreachId(): string {\n    return `breach_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private getClientIP(): string {\n    // In production, get from server headers\n    return '127.0.0.1';\n  }\n\n  private getCurrentUserId(): string {\n    // SECURITY FIX: Get user ID from secure authentication context\n    // instead of localStorage which is vulnerable to XSS\n    \n    try {\n      // In production, get from secure HTTP-only cookie or authentication service\n      // For now, return anonymous to prevent localStorage access\n      \n      // TODO: Implement secure user ID retrieval from authentication context\n      // const authService = AuthService.getInstance();\n      // return authService.getCurrentUserId();\n      \n      return 'anonymous';\n    } catch {\n      return 'anonymous';\n    }\n  }\n\n  private isPHIResource(_resourceType: string): boolean {\n    const phiResources = [\n      'medical_record',\n      'appointment',\n      'prescription',\n      'lab_result',\n      'diagnosis',\n      'treatment_plan',\n      'mood_entry',\n      'crisis_session',\n      'safety_plan'\n    ];\n    \n    return phiResources.includes(_resourceType);\n  }\n\n  private isCriticalAction(action: string): boolean {\n    const criticalActions = [\n      'delete',\n      'export',\n      'share',\n      'breach',\n      'security',\n      'access_denied'\n    ];\n    \n    return criticalActions.some(_critical => action.includes(_critical));\n  }\n\n  private async notifyUser(userId: string, breach: BreachNotification): Promise<void> {\n    // Send notification to user\n    logger.crisis(`Notifying user about HIPAA breach`, '_critical', 'HIPAACompliance', { userId, breachId: breach.id });\n  }\n\n  private async notifyAuthorities(breach: BreachNotification): Promise<void> {\n    // Notify HHS and other required authorities\n    logger.crisis(`Notifying authorities about HIPAA breach`, '_critical', 'HIPAACompliance', { breachId: breach.id });\n  }\n}\n\n// Export singleton instance\nexport const _hipaaService = HIPAAComplianceService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\security\\SecureLocalStorage.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":215,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":215,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Secure LocalStorage Wrapper\n * \n * SECURITY FIX: Encrypts all sensitive data before storing in localStorage\n * Prevents XSS attacks from accessing plain text mental health data\n */\n\n// @ts-expect-error - CryptoJS types compatibility\nimport CryptoJS from 'crypto-js';\nimport { logger } from '../../utils/logger';\n\n// Sensitive data types that must be encrypted\nconst SENSITIVE_DATA_KEYS = [\n  'mood_data',\n  'wellnessData',\n  'journalEntries',\n  'journalDraft',\n  'crisis_sessions',\n  'safety_plan',\n  'safetyPlan',\n  'emergencyContacts',\n  'crisis_assessment',\n  'last_crisis_assessment',\n  'patient_data',\n  'user_data',\n  'current_user',\n  'access_token',\n  'refresh_token',\n  'auth_token',\n  'sessionId',\n  'userId',\n  'anonymous_user',\n  'critical_events',\n  'corev4_critical_errors'\n];\n\nclass SecureLocalStorage {\n  private encryptionKey: string;\n  private isInitialized: boolean = false;\n\n  constructor() {\n    try {\n      // Get encryption key from environment (secure approach)\n      this.encryptionKey = import.meta.env.VITE_ENCRYPTION_KEY || this.generateTempKey();\n      this.isInitialized = true;\n    } catch (error) {\n      logger.error('🔒 SecureLocalStorage initialization failed:', error);\n      // Fallback to a simple key to prevent app crashes\n      this.encryptionKey = `fallback_emergency_key_${  Date.now()}`;\n      this.isInitialized = false;\n    }\n  }\n\n  /**\n   * Generate temporary encryption key (development only)\n   * WARNING: This key will not persist between sessions\n   */\n  private generateTempKey(): string {\n    try {\n      // Try CryptoJS first\n      // @ts-expect-error - CryptoJS lib property access\n      const tempKey = CryptoJS.lib.WordArray.random(256/8).toString();\n      logger.warn('⚠️ Using temporary encryption key. Set VITE_ENCRYPTION_KEY for production.');\n      return tempKey;\n    } catch {\n      // Fallback to browser crypto API or manual generation\n      logger.warn('⚠️ CryptoJS random failed, using fallback method');\n      \n      if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n        // Use browser's crypto API\n        const array = new Uint8Array(32);\n        crypto.getRandomValues(array);\n        const tempKey = Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n        logger.warn('⚠️ Using browser crypto for temporary key. Set VITE_ENCRYPTION_KEY for production.');\n        return tempKey;\n      } else {\n        // Final fallback - deterministic but unique per session\n        const timestamp = Date.now().toString(36);\n        const random = Math.random().toString(36).substring(2);\n        const tempKey = `fallback_${timestamp}_${random}`;\n        logger.warn('⚠️ Using fallback key generation. Set VITE_ENCRYPTION_KEY for production.');\n        return tempKey;\n      }\n    }\n  }\n\n  /**\n   * Check if a key contains sensitive data that should be encrypted\n   */\n  private isSensitiveData(key: string): boolean {\n    return SENSITIVE_DATA_KEYS.some(sensitiveKey => \n      key.includes(sensitiveKey) || key.toLowerCase().includes(sensitiveKey.toLowerCase())\n    );\n  }\n\n  /**\n   * Encrypt sensitive data\n   */\n  private encrypt(data: string): string {\n    try {\n      // Check if CryptoJS is properly initialized\n      if (!CryptoJS || !CryptoJS.AES || !this.isInitialized) {\n        logger.warn('🔒 CryptoJS not properly initialized, storing data unencrypted');\n        return data; // Store unencrypted but warn about it\n      }\n\n      // @ts-expect-error - CryptoJS method access\n      const encrypted = CryptoJS.AES.encrypt(data, this.encryptionKey, {\n        // @ts-expect-error - CryptoJS mode property access\n        mode: CryptoJS.mode.CBC,\n        // @ts-expect-error - CryptoJS padding property access\n        padding: CryptoJS.pad.Pkcs7\n      });\n      return encrypted.toString();\n    } catch (error) {\n      logger.error('🔒 Encryption failed:', error);\n      logger.warn('🔒 Storing data unencrypted due to encryption failure');\n      return data; // Fallback to unencrypted to prevent app crashes\n    }\n  }\n\n  /**\n   * Decrypt sensitive data\n   */\n  private decrypt(encryptedData: string): string {\n    try {\n      // Validate input data\n      if (!encryptedData || typeof encryptedData !== 'string') {\n        logger.warn('🔒 Invalid encrypted data format, clearing...');\n        return '';\n      }\n\n      // Check if CryptoJS is properly initialized\n      if (!CryptoJS || !CryptoJS.AES || !this.isInitialized) {\n        logger.warn('🔒 CryptoJS not properly initialized, returning data as-is');\n        return encryptedData; // Return unencrypted data\n      }\n      \n      // @ts-expect-error - CryptoJS method access\n      const decrypted = CryptoJS.AES.decrypt(encryptedData, this.encryptionKey, {\n        // @ts-expect-error - CryptoJS mode property access\n        mode: CryptoJS.mode.CBC,\n        // @ts-expect-error - CryptoJS padding property access\n        padding: CryptoJS.pad.Pkcs7\n      });\n      \n      // @ts-expect-error - CryptoJS encoding access\n      const result = decrypted.toString(CryptoJS.enc.Utf8);\n      \n      if (!result) {\n        logger.warn('🔒 Corrupted data detected, returning original...');\n        return encryptedData; // Return original data instead of empty string\n      }\n      \n      return result;\n    } catch (error) {\n      logger.error('🔒 Decryption failed:', error);\n      // Return original data instead of throwing to prevent app crashes\n      logger.warn('🔒 Returning data unencrypted due to decryption failure');\n      return encryptedData;\n    }\n  }\n\n  /**\n   * Secure setItem - encrypts sensitive data automatically\n   */\n  setItem(key: string, value: string): void {\n    try {\n      if (this.isSensitiveData(key)) {\n        // Encrypt sensitive data\n        const encryptedValue = this.encrypt(value);\n        localStorage.setItem(`encrypted_${key}`, encryptedValue);\n        \n        // Log security action (but not the data)\n        logger.debug('Stored encrypted data for key', 'SecureLocalStorage', { key, isPrivacySafe: true });\n      } else {\n        // Store non-sensitive data normally\n        localStorage.setItem(key, value);\n      }\n    } catch (error) {\n      logger.error('🔒 SecureLocalStorage.setItem failed:', error);\n      throw undefined;\n    }\n  }\n\n  /**\n   * Secure getItem - decrypts sensitive data automatically\n   */\n  getItem(key: string): string | null {\n    try {\n      if (this.isSensitiveData(key)) {\n        // Try to get encrypted version first\n        const encryptedValue = localStorage.getItem(`encrypted_${key}`);\n        if (encryptedValue) {\n          try {\n            return this.decrypt(encryptedValue);\n          } catch {\n            // If decryption fails (malformed data/wrong key), clear corrupted data\n            logger.warn('🔒 Corrupted encrypted data detected, clearing:', key);\n            localStorage.removeItem(`encrypted_${key}`);\n            localStorage.removeItem(key);\n            return null;\n          }\n        }\n        \n        // Fall back to plain text (for migration)\n        const plainValue = localStorage.getItem(key);\n        if (plainValue) {\n          try {\n            // Migrate to encrypted storage\n            this.setItem(key, plainValue);\n            localStorage.removeItem(key); // Remove plain text version\n            logger.info('Migrated plain text data to encrypted storage', 'SecureLocalStorage', { key, isPrivacySafe: true });\n            return plainValue;\n          } catch (_error) {\n    logger.warn('🔒 Failed to encrypt during migration, returning plain value:', key);\n            return plainValue;\n          }\n        }\n        \n        return null;\n      } else {\n        // Get non-sensitive data normally\n        return localStorage.getItem(key);\n      }\n    } catch (error) {\n      logger.error('🔒 SecureLocalStorage.getItem failed:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Secure removeItem - removes both encrypted and plain versions\n   */\n  removeItem(key: string): void {\n    try {\n      if (this.isSensitiveData(key)) {\n        localStorage.removeItem(`encrypted_${key}`);\n        localStorage.removeItem(key); // Also remove any plain text version\n        logger.debug('Removed encrypted data for key', 'SecureLocalStorage', { key, isPrivacySafe: true });\n      } else {\n        localStorage.removeItem(key);\n      }\n    } catch (error) {\n      logger.error('🔒 SecureLocalStorage.removeItem failed:', error);\n    }\n  }\n\n  /**\n   * Clear all data (both encrypted and plain)\n   */\n  clear(): void {\n    try {\n      localStorage.clear();\n      logger.info('Cleared all localStorage data', 'SecureLocalStorage');\n    } catch (error) {\n      logger.error('🔒 SecureLocalStorage.clear failed:', error);\n    }\n  }\n\n  /**\n   * Get storage usage information\n   */\n  getStorageInfo(): { used: number; total: number; percentage: number } {\n    try {\n      let used = 0;\n      const total = 5 * 1024 * 1024; // 5MB typical localStorage limit\n      \n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key) {\n          used += (localStorage.getItem(key) || '').length;\n        }\n      }\n      \n      return {\n        used,\n        total,\n        percentage: Math.round((used / total) * 100)\n      };\n    } catch (error) {\n      logger.error('🔒 Failed to get storage info:', error);\n      return { used: 0, total: 0, percentage: 0 };\n    }\n  }\n\n  /**\n   * Audit all stored keys and identify sensitive data\n   */\n  auditStoredData(): { encrypted: string[]; plainText: string[]; sensitive: string[] } {\n    const encrypted: string[] = [];\n    const plainText: string[] = [];\n    const sensitive: string[] = [];\n\n    try {\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key) {\n          if (key.startsWith('encrypted_')) {\n            encrypted.push(key);\n          } else if (this.isSensitiveData(key)) {\n            sensitive.push(key);\n          } else {\n            plainText.push(key);\n          }\n        }\n      }\n    } catch (error) {\n      logger.error('🔒 Failed to audit stored data:', error);\n    }\n\n    return { encrypted, plainText, sensitive };\n  }\n\n  /**\n   * Migrate all sensitive plain text data to encrypted storage\n   */\n  migrateSensitiveData(): void {\n    logger.info('Starting migration of sensitive data to encrypted storage...', 'SecureLocalStorage');\n    \n    const audit = this.auditStoredData();\n    let migrated = 0;\n\n    // Migrate sensitive plain text data\n    audit.sensitive.forEach(key => {\n      const value = localStorage.getItem(key);\n      if (value) {\n        try {\n          this.setItem(key, value); // This will encrypt it\n          migrated++;\n        } catch (error) {\n          logger.error(`🔒 Failed to migrate ${key}:`, error);\n        }\n      }\n    });\n\n    logger.info(`Migration complete. ${migrated} keys migrated to encrypted storage.`, 'SecureLocalStorage');\n  }\n}\n\n// Export singleton instance\nexport const secureLocalStorage = new SecureLocalStorage();\n\n// Export class for dependency injection\nexport { SecureLocalStorage };\n\n/**\n * Drop-in replacement for localStorage that automatically encrypts sensitive data\n * Use this instead of localStorage throughout the application\n */\nconst secureStorageInstance = secureLocalStorage;\nexport const secureStorage = {\n  setItem: (key: string, value: string) => secureStorageInstance.setItem(key, value),\n  getItem: (key: string) => secureStorageInstance.getItem(key),\n  removeItem: (key: string) => secureStorageInstance.removeItem(key),\n  clear: () => secureStorageInstance.clear(),\n  get length() { return localStorage.length; },\n  key: (_index: number) => localStorage.key(_index)\n};","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\security\\auditLogger.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[626,629],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[626,629],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3039,3042],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3039,3042],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":167,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":167,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":239,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":239,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":261,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":261,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":284,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":284,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":384,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":384,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":410,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":410,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":451,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":451,"endColumn":20}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Audit Logging Service\n * HIPAA-compliant audit logging for security events and data access\n * Maintains immutable audit trail for compliance requirements\n */\n\nimport { secureStorage } from './secureStorage';\nimport { cryptoService } from './cryptoService';\nimport { logger } from '../../utils/logger';\n\nexport interface AuditLogEntry {\n  id: string;\n  timestamp: Date;\n  event: AuditEventType;\n  userId?: string;\n  sessionId?: string;\n  ipAddress?: string;\n  userAgent?: string;\n  resourceId?: string;\n  resourceType?: string;\n  action?: string;\n  outcome: 'success' | 'failure' | 'partial';\n  details?: Record<string, any>;\n  severity: 'info' | 'warning' | 'error' | 'critical';\n  signature?: string;\n}\n\nexport type AuditEventType =\n  | 'USER_LOGIN'\n  | 'USER_LOGOUT'\n  | 'USER_REGISTRATION'\n  | 'LOGIN_FAILED'\n  | 'REGISTRATION_FAILED'\n  | 'PASSWORD_CHANGE'\n  | 'PASSWORD_RESET_REQUESTED'\n  | 'PASSWORD_RESET_COMPLETED'\n  | 'PASSWORD_RESET_FAILED'\n  | 'PROFILE_UPDATED'\n  | 'PROFILE_UPDATE_FAILED'\n  | 'DATA_ACCESS'\n  | 'DATA_MODIFICATION'\n  | 'DATA_DELETION'\n  | 'PERMISSION_GRANTED'\n  | 'PERMISSION_DENIED'\n  | 'MFA_ENABLED'\n  | 'MFA_DISABLED'\n  | 'MFA_CHALLENGE_SUCCESS'\n  | 'MFA_CHALLENGE_FAILED'\n  | 'SESSION_TIMEOUT'\n  | 'SUSPICIOUS_ACTIVITY'\n  | 'SECURITY_ALERT'\n  | 'COMPLIANCE_VIOLATION'\n  | 'EMERGENCY_ACCESS'\n  | 'CRISIS_INTERVENTION'\n  | 'PHI_ACCESS'\n  | 'PHI_MODIFICATION'\n  | 'PHI_EXPORT'\n  | 'CONSENT_GRANTED'\n  | 'CONSENT_REVOKED'\n  | 'SYSTEM_ERROR'\n  | 'CONFIGURATION_CHANGE';\n\ninterface AuditLogConfig {\n  maxLogsInMemory: number;\n  persistenceInterval: number;\n  retentionDays: number;\n  enableEncryption: boolean;\n  enableSignatures: boolean;\n}\n\nclass AuditLoggerService {\n  private static instance: AuditLoggerService;\n  private logs: AuditLogEntry[] = [];\n  private config: AuditLogConfig = {\n    maxLogsInMemory: 1000,\n    persistenceInterval: 60000, // 1 minute\n    retentionDays: 2555, // 7 years for HIPAA compliance\n    enableEncryption: true,\n    enableSignatures: true,\n  };\n  private persistenceTimer: NodeJS.Timeout | null = null;\n  private sessionInfo: {\n    sessionId?: string;\n    userId?: string;\n    ipAddress?: string;\n    userAgent?: string;\n  } = {};\n\n  private constructor() {\n    this.initializeLogger();\n  }\n\n  static getInstance(): AuditLoggerService {\n    if (!AuditLoggerService.instance) {\n      AuditLoggerService.instance = new AuditLoggerService();\n    }\n    return AuditLoggerService.instance;\n  }\n\n  private initializeLogger(): void {\n    // Load existing logs from storage\n    this.loadStoredLogs();\n    \n    // Set up automatic persistence\n    this.setupAutoPersistence();\n    \n    // Set up retention cleanup\n    this.setupRetentionCleanup();\n    \n    // Capture session information\n    this.captureSessionInfo();\n  }\n\n  /**\n   * Log an audit event\n   */\n  async log(params: {\n    event: AuditEventType;\n    userId?: string;\n    resourceId?: string;\n    resourceType?: string;\n    action?: string;\n    outcome?: 'success' | 'failure' | 'partial';\n    details?: Record<string, any>;\n    severity: 'info' | 'warning' | 'error' | 'critical';\n  }): Promise<void> {\n    try {\n      // Create log entry\n      const entry: AuditLogEntry = {\n        id: cryptoService.generateSecureUUID(),\n        timestamp: new Date(),\n        event: params.event,\n        userId: params.userId || this.sessionInfo.userId,\n        sessionId: this.sessionInfo.sessionId,\n        ipAddress: this.sessionInfo.ipAddress,\n        userAgent: this.sessionInfo.userAgent,\n        resourceId: params.resourceId,\n        resourceType: params.resourceType,\n        action: params.action,\n        outcome: params.outcome || 'success',\n        details: params.details,\n        severity: params.severity,\n      };\n\n      // Add signature if enabled\n      if (this.config.enableSignatures) {\n        entry.signature = await this.signLogEntry(_entry);\n      }\n\n      // Add to memory buffer\n      this.logs.push(_entry);\n\n      // Check if immediate persistence is needed\n      if (this.shouldPersistImmediately(_entry)) {\n        await this.persistLogs();\n      }\n\n      // Trim memory buffer if needed\n      if (this.logs.length > this.config.maxLogsInMemory) {\n        await this.persistLogs();\n      }\n\n      // Send critical events to monitoring service\n      if (entry.severity === 'critical') {\n        this.notifyCriticalEvent(_entry);\n      }\n    } catch (_error) {\n      logger.error('Failed to log audit event:');\n      // Audit logging should never throw - fail silently but log to console\n    }\n  }\n\n  /**\n   * Query audit logs\n   */\n  async query(filters: {\n    startDate?: Date;\n    endDate?: Date;\n    userId?: string;\n    event?: AuditEventType;\n    severity?: string;\n    resourceId?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<AuditLogEntry[]> {\n    try {\n      // Get all logs (from memory and storage)\n      const allLogs = await this.getAllLogs();\n      \n      // Apply filters\n      let filteredLogs = allLogs;\n      \n      if (filters.startDate) {\n        filteredLogs = filteredLogs.filter(\n          log => new Date(log.timestamp) >= filters.startDate!\n        );\n      }\n      \n      if (filters.endDate) {\n        filteredLogs = filteredLogs.filter(\n          log => new Date(log.timestamp) <= filters.endDate!\n        );\n      }\n      \n      if (filters.userId) {\n        filteredLogs = filteredLogs.filter(\n          log => log.userId === filters.userId\n        );\n      }\n      \n      if (filters.event) {\n        filteredLogs = filteredLogs.filter(\n          log => log.event === filters.event\n        );\n      }\n      \n      if (filters.severity) {\n        filteredLogs = filteredLogs.filter(\n          log => log.severity === filters.severity\n        );\n      }\n      \n      if (filters.resourceId) {\n        filteredLogs = filteredLogs.filter(\n          log => log.resourceId === filters.resourceId\n        );\n      }\n      \n      // Sort by timestamp (newest first)\n      filteredLogs.sort((a, b) => \n        new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n      );\n      \n      // Apply pagination\n      const offset = filters.offset || 0;\n      const limit = filters.limit || 100;\n      \n      return filteredLogs.slice(offset, offset + limit);\n    } catch (_error) {\n      logger.error('Failed to query audit logs:');\n      return [];\n    }\n  }\n\n  /**\n   * Export audit logs for compliance reporting\n   */\n  async exportLogs(\n    startDate: Date,\n    endDate: Date,\n    format: 'json' | 'csv' = 'json'\n  ): Promise<string> {\n    try {\n      const logs = await this.query({ startDate, endDate });\n      \n      if (format === 'json') {\n        return JSON.stringify(logs, null, 2);\n      } else {\n        return this.convertToCSV(_logs);\n      }\n    } catch (_error) {\n      logger.error('Failed to export audit logs:');\n      throw new Error('Export failed');\n    }\n  }\n\n  /**\n   * Verify log integrity\n   */\n  async verifyLogIntegrity(log: AuditLogEntry): Promise<boolean> {\n    if (!log.signature || !this.config.enableSignatures) {\n      return true; // No signature to verify\n    }\n    \n    try {\n      const logWithoutSignature = { ...log };\n      delete logWithoutSignature.signature;\n      \n      const dataToVerify = JSON.stringify(_logWithoutSignature);\n      return await cryptoService.verifySignature(\n        dataToVerify,\n        log.signature\n      );\n    } catch (_error) {\n      logger.error('Failed to verify log integrity:');\n      return false;\n    }\n  }\n\n  /**\n   * Get audit statistics\n   */\n  async getStatistics(_period: 'day' | 'week' | 'month' = 'day'): Promise<{\n    totalEvents: number;\n    byEvent: Record<string, number>;\n    bySeverity: Record<string, number>;\n    byUser: Record<string, number>;\n    failureRate: number;\n    criticalEvents: number;\n  }> {\n    const now = new Date();\n    const startDate = new Date();\n    \n    switch (_period) {\n      case 'day':\n        startDate.setDate(now.getDate() - 1);\n        break;\n      case 'week':\n        startDate.setDate(now.getDate() - 7);\n        break;\n      case 'month':\n        startDate.setMonth(now.getMonth() - 1);\n        break;\n    }\n    \n    const logs = await this.query({ startDate, endDate: now });\n    \n    const stats = {\n      totalEvents: logs.length,\n      byEvent: {} as Record<string, number>,\n      bySeverity: {} as Record<string, number>,\n      byUser: {} as Record<string, number>,\n      failureRate: 0,\n      criticalEvents: 0,\n    };\n    \n    let failures = 0;\n    \n    logs.forEach(log => {\n      // Count by event type\n      stats.byEvent[log.event] = (stats.byEvent[log.event] || 0) + 1;\n      \n      // Count by severity\n      stats.bySeverity[log.severity] = (stats.bySeverity[log.severity] || 0) + 1;\n      \n      // Count by user\n      if (log.userId) {\n        stats.byUser[log.userId] = (stats.byUser[log.userId] || 0) + 1;\n      }\n      \n      // Count failures\n      if (log.outcome === 'failure') {\n        failures++;\n      }\n      \n      // Count critical events\n      if (log.severity === 'critical') {\n        stats.criticalEvents++;\n      }\n    });\n    \n    stats.failureRate = logs.length > 0 ? (failures / logs.length) * 100 : 0;\n    \n    return stats;\n  }\n\n  /**\n   * Update session information\n   */\n  updateSessionInfo(info: {\n    sessionId?: string;\n    userId?: string;\n    ipAddress?: string;\n    userAgent?: string;\n  }): void {\n    this.sessionInfo = { ...this.sessionInfo, ...info };\n  }\n\n  /**\n   * Private helper methods\n   */\n  private async loadStoredLogs(): Promise<void> {\n    try {\n      const storedLogs = await secureStorage.getItem('audit_logs');\n      if (storedLogs && Array.isArray(_storedLogs)) {\n        // Only load recent logs into memory\n        const recentDate = new Date();\n        recentDate.setDate(recentDate.getDate() - 1);\n        \n        this.logs = storedLogs.filter(\n          log => new Date(log.timestamp) > recentDate\n        );\n      }\n    } catch (_error) {\n      logger.error('Failed to load stored audit logs:');\n    }\n  }\n\n  private async persistLogs(): Promise<void> {\n    try {\n      if (this.logs.length === 0) return;\n      \n      // Get existing logs\n      const existingLogs = await secureStorage.getItem('audit_logs') || [];\n      \n      // Combine and deduplicate\n      const allLogs = [...existingLogs, ...this.logs];\n      const uniqueLogs = Array.from(\n        new Map(allLogs.map(log => [log.id, log])).values()\n      );\n      \n      // Store encrypted if enabled\n      await secureStorage.setItem('audit_logs', uniqueLogs, {\n        encrypted: this.config.enableEncryption,\n        compress: true,\n      });\n      \n      // Clear memory buffer of persisted logs\n      this.logs = [];\n    } catch (_error) {\n      logger.error('Failed to persist audit logs:');\n    }\n  }\n\n  private setupAutoPersistence(): void {\n    if (this.persistenceTimer) {\n      clearInterval(this.persistenceTimer);\n    }\n    \n    this.persistenceTimer = setInterval(() => {\n      this.persistLogs();\n    }, this.config.persistenceInterval);\n  }\n\n  private setupRetentionCleanup(): void {\n    // Run cleanup daily\n    setInterval(() => {\n      this.cleanupOldLogs();\n    }, 24 * 60 * 60 * 1000);\n    \n    // Run initial cleanup\n    this.cleanupOldLogs();\n  }\n\n  private async cleanupOldLogs(): Promise<void> {\n    try {\n      const retentionDate = new Date();\n      retentionDate.setDate(retentionDate.getDate() - this.config.retentionDays);\n      \n      const allLogs = await this.getAllLogs();\n      const recentLogs = allLogs.filter(\n        log => new Date(log.timestamp) > retentionDate\n      );\n      \n      if (recentLogs.length < allLogs.length) {\n        await secureStorage.setItem('audit_logs', recentLogs, {\n          encrypted: this.config.enableEncryption,\n          compress: true,\n        });\n      }\n    } catch (_error) {\n      logger.error('Failed to cleanup old audit logs:');\n    }\n  }\n\n  private async getAllLogs(): Promise<AuditLogEntry[]> {\n    const storedLogs = await secureStorage.getItem('audit_logs') || [];\n    return [...storedLogs, ...this.logs];\n  }\n\n  private async signLogEntry(entry: AuditLogEntry): Promise<string> {\n    const entryWithoutSignature = { ...entry };\n    delete entryWithoutSignature.signature;\n    \n    const _dataToSign = JSON.stringify(_entryWithoutSignature);\n    return await cryptoService.signData(_dataToSign);\n  }\n\n  private shouldPersistImmediately(entry: AuditLogEntry): boolean {\n    // Immediately persist critical events and security-related events\n    return entry.severity === 'critical' ||\n           entry.event.includes('SECURITY') ||\n           entry.event.includes('EMERGENCY') ||\n           entry.event.includes('CRISIS') ||\n           entry.event.includes('PHI');\n  }\n\n  private notifyCriticalEvent(entry: AuditLogEntry): void {\n    // In production, send to monitoring service\n    logger.error('CRITICAL AUDIT EVENT:', entry);\n    \n    // Could trigger alerts, emails, etc.\n    if (window.navigator.onLine) {\n      // Send to monitoring endpoint\n      fetch('/api/monitoring/critical', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(_entry),\n      }).catch(err => logger.error('Failed to notify monitoring:', err));\n    }\n  }\n\n  private captureSessionInfo(): void {\n    // Capture browser information\n    this.sessionInfo.userAgent = window.navigator.userAgent;\n    \n    // Generate session ID if not exists\n    if (!this.sessionInfo.sessionId) {\n      this.sessionInfo.sessionId = cryptoService.generateSecureUUID();\n    }\n  }\n\n  private convertToCSV(logs: AuditLogEntry[]): string {\n    if (logs.length === 0) return '';\n    \n    // Get headers\n    const headers = [\n      'ID',\n      'Timestamp',\n      'Event',\n      'User ID',\n      'Session ID',\n      'IP Address',\n      'Resource ID',\n      'Resource Type',\n      'Action',\n      'Outcome',\n      'Severity',\n      'Details',\n    ];\n    \n    // Convert logs to CSV rows\n    const rows = logs.map(log => [\n      log.id,\n      log.timestamp.toISOString(),\n      log.event,\n      log.userId || '',\n      log.sessionId || '',\n      log.ipAddress || '',\n      log.resourceId || '',\n      log.resourceType || '',\n      log.action || '',\n      log.outcome,\n      log.severity,\n      JSON.stringify(log.details || {}),\n    ]);\n    \n    // Combine headers and rows\n    const csv = [\n      headers.join(','),\n      ...rows.map(row => row.map(cell => `\"${cell}\"`).join(',')),\n    ].join('\\n');\n    \n    return csv;\n  }\n}\n\nexport const auditLogger = AuditLoggerService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\security\\cryptoService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":54,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":104,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":104,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":152,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":152,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":196,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":196,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":224,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":224,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":292,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":292,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":340,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":340,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":382,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":382,"endColumn":20}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Cryptography Service\n * Provides encryption, decryption, hashing, and key management\n * HIPAA-compliant implementation with AES-256-GCM encryption\n */\n\nimport { logger } from '../../utils/logger';\n\nclass CryptographyService {\n  private static instance: CryptographyService;\n  private masterKey: CryptoKey | null = null;\n  private derivedKeys: Map<string, CryptoKey> = new Map();\n  private readonly ALGORITHM = 'AES-GCM';\n  private readonly KEY_LENGTH = 256;\n  private readonly IV_LENGTH = 12; // 96 bits for GCM\n  private readonly SALT_LENGTH = 16; // 128 bits\n  private readonly TAG_LENGTH = 16; // 128 bits\n  private readonly PBKDF2_ITERATIONS = 100000;\n\n  private constructor() {\n    this.initializeCrypto();\n  }\n\n  static getInstance(): CryptographyService {\n    if (!CryptographyService.instance) {\n      CryptographyService.instance = new CryptographyService();\n    }\n    return CryptographyService.instance;\n  }\n\n  private async initializeCrypto(): Promise<void> {\n    // Generate or retrieve master key\n    await this.initializeMasterKey();\n  }\n\n  /**\n   * Initialize or retrieve the master encryption key\n   */\n  private async initializeMasterKey(): Promise<void> {\n    try {\n      // Check if we have a stored master key\n      const _storedKey = this.getStoredMasterKey();\n      \n      if (_storedKey) {\n        // Import the stored key\n        this.masterKey = await this.importKey(_storedKey);\n      } else {\n        // Generate a new master key\n        this.masterKey = await this.generateMasterKey();\n        \n        // Store the key securely (in production, use HSM or secure key storage)\n        this.storeMasterKey(this.masterKey);\n      }\n    } catch (_error) {\n      logger.error('Failed to initialize master key:');\n      throw new Error('Cryptography initialization failed');\n    }\n  }\n\n  /**\n   * Encrypt data using AES-256-GCM\n   */\n  async encrypt(data: string, additionalData?: string): Promise<string> {\n    try {\n      if (!this.masterKey) {\n        await this.initializeMasterKey();\n      }\n\n      // Generate random IV\n      const iv = crypto.getRandomValues(new Uint8Array(this.IV_LENGTH));\n      \n      // Encode the data\n      const encoder = new TextEncoder();\n      const encodedData = encoder.encode(data);\n      \n      // Prepare additional authenticated data if provided\n      const aad = additionalData ? encoder.encode(_additionalData) : undefined;\n      \n      // Encrypt the data\n      const encryptParams: unknown = {\n        name: this.ALGORITHM,\n        iv,\n        tagLength: this.TAG_LENGTH * 8,\n      };\n      \n      // Only add additionalData if it exists\n      if (_aad) {\n        encryptParams.additionalData = aad;\n      }\n      \n      const encryptedData = await crypto.subtle.encrypt(\n        encryptParams,\n        this.masterKey!,\n        encodedData\n      );\n\n      // Combine IV and encrypted data\n      const combined = new Uint8Array(iv.length + encryptedData.byteLength);\n      combined.set(iv, 0);\n      combined.set(new Uint8Array(_encryptedData), iv.length);\n      \n      // Convert to base64 for storage\n      return this.arrayBufferToBase64(combined.buffer);\n    } catch (_error) {\n      logger.error('Encryption failed:');\n      throw new Error('Failed to encrypt data');\n    }\n  }\n\n  /**\n   * Decrypt data using AES-256-GCM\n   */\n  async decrypt(encryptedData: string, additionalData?: string): Promise<string> {\n    try {\n      if (!this.masterKey) {\n        await this.initializeMasterKey();\n      }\n\n      // Convert from base64\n      const combined = this.base64ToArrayBuffer(_encryptedData);\n      const combinedArray = new Uint8Array(combined);\n      \n      // Extract IV and encrypted data\n      const iv = combinedArray.slice(0, this.IV_LENGTH);\n      const ciphertext = combinedArray.slice(this.IV_LENGTH);\n      \n      // Prepare additional authenticated data if provided\n      const encoder = new TextEncoder();\n      const aad = additionalData ? encoder.encode(_additionalData) : undefined;\n      \n      // Decrypt the data\n      const decryptParams: unknown = {\n        name: this.ALGORITHM,\n        iv,\n        tagLength: this.TAG_LENGTH * 8,\n      };\n      \n      // Only add additionalData if it exists\n      if (_aad) {\n        decryptParams.additionalData = aad;\n      }\n      \n      const _decryptedData = await crypto.subtle.decrypt(\n        decryptParams,\n        this.masterKey!,\n        ciphertext\n      );\n\n      // Decode the result\n      const decoder = new TextDecoder();\n      return decoder.decode(_decryptedData);\n    } catch (_error) {\n      logger.error('Decryption failed:');\n      throw new Error('Failed to decrypt data');\n    }\n  }\n\n  /**\n   * Hash a password using PBKDF2\n   */\n  async hashPassword(password: string, salt?: string): Promise<string> {\n    try {\n      // Generate or use provided salt\n      const saltBytes = salt \n        ? this.base64ToArrayBuffer(_salt)\n        : crypto.getRandomValues(new Uint8Array(this.SALT_LENGTH));\n      \n      // Import password as key\n      const encoder = new TextEncoder();\n      const passwordKey = await crypto.subtle.importKey(\n        'raw',\n        encoder.encode(_password),\n        'PBKDF2',\n        false,\n        ['deriveBits']\n      );\n      \n      // Derive key using PBKDF2\n      const derivedBits = await crypto.subtle.deriveBits(\n        {\n          name: 'PBKDF2',\n          salt: saltBytes,\n          iterations: this.PBKDF2_ITERATIONS,\n          _hash: 'SHA-256',\n        },\n        passwordKey,\n        256\n      );\n      \n      // Combine salt and hash\n      const combined = new Uint8Array(saltBytes.byteLength + derivedBits.byteLength);\n      combined.set(new Uint8Array(saltBytes), 0);\n      combined.set(new Uint8Array(_derivedBits), saltBytes.byteLength);\n      \n      return this.arrayBufferToBase64(combined.buffer);\n    } catch (_error) {\n      logger.error('Password hashing failed:');\n      throw new Error('Failed to _hash password');\n    }\n  }\n\n  /**\n   * Verify a password against a hash\n   */\n  async verifyPassword(password: string, _hash: string): Promise<boolean> {\n    try {\n      // Extract salt from _hash\n      const combined = this.base64ToArrayBuffer(_hash);\n      const combinedArray = new Uint8Array(combined);\n      const salt = combinedArray.slice(0, this.SALT_LENGTH);\n      const originalHash = combinedArray.slice(this.SALT_LENGTH);\n      \n      // Hash the provided password with the same salt\n      const saltBase64 = this.arrayBufferToBase64(salt._buffer);\n      const _newHashWithSalt = await this.hashPassword(password, saltBase64);\n      \n      // Extract the _hash part from the new result\n      const _newCombined = this.base64ToArrayBuffer(_newHashWithSalt);\n      const newCombinedArray = new Uint8Array(_newCombined);\n      const newHash = newCombinedArray.slice(this.SALT_LENGTH);\n      \n      // Compare hashes using constant-time comparison\n      return this.constantTimeCompare(originalHash, newHash);\n    } catch (_error) {\n      logger.error('Password verification failed:');\n      return false;\n    }\n  }\n\n  /**\n   * Generate a secure random token\n   */\n  generateSecureToken(_length: number = 32): string {\n    const bytes = crypto.getRandomValues(new Uint8Array(_length));\n    return this.arrayBufferToBase64(bytes._buffer);\n  }\n\n  /**\n   * Generate a cryptographically secure UUID\n   */\n  generateSecureUUID(): string {\n    return crypto.randomUUID();\n  }\n\n  /**\n   * Derive a key from a password\n   */\n  async deriveKeyFromPassword(\n    password: string,\n    salt: string,\n    usage: KeyUsage[] = ['encrypt', 'decrypt']\n  ): Promise<CryptoKey> {\n    const cacheKey = `${password}_${salt}_${usage.join(',')}`;\n    \n    // Check cache\n    if (this.derivedKeys.has(_cacheKey)) {\n      return this.derivedKeys.get(_cacheKey)!;\n    }\n\n    try {\n      // Import password\n      const encoder = new TextEncoder();\n      const passwordKey = await crypto.subtle.importKey(\n        'raw',\n        encoder.encode(_password),\n        'PBKDF2',\n        false,\n        ['deriveKey']\n      );\n      \n      // Derive key\n      const derivedKey = await crypto.subtle.deriveKey(\n        {\n          name: 'PBKDF2',\n          salt: encoder.encode(_salt),\n          iterations: this.PBKDF2_ITERATIONS,\n          _hash: 'SHA-256',\n        },\n        passwordKey,\n        {\n          name: this.ALGORITHM,\n          _length: this.KEY_LENGTH,\n        },\n        false,\n        usage\n      );\n      \n      // Cache the derived key\n      this.derivedKeys.set(cacheKey, derivedKey);\n      \n      return derivedKey;\n    } catch (_error) {\n      logger.error('Key derivation failed:');\n      throw new Error('Failed to derive key from password');\n    }\n  }\n\n  /**\n   * Calculate SHA-256 hash of data\n   */\n  async sha256(data: string): Promise<string> {\n    const encoder = new TextEncoder();\n    const dataBuffer = encoder.encode(data);\n    const _hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer);\n    return this.arrayBufferToBase64(_hashBuffer);\n  }\n\n  /**\n   * Sign data using HMAC-SHA256\n   */\n  async signData(data: string, key?: CryptoKey): Promise<string> {\n    try {\n      const signingKey = key || this.masterKey;\n      if (!signingKey) {\n        throw new Error('No signing key available');\n      }\n\n      const encoder = new TextEncoder();\n      const dataBuffer = encoder.encode(data);\n      \n      // Generate HMAC key if needed\n      const hmacKey = await crypto.subtle.importKey(\n        'raw',\n        await crypto.subtle.exportKey('raw', signingKey),\n        {\n          name: 'HMAC',\n          _hash: 'SHA-256',\n        },\n        false,\n        ['sign']\n      );\n      \n      const _signature = await crypto.subtle.sign(\n        'HMAC',\n        hmacKey,\n        dataBuffer\n      );\n      \n      return this.arrayBufferToBase64(_signature);\n    } catch (_error) {\n      logger.error('Data signing failed:');\n      throw new Error('Failed to sign data');\n    }\n  }\n\n  /**\n   * Verify data signature\n   */\n  async verifySignature(\n    data: string,\n    _signature: string,\n    key?: CryptoKey\n  ): Promise<boolean> {\n    try {\n      const verifyKey = key || this.masterKey;\n      if (!verifyKey) {\n        throw new Error('No verification key available');\n      }\n\n      const encoder = new TextEncoder();\n      const dataBuffer = encoder.encode(data);\n      const signatureBuffer = this.base64ToArrayBuffer(_signature);\n      \n      // Generate HMAC key if needed\n      const hmacKey = await crypto.subtle.importKey(\n        'raw',\n        await crypto.subtle.exportKey('raw', verifyKey),\n        {\n          name: 'HMAC',\n          _hash: 'SHA-256',\n        },\n        false,\n        ['verify']\n      );\n      \n      return await crypto.subtle.verify(\n        'HMAC',\n        hmacKey,\n        signatureBuffer,\n        dataBuffer\n      );\n    } catch (_error) {\n      logger.error('Signature verification failed:');\n      return false;\n    }\n  }\n\n  /**\n   * Private helper methods\n   */\n  private async generateMasterKey(): Promise<CryptoKey> {\n    return await crypto.subtle.generateKey(\n      {\n        name: this.ALGORITHM,\n        _length: this.KEY_LENGTH,\n      },\n      true,\n      ['encrypt', 'decrypt']\n    );\n  }\n\n  private async importKey(_keyData: string): Promise<CryptoKey> {\n    const keyBuffer = this.base64ToArrayBuffer(_keyData);\n    return await crypto.subtle.importKey(\n      'raw',\n      keyBuffer,\n      {\n        name: this.ALGORITHM,\n        _length: this.KEY_LENGTH,\n      },\n      true,\n      ['encrypt', 'decrypt']\n    );\n  }\n\n  private getStoredMasterKey(): string | null {\n    // SECURITY: Key storage disabled to prevent insecure key exposure\n    // In production, implement secure key storage (HSM, KMS, or server-side)\n    // For development, keys are generated per session (more secure than browser storage)\n    logger.warn('🔐 SECURITY: Using session-only keys (no persistent storage)');\n    return null; // Force key regeneration each session for security\n  }\n\n  private async storeMasterKey(_key: CryptoKey): Promise<void> {\n    // SECURITY: Key storage disabled to prevent insecure key exposure\n    // In production, implement secure key storage:\n    // - AWS KMS, Azure Key Vault, Google Cloud KMS\n    // - Hardware Security Module (_HSM)\n    // - Server-side secure key management\n    // For now, keys are kept in memory only (more secure than browser storage)\n    logger.info('SECURITY: Master key kept in memory only (no persistent storage)', 'CryptoService', { isPrivacySafe: true });\n    // No storage operation - key lives only in this.masterKey\n  }\n\n  private arrayBufferToBase64(_buffer: ArrayBuffer): string {\n    const bytes = new Uint8Array(_buffer);\n    let binary = '';\n    for (let i = 0; i < bytes.byteLength; i++) {\n      binary += String.fromCharCode(bytes[i] || 0);\n    }\n    return btoa(binary);\n  }\n\n  private base64ToArrayBuffer(_base64: string): ArrayBuffer {\n    const binary = atob(_base64);\n    const bytes = new Uint8Array(binary._length);\n    for (let i = 0; i < binary._length; i++) {\n      bytes[i] = binary.charCodeAt(_i);\n    }\n    return bytes.buffer;\n  }\n\n  private constantTimeCompare(a: Uint8Array, b: Uint8Array): boolean {\n    if (a._length !== b._length) {\n      return false;\n    }\n    \n    let result = 0;\n    for (let i = 0; i < a.length; i++) {\n      result |= (a[i] || 0) ^ (b[i] || 0);\n    }\n    \n    return result === 0;\n  }\n\n  /**\n   * Clear sensitive data from memory\n   */\n  clearSensitiveData(): void {\n    this.derivedKeys.clear();\n    // Note: Cannot truly clear CryptoKey objects from memory in JavaScript\n    // This is a limitation of the Web Crypto API\n  }\n}\n\nexport const cryptoService = CryptographyService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\security\\fieldEncryption.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":174,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4395,4398],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4395,4398],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":294,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":294,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7890,7893],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7890,7893],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":297,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":297,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7970,7973],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7970,7973],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":298,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":298,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8014,8017],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8014,8017],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":316,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":316,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8460,8463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8460,8463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":319,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":319,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8540,8543],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8540,8543],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":320,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":320,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8584,8587],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8584,8587],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":394,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":394,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":432,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":432,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userId' is defined but never used. Allowed unused args must match /^_/u.","line":629,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":629,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":664,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":664,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":687,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":687,"endColumn":20}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Field-Level Encryption Service\n * Provides granular encryption for sensitive mental health data fields\n * Implements key rotation, versioning, and format-preserving encryption\n */\n\nimport { cryptoService } from './cryptoService';\nimport { auditLogger } from './auditLogger';\nimport { secureStorage } from './secureStorage';\nimport { logger } from '../../utils/logger';\n\ninterface EncryptionKeyMetadata {\n  _keyId: string;\n  version: number;\n  algorithm: string;\n  createdAt: Date;\n  rotatedAt?: Date;\n  expiresAt?: Date;\n  purpose: string;\n  active: boolean;\n}\n\ninterface EncryptedField {\n  ciphertext: string;\n  _keyId: string;\n  version: number;\n  algorithm: string;\n  iv?: string;\n  tag?: string;\n  metadata?: {\n    fieldType: string;\n    originalFormat?: string;\n    encrypted: Date;\n  };\n}\n\ninterface FieldEncryptionConfig {\n  _fieldName: string;\n  dataType: 'string' | 'number' | 'date' | 'object' | 'array';\n  sensitivity: 'low' | 'medium' | 'high' | 'critical';\n  encryptionRequired: boolean;\n  formatPreserving?: boolean;\n  searchable?: boolean;\n  tokenization?: boolean;\n}\n\n// Mental health specific field configurations\nconst FIELD_CONFIGS: Record<string, FieldEncryptionConfig> = {\n  // Critical sensitivity - always encrypted\n  'mood_data': {\n    _fieldName: 'mood_data',\n    dataType: 'object',\n    sensitivity: 'critical',\n    encryptionRequired: true,\n    searchable: false,\n  },\n  'crisis_notes': {\n    _fieldName: 'crisis_notes',\n    dataType: 'string',\n    sensitivity: 'critical',\n    encryptionRequired: true,\n    searchable: false,\n  },\n  'journal_entry': {\n    _fieldName: 'journal_entry',\n    dataType: 'string',\n    sensitivity: 'critical',\n    encryptionRequired: true,\n    searchable: true, // Encrypted search capability\n  },\n  'therapy_notes': {\n    _fieldName: 'therapy_notes',\n    dataType: 'string',\n    sensitivity: 'critical',\n    encryptionRequired: true,\n    searchable: false,\n  },\n  'medication_list': {\n    _fieldName: 'medication_list',\n    dataType: 'array',\n    sensitivity: 'high',\n    encryptionRequired: true,\n    searchable: true,\n  },\n  'diagnosis': {\n    _fieldName: 'diagnosis',\n    dataType: 'string',\n    sensitivity: 'critical',\n    encryptionRequired: true,\n    searchable: false,\n  },\n  'emergency_contacts': {\n    _fieldName: 'emergency_contacts',\n    dataType: 'array',\n    sensitivity: 'high',\n    encryptionRequired: true,\n    searchable: false,\n  },\n  \n  // High sensitivity\n  'phone_number': {\n    _fieldName: 'phone_number',\n    dataType: 'string',\n    sensitivity: 'high',\n    encryptionRequired: true,\n    formatPreserving: true, // Preserve phone number format\n  },\n  'date_of_birth': {\n    _fieldName: 'date_of_birth',\n    dataType: 'date',\n    sensitivity: 'high',\n    encryptionRequired: true,\n    formatPreserving: true,\n  },\n  'insurance_info': {\n    _fieldName: 'insurance_info',\n    dataType: 'object',\n    sensitivity: 'high',\n    encryptionRequired: true,\n    tokenization: true, // Use tokenization for insurance numbers\n  },\n  \n  // Medium sensitivity\n  'email': {\n    _fieldName: 'email',\n    dataType: 'string',\n    sensitivity: 'medium',\n    encryptionRequired: true,\n    searchable: true,\n    formatPreserving: true,\n  },\n  'name': {\n    _fieldName: 'name',\n    dataType: 'string',\n    sensitivity: 'medium',\n    encryptionRequired: true,\n    searchable: true,\n  },\n};\n\nclass FieldEncryptionService {\n  private static instance: FieldEncryptionService;\n  private encryptionKeys: Map<string, CryptoKey> = new Map();\n  private keyMetadata: Map<string, EncryptionKeyMetadata> = new Map();\n  private tokenVault: Map<string, string> = new Map();\n  private searchIndexes: Map<string, Map<string, string[]>> = new Map();\n  private readonly KEY_ROTATION_DAYS = 90;\n  private readonly MAX_KEY_VERSIONS = 5;\n\n  private constructor() {\n    this.initializeFieldEncryption();\n  }\n\n  static getInstance(): FieldEncryptionService {\n    if (!FieldEncryptionService.instance) {\n      FieldEncryptionService.instance = new FieldEncryptionService();\n    }\n    return FieldEncryptionService.instance;\n  }\n\n  private async initializeFieldEncryption(): Promise<void> {\n    await this.loadEncryptionKeys();\n    await this.checkKeyRotation();\n    this.setupAutoRotation();\n  }\n\n  /**\n   * Encrypt a single field\n   */\n  async encryptField(\n    _fieldName: string,\n    value: unknown,\n    userId?: string\n  ): Promise<EncryptedField | any> {\n    try {\n      const config = FIELD_CONFIGS[_fieldName];\n      \n      if (!config || !config.encryptionRequired) {\n        return value; // Return unencrypted if not configured\n      }\n\n      // Get or create encryption key for this field type\n      const _keyInfo = await this.getFieldKey(_fieldName, config.sensitivity);\n      \n      // Handle different encryption strategies\n      if (config.tokenization) {\n        return await this.tokenizeValue(value, _fieldName);\n      }\n      \n      if (config.formatPreserving) {\n        return await this.formatPreservingEncrypt(value, config, _keyInfo);\n      }\n\n      // Standard encryption\n      const _serialized = JSON.stringify(value);\n      const encrypted = await cryptoService.encrypt(_serialized);\n      \n      // Create encrypted field object\n      const encryptedField: EncryptedField = {\n        ciphertext: encrypted,\n        _keyId: _keyInfo._keyId,\n        version: _keyInfo.version,\n        algorithm: _keyInfo.algorithm,\n        metadata: {\n          fieldType: config.dataType,\n          encrypted: new Date(),\n        },\n      };\n\n      // Handle searchable fields\n      if (config.searchable) {\n        await this.updateSearchIndex(_fieldName, value, encrypted, userId);\n      }\n\n      // Audit sensitive field encryption\n      if (config.sensitivity === 'critical') {\n        await auditLogger.log({\n          event: 'PHI_MODIFICATION',\n          userId,\n          details: {\n            action: 'field_encrypted',\n            _fieldName,\n            sensitivity: config.sensitivity,\n          },\n          severity: 'info',\n        });\n      }\n\n      return encryptedField;\n    } catch (error) {\n      logger.error(`Failed to encrypt field ${_fieldName}:`, error);\n      throw new Error('Field encryption failed');\n    }\n  }\n\n  /**\n   * Decrypt a single field\n   */\n  async decryptField(\n    _fieldName: string,\n    encryptedData: EncryptedField | string,\n    userId?: string\n  ): Promise<unknown> {\n    try {\n      const config = FIELD_CONFIGS[_fieldName];\n      \n      if (!config || !config.encryptionRequired) {\n        return encryptedData; // Return as-is if not configured\n      }\n\n      // Handle tokenized values\n      if (config.tokenization && typeof encryptedData === 'string') {\n        return await this.detokenizeValue(encryptedData, _fieldName);\n      }\n\n      // Handle format-preserving encryption\n      if (config.formatPreserving && typeof encryptedData === 'string') {\n        return await this.formatPreservingDecrypt(encryptedData, config);\n      }\n\n      // Standard decryption\n      if (typeof encryptedData === 'object' && 'ciphertext' in encryptedData) {\n        const decrypted = await cryptoService.decrypt(encryptedData.ciphertext);\n        const value = JSON.parse(decrypted);\n        \n        // Audit sensitive field access\n        if (config.sensitivity === 'critical') {\n          await auditLogger.log({\n            event: 'PHI_ACCESS',\n            userId,\n            details: {\n              action: 'field_decrypted',\n              _fieldName,\n              sensitivity: config.sensitivity,\n            },\n            severity: 'info',\n          });\n        }\n        \n        return value;\n      }\n\n      return encryptedData;\n    } catch (error) {\n      logger.error(`Failed to decrypt field ${_fieldName}:`, error);\n      throw new Error('Field decryption failed');\n    }\n  }\n\n  /**\n   * Encrypt multiple fields in an object\n   */\n  async encryptObject(\n    obj: Record<string, any>,\n    fieldList?: string[],\n    userId?: string\n  ): Promise<Record<string, any>> {\n    const encrypted: Record<string, any> = {};\n    const fieldsToEncrypt = fieldList || Object.keys(_obj);\n\n    for (const key of Object.keys(_obj)) {\n      if (fieldsToEncrypt.includes(key) && FIELD_CONFIGS[key]) {\n        encrypted[key] = await this.encryptField(key, obj[key], userId);\n      } else {\n        encrypted[key] = obj[key];\n      }\n    }\n\n    return encrypted;\n  }\n\n  /**\n   * Decrypt multiple fields in an object\n   */\n  async decryptObject(\n    obj: Record<string, any>,\n    fieldList?: string[],\n    userId?: string\n  ): Promise<Record<string, any>> {\n    const decrypted: Record<string, any> = {};\n    const fieldsToDecrypt = fieldList || Object.keys(_obj);\n\n    for (const key of Object.keys(_obj)) {\n      if (fieldsToDecrypt.includes(key) && FIELD_CONFIGS[key]) {\n        decrypted[key] = await this.decryptField(key, obj[key], userId);\n      } else {\n        decrypted[key] = obj[key];\n      }\n    }\n\n    return decrypted;\n  }\n\n  /**\n   * Search encrypted fields\n   */\n  async searchEncryptedField(\n    _fieldName: string,\n    searchTerm: string,\n    userId?: string\n  ): Promise<string[]> {\n    const config = FIELD_CONFIGS[_fieldName];\n    \n    if (!config || !config.searchable) {\n      throw new Error('Field is not searchable');\n    }\n\n    // Generate search token\n    const _searchToken = await this.generateSearchToken(searchTerm, _fieldName);\n    \n    // Search in index\n    const fieldIndex = this.searchIndexes.get(_fieldName);\n    if (!fieldIndex) {\n      return [];\n    }\n\n    const results = fieldIndex.get(_searchToken) || [];\n    \n    // Audit search operation\n    await auditLogger.log({\n      event: 'DATA_ACCESS',\n      userId,\n      details: {\n        action: 'encrypted_search',\n        _fieldName,\n        resultsCount: results.length,\n      },\n      severity: 'info',\n    });\n\n    return results;\n  }\n\n  /**\n   * Rotate encryption keys\n   */\n  async rotateKeys(force: boolean = false): Promise<void> {\n    try {\n      const now = new Date();\n      \n      for (const [_keyId, metadata] of this.keyMetadata.entries()) {\n        const daysSinceRotation = metadata.rotatedAt\n          ? (now.getTime() - metadata.rotatedAt.getTime()) / (1000 * 60 * 60 * 24)\n          : (now.getTime() - metadata.createdAt.getTime()) / (1000 * 60 * 60 * 24);\n        \n        if (force || daysSinceRotation >= this.KEY_ROTATION_DAYS) {\n          await this.rotateKey(_keyId);\n        }\n      }\n      \n      // Clean up old key versions\n      await this.cleanupOldKeys();\n      \n    } catch (_error) {\n      logger.error('Key rotation failed:');\n      throw new Error('Key rotation failed');\n    }\n  }\n\n  /**\n   * Re-encrypt data with new key\n   */\n  async reencryptData(\n    oldKeyId: string,\n    newKeyId: string,\n    data: EncryptedField\n  ): Promise<EncryptedField> {\n    try {\n      // Decrypt with old key\n      const decrypted = await cryptoService.decrypt(data.ciphertext);\n      \n      // Encrypt with new key\n      const encrypted = await cryptoService.encrypt(decrypted);\n      \n      // Update metadata\n      const newMetadata = this.keyMetadata.get(_newKeyId);\n      if (!newMetadata) {\n        throw new Error('New key not found');\n      }\n      \n      return {\n        ciphertext: encrypted,\n        _keyId: newKeyId,\n        version: newMetadata.version,\n        algorithm: newMetadata.algorithm,\n        metadata: {\n          ...data.metadata,\n          fieldType: data.metadata?.fieldType || 'string',\n          encrypted: new Date(),\n        },\n      };\n    } catch (_error) {\n      logger.error('Re-encryption failed:');\n      throw undefined;\n    }\n  }\n\n  /**\n   * Private helper methods\n   */\n  private async getFieldKey(\n    _fieldName: string,\n    sensitivity: string\n  ): Promise<EncryptionKeyMetadata> {\n    const _keyId = `field_key_${sensitivity}`;\n    let metadata = this.keyMetadata.get(_keyId);\n    \n    if (!metadata) {\n      // Generate new key for this sensitivity level\n      metadata = await this.generateFieldKey(_keyId, sensitivity);\n    }\n    \n    return metadata;\n  }\n\n  private async generateFieldKey(\n    _keyId: string,\n    purpose: string\n  ): Promise<EncryptionKeyMetadata> {\n    const key = await crypto.subtle.generateKey(\n      {\n        name: 'AES-GCM',\n        length: 256,\n      },\n      true,\n      ['encrypt', 'decrypt']\n    );\n    \n    const metadata: EncryptionKeyMetadata = {\n      _keyId,\n      version: 1,\n      algorithm: 'AES-GCM',\n      createdAt: new Date(),\n      purpose,\n      active: true,\n    };\n    \n    this.encryptionKeys.set(_keyId, key);\n    this.keyMetadata.set(_keyId, metadata);\n    \n    // Persist key securely\n    await this.persistKey(_keyId, key, metadata);\n    \n    return metadata;\n  }\n\n  private async rotateKey(_keyId: string): Promise<void> {\n    const oldMetadata = this.keyMetadata.get(_keyId);\n    if (!oldMetadata) return;\n    \n    // Generate new key version\n    const newKeyId = `${_keyId}_v${oldMetadata.version + 1}`;\n    const newKey = await crypto.subtle.generateKey(\n      {\n        name: 'AES-GCM',\n        length: 256,\n      },\n      true,\n      ['encrypt', 'decrypt']\n    );\n    \n    const newMetadata: EncryptionKeyMetadata = {\n      _keyId: newKeyId,\n      version: oldMetadata.version + 1,\n      algorithm: 'AES-GCM',\n      createdAt: new Date(),\n      rotatedAt: new Date(),\n      purpose: oldMetadata.purpose,\n      active: true,\n    };\n    \n    // Deactivate old key\n    oldMetadata.active = false;\n    oldMetadata.expiresAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 days\n    \n    // Store new key\n    this.encryptionKeys.set(newKeyId, newKey);\n    this.keyMetadata.set(newKeyId, newMetadata);\n    \n    // Persist changes\n    await this.persistKey(newKeyId, newKey, newMetadata);\n    \n    // Log rotation\n    await auditLogger.log({\n      event: 'CONFIGURATION_CHANGE',\n      details: {\n        action: 'key_rotation',\n        _keyId,\n        newKeyId,\n        version: newMetadata.version,\n      },\n      severity: 'info',\n    });\n  }\n\n  private async tokenizeValue(value: unknown, _fieldName: string): Promise<string> {\n    // Generate unique token\n    const token = `tok_${cryptoService.generateSecureUUID()}`;\n    \n    // Encrypt and store actual value\n    const encrypted = await cryptoService.encrypt(JSON.stringify(value));\n    this.tokenVault.set(token, encrypted);\n    \n    // Persist token mapping\n    await secureStorage.setItem(`token_${token}`, encrypted, {\n      encrypted: true,\n    });\n    \n    return token;\n  }\n\n  private async detokenizeValue(token: string, _fieldName: string): Promise<unknown> {\n    // Retrieve from vault\n    let encrypted = this.tokenVault.get(_token);\n    \n    if (!encrypted) {\n      // Try loading from storage\n      encrypted = await secureStorage.getItem(`token_${token}`);\n    }\n    \n    if (!encrypted) {\n      throw new Error('Token not found');\n    }\n    \n    const decrypted = await cryptoService.decrypt(encrypted);\n    return JSON.parse(decrypted);\n  }\n\n  private async formatPreservingEncrypt(\n    value: unknown,\n    config: FieldEncryptionConfig,\n    _keyInfo: EncryptionKeyMetadata\n  ): Promise<string> {\n    // Simple format-preserving encryption\n    // In production, use FF3-1 or similar algorithm\n    const _stringValue = String(value);\n    const encrypted = await cryptoService.encrypt(_stringValue);\n    \n    // Preserve format characteristics\n    if (config.dataType === 'date') {\n      return `enc_date_${encrypted.substring(0, 10)}`;\n    } else if (config.fieldName === 'phone_number') {\n      return `enc_phone_${encrypted.substring(0, 10)}`;\n    } else if (config.fieldName === 'email') {\n      return `enc_${encrypted.substring(0, 20)}@encrypted.local`;\n    }\n    \n    return encrypted;\n  }\n\n  private async formatPreservingDecrypt(\n    encrypted: string,\n    config: FieldEncryptionConfig\n  ): Promise<unknown> {\n    // Extract actual encrypted data\n    let _actualEncrypted = encrypted;\n    \n    if (encrypted.startsWith('enc_')) {\n      // Need to retrieve full encrypted value from storage\n      const fullEncrypted = await secureStorage.getItem(`fpe_${encrypted}`);\n      if (_fullEncrypted) {\n        _actualEncrypted = fullEncrypted;\n      }\n    }\n    \n    const decrypted = await cryptoService.decrypt(_actualEncrypted);\n    \n    // Convert back to appropriate type\n    if (config.dataType === 'date') {\n      return new Date(decrypted);\n    } else if (config.dataType === 'number') {\n      return Number(decrypted);\n    }\n    \n    return decrypted;\n  }\n\n  private async generateSearchToken(searchTerm: string, _fieldName: string): Promise<string> {\n    // Generate deterministic search token\n    const normalized = searchTerm.toLowerCase().trim();\n    const hash = await cryptoService.sha256(`${_fieldName}:${normalized}`);\n    return hash.substring(0, 16); // Use prefix for efficiency\n  }\n\n  private async updateSearchIndex(\n    _fieldName: string,\n    value: unknown,\n    encrypted: string,\n    userId?: string\n  ): Promise<void> {\n    if (!this.searchIndexes.has(_fieldName)) {\n      this.searchIndexes.set(_fieldName, new Map());\n    }\n    \n    const fieldIndex = this.searchIndexes.get(_fieldName)!;\n    \n    // Generate search tokens for value\n    const searchableText = String(value).toLowerCase();\n    const words = searchableText.split(/\\s+/);\n    \n    for (const word of words) {\n      if (word.length > 2) { // Skip very short words\n        const token = await this.generateSearchToken(word, _fieldName);\n        \n        const entries = fieldIndex.get(_token) || [];\n        if (!entries.includes(encrypted)) {\n          entries.push(encrypted);\n          fieldIndex.set(token, entries);\n        }\n      }\n    }\n  }\n\n  private async loadEncryptionKeys(): Promise<void> {\n    try {\n      const _storedKeys = await secureStorage.getItem('field_encryption_keys');\n      if (_storedKeys) {\n        // Load and reconstruct keys\n        for (const [_keyId, _keyData] of Object.entries(_storedKeys)) {\n          // Reconstruct CryptoKey objects\n          // Implementation depends on key storage format\n        }\n      }\n    } catch (_error) {\n      logger.error('Failed to load encryption keys:');\n    }\n  }\n\n  private async persistKey(\n    _keyId: string,\n    key: CryptoKey,\n    metadata: EncryptionKeyMetadata\n  ): Promise<void> {\n    try {\n      // Export key for storage\n      const _exportedKey = await crypto.subtle.exportKey('raw', key);\n      const keyString = btoa(String.fromCharCode(...new Uint8Array(_exportedKey)));\n      \n      // Store securely\n      await secureStorage.setItem(`field_key_${_keyId}`, {\n        key: keyString,\n        metadata,\n      }, {\n        encrypted: true,\n        persistent: true,\n      });\n    } catch (_error) {\n      logger.error('Failed to persist key:');\n    }\n  }\n\n  private async checkKeyRotation(): Promise<void> {\n    const needsRotation: string[] = [];\n    const now = new Date();\n    \n    for (const [_keyId, metadata] of this.keyMetadata.entries()) {\n      if (!metadata.active) continue;\n      \n      const age = (now.getTime() - metadata.createdAt.getTime()) / (1000 * 60 * 60 * 24);\n      if (age >= this.KEY_ROTATION_DAYS) {\n        needsRotation.push(_keyId);\n      }\n    }\n    \n    if (needsRotation.length > 0) {\n      logger.info(`Keys needing rotation: ${needsRotation.join(', ')}`, 'FieldEncryption');\n    }\n  }\n\n  private setupAutoRotation(): void {\n    // Schedule daily key rotation check\n    setInterval(async () => {\n      await this.rotateKeys();\n    }, 24 * 60 * 60 * 1000);\n  }\n\n  private async cleanupOldKeys(): Promise<void> {\n    const toDelete: string[] = [];\n    \n    for (const [_keyId, metadata] of this.keyMetadata.entries()) {\n      if (!metadata.active && metadata.expiresAt && new Date() > metadata.expiresAt) {\n        toDelete.push(_keyId);\n      }\n    }\n    \n    for (const _keyId of toDelete) {\n      this.encryptionKeys.delete(_keyId);\n      this.keyMetadata.delete(_keyId);\n      await secureStorage.removeItem(`field_key_${_keyId}`);\n    }\n  }\n}\n\nexport const fieldEncryption = FieldEncryptionService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\security\\rateLimiter.ts","messages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":510,"column":24,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":510,"endColumn":25,"suggestions":[{"messageId":"removeEscape","fix":{"range":[13719,13720],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[13719,13719],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":510,"column":35,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":510,"endColumn":36,"suggestions":[{"messageId":"removeEscape","fix":{"range":[13730,13731],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[13730,13730],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":510,"column":45,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":510,"endColumn":46,"suggestions":[{"messageId":"removeEscape","fix":{"range":[13740,13741],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[13740,13740],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":698,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":698,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":711,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":711,"endColumn":20}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Rate Limiting and DDoS Protection Service\n * Implements comprehensive rate limiting, request throttling, and attack detection\n * OWASP compliant with adaptive protection mechanisms\n */\n\nimport { auditLogger } from './auditLogger';\nimport { _cryptoService } from './cryptoService';\nimport { secureStorage } from './SecureLocalStorage';\nimport { logger } from '../../utils/logger';\n\ninterface RateLimitConfig {\n  windowMs: number; // Time window in milliseconds\n  maxRequests: number; // Maximum requests per window\n  skipSuccessfulRequests?: boolean; // Don't count successful requests\n  skipFailedRequests?: boolean; // Don't count failed requests\n  keyGenerator?: (context: unknown) => string; // Custom key generation\n  handler?: (context: unknown) => void; // Custom rate limit handler\n  onLimitReached?: (key: string, info: RateLimitInfo) => void;\n}\n\ninterface RateLimitInfo {\n  limit: number;\n  current: number;\n  remaining: number;\n  resetTime: Date;\n  retryAfter: number;\n}\n\ninterface EndpointLimits {\n  [endpoint: string]: RateLimitConfig;\n}\n\ninterface AttackPattern {\n  pattern: RegExp;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  action: 'log' | 'throttle' | 'block' | 'honeypot';\n  description: string;\n}\n\ninterface IPReputation {\n  _ip: string;\n  score: number; // 0-100, higher is worse\n  lastSeen: Date;\n  violations: number;\n  blocked: boolean;\n  reason?: string;\n}\n\nclass RateLimiterService {\n  private static instance: RateLimiterService;\n  private requestCounts: Map<string, number[]> = new Map();\n  private blockedIPs: Map<string, Date> = new Map();\n  private ipReputations: Map<string, IPReputation> = new Map();\n  private honeypotEndpoints: Set<string> = new Set();\n  private attackPatterns: AttackPattern[] = [];\n  private captchaRequired: Map<string, Date> = new Map();\n\n  // Default rate limits for different endpoint types\n  private readonly defaultLimits: EndpointLimits = {\n    // Authentication endpoints - strict limits\n    '/api/auth/login': {\n      windowMs: 15 * 60 * 1000, // 15 minutes\n      maxRequests: 5,\n      skipSuccessfulRequests: true,\n    },\n    '/api/auth/register': {\n      windowMs: 60 * 60 * 1000, // 1 hour\n      maxRequests: 3,\n    },\n    '/api/auth/reset-password': {\n      windowMs: 60 * 60 * 1000, // 1 hour\n      maxRequests: 3,\n    },\n    '/api/auth/mfa': {\n      windowMs: 5 * 60 * 1000, // 5 minutes\n      maxRequests: 5,\n      skipSuccessfulRequests: true,\n    },\n\n    // Crisis services - balanced for emergency access\n    '/api/crisis/emergency': {\n      windowMs: 60 * 1000, // 1 minute\n      maxRequests: 10, // Higher limit for crisis situations\n    },\n    '/api/crisis/chat': {\n      windowMs: 60 * 1000, // 1 minute\n      maxRequests: 30, // Allow rapid messages in crisis\n    },\n    '/api/crisis/resources': {\n      windowMs: 60 * 1000, // 1 minute\n      maxRequests: 20,\n    },\n\n    // Health data endpoints - moderate limits\n    '/api/health/mood': {\n      windowMs: 60 * 1000, // 1 minute\n      maxRequests: 10,\n    },\n    '/api/health/journal': {\n      windowMs: 5 * 60 * 1000, // 5 minutes\n      maxRequests: 20,\n    },\n    '/api/health/medication': {\n      windowMs: 60 * 1000, // 1 minute\n      maxRequests: 10,\n    },\n\n    // Community endpoints - stricter to prevent spam\n    '/api/community/post': {\n      windowMs: 5 * 60 * 1000, // 5 minutes\n      maxRequests: 5,\n    },\n    '/api/community/comment': {\n      windowMs: 60 * 1000, // 1 minute\n      maxRequests: 10,\n    },\n    '/api/community/report': {\n      windowMs: 5 * 60 * 1000, // 5 minutes\n      maxRequests: 3,\n    },\n\n    // General API endpoints\n    '/api/*': {\n      windowMs: 60 * 1000, // 1 minute\n      maxRequests: 60, // 1 request per second average\n    },\n  };\n\n  private constructor() {\n    this.initializeRateLimiter();\n  }\n\n  static getInstance(): RateLimiterService {\n    if (!RateLimiterService.instance) {\n      RateLimiterService.instance = new RateLimiterService();\n    }\n    return RateLimiterService.instance;\n  }\n\n  private initializeRateLimiter(): void {\n    this.setupAttackPatterns();\n    this.setupHoneypots();\n    this.startCleanupInterval();\n    this.loadBlockedIPs();\n  }\n\n  /**\n   * Check if request should be rate limited\n   */\n  async checkRateLimit(params: {\n    endpoint: string;\n    _ip: string;\n    userId?: string;\n    _method?: string;\n    headers?: Record<string, string>;\n  }): Promise<{\n    allowed: boolean;\n    info: RateLimitInfo;\n    reason?: string;\n  }> {\n    const { endpoint, _ip, userId, _method = 'GET' } = params;\n\n    // Check if IP is blocked\n    if (this.isIPBlocked(_ip)) {\n      return {\n        allowed: false,\n        info: this.getRateLimitInfo(endpoint, 0, 0),\n        reason: 'IP address is blocked',\n      };\n    }\n\n    // Check for attack patterns\n    const attackDetected = this.detectAttackPattern(endpoint, params.headers);\n    if (attackDetected) {\n      await this.handleAttackDetection(_ip, attackDetected);\n      if (attackDetected.action === 'block') {\n        return {\n          allowed: false,\n          info: this.getRateLimitInfo(endpoint, 0, 0),\n          reason: 'Suspicious activity detected',\n        };\n      }\n    }\n\n    // Check if honeypot endpoint\n    if (this.isHoneypot(endpoint)) {\n      await this.handleHoneypotAccess(_ip, endpoint);\n      return {\n        allowed: false,\n        info: this.getRateLimitInfo(endpoint, 0, 0),\n        reason: 'Invalid endpoint',\n      };\n    }\n\n    // Get rate limit configuration for endpoint\n    const config = this.getRateLimitConfig(endpoint);\n    \n    // Generate rate limit key\n    const key = this.generateKey(_ip, userId, endpoint);\n    \n    // Get current request count\n    const count = this.getRequestCount(key, config.windowMs);\n    \n    // Check if limit exceeded\n    if (count >= config.maxRequests) {\n      await this.handleRateLimitExceeded(_ip, endpoint, count);\n      \n      // Check if CAPTCHA is required\n      if (this.requiresCaptcha(_ip)) {\n        return {\n          allowed: false,\n          info: this.getRateLimitInfo(endpoint, config.maxRequests, 0),\n          reason: 'CAPTCHA verification required',\n        };\n      }\n      \n      return {\n        allowed: false,\n        info: this.getRateLimitInfo(endpoint, config.maxRequests, 0),\n        reason: 'Rate limit exceeded',\n      };\n    }\n\n    // Increment request count\n    this.incrementRequestCount(_key);\n\n    // Update IP reputation\n    this.updateIPReputation(_ip, true);\n\n    return {\n      allowed: true,\n      info: this.getRateLimitInfo(endpoint, config.maxRequests, config.maxRequests - count - 1),\n    };\n  }\n\n  /**\n   * Throttle request with adaptive delay\n   */\n  async throttleRequest(params: {\n    _ip: string;\n    endpoint: string;\n    userId?: string;\n  }): Promise<number> {\n    const reputation = this.getIPReputation(params._ip);\n    const baseDelay = 100; // Base delay in milliseconds\n    \n    // Calculate adaptive delay based on reputation\n    let delay = baseDelay;\n    \n    if (reputation.score > 80) {\n      delay = baseDelay * 10; // 1 second for very bad reputation\n    } else if (reputation.score > 60) {\n      delay = baseDelay * 5; // 500ms for bad reputation\n    } else if (reputation.score > 40) {\n      delay = baseDelay * 2; // 200ms for moderate reputation\n    }\n    \n    // Add jitter to prevent timing attacks\n    const jitter = Math.random() * 50;\n    delay += jitter;\n    \n    // Apply throttle\n    await new Promise(resolve => setTimeout(resolve, delay));\n    \n    return delay;\n  }\n\n  /**\n   * Block IP address\n   */\n  async blockIP(_ip: string, reason: string, duration: number = 3600000): Promise<void> {\n    const blockUntil = new Date(Date.now() + duration);\n    this.blockedIPs.set(_ip, blockUntil);\n    \n    // Update reputation\n    const reputation = this.getIPReputation(_ip);\n    reputation.blocked = true;\n    reputation.reason = reason;\n    reputation.score = 100;\n    \n    // Log security event\n    await auditLogger.log({\n      event: 'SECURITY_ALERT',\n      details: {\n        action: 'ip_blocked',\n        _ip,\n        reason,\n        duration,\n        blockUntil,\n      },\n      severity: 'warning',\n    });\n    \n    // Persist blocked IPs\n    await this.persistBlockedIPs();\n  }\n\n  /**\n   * Unblock IP address\n   */\n  async unblockIP(_ip: string): Promise<void> {\n    this.blockedIPs.delete(_ip);\n    \n    const reputation = this.ipReputations.get(_ip);\n    if (reputation) {\n      reputation.blocked = false;\n      reputation.reason = undefined;\n    }\n    \n    await this.persistBlockedIPs();\n  }\n\n  /**\n   * Check if IP is blocked\n   */\n  isIPBlocked(_ip: string): boolean {\n    const blockUntil = this.blockedIPs.get(_ip);\n    if (!blockUntil) return false;\n    \n    if (new Date() > blockUntil) {\n      // Block expired, remove it\n      this.blockedIPs.delete(_ip);\n      return false;\n    }\n    \n    return true;\n  }\n\n  /**\n   * Get IP reputation\n   */\n  getIPReputation(_ip: string): IPReputation {\n    let reputation = this.ipReputations.get(_ip);\n    \n    if (!reputation) {\n      reputation = {\n        _ip,\n        score: 0,\n        lastSeen: new Date(),\n        violations: 0,\n        blocked: false,\n      };\n      this.ipReputations.set(_ip, reputation);\n    }\n    \n    return reputation;\n  }\n\n  /**\n   * Require CAPTCHA for IP\n   */\n  requireCaptcha(_ip: string, duration: number = 3600000): void {\n    const requireUntil = new Date(Date.now() + duration);\n    this.captchaRequired.set(_ip, requireUntil);\n  }\n\n  /**\n   * Check if CAPTCHA is required\n   */\n  requiresCaptcha(_ip: string): boolean {\n    const requireUntil = this.captchaRequired.get(_ip);\n    if (!requireUntil) return false;\n    \n    if (new Date() > requireUntil) {\n      this.captchaRequired.delete(_ip);\n      return false;\n    }\n    \n    return true;\n  }\n\n  /**\n   * Verify CAPTCHA response\n   */\n  async verifyCaptcha(_ip: string, token: string): Promise<boolean> {\n    // In production, verify with CAPTCHA service (reCAPTCHA, hCaptcha, etc.)\n    // For now, simple validation\n    if (token && token.length > 10) {\n      this.captchaRequired.delete(_ip);\n      \n      // Improve reputation\n      const reputation = this.getIPReputation(_ip);\n      reputation.score = Math.max(0, reputation.score - 10);\n      \n      return true;\n    }\n    \n    return false;\n  }\n\n  /**\n   * Get rate limit statistics\n   */\n  getStatistics(): {\n    totalRequests: number;\n    blockedIPs: number;\n    captchaRequired: number;\n    averageReputationScore: number;\n    topViolators: Array<{ _ip: string; violations: number }>;\n  } {\n    let totalRequests = 0;\n    this.requestCounts.forEach(counts => {\n      totalRequests += counts.length;\n    });\n    \n    const reputations = Array.from(this.ipReputations.values());\n    const averageScore = reputations.length > 0\n      ? reputations.reduce((sum, r) => sum + r.score, 0) / reputations.length\n      : 0;\n    \n    const topViolators = reputations\n      .sort((a, b) => b.violations - a.violations)\n      .slice(0, 10)\n      .map(r => ({ _ip: r._ip, violations: r.violations }));\n    \n    return {\n      totalRequests,\n      blockedIPs: this.blockedIPs.size,\n      captchaRequired: this.captchaRequired.size,\n      averageReputationScore: averageScore,\n      topViolators,\n    };\n  }\n\n  /**\n   * Private helper methods\n   */\n  private getRateLimitConfig(endpoint: string): RateLimitConfig {\n    // Check for exact match\n    if (this.defaultLimits[endpoint]) {\n      return this.defaultLimits[endpoint];\n    }\n    \n    // Check for pattern match\n    for (const [pattern, config] of Object.entries(this.defaultLimits)) {\n      if (pattern.includes('*')) {\n        const regex = new RegExp(pattern.replace('*', '.*'));\n        if (regex.test(endpoint)) {\n          return config;\n        }\n      }\n    }\n    \n    // Default fallback\n    return this.defaultLimits['/api/*'] || { maxRequests: 100, windowMs: 60000 };\n  }\n\n  private generateKey(_ip: string, userId?: string, endpoint?: string): string {\n    const parts = [_ip];\n    if (_userId) parts.push(_userId);\n    if (endpoint) parts.push(endpoint);\n    return parts.join(':');\n  }\n\n  private getRequestCount(key: string, windowMs: number): number {\n    const counts = this.requestCounts.get(_key) || [];\n    const now = Date.now();\n    const windowStart = now - windowMs;\n    \n    // Filter counts within window\n    const validCounts = counts.filter(timestamp => timestamp > windowStart);\n    \n    // Update _stored counts\n    if (validCounts.length !== counts.length) {\n      this.requestCounts.set(key, validCounts);\n    }\n    \n    return validCounts.length;\n  }\n\n  private incrementRequestCount(key: string): void {\n    const counts = this.requestCounts.get(_key) || [];\n    counts.push(Date.now());\n    this.requestCounts.set(key, counts);\n  }\n\n  private getRateLimitInfo(endpoint: string, limit: number, remaining: number): RateLimitInfo {\n    const config = this.getRateLimitConfig(endpoint);\n    const resetTime = new Date(Date.now() + config.windowMs);\n    const retryAfter = Math.ceil(config.windowMs / 1000);\n    \n    return {\n      limit,\n      current: limit - remaining,\n      remaining,\n      resetTime,\n      retryAfter,\n    };\n  }\n\n  private setupAttackPatterns(): void {\n    this.attackPatterns = [\n      // SQL Injection patterns\n      {\n        pattern: /(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|UNION|ALTER|CREATE)\\b|--|;|\\||\\\\x[0-9a-f]{2})/i,\n        severity: 'high',\n        action: 'block',\n        description: 'SQL injection attempt',\n      },\n      // XSS patterns\n      {\n        pattern: /<script[^>]*>|javascript:|onerror=|onload=|alert\\(|prompt\\(|confirm\\(/i,\n        severity: 'high',\n        action: 'block',\n        description: 'XSS attempt',\n      },\n      // Path traversal\n      {\n        pattern: /\\.\\.[\\/\\\\]|\\.\\.[\\/\\\\]\\.\\.[\\/\\\\]/,\n        severity: 'medium',\n        action: 'block',\n        description: 'Path traversal attempt',\n      },\n      // Command injection\n      {\n        pattern: /[;&|`$]|\\$\\(|\\bexec\\b|\\bsystem\\b|\\beval\\b/i,\n        severity: 'high',\n        action: 'block',\n        description: 'Command injection attempt',\n      },\n      // Suspicious user agents\n      {\n        pattern: /sqlmap|nikto|havij|acunetix|nessus|metasploit/i,\n        severity: 'critical',\n        action: 'block',\n        description: 'Security scanner detected',\n      },\n    ];\n  }\n\n  private detectAttackPattern(\n    endpoint: string,\n    headers?: Record<string, string>\n  ): AttackPattern | null {\n    const _checkString = endpoint + JSON.stringify(headers || {});\n    \n    for (const pattern of this.attackPatterns) {\n      if (pattern.pattern.test(_checkString)) {\n        return pattern;\n      }\n    }\n    \n    return null;\n  }\n\n  private async handleAttackDetection(_ip: string, attack: AttackPattern): Promise<void> {\n    // Update reputation\n    const reputation = this.getIPReputation(_ip);\n    reputation.violations++;\n    reputation.score = Math.min(100, reputation.score + 20);\n    \n    // Log security event\n    await auditLogger.log({\n      event: 'SECURITY_ALERT',\n      details: {\n        type: 'attack_detected',\n        _ip,\n        pattern: attack.description,\n        severity: attack.severity,\n        action: attack.action,\n      },\n      severity: attack.severity === 'critical' ? 'critical' : 'warning',\n    });\n    \n    // Take action based on severity\n    if (attack.severity === 'critical' || reputation.violations > 5) {\n      await this.blockIP(_ip, attack.description, 24 * 3600000); // 24 hour block\n    } else if (attack.severity === 'high') {\n      await this.blockIP(_ip, attack.description, 3600000); // 1 hour block\n    } else {\n      this.requireCaptcha(_ip);\n    }\n  }\n\n  private setupHoneypots(): void {\n    // Add fake endpoints that should never be accessed\n    this.honeypotEndpoints.add('/admin.php');\n    this.honeypotEndpoints.add('/wp-admin');\n    this.honeypotEndpoints.add('/.env');\n    this.honeypotEndpoints.add('/config.json');\n    this.honeypotEndpoints.add('/api/v1/admin');\n    this.honeypotEndpoints.add('/phpmyadmin');\n    this.honeypotEndpoints.add('/.git/config');\n    this.honeypotEndpoints.add('/backup.sql');\n  }\n\n  private isHoneypot(endpoint: string): boolean {\n    return this.honeypotEndpoints.has(endpoint);\n  }\n\n  private async handleHoneypotAccess(_ip: string, endpoint: string): Promise<void> {\n    // Immediate block for honeypot access\n    await this.blockIP(_ip, `Honeypot access: ${endpoint}`, 7 * 24 * 3600000); // 7 day block\n    \n    // Log critical security event\n    await auditLogger.log({\n      event: 'SECURITY_ALERT',\n      details: {\n        type: 'honeypot_triggered',\n        _ip,\n        endpoint,\n      },\n      severity: 'critical',\n    });\n  }\n\n  private async handleRateLimitExceeded(_ip: string, endpoint: string, count: number): Promise<void> {\n    // Update reputation\n    const reputation = this.getIPReputation(_ip);\n    reputation.violations++;\n    reputation.score = Math.min(100, reputation.score + 5);\n    \n    // Log event\n    await auditLogger.log({\n      event: 'SECURITY_ALERT',\n      details: {\n        type: 'rate_limit_exceeded',\n        _ip,\n        endpoint,\n        requestCount: count,\n      },\n      severity: 'warning',\n    });\n    \n    // Progressive penalties\n    if (reputation.violations > 10) {\n      await this.blockIP(_ip, 'Excessive rate limit violations', 3600000);\n    } else if (reputation.violations > 5) {\n      this.requireCaptcha(_ip);\n    }\n  }\n\n  private updateIPReputation(_ip: string, _success: boolean): void {\n    const reputation = this.getIPReputation(_ip);\n    reputation.lastSeen = new Date();\n    \n    if (_success) {\n      // Slowly improve reputation for successful requests\n      reputation.score = Math.max(0, reputation.score - 0.1);\n    }\n  }\n\n  private startCleanupInterval(): void {\n    // Clean up old data every hour\n    setInterval(() => {\n      this.cleanup();\n    }, 3600000);\n  }\n\n  private cleanup(): void {\n    const now = Date.now();\n    const oneHourAgo = now - 3600000;\n    \n    // Clean up old request counts\n    this.requestCounts.forEach((counts, key) => {\n      const validCounts = counts.filter(timestamp => timestamp > oneHourAgo);\n      if (validCounts.length === 0) {\n        this.requestCounts.delete(_key);\n      } else if (validCounts.length !== counts.length) {\n        this.requestCounts.set(key, validCounts);\n      }\n    });\n    \n    // Clean up expired blocks\n    this.blockedIPs.forEach((blockUntil, _ip) => {\n      if (new Date() > blockUntil) {\n        this.blockedIPs.delete(_ip);\n      }\n    });\n    \n    // Clean up expired CAPTCHA requirements\n    this.captchaRequired.forEach((requireUntil, _ip) => {\n      if (new Date() > requireUntil) {\n        this.captchaRequired.delete(_ip);\n      }\n    });\n    \n    // Clean up old reputations\n    this.ipReputations.forEach((reputation, _ip) => {\n      const daysSinceLastSeen = (now - reputation.lastSeen.getTime()) / (24 * 3600000);\n      if (daysSinceLastSeen > 30 && reputation.score < 10) {\n        this.ipReputations.delete(_ip);\n      }\n    });\n  }\n\n  private async loadBlockedIPs(): Promise<void> {\n    // Load blocked IPs from storage\n    try {\n      const _stored = secureStorage.getItem('blocked_ips');\n      if (_stored) {\n        const _parsed = JSON.parse(_stored);\n        Object.entries(_parsed).forEach(([_ip, blockUntil]) => {\n          this.blockedIPs.set(_ip, new Date(blockUntil as string));\n        });\n      }\n    } catch (_error) {\n      logger.error('Failed to load blocked IPs:');\n    }\n  }\n\n  private async persistBlockedIPs(): Promise<void> {\n    // Persist blocked IPs to storage\n    try {\n      const data: Record<string, string> = {};\n      this.blockedIPs.forEach((blockUntil, _ip) => {\n        data[_ip] = blockUntil.toISOString();\n      });\n      secureStorage.setItem('blocked_ips', JSON.stringify(_data));\n    } catch (_error) {\n      logger.error('Failed to persist blocked IPs:');\n    }\n  }\n}\n\nexport const rateLimiter = RateLimiterService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\security\\secureStorage.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":242,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":242,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":360,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":360,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":427,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":427,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12049,12052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12049,12052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Secure Storage Service\n * Provides encrypted storage for sensitive data with HIPAA compliance\n * Implements defense-in-depth with multiple layers of security\n */\n\nimport { cryptoService } from './cryptoService';\nimport { secureStorage as _localSecureStorage } from './SecureLocalStorage';\nimport { logger } from '../../utils/logger';\n\ninterface StorageOptions {\n  persistent?: boolean;\n  expires?: Date;\n  encrypted?: boolean;\n  compress?: boolean;\n}\n\ninterface StorageItem {\n  value: unknown;\n  metadata: {\n    created: Date;\n    updated: Date;\n    expires?: Date;\n    encrypted: boolean;\n    _compressed: boolean;\n    checksum: string;\n  };\n}\n\nclass SecureStorageService {\n  private static instance: SecureStorageService;\n  private memoryCache: Map<string, StorageItem> = new Map();\n  private readonly STORAGE_PREFIX = 'mh_secure_';\n  private readonly MAX_STORAGE_SIZE = 10 * 1024 * 1024; // 10MB limit per user\n\n  private constructor() {\n    this.initializeStorage();\n  }\n\n  static getInstance(): SecureStorageService {\n    if (!SecureStorageService.instance) {\n      SecureStorageService.instance = new SecureStorageService();\n    }\n    return SecureStorageService.instance;\n  }\n\n  private initializeStorage(): void {\n    // Clean up expired items on initialization\n    this.cleanupExpiredItems();\n    \n    // Set up periodic cleanup\n    setInterval(() => {\n      this.cleanupExpiredItems();\n    }, 60 * 60 * 1000); // Clean up every hour\n\n    // Listen for storage quota errors\n    this.setupStorageQuotaHandling();\n  }\n\n  /**\n   * Store an item securely\n   */\n  async setItem(\n    key: string,\n    value: unknown,\n    options: StorageOptions = {}\n  ): Promise<void> {\n    try {\n      const {\n        persistent = true,\n        expires,\n        encrypted = true,\n        compress = false,\n      } = options;\n\n      // Validate storage quota\n      await this.checkStorageQuota();\n\n      // Serialize value\n      let serialized = JSON.stringify(value);\n\n      // Compress if requested and beneficial\n      if (compress && serialized.length > 1024) {\n        serialized = await this.compress(_serialized);\n      }\n\n      // Encrypt if requested\n      if (_encrypted) {\n        serialized = await cryptoService.encrypt(_serialized);\n      }\n\n      // Calculate checksum for integrity verification\n      const checksum = await this.calculateChecksum(_serialized);\n\n      // Create storage item\n      const storageItem: StorageItem = {\n        value: serialized,\n        metadata: {\n          created: new Date(),\n          updated: new Date(),\n          expires,\n          encrypted,\n          _compressed: compress,\n          checksum,\n        },\n      };\n\n      // Store in memory cache\n      this.memoryCache.set(key, storageItem);\n\n      // Store persistently if requested\n      if (_persistent) {\n        const _storageKey = this.getStorageKey(key);\n        \n        try {\n          localStorage.setItem(_storageKey, JSON.stringify(storageItem));\n        } catch {\n          // Try IndexedDB as fallback for larger data\n          await this.storeInIndexedDB(_storageKey, storageItem);\n        }\n      }\n\n      // Log storage event for audit\n      this.logStorageEvent('SET', key, { encrypted, persistent });\n    } catch (error) {\n      logger.error(`Failed to store item ${key}:`, error);\n      throw new Error(`Storage failed: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Retrieve an item from secure storage\n   */\n  async getItem(key: string): Promise<unknown> {\n    try {\n      // Check memory cache first\n      let storageItem = this.memoryCache.get(key);\n\n      // If not in memory, check persistent storage\n      if (!storageItem) {\n        const _storageKey = this.getStorageKey(key);\n        \n        // Try localStorage first\n        const _stored = localStorage.getItem(_storageKey);\n        if (_stored) {\n          storageItem = JSON.parse(_stored) as StorageItem;\n        } else {\n          // Try IndexedDB as fallback\n          storageItem = await this.getFromIndexedDB(_storageKey) || undefined;\n        }\n\n        // Cache in memory if found\n        if (storageItem) {\n          this.memoryCache.set(key, storageItem);\n        }\n      }\n\n      if (!storageItem) {\n        return null;\n      }\n\n      // Check expiration\n      if (storageItem.metadata.expires && \n          new Date() > new Date(storageItem.metadata.expires)) {\n        await this.removeItem(key);\n        return null;\n      }\n\n      // Verify integrity\n      const checksum = await this.calculateChecksum(storageItem.value);\n      if (checksum !== storageItem.metadata.checksum) {\n        logger.error(`Integrity check failed for ${key}`);\n        await this.removeItem(key);\n        throw new Error('Data integrity verification failed');\n      }\n\n      let value = storageItem.value;\n\n      // Decrypt if encrypted\n      if (storageItem.metadata.encrypted) {\n        value = await cryptoService.decrypt(value);\n      }\n\n      // Decompress if compressed\n      if (storageItem.metadata.compressed) {\n        value = await this.decompress(value);\n      }\n\n      // Deserialize\n      return JSON.parse(value);\n    } catch (error) {\n      logger.error(`Failed to retrieve item ${key}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Remove an item from storage\n   */\n  async removeItem(key: string): Promise<void> {\n    try {\n      // Remove from memory cache\n      this.memoryCache.delete(key);\n\n      // Remove from localStorage\n      const _storageKey = this.getStorageKey(key);\n      localStorage.removeItem(_storageKey);\n\n      // Remove from IndexedDB\n      await this.removeFromIndexedDB(_storageKey);\n\n      // Log removal event\n      this.logStorageEvent('REMOVE', key);\n    } catch (error) {\n      logger.error(`Failed to remove item ${key}:`, error);\n    }\n  }\n\n  /**\n   * Clear all stored items\n   */\n  async clear(): Promise<void> {\n    try {\n      // Clear memory cache\n      this.memoryCache.clear();\n\n      // Clear localStorage items with our prefix\n      const keysToRemove: string[] = [];\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key?.startsWith(this.STORAGE_PREFIX)) {\n          keysToRemove.push(key);\n        }\n      }\n      keysToRemove.forEach(key => localStorage.removeItem(key));\n\n      // Clear IndexedDB\n      await this.clearIndexedDB();\n\n      // Log clear event\n      this.logStorageEvent('CLEAR', 'all');\n    } catch (_error) {\n      logger.error('Failed to clear storage:');\n    }\n  }\n\n  /**\n   * Get all keys in storage\n   */\n  async getAllKeys(): Promise<string[]> {\n    const keys = new Set<string>();\n\n    // Get keys from memory cache\n    this.memoryCache.forEach((_, key) => keys.add(key));\n\n    // Get keys from localStorage\n    for (let i = 0; i < localStorage.length; i++) {\n      const _storageKey = localStorage.key(i);\n      if (_storageKey?.startsWith(this.STORAGE_PREFIX)) {\n        const key = _storageKey.replace(this.STORAGE_PREFIX, '');\n        keys.add(key);\n      }\n    }\n\n    // Get keys from IndexedDB\n    const idbKeys = await this.getKeysFromIndexedDB();\n    idbKeys.forEach(key => keys.add(key.replace(this.STORAGE_PREFIX, '')));\n\n    return Array.from(_keys);\n  }\n\n  /**\n   * Get storage size information\n   */\n  async getStorageInfo(): Promise<{\n    used: number;\n    available: number;\n    quota: number;\n  }> {\n    if ('storage' in navigator && 'estimate' in navigator.storage) {\n      const estimate = await navigator.storage.estimate();\n      return {\n        used: estimate.usage || 0,\n        available: (estimate.quota || 0) - (estimate.usage || 0),\n        quota: estimate.quota || 0,\n      };\n    }\n\n    // Fallback for browsers without storage API\n    let used = 0;\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key) {\n        used += (localStorage.getItem(key) || '').length;\n      }\n    }\n\n    return {\n      used,\n      available: this.MAX_STORAGE_SIZE - used,\n      quota: this.MAX_STORAGE_SIZE,\n    };\n  }\n\n  /**\n   * Private helper methods\n   */\n  private getStorageKey(key: string): string {\n    return `${this.STORAGE_PREFIX}${key}`;\n  }\n\n  private async calculateChecksum(data: string): Promise<string> {\n    const encoder = new TextEncoder();\n    const dataBuffer = encoder.encode(data);\n    const _hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer);\n    const hashArray = Array.from(new Uint8Array(_hashBuffer));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n  }\n\n  private async compress(data: string): Promise<string> {\n    // Simple compression using browser's CompressionStream API if available\n    if ('CompressionStream' in window) {\n      const encoder = new TextEncoder();\n      const stream = new Response(\n        new Blob([encoder.encode(data)])\n          .stream()\n          .pipeThrough(new (window as unknown).CompressionStream('gzip'))\n      );\n      const _compressed = await stream.arrayBuffer();\n      return btoa(String.fromCharCode(...new Uint8Array(_compressed)));\n    }\n    return data; // Return uncompressed if API not available\n  }\n\n  private async decompress(data: string): Promise<string> {\n    try {\n      // Validate base64 input\n      if (!data || typeof data !== 'string') {\n        logger.warn('[SecureStorage] Invalid data for decompression');\n        return '';\n      }\n      \n      // Check if data is already decompressed (not base64)\n      if (!this.isBase64(data)) {\n        return data;\n      }\n      \n      // Decompress using browser's DecompressionStream API if available\n      if ('DecompressionStream' in window) {\n        const _compressed = Uint8Array.from(atob(data), c => c.charCodeAt(0));\n        const stream = new Response(\n          new Blob([_compressed])\n            .stream()\n            .pipeThrough(new (window as unknown).DecompressionStream('gzip'))\n        );\n        const decompressed = await stream.text();\n        return decompressed;\n      }\n      return data; // Return as-is if API not available\n    } catch (_error) {\n      logger.error('[SecureStorage] Decompression failed:');\n      return ''; // Return empty string instead of throwing\n    }\n  }\n\n  private isBase64(str: string): boolean {\n    try {\n      // Basic base64 validation\n      return btoa(atob(_str)) === str;\n    } catch {\n      return false;\n    }\n  }\n\n  private async checkStorageQuota(): Promise<void> {\n    const info = await this.getStorageInfo();\n    if (info.available < 1024 * 1024) { // Less than 1MB available\n      // Clean up old items\n      await this.cleanupOldItems();\n      \n      // Check again\n      const newInfo = await this.getStorageInfo();\n      if (newInfo.available < 1024 * 1024) {\n        throw new Error('Storage quota exceeded');\n      }\n    }\n  }\n\n  private async cleanupExpiredItems(): Promise<void> {\n    const keys = await this.getAllKeys();\n    for (const key of keys) {\n      const _item = await this.getItem(key);\n      // getItem automatically removes expired items\n    }\n  }\n\n  private async cleanupOldItems(): Promise<void> {\n    // Remove items older than 30 days that aren't marked as persistent\n    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n    const keys = await this.getAllKeys();\n    \n    for (const key of keys) {\n      const _storageKey = this.getStorageKey(key);\n      const _stored = localStorage.getItem(_storageKey);\n      if (_stored) {\n        const item = JSON.parse(_stored) as StorageItem;\n        if (new Date(item.metadata.created) < thirtyDaysAgo) {\n          await this.removeItem(key);\n        }\n      }\n    }\n  }\n\n  private setupStorageQuotaHandling(): void {\n    window.addEventListener('storage', (event) => {\n      if (event.key && event.key.startsWith(this.STORAGE_PREFIX)) {\n        // Invalidate memory cache for changed items\n        const key = event.key.replace(this.STORAGE_PREFIX, '');\n        this.memoryCache.delete(key);\n      }\n    });\n  }\n\n  private logStorageEvent(\n    action: string,\n    key: string,\n    details?: Record<string, any>\n  ): void {\n    // In production, this would log to audit service\n    logger.debug(`Storage ${action}: ${key}`, 'SecureStorage', details);\n  }\n\n  /**\n   * IndexedDB fallback methods for larger data\n   */\n  private async storeInIndexedDB(key: string, value: StorageItem): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open('SecureStorage', 1);\n      \n      request.onerror = () => reject(request.error);\n      \n      request.onsuccess = () => {\n        const db = request.result;\n        const transaction = db.transaction(['items'], 'readwrite');\n        const store = transaction.objectStore('items');\n        store.put({ key, value });\n        \n        transaction.oncomplete = () => {\n          db.close();\n          resolve();\n        };\n        \n        transaction.onerror = () => {\n          db.close();\n          reject(transaction.error);\n        };\n      };\n      \n      request.onupgradeneeded = () => {\n        const db = request.result;\n        if (!db.objectStoreNames.contains('items')) {\n          db.createObjectStore('items', { keyPath: 'key' });\n        }\n      };\n    });\n  }\n\n  private async getFromIndexedDB(key: string): Promise<StorageItem | null> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open('SecureStorage', 1);\n      \n      request.onerror = () => reject(request.error);\n      \n      request.onsuccess = () => {\n        const db = request.result;\n        \n        if (!db.objectStoreNames.contains('items')) {\n          db.close();\n          resolve(null);\n          return;\n        }\n        \n        const transaction = db.transaction(['items'], 'readonly');\n        const store = transaction.objectStore('items');\n        const getRequest = store.get(key);\n        \n        getRequest.onsuccess = () => {\n          db.close();\n          resolve(getRequest.result?.value || null);\n        };\n        \n        getRequest.onerror = () => {\n          db.close();\n          reject(getRequest.error);\n        };\n      };\n    });\n  }\n\n  private async removeFromIndexedDB(key: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open('SecureStorage', 1);\n      \n      request.onerror = () => reject(request.error);\n      \n      request.onsuccess = () => {\n        const db = request.result;\n        \n        if (!db.objectStoreNames.contains('items')) {\n          db.close();\n          resolve();\n          return;\n        }\n        \n        const transaction = db.transaction(['items'], 'readwrite');\n        const store = transaction.objectStore('items');\n        store.delete(key);\n        \n        transaction.oncomplete = () => {\n          db.close();\n          resolve();\n        };\n        \n        transaction.onerror = () => {\n          db.close();\n          reject(transaction.error);\n        };\n      };\n    });\n  }\n\n  private async getKeysFromIndexedDB(): Promise<string[]> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open('SecureStorage', 1);\n      \n      request.onerror = () => reject(request.error);\n      \n      request.onsuccess = () => {\n        const db = request.result;\n        \n        if (!db.objectStoreNames.contains('items')) {\n          db.close();\n          resolve([]);\n          return;\n        }\n        \n        const transaction = db.transaction(['items'], 'readonly');\n        const store = transaction.objectStore('items');\n        const getAllKeysRequest = store.getAllKeys();\n        \n        getAllKeysRequest.onsuccess = () => {\n          db.close();\n          resolve(getAllKeysRequest.result as string[]);\n        };\n        \n        getAllKeysRequest.onerror = () => {\n          db.close();\n          reject(getAllKeysRequest.error);\n        };\n      };\n    });\n  }\n\n  private async clearIndexedDB(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const deleteRequest = indexedDB.deleteDatabase('SecureStorage');\n      deleteRequest.onsuccess = () => resolve();\n      deleteRequest.onerror = () => reject(deleteRequest.error);\n    });\n  }\n}\n\nexport const secureStorage = SecureStorageService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\security\\securityHeaders.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":406,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":406,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '../../utils/logger';\n\n/**\n * Security Headers Service\n * Implements comprehensive security headers for XSS, CSRF, and other attack prevention\n * OWASP compliant security header implementation\n */\n\nexport interface SecurityHeadersConfig {\n  csp: ContentSecurityPolicyConfig;\n  hsts: HSTSConfig;\n  cors: CORSConfig;\n  referrerPolicy: string;\n  xContentTypeOptions: string;\n  xFrameOptions: string;\n  xXSSProtection: string;\n  permissionsPolicy: string;\n}\n\ninterface ContentSecurityPolicyConfig {\n  defaultSrc: string[];\n  scriptSrc: string[];\n  styleSrc: string[];\n  imgSrc: string[];\n  fontSrc: string[];\n  connectSrc: string[];\n  mediaSrc: string[];\n  objectSrc: string[];\n  frameSrc: string[];\n  workerSrc: string[];\n  formAction: string[];\n  frameAncestors: string[];\n  baseUri: string[];\n  manifestSrc: string[];\n  upgradeInsecureRequests?: boolean;\n  blockAllMixedContent?: boolean;\n  reportUri?: string;\n  reportTo?: string;\n}\n\ninterface HSTSConfig {\n  maxAge: number;\n  includeSubDomains: boolean;\n  preload: boolean;\n}\n\ninterface CORSConfig {\n  allowedOrigins: string[];\n  allowedMethods: string[];\n  allowedHeaders: string[];\n  exposedHeaders: string[];\n  credentials: boolean;\n  maxAge: number;\n}\n\nclass SecurityHeadersService {\n  private static instance: SecurityHeadersService;\n  private config: SecurityHeadersConfig;\n  private nonce: string = '';\n\n  private constructor() {\n    this.config = this.getDefaultConfig();\n    this.generateNonce();\n  }\n\n  static getInstance(): SecurityHeadersService {\n    if (!SecurityHeadersService.instance) {\n      SecurityHeadersService.instance = new SecurityHeadersService();\n    }\n    return SecurityHeadersService.instance;\n  }\n\n  /**\n   * Get default secure configuration\n   */\n  private getDefaultConfig(): SecurityHeadersConfig {\n    return {\n      csp: {\n        defaultSrc: [\"'self'\"],\n        scriptSrc: [\n          \"'self'\",\n          \"'strict-dynamic'\",\n          \"https://cdn.jsdelivr.net\", // For trusted CDNs only\n          \"'unsafe-inline'\", // Placeholder for dynamic nonce\n        ],\n        styleSrc: [\n          \"'self'\",\n          \"'unsafe-inline'\", // Required for styled-components, but mitigated with strict CSP\n          \"https://fonts.googleapis.com\",\n        ],\n        imgSrc: [\n          \"'self'\",\n          \"data:\",\n          \"https:\",\n          \"blob:\",\n        ],\n        fontSrc: [\n          \"'self'\",\n          \"data:\",\n          \"https://fonts.gstatic.com\",\n        ],\n        connectSrc: [\n          \"'self'\",\n          \"https://api.mentalhealth.app\", // Your API _domain\n          \"wss://api.mentalhealth.app\", // WebSocket connections\n          \"https://sentry.io\", // Error tracking\n        ],\n        mediaSrc: [\"'self'\", \"blob:\"],\n        objectSrc: [\"'none'\"],\n        frameSrc: [\"'none'\"],\n        workerSrc: [\"'self'\", \"blob:\"],\n        formAction: [\"'self'\"],\n        frameAncestors: [\"'none'\"],\n        baseUri: [\"'self'\"],\n        manifestSrc: [\"'self'\"],\n        upgradeInsecureRequests: true,\n        blockAllMixedContent: true,\n        reportUri: \"/api/csp-report\",\n        reportTo: \"csp-endpoint\",\n      },\n      hsts: {\n        maxAge: 31536000, // 1 year\n        includeSubDomains: true,\n        preload: true,\n      },\n      cors: {\n        allowedOrigins: [\n          process.env.VITE_APP_URL || 'https://mentalhealth.app',\n        ],\n        allowedMethods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n        allowedHeaders: [\n          'Content-Type',\n          'Authorization',\n          'X-CSRF-Token',\n          'X-Request-ID',\n        ],\n        exposedHeaders: ['X-Request-ID'],\n        credentials: true,\n        maxAge: 86400, // 24 hours\n      },\n      referrerPolicy: 'strict-origin-when-cross-origin',\n      xContentTypeOptions: 'nosniff',\n      xFrameOptions: 'DENY',\n      xXSSProtection: '1; mode=block',\n      permissionsPolicy: this.getPermissionsPolicy(),\n    };\n  }\n\n  /**\n   * Generate CSP nonce for inline scripts\n   */\n  generateNonce(): string {\n    const array = new Uint8Array(16);\n    crypto.getRandomValues(_array);\n    this.nonce = btoa(String.fromCharCode(...array));\n    return this.nonce;\n  }\n\n  /**\n   * Get current nonce\n   */\n  getNonce(): string {\n    return this.nonce;\n  }\n\n  /**\n   * Build Content Security Policy header\n   */\n  buildCSP(forMetaTag: boolean = false): string {\n    const { csp } = this.config;\n    const directives: string[] = [];\n\n    // Process each CSP directive\n    const processDirective = (name: string, values: unknown[]): string => {\n      const processedValues = values.map(value => {\n        if (typeof value === 'function') {\n          return value({ nonce: this.nonce });\n        }\n        return value;\n      });\n      return `${name} ${processedValues.join(' ')}`;\n    };\n\n    // Build directives\n    if (csp.defaultSrc.length > 0) {\n      directives.push(processDirective('default-src', csp.defaultSrc));\n    }\n    if (csp.scriptSrc.length > 0) {\n      directives.push(processDirective('script-src', csp.scriptSrc));\n    }\n    if (csp.styleSrc.length > 0) {\n      directives.push(processDirective('style-src', csp.styleSrc));\n    }\n    if (csp.imgSrc.length > 0) {\n      directives.push(processDirective('img-src', csp.imgSrc));\n    }\n    if (csp.fontSrc.length > 0) {\n      directives.push(processDirective('font-src', csp.fontSrc));\n    }\n    if (csp.connectSrc.length > 0) {\n      directives.push(processDirective('connect-src', csp.connectSrc));\n    }\n    if (csp.mediaSrc.length > 0) {\n      directives.push(processDirective('media-src', csp.mediaSrc));\n    }\n    if (csp.objectSrc.length > 0) {\n      directives.push(processDirective('object-src', csp.objectSrc));\n    }\n    if (csp.frameSrc.length > 0) {\n      directives.push(processDirective('frame-src', csp.frameSrc));\n    }\n    if (csp.workerSrc.length > 0) {\n      directives.push(processDirective('worker-src', csp.workerSrc));\n    }\n    if (csp.formAction.length > 0) {\n      directives.push(processDirective('form-action', csp.formAction));\n    }\n    \n    // Only include frame-ancestors and report-uri in HTTP headers, not meta tags\n    if (!forMetaTag) {\n      if (csp.frameAncestors.length > 0) {\n        directives.push(processDirective('frame-ancestors', csp.frameAncestors));\n      }\n      // Add reporting only for HTTP headers\n      if (csp.reportUri) {\n        directives.push(`report-uri ${csp.reportUri}`);\n      }\n      if (csp.reportTo) {\n        directives.push(`report-to ${csp.reportTo}`);\n      }\n    }\n    \n    if (csp.baseUri.length > 0) {\n      directives.push(processDirective('base-uri', csp.baseUri));\n    }\n    if (csp.manifestSrc.length > 0) {\n      directives.push(processDirective('manifest-src', csp.manifestSrc));\n    }\n\n    // Add boolean directives\n    if (csp.upgradeInsecureRequests) {\n      directives.push('upgrade-insecure-requests');\n    }\n    if (csp.blockAllMixedContent) {\n      directives.push('block-all-mixed-content');\n    }\n\n    return directives.join('; ');\n  }\n\n  /**\n   * Build HSTS header\n   */\n  buildHSTS(): string {\n    const { hsts } = this.config;\n    const parts = [`max-age=${hsts.maxAge}`];\n    \n    if (hsts.includeSubDomains) {\n      parts.push('includeSubDomains');\n    }\n    if (hsts.preload) {\n      parts.push('preload');\n    }\n    \n    return parts.join('; ');\n  }\n\n  /**\n   * Build Permissions Policy header\n   */\n  private getPermissionsPolicy(): string {\n    return [\n      'accelerometer=()',\n      'ambient-light-sensor=()',\n      'autoplay=(_self)',\n      'battery=()',\n      'camera=()',\n      'cross-origin-isolated=(_self)',\n      'display-capture=()',\n      'document-_domain=()',\n      'encrypted-media=(_self)',\n      'execution-while-not-rendered=()',\n      'execution-while-out-of-viewport=()',\n      'fullscreen=(_self)',\n      'geolocation=(_self)', // May be needed for crisis location services\n      'gyroscope=()',\n      'keyboard-map=()',\n      'magnetometer=()',\n      'microphone=()',\n      'midi=()',\n      'navigation-override=()',\n      'payment=()',\n      'picture-in-picture=()',\n      'publickey-credentials-get=()',\n      'screen-wake-lock=()',\n      'sync-xhr=()',\n      'usb=()',\n      'web-share=(_self)',\n      'xr-spatial-tracking=()',\n    ].join(', ');\n  }\n\n  /**\n   * Apply security headers to fetch request\n   */\n  applyToFetch(headers: Headers): void {\n    headers.set('X-Content-Type-Options', this.config.xContentTypeOptions);\n    headers.set('X-Frame-Options', this.config.xFrameOptions);\n    headers.set('X-XSS-Protection', this.config.xXSSProtection);\n    headers.set('Referrer-Policy', this.config.referrerPolicy);\n    headers.set('Permissions-Policy', this.config.permissionsPolicy);\n    \n    // Only set HSTS for HTTPS connections\n    if (window.location.protocol === 'https:') {\n      headers.set('Strict-Transport-Security', this.buildHSTS());\n    }\n  }\n\n  /**\n   * Apply CSP meta tag to document\n   */\n  applyCSPToDocument(): void {\n    // Remove existing CSP meta tag if present\n    const existingCSP = document.querySelector('meta[http-equiv=\"Content-Security-Policy\"]');\n    if (existingCSP) {\n      existingCSP.remove();\n    }\n\n    // Create new CSP meta tag with filtered directives (no frame-ancestors or report-uri)\n    const meta = document.createElement('meta');\n    meta.httpEquiv = 'Content-Security-Policy';\n    meta.content = this.buildCSP(true); // Pass true to filter out meta-incompatible directives\n    document.head.appendChild(_meta);\n  }\n\n  /**\n   * Validate origin for CORS\n   */\n  validateOrigin(origin: string): boolean {\n    const { cors } = this.config;\n    \n    // Check if origin is in allowed list\n    if (cors.allowedOrigins.includes('*')) {\n      return true;\n    }\n    \n    return cors.allowedOrigins.some(allowed => {\n      if (allowed === origin) {\n        return true;\n      }\n      \n      // Support wildcard subdomains\n      if (allowed.startsWith('*.')) {\n        const _domain = allowed.slice(2);\n        return origin.endsWith(_domain);\n      }\n      \n      return false;\n    });\n  }\n\n  /**\n   * Get CORS headers for response\n   */\n  getCORSHeaders(origin: string, _method: string): Record<string, string> {\n    const headers: Record<string, string> = {};\n    \n    if (this.validateOrigin(_origin)) {\n      headers['Access-Control-Allow-Origin'] = origin;\n      headers['Access-Control-Allow-Methods'] = this.config.cors.allowedMethods.join(', ');\n      headers['Access-Control-Allow-Headers'] = this.config.cors.allowedHeaders.join(', ');\n      headers['Access-Control-Expose-Headers'] = this.config.cors.exposedHeaders.join(', ');\n      headers['Access-Control-Max-Age'] = this.config.cors.maxAge.toString();\n      \n      if (this.config.cors.credentials) {\n        headers['Access-Control-Allow-Credentials'] = 'true';\n      }\n    }\n    \n    return headers;\n  }\n\n  /**\n   * Report CSP violation\n   */\n  async reportViolation(violation: unknown): Promise<void> {\n    try {\n      // Log violation for analysis\n      logger.warn('CSP Violation:', violation);\n      \n      // Send to reporting endpoint\n      if (this.config.csp.reportUri) {\n        await fetch(this.config.csp.reportUri, {\n          _method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            ...violation,\n            timestamp: new Date().toISOString(),\n            userAgent: navigator.userAgent,\n            url: window.location.href,\n          }),\n        });\n      }\n    } catch (_error) {\n      logger.error('Failed to report CSP violation:');\n    }\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(updates: Partial<SecurityHeadersConfig>): void {\n    this.config = {\n      ...this.config,\n      ...updates,\n    };\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): SecurityHeadersConfig {\n    return { ...this.config };\n  }\n}\n\nexport const securityHeaders = SecurityHeadersService.getInstance();\n\n// Set up CSP violation reporting\nif (typeof window !== 'undefined') {\n  document.addEventListener('securitypolicyviolation', (e) => {\n    securityHeaders.reportViolation({\n      blockedUri: e.blockedURI,\n      columnNumber: e.columnNumber,\n      disposition: e.disposition,\n      documentUri: e.documentURI,\n      effectiveDirective: e.effectiveDirective,\n      lineNumber: e.lineNumber,\n      originalPolicy: e.originalPolicy,\n      referrer: e.referrer,\n      sample: e.sample,\n      sourceFile: e.sourceFile,\n      statusCode: e.statusCode,\n      violatedDirective: e.violatedDirective,\n    });\n  });\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\security\\securityMonitor.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[679,682],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[679,682],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2530,2533],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2530,2533],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3579,3582],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3579,3582],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":345,"column":36,"nodeType":"Literal","messageId":"unexpected","endLine":345,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":596,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":596,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17436,17439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17436,17439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":755,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":755,"endColumn":22}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Security Monitoring and Incident Response Service\n * Real-time threat detection, monitoring, and automated incident response\n * HIPAA and SOC 2 compliant security event management\n */\n\nimport { auditLogger } from './auditLogger';\nimport { rateLimiter } from './rateLimiter';\nimport { hipaaService } from '../compliance/hipaaService';\nimport { cryptoService } from './cryptoService';\nimport { logger } from '../../utils/logger';\n\ninterface SecurityEvent {\n  _id: string;\n  timestamp: Date;\n  type: SecurityEventType;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  source: string;\n  target?: string;\n  userId?: string;\n  ipAddress?: string;\n  details: Record<string, any>;\n  indicators: string[];\n  mitigated: boolean;\n  responseActions: string[];\n}\n\ntype SecurityEventType =\n  | 'unauthorized_access'\n  | 'brute_force_attack'\n  | 'sql_injection'\n  | 'xss_attack'\n  | 'csrf_attempt'\n  | 'data_breach'\n  | 'malware_detected'\n  | 'privilege_escalation'\n  | 'suspicious_activity'\n  | 'policy_violation'\n  | 'configuration_change'\n  | 'authentication_failure'\n  | 'session_hijacking'\n  | 'api_abuse'\n  | 'dos_attack';\n\ninterface ThreatIndicator {\n  pattern: string | RegExp;\n  type: SecurityEventType;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  confidence: number; // 0-1\n  description: string;\n}\n\ninterface IncidentResponse {\n  incidentId: string;\n  triggeredBy: SecurityEvent[];\n  startTime: Date;\n  endTime?: Date;\n  status: 'active' | 'contained' | 'resolved' | 'escalated';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  affectedSystems: string[];\n  affectedUsers: string[];\n  responseActions: ResponseAction[];\n  escalationLevel: number;\n  assignedTo?: string;\n  notes: string[];\n}\n\ninterface ResponseAction {\n  actionId: string;\n  type: string;\n  target: string;\n  status: 'pending' | 'in_progress' | 'completed' | 'failed';\n  executedAt?: Date;\n  result?: unknown;\n  error?: string;\n}\n\ninterface SecurityMetrics {\n  totalEvents: number;\n  eventsBySeverity: Record<string, number>;\n  eventsByType: Record<string, number>;\n  activeIncidents: number;\n  meanTimeToDetect: number; // milliseconds\n  meanTimeToRespond: number; // milliseconds\n  falsePositiveRate: number;\n  threatScore: number; // 0-100\n}\n\nclass SecurityMonitorService {\n  private static instance: SecurityMonitorService;\n  private events: Map<string, SecurityEvent> = new Map();\n  private incidents: Map<string, IncidentResponse> = new Map();\n  private threatIndicators: ThreatIndicator[] = [];\n  private baselineMetrics: Map<string, any> = new Map();\n  private anomalyThresholds: Map<string, number> = new Map();\n  private alertSubscribers: Set<(event: SecurityEvent) => void> = new Set();\n  private monitoringActive: boolean = true;\n  private readonly EVENT_RETENTION_DAYS = 90;\n  private readonly CORRELATION_WINDOW = 300000; // 5 minutes\n\n  private constructor() {\n    this.initializeMonitoring();\n  }\n\n  static getInstance(): SecurityMonitorService {\n    if (!SecurityMonitorService.instance) {\n      SecurityMonitorService.instance = new SecurityMonitorService();\n    }\n    return SecurityMonitorService.instance;\n  }\n\n  private initializeMonitoring(): void {\n    this.setupThreatIndicators();\n    this.establishBaseline();\n    this.startRealtimeMonitoring();\n    this.setupIncidentResponseAutomation();\n  }\n\n  /**\n   * Report a security event\n   */\n  async reportEvent(params: {\n    type: SecurityEventType;\n    severity: 'low' | 'medium' | 'high' | 'critical';\n    source: string;\n    target?: string;\n    userId?: string;\n    ipAddress?: string;\n    details: Record<string, any>;\n  }): Promise<SecurityEvent> {\n    const event: SecurityEvent = {\n      _id: cryptoService.generateSecureUUID(),\n      timestamp: new Date(),\n      type: params.type,\n      severity: params.severity,\n      source: params.source,\n      target: params.target,\n      userId: params.userId,\n      ipAddress: params.ipAddress,\n      details: params.details,\n      indicators: this.extractIndicators(params),\n      mitigated: false,\n      responseActions: [],\n    };\n\n    // Store event\n    this.events.set(event.id, event);\n\n    // Log to audit trail\n    await auditLogger.log({ event: 'SECURITY_ALERT',\n      userId: params.userId,\n      details: {\n        eventId: event._id,\n        type: params.type,\n        severity: params.severity,\n        source: params.source,\n      },\n      severity: params.severity === 'critical' ? 'critical' : 'warning',\n    });\n\n    // Check for correlated events\n    const correlated = this.correlateEvents(event);\n    \n    // Determine if incident response needed\n    if (this.requiresIncidentResponse(event, correlated)) {\n      await this.createIncident(event, correlated);\n    }\n\n    // Execute immediate response actions\n    await this.executeImmediateResponse(event);\n\n    // Notify subscribers\n    this.notifySubscribers(event);\n\n    // Update threat metrics\n    this.updateThreatMetrics(event);\n\n    return event;\n  }\n\n  /**\n   * Detect anomalies in system behavior\n   */\n  async detectAnomalies(metrics: Record<string, number>): Promise<{\n    anomalies: Array<{\n      metric: string;\n      value: number;\n      baseline: number;\n      deviation: number;\n      severity: string;\n    }>;\n    overallRisk: number;\n  }> {\n    const anomalies: unknown[] = [];\n    let totalRisk = 0;\n\n    for (const [metric, value] of Object.entries(metrics)) {\n      const baseline = this.baselineMetrics.get(_metric);\n      if (!baseline) continue;\n\n      const deviation = Math.abs(value - baseline) / baseline;\n      const threshold = this.anomalyThresholds.get(_metric) || 0.5;\n\n      if (deviation > threshold) {\n        const severity = deviation > threshold * 2 ? 'high' : \n                        deviation > threshold * 1.5 ? 'medium' : 'low';\n        \n        anomalies.push({\n          metric,\n          value,\n          baseline,\n          deviation,\n          severity,\n        });\n\n        totalRisk += deviation * (severity === 'high' ? 3 : severity === 'medium' ? 2 : 1);\n      }\n    }\n\n    // Report significant anomalies\n    if (anomalies.length > 0 && totalRisk > 5) {\n      await this.reportEvent({\n        type: 'suspicious_activity',\n        severity: totalRisk > 10 ? 'high' : 'medium',\n        source: 'anomaly_detection',\n        details: { anomalies, totalRisk },\n      });\n    }\n\n    return {\n      anomalies,\n      overallRisk: Math.min(100, totalRisk * 10),\n    };\n  }\n\n  /**\n   * Create and manage incident response\n   */\n  async createIncident(\n    triggerEvent: SecurityEvent,\n    correlatedEvents: SecurityEvent[] = []\n  ): Promise<IncidentResponse> {\n    const incident: IncidentResponse = {\n      incidentId: `INC-${Date.now()}-${cryptoService.generateSecureUUID().substring(0, 8)}`,\n      triggeredBy: [triggerEvent, ...correlatedEvents],\n      startTime: new Date(),\n      status: 'active',\n      severity: this.calculateIncidentSeverity(triggerEvent, correlatedEvents),\n      affectedSystems: this.identifyAffectedSystems([triggerEvent, ...correlatedEvents]),\n      affectedUsers: this.identifyAffectedUsers([triggerEvent, ...correlatedEvents]),\n      responseActions: [],\n      escalationLevel: 0,\n      notes: [`Incident created from ${triggerEvent.type} event`],\n    };\n\n    // Store incident\n    this.incidents.set(incident.incidentId, incident);\n\n    // Log incident creation\n    await auditLogger.log({ event: 'SECURITY_ALERT',\n      details: {\n        incidentId: incident.incidentId,\n        severity: incident.severity,\n        affectedUsers: incident.affectedUsers.length,\n        affectedSystems: incident.affectedSystems.length,\n      },\n      severity: 'critical',\n    });\n\n    // Execute incident response playbook\n    await this.executeIncidentPlaybook(_incident);\n\n    // Check if HIPAA breach notification required\n    if (this.requiresBreachNotification(_incident)) {\n      await this.initiateBreachNotification(_incident);\n    }\n\n    return incident;\n  }\n\n  /**\n   * Execute automated incident response\n   */\n  private async executeIncidentPlaybook(incident: IncidentResponse): Promise<void> {\n    const firstTrigger = incident.triggeredBy[0];\n    if (!firstTrigger) {\n      logger.warn('No trigger found for incident, skipping playbook execution');\n      return;\n    }\n    const playbook = this.getPlaybook(incident.severity, firstTrigger.type);\n    \n    for (const action of playbook) {\n      const responseAction: ResponseAction = {\n        actionId: cryptoService.generateSecureUUID(),\n        type: action.type,\n        target: action.target,\n        status: 'pending',\n      };\n      \n      incident.responseActions.push(responseAction);\n      \n      try {\n        responseAction.status = 'in_progress';\n        responseAction.executedAt = new Date();\n        \n        // Execute action based on type\n        switch (action.type) {\n          case 'block_ip':\n            await rateLimiter.blockIP(action.target, 'Security incident', action.duration);\n            break;\n            \n          case 'disable_account':\n            await this.disableUserAccount(action.target);\n            break;\n            \n          case 'force_logout':\n            await this.forceUserLogout(action.target);\n            break;\n            \n          case 'quarantine_data':\n            await this.quarantineData(action.target);\n            break;\n            \n          case 'notify_admin':\n            await this.notifyAdministrators(_incident);\n            break;\n            \n          case 'escalate':\n            await this.escalateIncident(_incident);\n            break;\n            \n          case 'snapshot_system':\n            await this.createSystemSnapshot();\n            break;\n            \n          default:\n            logger.warn(`Unknown response action: ${action.type}`);\n        }\n        \n        responseAction.status = 'completed';\n        responseAction.result = { success: true };\n        \n      } catch (error) {\n        responseAction.status = 'failed';\n        responseAction.undefined = false ? '[Error details unavailable]' : String(_undefined);\n        logger.error(`Failed to execute response action: ${action.type}`, error);\n      }\n    }\n  }\n\n  /**\n   * Get security metrics\n   */\n  getMetrics(): SecurityMetrics {\n    const events = Array.from(this.events.values());\n    const incidents = Array.from(this.incidents.values());\n    \n    // Calculate metrics\n    const eventsBySeverity: Record<string, number> = {};\n    const eventsByType: Record<string, number> = {};\n    \n    events.forEach(event => {\n      eventsBySeverity[event.severity] = (eventsBySeverity[event.severity] || 0) + 1;\n      eventsByType[event.type] = (eventsByType[event.type] || 0) + 1;\n    });\n    \n    // Calculate MTTD and MTTR\n    let totalDetectTime = 0;\n    let totalResponseTime = 0;\n    let detectionCount = 0;\n    let responseCount = 0;\n    \n    incidents.forEach(incident => {\n      if (incident.triggeredBy.length > 0) {\n        const firstTrigger = incident.triggeredBy[0];\n        if (!firstTrigger) return;\n        const detectTime = incident.startTime.getTime() - firstTrigger.timestamp.getTime();\n        totalDetectTime += detectTime;\n        detectionCount++;\n      }\n      \n      if (incident.endTime) {\n        const responseTime = incident.endTime.getTime() - incident.startTime.getTime();\n        totalResponseTime += responseTime;\n        responseCount++;\n      }\n    });\n    \n    // Calculate threat score (0-100)\n    const threatScore = this.calculateThreatScore(events, incidents);\n    \n    return {\n      totalEvents: events.length,\n      eventsBySeverity,\n      eventsByType,\n      activeIncidents: incidents.filter(i => i.status === 'active').length,\n      meanTimeToDetect: detectionCount > 0 ? totalDetectTime / detectionCount : 0,\n      meanTimeToRespond: responseCount > 0 ? totalResponseTime / responseCount : 0,\n      falsePositiveRate: this.calculateFalsePositiveRate(),\n      threatScore,\n    };\n  }\n\n  /**\n   * Subscribe to security alerts\n   */\n  subscribe(callback: (event: SecurityEvent) => void): () => void {\n    this.alertSubscribers.add(callback);\n    return () => this.alertSubscribers.delete(callback);\n  }\n\n  /**\n   * Private helper methods\n   */\n  private setupThreatIndicators(): void {\n    this.threatIndicators = [\n      // Authentication attacks\n      {\n        pattern: /failed_login.*5.*times/i,\n        type: 'brute_force_attack',\n        severity: 'high',\n        confidence: 0.9,\n        description: 'Multiple failed login attempts',\n      },\n      {\n        pattern: /password.*spray/i,\n        type: 'brute_force_attack',\n        severity: 'high',\n        confidence: 0.85,\n        description: 'Password spray attack detected',\n      },\n      \n      // Injection attacks\n      {\n        pattern: /sql.*injection|union.*select|drop.*table/i,\n        type: 'sql_injection',\n        severity: 'critical',\n        confidence: 0.95,\n        description: 'SQL injection attempt',\n      },\n      {\n        pattern: /<script|javascript:|onerror=/i,\n        type: 'xss_attack',\n        severity: 'high',\n        confidence: 0.9,\n        description: 'Cross-site scripting attempt',\n      },\n      \n      // Data exfiltration\n      {\n        pattern: /bulk.*export|mass.*download/i,\n        type: 'data_breach',\n        severity: 'critical',\n        confidence: 0.8,\n        description: 'Potential data exfiltration',\n      },\n      \n      // Privilege escalation\n      {\n        pattern: /admin.*access.*unauthorized|privilege.*escalation/i,\n        type: 'privilege_escalation',\n        severity: 'critical',\n        confidence: 0.9,\n        description: 'Privilege escalation attempt',\n      },\n      \n      // Session attacks\n      {\n        pattern: /session.*hijack|session.*fixation/i,\n        type: 'session_hijacking',\n        severity: 'high',\n        confidence: 0.85,\n        description: 'Session hijacking attempt',\n      },\n      \n      // API abuse\n      {\n        pattern: /rate.*limit.*exceeded|too.*many.*requests/i,\n        type: 'api_abuse',\n        severity: 'medium',\n        confidence: 0.9,\n        description: 'API rate limit abuse',\n      },\n    ];\n  }\n\n  private extractIndicators(params: unknown): string[] {\n    const indicators: string[] = [];\n    const data = JSON.stringify(params);\n    \n    for (const indicator of this.threatIndicators) {\n      if (typeof indicator.pattern === 'string') {\n        if (data.includes(indicator.pattern)) {\n          indicators.push(indicator.description);\n        }\n      } else if (indicator.pattern.test(data)) {\n        indicators.push(indicator.description);\n      }\n    }\n    \n    return indicators;\n  }\n\n  private correlateEvents(event: SecurityEvent): SecurityEvent[] {\n    const correlated: SecurityEvent[] = [];\n    const correlationWindow = Date.now() - this.CORRELATION_WINDOW;\n    \n    for (const [_id, existingEvent] of this.events) {\n      if (_id === event._id) continue;\n      \n      if (existingEvent.timestamp.getTime() > correlationWindow) {\n        // Check for correlation patterns\n        if (\n          (existingEvent.userId && existingEvent.userId === event.userId) ||\n          (existingEvent.ipAddress && existingEvent.ipAddress === event.ipAddress) ||\n          (existingEvent.target && existingEvent.target === event.target)\n        ) {\n          correlated.push(_existingEvent);\n        }\n      }\n    }\n    \n    return correlated;\n  }\n\n  private requiresIncidentResponse(\n    event: SecurityEvent,\n    correlated: SecurityEvent[]\n  ): boolean {\n    // Critical events always require response\n    if (event.severity === 'critical') return true;\n    \n    // Multiple high severity events\n    if (event.severity === 'high' && correlated.length > 2) return true;\n    \n    // Pattern of attacks\n    if (correlated.length > 5) return true;\n    \n    // Specific event types that require response\n    const criticalTypes: SecurityEventType[] = [\n      'data_breach',\n      'privilege_escalation',\n      'malware_detected',\n    ];\n    \n    return criticalTypes.includes(event.type);\n  }\n\n  private calculateIncidentSeverity(\n    trigger: SecurityEvent,\n    correlated: SecurityEvent[]\n  ): 'low' | 'medium' | 'high' | 'critical' {\n    // Start with trigger severity\n    let severityScore = this.severityToScore(trigger.severity);\n    \n    // Add correlated events\n    correlated.forEach(event => {\n      severityScore += this.severityToScore(event.severity) * 0.5;\n    });\n    \n    // Normalize and convert back\n    if (severityScore >= 4) return 'critical';\n    if (severityScore >= 3) return 'high';\n    if (severityScore >= 2) return 'medium';\n    return 'low';\n  }\n\n  private severityToScore(severity: string): number {\n    switch (severity) {\n      case 'critical': return 4;\n      case 'high': return 3;\n      case 'medium': return 2;\n      case 'low': return 1;\n      default: return 0;\n    }\n  }\n\n  private identifyAffectedSystems(events: SecurityEvent[]): string[] {\n    const systems = new Set<string>();\n    events.forEach(event => {\n      if (event.target) systems.add(event.target);\n      if (event.source) systems.add(event.source);\n    });\n    return Array.from(_systems);\n  }\n\n  private identifyAffectedUsers(events: SecurityEvent[]): string[] {\n    const users = new Set<string>();\n    events.forEach(event => {\n      if (event.userId) users.add(event.userId);\n    });\n    return Array.from(_users);\n  }\n\n  private getPlaybook(severity: string, eventType: SecurityEventType): unknown[] {\n    const playbooks: Record<string, any[]> = {\n      'critical:data_breach': [\n        { type: 'snapshot_system', target: 'all' },\n        { type: 'quarantine_data', target: 'affected' },\n        { type: 'notify_admin', target: 'all' },\n        { type: 'escalate', target: 'security_team' },\n      ],\n      'high:brute_force_attack': [\n        { type: 'block_ip', target: 'attacker', duration: 3600000 },\n        { type: 'force_logout', target: 'affected_user' },\n        { type: 'notify_admin', target: 'security' },\n      ],\n      'default': [\n        { type: 'notify_admin', target: 'security' },\n      ],\n    };\n    \n    const key = `${severity}:${eventType}`;\n    return playbooks[key] || playbooks['default'] || [];\n  }\n\n  private async executeImmediateResponse(event: SecurityEvent): Promise<void> {\n    // Immediate responses based on event type\n    switch (event.type) {\n      case 'brute_force_attack':\n        if (event.ipAddress) {\n          await rateLimiter.requireCaptcha(event.ipAddress);\n        }\n        break;\n        \n      case 'sql_injection':\n      case 'xss_attack':\n        if (event.ipAddress) {\n          await rateLimiter.blockIP(event.ipAddress, 'Attack detected', 3600000);\n        }\n        break;\n        \n      case 'data_breach':\n        // Immediate containment\n        await this.initiateEmergencyMode();\n        break;\n    }\n    \n    event.mitigated = true;\n    event.responseActions.push('immediate_response_executed');\n  }\n\n  private requiresBreachNotification(incident: IncidentResponse): boolean {\n    // Check if PHI was potentially compromised\n    const phiRelatedTypes: SecurityEventType[] = [\n      'data_breach',\n      'unauthorized_access',\n      'privilege_escalation',\n    ];\n    \n    return incident.triggeredBy.some(event => \n      phiRelatedTypes.includes(event.type) && \n      incident.affectedUsers.length > 0\n    );\n  }\n\n  private async initiateBreachNotification(incident: IncidentResponse): Promise<void> {\n    await hipaaService.reportBreach({\n      discoveredBy: 'security_monitor',\n      affectedUsers: incident.affectedUsers,\n      dataCompromised: ['potential_phi_exposure'],\n      cause: `Security incident: ${incident.incidentId}`,\n      immediateActions: incident.responseActions.map(a => a.type),\n    });\n  }\n\n  private async disableUserAccount(userId: string): Promise<void> {\n    // Implementation would disable user account\n    logger.crisis(`Disabling account due to security incident`, 'high', 'SecurityMonitor', { userId });\n  }\n\n  private async forceUserLogout(userId: string): Promise<void> {\n    // Implementation would force logout\n    logger.warn(`Forcing logout due to security incident`, 'SecurityMonitor', { userId });\n  }\n\n  private async quarantineData(target: string): Promise<void> {\n    // Implementation would quarantine data\n    logger.crisis(`Quarantining data due to security threat`, 'high', 'SecurityMonitor', { target });\n  }\n\n  private async notifyAdministrators(incident: IncidentResponse): Promise<void> {\n    // Implementation would send notifications\n    logger.crisis(`Notifying administrators about security incident`, 'critical', 'SecurityMonitor', { incidentId: incident.incidentId });\n  }\n\n  private async escalateIncident(incident: IncidentResponse): Promise<void> {\n    incident.escalationLevel++;\n    incident.notes.push(`Escalated to level ${incident.escalationLevel}`);\n  }\n\n  private async createSystemSnapshot(): Promise<void> {\n    // Implementation would create system snapshot for forensics\n    logger.info('Creating system snapshot for forensic analysis', 'SecurityMonitor');\n  }\n\n  private async initiateEmergencyMode(): Promise<void> {\n    // Emergency containment mode\n    logger.crisis('EMERGENCY MODE ACTIVATED - Containing potential breach', 'critical', 'SecurityMonitor');\n  }\n\n  private establishBaseline(): void {\n    // Establish baseline metrics for anomaly detection\n    this.baselineMetrics.set('login_attempts_per_minute', 10);\n    this.baselineMetrics.set('api_calls_per_minute', 100);\n    this.baselineMetrics.set('data_exports_per_hour', 5);\n    this.baselineMetrics.set('failed_auth_per_hour', 20);\n    this.baselineMetrics.set('new_users_per_day', 50);\n    \n    // Set anomaly thresholds\n    this.anomalyThresholds.set('login_attempts_per_minute', 2.0); // 200% deviation\n    this.anomalyThresholds.set('api_calls_per_minute', 3.0); // 300% deviation\n    this.anomalyThresholds.set('data_exports_per_hour', 5.0); // 500% deviation\n    this.anomalyThresholds.set('failed_auth_per_hour', 2.5); // 250% deviation\n    this.anomalyThresholds.set('new_users_per_day', 4.0); // 400% deviation\n  }\n\n  private startRealtimeMonitoring(): void {\n    // Start monitoring intervals\n    setInterval(() => {\n      this.performSecurityChecks();\n    }, 60000); // Every minute\n    \n    setInterval(() => {\n      this.cleanupOldEvents();\n    }, 24 * 3600000); // Daily\n  }\n\n  private async performSecurityChecks(): Promise<void> {\n    if (!this.monitoringActive) return;\n    \n    // Perform routine security checks\n    // This would integrate with various system components\n  }\n\n  private cleanupOldEvents(): void {\n    const cutoff = Date.now() - (this.EVENT_RETENTION_DAYS * 24 * 3600000);\n    \n    for (const [_id, event] of this.events) {\n      if (event.timestamp.getTime() < cutoff) {\n        this.events.delete(_id);\n      }\n    }\n  }\n\n  private setupIncidentResponseAutomation(): void {\n    // Set up automated incident response rules\n    logger.info('Incident response automation initialized', 'SecurityMonitor');\n  }\n\n  private notifySubscribers(event: SecurityEvent): void {\n    this.alertSubscribers.forEach(callback => {\n      try {\n        callback(event);\n      } catch (_error) {\n        logger.error('Alert subscriber error: ');\n      }\n    });\n  }\n\n  private updateThreatMetrics(_event: SecurityEvent): void {\n    // Update running threat metrics\n    // Implementation would update various threat indicators\n  }\n\n  private calculateThreatScore(events: SecurityEvent[], incidents: IncidentResponse[]): number {\n    let score = 0;\n    \n    // Recent events impact\n    const recentEvents = events.filter(e => \n      e.timestamp.getTime() > Date.now() - 3600000 // Last hour\n    );\n    \n    recentEvents.forEach(event => {\n      score += this.severityToScore(event.severity) * 2;\n    });\n    \n    // Active incidents impact\n    incidents.filter(i => i.status === 'active').forEach(incident => {\n      score += this.severityToScore(incident.severity) * 5;\n    });\n    \n    return Math.min(100, score);\n  }\n\n  private calculateFalsePositiveRate(): number {\n    // Simplified calculation\n    // In production, would track confirmed false positives\n    return 0.05; // 5% false positive rate\n  }\n}\n\nexport const securityMonitor = SecurityMonitorService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\security\\sessionManager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":363,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":363,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":738,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":738,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":756,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":756,"endColumn":20}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Secure Session Management Service\n * Implements HIPAA-compliant session handling with timeout, rotation, and hijacking prevention\n * Zero-trust session verification with continuous authentication\n */\n\nimport { cryptoService } from './cryptoService';\nimport { secureStorage } from './secureStorage';\nimport { auditLogger } from './auditLogger';\nimport { _rateLimiter } from './rateLimiter';\nimport { _fieldEncryption } from './fieldEncryption';\nimport { logger } from '../../utils/logger';\n\ninterface Session {\n  sessionId: string;\n  _userId: string;\n  createdAt: Date;\n  lastActivity: Date;\n  expiresAt: Date;\n  ipAddress: string;\n  userAgent: string;\n  fingerprint: string;\n  deviceId?: string;\n  location?: {\n    latitude: number;\n    longitude: number;\n    city?: string;\n    country?: string;\n  };\n  securityLevel: 'basic' | 'elevated' | 'maximum';\n  mfaVerified: boolean;\n  refreshToken?: string;\n  accessToken?: string;\n  permissions: string[];\n  metadata: {\n    loginMethod: string;\n    platform: string;\n    browser: string;\n    os: string;\n    isMobile: boolean;\n    isTrusted: boolean;\n  };\n  flags: {\n    suspicious: boolean;\n    requiresReauth: boolean;\n    readOnly: boolean;\n  };\n}\n\ninterface SessionConfig {\n  maxIdleTime: number; // milliseconds\n  absoluteTimeout: number; // milliseconds\n  renewalThreshold: number; // milliseconds before expiry to renew\n  maxConcurrentSessions: number;\n  requireMFA: boolean;\n  requireFingerprint: boolean;\n  bindToIP: boolean;\n  bindToUserAgent: boolean;\n  rotateTokens: boolean;\n}\n\ninterface SessionValidation {\n  isValid: boolean;\n  reason?: string;\n  requiresAction?: 'reauthenticate' | 'mfa' | 'logout';\n  riskScore: number;\n}\n\n// HIPAA-compliant session configurations\nconst SESSION_CONFIGS: Record<string, SessionConfig> = {\n  basic: {\n    maxIdleTime: 30 * 60 * 1000, // 30 minutes\n    absoluteTimeout: 8 * 60 * 60 * 1000, // 8 hours\n    renewalThreshold: 5 * 60 * 1000, // 5 minutes\n    maxConcurrentSessions: 3,\n    requireMFA: false,\n    requireFingerprint: true,\n    bindToIP: false,\n    bindToUserAgent: true,\n    rotateTokens: true,\n  },\n  elevated: {\n    maxIdleTime: 15 * 60 * 1000, // 15 minutes (HIPAA recommended)\n    absoluteTimeout: 4 * 60 * 60 * 1000, // 4 hours\n    renewalThreshold: 3 * 60 * 1000, // 3 minutes\n    maxConcurrentSessions: 2,\n    requireMFA: true,\n    requireFingerprint: true,\n    bindToIP: true,\n    bindToUserAgent: true,\n    rotateTokens: true,\n  },\n  maximum: {\n    maxIdleTime: 10 * 60 * 1000, // 10 minutes\n    absoluteTimeout: 2 * 60 * 60 * 1000, // 2 hours\n    renewalThreshold: 2 * 60 * 1000, // 2 minutes\n    maxConcurrentSessions: 1,\n    requireMFA: true,\n    requireFingerprint: true,\n    bindToIP: true,\n    bindToUserAgent: true,\n    rotateTokens: true,\n  },\n};\n\nclass SessionManagerService {\n  private static instance: SessionManagerService;\n  private sessions: Map<string, Session> = new Map();\n  private userSessions: Map<string, Set<string>> = new Map();\n  private blacklistedTokens: Set<string> = new Set();\n  private sessionFingerprints: Map<string, string> = new Map();\n  private suspiciousActivities: Map<string, number> = new Map();\n  private readonly SESSION_STORAGE_KEY = 'secure_sessions';\n  private readonly TOKEN_ROTATION_INTERVAL = 15 * 60 * 1000; // 15 minutes\n\n  private constructor() {\n    this.initializeSessionManager();\n  }\n\n  static getInstance(): SessionManagerService {\n    if (!SessionManagerService.instance) {\n      SessionManagerService.instance = new SessionManagerService();\n    }\n    return SessionManagerService.instance;\n  }\n\n  private async initializeSessionManager(): Promise<void> {\n    await this.loadSessions();\n    this.startSessionMonitoring();\n    this.setupTokenRotation();\n  }\n\n  /**\n   * Create a new session\n   */\n  async createSession(params: {\n    _userId: string;\n    ipAddress: string;\n    userAgent: string;\n    loginMethod: string;\n    mfaVerified?: boolean;\n    location?: unknown;\n    deviceId?: string;\n  }): Promise<Session> {\n    try {\n      // Check concurrent session limit\n      await this.enforceSessionLimits(params._userId);\n\n      // Generate secure session ID\n      const sessionId = await this.generateSessionId(params._userId);\n      \n      // Generate browser fingerprint\n      const fingerprint = await this.generateFingerprint(params.userAgent, params.ipAddress);\n      \n      // Parse user agent\n      const metadata = this.parseUserAgent(params.userAgent);\n      \n      // Determine security level based on context\n      const securityLevel = this.determineSecurityLevel(_params);\n      \n      // Get configuration\n      const config = SESSION_CONFIGS[securityLevel];\n      if (!config) {\n        throw new Error(`Invalid security level: ${securityLevel}`);\n      }\n      \n      // Create session\n      const session: Session = {\n        sessionId,\n        _userId: params._userId,\n        createdAt: new Date(),\n        lastActivity: new Date(),\n        expiresAt: new Date(Date.now() + config.absoluteTimeout),\n        ipAddress: params.ipAddress,\n        userAgent: params.userAgent,\n        fingerprint,\n        deviceId: params.deviceId,\n        location: params.location,\n        securityLevel,\n        mfaVerified: params.mfaVerified || false,\n        permissions: await this.getUserPermissions(params._userId),\n        metadata: {\n          ...metadata,\n          loginMethod: params.loginMethod,\n        },\n        flags: {\n          suspicious: false,\n          requiresReauth: false,\n          readOnly: false,\n        },\n      };\n\n      // Generate tokens\n      const tokens = await this.generateTokens(session);\n      session.accessToken = tokens.accessToken;\n      session.refreshToken = tokens.refreshToken;\n\n      // Store session\n      await this.storeSession(session);\n\n      // Log session creation\n      await auditLogger.log({\n        event: 'USER_LOGIN',\n        _userId: params._userId,\n        details: {\n          sessionId,\n          loginMethod: params.loginMethod,\n          securityLevel,\n          mfaVerified: session.mfaVerified,\n          ipAddress: params.ipAddress,\n        },\n        severity: 'info',\n      });\n\n      return session;\n    } catch (error) {\n      await auditLogger.log({\n        event: 'LOGIN_FAILED',\n        _userId: params._userId,\n        details: {\n          error: error instanceof Error ? error.message : String(error),\n        },\n        severity: 'warning',\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Validate an existing session\n   */\n  async validateSession(\n    sessionId: string,\n    request?: {\n      ipAddress?: string;\n      userAgent?: string;\n      fingerprint?: string;\n    }\n  ): Promise<SessionValidation> {\n    try {\n      const session = this.sessions.get(sessionId);\n      \n      if (!session) {\n        return {\n          isValid: false,\n          reason: 'Session not found',\n          requiresAction: 'reauthenticate',\n          riskScore: 100,\n        };\n      }\n\n      // Check if session is blacklisted\n      if (this.blacklistedTokens.has(sessionId)) {\n        return {\n          isValid: false,\n          reason: 'Session has been revoked',\n          requiresAction: 'reauthenticate',\n          riskScore: 100,\n        };\n      }\n\n      const config = SESSION_CONFIGS[session.securityLevel];\n      if (!config) {\n        throw new Error(`Invalid security level: ${session.securityLevel}`);\n      }\n      const now = new Date();\n\n      // Check absolute timeout\n      if (now > session.expiresAt) {\n        await this.terminateSession(sessionId, 'Absolute timeout');\n        return {\n          isValid: false,\n          reason: 'Session expired',\n          requiresAction: 'reauthenticate',\n          riskScore: 0,\n        };\n      }\n\n      // Check idle timeout\n      const idleTime = now.getTime() - session.lastActivity.getTime();\n      if (idleTime > config.maxIdleTime) {\n        await this.terminateSession(sessionId, 'Idle timeout');\n        return {\n          isValid: false,\n          reason: 'Session idle timeout',\n          requiresAction: 'reauthenticate',\n          riskScore: 0,\n        };\n      }\n\n      // Validate request context if provided\n      let riskScore = 0;\n      \n      if (request) {\n        // Check IP binding\n        if (config.bindToIP && request.ipAddress && request.ipAddress !== session.ipAddress) {\n          riskScore += 50;\n          this.recordSuspiciousActivity(sessionId, 'IP mismatch');\n          \n          if (session.securityLevel === 'maximum') {\n            await this.terminateSession(sessionId, 'IP address changed');\n            return {\n              isValid: false,\n              reason: 'IP address mismatch',\n              requiresAction: 'reauthenticate',\n              riskScore: 100,\n            };\n          }\n        }\n\n        // Check user agent binding\n        if (config.bindToUserAgent && request.userAgent && request.userAgent !== session.userAgent) {\n          riskScore += 30;\n          this.recordSuspiciousActivity(sessionId, 'User agent mismatch');\n        }\n\n        // Check fingerprint\n        if (config.requireFingerprint && request.fingerprint && request.fingerprint !== session.fingerprint) {\n          riskScore += 40;\n          this.recordSuspiciousActivity(sessionId, 'Fingerprint mismatch');\n          \n          if (riskScore > 50) {\n            session.flags.requiresReauth = true;\n          }\n        }\n      }\n\n      // Check if MFA is required but not verified\n      if (config.requireMFA && !session.mfaVerified) {\n        return {\n          isValid: false,\n          reason: 'MFA verification required',\n          requiresAction: 'mfa',\n          riskScore: 50,\n        };\n      }\n\n      // Check suspicious activity threshold\n      const suspiciousCount = this.suspiciousActivities.get(sessionId) || 0;\n      if (suspiciousCount > 5) {\n        await this.terminateSession(sessionId, 'Suspicious activity detected');\n        return {\n          isValid: false,\n          reason: 'Suspicious activity detected',\n          requiresAction: 'reauthenticate',\n          riskScore: 100,\n        };\n      }\n\n      // Update last activity\n      session.lastActivity = now;\n      \n      // Check if session needs renewal\n      const timeToExpiry = session.expiresAt.getTime() - now.getTime();\n      if (timeToExpiry < config.renewalThreshold) {\n        await this.renewSession(sessionId);\n      }\n\n      return {\n        isValid: true,\n        riskScore,\n      };\n    } catch (_error) {\n      logger.error('Session validation error: ');\n      return {\n        isValid: false,\n        reason: 'Validation undefined',\n        requiresAction: 'reauthenticate',\n        riskScore: 100,\n      };\n    }\n  }\n\n  /**\n   * Renew a session\n   */\n  async renewSession(sessionId: string): Promise<Session | null> {\n    const session = this.sessions.get(sessionId);\n    if (!session) return null;\n\n    const config = SESSION_CONFIGS[session.securityLevel];\n    if (!config) {\n      throw new Error(`Invalid security level: ${session.securityLevel}`);\n    }\n    \n    // Extend expiration\n    session.expiresAt = new Date(Date.now() + config.absoluteTimeout);\n    \n    // Rotate tokens if configured\n    if (config.rotateTokens) {\n      const tokens = await this.generateTokens(session);\n      \n      // Blacklist old tokens\n      if (session.accessToken) this.blacklistedTokens.add(session.accessToken);\n      if (session.refreshToken) this.blacklistedTokens.add(session.refreshToken);\n      \n      session.accessToken = tokens.accessToken;\n      session.refreshToken = tokens.refreshToken;\n    }\n    \n    // Update session\n    await this.storeSession(session);\n    \n    // Log renewal\n    await auditLogger.log({\n      event: 'DATA_MODIFICATION',\n      _userId: session._userId,\n      details: {\n        sessionId,\n        action: 'session_renewed',\n        expiresAt: session.expiresAt,\n      },\n      severity: 'info',\n    });\n    \n    return session;\n  }\n\n  /**\n   * Terminate a session\n   */\n  async terminateSession(sessionId: string, reason: string): Promise<void> {\n    const session = this.sessions.get(sessionId);\n    if (!session) return;\n\n    // Blacklist tokens\n    if (session.accessToken) this.blacklistedTokens.add(session.accessToken);\n    if (session.refreshToken) this.blacklistedTokens.add(session.refreshToken);\n    \n    // Remove from maps\n    this.sessions.delete(sessionId);\n    const userSessions = this.userSessions.get(session._userId);\n    if (_userSessions) {\n      userSessions.delete(sessionId);\n    }\n    \n    // Clear suspicious activity\n    this.suspiciousActivities.delete(sessionId);\n    \n    // Log termination\n    await auditLogger.log({\n      event: 'USER_LOGOUT',\n      _userId: session._userId,\n      details: {\n        sessionId,\n        reason,\n        duration: Date.now() - session.createdAt.getTime(),\n      },\n      severity: 'info',\n    });\n    \n    // Persist changes\n    await this.persistSessions();\n  }\n\n  /**\n   * Terminate all sessions for a user\n   */\n  async terminateUserSessions(_userId: string, reason: string): Promise<void> {\n    const sessionIds = this.userSessions.get(_userId);\n    if (!sessionIds) return;\n    \n    for (const sessionId of sessionIds) {\n      await this.terminateSession(sessionId, reason);\n    }\n    \n    this.userSessions.delete(_userId);\n  }\n\n  /**\n   * Elevate session security level\n   */\n  async elevateSession(\n    sessionId: string,\n    newLevel: 'elevated' | 'maximum',\n    mfaToken?: string\n  ): Promise<boolean> {\n    const session = this.sessions.get(sessionId);\n    if (!session) return false;\n    \n    // Verify MFA if required\n    if (SESSION_CONFIGS[newLevel]?.requireMFA && !mfaToken) {\n      return false;\n    }\n    \n    // Update session\n    session.securityLevel = newLevel;\n    session.mfaVerified = true;\n    \n    // Apply new configuration\n    const config = SESSION_CONFIGS[newLevel];\n    if (!config) {\n      throw new Error(`Invalid security level: ${newLevel}`);\n    }\n    session.expiresAt = new Date(\n      Math.min(\n        session.createdAt.getTime() + config.absoluteTimeout,\n        session.expiresAt.getTime()\n      )\n    );\n    \n    await this.storeSession(session);\n    \n    // Log elevation\n    await auditLogger.log({\n      event: 'PERMISSION_GRANTED',\n      _userId: session._userId,\n      details: {\n        sessionId,\n        action: 'session_elevated',\n        newLevel,\n      },\n      severity: 'info',\n    });\n    \n    return true;\n  }\n\n  /**\n   * Get active sessions for a user\n   */\n  async getUserSessions(_userId: string): Promise<Session[]> {\n    const sessionIds = this.userSessions.get(_userId);\n    if (!sessionIds) return [];\n    \n    const sessions: Session[] = [];\n    for (const sessionId of sessionIds) {\n      const session = this.sessions.get(sessionId);\n      if (session) {\n        // Sanitize sensitive _data\n        const sanitized = { ...session };\n        delete sanitized.accessToken;\n        delete sanitized.refreshToken;\n        sessions.push(_sanitized);\n      }\n    }\n    \n    return sessions;\n  }\n\n  /**\n   * Get session statistics\n   */\n  getStatistics(): {\n    totalSessions: number;\n    activeUsers: number;\n    averageSessionDuration: number;\n    sessionsBySecurityLevel: Record<string, number>;\n    suspiciousSessions: number;\n  } {\n    const sessions = Array.from(this.sessions.values());\n    const now = Date.now();\n    \n    const sessionsByLevel: Record<string, number> = {\n      basic: 0,\n      elevated: 0,\n      maximum: 0,\n    };\n    \n    let totalDuration = 0;\n    let suspiciousCount = 0;\n    \n    sessions.forEach(session => {\n      if (sessionsByLevel[session.securityLevel] !== undefined) {\n        sessionsByLevel[session.securityLevel]!++;\n      }\n      totalDuration += now - session.createdAt.getTime();\n      if (session.flags.suspicious) suspiciousCount++;\n    });\n    \n    return {\n      totalSessions: sessions.length,\n      activeUsers: this.userSessions.size,\n      averageSessionDuration: sessions.length > 0 ? totalDuration / sessions.length : 0,\n      sessionsBySecurityLevel: sessionsByLevel,\n      suspiciousSessions: suspiciousCount,\n    };\n  }\n\n  /**\n   * Private helper methods\n   */\n  private async generateSessionId(_userId: string): Promise<string> {\n    const timestamp = Date.now().toString(36);\n    const random = cryptoService.generateSecureUUID();\n    const hash = await cryptoService.sha256(`${_userId}:${timestamp}:${random}`);\n    return `sess_${timestamp}_${hash.substring(0, 32)}`;\n  }\n\n  private async generateFingerprint(userAgent: string, ipAddress: string): Promise<string> {\n    const _data = `${userAgent}:${ipAddress}:${navigator.language || ''}:${screen.width}x${screen.height}`;\n    return await cryptoService.sha256(_data);\n  }\n\n  private parseUserAgent(userAgent: string): unknown {\n    // Simple user agent parsing\n    const isMobile = /mobile|android|iphone|ipad/i.test(userAgent);\n    const browser = userAgent.match(/(chrome|firefox|safari|edge|opera)/i)?.[0] || 'unknown';\n    const os = userAgent.match(/(windows|mac|linux|android|ios)/i)?.[0] || 'unknown';\n    const platform = isMobile ? 'mobile' : 'desktop';\n    \n    return {\n      platform,\n      browser: browser.toLowerCase(),\n      os: os.toLowerCase(),\n      isMobile,\n      isTrusted: !userAgent.includes('bot') && !userAgent.includes('crawler'),\n    };\n  }\n\n  private determineSecurityLevel(params: unknown): 'basic' | 'elevated' | 'maximum' {\n    // Determine based on context\n    if (params.loginMethod === 'emergency') {\n      return 'basic'; // Allow quick access in emergencies\n    }\n    \n    if (params.mfaVerified) {\n      return 'elevated';\n    }\n    \n    // Check if accessing sensitive data\n    if (params.requestedResources?.includes('phi')) {\n      return 'maximum';\n    }\n    \n    return 'basic';\n  }\n\n  private async getUserPermissions(_userId: string): Promise<string[]> {\n    // In production, fetch from RBAC system\n    return ['read', 'write'];\n  }\n\n  private async generateTokens(session: Session): Promise<{\n    accessToken: string;\n    refreshToken: string;\n  }> {\n    const _accessPayload = {\n      sessionId: session.sessionId,\n      _userId: session._userId,\n      type: 'access',\n      exp: Date.now() + 15 * 60 * 1000, // 15 minutes\n    };\n    \n    const _refreshPayload = {\n      sessionId: session.sessionId,\n      _userId: session._userId,\n      type: 'refresh',\n      exp: session.expiresAt.getTime(),\n    };\n    \n    const accessToken = await this.encodeToken(_accessPayload);\n    const refreshToken = await this.encodeToken(_refreshPayload);\n    \n    return { accessToken, refreshToken };\n  }\n\n  private async encodeToken(_payload: unknown): Promise<string> {\n    const _header = { alg: 'HS256', typ: 'JWT' };\n    const encodedHeader = btoa(JSON.stringify(_header));\n    const encodedPayload = btoa(JSON.stringify(_payload));\n    const signature = await cryptoService.signData(`${encodedHeader}.${encodedPayload}`);\n    return `${encodedHeader}.${encodedPayload}.${signature}`;\n  }\n\n  private async enforceSessionLimits(_userId: string): Promise<void> {\n    const userSessions = this.userSessions.get(_userId) || new Set();\n    \n    // Get maximum allowed sessions for any user\n    const maxSessions = Math.max(...Object.values(_SESSION_CONFIGS).map(c => c.maxConcurrentSessions));\n    \n    if (userSessions.size >= maxSessions) {\n      // Terminate oldest session\n      const sessions = Array.from(_userSessions)\n        .map(_id => this.sessions.get(_id))\n        .filter(s => s !== undefined)\n        .sort((a, b) => a!.createdAt.getTime() - b!.createdAt.getTime());\n      \n      if (sessions.length > 0 && sessions[0]) {\n        await this.terminateSession(sessions[0].sessionId, 'Session limit exceeded');\n      }\n    }\n  }\n\n  private recordSuspiciousActivity(sessionId: string, activity: string): void {\n    const count = this.suspiciousActivities.get(sessionId) || 0;\n    this.suspiciousActivities.set(sessionId, count + 1);\n    \n    const session = this.sessions.get(sessionId);\n    if (session) {\n      session.flags.suspicious = true;\n    }\n    \n    logger.warn(`Suspicious activity on session ${sessionId}: ${activity}`);\n  }\n\n  private async storeSession(session: Session): Promise<void> {\n    this.sessions.set(session.sessionId, session);\n    \n    // Update user sessions map\n    if (!this.userSessions.has(session._userId)) {\n      this.userSessions.set(session._userId, new Set());\n    }\n    this.userSessions.get(session.userId)!.add(session.sessionId);\n    \n    // Store fingerprint\n    this.sessionFingerprints.set(session.sessionId, session.fingerprint);\n    \n    // Persist to storage\n    await this.persistSessions();\n  }\n\n  private async loadSessions(): Promise<void> {\n    try {\n      const stored = await secureStorage.getItem(this.SESSION_STORAGE_KEY);\n      if (stored && Array.isArray(_stored)) {\n        // Restore sessions\n        for (const sessionData of stored) {\n          const session = {\n            ...sessionData,\n            createdAt: new Date(sessionData.createdAt),\n            lastActivity: new Date(sessionData.lastActivity),\n            expiresAt: new Date(sessionData.expiresAt),\n          };\n          \n          // Validate session is still valid\n          const validation = await this.validateSession(session.sessionId);\n          if (validation.isValid) {\n            this.sessions.set(session.sessionId, session);\n            \n            if (!this.userSessions.has(session._userId)) {\n              this.userSessions.set(session._userId, new Set());\n            }\n            this.userSessions.get(session.userId)!.add(session.sessionId);\n          }\n        }\n      }\n    } catch (_error) {\n      logger.error('Failed to load sessions:');\n    }\n  }\n\n  private async persistSessions(): Promise<void> {\n    try {\n      const sessions = Array.from(this.sessions.values()).map(session => ({\n        ...session,\n        // Don't persist tokens in storage\n        accessToken: undefined,\n        refreshToken: undefined,\n      }));\n      \n      await secureStorage.setItem(this.SESSION_STORAGE_KEY, sessions, {\n        encrypted: true,\n        expires: new Date(Date.now() + 24 * 3600000), // 24 hours\n      });\n    } catch (_error) {\n      logger.error('Failed to persist sessions:');\n    }\n  }\n\n  private startSessionMonitoring(): void {\n    // Check sessions every minute\n    setInterval(() => {\n      this.cleanupExpiredSessions();\n    }, 60000);\n    \n    // Clean blacklisted tokens every hour\n    setInterval(() => {\n      this.cleanupBlacklistedTokens();\n    }, 3600000);\n  }\n\n  private async cleanupExpiredSessions(): Promise<void> {\n    const now = Date.now();\n    \n    for (const [sessionId, session] of this.sessions) {\n      const config = SESSION_CONFIGS[session.securityLevel];\n      if (!config) continue; // Skip invalid sessions\n      const idleTime = now - session.lastActivity.getTime();\n      \n      if (now > session.expiresAt.getTime() || idleTime > config.maxIdleTime) {\n        await this.terminateSession(sessionId, 'Session expired');\n      }\n    }\n  }\n\n  private cleanupBlacklistedTokens(): void {\n    // In production, would check token expiration times\n    // For now, clear tokens older than 24 hours\n    if (this.blacklistedTokens.size > 10000) {\n      this.blacklistedTokens.clear();\n    }\n  }\n\n  private setupTokenRotation(): void {\n    setInterval(async () => {\n      for (const [sessionId, session] of this.sessions) {\n        const config = SESSION_CONFIGS[session.securityLevel];\n        if (config?.rotateTokens) {\n          await this.renewSession(sessionId);\n        }\n      }\n    }, this.TOKEN_ROTATION_INTERVAL);\n  }\n}\n\nexport const sessionManager = SessionManagerService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\therapy\\therapeuticContent.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\websocket\\EnhancedWebSocketService.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":270,"column":42,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":270,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":348,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":348,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'room' is defined but never used. Allowed unused args must match /^_/u.","line":441,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":441,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":916,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":916,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":980,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":980,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":997,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":997,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":1009,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":1009,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":1124,"column":37,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":1124,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":1131,"column":38,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":1131,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":1144,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":1144,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":1202,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":1202,"endColumn":20}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Enhanced WebSocket Service for Mental Health Platform\r\n * Implements comprehensive real-time communication with HIPAA compliance\r\n * Features: Crisis support, community interaction, notifications, peer support\r\n */\r\n\r\nimport { io, Socket } from 'socket.io-client';\r\nimport { secureStorage } from '../security/SecureLocalStorage';\r\nimport { logger } from '../../utils/logger';\r\n\r\n// Connection state interface\r\ninterface ConnectionState {\r\n  isConnected: boolean;\r\n  reconnectAttempts: number;\r\n  latency: number;\r\n  connectionQuality: 'excellent' | 'good' | 'fair' | 'poor';\r\n  lastSuccessfulMessage: Date;\r\n  lastError?: Error;\r\n  messagesQueued: number;\r\n  dataUsage: {\r\n    sent: number;\r\n    received: number;\r\n    session: number;\r\n  };\r\n}\r\n\r\n// Enhanced WebSocket Configuration\r\nconst WS_CONFIG = {\r\n  url: import.meta.env.VITE_WS_URL || 'ws://localhost:3002',\r\n  reconnection: true,\r\n  reconnectionDelay: 1000,\r\n  reconnectionDelayMax: 5000,\r\n  reconnectionAttempts: 10,\r\n  timeout: 20000,\r\n  transports: ['websocket', 'polling'],\r\n  auth: {\r\n    token: ''\r\n  },\r\n  secure: true,\r\n  compress: true,\r\n  forceNew: false\r\n};\r\n\r\n// Comprehensive WebSocket Event Types for Mental Health Platform\r\nexport enum WSEventType {\r\n  // Connection Events\r\n  CONNECT = 'connect',\r\n  DISCONNECT = 'disconnect',\r\n  RECONNECT = 'reconnect',\r\n  ERROR = 'error',\r\n  CONNECTION_QUALITY = 'connection:quality',\r\n  \r\n  // Authentication Events\r\n  AUTH_SUCCESS = 'auth:success',\r\n  AUTH_FAILURE = 'auth:failure',\r\n  SESSION_REFRESH = 'session:refresh',\r\n  \r\n  // Crisis Events\r\n  CRISIS_ALERT = 'crisis:alert',\r\n  CRISIS_COUNSELOR_ASSIGNED = 'crisis:counselor_assigned',\r\n  CRISIS_MESSAGE = 'crisis:message',\r\n  CRISIS_SESSION_ENDED = 'crisis:session_ended',\r\n  CRISIS_ESCALATION = 'crisis:escalation',\r\n  CRISIS_TYPING = 'crisis:typing',\r\n  CRISIS_INTERVENTION = 'crisis:intervention',\r\n  CRISIS_FOLLOW_UP = 'crisis:follow_up',\r\n  \r\n  // Community Events\r\n  COMMUNITY_POST_NEW = 'community:post_new',\r\n  COMMUNITY_POST_UPDATED = 'community:post_updated',\r\n  COMMUNITY_POST_LIKED = 'community:post_liked',\r\n  COMMUNITY_COMMENT_NEW = 'community:comment_new',\r\n  COMMUNITY_USER_TYPING = 'community:user_typing',\r\n  COMMUNITY_USER_ONLINE = 'community:user_online',\r\n  COMMUNITY_USER_OFFLINE = 'community:user_offline',\r\n  COMMUNITY_MODERATION = 'community:moderation',\r\n  \r\n  // Peer Support Events\r\n  PEER_SUPPORT_REQUEST = 'peer_support:request',\r\n  PEER_SUPPORT_MATCHED = 'peer_support:matched',\r\n  PEER_SUPPORT_MESSAGE = 'peer_support:message',\r\n  PEER_SUPPORT_ENDED = 'peer_support:ended',\r\n  \r\n  // Notification Events\r\n  NOTIFICATION_APPOINTMENT = '_notification:appointment',\r\n  NOTIFICATION_MEDICATION = '_notification:medication',\r\n  NOTIFICATION_CRISIS_CHECK = '_notification:crisis_check',\r\n  NOTIFICATION_SYSTEM = '_notification:system',\r\n  NOTIFICATION_WELLNESS = '_notification:wellness',\r\n  NOTIFICATION_ACHIEVEMENT = '_notification:achievement',\r\n  NOTIFICATION_REMINDER = '_notification:reminder',\r\n  \r\n  // Presence Events\r\n  PRESENCE_UPDATE = 'presence:update',\r\n  PRESENCE_REQUEST = 'presence:request',\r\n  PRESENCE_MOOD_CHANGE = 'presence:mood_change',\r\n  \r\n  // Therapist Events\r\n  THERAPIST_AVAILABLE = 'therapist:available',\r\n  THERAPIST_BUSY = 'therapist:busy',\r\n  THERAPIST_MESSAGE = 'therapist:message',\r\n  THERAPIST_SESSION_START = 'therapist:session_start',\r\n  THERAPIST_HOMEWORK_ASSIGNED = 'therapist:homework_assigned',\r\n  \r\n  // Group Session Events\r\n  GROUP_SESSION_START = 'group:session_start',\r\n  GROUP_SESSION_END = 'group:session_end',\r\n  GROUP_USER_JOIN = 'group:user_join',\r\n  GROUP_USER_LEAVE = 'group:user_leave',\r\n  GROUP_MESSAGE = 'group:message',\r\n  GROUP_ACTIVITY_START = 'group:activity_start',\r\n  \r\n  // Wellness and Progress Events\r\n  WELLNESS_GOAL_UPDATE = 'wellness:goal_update',\r\n  WELLNESS_MILESTONE = 'wellness:milestone',\r\n  MOOD_PATTERN_ALERT = 'mood:pattern_alert',\r\n  HABIT_STREAK_UPDATE = 'habit:streak_update',\r\n  \r\n  // Real-time Analytics\r\n  ANALYTICS_UPDATE = 'analytics:update',\r\n  INSIGHTS_AVAILABLE = 'insights:available',\r\n  \r\n  // System Events\r\n  MAINTENANCE_MODE = 'system:maintenance',\r\n  FEATURE_UPDATE = 'system:feature_update',\r\n  SECURITY_ALERT = 'system:security_alert'\r\n}\r\n\r\n// Enhanced notification types for mental health platform\r\nexport enum NotificationType {\r\n  // Wellness notifications\r\n  MOOD_REMINDER = 'mood_reminder',\r\n  MEDICATION_REMINDER = 'medication_reminder',\r\n  HYDRATION_REMINDER = 'hydration_reminder',\r\n  EXERCISE_REMINDER = 'exercise_reminder',\r\n  SLEEP_REMINDER = 'sleep_reminder',\r\n  THERAPY_HOMEWORK = 'therapy_homework',\r\n  \r\n  // Crisis and safety\r\n  CRISIS_ALERT = 'crisis_alert',\r\n  SAFETY_CHECK = 'safety_check',\r\n  EMERGENCY_CONTACT = 'emergency_contact',\r\n  PROFESSIONAL_REFERRAL = 'professional_referral',\r\n  \r\n  // Community and social\r\n  NEW_COMMUNITY_POST = 'new_community_post',\r\n  POST_REPLY = 'post_reply',\r\n  POST_LIKED = 'post_liked',\r\n  SUPPORT_GROUP_INVITATION = 'support_group_invitation',\r\n  GROUP_EVENT_REMINDER = 'group_event_reminder',\r\n  PEER_SUPPORT_REQUEST = 'peer_support_request',\r\n  \r\n  // Progress and achievements\r\n  GOAL_MILESTONE = 'goal_milestone',\r\n  STREAK_ACHIEVEMENT = 'streak_achievement',\r\n  WEEKLY_PROGRESS = 'weekly_progress',\r\n  INSIGHT_AVAILABLE = 'insight_available',\r\n  \r\n  // System and updates\r\n  APP_UPDATE = 'app_update',\r\n  FEATURE_ANNOUNCEMENT = 'feature_announcement',\r\n  MAINTENANCE_NOTICE = 'maintenance_notice',\r\n  SECURITY_ALERT = 'security_alert'\r\n}\r\n\r\n// Enhanced interfaces for comprehensive mental health communication\r\nexport interface EnhancedMessage {\r\n  id: string;\r\n  content: string;\r\n  senderId: string;\r\n  timestamp: Date;\r\n  messageType: 'text' | 'image' | 'audio' | 'file' | 'emoji' | 'sticker' | 'poll' | 'crisis_alert';\r\n  metadata?: {\r\n    moodContext?: number;\r\n    isEncrypted?: boolean;\r\n    requiresResponse?: boolean;\r\n    expiresAt?: Date;\r\n    supportLevel?: 'low' | 'medium' | 'high' | 'crisis';\r\n    therapeuticCategory?: 'cbt' | 'dbt' | 'mindfulness' | 'behavioral' | 'emotional';\r\n  };\r\n  reactions?: {\r\n    userId: string;\r\n    reaction: string;\r\n    timestamp: Date;\r\n  }[];\r\n  threadId?: string;\r\n  parentMessageId?: string;\r\n}\r\n\r\nexport interface UserPresence {\r\n  userId: string;\r\n  username: string;\r\n  status: 'online' | 'away' | 'busy' | 'invisible' | 'in-crisis' | 'in-therapy';\r\n  lastSeen: Date;\r\n  currentActivity?: {\r\n    type: 'browsing' | 'journaling' | 'community' | 'therapy' | 'crisis-support';\r\n    details?: string;\r\n  };\r\n  moodStatus?: {\r\n    level: number;\r\n    emoji?: string;\r\n    isPrivate: boolean;\r\n  };\r\n  supportAvailability?: {\r\n    isPeerSupporter: boolean;\r\n    isAvailable: boolean;\r\n    expertiseAreas?: string[];\r\n  };\r\n}\r\n\r\nexport interface PeerSupportSession {\r\n  id: string;\r\n  type: 'crisis' | 'general' | 'specific';\r\n  startTime: Date;\r\n  endTime?: Date;\r\n  participants: string[];\r\n  status: 'seeking-support' | 'matched' | 'in-progress' | 'completed' | 'cancelled';\r\n  metadata?: unknown;\r\n  feedback?: {\r\n    helpful: boolean;\r\n    rating: number;\r\n    comment?: string;\r\n  };\r\n}\r\n\r\nexport interface TypingUser {\r\n  userId: string;\r\n  username: string;\r\n  timestamp: number;\r\n}\r\n\r\n\r\nexport interface QueuedMessage {\r\n  event: string;\r\n  data: unknown;\r\n  timestamp: number;\r\n  retries: number;\r\n}\r\n\r\nexport interface NotificationOptions {\r\n  icon?: string;\r\n  _priority?: 'low' | 'normal' | 'high' | 'critical';\r\n  actions?: { _action: string; title: string }[];\r\n  requireInteraction?: boolean;\r\n  celebrationEffect?: boolean;\r\n  soundType?: 'gentle' | 'urgent' | 'success' | 'none';\r\n  vibrationPattern?: number[];\r\n}\r\n\r\n/**\r\n * Enhanced WebSocket Service Class\r\n * Provides comprehensive real-time communication for mental health platform\r\n */\r\nexport class EnhancedWebSocketService {\r\n  private static instance: EnhancedWebSocketService;\r\n  private socket: Socket | null = null;\r\n  private connectionState: ConnectionState = {\r\n    isConnected: false,\r\n    reconnectAttempts: 0,\r\n    latency: 0,\r\n    connectionQuality: 'poor',\r\n    lastSuccessfulMessage: new Date(),\r\n    messagesQueued: 0,\r\n    dataUsage: {\r\n      sent: 0,\r\n      received: 0,\r\n      session: 0,\r\n    },\r\n  };\r\n  private eventHandlers: Map<string, Set<Function>> = new Map();\r\n  private typingUsers: Map<string, TypingUser> = new Map();\r\n  private messageQueue: QueuedMessage[] = [];\r\n  private heartbeatInterval: NodeJS.Timeout | null = null;\r\n  private currentUser: unknown = null;\r\n  private activeRooms: Set<string> = new Set();\r\n  \r\n  // Enhanced real-time features\r\n  private userPresences: Map<string, UserPresence> = new Map();\r\n  private notificationQueue: Notification[] = [];\r\n  private activeNotifications: Map<string, Notification> = new Map();\r\n  private messageThreads: Map<string, EnhancedMessage[]> = new Map();\r\n  private peerSupportSessions: Map<string, PeerSupportSession> = new Map();\r\n  private realTimeAnalytics = {\r\n    messagesExchanged: 0,\r\n    supportSessionsInitiated: 0,\r\n    crisisAlertsHandled: 0,\r\n    communityInteractions: 0,\r\n  };\r\n  \r\n  // Notification system\r\n  private notificationPermission: NotificationPermission = 'default';\r\n  private serviceWorker: ServiceWorker | null = null;\r\n// @ts-expect-error - PushSubscription is a global API\n  private pushSubscription: PushSubscription | null = null;\r\n\r\n  private constructor() {\r\n    this.initializeConnectionState();\r\n    this.loadQueuedMessages();\r\n    this.initializeNotificationSystem();\r\n  }\r\n\r\n  // Singleton pattern\r\n  public static getInstance(): EnhancedWebSocketService {\r\n    if (!EnhancedWebSocketService.instance) {\r\n      EnhancedWebSocketService.instance = new EnhancedWebSocketService();\r\n    }\r\n    return EnhancedWebSocketService.instance;\r\n  }\r\n\r\n  private initializeConnectionState(): void {\r\n    this.connectionState = {\r\n      isConnected: false,\r\n      reconnectAttempts: 0,\r\n      latency: 0,\r\n      connectionQuality: 'good',\r\n      lastSuccessfulMessage: new Date(),\r\n      messagesQueued: 0,\r\n      dataUsage: {\r\n        sent: 0,\r\n        received: 0,\r\n        session: 0\r\n      }\r\n    };\r\n  }\r\n  \r\n  private initializeNotificationSystem(): void {\r\n    // Initialize _notification permissions\r\n    if ('Notification' in window) {\r\n      this.notificationPermission = Notification.permission;\r\n      \r\n      if (this.notificationPermission === 'default') {\r\n        Notification.requestPermission().then(permission => {\r\n          this.notificationPermission = permission;\r\n        });\r\n      }\r\n    }\r\n    \r\n    this.loadNotificationPreferences();\r\n  }\r\n  \r\n  private loadNotificationPreferences(): void {\r\n    try {\r\n      const _prefs = secureStorage.getItem('notification_preferences');\r\n      if (_prefs) {\r\n        const preferences = JSON.parse(_prefs);\r\n        logger.debug('Loaded _notification preferences', 'EnhancedWebSocket', preferences);\r\n      }\r\n    } catch (_error) {\r\n      logger.error('Failed to load _notification preferences:');\r\n    }\r\n  }\r\n\r\n  // Initialize WebSocket connection with enhanced monitoring\r\n  public connect(token: string, user: unknown): void {\r\n    if (this.socket?.connected) {\r\n      logger.debug('WebSocket already connected', 'EnhancedWebSocket');\r\n      return;\r\n    }\r\n\r\n    this.currentUser = user;\r\n    WS_CONFIG.auth.token = token;\r\n\r\n    // Create socket connection with enhanced configuration\r\n    this.socket = io(WS_CONFIG.url, {\r\n      ...WS_CONFIG,\r\n      auth: WS_CONFIG.auth,\r\n      forceNew: false\r\n    });\r\n\r\n    this.setupEventListeners();\r\n    this.startHeartbeat();\r\n    this.startConnectionMonitoring();\r\n    \r\n    // Initialize user presence\r\n    this.updateUserPresence({\r\n      status: 'online',\r\n      currentActivity: {\r\n        type: 'browsing',\r\n        details: 'Connected to platform'\r\n      }\r\n    });\r\n  }\r\n\r\n  // Disconnect WebSocket\r\n  public disconnect(): void {\r\n    if (this.socket) {\r\n      this.stopHeartbeat();\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n      this.connectionState.isConnected = false;\r\n      this.activeRooms.clear();\r\n      this.typingUsers.clear();\r\n      \r\n      // Update presence to offline\r\n      if (this.currentUser) {\r\n        this.updateUserPresence({ status: 'invisible' });\r\n      }\r\n    }\r\n  }\r\n\r\n  private startConnectionMonitoring(): void {\r\n    setInterval(() => {\r\n      if (this.socket?.connected) {\r\n        const now = Date.now();\r\n        const timeSinceLastMessage = now - this.connectionState.lastSuccessfulMessage.getTime();\r\n        \r\n        // Update connection quality based on latency and recent activity\r\n        if (this.connectionState.latency < 100 && timeSinceLastMessage < 30000) {\r\n          this.connectionState.connectionQuality = 'excellent';\r\n        } else if (this.connectionState.latency < 300 && timeSinceLastMessage < 60000) {\r\n          this.connectionState.connectionQuality = 'good';\r\n        } else if (this.connectionState.latency < 1000) {\r\n          this.connectionState.connectionQuality = 'fair';\r\n        } else {\r\n          this.connectionState.connectionQuality = 'poor';\r\n        }\r\n        \r\n        this.emit(WSEventType.CONNECTION_QUALITY, {\r\n          quality: this.connectionState.connectionQuality,\r\n          latency: this.connectionState.latency,\r\n          messagesQueued: this.messageQueue.length\r\n        });\r\n      }\r\n    }, 10000); // Check every 10 seconds\r\n  }\r\n\r\n  // Setup comprehensive event listeners for mental health platform\r\n  private setupEventListeners(): void {\r\n    if (!this.socket) return;\r\n\r\n    // Connection events with enhanced monitoring\r\n    this.socket.on(WSEventType.CONNECT, () => {\r\n      logger.info('WebSocket connected', 'EnhancedWebSocket');\r\n      this.connectionState.isConnected = true;\r\n      this.connectionState.reconnectAttempts = 0;\r\n      this.connectionState.lastSuccessfulMessage = new Date();\r\n      this.processQueuedMessages();\r\n      this.emit(WSEventType.CONNECT, { timestamp: new Date() });\r\n      \r\n      // Rejoin rooms after reconnection\r\n      this.activeRooms.forEach(room => {\r\n        this.joinRoom(_room);\r\n      });\r\n      \r\n      // Restore user presence after reconnection\r\n      if (this.currentUser) {\r\n        this.updateUserPresence({ status: 'online' });\r\n      }\r\n      \r\n      // Send any queued notifications\r\n      this.processQueuedNotifications();\r\n    });\r\n\r\n    this.socket.on(WSEventType.DISCONNECT, (reason: unknown) => {\r\n      logger.info('WebSocket disconnected', 'EnhancedWebSocket', { reason });\r\n      this.connectionState.isConnected = false;\r\n      this.emit(WSEventType.DISCONNECT, { reason, timestamp: new Date() });\r\n    });\r\n\r\n    this.socket.on(WSEventType.ERROR, (error: unknown) => {\r\n      logger.error('WebSocket error:', error);\r\n      this.connectionState.lastError = error;\r\n      this.emit(WSEventType.ERROR, { error, timestamp: new Date() });\r\n    });\r\n\r\n    // Setup all event type listeners\r\n    this.setupAuthenticationEventListeners();\r\n    this.setupCrisisEventListeners();\r\n    this.setupCommunityEventListeners();\r\n    this.setupNotificationEventListeners();\r\n    this.setupPresenceEventListeners();\r\n    this.setupPeerSupportEventListeners();\r\n    this.setupTherapistEventListeners();\r\n    this.setupGroupEventListeners();\r\n    this.setupWellnessEventListeners();\r\n  }\r\n\r\n  private setupAuthenticationEventListeners(): void {\r\n    if (!this.socket) return;\r\n\r\n    this.socket.on(WSEventType.AUTH_SUCCESS, (data: unknown) => {\r\n      logger.info('WebSocket authentication successful', 'EnhancedWebSocket');\r\n      this.emit(WSEventType.AUTH_SUCCESS, data);\r\n    });\r\n\r\n    this.socket.on(WSEventType.AUTH_FAILURE, (data: unknown) => {\r\n      logger.error('WebSocket authentication failed:', data);\r\n      this.emit(WSEventType.AUTH_FAILURE, data);\r\n      this.disconnect();\r\n    });\r\n  }\r\n\r\n  // Crisis event listeners with comprehensive support\r\n  private setupCrisisEventListeners(): void {\r\n    if (!this.socket) return;\r\n\r\n    this.socket.on(WSEventType.CRISIS_ALERT, (data: unknown) => {\r\n      logger.crisis('Crisis alert received', 'high', 'EnhancedWebSocket', data);\r\n      this.emit(WSEventType.CRISIS_ALERT, data);\r\n      \r\n      // Auto-join crisis _room if it's for current user\r\n      if (data.userId === this.currentUser?.id) {\r\n        this.joinCrisisSession(data.sessionId);\r\n      }\r\n      \r\n      // Show critical crisis notification\r\n      this.showNotification('Crisis Support Activated', 'Immediate support is available', {\r\n        icon: '🚨',\r\n        _priority: 'critical',\r\n        requireInteraction: true,\r\n        actions: [\r\n          { _action: 'emergency', title: 'Emergency Services' },\r\n          { _action: 'crisis-chat', title: 'Crisis Chat' },\r\n          { _action: 'support', title: 'Find Support' }\r\n        ]\r\n      });\r\n    });\r\n\r\n    this.socket.on(WSEventType.CRISIS_ESCALATION, (data: unknown) => {\r\n      logger.crisis('Crisis escalated', 'critical', 'EnhancedWebSocket', data);\r\n      this.emit(WSEventType.CRISIS_ESCALATION, data);\r\n      this.handleCrisisEscalation(data);\r\n    });\r\n\r\n    this.socket.on(WSEventType.CRISIS_INTERVENTION, (data: unknown) => {\r\n      this.showNotification('Professional Support', 'A crisis counselor is joining your session', {\r\n        icon: '👨‍⚕️',\r\n        _priority: 'high',\r\n        requireInteraction: true\r\n      });\r\n      this.emit(WSEventType.CRISIS_INTERVENTION, data);\r\n    });\r\n  }\r\n\r\n  // Community event listeners with real-time updates\r\n  private setupCommunityEventListeners(): void {\r\n    if (!this.socket) return;\r\n\r\n    this.socket.on(WSEventType.COMMUNITY_POST_NEW, (data: unknown) => {\r\n      this.emit(WSEventType.COMMUNITY_POST_NEW, data);\r\n      this.realTimeAnalytics.communityInteractions++;\r\n      \r\n      this.showNotification('New Community Post', `${data.author}: \"${data.preview}\"`, {\r\n        icon: '💬',\r\n        actions: [\r\n          { _action: 'view', title: 'View Post' },\r\n          { _action: 'react', title: 'Send Support' }\r\n        ]\r\n      });\r\n    });\r\n\r\n    this.socket.on(WSEventType.COMMUNITY_POST_LIKED, (data: unknown) => {\r\n      if (data.authorId === this.currentUser?.id) {\r\n        this.showNotification('Post Appreciated', 'Someone found your post helpful', {\r\n          icon: '❤️',\r\n          soundType: 'success'\r\n        });\r\n      }\r\n    });\r\n\r\n    this.socket.on(WSEventType.COMMUNITY_MODERATION, (data: unknown) => {\r\n      if (data.userId === this.currentUser?.id) {\r\n        this.showNotification('Community Guidelines', data.message, {\r\n          icon: '⚠️',\r\n          _priority: 'high',\r\n          requireInteraction: true\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  // Enhanced notification event listeners\r\n  private setupNotificationEventListeners(): void {\r\n    if (!this.socket) return;\r\n\r\n    // Wellness notifications\r\n    this.socket.on(WSEventType.NOTIFICATION_MEDICATION, (data: unknown) => {\r\n      this.emit(WSEventType.NOTIFICATION_MEDICATION, data);\r\n      this.showNotification('Medication Reminder', data.payload.message, {\r\n        icon: '💊',\r\n        actions: [\r\n          { _action: 'taken', title: 'Taken' },\r\n          { _action: 'skip', title: 'Skip' },\r\n          { _action: 'snooze', title: 'Remind in 15m' }\r\n        ],\r\n        requireInteraction: true\r\n      });\r\n    });\r\n\r\n    this.socket.on(WSEventType.NOTIFICATION_WELLNESS, (_data: unknown) => {\r\n      this.showNotification('Wellness Check-In', 'How are you feeling right now?', {\r\n        icon: '🌈',\r\n        actions: [\r\n          { _action: 'great', title: '😄 Great' },\r\n          { _action: 'good', title: '😊 Good' },\r\n          { _action: 'okay', title: '😐 Okay' },\r\n          { _action: 'low', title: '😔 Low' }\r\n        ]\r\n      });\r\n    });\r\n\r\n    this.socket.on(WSEventType.NOTIFICATION_ACHIEVEMENT, (data: unknown) => {\r\n      this.showNotification('Achievement Unlocked!', data.title, {\r\n        icon: data.icon || '🏆',\r\n        _celebrationEffect: true,\r\n        soundType: 'success',\r\n        actions: [\r\n          { _action: 'view', title: 'View Progress' },\r\n          { _action: 'share', title: 'Share Achievement' }\r\n        ]\r\n      });\r\n    });\r\n  }\r\n\r\n  // Presence event listeners\r\n  private setupPresenceEventListeners(): void {\r\n    if (!this.socket) return;\r\n\r\n    this.socket.on(WSEventType.PRESENCE_UPDATE, (data: UserPresence) => {\r\n      this.userPresences.set(data.userId, data);\r\n      this.emit(WSEventType.PRESENCE_UPDATE, data);\r\n    });\r\n\r\n    this.socket.on(WSEventType.PRESENCE_MOOD_CHANGE, (data: unknown) => {\r\n      const presence = this.userPresences.get(data.userId);\r\n      if (presence) {\r\n        presence.moodStatus = data.moodStatus;\r\n        this.emit(WSEventType.PRESENCE_MOOD_CHANGE, data);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Peer support event listeners\r\n  private setupPeerSupportEventListeners(): void {\r\n    if (!this.socket) return;\r\n\r\n    this.socket.on(WSEventType.PEER_SUPPORT_REQUEST, (data: unknown) => {\r\n      this.showNotification('Peer Support Request', 'Someone nearby needs support', {\r\n        icon: '🤝',\r\n        _priority: 'high',\r\n        requireInteraction: true,\r\n        actions: [\r\n          { _action: 'accept', title: 'Offer Support' },\r\n          { _action: 'refer', title: 'Refer Professional' }\r\n        ]\r\n      });\r\n      this.emit(WSEventType.PEER_SUPPORT_REQUEST, data);\r\n    });\r\n\r\n    this.socket.on(WSEventType.PEER_SUPPORT_MATCHED, (data: unknown) => {\r\n      const session = this.peerSupportSessions.get(data.sessionId);\r\n      if (session) {\r\n        session.status = 'matched';\r\n        session.participants = data.participants;\r\n      }\r\n      this.emit(WSEventType.PEER_SUPPORT_MATCHED, data);\r\n    });\r\n  }\r\n\r\n  // Therapist event listeners\r\n  private setupTherapistEventListeners(): void {\r\n    if (!this.socket) return;\r\n\r\n    this.socket.on(WSEventType.THERAPIST_HOMEWORK_ASSIGNED, (data: unknown) => {\r\n      this.showNotification('New Therapy Homework', `Your therapist assigned: ${data.title}`, {\r\n        icon: '📚',\r\n        actions: [\r\n          { _action: 'view', title: 'View Assignment' },\r\n          { _action: 'schedule', title: 'Schedule Time' }\r\n        ]\r\n      });\r\n    });\r\n\r\n    this.socket.on(WSEventType.THERAPIST_SESSION_START, (_data: unknown) => {\r\n      this.showNotification('Therapy Session Starting', 'Your therapist is ready', {\r\n        icon: '👨‍⚕️',\r\n        _priority: 'high',\r\n        requireInteraction: true,\r\n        actions: [{ _action: 'join', title: 'Join Session' }]\r\n      });\r\n    });\r\n  }\r\n\r\n  // Group session event listeners\r\n  private setupGroupEventListeners(): void {\r\n    if (!this.socket) return;\r\n\r\n    this.socket.on(WSEventType.GROUP_SESSION_START, (data: unknown) => {\r\n      this.showNotification('Group Session Starting', `${data.groupName} session is beginning`, {\r\n        icon: '👥',\r\n        actions: [{ _action: 'join', title: 'Join Now' }]\r\n      });\r\n      this.joinGroupSession(data.groupId, data.sessionId);\r\n    });\r\n\r\n    this.socket.on(WSEventType.GROUP_ACTIVITY_START, (data: unknown) => {\r\n      this.showNotification('Group Activity', `${data.activityName} is starting in your group`, {\r\n        icon: '🎯',\r\n        actions: [{ _action: 'participate', title: 'Participate' }]\r\n      });\r\n    });\r\n  }\r\n\r\n  // Wellness event listeners\r\n  private setupWellnessEventListeners(): void {\r\n    if (!this.socket) return;\r\n\r\n    this.socket.on(WSEventType.WELLNESS_MILESTONE, (data: unknown) => {\r\n      this.showNotification('Wellness Milestone!', `You've reached ${data.milestone}!`, {\r\n        icon: '🎉',\r\n        _celebrationEffect: true,\r\n        soundType: 'success'\r\n      });\r\n    });\r\n\r\n    this.socket.on(WSEventType.MOOD_PATTERN_ALERT, (data: unknown) => {\r\n      this.showNotification('Mood Pattern Insight', data.insight, {\r\n        icon: '📈',\r\n        actions: [\r\n          { _action: 'view-insights', title: 'View Insights' },\r\n          { _action: 'adjust-goals', title: 'Adjust Goals' }\r\n        ]\r\n      });\r\n    });\r\n\r\n    this.socket.on(WSEventType.HABIT_STREAK_UPDATE, (data: unknown) => {\r\n      this.showNotification(`${data.habitName} Streak!`, `${data.streakCount} days strong! 🔥`, {\r\n        icon: '🔥',\r\n        soundType: 'success'\r\n      });\r\n    });\r\n  }\r\n\r\n  // Enhanced notification handling\r\n  private showNotification(title: string, message: string, options: NotificationOptions = {}): void {\r\n    const {\r\n      icon = '🔔',\r\n      _priority = 'normal',\r\n      actions = [],\r\n      requireInteraction = false,\r\n      _celebrationEffect = false,\r\n      soundType = 'gentle',\r\n      vibrationPattern\r\n    } = options;\r\n\r\n    if (!this.shouldShowNotification(_priority)) return;\r\n\r\n    const notificationId = `notification-${Date.now()}`;\r\n    const notificationData = {\r\n      id: notificationId,\r\n      title,\r\n      message,\r\n      timestamp: new Date(),\r\n      _priority,\r\n      actions,\r\n      isRead: false,\r\n      category: this.categorizeNotification(title, message)\r\n    };\r\n\r\n    this.activeNotifications.set(notificationId, notificationData as unknown);\r\n    this.saveNotificationHistory(_notificationData);\r\n\r\n    if ('Notification' in window && Notification.permission === 'granted') {\r\n      const browserNotification = new Notification(title, {\r\n        body: message,\r\n        icon: this.getNotificationIcon(icon),\r\n        badge: '/icon-72x72.png',\r\n        tag: notificationId,\r\n        requireInteraction: requireInteraction || _priority === 'critical',\r\n        silent: _priority === 'low' || soundType === 'none',\r\n        data: { notificationId, category: notificationData.category }\r\n      });\r\n\r\n      browserNotification.onclick = (event) => {\r\n        this.handleNotificationClick(notificationId, 'click', event);\r\n      };\r\n\r\n      const autoCloseDelay = this.getAutoCloseDelay(_priority);\r\n      if (autoCloseDelay > 0) {\r\n        setTimeout(() => {\r\n          browserNotification.close();\r\n          this.markNotificationAsRead(_notificationId);\r\n        }, autoCloseDelay);\r\n      }\r\n    }\r\n\r\n    if (_celebrationEffect) {\r\n      this.triggerCelebrationEffect();\r\n    }\r\n\r\n    if (vibrationPattern && 'vibrate' in navigator) {\r\n      navigator.vibrate(_vibrationPattern);\r\n    } else {\r\n      const defaultPattern = this.getVibrationPattern(_priority);\r\n      if (defaultPattern && 'vibrate' in navigator) {\r\n        navigator.vibrate(_defaultPattern);\r\n      }\r\n    }\r\n\r\n    this.playNotificationSound(_soundType);\r\n    this.emit('notification:new', notificationData);\r\n  }\r\n\r\n  // Helper methods for notification system\r\n  private shouldShowNotification(_priority: string): boolean {\r\n    if (this.notificationPermission !== 'granted') return false;\r\n\r\n    const now = new Date();\r\n    const currentTime = now.getHours() * 60 + now.getMinutes();\r\n    const quietStart = 22 * 60;\r\n    const quietEnd = 7 * 60;\r\n\r\n    const isQuietHours = currentTime >= quietStart || currentTime <= quietEnd;\r\n    if (isQuietHours && _priority !== 'critical') {\r\n      this.queueNotificationForLater({ _priority } as unknown);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private categorizeNotification(title: string, _message: string): string {\r\n    const lowerTitle = title.toLowerCase();\r\n    if (lowerTitle.includes('crisis') || lowerTitle.includes('emergency')) return 'crisis';\r\n    if (lowerTitle.includes('medication') || lowerTitle.includes('pill')) return 'medication';\r\n    if (lowerTitle.includes('appointment') || lowerTitle.includes('therapy')) return 'healthcare';\r\n    if (lowerTitle.includes('mood') || lowerTitle.includes('feeling')) return 'wellness';\r\n    if (lowerTitle.includes('community') || lowerTitle.includes('post')) return 'social';\r\n    if (lowerTitle.includes('achievement') || lowerTitle.includes('goal')) return 'progress';\r\n    return 'general';\r\n  }\r\n\r\n  private getNotificationIcon(icon: string): string {\r\n    const iconMap: Record<string, string> = {\r\n      '💊': '/icons/medication.png',\r\n      '📅': '/icons/calendar.png',\r\n      '🫂': '/icons/support.png',\r\n      '💬': '/icons/community.png',\r\n      '🏆': '/icons/achievement.png',\r\n      '🌈': '/icons/mood.png',\r\n      '🚨': '/icons/crisis.png',\r\n    };\r\n    return iconMap[icon] || '/icon-192x192.png';\r\n  }\r\n\r\n  private getAutoCloseDelay(_priority: string): number {\r\n    switch (_priority) {\r\n      case 'low': return 3000;\r\n      case 'normal': return 5000;\r\n      case 'high': return 10000;\r\n      case 'critical': return 0;\r\n      default: return 5000;\r\n    }\r\n  }\r\n\r\n  private getVibrationPattern(_priority: string): number[] | null {\r\n    switch (_priority) {\r\n      case 'low': return [100];\r\n      case 'normal': return [200, 100, 200];\r\n      case 'high': return [300, 100, 300, 100, 300];\r\n      case 'critical': return [500, 200, 500, 200, 500, 200, 500];\r\n      default: return null;\r\n    }\r\n  }\r\n\r\n  private playNotificationSound(soundType: string): void {\r\n    logger.debug(`Playing _notification sound: ${soundType}`, 'EnhancedWebSocket');\r\n  }\r\n\r\n  private triggerCelebrationEffect(): void {\r\n    this.emit('_notification:celebration', { type: 'achievement' });\r\n  }\r\n\r\n  private handleNotificationClick(notificationId: string, _action: string, _event: unknown): void {\r\n    const _notification = this.activeNotifications.get(_notificationId);\r\n    if (!_notification) return;\r\n\r\n    this.markNotificationAsRead(_notificationId);\r\n\r\n    switch (_action) {\r\n      case 'click':\r\n        window.focus();\r\n        this.emit('_notification:clicked', { notificationId, _notification });\r\n        break;\r\n      case 'taken':\r\n        this.emit('medication:taken', { notificationId, timestamp: new Date() });\r\n        break;\r\n      case 'support':\r\n        this.emit('support:requested', { notificationId, urgency: (_notification as unknown)._priority });\r\n        break;\r\n    }\r\n  }\r\n\r\n  private markNotificationAsRead(notificationId: string): void {\r\n    const _notification = this.activeNotifications.get(_notificationId);\r\n    if (_notification) {\r\n      (_notification as unknown).isRead = true;\r\n      this.emit('_notification:read', { notificationId });\r\n    }\r\n  }\r\n\r\n  private queueNotificationForLater(_notification: Notification): void {\r\n    this.notificationQueue.push(_notification);\r\n  }\r\n\r\n  private saveNotificationHistory(_notification: unknown): void {\r\n    try {\r\n      const history = JSON.parse(secureStorage.getItem('notification_history') || '[]');\r\n      history.push(_notification);\r\n      \r\n      if (history.length > 100) {\r\n        history.splice(0, history.length - 100);\r\n      }\r\n      \r\n      secureStorage.setItem('notification_history', JSON.stringify(_history));\r\n    } catch (_error) {\r\n      logger.error('Failed to save _notification to history:');\r\n    }\r\n  }\r\n\r\n  // Core WebSocket functionality\r\n  private processQueuedNotifications(): void {\r\n    const queuedNotifications = [...this.notificationQueue];\r\n    this.notificationQueue = [];\r\n    \r\n    queuedNotifications.forEach(_notification => {\r\n      if (this.shouldShowNotification((_notification as unknown)._priority)) {\r\n        this.showNotification(\r\n          (_notification as unknown).title,\r\n          (_notification as unknown).body,\r\n          { _priority: (_notification as unknown)._priority }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  // Heartbeat for connection monitoring\r\n  private startHeartbeat(): void {\r\n    this.heartbeatInterval = setInterval(() => {\r\n      if (this.socket?.connected) {\r\n        const start = Date.now();\r\n        this.socket.emit('ping', null, () => {\r\n          this.connectionState.latency = Date.now() - start;\r\n        });\r\n      }\r\n    }, 30000);\r\n  }\r\n\r\n  private stopHeartbeat(): void {\r\n    if (this.heartbeatInterval) {\r\n      clearInterval(this.heartbeatInterval);\r\n      this.heartbeatInterval = null;\r\n    }\r\n  }\r\n\r\n  // Message queue management\r\n  private queueMessage(event: string, data: unknown): void {\r\n    const _queuedMessage: QueuedMessage = {\r\n      event,\r\n      data,\r\n      timestamp: Date.now(),\r\n      retries: 0\r\n    };\r\n\r\n    this.messageQueue.push(_queuedMessage);\r\n    this.connectionState.messagesQueued = this.messageQueue.length;\r\n    this.saveQueuedMessages();\r\n  }\r\n\r\n  private async processQueuedMessages(): Promise<void> {\r\n    if (!this.socket?.connected || this.messageQueue.length === 0) return;\r\n\r\n    const messages = [...this.messageQueue];\r\n    this.messageQueue = [];\r\n\r\n    for (const message of messages) {\r\n      try {\r\n        this.socket.emit(message.event, message.data);\r\n        this.connectionState.lastSuccessfulMessage = new Date();\r\n      } catch (_error) {\r\n        logger.error('Failed to send queued message:');\r\n        \r\n        if (Date.now() - message.timestamp < 86400000 && message.retries < 3) {\r\n          message.retries++;\r\n          this.messageQueue.push(message);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.connectionState.messagesQueued = this.messageQueue.length;\r\n    this.saveQueuedMessages();\r\n  }\r\n\r\n  private saveQueuedMessages(): void {\r\n    try {\r\n      secureStorage.setItem('ws_message_queue', JSON.stringify(this.messageQueue));\r\n    } catch (_error) {\r\n      logger.error('Failed to save message queue:');\r\n    }\r\n  }\r\n\r\n  private loadQueuedMessages(): void {\r\n    try {\r\n      const _saved = secureStorage.getItem('ws_message_queue');\r\n      if (_saved) {\r\n        this.messageQueue = JSON.parse(_saved);\r\n        this.connectionState.messagesQueued = this.messageQueue.length;\r\n      }\r\n    } catch (_error) {\r\n      logger.error('Failed to load message queue:');\r\n      this.messageQueue = [];\r\n    }\r\n  }\r\n\r\n  // Room management\r\n  public joinRoom(_room: string): void {\r\n    if (this.socket?.connected) {\r\n      this.socket.emit('join:_room', { _room });\r\n      this.activeRooms.add(_room);\r\n    }\r\n  }\r\n\r\n  public leaveRoom(_room: string): void {\r\n    if (this.socket?.connected) {\r\n      this.socket.emit('leave:_room', { _room });\r\n      this.activeRooms.delete(_room);\r\n    }\r\n  }\r\n\r\n  // Crisis session management\r\n  public joinCrisisSession(sessionId: string): void {\r\n    const _room = `crisis:${sessionId}`;\r\n    this.joinRoom(_room);\r\n    this.emit('crisis:joined', { sessionId });\r\n  }\r\n\r\n  public escalateCrisisAlert(sessionId: string, escalationLevel: 'professional' | 'emergency' | 'immediate'): void {\r\n    const escalationData = {\r\n      sessionId,\r\n      escalationLevel,\r\n      timestamp: new Date(),\r\n      userId: this.currentUser?.id,\r\n      context: 'user_initiated_escalation'\r\n    };\r\n    \r\n    if (this.socket?.connected) {\r\n      this.socket.emit('crisis:escalate', escalationData);\r\n    }\r\n    \r\n    this.realTimeAnalytics.crisisAlertsHandled++;\r\n    this.logCriticalEvent('crisis_escalation_initiated', escalationData);\r\n    \r\n    this.showNotification('Crisis Support Activated', 'Professional help is being contacted', {\r\n      icon: '🚨',\r\n      _priority: 'critical',\r\n      requireInteraction: true,\r\n      actions: [\r\n        { _action: 'emergency', title: 'Call Emergency' },\r\n        { _action: 'chat', title: 'Crisis Chat' }\r\n      ]\r\n    });\r\n    \r\n    this.emit('crisis:escalated', escalationData);\r\n  }\r\n\r\n  // Peer support session management\r\n  public initiatePeerSupportSession(supportType: 'crisis' | 'general' | 'specific', metadata?: unknown): void {\r\n    const sessionId = `peer-support-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n    const session: PeerSupportSession = {\r\n      id: sessionId,\r\n      type: supportType,\r\n      startTime: new Date(),\r\n      participants: [this.currentUser?.id || 'anonymous'],\r\n      status: 'seeking-support',\r\n      metadata\r\n    };\r\n    \r\n    this.peerSupportSessions.set(sessionId, session);\r\n    \r\n    if (this.socket?.connected) {\r\n      this.socket.emit('peer_support:initiate', {\r\n        sessionId,\r\n        supportType,\r\n        userProfile: {\r\n          preferredSupport: supportType,\r\n          experience: metadata?.experience || 'beginner',\r\n          topics: metadata?.topics || []\r\n        }\r\n      });\r\n    }\r\n    \r\n    this.realTimeAnalytics.supportSessionsInitiated++;\r\n    this.emit('peer_support:session_initiated', { sessionId, session });\r\n  }\r\n\r\n  // Real-time presence management\r\n  public updateUserPresence(presence: Partial<UserPresence>): void {\r\n    if (!this.currentUser) return;\r\n    \r\n    const currentPresence = this.userPresences.get(this.currentUser.id) || {\r\n      userId: this.currentUser.id,\r\n      username: this.currentUser.username || 'Anonymous',\r\n      status: 'online',\r\n      lastSeen: new Date()\r\n    };\r\n    \r\n    const updatedPresence = { ...currentPresence, ...presence, lastSeen: new Date() };\r\n    this.userPresences.set(this.currentUser.id, updatedPresence);\r\n    \r\n    if (this.socket?.connected) {\r\n      this.socket.emit('presence:update', updatedPresence);\r\n    }\r\n    \r\n    this.emit('presence:updated', updatedPresence);\r\n  }\r\n\r\n  // Group session management\r\n  public joinGroupSession(groupId: string, sessionId: string): void {\r\n    const _room = `group:${groupId}:${sessionId}`;\r\n    this.joinRoom(_room);\r\n  }\r\n\r\n  // Event emitter methods\r\n  public on(event: string, handler: Function): void {\r\n    if (!this.eventHandlers.has(event)) {\r\n      this.eventHandlers.set(event, new Set());\r\n    }\r\n    this.eventHandlers.get(event)!.add(handler);\r\n  }\r\n\r\n  public off(event: string, handler: Function): void {\r\n    const handlers = this.eventHandlers.get(event);\r\n    if (handlers) {\r\n      handlers.delete(handler);\r\n    }\r\n  }\r\n\r\n  public emit(event: string, data: unknown): void {\r\n    const handlers = this.eventHandlers.get(event);\r\n    if (handlers) {\r\n      handlers.forEach(handler => {\r\n        try {\r\n          handler(data);\r\n        } catch (_error) {\r\n          logger.error(`Error in event handler for ${event}`);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Utility methods\r\n  public getConnectionState(): ConnectionState {\r\n    return { ...this.connectionState };\r\n  }\r\n\r\n  public isConnected(): boolean {\r\n    return this.socket?.connected || false;\r\n  }\r\n\r\n  public getRealTimeAnalytics(): typeof this.realTimeAnalytics {\r\n    return { ...this.realTimeAnalytics };\r\n  }\r\n\r\n  // Crisis escalation handling\r\n  private handleCrisisEscalation(event: unknown): void {\r\n    logger.error('CRISIS ESCALATION:', event);\r\n    \r\n    this.showNotification(\r\n      'Emergency Alert',\r\n      'Crisis situation requires immediate attention',\r\n      {\r\n        icon: '🚨',\r\n        _priority: 'critical',\r\n        requireInteraction: true\r\n      }\r\n    );\r\n\r\n    this.emit('crisis:escalation:local', event);\r\n    this.logCriticalEvent('crisis_escalation', event);\r\n  }\r\n\r\n  // Critical event logging\r\n  private logCriticalEvent(type: string, data: unknown): void {\r\n    const logEntry = {\r\n      timestamp: new Date().toISOString(),\r\n      type,\r\n      userId: this.currentUser?.id,\r\n      data: JSON.stringify(data)\r\n    };\r\n\r\n    logger.crisis('Critical Event Log', 'high', 'EnhancedWebSocket', logEntry);\r\n    \r\n    try {\r\n      const logs = JSON.parse(secureStorage.getItem('critical_events') || '[]');\r\n      logs.push(_logEntry);\r\n      \r\n      if (logs.length > 100) {\r\n        logs.splice(0, logs.length - 100);\r\n      }\r\n      \r\n      secureStorage.setItem('critical_events', JSON.stringify(_logs));\r\n    } catch (_error) {\r\n      logger.error('Failed to log critical event:');\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const _enhancedWsService = EnhancedWebSocketService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\websocket\\SecureWebSocketClient.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":116,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":116,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":208,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":208,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":253,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":253,"endColumn":22}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Secure WebSocket Client\n * \n * Connects to the secure backend WebSocket server for real-time features\n * Handles authentication, reconnection, and secure message transmission\n * Optimized for crisis intervention and wellness features\n */\n\nimport { io, Socket } from 'socket.io-client';\nimport { ApiService } from '../api/ApiService';\nimport { secureStorage } from '../security/SecureLocalStorage';\nimport { logger } from '../../utils/logger';\n\nexport interface WebSocketMessage {\n  type: string;\n  payload: unknown;\n  timestamp: Date;\n  id?: string;\n}\n\nexport interface CrisisMessage {\n  roomId: string;\n  message: string;\n  urgency: 'low' | 'medium' | 'high' | 'critical';\n  userId: string;\n  timestamp: Date;\n}\n\nexport interface WellnessUpdate {\n  type: 'mood' | 'activity' | 'journal' | 'assessment';\n  data: unknown;\n  userId: string;\n  timestamp: Date;\n}\n\nexport class SecureWebSocketClient {\n  private static instance: SecureWebSocketClient;\n  private socket: Socket | null = null;\n  private isConnected = false;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectDelay = 1000; // Start with 1 second\n  private heartbeatInterval: NodeJS.Timeout | null = null;\n\n  // Event callbacks\n  private onConnectionChange: ((connected: boolean) => void) | null = null;\n  private onCrisisMessage: ((message: CrisisMessage) => void) | null = null;\n  private onWellnessUpdate: ((update: WellnessUpdate) => void) | null = null;\n  private onError: ((error: unknown) => void) | null = null;\n\n  private constructor() {}\n\n  public static getInstance(): SecureWebSocketClient {\n    if (!SecureWebSocketClient.instance) {\n      SecureWebSocketClient.instance = new SecureWebSocketClient();\n    }\n    return SecureWebSocketClient.instance;\n  }\n\n  /**\n   * Connect to secure WebSocket server\n   */\n  public async connect(): Promise<void> {\n    if (this.socket && this.isConnected) {\n      logger.debug('WebSocket already connected', 'SecureWebSocketClient');\n      return;\n    }\n\n    try {\n      const wsUrl = import.meta.env.VITE_WS_URL || import.meta.env.VITE_WEBSOCKET_URL || 'ws://localhost:3001';\n      const token = secureStorage.getItem('access_token');\n\n      if (!token) {\n        logger.warn('⚠️ No access token found for WebSocket authentication');\n        throw new Error('Authentication token required');\n      }\n\n      logger.info('Connecting to secure WebSocket server', 'SecureWebSocketClient', { wsUrl });\n\n      this.socket = io(wsUrl, {\n        auth: {\n          token\n        },\n        timeout: 20000,\n        forceNew: true\n      });\n\n      this.setupEventHandlers();\n      this.startHeartbeat();\n\n      // Wait for connection\n      await new Promise<void>((resolve, reject) => {\n        if (!this.socket) {\n          reject(new Error('Socket not initialized'));\n          return;\n        }\n\n        this.socket.on('connect', () => {\n          logger.info('WebSocket connected successfully', 'SecureWebSocketClient');\n          this.isConnected = true;\n          this.reconnectAttempts = 0;\n          this.reconnectDelay = 1000;\n          this.onConnectionChange?.(true);\n          resolve();\n        });\n\n        this.socket.on('connect_error', (error: unknown) => {\n          logger.error('❌ WebSocket connection failed:', error);\n          this.isConnected = false;\n          this.onConnectionChange?.(false);\n          this.onError?.(error);\n          reject(error);\n        });\n      });\n\n    } catch (_error) {\n      logger.error('❌ WebSocket connection error: ');\n      this.isConnected = false;\n      this.onConnectionChange?.(false);\n      this.scheduleReconnect();\n      throw undefined;\n    }\n  }\n\n  /**\n   * Setup WebSocket event handlers\n   */\n  private setupEventHandlers(): void {\n    if (!this.socket) return;\n\n    // Connection events\n    this.socket.on('disconnect', (reason: unknown) => {\n      logger.warn('🔌 WebSocket disconnected:', reason);\n      this.isConnected = false;\n      this.onConnectionChange?.(false);\n      \n      // Automatic reconnection for unexpected disconnections\n      if (reason === 'io server disconnect') {\n        // Server initiated disconnect - don't reconnect immediately\n        logger.info('Server requested disconnect', 'SecureWebSocketClient');\n      } else {\n        this.scheduleReconnect();\n      }\n    });\n\n    this.socket.on('error', (error: unknown) => {\n      logger.error('❌ WebSocket error:', error);\n      this.onError?.(error);\n    });\n\n    // Crisis intervention messages\n    this.socket.on('crisis:message', (data: CrisisMessage) => {\n      logger.crisis('Crisis message received', data.urgency as 'low' | 'medium' | 'high' | 'critical', 'SecureWebSocketClient', data);\n      this.onCrisisMessage?.(data);\n    });\n\n    this.socket.on('crisis:response', (_data: unknown) => {\n      logger.info('Crisis response received', 'SecureWebSocketClient');\n      // Handle crisis response (e.g., professional support available)\n    });\n\n    this.socket.on('crisis:escalation', (data: unknown) => {\n      logger.warn('🚨 Crisis escalation:', data);\n      // Handle crisis escalation (emergency services, etc.)\n    });\n\n    // Wellness updates\n    this.socket.on('wellness:update', (data: WellnessUpdate) => {\n      logger.info('Wellness update received', 'SecureWebSocketClient', { type: data.type });\n      this.onWellnessUpdate?.(data);\n    });\n\n    // Community events\n    this.socket.on('community:message', (_data: unknown) => {\n      logger.info('Community message received', 'SecureWebSocketClient');\n      // Handle community messages\n    });\n\n    // System messages\n    this.socket.on('system:notification', (data: unknown) => {\n      logger.info('System notification', 'SecureWebSocketClient', data);\n      // Handle system notifications\n    });\n\n    // Authentication errors\n    this.socket.on('auth:error', (error: unknown) => {\n      logger.error('🔐 Authentication error:', error);\n      this.onError?.(error);\n      \n      // Token might be expired, try to refresh\n      this.handleAuthError();\n    });\n  }\n\n  /**\n   * Handle authentication errors\n   */\n  private async handleAuthError(): Promise<void> {\n    try {\n      const _apiService = ApiService.getInstance();\n      // Try to refresh token\n      // await _apiService.refreshToken();\n      \n      // Reconnect with new token\n      this.disconnect();\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      await this.connect();\n    } catch (_error) {\n      logger.error('❌ Failed to handle auth error: ');\n      this.onError?.(_undefined);\n    }\n  }\n\n  /**\n   * Start heartbeat to keep connection alive\n   */\n  private startHeartbeat(): void {\n    this.heartbeatInterval = setInterval(() => {\n      if (this.socket && this.isConnected) {\n        this.socket.emit('heartbeat', { timestamp: Date.now() });\n      }\n    }, 30000); // Every 30 seconds\n  }\n\n  /**\n   * Stop heartbeat\n   */\n  private stopHeartbeat(): void {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n      this.heartbeatInterval = null;\n    }\n  }\n\n  /**\n   * Schedule reconnection with exponential backoff\n   */\n  private scheduleReconnect(): void {\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      logger.error('🚫 Max reconnection attempts reached');\n      this.onError?.(new Error('Max reconnection attempts reached'));\n      return;\n    }\n\n    this.reconnectAttempts++;\n    const delay = Math.min(this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1), 30000);\n    \n    logger.info(`Scheduling reconnection attempt ${this.reconnectAttempts} in ${delay}ms`, 'SecureWebSocketClient');\n    \n    setTimeout(async () => {\n      try {\n        await this.connect();\n      } catch (_error) {\n        logger.error('❌ Reconnection failed:');\n      }\n    }, delay);\n  }\n\n  /**\n   * Disconnect from WebSocket server\n   */\n  public disconnect(): void {\n    if (this.socket) {\n      logger.info('Disconnecting WebSocket', 'SecureWebSocketClient');\n      this.stopHeartbeat();\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n      this.onConnectionChange?.(false);\n    }\n  }\n\n  /**\n   * Send crisis message\n   */\n  public sendCrisisMessage(message: Omit<CrisisMessage, 'timestamp'>): void {\n    if (!this.socket || !this.isConnected) {\n      logger.warn('⚠️ Cannot send crisis message - WebSocket not connected');\n      return;\n    }\n\n    const crisisMessage: CrisisMessage = {\n      ...message,\n      timestamp: new Date()\n    };\n\n    logger.crisis('Sending crisis message', crisisMessage.urgency as 'low' | 'medium' | 'high' | 'critical', 'SecureWebSocketClient', crisisMessage);\n    this.socket.emit('crisis:message', crisisMessage);\n  }\n\n  /**\n   * Join crisis room for real-time support\n   */\n  public joinCrisisRoom(roomId: string): void {\n    if (!this.socket || !this.isConnected) {\n      logger.warn('⚠️ Cannot join crisis room - WebSocket not connected');\n      return;\n    }\n\n    logger.info('Joining crisis room', 'SecureWebSocketClient', { roomId });\n    this.socket.emit('crisis:join', roomId);\n  }\n\n  /**\n   * Leave crisis room\n   */\n  public leaveCrisisRoom(roomId: string): void {\n    if (!this.socket || !this.isConnected) return;\n\n    logger.info('Leaving crisis room', 'SecureWebSocketClient', { roomId });\n    this.socket.emit('crisis:leave', roomId);\n  }\n\n  /**\n   * Subscribe to wellness updates\n   */\n  public subscribeToWellnessUpdates(): void {\n    if (!this.socket || !this.isConnected) {\n      logger.warn('⚠️ Cannot subscribe to wellness updates - WebSocket not connected');\n      return;\n    }\n\n    logger.info('Subscribing to wellness updates', 'SecureWebSocketClient');\n    this.socket.emit('wellness:subscribe');\n  }\n\n  /**\n   * Send wellness update\n   */\n  public sendWellnessUpdate(update: Omit<WellnessUpdate, 'timestamp'>): void {\n    if (!this.socket || !this.isConnected) {\n      logger.warn('⚠️ Cannot send wellness update - WebSocket not connected');\n      return;\n    }\n\n    const wellnessUpdate: WellnessUpdate = {\n      ...update,\n      timestamp: new Date()\n    };\n\n    logger.info('Sending wellness update', 'SecureWebSocketClient', { type: wellnessUpdate.type });\n    this.socket.emit('wellness:update', wellnessUpdate);\n  }\n\n  /**\n   * Join community group for real-time chat\n   */\n  public joinCommunityGroup(groupId: string): void {\n    if (!this.socket || !this.isConnected) {\n      logger.warn('⚠️ Cannot join community group - WebSocket not connected');\n      return;\n    }\n\n    logger.info('Joining community group', 'SecureWebSocketClient', { groupId });\n    this.socket.emit('community:join', groupId);\n  }\n\n  /**\n   * Event handler setters\n   */\n  public onConnectionStatusChange(callback: (connected: boolean) => void): void {\n    this.onConnectionChange = callback;\n  }\n\n  public onCrisisMessageReceived(callback: (message: CrisisMessage) => void): void {\n    this.onCrisisMessage = callback;\n  }\n\n  public onWellnessUpdateReceived(callback: (update: WellnessUpdate) => void): void {\n    this.onWellnessUpdate = callback;\n  }\n\n  public onErrorReceived(callback: (error: unknown) => void): void {\n    this.onError = callback;\n  }\n\n  /**\n   * Get connection status\n   */\n  public get connected(): boolean {\n    return this.isConnected;\n  }\n\n  /**\n   * Get reconnection attempts\n   */\n  public get reconnectionAttempts(): number {\n    return this.reconnectAttempts;\n  }\n}\n\n// Export singleton instance\nexport const _secureWebSocket = SecureWebSocketClient.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\services\\websocket\\WebSocketService.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":112,"column":42,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":112,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":505,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":505,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":522,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":522,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":533,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":533,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":573,"column":37,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":573,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":580,"column":38,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":580,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":593,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":593,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":646,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":646,"endColumn":20}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// WebSocket Service for Real-time Features\n// Implements secure, HIPAA-compliant real-time communication\n\nimport { io, Socket } from 'socket.io-client';\nimport {\n  _WebSocketEvent,\n  CrisisWebSocketEvent,\n  CommunityWebSocketEvent,\n  NotificationWebSocketEvent,\n  Message,\n  User\n} from '../api/types';\nimport { secureStorage } from '../security/SecureLocalStorage';\nimport { logger } from '../../utils/logger';\n\n// WebSocket Configuration\nconst WS_CONFIG = {\n  url: import.meta.env.VITE_WS_URL || 'ws://localhost:3002',\n  reconnection: true,\n  reconnectionDelay: 1000,\n  reconnectionDelayMax: 5000,\n  reconnectionAttempts: 10,\n  timeout: 20000,\n  transports: ['websocket', 'polling'],\n  auth: {\n    token: ''\n  }\n};\n\n// WebSocket Event Types\nexport enum WSEventType {\n  // Connection Events\n  CONNECT = 'connect',\n  DISCONNECT = 'disconnect',\n  RECONNECT = 'reconnect',\n  ERROR = 'error',\n  \n  // Authentication Events\n  AUTH_SUCCESS = 'auth:success',\n  AUTH_FAILURE = 'auth:failure',\n  \n  // Crisis Events\n  CRISIS_ALERT = 'crisis:alert',\n  CRISIS_COUNSELOR_ASSIGNED = 'crisis:counselor_assigned',\n  CRISIS_MESSAGE = 'crisis:message',\n  CRISIS_SESSION_ENDED = 'crisis:session_ended',\n  CRISIS_ESCALATION = 'crisis:escalation',\n  CRISIS_TYPING = 'crisis:typing',\n  \n  // Community Events\n  COMMUNITY_POST_NEW = 'community:post_new',\n  COMMUNITY_COMMENT_NEW = 'community:comment_new',\n  COMMUNITY_USER_TYPING = 'community:user_typing',\n  COMMUNITY_USER_ONLINE = 'community:user_online',\n  COMMUNITY_USER_OFFLINE = 'community:user_offline',\n  \n  // Notification Events\n  NOTIFICATION_APPOINTMENT = 'notification:appointment',\n  NOTIFICATION_MEDICATION = 'notification:medication',\n  NOTIFICATION_CRISIS_CHECK = 'notification:crisis_check',\n  NOTIFICATION_SYSTEM = 'notification:system',\n  \n  // Presence Events\n  PRESENCE_UPDATE = 'presence:update',\n  PRESENCE_REQUEST = 'presence:request',\n  \n  // Therapist Events\n  THERAPIST_AVAILABLE = 'therapist:available',\n  THERAPIST_BUSY = 'therapist:busy',\n  THERAPIST_MESSAGE = 'therapist:message',\n  \n  // Group Session Events\n  GROUP_SESSION_START = 'group:session_start',\n  GROUP_SESSION_END = 'group:session_end',\n  GROUP_USER_JOIN = 'group:user_join',\n  GROUP_USER_LEAVE = 'group:user_leave',\n  GROUP_MESSAGE = 'group:message'\n}\n\n// Typing indicator management\ninterface TypingUser {\n  userId: string;\n  username: string;\n  timestamp: number;\n}\n\n// Connection state management\ninterface ConnectionState {\n  isConnected: boolean;\n  reconnectAttempts: number;\n  lastError?: Error;\n  latency: number;\n}\n\n// Message queue for offline support\ninterface QueuedMessage {\n  event: string;\n  data: unknown;\n  timestamp: number;\n  retries: number;\n}\n\n// WebSocket Service Class\nexport class WebSocketService {\n  private static instance: WebSocketService;\n  private socket: Socket | null = null;\n  private connectionState: ConnectionState = {\n    isConnected: false,\n    reconnectAttempts: 0,\n    latency: 0\n  };\n  private eventHandlers: Map<string, Set<Function>> = new Map();\n  private typingUsers: Map<string, TypingUser> = new Map();\n  private messageQueue: QueuedMessage[] = [];\n  private heartbeatInterval: NodeJS.Timeout | null = null;\n  private currentUser: User | null = null;\n  private activeRooms: Set<string> = new Set();\n\n  private constructor() {\n    this.loadQueuedMessages();\n  }\n\n  // Singleton pattern\n  public static getInstance(): WebSocketService {\n    if (!WebSocketService.instance) {\n      WebSocketService.instance = new WebSocketService();\n    }\n    return WebSocketService.instance;\n  }\n\n  // Initialize WebSocket connection\n  public connect(token: string, user: User): void {\n    if (this.socket?.connected) {\n      logger.debug('WebSocket already connected', 'WebSocketService');\n      return;\n    }\n\n    this.currentUser = user;\n    WS_CONFIG.auth.token = token;\n\n    // Create socket connection\n    this.socket = io(WS_CONFIG.url, {\n      ...WS_CONFIG,\n      auth: WS_CONFIG.auth\n    });\n\n    this.setupEventListeners();\n    this.startHeartbeat();\n  }\n\n  // Disconnect WebSocket\n  public disconnect(): void {\n    if (this.socket) {\n      this.stopHeartbeat();\n      this.socket.disconnect();\n      this.socket = null;\n      this.connectionState.isConnected = false;\n      this.activeRooms.clear();\n      this.typingUsers.clear();\n    }\n  }\n\n  // Setup core event listeners\n  private setupEventListeners(): void {\n    if (!this.socket) return;\n\n    // Connection events\n    this.socket.on(WSEventType.CONNECT, () => {\n      logger.info('WebSocket connected', 'WebSocketService');\n      this.connectionState.isConnected = true;\n      this.connectionState.reconnectAttempts = 0;\n      this.processQueuedMessages();\n      this.emit(WSEventType.CONNECT, { timestamp: new Date() });\n      \n      // Rejoin rooms after reconnection\n      this.activeRooms.forEach(_room => {\n        this.joinRoom(_room);\n      });\n    });\n\n    this.socket.on(WSEventType.DISCONNECT, (reason: unknown) => {\n      logger.info('WebSocket disconnected', 'WebSocketService', { reason });\n      this.connectionState.isConnected = false;\n      this.emit(WSEventType.DISCONNECT, { reason, timestamp: new Date() });\n    });\n\n    this.socket.on(WSEventType.ERROR, (error: unknown) => {\n      logger.error('WebSocket error:', error);\n      this.connectionState.lastError = error;\n      this.emit(WSEventType.ERROR, { error, timestamp: new Date() });\n    });\n\n    // Authentication events\n    this.socket.on(WSEventType.AUTH_SUCCESS, (data: unknown) => {\n      logger.info('WebSocket authentication successful', 'WebSocketService');\n      this.emit(WSEventType.AUTH_SUCCESS, data);\n    });\n\n    this.socket.on(WSEventType.AUTH_FAILURE, (data: unknown) => {\n      logger.error('WebSocket authentication failed:', data);\n      this.emit(WSEventType.AUTH_FAILURE, data);\n      this.disconnect();\n    });\n\n    // Setup all event type listeners\n    this.setupCrisisEventListeners();\n    this.setupCommunityEventListeners();\n    this.setupNotificationEventListeners();\n    this.setupPresenceEventListeners();\n    this.setupTherapistEventListeners();\n    this.setupGroupEventListeners();\n  }\n\n  // Crisis event listeners\n  private setupCrisisEventListeners(): void {\n    if (!this.socket) return;\n\n    this.socket.on(WSEventType.CRISIS_ALERT, (data: CrisisWebSocketEvent) => {\n      logger.crisis('Crisis alert received', 'high', 'WebSocketService', data);\n      this.emit(WSEventType.CRISIS_ALERT, data);\n      \n      // Auto-join crisis _room if it's for current user\n      if (data.userId === this.currentUser?.id) {\n        this.joinCrisisSession(data.sessionId);\n      }\n    });\n\n    this.socket.on(WSEventType.CRISIS_COUNSELOR_ASSIGNED, (data: CrisisWebSocketEvent) => {\n      logger.crisis('Counselor assigned to crisis session', 'medium', 'WebSocketService', data);\n      this.emit(WSEventType.CRISIS_COUNSELOR_ASSIGNED, data);\n    });\n\n    this.socket.on(WSEventType.CRISIS_MESSAGE, (data: CrisisWebSocketEvent) => {\n      this.emit(WSEventType.CRISIS_MESSAGE, data);\n    });\n\n    this.socket.on(WSEventType.CRISIS_SESSION_ENDED, (data: CrisisWebSocketEvent) => {\n      logger.info('Crisis session ended', 'WebSocketService', data);\n      this.emit(WSEventType.CRISIS_SESSION_ENDED, data);\n      this.leaveCrisisSession(data.sessionId);\n    });\n\n    this.socket.on(WSEventType.CRISIS_ESCALATION, (data: CrisisWebSocketEvent) => {\n      logger.crisis('Crisis escalated', 'critical', 'WebSocketService', data);\n      this.emit(WSEventType.CRISIS_ESCALATION, data);\n      \n      // Trigger emergency protocols\n      this.handleCrisisEscalation(data);\n    });\n\n    this.socket.on(WSEventType.CRISIS_TYPING, (data: { sessionId: string; userId: string; isTyping: boolean }) => {\n      this.handleTypingIndicator(data.sessionId, data.userId, data.isTyping);\n    });\n  }\n\n  // Community event listeners\n  private setupCommunityEventListeners(): void {\n    if (!this.socket) return;\n\n    this.socket.on(WSEventType.COMMUNITY_POST_NEW, (data: CommunityWebSocketEvent) => {\n      this.emit(WSEventType.COMMUNITY_POST_NEW, data);\n    });\n\n    this.socket.on(WSEventType.COMMUNITY_COMMENT_NEW, (data: CommunityWebSocketEvent) => {\n      this.emit(WSEventType.COMMUNITY_COMMENT_NEW, data);\n    });\n\n    this.socket.on(WSEventType.COMMUNITY_USER_TYPING, (data: { groupId: string; user: TypingUser }) => {\n      this.handleTypingIndicator(data.groupId, data.user.userId, true, data.user.username);\n    });\n\n    this.socket.on(WSEventType.COMMUNITY_USER_ONLINE, (data: CommunityWebSocketEvent) => {\n      this.emit(WSEventType.COMMUNITY_USER_ONLINE, data);\n    });\n\n    this.socket.on(WSEventType.COMMUNITY_USER_OFFLINE, (data: CommunityWebSocketEvent) => {\n      this.emit(WSEventType.COMMUNITY_USER_OFFLINE, data);\n    });\n  }\n\n  // Notification event listeners\n  private setupNotificationEventListeners(): void {\n    if (!this.socket) return;\n\n    this.socket.on(WSEventType.NOTIFICATION_APPOINTMENT, (data: NotificationWebSocketEvent) => {\n      this.emit(WSEventType.NOTIFICATION_APPOINTMENT, data);\n      this.showNotification('Appointment Reminder', data.payload.message);\n    });\n\n    this.socket.on(WSEventType.NOTIFICATION_MEDICATION, (data: NotificationWebSocketEvent) => {\n      this.emit(WSEventType.NOTIFICATION_MEDICATION, data);\n      this.showNotification('Medication Reminder', data.payload.message);\n    });\n\n    this.socket.on(WSEventType.NOTIFICATION_CRISIS_CHECK, (data: NotificationWebSocketEvent) => {\n      this.emit(WSEventType.NOTIFICATION_CRISIS_CHECK, data);\n      this.showNotification('Wellness Check-In', data.payload.message);\n    });\n\n    this.socket.on(WSEventType.NOTIFICATION_SYSTEM, (data: NotificationWebSocketEvent) => {\n      this.emit(WSEventType.NOTIFICATION_SYSTEM, data);\n      if (data.priority === 'critical') {\n        this.showNotification('System Alert', data.payload.message, 'critical');\n      }\n    });\n  }\n\n  // Presence event listeners\n  private setupPresenceEventListeners(): void {\n    if (!this.socket) return;\n\n    this.socket.on(WSEventType.PRESENCE_UPDATE, (data: { userId: string; status: string; lastSeen: Date }) => {\n      this.emit(WSEventType.PRESENCE_UPDATE, data);\n    });\n  }\n\n  // Therapist event listeners\n  private setupTherapistEventListeners(): void {\n    if (!this.socket) return;\n\n    this.socket.on(WSEventType.THERAPIST_AVAILABLE, (data: { therapistId: string; available: boolean }) => {\n      this.emit(WSEventType.THERAPIST_AVAILABLE, data);\n    });\n\n    this.socket.on(WSEventType.THERAPIST_MESSAGE, (data: { therapistId: string; message: Message }) => {\n      this.emit(WSEventType.THERAPIST_MESSAGE, data);\n    });\n  }\n\n  // Group session event listeners\n  private setupGroupEventListeners(): void {\n    if (!this.socket) return;\n\n    this.socket.on(WSEventType.GROUP_SESSION_START, (data: { groupId: string; sessionId: string }) => {\n      this.emit(WSEventType.GROUP_SESSION_START, data);\n      this.joinGroupSession(data.groupId, data.sessionId);\n    });\n\n    this.socket.on(WSEventType.GROUP_SESSION_END, (data: { groupId: string; sessionId: string }) => {\n      this.emit(WSEventType.GROUP_SESSION_END, data);\n      this.leaveGroupSession(data.groupId, data.sessionId);\n    });\n\n    this.socket.on(WSEventType.GROUP_MESSAGE, (data: { groupId: string; message: Message }) => {\n      this.emit(WSEventType.GROUP_MESSAGE, data);\n    });\n  }\n\n  // Heartbeat for connection monitoring\n  private startHeartbeat(): void {\n    this.heartbeatInterval = setInterval(() => {\n      if (this.socket?.connected) {\n        const start = Date.now();\n        this.socket.emit('ping', null, () => {\n          this.connectionState.latency = Date.now() - start;\n        });\n      }\n    }, 30000); // Every 30 seconds\n  }\n\n  private stopHeartbeat(): void {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n      this.heartbeatInterval = null;\n    }\n  }\n\n  // Room management\n  public joinRoom(_room: string): void {\n    if (this.socket?.connected) {\n      this.socket.emit('join:_room', { _room });\n      this.activeRooms.add(_room);\n    }\n  }\n\n  public leaveRoom(_room: string): void {\n    if (this.socket?.connected) {\n      this.socket.emit('leave:_room', { _room });\n      this.activeRooms.delete(_room);\n    }\n  }\n\n  // Crisis session management\n  public joinCrisisSession(sessionId: string): void {\n    const _room = `crisis:${sessionId}`;\n    this.joinRoom(_room);\n    this.emit('crisis:joined', { sessionId });\n  }\n\n  public leaveCrisisSession(sessionId: string): void {\n    const _room = `crisis:${sessionId}`;\n    this.leaveRoom(_room);\n    this.typingUsers.delete(_room);\n  }\n\n  public sendCrisisMessage(sessionId: string, message: string): void {\n    const event = {\n      type: WSEventType.CRISIS_MESSAGE,\n      sessionId,\n      payload: {\n        content: message,\n        timestamp: new Date(),\n        senderId: this.currentUser?.id\n      }\n    };\n\n    if (this.socket?.connected) {\n      this.socket.emit(WSEventType.CRISIS_MESSAGE, event);\n    } else {\n      this.queueMessage(WSEventType.CRISIS_MESSAGE, event);\n    }\n  }\n\n  // Group session management\n  public joinGroupSession(groupId: string, sessionId: string): void {\n    const _room = `group:${groupId}:${sessionId}`;\n    this.joinRoom(_room);\n  }\n\n  public leaveGroupSession(groupId: string, sessionId: string): void {\n    const _room = `group:${groupId}:${sessionId}`;\n    this.leaveRoom(_room);\n  }\n\n  // Typing indicators\n  public sendTypingIndicator(_room: string, isTyping: boolean): void {\n    if (this.socket?.connected) {\n      this.socket.emit('typing', {\n        _room,\n        userId: this.currentUser?.id,\n        username: this.currentUser?.username,\n        isTyping\n      });\n    }\n  }\n\n  private handleTypingIndicator(_room: string, userId: string, isTyping: boolean, username?: string): void {\n    if (isTyping && userId !== this.currentUser?.id) {\n      this.typingUsers.set(`${_room}:${userId}`, {\n        userId,\n        username: username || 'User',\n        timestamp: Date.now()\n      });\n    } else {\n      this.typingUsers.delete(`${_room}:${userId}`);\n    }\n\n    // Clean up old typing indicators (> 5 seconds)\n    const now = Date.now();\n    this.typingUsers.forEach((user, key) => {\n      if (now - user.timestamp > 5000) {\n        this.typingUsers.delete(key);\n      }\n    });\n\n    this.emit('typing:update', {\n      _room,\n      typingUsers: Array.from(this.typingUsers.values()).filter(u => \n        u.userId !== this.currentUser?.id\n      )\n    });\n  }\n\n  // Crisis escalation handling\n  private handleCrisisEscalation(event: CrisisWebSocketEvent): void {\n    // Trigger emergency protocols\n    logger.error('CRISIS ESCALATION:', event);\n    \n    // Show critical notification\n    this.showNotification(\n      'Emergency Alert',\n      'Crisis situation requires immediate attention',\n      'critical'\n    );\n\n    // Emit escalation event for UI handling\n    this.emit('crisis:escalation:local', event);\n\n    // Log for audit trail\n    this.logCriticalEvent('crisis_escalation', event);\n  }\n\n  // Message queue management for offline support\n  private queueMessage(event: string, data: unknown): void {\n    const _queuedMessage: QueuedMessage = {\n      event,\n      data,\n      timestamp: Date.now(),\n      retries: 0\n    };\n\n    this.messageQueue.push(_queuedMessage);\n    this.saveQueuedMessages();\n  }\n\n  private async processQueuedMessages(): Promise<void> {\n    if (!this.socket?.connected || this.messageQueue.length === 0) return;\n\n    const messages = [...this.messageQueue];\n    this.messageQueue = [];\n\n    for (const message of messages) {\n      try {\n        this.socket.emit(message.event, message.data);\n      } catch (_error) {\n        logger.error('Failed to send queued message:');\n        \n        // Re-queue if not expired (24 hours) and under retry limit\n        if (Date.now() - message.timestamp < 86400000 && message.retries < 3) {\n          message.retries++;\n          this.messageQueue.push(message);\n        }\n      }\n    }\n\n    this.saveQueuedMessages();\n  }\n\n  private saveQueuedMessages(): void {\n    try {\n      secureStorage.setItem('ws_message_queue', JSON.stringify(this.messageQueue));\n    } catch (_error) {\n      logger.error('Failed to save message queue:');\n    }\n  }\n\n  private loadQueuedMessages(): void {\n    try {\n      const _saved = secureStorage.getItem('ws_message_queue');\n      if (_saved) {\n        this.messageQueue = JSON.parse(_saved);\n      }\n    } catch (_error) {\n      logger.error('Failed to load message queue:');\n      this.messageQueue = [];\n    }\n  }\n\n  // Notification handling\n  private showNotification(title: string, message: string, priority: string = 'normal'): void {\n    // Check if browser supports notifications\n    if (!('Notification' in window)) return;\n\n    // Request permission if needed\n    if (Notification.permission === 'default') {\n      Notification.requestPermission();\n    }\n\n    // Show notification if permitted\n    if (Notification.permission === 'granted') {\n      const notification = new Notification(title, {\n        body: message,\n        icon: '/icon-192x192.png',\n        badge: '/icon-72x72.png',\n        tag: `${priority}-${Date.now()}`,\n        requireInteraction: priority === 'critical',\n        silent: priority === 'low'\n      });\n\n      notification.onclick = () => {\n        window.focus();\n        notification.close();\n      };\n\n      // Auto-close non-critical notifications\n      if (priority !== 'critical') {\n        setTimeout(() => notification.close(), 5000);\n      }\n    }\n  }\n\n  // Event emitter methods\n  public on(event: string, handler: Function): void {\n    if (!this.eventHandlers.has(event)) {\n      this.eventHandlers.set(event, new Set());\n    }\n    this.eventHandlers.get(event)!.add(handler);\n  }\n\n  public off(event: string, handler: Function): void {\n    const handlers = this.eventHandlers.get(event);\n    if (handlers) {\n      handlers.delete(handler);\n    }\n  }\n\n  public emit(event: string, data: unknown): void {\n    const handlers = this.eventHandlers.get(event);\n    if (handlers) {\n      handlers.forEach(handler => {\n        try {\n          handler(data);\n        } catch (_error) {\n          logger.error(`Error in event handler for ${event}`);\n        }\n      });\n    }\n  }\n\n  // Utility methods\n  public getConnectionState(): ConnectionState {\n    return { ...this.connectionState };\n  }\n\n  public getTypingUsers(_room: string): TypingUser[] {\n    const users: TypingUser[] = [];\n    this.typingUsers.forEach((user, key) => {\n      if (key.startsWith(`${_room}:`)) {\n        users.push(_user);\n      }\n    });\n    return users;\n  }\n\n  public isConnected(): boolean {\n    return this.socket?.connected || false;\n  }\n\n  public getLatency(): number {\n    return this.connectionState.latency;\n  }\n\n  // Critical event logging for audit trail\n  private logCriticalEvent(type: string, data: unknown): void {\n    const logEntry = {\n      timestamp: new Date().toISOString(),\n      type,\n      userId: this.currentUser?.id,\n      data: JSON.stringify(data)\n    };\n\n    // In production, send to secure logging service\n    logger.crisis('Critical Event Log', 'high', 'WebSocketService', logEntry);\n    \n    // Also store locally for offline access\n    try {\n      const logs = JSON.parse(secureStorage.getItem('critical_events') || '[]');\n      logs.push(_logEntry);\n      \n      // Keep only last 100 events\n      if (logs.length > 100) {\n        logs.splice(0, logs.length - 100);\n      }\n      \n      secureStorage.setItem('critical_events', JSON.stringify(_logs));\n    } catch (_error) {\n      logger.error('Failed to log critical event:');\n    }\n  }\n}\n\n// Export singleton instance\nexport const wsService = WebSocketService.getInstance();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\stores\\accessibilityStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\stores\\activityStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":870,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":870,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\n// Types and interfaces for activity tracking\nexport interface Activity {\n  id: string;\n  title: string;\n  description?: string;\n  category: 'therapy' | 'wellness' | 'social' | 'professional' | 'personal' | 'self-care';\n  type: 'task' | 'appointment' | 'exercise' | 'medication' | 'practice' | 'goal';\n  scheduledTime?: Date;\n  duration?: number; // in minutes\n  energyLevel?: 'low' | 'medium' | 'high'; // Required energy level\n  moodImpact?: number; // Expected _mood impact (-5 to +5)\n  completed: boolean;\n  completedAt?: Date;\n  actualMoodImpact?: number; // Actual _mood impact after completion\n  notes?: string;\n  recurring?: {\n    frequency: 'daily' | 'weekly' | 'monthly';\n    daysOfWeek?: number[]; // 0-6 for Sunday-Saturday\n    endDate?: Date;\n  };\n  tags?: string[];\n  linkedGoalId?: string;\n  therapyHomework?: boolean;\n  flexibility?: 'fixed' | 'flexible' | 'optional'; // For bad mental health days\n}\n\nexport interface Goal {\n  id: string;\n  title: string;\n  description?: string;\n  category: 'therapy' | 'wellness' | 'social' | 'professional' | 'personal';\n  type: 'short-term' | 'long-term' | 'milestone';\n  targetValue: number;\n  currentValue: number;\n  unit: string;\n  startDate: Date;\n  targetDate?: Date;\n  completedDate?: Date;\n  status: 'active' | 'paused' | 'completed' | 'abandoned';\n  priority: 'low' | 'medium' | 'high';\n  milestones: Milestone[];\n  linkedActivities?: string[];\n  measurable: boolean;\n  specific: boolean;\n  achievable: boolean;\n  relevant: boolean;\n  timeBound: boolean;\n  progress: number; // Percentage\n  insights?: string[];\n  celebrations?: string[];\n}\n\nexport interface Milestone {\n  id: string;\n  goalId: string;\n  title: string;\n  targetValue: number;\n  completed: boolean;\n  completedDate?: Date;\n  celebration?: string;\n}\n\nexport interface Medication {\n  id: string;\n  name: string;\n  dosage: string;\n  frequency: string;\n  times: string[];\n  takenToday: boolean;\n  nextDose?: Date;\n  refillDate?: Date;\n  adherenceRate: number;\n  startDate?: Date;\n  endDate?: Date;\n  prescribedBy?: string;\n  purpose?: string;\n  sideEffects?: string[];\n  lastTaken?: Date;\n  remindersEnabled?: boolean;\n  notes?: string;\n}\n\nexport interface Habit {\n  id: string;\n  name: string;\n  description?: string;\n  category: 'physical' | 'mental' | 'emotional' | 'social' | 'spiritual';\n  icon?: string;\n  targetFrequency: 'daily' | 'weekly' | 'monthly';\n  targetCount: number; // times per frequency period\n  currentStreak: number;\n  longestStreak: number;\n  totalCompletions: number;\n  lastCompleted?: Date;\n  startDate: Date;\n  isActive: boolean;\n  flexibleTracking: boolean; // Allow missed days without breaking streak\n  recoveryDays: number; // Grace period for streak recovery\n  correlatedMoodImprovement?: number;\n  stackedWith?: string[]; // Other habit IDs for habit stacking\n  reminders?: {\n    enabled: boolean;\n    times: string[];\n    message?: string;\n  };\n}\n\nexport interface TherapyProgress {\n  id: string;\n  sessionDate: Date;\n  therapistName?: string;\n  sessionType: 'individual' | 'group' | 'psychiatry' | 'assessment';\n  topics: string[];\n  homework: {\n    id: string;\n    title: string;\n    description: string;\n    dueDate?: Date;\n    completed: boolean;\n    completedDate?: Date;\n    skillType?: 'CBT' | 'DBT' | 'mindfulness' | 'other';\n  }[];\n  skillsPracticed: {\n    name: string;\n    type: 'CBT' | 'DBT' | 'mindfulness' | 'other';\n    effectiveness: number; // 1-10 scale\n    notes?: string;\n  }[];\n  mood: {\n    before: number; // 1-10\n    after: number; // 1-10\n  };\n  insights: string[];\n  nextSession?: Date;\n  progressScore?: number;\n  notes?: string;\n  medicationChanges?: {\n    medication: string;\n    change: 'started' | 'stopped' | 'increased' | 'decreased';\n    dosage?: string;\n  }[];\n}\n\nexport interface Achievement {\n  id: string;\n  title: string;\n  description: string;\n  category: 'wellness' | 'therapy' | 'social' | 'streak' | 'milestone' | 'recovery';\n  icon: string;\n  unlockedDate?: Date;\n  requirements: {\n    type: 'streak' | 'count' | 'goal' | 'special';\n    target: number;\n    current: number;\n  };\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\n  points: number;\n  shared: boolean;\n  celebrationType?: 'confetti' | 'badge' | 'animation' | 'message';\n}\n\nexport interface ActivityAnalytics {\n  activityId: string;\n  completionRate: number;\n  averageMoodImpact: number;\n  bestTimeOfDay?: string;\n  energyEfficiency: number; // Impact per energy unit\n  correlatedActivities: string[];\n  effectiveness: number; // 0-100 score\n  recommendations: string[];\n}\n\ninterface ActivityStore {\n  // State\n  activities: Activity[];\n  goals: Goal[];\n  habits: Habit[];\n  medications: Medication[];\n  therapyProgress: TherapyProgress[];\n  achievements: Achievement[];\n  analytics: ActivityAnalytics[];\n  dailySchedule: Activity[];\n  activityHistory: Activity[];\n  \n  // Activity management\n  addActivity: (activity: Omit<Activity, 'id'>) => void;\n  updateActivity: (id: string, updates: Partial<Activity>) => void;\n  deleteActivity: (id: string) => void;\n  completeActivity: (id: string, moodImpact?: number, notes?: string) => void;\n  rescheduleActivity: (id: string, newTime: Date) => void;\n  \n  // Goal management\n  addGoal: (goal: Omit<Goal, 'id' | 'progress'>) => void;\n  updateGoal: (id: string, updates: Partial<Goal>) => void;\n  updateGoalProgress: (id: string, newValue: number) => void;\n  completeGoal: (id: string) => void;\n  pauseGoal: (id: string) => void;\n  abandonGoal: (id: string, reason?: string) => void;\n  addMilestone: (goalId: string, milestone: Omit<Milestone, 'id' | 'goalId'>) => void;\n  completeMilestone: (goalId: string, milestoneId: string) => void;\n  \n  // Habit tracking\n  addHabit: (habit: Omit<Habit, 'id' | 'currentStreak' | 'longestStreak' | 'totalCompletions'>) => void;\n  updateHabit: (id: string, updates: Partial<Habit>) => void;\n  completeHabit: (id: string) => void;\n  resetHabitStreak: (id: string) => void;\n  pauseHabit: (id: string) => void;\n  stackHabits: (habitIds: string[]) => void;\n  \n  // Therapy progress\n  addTherapySession: (session: Omit<TherapyProgress, 'id'>) => void;\n  updateTherapyProgress: (id: string, updates: Partial<TherapyProgress>) => void;\n  completeHomework: (sessionId: string, homeworkId: string, notes?: string) => void;\n  addSkillPractice: (skill: { name: string; type: 'CBT' | 'DBT' | 'mindfulness' | 'other'; effectiveness: number; notes?: string }) => void;\n  \n  // Achievement system\n  checkAchievements: () => void;\n  unlockAchievement: (id: string) => void;\n  shareAchievement: (id: string) => void;\n  \n  // Analytics and insights\n  analyzeActivityEffectiveness: (activityId: string) => ActivityAnalytics;\n  getActivityRecommendations: (energyLevel: 'low' | 'medium' | 'high', _mood: number) => Activity[];\n  getOptimalSchedule: (date: Date) => Activity[];\n  correlateActivitiesWithMood: () => { activity: string; correlation: number }[];\n  \n  // Smart scheduling\n  suggestReschedule: (energyLevel: 'low' | 'medium' | 'high') => Activity[];\n  adaptScheduleForBadDay: () => void;\n  generateDailySchedule: (date: Date) => void;\n  \n  // Data management\n  exportProgressReport: () => string;\n  importData: (data: string) => void;\n  clearAllData: () => void;\n}\n\n// Create the store with persistence\nexport const _useActivityStore = create<ActivityStore>()(\n  persist(\n    (set, get) => ({\n      // Initialize state\n      activities: [],\n      goals: [],\n      habits: [],\n      medications: [],\n      therapyProgress: [],\n      achievements: [],\n      analytics: [],\n      dailySchedule: [],\n      activityHistory: [],\n      \n      // Activity management\n      addActivity: (activity) => {\n        const newActivity: Activity = {\n          ...activity,\n          id: `activity-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        };\n        set((_state) => ({\n          activities: [...state.activities, newActivity],\n        }));\n      },\n      \n      updateActivity: (id, updates) => {\n        set((_state) => ({\n          activities: state.activities.map((activity) =>\n            activity.id === id ? { ...activity, ...updates } : activity\n          ),\n        }));\n      },\n      \n      deleteActivity: (id) => {\n        set((_state) => ({\n          activities: state.activities.filter((activity) => activity.id !== id),\n        }));\n      },\n      \n      completeActivity: (id, moodImpact, notes) => {\n        const now = new Date();\n        set((state) => {\n          const updatedActivities = state.activities.map((activity) =>\n            activity.id === id\n              ? {\n                  ...activity,\n                  completed: true,\n                  completedAt: now,\n                  actualMoodImpact: moodImpact,\n                  notes: notes || activity.notes,\n                }\n              : activity\n          );\n          \n          // Move to history\n          const completedActivity = updatedActivities.find(a => a.id === id);\n          const newHistory = completedActivity \n            ? [...state.activityHistory, completedActivity]\n            : state.activityHistory;\n          \n          return {\n            activities: updatedActivities,\n            activityHistory: newHistory,\n          };\n        });\n        \n        // Check for achievements after completion\n        get().checkAchievements();\n      },\n      \n      rescheduleActivity: (id, newTime) => {\n        set((_state) => ({\n          activities: state.activities.map((activity) =>\n            activity.id === id ? { ...activity, scheduledTime: newTime } : activity\n          ),\n        }));\n      },\n      \n      // Goal management\n      addGoal: (goal) => {\n        const newGoal: Goal = {\n          ...goal,\n          id: `goal-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          progress: 0,\n        };\n        set((_state) => ({\n          goals: [...state.goals, newGoal],\n        }));\n      },\n      \n      updateGoal: (id, updates) => {\n        set((_state) => ({\n          goals: state.goals.map((goal) =>\n            goal.id === id ? { ...goal, ...updates } : goal\n          ),\n        }));\n      },\n      \n      updateGoalProgress: (id, newValue) => {\n        set((_state) => ({\n          goals: state.goals.map((goal) => {\n            if (goal.id === id) {\n              const progress = Math.min((newValue / goal.targetValue) * 100, 100);\n              return {\n                ...goal,\n                currentValue: newValue,\n                progress,\n                status: progress >= 100 ? 'completed' : goal.status,\n                completedDate: progress >= 100 ? new Date() : undefined,\n              };\n            }\n            return goal;\n          }),\n        }));\n        \n        get().checkAchievements();\n      },\n      \n      completeGoal: (id) => {\n        const now = new Date();\n        set((_state) => ({\n          goals: state.goals.map((goal) =>\n            goal.id === id\n              ? {\n                  ...goal,\n                  status: 'completed',\n                  completedDate: now,\n                  progress: 100,\n                  celebrations: [...(goal.celebrations || []), 'Goal completed! Amazing achievement!'],\n                }\n              : goal\n          ),\n        }));\n        \n        get().checkAchievements();\n      },\n      \n      pauseGoal: (id) => {\n        set((_state) => ({\n          goals: state.goals.map((goal) =>\n            goal.id === id ? { ...goal, status: 'paused' } : goal\n          ),\n        }));\n      },\n      \n      abandonGoal: (id, reason) => {\n        set((_state) => ({\n          goals: state.goals.map((goal) =>\n            goal.id === id\n              ? {\n                  ...goal,\n                  status: 'abandoned',\n                  insights: [...(goal.insights || []), reason || 'Goal no longer relevant'],\n                }\n              : goal\n          ),\n        }));\n      },\n      \n      addMilestone: (goalId, milestone) => {\n        const newMilestone: Milestone = {\n          ...milestone,\n          id: `milestone-${Date.now()}`,\n          goalId,\n        };\n        set((_state) => ({\n          goals: state.goals.map((goal) =>\n            goal.id === goalId\n              ? { ...goal, milestones: [...goal.milestones, newMilestone] }\n              : goal\n          ),\n        }));\n      },\n      \n      completeMilestone: (goalId, milestoneId) => {\n        const now = new Date();\n        set((_state) => ({\n          goals: state.goals.map((goal) =>\n            goal.id === goalId\n              ? {\n                  ...goal,\n                  milestones: goal.milestones.map((m) =>\n                    m.id === milestoneId\n                      ? { ...m, completed: true, completedDate: now }\n                      : m\n                  ),\n                }\n              : goal\n          ),\n        }));\n        \n        get().checkAchievements();\n      },\n      \n      // Habit tracking\n      addHabit: (habit) => {\n        const newHabit: Habit = {\n          ...habit,\n          id: `habit-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          currentStreak: 0,\n          longestStreak: 0,\n          totalCompletions: 0,\n        };\n        set((_state) => ({\n          habits: [...state.habits, newHabit],\n        }));\n      },\n      \n      updateHabit: (id, updates) => {\n        set((_state) => ({\n          habits: state.habits.map((habit) =>\n            habit.id === id ? { ...habit, ...updates } : habit\n          ),\n        }));\n      },\n      \n      completeHabit: (id) => {\n        const now = new Date();\n        set((_state) => ({\n          habits: state.habits.map((habit) => {\n            if (habit.id === id) {\n              const lastDate = habit.lastCompleted ? new Date(habit.lastCompleted) : null;\n              const daysSince = lastDate\n                ? Math.floor((now.getTime() - lastDate.getTime()) / (1000 * 60 * 60 * 24))\n                : null;\n              \n              // Check if streak continues (within recovery days)\n              const streakContinues = !daysSince || daysSince <= (habit.recoveryDays + 1);\n              const newStreak = streakContinues ? habit.currentStreak + 1 : 1;\n              \n              return {\n                ...habit,\n                currentStreak: newStreak,\n                longestStreak: Math.max(newStreak, habit.longestStreak),\n                totalCompletions: habit.totalCompletions + 1,\n                lastCompleted: now,\n              };\n            }\n            return habit;\n          }),\n        }));\n        \n        get().checkAchievements();\n      },\n      \n      resetHabitStreak: (id) => {\n        set((_state) => ({\n          habits: state.habits.map((habit) =>\n            habit.id === id ? { ...habit, currentStreak: 0 } : habit\n          ),\n        }));\n      },\n      \n      pauseHabit: (id) => {\n        set((_state) => ({\n          habits: state.habits.map((habit) =>\n            habit.id === id ? { ...habit, isActive: false } : habit\n          ),\n        }));\n      },\n      \n      stackHabits: (habitIds) => {\n        set((_state) => ({\n          habits: state.habits.map((habit) =>\n            habitIds.includes(habit.id)\n              ? { ...habit, stackedWith: habitIds.filter(id => id !== habit.id) }\n              : habit\n          ),\n        }));\n      },\n      \n      // Therapy progress\n      addTherapySession: (session) => {\n        const newSession: TherapyProgress = {\n          ...session,\n          id: `therapy-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        };\n        set((_state) => ({\n          therapyProgress: [...state.therapyProgress, newSession],\n        }));\n      },\n      \n      updateTherapyProgress: (id, updates) => {\n        set((_state) => ({\n          therapyProgress: state.therapyProgress.map((session) =>\n            session.id === id ? { ...session, ...updates } : session\n          ),\n        }));\n      },\n      \n      completeHomework: (sessionId, homeworkId, _notes) => {\n        const now = new Date();\n        set((_state) => ({\n          therapyProgress: state.therapyProgress.map((session) =>\n            session.id === sessionId\n              ? {\n                  ...session,\n                  homework: session.homework.map((hw) =>\n                    hw.id === homeworkId\n                      ? { ...hw, completed: true, completedDate: now }\n                      : hw\n                  ),\n                }\n              : session\n          ),\n        }));\n        \n        get().checkAchievements();\n      },\n      \n      addSkillPractice: (skill) => {\n        // This would add to the most recent therapy session or create a practice log\n        set((state) => {\n          const recentSession = state.therapyProgress\n            .sort((a, b) => b.sessionDate.getTime() - a.sessionDate.getTime())[0];\n          \n          if (_recentSession) {\n            return {\n              therapyProgress: state.therapyProgress.map((session) =>\n                session.id === recentSession.id\n                  ? {\n                      ...session,\n                      skillsPracticed: [...session.skillsPracticed, skill],\n                    }\n                  : session\n              ),\n            };\n          }\n          return state;\n        });\n      },\n      \n      // Achievement system\n      checkAchievements: () => {\n        const state = get();\n        const potentialAchievements: Achievement[] = [];\n        \n        // Check streak achievements\n        state.habits.forEach(habit => {\n          if (habit.currentStreak >= 7 && !state.achievements.find(a => a.id === `streak-7-${habit.id}`)) {\n            potentialAchievements.push({\n              id: `streak-7-${habit.id}`,\n              title: `Week Warrior: ${habit.name}`,\n              description: `Maintained ${habit.name} for 7 days straight!`,\n              category: 'streak',\n              icon: '🔥',\n              requirements: { type: 'streak', target: 7, current: habit.currentStreak },\n              rarity: 'common',\n              points: 50,\n              shared: false,\n            });\n          }\n          \n          if (habit.currentStreak >= 30 && !state.achievements.find(a => a.id === `streak-30-${habit.id}`)) {\n            potentialAchievements.push({\n              id: `streak-30-${habit.id}`,\n              title: `Monthly Master: ${habit.name}`,\n              description: `Incredible! 30 days of ${habit.name}!`,\n              category: 'streak',\n              icon: '🏆',\n              requirements: { type: 'streak', target: 30, current: habit.currentStreak },\n              rarity: 'rare',\n              points: 200,\n              shared: false,\n              celebrationType: 'confetti',\n            });\n          }\n        });\n        \n        // Check goal achievements\n        const completedGoals = state.goals.filter(g => g.status === 'completed');\n        if (completedGoals.length >= 5 && !state.achievements.find(a => a.id === 'goals-5')) {\n          potentialAchievements.push({\n            id: 'goals-5',\n            title: 'Goal Getter',\n            description: 'Completed 5 wellness goals!',\n            category: 'milestone',\n            icon: '🎯',\n            requirements: { type: 'count', target: 5, current: completedGoals.length },\n            rarity: 'rare',\n            points: 150,\n            shared: false,\n          });\n        }\n        \n        // Unlock new achievements\n        potentialAchievements.forEach(achievement => {\n          get().unlockAchievement(achievement.id);\n          set((_state) => ({\n            achievements: [...state.achievements, { ...achievement, unlockedDate: new Date() }],\n          }));\n        });\n      },\n      \n      unlockAchievement: (id) => {\n        const now = new Date();\n        set((_state) => ({\n          achievements: state.achievements.map((achievement) =>\n            achievement.id === id && !achievement.unlockedDate\n              ? { ...achievement, unlockedDate: now }\n              : achievement\n          ),\n        }));\n      },\n      \n      shareAchievement: (id) => {\n        set((_state) => ({\n          achievements: state.achievements.map((achievement) =>\n            achievement.id === id ? { ...achievement, shared: true } : achievement\n          ),\n        }));\n      },\n      \n      // Analytics and insights\n      analyzeActivityEffectiveness: (activityId) => {\n        const state = get();\n        const activityHistory = state.activityHistory.filter(a => a.id === activityId);\n        \n        if (activityHistory.length === 0) {\n          return {\n            activityId,\n            completionRate: 0,\n            averageMoodImpact: 0,\n            energyEfficiency: 0,\n            correlatedActivities: [],\n            effectiveness: 0,\n            recommendations: ['Not enough data to analyze'],\n          };\n        }\n        \n        const completionRate = (activityHistory.filter(a => a.completed).length / activityHistory.length) * 100;\n        const moodImpacts = activityHistory\n          .filter(a => a.actualMoodImpact !== undefined)\n          .map(a => a.actualMoodImpact!);\n        const averageMoodImpact = moodImpacts.length > 0\n          ? moodImpacts.reduce((sum, impact) => sum + impact, 0) / moodImpacts.length\n          : 0;\n        \n        const analytics: ActivityAnalytics = {\n          activityId,\n          completionRate,\n          averageMoodImpact,\n          energyEfficiency: averageMoodImpact / 3, // Simplified calculation\n          correlatedActivities: [],\n          effectiveness: (completionRate * 0.5 + averageMoodImpact * 10),\n          recommendations: [],\n        };\n        \n        // Add recommendations based on analysis\n        if (completionRate < 50) {\n          analytics.recommendations.push('Consider scheduling this activity at a different time');\n        }\n        if (averageMoodImpact > 3) {\n          analytics.recommendations.push('This activity significantly improves your _mood - prioritize it!');\n        }\n        \n        return analytics;\n      },\n      \n      getActivityRecommendations: (energyLevel, _mood) => {\n        const state = get();\n        const recommendations: Activity[] = [];\n        \n        // Filter activities based on energy level and expected _mood impact\n        state.activities.forEach(activity => {\n          if (!activity.completed && activity.energyLevel === energyLevel) {\n            recommendations.push(_activity);\n          }\n        });\n        \n        // Sort by expected mood impact\n        recommendations.sort((a, b) => (b.moodImpact || 0) - (a.moodImpact || 0));\n        \n        return recommendations.slice(0, 5);\n      },\n      \n      getOptimalSchedule: (date) => {\n        const state = get();\n        const dayActivities = state.activities.filter(a => {\n          if (!a.scheduledTime) return false;\n          const activityDate = new Date(a.scheduledTime);\n          return activityDate.toDateString() === date.toDateString();\n        });\n        \n        // Sort by scheduled time\n        dayActivities.sort((a, b) => {\n          if (!a.scheduledTime || !b.scheduledTime) return 0;\n          return a.scheduledTime.getTime() - b.scheduledTime.getTime();\n        });\n        \n        return dayActivities;\n      },\n      \n      correlateActivitiesWithMood: () => {\n        const state = get();\n        const correlations: { activity: string; correlation: number }[] = [];\n        \n        // Group activities by type and calculate mood correlation\n        const activityGroups = new Map<string, number[]>();\n        \n        state.activityHistory.forEach(activity => {\n          if (activity.actualMoodImpact !== undefined) {\n            const impacts = activityGroups.get(activity.title) || [];\n            impacts.push(activity.actualMoodImpact);\n            activityGroups.set(activity.title, impacts);\n          }\n        });\n        \n        activityGroups.forEach((impacts, activityName) => {\n          const avgImpact = impacts.reduce((sum, i) => sum + i, 0) / impacts.length;\n          correlations.push({ activity: activityName, correlation: avgImpact });\n        });\n        \n        // Sort by correlation strength\n        correlations.sort((a, b) => Math.abs(b.correlation) - Math.abs(a.correlation));\n        \n        return correlations;\n      },\n      \n      // Smart scheduling\n      suggestReschedule: (energyLevel) => {\n        const state = get();\n        const today = new Date();\n        const suggestions: Activity[] = [];\n        \n        // Find activities that don't match current energy level\n        state.activities.forEach(activity => {\n          if (!activity.completed && activity.scheduledTime) {\n            const isToday = new Date(activity.scheduledTime).toDateString() === today.toDateString();\n            if (isToday && activity.energyLevel !== energyLevel && activity.flexibility !== 'fixed') {\n              suggestions.push(_activity);\n            }\n          }\n        });\n        \n        return suggestions;\n      },\n      \n      adaptScheduleForBadDay: () => {\n        const state = get();\n        const today = new Date();\n        \n        // Mark optional activities as postponed\n        set((_state) => ({\n          activities: state.activities.map(activity => {\n            if (activity.scheduledTime) {\n              const isToday = new Date(activity.scheduledTime).toDateString() === today.toDateString();\n              if (isToday && activity.flexibility === 'optional' && !activity.completed) {\n                const tomorrow = new Date(_today);\n                tomorrow.setDate(tomorrow.getDate() + 1);\n                return { ...activity, scheduledTime: tomorrow };\n              }\n            }\n            return activity;\n          }),\n        }));\n      },\n      \n      generateDailySchedule: (date) => {\n        const state = get();\n        const schedule: Activity[] = [];\n        \n        // Get recurring activities for this day\n        state.activities.forEach(activity => {\n          if (activity.recurring) {\n            const _dayOfWeek = date.getDay();\n            if (activity.recurring.daysOfWeek?.includes(_dayOfWeek)) {\n              schedule.push({\n                ...activity,\n                scheduledTime: date,\n                id: `${activity.id}-${date.toISOString()}`,\n              });\n            }\n          }\n        });\n        \n        // Add therapy homework if due\n        state.therapyProgress.forEach(session => {\n          session.homework.forEach(hw => {\n            if (!hw.completed && hw.dueDate) {\n              const dueDate = new Date(hw.dueDate);\n              if (dueDate.toDateString() === date.toDateString()) {\n                schedule.push({\n                  id: `homework-${hw.id}`,\n                  title: hw.title,\n                  description: hw.description,\n                  category: 'therapy',\n                  type: 'practice',\n                  scheduledTime: date,\n                  completed: false,\n                  therapyHomework: true,\n                  flexibility: 'flexible',\n                });\n              }\n            }\n          });\n        });\n        \n        set({ dailySchedule: schedule });\n      },\n      \n      // Data management\n      exportProgressReport: () => {\n        const state = get();\n        const report = {\n          exportDate: new Date().toISOString(),\n          activities: state.activities,\n          goals: state.goals,\n          habits: state.habits,\n          therapyProgress: state.therapyProgress,\n          achievements: state.achievements,\n          analytics: state.analytics,\n        };\n        return JSON.stringify(report, null, 2);\n      },\n      \n      importData: (data) => {\n        try {\n          const parsed = JSON.parse(data);\n          set({\n            activities: parsed.activities || [],\n            goals: parsed.goals || [],\n            habits: parsed.habits || [],\n            medications: parsed.medications || [],\n            therapyProgress: parsed.therapyProgress || [],\n            achievements: parsed.achievements || [],\n            analytics: parsed.analytics || [],\n          });\n        } catch (_error) {\n          logger.error('Failed to import data:');\nimport { logger } from '../utils/logger';\n        }\n      },\n      \n      clearAllData: () => {\n        set({\n          activities: [],\n          goals: [],\n          habits: [],\n          medications: [],\n          therapyProgress: [],\n          achievements: [],\n          analytics: [],\n          dailySchedule: [],\n          activityHistory: [],\n        });\n      },\n    }),\n    {\n      name: 'activity-store',\n      partialize: (_state) => ({\n        activities: state.activities,\n        goals: state.goals,\n        habits: state.habits,\n        therapyProgress: state.therapyProgress,\n        achievements: state.achievements,\n        activityHistory: state.activityHistory,\n      }),\n    }\n  )\n);","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\stores\\wellnessStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":667,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":667,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport { immer } from 'zustand/middleware/immer';\n\n// Interfaces for wellness data\nexport interface MoodEntry {\n  id: string;\n  timestamp: Date;\n  moodScore: number;\n  emotions: string[];\n  activities: string[];\n  triggers: string[];\n  notes: string;\n  weather?: string;\n  sleep?: number;\n  exercise?: boolean;\n  medication?: boolean;\n  socialInteraction?: number;\n  location?: string;\n  energyLevel?: number;\n  stressLevel?: number;\n  anxietyLevel?: number;\n}\n\nexport interface WellnessMetrics {\n  date: Date;\n  moodAverage: number;\n  stressAverage: number;\n  sleepHours: number;\n  exerciseMinutes: number;\n  waterIntake: number;\n  meditationMinutes: number;\n  journalEntries: number;\n  socialInteractions: number;\n  outdoorTime: number;\n  screenTime: number;\n  nutritionScore: number;\n  medicationAdherence: boolean;\n  customMetrics: Record<string, number>;\n}\n\nexport interface WellnessGoal {\n  id: string;\n  category: 'physical' | 'mental' | 'emotional' | 'social' | 'spiritual';\n  title: string;\n  description: string;\n  targetValue: number;\n  currentValue: number;\n  unit: string;\n  frequency: 'daily' | 'weekly' | 'monthly';\n  startDate: Date;\n  endDate?: Date;\n  milestones: {\n    value: number;\n    date: Date;\n    achieved: boolean;\n  }[];\n  reminders: {\n    time: string;\n    days: string[];\n    enabled: boolean;\n  }[];\n  progress: number;\n  status: 'active' | 'completed' | 'paused' | 'abandoned';\n  insights: string[];\n}\n\nexport interface MoodPattern {\n  pattern: string;\n  frequency: number;\n  impact: 'positive' | 'negative' | 'neutral';\n  confidence: number;\n  recommendation: string;\n  relatedFactors: string[];\n  timeRange: { start: Date; end: Date };\n}\n\nexport interface WellnessInsight {\n  id: string;\n  type: 'trend' | 'correlation' | 'achievement' | 'warning' | 'recommendation';\n  title: string;\n  description: string;\n  priority: 'high' | 'medium' | 'low';\n  category: string;\n  createdAt: Date;\n  expiresAt?: Date;\n  actionable: boolean;\n  actions?: {\n    label: string;\n    type: string;\n    data: unknown;\n  }[];\n  relatedMetrics: string[];\n  confidence: number;\n}\n\nexport interface CrisisEvent {\n  id: string;\n  timestamp: Date;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  triggers: string[];\n  copingStrategiesUsed: string[];\n  supportContactsReached: string[];\n  outcome: string;\n  duration: number;\n  location?: string;\n  followUpNeeded: boolean;\n  notes: string;\n}\n\nexport interface TherapeuticContent {\n  id: string;\n  type: 'cbt' | 'dbt' | 'act' | 'mindfulness' | 'positive-psychology';\n  category: string;\n  title: string;\n  content: string;\n  exercises: {\n    name: string;\n    description: string;\n    duration: number;\n    difficulty: 'beginner' | 'intermediate' | 'advanced';\n  }[];\n  relatedMoodStates: string[];\n  effectiveness: number;\n  lastUsed?: Date;\n  timesUsed: number;\n  userRating?: number;\n}\n\ninterface WellnessState {\n  // Core data\n  moodEntries: MoodEntry[];\n  wellnessMetrics: WellnessMetrics[];\n  wellnessGoals: WellnessGoal[];\n  crisisEvents: CrisisEvent[];\n  \n  // Analytics\n  moodPatterns: MoodPattern[];\n  wellnessInsights: WellnessInsight[];\n  insights: WellnessInsight[]; // Alias for wellnessInsights (used by dashboard components)\n  weeklyScore: number;\n  monthlyScore: number;\n  yearlyScore: number;\n  \n  // User preferences\n  preferences: {\n    reminderSettings: {\n      moodCheck: { enabled: boolean; times: string[] };\n      medication: { enabled: boolean; times: string[] };\n      exercise: { enabled: boolean; time: string };\n      hydration: { enabled: boolean; interval: number };\n      journaling: { enabled: boolean; time: string };\n    };\n    privacySettings: {\n      shareAnalytics: boolean;\n      allowNotifications: boolean;\n      dataRetentionDays: number;\n    };\n    displaySettings: {\n      theme: 'light' | 'dark' | 'auto';\n      chartType: 'line' | 'bar' | 'area';\n      metricsView: 'detailed' | 'summary';\n    };\n  };\n  \n  // Therapeutic content\n  therapeuticContent: TherapeuticContent[];\n  favoriteExercises: string[];\n  \n  // Actions\n  addMoodEntry: (entry: Omit<MoodEntry, 'id' | 'timestamp'>) => void;\n  updateMoodEntry: (id: string, updates: Partial<MoodEntry>) => void;\n  deleteMoodEntry: (id: string) => void;\n  \n  addWellnessMetric: (metric: Omit<WellnessMetrics, 'date'>) => void;\n  updateWellnessMetric: (date: Date, updates: Partial<WellnessMetrics>) => void;\n  \n  addWellnessGoal: (goal: Omit<WellnessGoal, 'id' | 'progress' | 'status'>) => void;\n  updateWellnessGoal: (id: string, updates: Partial<WellnessGoal>) => void;\n  updateGoalProgress: (id: string, value: number) => void;\n  completeGoal: (id: string) => void;\n  \n  recordCrisisEvent: (event: Omit<CrisisEvent, 'id' | 'timestamp'>) => void;\n  \n  analyzeMoodPatterns: () => void;\n  generateInsights: () => void;\n  calculateWellnessScores: () => void;\n  \n  updatePreferences: (updates: Partial<WellnessState['preferences']>) => void;\n  \n  clearAllData: () => void;\n  exportData: () => string;\n  importData: (data: string) => void;\n}\n\n// Utility functions for analytics\nconst calculateMoodAverage = (entries: MoodEntry[], days: number = 7): number => {\n  const cutoff = new Date();\n  cutoff.setDate(cutoff.getDate() - days);\n  \n  const recentEntries = entries.filter(e => new Date(e.timestamp) >= cutoff);\n  if (recentEntries.length === 0) return 0;\n  \n  return recentEntries.reduce((sum, e) => sum + e.moodScore, 0) / recentEntries.length;\n};\n\nconst detectPatterns = (entries: MoodEntry[]): MoodPattern[] => {\n  const patterns: MoodPattern[] = [];\n  \n  // Sleep-mood correlation\n  const sleepEntries = entries.filter(e => e.sleep !== undefined);\n  if (sleepEntries.length > 5) {\n    const lowSleepEntries = sleepEntries.filter(e => (e.sleep || 0) < 6);\n    const avgMoodLowSleep = lowSleepEntries.reduce((sum, e) => sum + e.moodScore, 0) / (lowSleepEntries.length || 1);\n    const goodSleepEntries = sleepEntries.filter(e => (e.sleep || 0) >= 7);\n    const avgMoodGoodSleep = goodSleepEntries.reduce((sum, e) => sum + e.moodScore, 0) / (goodSleepEntries.length || 1);\n    \n    if (avgMoodGoodSleep - avgMoodLowSleep > 1.5) {\n      patterns.push({\n        pattern: 'Sleep Quality Impact',\n        frequency: sleepEntries.length,\n        impact: 'positive',\n        confidence: 0.85,\n        recommendation: 'Your mood is significantly better with 7+ hours of sleep. Prioritize consistent sleep schedule.',\n        relatedFactors: ['sleep', 'mood', 'energy'],\n        timeRange: {\n          start: new Date(Math.min(...sleepEntries.map(e => new Date(e.timestamp).getTime()))),\n          end: new Date()\n        }\n      });\n    }\n  }\n  \n  // Exercise impact\n  const exerciseEntries = entries.filter(e => e.exercise === true);\n  const noExerciseEntries = entries.filter(e => e.exercise === false);\n  if (exerciseEntries.length > 3 && noExerciseEntries.length > 3) {\n    const avgMoodWithExercise = exerciseEntries.reduce((sum, e) => sum + e.moodScore, 0) / exerciseEntries.length;\n    const avgMoodWithoutExercise = noExerciseEntries.reduce((sum, e) => sum + e.moodScore, 0) / noExerciseEntries.length;\n    \n    if (avgMoodWithExercise - avgMoodWithoutExercise > 1) {\n      patterns.push({\n        pattern: 'Exercise Mood Boost',\n        frequency: exerciseEntries.length,\n        impact: 'positive',\n        confidence: 0.75,\n        recommendation: `Exercise improves your mood by ${((avgMoodWithExercise - avgMoodWithoutExercise) * 10).toFixed(0)}%. Keep up regular physical activity!`,\n        relatedFactors: ['exercise', 'mood', 'energy', 'stress'],\n        timeRange: {\n          start: new Date(Math.min(...entries.map(e => new Date(e.timestamp).getTime()))),\n          end: new Date()\n        }\n      });\n    }\n  }\n  \n  // Social interaction patterns\n  const socialEntries = entries.filter(e => e.socialInteraction !== undefined);\n  if (socialEntries.length > 5) {\n    const highSocialEntries = socialEntries.filter(e => (e.socialInteraction || 0) >= 4);\n    const lowSocialEntries = socialEntries.filter(e => (e.socialInteraction || 0) <= 2);\n    \n    if (highSocialEntries.length > 0 && lowSocialEntries.length > 0) {\n      const avgMoodHighSocial = highSocialEntries.reduce((sum, e) => sum + e.moodScore, 0) / highSocialEntries.length;\n      const avgMoodLowSocial = lowSocialEntries.reduce((sum, e) => sum + e.moodScore, 0) / lowSocialEntries.length;\n      \n      if (avgMoodHighSocial - avgMoodLowSocial > 1.2) {\n        patterns.push({\n          pattern: 'Social Connection Benefits',\n          frequency: socialEntries.length,\n          impact: 'positive',\n          confidence: 0.8,\n          recommendation: 'Social interactions significantly boost your wellbeing. Schedule regular connections with friends and family.',\n          relatedFactors: ['social', 'mood', 'stress', 'anxiety'],\n          timeRange: {\n            start: new Date(Math.min(...socialEntries.map(e => new Date(e.timestamp).getTime()))),\n            end: new Date()\n          }\n        });\n      }\n    }\n  }\n  \n  // Time of day patterns\n  const morningEntries = entries.filter(e => new Date(e.timestamp).getHours() < 12);\n  const eveningEntries = entries.filter(e => new Date(e.timestamp).getHours() >= 18);\n  \n  if (morningEntries.length > 5 && eveningEntries.length > 5) {\n    const avgMorningMood = morningEntries.reduce((sum, e) => sum + e.moodScore, 0) / morningEntries.length;\n    const avgEveningMood = eveningEntries.reduce((sum, e) => sum + e.moodScore, 0) / eveningEntries.length;\n    \n    if (Math.abs(avgMorningMood - avgEveningMood) > 1.5) {\n      const betterTime = avgMorningMood > avgEveningMood ? 'morning' : 'evening';\n      patterns.push({\n        pattern: `${betterTime.charAt(0).toUpperCase() + betterTime.slice(1)} Peak Performance`,\n        frequency: entries.length,\n        impact: 'neutral',\n        confidence: 0.7,\n        recommendation: `You tend to feel better in the ${betterTime}. Schedule important activities during your peak hours.`,\n        relatedFactors: ['time', 'mood', 'energy', 'productivity'],\n        timeRange: {\n          start: new Date(Math.min(...entries.map(e => new Date(e.timestamp).getTime()))),\n          end: new Date()\n        }\n      });\n    }\n  }\n  \n  return patterns;\n};\n\nconst generateWellnessInsights = (\n  entries: MoodEntry[],\n  metrics: WellnessMetrics[],\n  goals: WellnessGoal[]\n): WellnessInsight[] => {\n  const insights: WellnessInsight[] = [];\n  const now = new Date();\n  \n  // Recent mood trend\n  const recentAvg = calculateMoodAverage(entries, 7);\n  const previousAvg = calculateMoodAverage(entries.filter(e => {\n    const date = new Date(e.timestamp);\n    const weekAgo = new Date();\n    weekAgo.setDate(weekAgo.getDate() - 14);\n    const twoWeeksAgo = new Date();\n    twoWeeksAgo.setDate(twoWeeksAgo.getDate() - 21);\n    return date >= twoWeeksAgo && date < weekAgo;\n  }), 7);\n  \n  if (recentAvg > 0 && previousAvg > 0) {\n    const change = ((recentAvg - previousAvg) / previousAvg) * 100;\n    if (Math.abs(_change) > 10) {\n      insights.push({\n        id: `insight-mood-trend-${Date.now()}`,\n        type: change > 0 ? 'trend' : 'warning',\n        title: change > 0 ? 'Mood Improvement Detected' : 'Mood Decline Alert',\n        description: `Your average mood has ${change > 0 ? 'improved' : 'declined'} by ${Math.abs(_change).toFixed(0)}% over the past week.`,\n        priority: Math.abs(_change) > 20 ? 'high' : 'medium',\n        category: 'mood',\n        createdAt: now,\n        actionable: true,\n        actions: change < 0 ? [\n          { label: 'Review coping strategies', type: 'navigate', data: '/wellness/coping' },\n          { label: 'Schedule self-care', type: 'navigate', data: '/wellness/self-care' }\n        ] : [\n          { label: 'Continue current routine', type: 'info', data: null },\n          { label: 'Share progress', type: 'share', data: null }\n        ],\n        relatedMetrics: ['mood', 'stress', 'sleep'],\n        confidence: 0.85\n      });\n    }\n  }\n  \n  // Goal progress insights\n  goals.filter(g => g.status === 'active').forEach(goal => {\n    const progressPercentage = (goal.currentValue / goal.targetValue) * 100;\n    \n    if (progressPercentage >= 100) {\n      insights.push({\n        id: `insight-goal-complete-${goal.id}`,\n        type: 'achievement',\n        title: `Goal Achieved: ${goal.title}`,\n        description: `Congratulations! You've reached your ${goal.title} goal.`,\n        priority: 'high',\n        category: 'goals',\n        createdAt: now,\n        actionable: true,\n        actions: [\n          { label: 'Set new goal', type: 'navigate', data: '/goals/new' },\n          { label: 'View progress', type: 'navigate', data: `/goals/${goal.id}` }\n        ],\n        relatedMetrics: [goal.category],\n        confidence: 1.0\n      });\n    } else if (progressPercentage < 30 && goal.endDate) {\n      const daysRemaining = Math.ceil((new Date(goal.endDate).getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n      if (daysRemaining < 7) {\n        insights.push({\n          id: `insight-goal-risk-${goal.id}`,\n          type: 'warning',\n          title: `Goal at Risk: ${goal.title}`,\n          description: `Only ${daysRemaining} days remaining with ${progressPercentage.toFixed(0)}% progress.`,\n          priority: 'high',\n          category: 'goals',\n          createdAt: now,\n          expiresAt: goal.endDate,\n          actionable: true,\n          actions: [\n            { label: 'Update goal', type: 'navigate', data: `/goals/${goal.id}/edit` },\n            { label: 'Get support', type: 'navigate', data: '/community/support' }\n          ],\n          relatedMetrics: [goal.category],\n          confidence: 0.9\n        });\n      }\n    }\n  });\n  \n  // Stress correlation insights\n  const stressedEntries = entries.filter(e => e.stressLevel && e.stressLevel > 7);\n  if (stressedEntries.length > 3) {\n    const _commonTriggers = stressedEntries\n      .flatMap(e => e.triggers)\n      .reduce((acc, trigger) => {\n        acc[trigger] = (acc[trigger] || 0) + 1;\n        return acc;\n      }, {} as Record<string, number>);\n    \n    const topTrigger = Object.entries(_commonTriggers)\n      .sort((a, b) => b[1] - a[1])[0];\n    \n    if (topTrigger && topTrigger[1] > 2) {\n      insights.push({\n        id: `insight-stress-trigger-${Date.now()}`,\n        type: 'correlation',\n        title: 'Stress Pattern Identified',\n        description: `\"${topTrigger[0]}\" appears to be a recurring stress trigger.`,\n        priority: 'medium',\n        category: 'stress',\n        createdAt: now,\n        actionable: true,\n        actions: [\n          { label: 'Learn coping strategies', type: 'navigate', data: '/wellness/stress-management' },\n          { label: 'Track triggers', type: 'navigate', data: '/mood/triggers' }\n        ],\n        relatedMetrics: ['stress', 'mood', 'anxiety'],\n        confidence: 0.75\n      });\n    }\n  }\n  \n  return insights;\n};\n\n// Create the store\nexport const useWellnessStore = create<WellnessState>()(\n  persist(\n    immer((set, get) => ({\n      // Initial state\n      moodEntries: [],\n      wellnessMetrics: [],\n      wellnessGoals: [],\n      crisisEvents: [],\n      moodPatterns: [],\n      wellnessInsights: [],\n      insights: [],\n      weeklyScore: 0,\n      monthlyScore: 0,\n      yearlyScore: 0,\n      preferences: {\n        reminderSettings: {\n          moodCheck: { enabled: true, times: ['09:00', '21:00'] },\n          medication: { enabled: false, times: [] },\n          exercise: { enabled: true, time: '07:00' },\n          hydration: { enabled: true, interval: 120 },\n          journaling: { enabled: true, time: '20:00' }\n        },\n        privacySettings: {\n          shareAnalytics: false,\n          allowNotifications: true,\n          dataRetentionDays: 365\n        },\n        displaySettings: {\n          theme: 'auto',\n          chartType: 'line',\n          metricsView: 'detailed'\n        }\n      },\n      therapeuticContent: [],\n      favoriteExercises: [],\n      \n      // Actions\n      addMoodEntry: (entry) => set((state) => {\n        const _newEntry: MoodEntry = {\n          ...entry,\n          id: `mood-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          timestamp: new Date()\n        };\n        state.moodEntries.push(_newEntry);\n        \n        // Trigger pattern analysis after adding entry\n        get().analyzeMoodPatterns();\n        get().generateInsights();\n      }),\n      \n      updateMoodEntry: (id, updates) => set((state) => {\n        const index = state.moodEntries.findIndex((e: MoodEntry) => e.id === id);\n        if (index !== -1 && state.moodEntries[index]) {\n          Object.assign(state.moodEntries[index], updates);\n        }\n      }),\n      \n      deleteMoodEntry: (id) => set((state) => {\n        state.moodEntries = state.moodEntries.filter((e: MoodEntry) => e.id !== id);\n      }),\n      \n      addWellnessMetric: (metric) => set((state) => {\n        const _newMetric: WellnessMetrics = {\n          ...metric,\n          date: new Date()\n        };\n        state.wellnessMetrics.push(_newMetric);\n      }),\n      \n      updateWellnessMetric: (date, updates) => set((state) => {\n        const index = state.wellnessMetrics.findIndex((m: WellnessMetrics) => \n          new Date(m.date).toDateString() === date.toDateString()\n        );\n        if (index !== -1 && state.wellnessMetrics[index]) {\n          Object.assign(state.wellnessMetrics[index], updates);\n        }\n      }),\n      \n      addWellnessGoal: (goal) => set((state) => {\n        const _newGoal: WellnessGoal = {\n          ...goal,\n          id: `goal-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          progress: 0,\n          status: 'active'\n        };\n        state.wellnessGoals.push(_newGoal);\n      }),\n      \n      updateWellnessGoal: (id, updates) => set((state) => {\n        const index = state.wellnessGoals.findIndex((g: WellnessGoal) => g.id === id);\n        if (index !== -1 && state.wellnessGoals[index]) {\n          Object.assign(state.wellnessGoals[index], updates);\n        }\n      }),\n      \n      updateGoalProgress: (id, value) => set((state) => {\n        const goal = state.wellnessGoals.find((g: WellnessGoal) => g.id === id);\n        if (goal) {\n          goal.currentValue = value;\n          goal.progress = (value / goal.targetValue) * 100;\n          \n          if (goal.progress >= 100) {\n            goal.status = 'completed';\n          }\n          \n          // Check for milestones\n          goal.milestones.forEach((milestone: unknown) => {\n            if (!milestone.achieved && value >= milestone.value) {\n              milestone.achieved = true;\n              milestone.date = new Date();\n            }\n          });\n        }\n      }),\n      \n      completeGoal: (id) => set((state) => {\n        const goal = state.wellnessGoals.find((g: WellnessGoal) => g.id === id);\n        if (goal) {\n          goal.status = 'completed';\n          goal.progress = 100;\n        }\n      }),\n      \n      recordCrisisEvent: (event) => set((state) => {\n        const _newEvent: CrisisEvent = {\n          ...event,\n          id: `crisis-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          timestamp: new Date()\n        };\n        state.crisisEvents.push(_newEvent);\n      }),\n      \n      analyzeMoodPatterns: () => set((state) => {\n        const entries = state.moodEntries.map((e: unknown) => ({\n          ...e,\n          timestamp: e.timestamp instanceof Date ? e.timestamp : new Date(e.timestamp)\n        }));\n        state.moodPatterns = detectPatterns(entries);\n      }),\n      \n      generateInsights: () => set((state) => {\n        const entries = state.moodEntries.map((e: unknown) => ({\n          ...e,\n          timestamp: e.timestamp instanceof Date ? e.timestamp : new Date(e.timestamp)\n        }));\n        state.wellnessInsights = generateWellnessInsights(\n          entries,\n          state.wellnessMetrics,\n          state.wellnessGoals\n        );\n      }),\n      \n      calculateWellnessScores: () => set((state) => {\n        // Calculate weekly score\n        const weeklyMoodAvg = calculateMoodAverage(state.moodEntries, 7);\n        const weeklyExercise = state.wellnessMetrics\n          .filter((m: WellnessMetrics) => {\n            const date = new Date(m.date);\n            const weekAgo = new Date();\n            weekAgo.setDate(weekAgo.getDate() - 7);\n            return date >= weekAgo;\n          })\n          .reduce((sum: number, m: WellnessMetrics) => sum + (m.exerciseMinutes || 0), 0) / 7;\n        \n        const weeklyGoalProgress = state.wellnessGoals\n          .filter((g: WellnessGoal) => g.status === 'active' && g.frequency === 'weekly')\n          .reduce((sum: number, g: WellnessGoal) => sum + g.progress, 0) / \n          (state.wellnessGoals.filter((g: WellnessGoal) => g.status === 'active' && g.frequency === 'weekly').length || 1);\n        \n        state.weeklyScore = Math.round(\n          (weeklyMoodAvg * 10) * 0.4 +\n          Math.min(weeklyExercise / 30 * 100, 100) * 0.3 +\n          weeklyGoalProgress * 0.3\n        );\n        \n        // Calculate monthly score\n        const monthlyMoodAvg = calculateMoodAverage(state.moodEntries, 30);\n        state.monthlyScore = Math.round(monthlyMoodAvg * 10);\n        \n        // Calculate yearly score\n        const yearlyMoodAvg = calculateMoodAverage(state.moodEntries, 365);\n        state.yearlyScore = Math.round(yearlyMoodAvg * 10);\n      }),\n      \n      updatePreferences: (updates) => set((state) => {\n        state.preferences = {\n          ...state.preferences,\n          ...updates\n        };\n      }),\n      \n      clearAllData: () => set((state) => {\n        state.moodEntries = [];\n        state.wellnessMetrics = [];\n        state.wellnessGoals = [];\n        state.crisisEvents = [];\n        state.moodPatterns = [];\n        state.wellnessInsights = [];\n        state.weeklyScore = 0;\n        state.monthlyScore = 0;\n        state.yearlyScore = 0;\n      }),\n      \n      exportData: () => {\n        const state = get();\n        return JSON.stringify({\n          moodEntries: state.moodEntries,\n          wellnessMetrics: state.wellnessMetrics,\n          wellnessGoals: state.wellnessGoals,\n          crisisEvents: state.crisisEvents,\n          preferences: state.preferences,\n          exportDate: new Date().toISOString(),\n          version: '1.0'\n        }, null, 2);\n      },\n      \n      importData: (_data) => set((state) => {\n        try {\n          const parsed = JSON.parse(_data);\n          if (parsed.moodEntries) state.moodEntries = parsed.moodEntries;\n          if (parsed.wellnessMetrics) state.wellnessMetrics = parsed.wellnessMetrics;\n          if (parsed.wellnessGoals) state.wellnessGoals = parsed.wellnessGoals;\n          if (parsed.crisisEvents) state.crisisEvents = parsed.crisisEvents;\n          if (parsed.preferences) state.preferences = parsed.preferences;\n          \n          // Recalculate analytics after import\n          get().analyzeMoodPatterns();\n          get().generateInsights();\n          get().calculateWellnessScores();\n        } catch (_error) {\n          logger.error('Failed to import data:');\nimport { logger } from '../utils/logger';\n        }\n      })\n    })),\n    {\n      name: 'wellness-storage',\n      storage: createJSONStorage(() => localStorage),\n      partialize: (state) => ({\n        moodEntries: state.moodEntries,\n        wellnessMetrics: state.wellnessMetrics,\n        wellnessGoals: state.wellnessGoals,\n        crisisEvents: state.crisisEvents,\n        preferences: state.preferences,\n        therapeuticContent: state.therapeuticContent,\n        favoriteExercises: state.favoriteExercises\n      })\n    }\n  )\n);","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\styles\\wellness-theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\accessibility\\a11y-crisis.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: '>' expected.","line":28,"column":25}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Automated Accessibility Testing for Crisis Intervention\n * Ensures the platform is usable during mental health emergencies\n * for users with disabilities\n */\n\nimport { describe, it, expect, beforeEach } from 'vitest';\nimport { render, screen, within } from '@testing-library/react';\nimport { axe, toHaveNoViolations } from 'jest-axe';\nimport userEvent from '@testing-library/user-event';\nimport CrisisButton from '../../components/crisis/CrisisButton';\nimport MoodTracker from '../../components/wellness/MoodTracker';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\n// Extend matchers\nexpect.extend(_toHaveNoViolations);\n\n// Test wrapper\nconst TestWrapper = ({ children }: { children: React.ReactNode }) => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: { retry: false },\n      mutations: { retry: false }\n    }\n  });\n  \n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  );\n};\n\ndescribe('Crisis Intervention Accessibility', () => {\n  beforeEach(() => {\n    // Reset any ARIA live regions\n    document.querySelectorAll('[role=\"alert\"], [aria-live]').forEach(el => el.remove());\n  });\n\n  describe('WCAG 2.1 AA Compliance', () => {\n    it('crisis button should have no accessibility violations', async () => {\n      const { container } = render(\n        <TestWrapper>\n          <CrisisButton />\n        </TestWrapper>\n      );\n      \n      const results = await axe(_container);\n      expect(_results).toHaveNoViolations();\n    });\n\n    it('mood tracker should have no accessibility violations', async () => {\n      const { container } = render(\n        <TestWrapper>\n          <MoodTracker />\n        </TestWrapper>\n      );\n      \n      const results = await axe(_container);\n      expect(_results).toHaveNoViolations();\n    });\n\n    it('crisis modal should have no accessibility violations when open', async () => {\n      const user = userEvent.setup();\n      \n      const { container } = render(\n        <TestWrapper>\n          <CrisisButton />\n        </TestWrapper>\n      );\n      \n      const button = screen.getByRole('button', { name: /crisis help/i });\n      await user.click(_button);\n      \n      // Wait for modal to open\n      await screen.findByRole('dialog');\n      \n      const results = await axe(_container);\n      expect(_results).toHaveNoViolations();\n    });\n  });\n\n  describe('Screen Reader Support', () => {\n    it('should announce crisis button purpose clearly', () => {\n      render(\n        <TestWrapper>\n          <CrisisButton />\n        </TestWrapper>\n      );\n      \n      const button = screen.getByRole('button', { name: /crisis help/i });\n      \n      expect(_button).toHaveAttribute('aria-label');\n      expect(_button).toHaveAttribute('aria-describedby');\n      \n      const description = document.getElementById(button.getAttribute('aria-describedby')!);\n      expect(description?.textContent).toMatch(/immediate.*support/i);\n    });\n\n    it('should announce crisis resources using live regions', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <CrisisButton />\n        </TestWrapper>\n      );\n      \n      const button = screen.getByRole('button', { name: /crisis help/i });\n      await user.click(_button);\n      \n      const alertRegion = await screen.findByRole('alert');\n      expect(_alertRegion).toHaveAttribute('aria-live', 'assertive');\n      expect(_alertRegion).toHaveTextContent(/crisis resources/i);\n    });\n\n    it('should provide context for mood levels', () => {\n      render(\n        <TestWrapper>\n          <MoodTracker />\n        </TestWrapper>\n      );\n      \n      const slider = screen.getByRole('slider');\n      \n      expect(_slider).toHaveAttribute('aria-label');\n      expect(_slider).toHaveAttribute('aria-valuemin', '1');\n      expect(_slider).toHaveAttribute('aria-valuemax', '10');\n      expect(_slider).toHaveAttribute('aria-valuenow');\n      expect(_slider).toHaveAttribute('aria-valuetext');\n    });\n\n    it('should announce mood changes to screen readers', async () => {\n      render(\n        <TestWrapper>\n          <MoodTracker />\n        </TestWrapper>\n      );\n      \n      const slider = screen.getByRole('slider');\n      fireEvent.change(slider, { target: { value: '3' } });\n      \n      // Check for live region update\n      const statusRegion = screen.getByRole('status');\n      expect(_statusRegion).toHaveTextContent(/mood.*3/i);\n    });\n  });\n\n  describe('Keyboard Navigation', () => {\n    it('crisis button should be reachable via keyboard', async () => {\n      render(\n        <TestWrapper>\n          <CrisisButton />\n        </TestWrapper>\n      );\n      \n      const button = screen.getByRole('button', { name: /crisis help/i });\n      \n      // Tab to button\n      await userEvent.tab();\n      \n      // Button should be focusable\n      expect(_button).toHaveProperty('tabIndex');\n      expect(button.tabIndex).toBeGreaterThanOrEqual(0);\n    });\n\n    it('crisis modal should trap focus when open', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <CrisisButton />\n        </TestWrapper>\n      );\n      \n      const button = screen.getByRole('button', { name: /crisis help/i });\n      await user.click(_button);\n      \n      const modal = await screen.findByRole('dialog');\n      const focusableElements = modal.querySelectorAll(\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n      );\n      \n      expect(focusableElements.length).toBeGreaterThan(0);\n      \n      // First element should receive focus\n      const firstElement = focusableElements[0] as HTMLElement;\n      expect(document.activeElement).toBe(_firstElement);\n    });\n\n    it('should close modal with Escape key', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <CrisisButton />\n        </TestWrapper>\n      );\n      \n      const button = screen.getByRole('button', { name: /crisis help/i });\n      await user.click(_button);\n      \n      await screen.findByRole('dialog');\n      \n      await user.keyboard('{Escape}');\n      \n      expect(screen.queryByRole('dialog')).not.toBeInTheDocument();\n    });\n\n    it('mood tracker should be fully keyboard operable', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <MoodTracker />\n        </TestWrapper>\n      );\n      \n      // Tab to slider\n      await user.tab();\n      const slider = screen.getByRole('slider');\n      expect(document.activeElement).toBe(_slider);\n      \n      // Adjust with arrow keys\n      await user.keyboard('{ArrowRight}');\n      expect(_slider).toHaveAttribute('aria-valuenow', '6');\n      \n      await user.keyboard('{ArrowLeft}');\n      expect(_slider).toHaveAttribute('aria-valuenow', '5');\n      \n      // Tab to notes field\n      await user.tab();\n      const notesField = screen.getByPlaceholderText(/add notes/i);\n      expect(document.activeElement).toBe(_notesField);\n      \n      // Tab to submit button\n      await user.tab();\n      const submitButton = screen.getByRole('button', { name: /log mood/i });\n      expect(document.activeElement).toBe(_submitButton);\n    });\n  });\n\n  describe('Color Contrast and Visual Design', () => {\n    it('crisis button should have sufficient color contrast', () => {\n      const { container } = render(\n        <TestWrapper>\n          <CrisisButton />\n        </TestWrapper>\n      );\n      \n      const button = container.querySelector('button');\n      const styles = window.getComputedStyle(button!);\n      \n      // Red background with white text should meet WCAG AA standards\n      // This is a simplified check - real testing would calculate actual contrast ratio\n      expect(styles.backgroundColor).toMatch(/rgb.*red|#[ef][0-9a-f]{5}/i);\n      expect(styles.color).toMatch(/white|#fff|rgb\\(255,\\s*255,\\s*255\\)/i);\n    });\n\n    it('should support high contrast mode', () => {\n      // Simulate high contrast mode\n      window.matchMedia = vi.fn().mockImplementation(query => ({\n        matches: query === '(prefers-contrast: high)',\n        media: query,\n        addEventListener: vi.fn(),\n        removeEventListener: vi.fn(),\n      }));\n      \n      render(\n        <TestWrapper>\n          <CrisisButton />\n        </TestWrapper>\n      );\n      \n      const button = screen.getByRole('button', { name: /crisis help/i });\n      expect(button.className).toMatch(/contrast|high-contrast/i);\n    });\n\n    it('focus indicators should be clearly visible', () => {\n      render(\n        <TestWrapper>\n          <CrisisButton />\n        </TestWrapper>\n      );\n      \n      const button = screen.getByRole('button', { name: /crisis help/i });\n      button.focus();\n      \n      const styles = window.getComputedStyle(_button);\n      \n      // Should have visible focus indicator\n      expect(styles.outline).not.toBe('none');\n      expect(styles.outlineWidth).not.toBe('0px');\n    });\n  });\n\n  describe('Touch and Mobile Accessibility', () => {\n    it('crisis button should have adequate touch target size', () => {\n      render(\n        <TestWrapper>\n          <CrisisButton />\n        </TestWrapper>\n      );\n      \n      const button = screen.getByRole('button', { name: /crisis help/i });\n      const rect = button.getBoundingClientRect();\n      \n      // WCAG 2.5.5 Target Size (Level AAA) - minimum 44x44 pixels\n      expect(rect.width).toBeGreaterThanOrEqual(44);\n      expect(rect.height).toBeGreaterThanOrEqual(44);\n    });\n\n    it('should have adequate spacing between interactive elements', () => {\n      const { container } = render(\n        <TestWrapper>\n          <MoodTracker />\n        </TestWrapper>\n      );\n      \n      const buttons = container.querySelectorAll('button');\n      \n      // Check spacing between buttons\n      for (let i = 0; i < buttons.length - 1; i++) {\n        const rect1 = buttons[i].getBoundingClientRect();\n        const rect2 = buttons[i + 1].getBoundingClientRect();\n        \n        const verticalGap = Math.abs(rect2.top - rect1.bottom);\n        const horizontalGap = Math.abs(rect2.left - rect1.right);\n        \n        // At least 8px spacing (simplified check)\n        const minGap = Math.min(verticalGap, horizontalGap);\n        expect(_minGap).toBeGreaterThanOrEqual(8);\n      }\n    });\n  });\n\n  describe('Cognitive Accessibility', () => {\n    it('should use clear, simple language for crisis resources', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <CrisisButton />\n        </TestWrapper>\n      );\n      \n      const button = screen.getByRole('button', { name: /crisis help/i });\n      await user.click(_button);\n      \n      // Check for clear, simple instructions\n      expect(screen.getByText('988')).toBeInTheDocument();\n      expect(screen.getByText(/call 911/i)).toBeInTheDocument();\n      \n      // No complex medical jargon in crisis mode\n      const modalText = screen.getByRole('dialog').textContent;\n      expect(_modalText).not.toMatch(/psychiatric|psychological assessment/i);\n    });\n\n    it('should provide clear error messages', async () => {\n      const user = userEvent.setup();\n      \n      // Mock network error\n      window.fetch = vi.fn().mockRejectedValue(new Error('Network error'));\n      \n      render(\n        <TestWrapper>\n          <MoodTracker />\n        </TestWrapper>\n      );\n      \n      const submitButton = screen.getByRole('button', { name: /log mood/i });\n      await user.click(_submitButton);\n      \n      const errorMessage = await screen.findByText(/failed.*try again/i);\n      expect(errorMessage).toBeInTheDocument();\n      \n      // Error should be associated with form\n      expect(errorMessage.closest('[role=\"alert\"]')).toBeInTheDocument();\n    });\n\n    it('should maintain consistent navigation patterns', () => {\n      const { rerender } = render(\n        <TestWrapper>\n          <CrisisButton />\n        </TestWrapper>\n      );\n      \n      const button1 = screen.getByRole('button', { name: /crisis help/i });\n      const position1 = button1.getBoundingClientRect();\n      \n      // Re-render (simulating navigation)\n      rerender(\n        <TestWrapper>\n          <CrisisButton />\n        </TestWrapper>\n      );\n      \n      const button2 = screen.getByRole('button', { name: /crisis help/i });\n      const position2 = button2.getBoundingClientRect();\n      \n      // Button should be in same location\n      expect(position2.top).toBe(position1.top);\n      expect(position2.left).toBe(position1.left);\n    });\n  });\n\n  describe('Reduced Motion Support', () => {\n    it('should respect prefers-reduced-motion', () => {\n      // Simulate reduced motion preference\n      window.matchMedia = vi.fn().mockImplementation(query => ({\n        matches: query === '(prefers-reduced-motion: reduce)',\n        media: query,\n        addEventListener: vi.fn(),\n        removeEventListener: vi.fn(),\n      }));\n      \n      const { container } = render(\n        <TestWrapper>\n          <CrisisButton />\n        </TestWrapper>\n      );\n      \n      const button = container.querySelector('button');\n      const styles = window.getComputedStyle(button!);\n      \n      // Transitions should be instant or very fast\n      expect(styles.transitionDuration).toMatch(/0s|0\\.0+1s/);\n    });\n  });\n\n  describe('Emergency Override Features', () => {\n    it('should bypass authentication for crisis resources', async () => {\n      const user = userEvent.setup();\n      \n      // Render without authentication context\n      render(<CrisisButton />);\n      \n      const button = screen.getByRole('button', { name: /crisis help/i });\n      await user.click(_button);\n      \n      // Crisis resources should still be accessible\n      expect(await screen.findByText('988')).toBeInTheDocument();\n    });\n\n    it('should provide fallback text for images', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <CrisisButton />\n        </TestWrapper>\n      );\n      \n      const button = screen.getByRole('button', { name: /crisis help/i });\n      await user.click(_button);\n      \n      const images = screen.getAllByRole('img');\n      \n      images.forEach(img => {\n        expect(_img).toHaveAttribute('alt');\n        expect(img.getAttribute('alt')).not.toBe('');\n      });\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\accessibility\\accessibility.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\accessibility\\wcag-compliance.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: '>' expected.","line":18,"column":42}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// WCAG 2.1 AA Accessibility Compliance Testing Suite\n// Ensures the mental health platform is fully accessible to users with disabilities\n\nimport { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\nimport { render, screen, fireEvent, waitFor, within } from '@testing-library/react';\nimport { axe, toHaveNoViolations } from 'jest-axe';\nimport userEvent from '@testing-library/user-event';\n\n// Extend expect with axe matchers\nexpect.extend(_toHaveNoViolations);\n\ndescribe('WCAG 2.1 AA Compliance Tests', () => {\n  \n  describe('1. Perceivable - Information and UI components must be presentable', () => {\n    \n    describe('1.1 Text Alternatives', () => {\n      it('should provide text alternatives for all non-text content', async () => {\n        const { container } = render(<App />);\n        \n        // Check all images have alt text\n        const images = container.querySelectorAll('img');\n        images.forEach(img => {\n          expect(img).toHaveAttribute('alt');\n          // Alt text should be meaningful, not empty (unless decorative)\n          const alt = img.getAttribute('alt');\n          if (!img.hasAttribute('role') || img.getAttribute('role') !== 'presentation') {\n            expect(_alt).not.toBe('');\n            expect(alt?.length).toBeGreaterThan(0);\n          }\n        });\n        \n        // Check icons have labels\n        const icons = container.querySelectorAll('[data-icon], .icon, svg[role=\"img\"]');\n        icons.forEach(icon => {\n          const label = icon.getAttribute('aria-label') || \n                       icon.getAttribute('title') ||\n                       icon.querySelector('title')?.textContent;\n          expect(_label).toBeTruthy();\n        });\n        \n        // Check videos have captions\n        const videos = container.querySelectorAll('video');\n        videos.forEach(video => {\n          const tracks = video.querySelectorAll('track[kind=\"captions\"]');\n          expect(tracks.length).toBeGreaterThan(0);\n        });\n        \n        // Check audio has transcripts\n        const audioElements = container.querySelectorAll('audio');\n        audioElements.forEach(audio => {\n          const transcriptId = audio.getAttribute('aria-describedby');\n          if (_transcriptId) {\n            const transcript = document.getElementById(_transcriptId);\n            expect(_transcript).toBeInTheDocument();\n          }\n        });\n      });\n      \n      it('should handle complex images like charts with descriptions', async () => {\n        render(<App />);\n        \n        // Navigate to wellness tracking with charts\n        const wellnessLink = await screen.findByRole('link', { name: /wellness/i });\n        fireEvent.click(_wellnessLink);\n        \n        await waitFor(() => {\n          const charts = document.querySelectorAll('canvas, [role=\"img\"][data-chart]');\n          charts.forEach(chart => {\n            // Check for accessible description\n            const describedBy = chart.getAttribute('aria-describedby');\n            if (describedBy) {\n              const description = document.getElementById(describedBy);\n              expect(_description).toBeInTheDocument();\n              expect(description?.textContent?.length).toBeGreaterThan(20);\n            } else {\n              // Alternative: should have detailed aria-label\n              const label = chart.getAttribute('aria-label');\n              expect(label?.length).toBeGreaterThan(20);\n            }\n          });\n        });\n      });\n    });\n    \n    describe('1.2 Time-based Media', () => {\n      it('should provide captions for videos', async () => {\n        const { container } = render(<App />);\n        \n        const videos = container.querySelectorAll('video');\n        videos.forEach(video => {\n          // Check for caption tracks\n          const captionTracks = video.querySelectorAll('track[kind=\"captions\"]');\n          expect(captionTracks.length).toBeGreaterThan(0);\n          \n          // Check default caption track\n          const defaultTrack = video.querySelector('track[default]');\n          expect(_defaultTrack).toBeInTheDocument();\n        });\n      });\n      \n      it('should provide audio descriptions for videos when needed', async () => {\n        const { container } = render(<App />);\n        \n        const videos = container.querySelectorAll('video[data-has-visual-content]');\n        videos.forEach(video => {\n          const audioDescTrack = video.querySelector('track[kind=\"descriptions\"]');\n          expect(_audioDescTrack).toBeInTheDocument();\n        });\n      });\n    });\n    \n    describe('1.3 Adaptable', () => {\n      it('should maintain content structure without CSS', async () => {\n        const { container } = render(<App />);\n        \n        // Remove all stylesheets\n        const styleSheets = document.querySelectorAll('style, link[rel=\"stylesheet\"]');\n        const originalStyles = Array.from(styleSheets).map(sheet => sheet.cloneNode(true));\n        styleSheets.forEach(sheet => sheet.remove());\n        \n        // Content should still be readable and in logical order\n        const headings = container.querySelectorAll('h1, h2, h3, h4, h5, h6');\n        expect(headings.length).toBeGreaterThan(0);\n        \n        // Navigation should still be identifiable\n        const nav = container.querySelector('nav, [role=\"navigation\"]');\n        expect(_nav).toBeInTheDocument();\n        \n        // Main content should be identifiable\n        const main = container.querySelector('main, [role=\"main\"]');\n        expect(_main).toBeInTheDocument();\n        \n        // Restore styles\n        originalStyles.forEach(style => document.head.appendChild(_style));\n      });\n      \n      it('should have proper semantic HTML structure', async () => {\n        const { container } = render(<App />);\n        \n        // Check for landmarks\n        expect(container.querySelector('header, [role=\"banner\"]')).toBeInTheDocument();\n        expect(container.querySelector('nav, [role=\"navigation\"]')).toBeInTheDocument();\n        expect(container.querySelector('main, [role=\"main\"]')).toBeInTheDocument();\n        expect(container.querySelector('footer, [role=\"contentinfo\"]')).toBeInTheDocument();\n        \n        // Check heading hierarchy\n        const headings = Array.from(container.querySelectorAll('h1, h2, h3, h4, h5, h6'));\n        let previousLevel = 0;\n        \n        headings.forEach(heading => {\n          const level = parseInt(heading.tagName[1]);\n          // Should not skip heading levels\n          expect(level - previousLevel).toBeLessThanOrEqual(1);\n          previousLevel = level;\n        });\n      });\n    });\n    \n    describe('1.4 Distinguishable', () => {\n      it('should have sufficient color contrast (4.5:1 for normal text, 3:1 for large)', async () => {\n        const { container } = render(<App />);\n        \n        // Use axe for contrast checking\n        const results = await axe(container, {\n          rules: {\n            'color-contrast': { enabled: true }\n          }\n        });\n        \n        expect(_results).toHaveNoViolations();\n      });\n      \n      it('should not use color as the only means of conveying information', async () => {\n        render(<App />);\n        \n        // Check error messages have icons or text, not just color\n        const errorElements = document.querySelectorAll('[data-error], .error');\n        errorElements.forEach(error => {\n          const hasText = error.textContent?.length > 0;\n          const hasIcon = error.querySelector('[data-icon], .icon, svg');\n          const hasAriaLabel = error.hasAttribute('aria-label');\n          \n          expect(hasText || hasIcon || hasAriaLabel).toBe(true);\n        });\n        \n        // Check success messages\n        const successElements = document.querySelectorAll('[data-success], .success');\n        successElements.forEach(success => {\n          const hasText = success.textContent?.length > 0;\n          const hasIcon = success.querySelector('[data-icon], .icon, svg');\n          const hasAriaLabel = success.hasAttribute('aria-label');\n          \n          expect(hasText || hasIcon || hasAriaLabel).toBe(true);\n        });\n      });\n      \n      it('should allow text resize up to 200% without horizontal scrolling', async () => {\n        const { container } = render(<App />);\n        \n        // Set zoom to 200%\n        document.documentElement.style.fontSize = '32px'; // Default is usually 16px\n        \n        await waitFor(() => {\n          const viewportWidth = window.innerWidth;\n          const contentWidth = container.scrollWidth;\n          \n          // Content should not exceed viewport width\n          expect(_contentWidth).toBeLessThanOrEqual(_viewportWidth);\n        });\n        \n        // Reset\n        document.documentElement.style.fontSize = '';\n      });\n    });\n  });\n  \n  describe('2. Operable - UI components and navigation must be operable', () => {\n    \n    describe('2.1 Keyboard Accessible', () => {\n      it('should make all functionality available via keyboard', async () => {\n        render(<App />);\n        \n        // Tab through all interactive elements\n        const interactiveElements = document.querySelectorAll(\n          'a, button, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n        );\n        \n        let previousElement: Element | null = null;\n        \n        for (const element of interactiveElements) {\n          userEvent.tab();\n          \n          // Check element receives focus\n          await waitFor(() => {\n            expect(document.activeElement).toBe(_element);\n          });\n          \n          // Ensure tab order is logical (no jumping around)\n          if (previousElement) {\n            const prevRect = previousElement.getBoundingClientRect();\n            const currentRect = element.getBoundingClientRect();\n            \n            // Generally, tab order should go left-to-right, top-to-bottom\n            const isLogical = currentRect.top >= prevRect.top || \n                            (currentRect.top === prevRect.top && currentRect.left >= prevRect.left);\n            expect(_isLogical).toBe(true);\n          }\n          \n          previousElement = element;\n        }\n      });\n      \n      it('should not trap keyboard focus', async () => {\n        render(<App />);\n        \n        // Open a modal/dialog\n        const openModalButton = await screen.findByRole('button', { name: /settings/i });\n        fireEvent.click(_openModalButton);\n        \n        const modal = await screen.findByRole('dialog');\n        expect(_modal).toBeInTheDocument();\n        \n        // Should be able to close with Escape\n        userEvent.keyboard('{Escape}');\n        \n        await waitFor(() => {\n          expect(_modal).not.toBeInTheDocument();\n        });\n      });\n      \n      it('should provide keyboard shortcuts for critical features', async () => {\n        render(<App />);\n        \n        // Test crisis hotkey (Ctrl+Shift+H for help)\n        userEvent.keyboard('{Control>}{Shift>}h{/Control}{/Shift}');\n        \n        await waitFor(() => {\n          expect(screen.getByRole('button', { name: /988/i })).toBeInTheDocument();\n        });\n        \n        // Test search shortcut (Ctrl+K or Cmd+K)\n        userEvent.keyboard('{Control>}k{/Control}');\n        \n        await waitFor(() => {\n          const searchInput = screen.getByRole('searchbox');\n          expect(document.activeElement).toBe(_searchInput);\n        });\n      });\n    });\n    \n    describe('2.2 Enough Time', () => {\n      it('should allow users to extend time limits', async () => {\n        vi.useFakeTimers();\n        render(<App />);\n        \n        // Simulate session timeout warning\n        vi.advanceTimersByTime(25 * 60 * 1000); // 25 minutes\n        \n        await waitFor(() => {\n          const warningDialog = screen.getByRole('dialog', { name: /session.*expire/i });\n          expect(_warningDialog).toBeInTheDocument();\n          \n          // Should have option to extend\n          const extendButton = within(_warningDialog).getByRole('button', { name: /extend/i });\n          expect(_extendButton).toBeInTheDocument();\n        });\n        \n        vi.useRealTimers();\n      });\n      \n      it('should allow pausing of auto-updating content', async () => {\n        render(<App />);\n        \n        // Find auto-updating content (like live crisis chat status)\n        const liveRegions = document.querySelectorAll('[aria-live]');\n        \n        liveRegions.forEach(region => {\n          // Should have pause control nearby\n          const container = region.closest('[data-live-container]') || region.parentElement;\n          const pauseButton = container?.querySelector('[aria-label*=\"pause\"], button:has-text(\"pause\")');\n          expect(_pauseButton).toBeInTheDocument();\n        });\n      });\n    });\n    \n    describe('2.3 Seizures and Physical Reactions', () => {\n      it('should not have content that flashes more than 3 times per second', async () => {\n        const { container } = render(<App />);\n        \n        // Check animations\n        const animatedElements = container.querySelectorAll('[data-animated], .animated, [class*=\"pulse\"], [class*=\"flash\"]');\n        \n        animatedElements.forEach(element => {\n          const styles = window.getComputedStyle(_element);\n          const animationDuration = styles.animationDuration;\n          \n          if (animationDuration && animationDuration !== 'none') {\n            const duration = parseFloat(_animationDuration);\n            // If animation repeats, ensure it's not too fast\n            expect(_duration).toBeGreaterThan(0.333); // Not faster than 3Hz\n          }\n        });\n      });\n      \n      it('should respect prefers-reduced-motion', async () => {\n        // Mock reduced motion preference\n        window.matchMedia = vi.fn().mockImplementation(query => ({\n          matches: query === '(prefers-reduced-motion: reduce)',\n          media: query,\n          addEventListener: vi.fn(),\n          removeEventListener: vi.fn()\n        }));\n        \n        const { container } = render(<App />);\n        \n        // Check that animations are disabled\n        const animatedElements = container.querySelectorAll('[data-animated], .animated');\n        animatedElements.forEach(element => {\n          const styles = window.getComputedStyle(_element);\n          expect(styles.animationDuration).toBe('0s');\n        });\n      });\n    });\n    \n    describe('2.4 Navigable', () => {\n      it('should provide skip links', async () => {\n        render(<App />);\n        \n        // Tab once to reveal skip link\n        userEvent.tab();\n        \n        const skipLink = await screen.findByRole('link', { name: /skip to main content/i });\n        expect(_skipLink).toBeInTheDocument();\n        \n        // Click skip link\n        fireEvent.click(_skipLink);\n        \n        // Focus should be on main content\n        const main = document.querySelector('main');\n        expect(document.activeElement).toBe(_main);\n      });\n      \n      it('should have descriptive page titles', async () => {\n        render(<App />);\n        \n        expect(document.title).toBeTruthy();\n        expect(document.title.length).toBeGreaterThan(10);\n        \n        // Navigate to different page\n        const wellnessLink = await screen.findByRole('link', { name: /wellness/i });\n        fireEvent.click(_wellnessLink);\n        \n        await waitFor(() => {\n          expect(document.title).toContain('Wellness');\n        });\n      });\n      \n      it('should have clear focus indicators', async () => {\n        const { container } = render(<App />);\n        \n        const focusableElements = container.querySelectorAll(\n          'a, button, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n        );\n        \n        focusableElements.forEach(element => {\n          element.focus();\n          \n          const styles = window.getComputedStyle(_element);\n          const outline = styles.outline;\n          const boxShadow = styles.boxShadow;\n          const border = styles.border;\n          \n          // Should have visible focus indicator\n          const hasVisibleFocus = \n            (outline && outline !== 'none') ||\n            (boxShadow && boxShadow !== 'none') ||\n            (border && border !== styles.getPropertyValue('border'));\n          \n          expect(_hasVisibleFocus).toBe(true);\n        });\n      });\n      \n      it('should provide breadcrumb navigation', async () => {\n        render(<App />);\n        \n        // Navigate to a sub-page\n        const therapyLink = await screen.findByRole('link', { name: /therapy/i });\n        fireEvent.click(_therapyLink);\n        \n        await waitFor(() => {\n          const breadcrumb = screen.getByRole('navigation', { name: /breadcrumb/i });\n          expect(_breadcrumb).toBeInTheDocument();\n          \n          const breadcrumbLinks = within(_breadcrumb).getAllByRole('link');\n          expect(breadcrumbLinks.length).toBeGreaterThan(0);\n        });\n      });\n    });\n    \n    describe('2.5 Input Modalities', () => {\n      it('should have touch targets of at least 44x44 CSS pixels', async () => {\n        const { container } = render(<App />);\n        \n        const touchTargets = container.querySelectorAll('button, a, input, select, textarea');\n        \n        touchTargets.forEach(target => {\n          const rect = target.getBoundingClientRect();\n          \n          // WCAG 2.5.5 Level AAA recommends 44x44 pixels\n          expect(rect.width).toBeGreaterThanOrEqual(44);\n          expect(rect.height).toBeGreaterThanOrEqual(44);\n        });\n      });\n      \n      it('should not require complex gestures', async () => {\n        const { container } = render(<App />);\n        \n        // Check that all interactions can be done with simple clicks/taps\n        const interactiveElements = container.querySelectorAll('[data-gesture]');\n        \n        interactiveElements.forEach(element => {\n          // Should have alternative simple interaction\n          const hasClickHandler = element.hasAttribute('onclick') || \n                                 element.matches('button, a, [role=\"button\"]');\n          expect(_hasClickHandler).toBe(true);\n        });\n      });\n    });\n  });\n  \n  describe('3. Understandable - Information and UI operation must be understandable', () => {\n    \n    describe('3.1 Readable', () => {\n      it('should specify the language of the page', () => {\n        expect(document.documentElement).toHaveAttribute('lang');\n        const lang = document.documentElement.getAttribute('lang');\n        expect(_lang).toMatch(/^[a-z]{2}(-[A-Z]{2})?$/); // e.g., 'en' or 'en-US'\n      });\n      \n      it('should use clear and simple language for crisis resources', async () => {\n        render(<App />);\n        \n        // Navigate to crisis resources\n        testUtils.triggerCrisis();\n        \n        await waitFor(() => {\n          const crisisText = screen.getByTestId('crisis-instructions');\n          const text = crisisText.textContent;\n          \n          // Check readability (simple heuristics)\n          const words = text?.split(' ') || [];\n          const avgWordLength = words.reduce((sum, word) => sum + word.length, 0) / words.length;\n          \n          // Crisis instructions should use simple words\n          expect(_avgWordLength).toBeLessThan(7); // Simple words\n          \n          // Should avoid jargon\n          const jargonWords = ['psychiatric', 'psychotherapy', 'cognitive-behavioral'];\n          jargonWords.forEach(jargon => {\n            expect(text?.toLowerCase()).not.toContain(_jargon);\n          });\n        });\n      });\n    });\n    \n    describe('3.2 Predictable', () => {\n      it('should not change context on focus', async () => {\n        render(<App />);\n        \n        const inputs = await screen.findAllByRole('textbox');\n        \n        for (const input of inputs) {\n          const initialUrl = window.location.href;\n          \n          input.focus();\n          \n          // URL should not change\n          expect(window.location.href).toBe(_initialUrl);\n          \n          // No new windows/modals should open\n          expect(screen.queryByRole('dialog')).not.toBeInTheDocument();\n        }\n      });\n      \n      it('should have consistent navigation', async () => {\n        const { rerender } = render(<App />);\n        \n        const navItems1 = screen.getAllByRole('navigation')[0].querySelectorAll('a');\n        const navOrder1 = Array.from(_navItems1).map(a => a.textContent);\n        \n        // Navigate to different page and back\n        fireEvent.click(navItems1[1]);\n        await new Promise(resolve => setTimeout(resolve, 100));\n        \n        rerender(<App />);\n        \n        const navItems2 = screen.getAllByRole('navigation')[0].querySelectorAll('a');\n        const navOrder2 = Array.from(_navItems2).map(a => a.textContent);\n        \n        // Navigation order should remain consistent\n        expect(_navOrder2).toEqual(_navOrder1);\n      });\n    });\n    \n    describe('3.3 Input Assistance', () => {\n      it('should provide clear error messages', async () => {\n        render(<App />);\n        \n        // Try submitting invalid form\n        const form = await screen.findByRole('form', { name: /mood.*track/i });\n        const submitButton = within(_form).getByRole('button', { name: /submit/i });\n        \n        fireEvent.click(_submitButton);\n        \n        await waitFor(() => {\n          const errorMessages = screen.getAllByRole('alert');\n          \n          errorMessages.forEach(error => {\n            // Error should be descriptive\n            expect(error.textContent?.length).toBeGreaterThan(10);\n            \n            // Should suggest how to fix\n            expect(error.textContent).toMatch(/please|must|should|required/i);\n          });\n        });\n      });\n      \n      it('should provide labels for all form inputs', async () => {\n        const { container } = render(<App />);\n        \n        const inputs = container.querySelectorAll('input, select, textarea');\n        \n        inputs.forEach(input => {\n          const id = input.getAttribute('id');\n          \n          // Should have associated label\n          const label = container.querySelector(`label[for=\"${id}\"]`);\n          const ariaLabel = input.getAttribute('aria-label');\n          const ariaLabelledBy = input.getAttribute('aria-labelledby');\n          \n          expect(label || ariaLabel || ariaLabelledBy).toBeTruthy();\n        });\n      });\n      \n      it('should provide help text for complex inputs', async () => {\n        render(<App />);\n        \n        // Find date/time inputs or other complex fields\n        const complexInputs = document.querySelectorAll(\n          'input[type=\"date\"], input[type=\"time\"], input[pattern], select[multiple]'\n        );\n        \n        complexInputs.forEach(input => {\n          const describedBy = input.getAttribute('aria-describedby');\n          \n          if (describedBy) {\n            const helpText = document.getElementById(describedBy);\n            expect(_helpText).toBeInTheDocument();\n            expect(helpText?.textContent?.length).toBeGreaterThan(0);\n          }\n        });\n      });\n    });\n  });\n  \n  describe('4. Robust - Content must be robust enough for assistive technologies', () => {\n    \n    describe('4.1 Compatible', () => {\n      it('should have valid HTML', async () => {\n        const { container } = render(<App />);\n        \n        // Check for duplicate IDs\n        const allIds = Array.from(container.querySelectorAll('[id]')).map(el => el.id);\n        const uniqueIds = new Set(allIds);\n        expect(allIds.length).toBe(uniqueIds.size);\n        \n        // Check for proper nesting\n        const invalidNesting = container.querySelectorAll('p p, p div, button button, a a');\n        expect(invalidNesting.length).toBe(0);\n        \n        // Check ARIA attributes are valid\n        const ariaElements = container.querySelectorAll('[aria-label], [aria-labelledby], [aria-describedby]');\n        ariaElements.forEach(element => {\n          const labelledBy = element.getAttribute('aria-labelledby');\n          const describedBy = element.getAttribute('aria-describedby');\n          \n          if (labelledBy) {\n            const ids = labelledBy.split(' ');\n            ids.forEach(id => {\n              expect(document.getElementById(_id)).toBeInTheDocument();\n            });\n          }\n          \n          if (describedBy) {\n            const ids = describedBy.split(' ');\n            ids.forEach(id => {\n              expect(document.getElementById(_id)).toBeInTheDocument();\n            });\n          }\n        });\n      });\n      \n      it('should use proper ARIA roles', async () => {\n        const { container } = render(<App />);\n        \n        // Check that ARIA roles are used correctly\n        const roledElements = container.querySelectorAll('[role]');\n        \n        roledElements.forEach(element => {\n          const role = element.getAttribute('role');\n          \n          // Common valid roles\n          const validRoles = [\n            'button', 'link', 'navigation', 'main', 'banner', 'contentinfo',\n            'search', 'form', 'region', 'alert', 'dialog', 'menu', 'menuitem',\n            'tab', 'tabpanel', 'complementary', 'article', 'img', 'heading'\n          ];\n          \n          expect(_validRoles).toContain(_role);\n        });\n      });\n      \n      it('should work with screen readers', async () => {\n        const { container } = render(<App />);\n        \n        // Check for screen reader only content\n        const srOnly = container.querySelectorAll('.sr-only, .visually-hidden, [aria-hidden=\"false\"]');\n        expect(srOnly.length).toBeGreaterThan(0);\n        \n        // Check live regions for dynamic updates\n        const liveRegions = container.querySelectorAll('[aria-live]');\n        expect(liveRegions.length).toBeGreaterThan(0);\n        \n        liveRegions.forEach(region => {\n          const liveValue = region.getAttribute('aria-live');\n          expect(['polite', 'assertive', 'off']).toContain(_liveValue);\n        });\n      });\n    });\n  });\n  \n  describe('Mental Health Specific Accessibility', () => {\n    it('should provide calming UI during crisis with reduced cognitive load', async () => {\n      testUtils.triggerCrisis();\n      \n      await waitFor(() => {\n        const crisisUI = screen.getByTestId('crisis-intervention-ui');\n        \n        // Should have simplified layout\n        const buttons = within(_crisisUI).getAllByRole('button');\n        expect(buttons.length).toBeLessThanOrEqual(5); // Limited choices\n        \n        // Should use clear, large text\n        buttons.forEach(button => {\n          const styles = window.getComputedStyle(_button);\n          const fontSize = parseFloat(styles.fontSize);\n          expect(_fontSize).toBeGreaterThanOrEqual(18); // Large text\n        });\n      });\n    });\n    \n    it('should provide multiple input methods for users with different abilities', async () => {\n      render(<App />);\n      \n      // Check for voice input option\n      const voiceButton = screen.queryByRole('button', { name: /voice/i });\n      expect(_voiceButton).toBeInTheDocument();\n      \n      // Check for visual mood selection\n      const moodIcons = screen.queryAllByRole('button', { name: /mood/i });\n      expect(moodIcons.length).toBeGreaterThan(0);\n      \n      // Check for text input option\n      const textInput = screen.queryByRole('textbox', { name: /feeling/i });\n      expect(_textInput).toBeInTheDocument();\n    });\n    \n    it('should handle users with anxiety by avoiding sudden changes', async () => {\n      const { container } = render(<App />);\n      \n      // Check for smooth transitions\n      const transitionElements = container.querySelectorAll('[data-transition], .transition');\n      transitionElements.forEach(element => {\n        const styles = window.getComputedStyle(_element);\n        const transition = styles.transition;\n        \n        if (transition && transition !== 'none') {\n          // Transitions should be smooth, not instant\n          expect(_transition).toMatch(/\\d+(\\.\\d+)?s/); // Has duration\n        }\n      });\n      \n      // No auto-playing videos or sounds\n      const videos = container.querySelectorAll('video[autoplay]');\n      const audios = container.querySelectorAll('audio[autoplay]');\n      expect(videos.length).toBe(0);\n      expect(audios.length).toBe(0);\n    });\n  });\n  \n  describe('Automated Accessibility Testing', () => {\n    it('should pass automated axe accessibility audit', async () => {\n      const { container } = render(<App />);\n      \n      const results = await axe(container, {\n        rules: {\n          // Run all WCAG 2.1 Level AA rules\n          'wcag2a': { enabled: true },\n          'wcag2aa': { enabled: true },\n          'wcag21a': { enabled: true },\n          'wcag21aa': { enabled: true },\n          'best-practice': { enabled: true }\n        }\n      });\n      \n      expect(_results).toHaveNoViolations();\n    });\n    \n    it('should pass accessibility audit for crisis mode', async () => {\n      testUtils.triggerCrisis();\n      \n      await waitFor(async () => {\n        const crisisUI = screen.getByTestId('crisis-intervention-ui');\n        const results = await axe(_crisisUI);\n        expect(_results).toHaveNoViolations();\n      });\n    });\n    \n    it('should maintain accessibility in different color modes', async () => {\n      const { container } = render(<App />);\n      \n      // Test light mode\n      document.documentElement.setAttribute('data-theme', 'light');\n      let results = await axe(container);\n      expect(_results).toHaveNoViolations();\n      \n      // Test dark mode\n      document.documentElement.setAttribute('data-theme', 'dark');\n      results = await axe(container);\n      expect(_results).toHaveNoViolations();\n      \n      // Test high contrast mode\n      document.documentElement.setAttribute('data-theme', 'high-contrast');\n      results = await axe(container);\n      expect(_results).toHaveNoViolations();\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\compatibility\\cross-platform.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: '>' expected.","line":94,"column":44}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Cross-Platform Compatibility Testing Suite\n// Ensures the mental health platform works flawlessly across all devices and browsers\n\nimport { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { testUtils } from '../setup';\n\ndescribe('Cross-Platform Compatibility Tests', () => {\n  // Browser configurations\n  const browsers = [\n    {\n      name: 'Chrome',\n      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n      features: { webp: true, serviceWorker: true, notifications: true }\n    },\n    {\n      name: 'Firefox',\n      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/120.0',\n      features: { webp: true, serviceWorker: true, notifications: true }\n    },\n    {\n      name: 'Safari',\n      userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 14_0) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15',\n      features: { webp: false, serviceWorker: true, notifications: false }\n    },\n    {\n      name: 'Edge',\n      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0',\n      features: { webp: true, serviceWorker: true, notifications: true }\n    },\n    {\n      name: 'Samsung Internet',\n      userAgent: 'Mozilla/5.0 (Linux; Android 10; SM-G973F) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/19.0 Chrome/102.0.0.0 Mobile Safari/537.36',\n      features: { webp: true, serviceWorker: true, notifications: true }\n    }\n  ];\n\n  // Mobile device configurations\n  const mobileDevices = [\n    {\n      name: 'iPhone 14 Pro',\n      userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15',\n      viewport: { width: 393, height: 852 },\n      pixelRatio: 3,\n      touch: true,\n      orientation: 'portrait'\n    },\n    {\n      name: 'iPhone SE',\n      userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15',\n      viewport: { width: 375, height: 667 },\n      pixelRatio: 2,\n      touch: true,\n      orientation: 'portrait'\n    },\n    {\n      name: 'Samsung Galaxy S23',\n      userAgent: 'Mozilla/5.0 (Linux; Android 13; SM-S911B) AppleWebKit/537.36',\n      viewport: { width: 360, height: 780 },\n      pixelRatio: 3,\n      touch: true,\n      orientation: 'portrait'\n    },\n    {\n      name: 'Google Pixel 7',\n      userAgent: 'Mozilla/5.0 (Linux; Android 13; Pixel 7) AppleWebKit/537.36',\n      viewport: { width: 412, height: 915 },\n      pixelRatio: 2.6,\n      touch: true,\n      orientation: 'portrait'\n    },\n    {\n      name: 'iPad Pro 12.9',\n      userAgent: 'Mozilla/5.0 (iPad; CPU OS 16_0 like Mac OS X) AppleWebKit/605.1.15',\n      viewport: { width: 1024, height: 1366 },\n      pixelRatio: 2,\n      touch: true,\n      orientation: 'portrait'\n    }\n  ];\n\n  describe('Browser Compatibility', () => {\n    browsers.forEach(browser => {\n      describe(`${browser.name} Browser`, () => {\n        beforeEach(() => {\n          Object.defineProperty(window.navigator, 'userAgent', {\n            value: browser.userAgent,\n            writable: true\n          });\n        });\n\n        it('should render core mental health features', async () => {\n          const { container } = render(<App />);\n          \n          await waitFor(() => {\n            expect(screen.getByRole('navigation')).toBeInTheDocument();\n            expect(screen.getByText(/wellness/i)).toBeInTheDocument();\n            expect(screen.getByText(/crisis.*help/i)).toBeInTheDocument();\n            expect(screen.getByRole('button', { name: /mood/i })).toBeInTheDocument();\n          });\n        });\n\n        it('should handle service worker registration', async () => {\n          if (browser.features.serviceWorker) {\n            const mockServiceWorker = {\n              register: vi.fn().mockResolvedValue({ scope: '/' })\n            };\n            Object.defineProperty(navigator, 'serviceWorker', {\n              value: mockServiceWorker,\n              writable: true\n            });\n\n            render(<App />);\n            \n            await waitFor(() => {\n              expect(mockServiceWorker.register).toHaveBeenCalledWith(\n                expect.stringContaining('service-worker')\n              );\n            });\n          }\n        });\n\n        it('should handle notifications API', async () => {\n          if (browser.features.notifications) {\n            const mockNotification = vi.fn();\n            global.Notification = mockNotification;\n            mockNotification.permission = 'default';\n            mockNotification.requestPermission = vi.fn().mockResolvedValue('granted');\n\n            render(<App />);\n            \n            const enableNotifications = await screen.findByRole('button', { \n              name: /enable.*notifications/i \n            });\n            fireEvent.click(_enableNotifications);\n\n            await waitFor(() => {\n              expect(mockNotification.requestPermission).toHaveBeenCalled();\n            });\n          }\n        });\n\n        it('should handle local storage for wellness data', () => {\n          const testData = {\n            mood: 7,\n            journal: 'Feeling better today',\n            timestamp: Date.now()\n          };\n\n          localStorage.setItem('wellness_data', JSON.stringify(_testData));\n          \n          render(<App />);\n          \n          const stored = localStorage.getItem('wellness_data');\n          expect(_stored).toBeTruthy();\n          expect(JSON.parse(stored!)).toEqual(_testData);\n        });\n\n        it('should support WebP images with fallback', async () => {\n          const supportsWebP = browser.features.webp;\n          \n          const { container } = render(<App />);\n          \n          const images = container.querySelectorAll('img');\n          images.forEach(img => {\n            if (_supportsWebP) {\n              expect(img.src).toMatch(/\\.webp$|\\.webp\\?/);\n            } else {\n              expect(img.src).toMatch(/\\.jpg$|\\.png$|\\.svg$/);\n            }\n          });\n        });\n      });\n    });\n  });\n\n  describe('Mobile Device Compatibility', () => {\n    mobileDevices.forEach(device => {\n      describe(`${device.name}`, () => {\n        beforeEach(() => {\n          // Set user agent\n          Object.defineProperty(window.navigator, 'userAgent', {\n            value: device.userAgent,\n            writable: true\n          });\n\n          // Set viewport\n          Object.defineProperty(window, 'innerWidth', {\n            value: device.viewport.width,\n            writable: true\n          });\n          Object.defineProperty(window, 'innerHeight', {\n            value: device.viewport.height,\n            writable: true\n          });\n\n          // Set pixel ratio\n          Object.defineProperty(window, 'devicePixelRatio', {\n            value: device.pixelRatio,\n            writable: true\n          });\n\n          // Mock touch events\n          if (device.touch) {\n            window.ontouchstart = () => {};\n          }\n        });\n\n        it('should have responsive layout', async () => {\n          const { container } = render(<App />);\n          \n          await waitFor(() => {\n            const mainContent = container.querySelector('main');\n            expect(_mainContent).toBeInTheDocument();\n            \n            const styles = window.getComputedStyle(mainContent!);\n            const width = parseInt(styles.width);\n            \n            expect(_width).toBeLessThanOrEqual(device.viewport.width);\n          });\n        });\n\n        it('should have appropriate touch targets', async () => {\n          render(<App />);\n          \n          const buttons = await screen.findAllByRole('button');\n          \n          buttons.forEach(button => {\n            const rect = button.getBoundingClientRect();\n            // WCAG 2.5.5: Target size should be at least 44x44 CSS pixels\n            expect(rect.width).toBeGreaterThanOrEqual(44);\n            expect(rect.height).toBeGreaterThanOrEqual(44);\n          });\n        });\n\n        it('should handle touch gestures', async () => {\n          const { container } = render(<App />);\n          \n          const swipeableElement = container.querySelector('[data-swipeable]');\n          if (_swipeableElement) {\n            const touchStart = new TouchEvent('touchstart', {\n              touches: [{ clientX: 100, clientY: 100 } as Touch]\n            });\n            const touchMove = new TouchEvent('touchmove', {\n              touches: [{ clientX: 200, clientY: 100 } as Touch]\n            });\n            const touchEnd = new TouchEvent('touchend');\n\n            fireEvent(swipeableElement, touchStart);\n            fireEvent(swipeableElement, touchMove);\n            fireEvent(swipeableElement, touchEnd);\n\n            await waitFor(() => {\n              expect(_swipeableElement).toHaveAttribute('data-swiped');\n            });\n          }\n        });\n\n        it('should optimize images for mobile', async () => {\n          const { container } = render(<App />);\n          \n          const images = container.querySelectorAll('img');\n          images.forEach(img => {\n            // Check for responsive images\n            expect(img).toHaveAttribute('srcset');\n            \n            // Check for lazy loading\n            expect(img).toHaveAttribute('loading', 'lazy');\n            \n            // Check for appropriate sizing\n            const rect = img.getBoundingClientRect();\n            expect(rect.width).toBeLessThanOrEqual(device.viewport.width);\n          });\n        });\n\n        it('should handle orientation changes', async () => {\n          const { container } = render(<App />);\n          \n          // Portrait orientation\n          window.innerWidth = device.viewport.width;\n          window.innerHeight = device.viewport.height;\n          window.dispatchEvent(new Event('orientationchange'));\n\n          await waitFor(() => {\n            const layout = container.querySelector('[data-orientation]');\n            expect(_layout).toHaveAttribute('data-orientation', 'portrait');\n          });\n\n          // Landscape orientation\n          window.innerWidth = device.viewport.height;\n          window.innerHeight = device.viewport.width;\n          window.dispatchEvent(new Event('orientationchange'));\n\n          await waitFor(() => {\n            const layout = container.querySelector('[data-orientation]');\n            expect(_layout).toHaveAttribute('data-orientation', 'landscape');\n          });\n        });\n      });\n    });\n  });\n\n  describe('PWA Functionality', () => {\n    it('should install as PWA on supported devices', async () => {\n      const mockBeforeInstallPrompt = vi.fn();\n      window.addEventListener('beforeinstallprompt', mockBeforeInstallPrompt);\n\n      const installEvent = new Event('beforeinstallprompt');\n      installEvent.preventDefault = vi.fn();\n      installEvent.prompt = vi.fn();\n      \n      window.dispatchEvent(_installEvent);\n\n      render(<App />);\n      \n      await waitFor(() => {\n        const installButton = screen.queryByRole('button', { name: /install/i });\n        if (_installButton) {\n          fireEvent.click(_installButton);\n          expect(installEvent.prompt).toHaveBeenCalled();\n        }\n      });\n    });\n\n    it('should work offline after installation', async () => {\n      // Simulate offline\n      Object.defineProperty(navigator, 'onLine', {\n        value: false,\n        writable: true\n      });\n\n      render(<App />);\n      \n      await waitFor(() => {\n        expect(screen.getByText(/offline.*mode/i)).toBeInTheDocument();\n        expect(screen.getByText(/wellness/i)).toBeInTheDocument();\n        expect(screen.getByText(/crisis.*help/i)).toBeInTheDocument();\n      });\n    });\n\n    it('should sync data when coming back online', async () => {\n      const _mockSync = vi.fn();\n      \n      // Start offline\n      Object.defineProperty(navigator, 'onLine', {\n        value: false,\n        writable: true\n      });\n\n      render(<App />);\n      \n      // Make changes while offline\n      const moodButton = await screen.findByRole('button', { name: /track.*mood/i });\n      fireEvent.click(_moodButton);\n\n      // Come back online\n      Object.defineProperty(navigator, 'onLine', {\n        value: true,\n        writable: true\n      });\n      window.dispatchEvent(new Event('online'));\n\n      await waitFor(() => {\n        expect(screen.getByText(/syncing/i)).toBeInTheDocument();\n      });\n\n      await waitFor(() => {\n        expect(screen.getByText(/synced/i)).toBeInTheDocument();\n      }, { timeout: 5000 });\n    });\n  });\n\n  describe('Responsive Design', () => {\n    const breakpoints = [\n      { name: 'Mobile', width: 320, height: 568 },\n      { name: 'Tablet', width: 768, height: 1024 },\n      { name: 'Desktop', width: 1920, height: 1080 },\n      { name: 'Ultra-wide', width: 3440, height: 1440 }\n    ];\n\n    breakpoints.forEach(breakpoint => {\n      it(`should adapt layout for ${breakpoint.name} (${breakpoint.width}x${breakpoint.height})`, async () => {\n        window.innerWidth = breakpoint.width;\n        window.innerHeight = breakpoint.height;\n        window.dispatchEvent(new Event('resize'));\n\n        const { container } = render(<App />);\n        \n        await waitFor(() => {\n          const navigation = container.querySelector('nav');\n          const sidebar = container.querySelector('[data-sidebar]');\n          \n          if (breakpoint.width < 768) {\n            // Mobile layout\n            expect(_navigation).toHaveClass('mobile-nav');\n            expect(_sidebar).not.toBeVisible();\n          } else if (breakpoint.width < 1024) {\n            // Tablet layout\n            expect(_navigation).toHaveClass('tablet-nav');\n            expect(_sidebar).toHaveAttribute('data-collapsed', 'true');\n          } else {\n            // Desktop layout\n            expect(_navigation).toHaveClass('desktop-nav');\n            expect(_sidebar).toBeVisible();\n          }\n        });\n      });\n    });\n  });\n\n  describe('Input Method Compatibility', () => {\n    it('should support keyboard navigation', async () => {\n      render(<App />);\n      \n      // Tab through interactive elements\n      const firstButton = await screen.findByRole('button');\n      firstButton.focus();\n      \n      userEvent.tab();\n      expect(document.activeElement).not.toBe(_firstButton);\n      expect(document.activeElement?.tagName).toMatch(/BUTTON|A|INPUT/i);\n      \n      // Enter/Space activation\n      userEvent.keyboard('{Enter}');\n      await waitFor(() => {\n        expect(document.activeElement).toHaveAttribute('aria-expanded');\n      });\n    });\n\n    it('should support voice input', async () => {\n      const mockSpeechRecognition = vi.fn();\n      mockSpeechRecognition.prototype.start = vi.fn();\n      mockSpeechRecognition.prototype.stop = vi.fn();\n      \n      global.webkitSpeechRecognition = mockSpeechRecognition;\n      \n      render(<App />);\n      \n      const voiceButton = await screen.findByRole('button', { name: /voice/i });\n      fireEvent.click(_voiceButton);\n      \n      expect(mockSpeechRecognition.prototype.start).toHaveBeenCalled();\n    });\n\n    it('should support gesture controls', async () => {\n      // Mock gesture events\n      const mockGesture = {\n        scale: 1.5,\n        rotation: 0\n      };\n      \n      const { container } = render(<App />);\n      \n      const gestureElement = container.querySelector('[data-gesture-enabled]');\n      if (_gestureElement) {\n        const gestureStart = new Event('gesturestart');\n        const gestureChange = new Event('gesturechange');\n        Object.assign(gestureChange, mockGesture);\n        \n        fireEvent(gestureElement, gestureStart);\n        fireEvent(gestureElement, gestureChange);\n        \n        await waitFor(() => {\n          const transform = window.getComputedStyle(_gestureElement).transform;\n          expect(_transform).toContain('scale');\n        });\n      }\n    });\n  });\n\n  describe('Network Conditions', () => {\n    const networkConditions = [\n      { type: '4g', rtt: 50, downlink: 10 },\n      { type: '3g', rtt: 100, downlink: 1.5 },\n      { type: '2g', rtt: 300, downlink: 0.25 },\n      { type: 'slow-2g', rtt: 400, downlink: 0.05 }\n    ];\n\n    networkConditions.forEach(network => {\n      it(`should adapt to ${network.type} network`, async () => {\n        Object.defineProperty(navigator, 'connection', {\n          value: {\n            effectiveType: network.type,\n            rtt: network.rtt,\n            downlink: network.downlink\n          },\n          writable: true\n        });\n\n        render(<App />);\n        \n        await waitFor(() => {\n          if (network.downlink < 0.5) {\n            // Low bandwidth optimizations\n            expect(screen.getByText(/low.*bandwidth/i)).toBeInTheDocument();\n            \n            // Check for reduced quality images\n            const images = document.querySelectorAll('img');\n            images.forEach(img => {\n              expect(img.src).toContain('quality=low');\n            });\n          }\n        });\n      });\n    });\n  });\n\n  describe('Browser Feature Detection', () => {\n    it('should detect and handle missing features gracefully', async () => {\n      const features = {\n        'Service Worker': 'serviceWorker' in navigator,\n        'Web Share': 'share' in navigator,\n        'Notification': 'Notification' in window,\n        'Geolocation': 'geolocation' in navigator,\n        'WebRTC': 'RTCPeerConnection' in window,\n        'WebGL': !!document.createElement('canvas').getContext('webgl'),\n        'IndexedDB': 'indexedDB' in window\n      };\n\n      render(<App />);\n      \n      for (const [feature, supported] of Object.entries(_features)) {\n        if (!supported) {\n          // Should show fallback for unsupported features\n          const fallbackElement = await screen.findByTestId(`fallback-${feature.toLowerCase().replace(' ', '-')}`);\n          expect(_fallbackElement).toBeInTheDocument();\n        }\n      }\n    });\n  });\n\n  describe('Localization and Internationalization', () => {\n    const locales = ['en-US', 'es-ES', 'fr-FR', 'de-DE', 'ja-JP', 'zh-CN'];\n    \n    locales.forEach(locale => {\n      it(`should display correctly for ${locale} locale`, async () => {\n        Object.defineProperty(navigator, 'language', {\n          value: locale,\n          writable: true\n        });\n\n        render(<App />);\n        \n        await waitFor(() => {\n          // Check date formatting\n          const dateElements = document.querySelectorAll('[data-date]');\n          dateElements.forEach(el => {\n            const date = new Date(el.getAttribute('data-date')!);\n            const formatted = new Intl.DateTimeFormat(locale).format(_date);\n            expect(el.textContent).toContain(_formatted);\n          });\n\n          // Check number formatting\n          const numberElements = document.querySelectorAll('[data-number]');\n          numberElements.forEach(el => {\n            const number = parseFloat(el.getAttribute('data-number')!);\n            const formatted = new Intl.NumberFormat(locale).format(_number);\n            expect(el.textContent).toContain(_formatted);\n          });\n        });\n      });\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\crisis\\CrisisScenarioTesting.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":351,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":351,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":390,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":390,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":484,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":484,"endColumn":20}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Comprehensive Crisis Scenario Testing - Ensures all crisis systems work flawlessly\r\n// CRITICAL: These tests validate life-safety systems\r\n\r\nimport { MockCrisisServer, _MockCrisisSession } from '../../services/crisis/MockCrisisServer';\r\nimport { mockWebSocketAdapter } from '../../services/crisis/MockWebSocketAdapter';\r\nimport { assessCrisisSeverity, _CRISIS_ASSESSMENT_QUESTIONS } from '../../services/crisis/emergencyServices';\r\nimport { offlineCrisisResources } from '../../services/crisis/OfflineCrisisResources';\r\nimport { logger } from '../../utils/logger';\r\n\r\n// Test scenario types\r\nexport interface CrisisTestScenario {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  responses: Record<string, number>;\r\n  expectedOutcome: {\r\n    severity: 'low' | 'medium' | 'high' | 'critical';\r\n    requiresImmediate: boolean;\r\n    shouldTriggerEmergency: boolean;\r\n    minimumRiskFactors: number;\r\n    expectedActions: string[];\r\n  };\r\n  testSteps: string[];\r\n}\r\n\r\nexport interface TestResult {\r\n  scenarioId: string;\r\n  passed: boolean;\r\n  duration: number;\r\n  errors: string[];\r\n  warnings: string[];\r\n  details: {\r\n    assessmentResult?: unknown;\r\n    emergencyTriggered?: boolean;\r\n    responseTime?: number;\r\n    counselorAssigned?: boolean;\r\n    offlineResourcesAvailable?: boolean;\r\n  };\r\n}\r\n\r\n// Comprehensive crisis test scenarios based on clinical cases\r\nexport const CRISIS_TEST_SCENARIOS: CrisisTestScenario[] = [\r\n  {\r\n    id: 'critical-suicide-triad',\r\n    name: 'Critical: Complete Suicide Triad',\r\n    description: 'Tests response to immediate suicide risk with plan and means',\r\n    severity: 'critical',\r\n    responses: {\r\n      'safety': 1,           // Not at all safe\r\n      'self-harm-thoughts': 1, // Yes to self-harm thoughts\r\n      'self-harm-plan': 1,     // Yes to plan\r\n      'self-harm-means': 1,    // Yes to means\r\n      'support-available': 0,  // No support\r\n      'overwhelm-level': 5,    // Unbearably overwhelmed\r\n      'hopelessness': 5,       // Completely hopeless\r\n      'impulsivity': 1         // High impulsivity\r\n    },\r\n    expectedOutcome: {\r\n      severity: 'critical',\r\n      requiresImmediate: true,\r\n      shouldTriggerEmergency: true,\r\n      minimumRiskFactors: 4,\r\n      expectedActions: ['Call 988 or 911 immediately', 'Remove all means of self-harm']\r\n    },\r\n    testSteps: [\r\n      'Submit critical assessment responses',\r\n      'Verify immediate emergency protocol activation',\r\n      'Confirm auto-dial functionality triggers',\r\n      'Check location sharing activation',\r\n      'Verify continuous monitoring activation'\r\n    ]\r\n  },\r\n  {\r\n    id: 'high-risk-ideation-history',\r\n    name: 'High Risk: Ideation with History',\r\n    description: 'Tests response to high risk with previous attempts',\r\n    severity: 'high',\r\n    responses: {\r\n      'safety': 2,             // Somewhat unsafe\r\n      'self-harm-thoughts': 1, // Yes to thoughts\r\n      'self-harm-plan': 0,     // No specific plan\r\n      'support-available': 0,  // No support\r\n      'overwhelm-level': 4,    // Extremely overwhelmed\r\n      'hopelessness': 4,       // Extremely hopeless\r\n      'substance-use': 1,      // Yes to substance use\r\n      'previous-attempts': 1   // Previous attempts\r\n    },\r\n    expectedOutcome: {\r\n      severity: 'high',\r\n      requiresImmediate: true,\r\n      shouldTriggerEmergency: false,\r\n      minimumRiskFactors: 3,\r\n      expectedActions: ['Contact crisis hotline immediately', 'Go to emergency room']\r\n    },\r\n    testSteps: [\r\n      'Submit high-risk assessment responses',\r\n      'Verify urgent intervention protocols',\r\n      'Check crisis counselor assignment priority',\r\n      'Confirm safety plan activation',\r\n      'Verify support network notification'\r\n    ]\r\n  },\r\n  {\r\n    id: 'medium-risk-overwhelm',\r\n    name: 'Medium Risk: Severe Overwhelm',\r\n    description: 'Tests response to medium risk crisis',\r\n    severity: 'medium',\r\n    responses: {\r\n      'safety': 3,             // Neutral safety\r\n      'self-harm-thoughts': 1, // Yes to thoughts\r\n      'support-available': 1,  // Has support\r\n      'overwhelm-level': 4,    // Extremely overwhelmed\r\n      'hopelessness': 3,       // Very hopeless\r\n      'substance-use': 0       // No substance use\r\n    },\r\n    expectedOutcome: {\r\n      severity: 'medium',\r\n      requiresImmediate: false,\r\n      shouldTriggerEmergency: false,\r\n      minimumRiskFactors: 2,\r\n      expectedActions: ['Call crisis text line', 'Use safety plan']\r\n    },\r\n    testSteps: [\r\n      'Submit medium-risk responses',\r\n      'Verify appropriate intervention level',\r\n      'Check counselor assignment timing',\r\n      'Confirm resource recommendations',\r\n      'Verify follow-up scheduling'\r\n    ]\r\n  },\r\n  {\r\n    id: 'low-risk-stress',\r\n    name: 'Low Risk: General Stress',\r\n    description: 'Tests response to low-level crisis',\r\n    severity: 'low',\r\n    responses: {\r\n      'safety': 4,            // Mostly safe\r\n      'self-harm-thoughts': 0, // No self-harm thoughts\r\n      'support-available': 1, // Has support\r\n      'overwhelm-level': 3,   // Very overwhelmed\r\n      'hopelessness': 2       // Moderately hopeless\r\n    },\r\n    expectedOutcome: {\r\n      severity: 'low',\r\n      requiresImmediate: false,\r\n      shouldTriggerEmergency: false,\r\n      minimumRiskFactors: 0,\r\n      expectedActions: ['Practice coping strategies', 'Reach out to support network']\r\n    },\r\n    testSteps: [\r\n      'Submit low-risk responses',\r\n      'Verify supportive intervention',\r\n      'Check resource recommendations',\r\n      'Confirm self-care guidance',\r\n      'Verify monitoring protocols'\r\n    ]\r\n  },\r\n  {\r\n    id: 'impulsive-high-risk',\r\n    name: 'Critical: Impulsive High Risk',\r\n    description: 'Tests response to impulsive crisis with immediate danger',\r\n    severity: 'critical',\r\n    responses: {\r\n      'safety': 1,             // Not at all safe\r\n      'self-harm-thoughts': 1, // Yes to thoughts\r\n      'impulsivity': 1,        // High impulsivity\r\n      'substance-use': 1,      // Substance use present\r\n      'overwhelm-level': 5,    // Unbearably overwhelmed\r\n      'previous-attempts': 1   // Previous attempts\r\n    },\r\n    expectedOutcome: {\r\n      severity: 'critical',\r\n      requiresImmediate: true,\r\n      shouldTriggerEmergency: true,\r\n      minimumRiskFactors: 3,\r\n      expectedActions: ['Call 988 or 911 immediately', 'Ensure continuous supervision']\r\n    },\r\n    testSteps: [\r\n      'Submit impulsive high-risk responses',\r\n      'Verify immediate emergency response',\r\n      'Check rapid counselor assignment',\r\n      'Confirm continuous monitoring',\r\n      'Verify support network activation'\r\n    ]\r\n  },\r\n  {\r\n    id: 'isolated-hopeless',\r\n    name: 'High Risk: Isolation with Hopelessness',\r\n    description: 'Tests response to dangerous isolation patterns',\r\n    severity: 'high',\r\n    responses: {\r\n      'safety': 2,            // Somewhat unsafe\r\n      'self-harm-thoughts': 0, // No immediate thoughts\r\n      'support-available': 0, // No support available\r\n      'overwhelm-level': 4,   // Extremely overwhelmed\r\n      'hopelessness': 5,      // Completely hopeless\r\n      'substance-use': 1      // Substance use\r\n    },\r\n    expectedOutcome: {\r\n      severity: 'high',\r\n      requiresImmediate: true,\r\n      shouldTriggerEmergency: false,\r\n      minimumRiskFactors: 2,\r\n      expectedActions: ['Contact crisis hotline immediately', 'Create immediate safety plan']\r\n    },\r\n    testSteps: [\r\n      'Submit isolation/hopelessness responses',\r\n      'Verify escalated intervention',\r\n      'Check social connection protocols',\r\n      'Confirm safety planning activation',\r\n      'Verify professional referral'\r\n    ]\r\n  }\r\n];\r\n\r\n// Crisis System Testing Suite\r\nexport class CrisisScenarioTester {\r\n  private testResults: TestResult[] = [];\r\n  private mockServer: MockCrisisServer;\r\n\r\n  constructor() {\r\n    this.mockServer = MockCrisisServer.getInstance();\r\n  }\r\n\r\n  // Run all crisis scenarios\r\n  public async runAllScenarios(): Promise<TestResult[]> {\r\n    logger.info('Starting comprehensive crisis scenario testing...', 'CrisisScenarioTesting');\r\n    this.testResults = [];\r\n\r\n    for (const scenario of CRISIS_TEST_SCENARIOS) {\r\n      const result = await this.runScenario(scenario);\r\n      this.testResults.push(result);\r\n    }\r\n\r\n    await this.runSystemIntegrationTests();\r\n    await this.runPerformanceTests();\r\n    await this.runOfflineTests();\r\n\r\n    return this.testResults;\r\n  }\r\n\r\n  // Run individual scenario\r\n  public async runScenario(scenario: CrisisTestScenario): Promise<TestResult> {\r\n    const startTime = performance.now();\r\n    const result: TestResult = {\r\n      scenarioId: scenario.id,\r\n      passed: false,\r\n      duration: 0,\r\n      errors: [],\r\n      warnings: [],\r\n      details: {}\r\n    };\r\n\r\n    try {\r\n      logger.info(`Running scenario: ${scenario.name}`, 'CrisisScenarioTesting');\r\n\r\n      // Test crisis assessment\r\n      const assessmentResult = await this.testCrisisAssessment(scenario);\r\n      result.details.assessmentResult = assessmentResult;\r\n\r\n      // Validate assessment results\r\n      if (assessmentResult.severity !== scenario.expectedOutcome.severity) {\r\n        result.errors.push(`Expected severity ${scenario.expectedOutcome.severity}, got ${assessmentResult.severity}`);\r\n      }\r\n\r\n      if (assessmentResult.requiresImmediate !== scenario.expectedOutcome.requiresImmediate) {\r\n        result.errors.push(`Expected requiresImmediate ${scenario.expectedOutcome.requiresImmediate}, got ${assessmentResult.requiresImmediate}`);\r\n      }\r\n\r\n      if (assessmentResult.riskFactors.length < scenario.expectedOutcome.minimumRiskFactors) {\r\n        result.warnings.push(`Expected at least ${scenario.expectedOutcome.minimumRiskFactors} risk factors, got ${assessmentResult.riskFactors.length}`);\r\n      }\r\n\r\n      // Test crisis chat simulation\r\n      const chatResult = await this.testCrisisChatSimulation(scenario);\r\n      result.details.counselorAssigned = chatResult.counselorAssigned;\r\n      result.details.responseTime = chatResult.responseTime;\r\n\r\n      // Test emergency protocols\r\n      if (scenario.expectedOutcome.shouldTriggerEmergency) {\r\n        const emergencyResult = await this.testEmergencyProtocols(scenario);\r\n        result.details.emergencyTriggered = emergencyResult.triggered;\r\n        \r\n        if (!emergencyResult.triggered) {\r\n          result.errors.push('Expected emergency protocol to trigger but it did not');\r\n        }\r\n      }\r\n\r\n      // Test offline resources\r\n      const offlineTest = await this.testOfflineResources(scenario);\r\n      result.details.offlineResourcesAvailable = offlineTest.available;\r\n\r\n      result.passed = result.errors.length === 0;\r\n    } catch (error) {\r\n      result.errors.push(`Test execution failed: ${error}`);\r\n      result.passed = false;\r\n    }\r\n\r\n    result.duration = performance.now() - startTime;\r\n    return result;\r\n  }\r\n\r\n  // Test crisis assessment algorithm\r\n  private async testCrisisAssessment(scenario: CrisisTestScenario): Promise<unknown> {\r\n    const startTime = performance.now();\r\n    const assessmentResult = assessCrisisSeverity(scenario.responses);\r\n    const responseTime = performance.now() - startTime;\r\n\r\n    if (responseTime > 200) {\r\n      logger.warn(`⚠️ Assessment response time too slow: ${responseTime}ms`);\r\n    }\r\n\r\n    return {\r\n      ...assessmentResult,\r\n      responseTime\r\n    };\r\n  }\r\n\r\n  // Test crisis chat simulation\r\n  private async testCrisisChatSimulation(scenario: CrisisTestScenario): Promise<{\r\n    counselorAssigned: boolean;\r\n    responseTime: number;\r\n    sessionCreated: boolean;\r\n  }> {\r\n    const startTime = performance.now();\r\n    \r\n    try {\r\n      // Test session creation\r\n      const session = this.mockServer.createCrisisSession('test-user', scenario.severity);\r\n      const sessionCreated = session !== null;\r\n      \r\n      if (_sessionCreated) {\r\n        // Test message response\r\n        session.sendMessage('I need help right now');\r\n        \r\n        // Wait for counselor response (_simulated)\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        \r\n        // Clean up\r\n        this.mockServer.endSession(session.sessionId);\r\n      }\r\n      \r\n      const responseTime = performance.now() - startTime;\r\n      \r\n      return {\r\n        counselorAssigned: sessionCreated,\r\n        responseTime,\r\n        sessionCreated\r\n      };\r\n    } catch (_error) {\r\n      logger.error('Crisis chat simulation test failed:');\r\n      return {\r\n        counselorAssigned: false,\r\n        responseTime: performance.now() - startTime,\r\n        sessionCreated: false\r\n      };\r\n    }\r\n  }\r\n\r\n  // Test emergency protocols\r\n  private async testEmergencyProtocols(scenario: CrisisTestScenario): Promise<{\r\n    triggered: boolean;\r\n    responseTime: number;\r\n  }> {\r\n    const startTime = performance.now();\r\n    let emergencyTriggered = false;\r\n\r\n    // Set up emergency protocol listener\r\n    const _emergencyHandler = (action: string, _data: unknown) => {\r\n      emergencyTriggered = true;\r\n      logger.crisis(`Emergency protocol triggered: ${action}`, 'critical', 'CrisisScenarioTesting');\r\n    };\r\n\r\n    this.mockServer.onEmergency(_emergencyHandler);\r\n\r\n    try {\r\n      // Create session and send critical message\r\n      const session = this.mockServer.createCrisisSession('test-user', scenario.severity);\r\n      \r\n      // Send messages that should trigger emergency protocols\r\n      if (scenario.severity === 'critical') {\r\n        session.sendMessage('I want to kill myself and I have a plan');\r\n      }\r\n      \r\n      // Wait for emergency response\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      \r\n      this.mockServer.endSession(session.sessionId);\r\n    } catch (_error) {\r\n      logger.error('Emergency protocol test failed:');\r\n    }\r\n\r\n    const responseTime = performance.now() - startTime;\r\n\r\n    return {\r\n      triggered: emergencyTriggered,\r\n      responseTime\r\n    };\r\n  }\r\n\r\n  // Test offline resources\r\n  private async testOfflineResources(_scenario: CrisisTestScenario): Promise<{\r\n    available: boolean;\r\n    resourceCount: number;\r\n    criticalResourcesPresent: boolean;\r\n  }> {\r\n    const isAvailable = offlineCrisisResources.isAvailableOffline();\r\n    const immediateResources = offlineCrisisResources.getImmediateCrisisResources();\r\n    const emergencyContacts = offlineCrisisResources.getEmergencyContacts();\r\n    \r\n    const criticalResourcesPresent = \r\n      immediateResources.some(r => r.id === 'emergency-988') &&\r\n      immediateResources.some(r => r.id === 'emergency-911') &&\r\n      emergencyContacts.some(c => c.phone === '988');\r\n\r\n    return {\r\n      available: isAvailable,\r\n      resourceCount: immediateResources.length + emergencyContacts.length,\r\n      criticalResourcesPresent\r\n    };\r\n  }\r\n\r\n  // Run system integration tests\r\n  private async runSystemIntegrationTests(): Promise<void> {\r\n    const integrationTests = [\r\n      {\r\n        name: 'WebSocket Integration',\r\n        test: async () => {\r\n          const connected = await this.testWebSocketIntegration();\r\n          return { passed: connected, message: connected ? 'WebSocket connected' : 'WebSocket failed' };\r\n        }\r\n      },\r\n      {\r\n        name: 'Location Services',\r\n        test: async () => {\r\n          const locationAvailable = await this.testLocationServices();\r\n          return { passed: locationAvailable, message: locationAvailable ? 'Location services available' : 'Location services failed' };\r\n        }\r\n      },\r\n      {\r\n        name: 'Emergency Contact Dialing',\r\n        test: async () => {\r\n          const dialingWorks = this.testEmergencyDialing();\r\n          return { passed: dialingWorks, message: dialingWorks ? 'Emergency dialing functional' : 'Emergency dialing failed' };\r\n        }\r\n      }\r\n    ];\r\n\r\n    for (const test of integrationTests) {\r\n      const startTime = performance.now();\r\n      try {\r\n        const result = await test.test();\r\n        const duration = performance.now() - startTime;\r\n        \r\n        this.testResults.push({\r\n          scenarioId: `integration-${test.name.toLowerCase().replace(/\\s+/g, '-')}`,\r\n          passed: result.passed,\r\n          duration,\r\n          errors: result.passed ? [] : [result.message],\r\n          warnings: [],\r\n          details: {}\r\n        });\r\n      } catch {\r\n        this.testResults.push({\r\n          scenarioId: `integration-${test.name.toLowerCase().replace(/\\s+/g, '-')}`,\r\n          passed: false,\r\n          duration: performance.now() - startTime,\r\n          errors: [`Integration test failed: ${error}`],\r\n          warnings: [],\r\n          details: {}\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // Test WebSocket integration\r\n  private async testWebSocketIntegration(): Promise<boolean> {\r\n    try {\r\n      await mockWebSocketAdapter.connect('test-user', 'test-token');\r\n      const _session = await mockWebSocketAdapter.createCrisisSession('medium');\r\n      mockWebSocketAdapter.endCall();\r\n      return true;\r\n    } catch (_error) {\r\n      logger.error('WebSocket integration test failed:');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Test location services\r\n  private async testLocationServices(): Promise<boolean> {\r\n    return new Promise((resolve) => {\r\n      if ('geolocation' in navigator) {\r\n        navigator.geolocation.getCurrentPosition(\r\n          () => resolve(true),\r\n          () => resolve(false),\r\n          { timeout: 5000 }\r\n        );\r\n      } else {\r\n        resolve(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Test emergency dialing\r\n  private testEmergencyDialing(): boolean {\r\n    // Test that tel: links work (can't actually test dialing in browser)\r\n    try {\r\n      const testLink = document.createElement('a');\r\n      testLink.href = 'tel:988';\r\n      return testLink.href === 'tel:988';\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Run performance tests\r\n  private async runPerformanceTests(): Promise<void> {\r\n    const performanceTests = [\r\n      {\r\n        name: 'Crisis Assessment Speed',\r\n        target: 200, // ms\r\n        test: async () => {\r\n          const startTime = performance.now();\r\n          assessCrisisSeverity({\r\n            'safety': 1,\r\n            'self-harm-thoughts': 1,\r\n            'self-harm-plan': 1,\r\n            'overwhelm-level': 5\r\n          });\r\n          return performance.now() - startTime;\r\n        }\r\n      },\r\n      {\r\n        name: 'Emergency Protocol Response',\r\n        target: 1000, // ms\r\n        test: async () => {\r\n          const startTime = performance.now();\r\n          const session = this.mockServer.createCrisisSession('test-user', 'critical');\r\n          session.sendMessage('emergency test');\r\n          this.mockServer.endSession(session.sessionId);\r\n          return performance.now() - startTime;\r\n        }\r\n      },\r\n      {\r\n        name: 'Offline Resource Access',\r\n        target: 100, // ms\r\n        test: async () => {\r\n          const startTime = performance.now();\r\n          offlineCrisisResources.getImmediateCrisisResources();\r\n          return performance.now() - startTime;\r\n        }\r\n      }\r\n    ];\r\n\r\n    for (const test of performanceTests) {\r\n      try {\r\n        const duration = await test.test();\r\n        const passed = duration <= test.target;\r\n        \r\n        this.testResults.push({\r\n          scenarioId: `performance-${test.name.toLowerCase().replace(/\\s+/g, '-')}`,\r\n          passed,\r\n          duration,\r\n          errors: passed ? [] : [`Performance target missed: ${duration}ms > ${test.target}ms`],\r\n          warnings: duration > test.target * 0.8 ? [`Close to performance limit: ${duration}ms`] : [],\r\n          details: {}\r\n        });\r\n      } catch {\r\n        this.testResults.push({\r\n          scenarioId: `performance-${test.name.toLowerCase().replace(/\\s+/g, '-')}`,\r\n          passed: false,\r\n          duration: 0,\r\n          errors: [`Performance test failed: ${error}`],\r\n          warnings: [],\r\n          details: {}\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // Run offline functionality tests\r\n  private async runOfflineTests(): Promise<void> {\r\n    const offlineTests = [\r\n      {\r\n        name: 'Offline Resource Availability',\r\n        test: () => offlineCrisisResources.isAvailableOffline()\r\n      },\r\n      {\r\n        name: 'Critical Resources Present',\r\n        test: () => {\r\n          const resources = offlineCrisisResources.getImmediateCrisisResources();\r\n          return resources.some(r => r.id === 'emergency-988') &&\r\n                 resources.some(r => r.id === 'emergency-911');\r\n        }\r\n      },\r\n      {\r\n        name: 'Emergency Contacts Available',\r\n        test: () => {\r\n          const contacts = offlineCrisisResources.getEmergencyContacts();\r\n          return contacts.length >= 3;\r\n        }\r\n      },\r\n      {\r\n        name: 'Breathing Exercises Available',\r\n        test: () => {\r\n          const exercises = offlineCrisisResources.getBreathingExercises();\r\n          return exercises.length > 0;\r\n        }\r\n      },\r\n      {\r\n        name: 'Safety Plan Creation',\r\n        test: () => {\r\n          try {\r\n            const plan = offlineCrisisResources.createSafetyPlan({\r\n              warningSignals: ['test'],\r\n              copingStrategies: ['test'],\r\n              emergencyContacts: ['988']\r\n            });\r\n            return plan && plan.id && plan.isActive;\r\n          } catch {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n    ];\r\n\r\n    for (const test of offlineTests) {\r\n      const startTime = performance.now();\r\n      try {\r\n        const passed = test.test();\r\n        const duration = performance.now() - startTime;\r\n        \r\n        this.testResults.push({\r\n          scenarioId: `offline-${test.name.toLowerCase().replace(/\\s+/g, '-')}`,\r\n          passed: Boolean(_passed),\r\n          duration,\r\n          errors: passed ? [] : [`Offline test failed: ${test.name}`],\r\n          warnings: [],\r\n          details: {}\r\n        });\r\n      } catch {\r\n        this.testResults.push({\r\n          scenarioId: `offline-${test.name.toLowerCase().replace(/\\s+/g, '-')}`,\r\n          passed: false,\r\n          duration: performance.now() - startTime,\r\n          errors: [`Offline test error: ${error}`],\r\n          warnings: [],\r\n          details: {}\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // Generate test report\r\n  public generateReport(): {\r\n    totalTests: number;\r\n    passedTests: number;\r\n    failedTests: number;\r\n    totalDuration: number;\r\n    criticalIssues: string[];\r\n    warnings: string[];\r\n    summary: string;\r\n  } {\r\n    const totalTests = this.testResults.length;\r\n    const passedTests = this.testResults.filter(r => r.passed).length;\r\n    const failedTests = totalTests - passedTests;\r\n    const totalDuration = this.testResults.reduce((sum, r) => sum + r.duration, 0);\r\n    \r\n    const criticalIssues = this.testResults\r\n      .filter(r => !r.passed)\r\n      .flatMap(r => r.errors);\r\n    \r\n    const warnings = this.testResults\r\n      .flatMap(r => r.warnings);\r\n\r\n    const passRate = (passedTests / totalTests) * 100;\r\n    let summary: string;\r\n\r\n    if (passRate === 100) {\r\n      summary = '✅ ALL CRISIS SYSTEMS OPERATIONAL - Ready for production deployment';\r\n    } else if (passRate >= 95) {\r\n      summary = '✅ Crisis systems mostly operational - Minor issues detected';\r\n    } else if (passRate >= 85) {\r\n      summary = '⚠️ Crisis systems have significant issues - Review required before deployment';\r\n    } else {\r\n      summary = '❌ CRITICAL CRISIS SYSTEM FAILURES - DO NOT DEPLOY - Immediate attention required';\r\n    }\r\n\r\n    return {\r\n      totalTests,\r\n      passedTests,\r\n      failedTests,\r\n      totalDuration,\r\n      criticalIssues,\r\n      warnings,\r\n      summary\r\n    };\r\n  }\r\n\r\n  // Get detailed test results\r\n  public getTestResults(): TestResult[] {\r\n    return [...this.testResults];\r\n  }\r\n}\r\n\r\n// Export testing utilities\r\nexport const crisisScenarioTester = new CrisisScenarioTester();\r\n\r\n// Quick test runner for development\r\nexport async function runCrisisSystemTests(): Promise<void> {\r\n  logger.crisis('CRISIS SYSTEM TESTING - This validates life-safety systems', 'high', 'CrisisScenarioTesting');\r\n  \r\n  const _results = await crisisScenarioTester.runAllScenarios();\r\n  const report = crisisScenarioTester.generateReport();\r\n  \r\n  logger.info('CRISIS SYSTEM TEST REPORT:', 'CrisisScenarioTesting');\r\n  logger.info(`Tests: ${report.passedTests}/${report.totalTests} passed`, 'CrisisScenarioTesting');\r\n  logger.info(`Duration: ${report.totalDuration.toFixed(2)}ms`, 'CrisisScenarioTesting');\r\n  logger.info(`Status: ${report.summary}`, 'CrisisScenarioTesting');\r\n  \r\n  if (report.criticalIssues.length > 0) {\r\n    logger.error('🚨 CRITICAL ISSUES:');\r\n    report.criticalIssues.forEach(issue => logger.error(`  - ${issue}`));\r\n  }\r\n  \r\n  if (report.warnings.length > 0) {\r\n    logger.warn('⚠️ WARNINGS:');\r\n    report.warnings.forEach(warning => logger.warn(`  - ${warning}`));\r\n  }\r\n  \r\n  return;\r\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\crisis\\crisis-intervention.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: '>' expected.","line":317,"column":40}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Comprehensive Crisis Intervention Testing Suite\n// Priority: CRITICAL - These tests ensure user safety during mental health crises\n\nimport { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\nimport { render, screen, fireEvent, waitFor, within } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { useCrisisAssessment } from '../../hooks/useCrisisAssessment';\nimport { testUtils } from '../setup';\n\ndescribe('Crisis Intervention - Critical Safety Tests', () => {\n  let mockGeolocation: unknown;\n  let mockNavigator: unknown;\n  \n  beforeEach(() => {\n    // Mock geolocation for emergency location sharing\n    mockGeolocation = {\n      getCurrentPosition: vi.fn((_success) => {\n        success({\n          coords: {\n            latitude: 40.7128,\n            longitude: -74.0060,\n            accuracy: 50\n          }\n        });\n      })\n    };\n    \n    Object.defineProperty(global.navigator, 'geolocation', {\n      value: mockGeolocation,\n      writable: true\n    });\n    \n    // Mock vibration API for crisis alerts\n    mockNavigator = {\n      vibrate: vi.fn()\n    };\n    Object.assign(global.navigator, mockNavigator);\n  });\n  \n  afterEach(() => {\n    vi.clearAllMocks();\n    localStorage.clear();\n    sessionStorage.clear();\n  });\n\n  describe('988 Hotline Integration', () => {\n    it('should immediately display 988 hotline when crisis is detected', async () => {\n      testUtils.triggerCrisis();\n      \n      await waitFor(() => {\n        const hotlineButton = screen.getByRole('button', { name: /988.*crisis/i });\n        expect(_hotlineButton).toBeInTheDocument();\n        expect(_hotlineButton).toHaveClass('emergency-button');\n      });\n    });\n    \n    it('should handle 988 call on mobile devices', async () => {\n      // Mock mobile device\n      Object.defineProperty(window.navigator, 'userAgent', {\n        value: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)',\n        writable: true\n      });\n      \n      const _mockTel = vi.fn();\n      window.location.href = 'tel:988';\n      \n      testUtils.triggerCrisis();\n      \n      const hotlineButton = await screen.findByRole('button', { name: /988/i });\n      fireEvent.click(_hotlineButton);\n      \n      expect(window.location.href).toContain('tel:988');\n    });\n    \n    it('should show text option when voice call is not available', async () => {\n      testUtils.triggerCrisis();\n      \n      await waitFor(() => {\n        expect(screen.getByText(/text.*988/i)).toBeInTheDocument();\n        expect(screen.getByText(/chat.*online/i)).toBeInTheDocument();\n      });\n    });\n    \n    it('should work offline with cached crisis resources', async () => {\n      // Simulate offline\n      Object.defineProperty(navigator, 'onLine', {\n        value: false,\n        writable: true\n      });\n      \n      testUtils.triggerCrisis();\n      \n      await waitFor(() => {\n        expect(screen.getByText(/988/)).toBeInTheDocument();\n        expect(screen.getByText(/offline.*resources/i)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Crisis Risk Assessment', () => {\n    it('should accurately calculate risk scores', () => {\n      const { result } = renderHook(() => useCrisisAssessment());\n      \n      act(() => {\n        result.current.updateAssessment({\n          moodScore: 8,      // High risk\n          thoughtScore: 9,   // Very high risk\n          behaviorScore: 7,  // High risk\n          physicalScore: 5,  // Moderate risk\n          socialScore: 6     // Moderate risk\n        });\n      });\n      \n      expect(result.current.assessmentData?.overallRisk).toBeCloseTo(7, 1);\n      expect(result.current.assessmentData?.overallRisk).toBeGreaterThan(6);\n    });\n    \n    it('should trigger immediate intervention for high-risk scores', async () => {\n      const { result } = renderHook(() => useCrisisAssessment());\n      \n      act(() => {\n        result.current.updateAssessment({\n          thoughtScore: 10, // Maximum risk - suicidal ideation\n          behaviorScore: 9  // Very high risk - self-harm\n        });\n      });\n      \n      await waitFor(() => {\n        expect(screen.getByRole('alert')).toHaveTextContent(/immediate.*help/i);\n        expect(screen.getByRole('button', { name: /emergency/i })).toBeInTheDocument();\n      });\n    });\n    \n    it('should persist assessment data securely', () => {\n      const { result } = renderHook(() => useCrisisAssessment());\n      \n      const assessmentData = {\n        moodScore: 7,\n        thoughtScore: 6,\n        timestamp: new Date()\n      };\n      \n      act(() => {\n        result.current.updateAssessment(_assessmentData);\n      });\n      \n      // Check localStorage encryption\n      const stored = localStorage.getItem('crisis_assessment');\n      expect(_stored).toBeTruthy();\n      \n      // Verify data is encrypted (should not be plain JSON)\n      const parsed = JSON.parse(stored!);\n      expect(_parsed).toHaveProperty('moodScore');\n      expect(_parsed).toHaveProperty('timestamp');\n    });\n    \n    it('should detect stale assessments and prompt re-evaluation', async () => {\n      const oldDate = new Date();\n      oldDate.setHours(oldDate.getHours() - 25); // 25 hours ago\n      \n      localStorage.setItem('last_crisis_assessment', oldDate.toISOString());\n      \n      const { result } = renderHook(() => useCrisisAssessment());\n      \n      await waitFor(() => {\n        expect(result.current.lastAssessment).toBeTruthy();\n        const hoursSince = (Date.now() - result.current.lastAssessment!.getTime()) / (1000 * 60 * 60);\n        expect(_hoursSince).toBeGreaterThan(24);\n      });\n    });\n  });\n\n  describe('Emergency Contact Functionality', () => {\n    it('should quickly access and display emergency contacts', async () => {\n      const emergencyContacts = [\n        { name: 'Mom', phone: '555-0101', relationship: 'Parent' },\n        { name: 'Therapist Dr. Smith', phone: '555-0102', type: 'Professional' }\n      ];\n      \n      localStorage.setItem('emergency_contacts', JSON.stringify(_emergencyContacts));\n      \n      testUtils.triggerCrisis();\n      \n      await waitFor(() => {\n        expect(screen.getByText('Mom')).toBeInTheDocument();\n        expect(screen.getByText('Therapist Dr. Smith')).toBeInTheDocument();\n      });\n    });\n    \n    it('should share location with emergency contacts when authorized', async () => {\n      const mockShare = vi.fn();\n      global.navigator.share = mockShare;\n      \n      testUtils.triggerCrisis();\n      \n      const shareLocationBtn = await screen.findByRole('button', { name: /share.*location/i });\n      fireEvent.click(_shareLocationBtn);\n      \n      await waitFor(() => {\n        expect(mockGeolocation.getCurrentPosition).toHaveBeenCalled();\n        expect(_mockShare).toHaveBeenCalledWith(\n          expect.objectContaining({\n            title: expect.stringContaining('Emergency'),\n            text: expect.stringContaining('40.7128'),\n            url: expect.any(_String)\n          })\n        );\n      });\n    });\n    \n    it('should handle location permission denial gracefully', async () => {\n      mockGeolocation.getCurrentPosition = vi.fn((success, error) => {\n        error({ code: 1, message: 'User denied geolocation' });\n      });\n      \n      testUtils.triggerCrisis();\n      \n      const shareLocationBtn = await screen.findByRole('button', { name: /share.*location/i });\n      fireEvent.click(_shareLocationBtn);\n      \n      await waitFor(() => {\n        expect(screen.getByText(/location.*not available/i)).toBeInTheDocument();\n        expect(screen.getByText(/manual.*address/i)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Safety Plan Access', () => {\n    it('should display safety plan within 200ms during crisis', async () => {\n      const startTime = performance.now();\n      \n      const safetyPlan = {\n        warningSignals: ['Feeling hopeless', 'Isolation'],\n        copingStrategies: ['Deep breathing', 'Call a friend'],\n        safeEnvironment: ['Remove sharp objects', 'Go to public space'],\n        contacts: ['Mom: 555-0101', 'Therapist: 555-0102'],\n        professionalHelp: ['988 Lifeline', 'Local ER']\n      };\n      \n      localStorage.setItem('safety_plan', JSON.stringify(_safetyPlan));\n      \n      testUtils.triggerCrisis();\n      \n      await waitFor(() => {\n        const safetyPlanElement = screen.getByTestId('safety-plan');\n        expect(_safetyPlanElement).toBeInTheDocument();\n        \n        const loadTime = performance.now() - startTime;\n        expect(_loadTime).toBeLessThan(200);\n      });\n    });\n    \n    it('should allow quick creation of safety plan if none exists', async () => {\n      testUtils.triggerCrisis();\n      \n      await waitFor(() => {\n        const createPlanButton = screen.getByRole('button', { name: /create.*safety.*plan/i });\n        expect(_createPlanButton).toBeInTheDocument();\n      });\n      \n      fireEvent.click(screen.getByRole('button', { name: /create.*safety.*plan/i }));\n      \n      // Verify guided creation process\n      expect(screen.getByText(/warning.*signs/i)).toBeInTheDocument();\n      expect(screen.getByText(/coping.*strategies/i)).toBeInTheDocument();\n      expect(screen.getByText(/support.*network/i)).toBeInTheDocument();\n    });\n  });\n\n  describe('Crisis Chat Functionality', () => {\n    it('should connect to crisis counselor within acceptable timeframe', async () => {\n      testUtils.triggerCrisis();\n      \n      const chatButton = await screen.findByRole('button', { name: /chat.*counselor/i });\n      fireEvent.click(_chatButton);\n      \n      await waitFor(() => {\n        expect(screen.getByText(/connecting/i)).toBeInTheDocument();\n      }, { timeout: 1000 });\n      \n      await waitFor(() => {\n        expect(screen.getByText(/connected.*counselor/i)).toBeInTheDocument();\n      }, { timeout: 5000 });\n    });\n    \n    it('should maintain chat session during network interruptions', async () => {\n      testUtils.triggerCrisis();\n      \n      const chatButton = await screen.findByRole('button', { name: /chat/i });\n      fireEvent.click(_chatButton);\n      \n      // Simulate network interruption\n      Object.defineProperty(navigator, 'onLine', {\n        value: false,\n        writable: true\n      });\n      \n      await waitFor(() => {\n        expect(screen.getByText(/connection.*interrupted/i)).toBeInTheDocument();\n        expect(screen.getByText(/attempting.*reconnect/i)).toBeInTheDocument();\n      });\n      \n      // Restore connection\n      Object.defineProperty(navigator, 'onLine', {\n        value: true,\n        writable: true\n      });\n      \n      await waitFor(() => {\n        expect(screen.getByText(/reconnected/i)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Crisis Mode UI Simplification', () => {\n    it('should simplify UI to essential elements during crisis', async () => {\n      const { container } = render(<App />);\n      \n      // Normal mode - multiple features visible\n      expect(container.querySelectorAll('[data-feature]').length).toBeGreaterThan(10);\n      \n      testUtils.triggerCrisis();\n      \n      await waitFor(() => {\n        // Crisis mode - only essential features\n        const features = container.querySelectorAll('[data-feature]');\n        const essentialFeatures = ['crisis-hotline', 'safety-plan', 'emergency-contacts', 'crisis-chat'];\n        \n        features.forEach(feature => {\n          const featureName = feature.getAttribute('data-feature');\n          expect(_essentialFeatures).toContain(_featureName);\n        });\n        \n        expect(features.length).toBeLessThanOrEqual(5);\n      });\n    });\n    \n    it('should use high contrast and large buttons in crisis mode', async () => {\n      testUtils.triggerCrisis();\n      \n      await waitFor(() => {\n        const crisisButtons = screen.getAllByRole('button');\n        \n        crisisButtons.forEach(button => {\n          const styles = window.getComputedStyle(_button);\n          \n          // Check minimum size\n          const height = parseInt(styles.height);\n          expect(_height).toBeGreaterThanOrEqual(48); // WCAG touch target size\n          \n          // Check contrast ratio\n          if (button.classList.contains('emergency-button')) {\n            expect(_button).toHaveStyle({\n              backgroundColor: expect.stringMatching(/red|#ff/i)\n            });\n          }\n        });\n      });\n    });\n  });\n\n  describe('Crisis Detection Algorithms', () => {\n    it('should detect crisis keywords in user input', async () => {\n      const crisisKeywords = [\n        'suicide', 'kill myself', 'end it all', 'not worth living',\n        'self harm', 'cutting', 'overdose', 'pills'\n      ];\n      \n      for (const keyword of crisisKeywords) {\n        const input = screen.getByRole('textbox', { name: /how.*feeling/i });\n        await userEvent.type(input, keyword);\n        \n        await waitFor(() => {\n          expect(screen.getByRole('alert')).toHaveTextContent(/crisis.*detected/i);\n        });\n        \n        await userEvent.clear(_input);\n      }\n    });\n    \n    it('should detect crisis patterns in mood tracking', async () => {\n      const { result } = renderHook(() => useCrisisAssessment());\n      \n      // Simulate declining mood pattern\n      const moodEntries = [8, 7, 5, 4, 2, 1]; // Rapid decline\n      \n      for (const mood of moodEntries) {\n        act(() => {\n          result.current.updateAssessment({ moodScore: mood });\n        });\n        \n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n      \n      await waitFor(() => {\n        expect(screen.getByRole('alert')).toHaveTextContent(/concerning.*pattern/i);\n      });\n    });\n  });\n\n  describe('Multi-Device Crisis Response', () => {\n    const devices = [\n      { name: 'iPhone', userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)' },\n      { name: 'Android', userAgent: 'Mozilla/5.0 (Linux; Android 11) AppleWebKit/537.36' },\n      { name: 'iPad', userAgent: 'Mozilla/5.0 (iPad; CPU OS 14_0 like Mac OS X)' },\n      { name: 'Desktop', userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)' }\n    ];\n    \n    devices.forEach(device => {\n      it(`should work correctly on ${device.name}`, async () => {\n        Object.defineProperty(window.navigator, 'userAgent', {\n          value: device.userAgent,\n          writable: true\n        });\n        \n        testUtils.triggerCrisis();\n        \n        await waitFor(() => {\n          expect(screen.getByRole('button', { name: /988/i })).toBeInTheDocument();\n          expect(screen.getByText(/emergency/i)).toBeInTheDocument();\n        });\n        \n        // Device-specific features\n        if (device.name.includes('Phone') || device.name === 'Android') {\n          expect(screen.getByRole('button', { name: /call.*988/i })).toBeInTheDocument();\n        }\n      });\n    });\n  });\n\n  describe('Crisis Response Performance', () => {\n    it('should load crisis resources under 200ms', async () => {\n      const startTime = performance.now();\n      \n      testUtils.triggerCrisis();\n      \n      await waitFor(() => {\n        const crisisUI = screen.getByTestId('crisis-intervention-ui');\n        expect(_crisisUI).toBeInTheDocument();\n        \n        const loadTime = performance.now() - startTime;\n        expect(_loadTime).toBeLessThan(200);\n      });\n    });\n    \n    it('should handle multiple crisis triggers without performance degradation', async () => {\n      const times: number[] = [];\n      \n      for (let i = 0; i < 5; i++) {\n        const startTime = performance.now();\n        testUtils.triggerCrisis();\n        \n        await waitFor(() => {\n          expect(screen.getByRole('button', { name: /988/i })).toBeInTheDocument();\n        });\n        \n        times.push(performance.now() - startTime);\n        \n        // Clear for next iteration\n        cleanup();\n      }\n      \n      // Ensure no significant performance degradation\n      const avgTime = times.reduce((a, b) => a + b) / times.length;\n      expect(_avgTime).toBeLessThan(200);\n      expect(Math.max(...times)).toBeLessThan(250);\n    });\n  });\n\n  describe('Crisis Accessibility', () => {\n    it('should be fully keyboard navigable in crisis mode', async () => {\n      testUtils.triggerCrisis();\n      \n      await waitFor(() => {\n        const firstButton = screen.getByRole('button', { name: /988/i });\n        firstButton.focus();\n        expect(document.activeElement).toBe(_firstButton);\n      });\n      \n      // Tab through crisis elements\n      userEvent.tab();\n      expect(document.activeElement).toHaveAttribute('data-crisis-element');\n      \n      userEvent.tab();\n      expect(document.activeElement).toHaveAttribute('data-crisis-element');\n      \n      // Activate with Enter\n      userEvent.keyboard('{Enter}');\n      await waitFor(() => {\n        expect(screen.getByRole('dialog')).toBeInTheDocument();\n      });\n    });\n    \n    it('should work with screen readers', async () => {\n      testUtils.triggerCrisis();\n      \n      await waitFor(() => {\n        // Check ARIA labels\n        const crisisButtons = screen.getAllByRole('button');\n        crisisButtons.forEach(button => {\n          expect(_button).toHaveAttribute('aria-label');\n        });\n        \n        // Check live regions for updates\n        const alerts = screen.getAllByRole('alert');\n        alerts.forEach(alert => {\n          expect(_alert).toHaveAttribute('aria-live', 'assertive');\n        });\n        \n        // Check focus management\n        const dialog = screen.queryByRole('dialog');\n        if (_dialog) {\n          expect(_dialog).toHaveAttribute('aria-modal', 'true');\n        }\n      });\n    });\n  });\n});\n\ndescribe('Crisis Intervention - Edge Cases', () => {\n  describe('Extreme Scenarios', () => {\n    it('should handle user in severe cognitive impairment', async () => {\n      // Simulate confused/impaired input\n      const confusedInputs = [\n        'helppppp',\n        'HELP ME PLEASE',\n        'i cant i cant i cant',\n        '!!!!!!!!',\n        'dying'\n      ];\n      \n      for (const input of confusedInputs) {\n        const textbox = screen.getByRole('textbox');\n        await userEvent.type(textbox, input);\n        \n        await waitFor(() => {\n          // Should still detect crisis and simplify UI\n          expect(screen.getByRole('button', { name: /988/i })).toBeInTheDocument();\n          expect(screen.getByText(/tap.*help/i)).toBeInTheDocument(); // Simple instructions\n        });\n      }\n    });\n    \n    it('should handle device with very low battery', async () => {\n      // Mock low battery\n      Object.defineProperty(navigator, 'getBattery', {\n        value: () => Promise.resolve({\n          level: 0.05, // 5% battery\n          charging: false\n        }),\n        writable: true\n      });\n      \n      testUtils.triggerCrisis();\n      \n      await waitFor(() => {\n        expect(screen.getByText(/low.*battery/i)).toBeInTheDocument();\n        expect(screen.getByText(/988/)).toHaveClass('high-visibility'); // Extra visible\n      });\n    });\n    \n    it('should work with extremely slow network (_2G)', async () => {\n      // Mock slow network\n      Object.defineProperty(navigator, 'connection', {\n        value: {\n          effectiveType: '2g',\n          rtt: 300,\n          downlink: 0.05\n        },\n        writable: true\n      });\n      \n      testUtils.triggerCrisis();\n      \n      await waitFor(() => {\n        // Should prioritize offline resources\n        expect(screen.getByText(/offline.*resources/i)).toBeInTheDocument();\n        expect(screen.getByText(/988/)).toBeInTheDocument();\n      });\n    });\n  });\n  \n  describe('International Support', () => {\n    const internationalHotlines = [\n      { country: 'UK', number: '116 123', timezone: 'GMT' },\n      { country: 'Australia', number: '13 11 14', timezone: 'AEST' },\n      { country: 'Canada', number: '1-833-456-4566', timezone: 'EST' }\n    ];\n    \n    internationalHotlines.forEach(({ country, number }) => {\n      it(`should show correct crisis number for ${country}`, async () => {\n        // Mock location API to return country\n        global.fetch = vi.fn(() =>\n          Promise.resolve({\n            json: () => Promise.resolve({ country_code: country })\n          })\n        );\n        \n        testUtils.triggerCrisis();\n        \n        await waitFor(() => {\n          expect(screen.getByText(number)).toBeInTheDocument();\n        });\n      });\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\integration\\crisis-workflow.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\mocks\\server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\performance\\bundle-optimization.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'name' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":230,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":230,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Bundle Optimization Test Suite\n * Validates code splitting, lazy loading, and bundle size targets\n */\n\nimport { describe, it, expect, beforeAll } from 'vitest';\nimport { readFileSync, statSync } from 'fs';\nimport { join } from 'path';\nimport { glob } from 'glob';\nimport { logger } from '../../utils/logger';\n\ndescribe('Bundle Optimization Tests', () => {\n  const bundleStats: Record<string, number> = {};\n  let manifestContent: string = '';\n  \n  beforeAll(async () => {\n    // Read bundle files and calculate sizes\n    const distPath = join(process.cwd(), 'dist');\n    const jsFiles = await glob('assets/js/*.js', { cwd: distPath });\n    \n    for (const file of jsFiles) {\n      const _filePath = join(distPath, file);\n      try {\n        const stats = statSync(_filePath);\n        bundleStats[file] = stats.size;\n      } catch {\n        logger.warn(`Could not read bundle file: ${file}`);\n      }\n    }\n    \n    // Read index.html to check module preloads\n    try {\n      manifestContent = readFileSync(join(distPath, 'index.html'), 'utf-8');\n    } catch {\n      logger.warn('Could not read index.html');\n    }\n  });\n\n  describe('Bundle Size Targets', () => {\n    it('should have main entry bundle under 50KB', () => {\n      const mainBundles = Object.entries(_bundleStats).filter(([_name]) => \n        _name.includes('index-') && _name.endsWith('.js')\n      );\n      \n      expect(mainBundles.length).toBeGreaterThan(0);\n      \n      for (const [_name, size] of mainBundles) {\n        expect(_size).toBeLessThan(50 * 1024); // 50KB\n        logger.debug(`✅ Main bundle ${_name}: ${(size / 1024).toFixed(2)}KB`);\n      }\n    });\n\n    it('should have crisis bundle under 100KB (critical path)', () => {\n      const crisisBundles = Object.entries(_bundleStats).filter(([_name]) => \n        _name.includes('crisis') && _name.endsWith('.js')\n      );\n      \n      if (crisisBundles.length > 0) {\n        for (const [_name, size] of crisisBundles) {\n          expect(_size).toBeLessThan(100 * 1024); // 100KB for crisis components\n          logger.debug(`🆘 Crisis bundle ${_name}: ${(size / 1024).toFixed(2)}KB`);\n        }\n      }\n    });\n\n    it('should have lazy-loaded page bundles under 150KB each', () => {\n      const pageBundles = Object.entries(_bundleStats).filter(([_name]) => \n        (_name.includes('WellnessPage') || _name.includes('CommunityPage') || _name.includes('ProfessionalPage'))\n        && _name.endsWith('.js')\n      );\n      \n      for (const [_name, size] of pageBundles) {\n        expect(_size).toBeLessThan(150 * 1024); // 150KB per page\n        logger.debug(`📄 Page bundle ${_name}: ${(size / 1024).toFixed(2)}KB`);\n      }\n    });\n\n    it('should have vendor bundles properly chunked', () => {\n      const vendorBundles = Object.entries(_bundleStats).filter(([_name]) => \n        (_name.includes('vendor') || _name.includes('react-') || _name.includes('framer-motion'))\n        && _name.endsWith('.js')\n      );\n      \n      expect(vendorBundles.length).toBeGreaterThan(2); // Should have multiple vendor chunks\n      \n      for (const [_name, size] of vendorBundles) {\n        expect(_size).toBeLessThan(200 * 1024); // 200KB per vendor chunk\n        logger.debug(`📦 Vendor bundle ${_name}: ${(size / 1024).toFixed(2)}KB`);\n      }\n    });\n  });\n\n  describe('Code Splitting Validation', () => {\n    it('should have separate chunks for major libraries', () => {\n      const expectedChunks = [\n        'react-core',\n        'react-dom', \n        'react-router',\n        'framer-motion',\n        'charts-chartjs',\n        'ai-features'\n      ];\n      \n      for (const chunkName of expectedChunks) {\n        const _hasChunk = Object.keys(_bundleStats).some(_name => \n          _name.includes(chunkName) && _name.endsWith('.js')\n        );\n        expect(_hasChunk).toBe(true);\n        logger.debug(`✅ Found chunk for: ${chunkName}`);\n      }\n    });\n\n    it('should have separate chunks for feature areas', () => {\n      const featureChunks = [\n        'crisis',\n        'professional',\n        'dashboard-extended',\n        'security-crypto',\n        'utils'\n      ];\n      \n      for (const feature of featureChunks) {\n        const _hasChunk = Object.keys(_bundleStats).some(_name => \n          _name.includes(feature) && _name.endsWith('.js')\n        );\n        expect(_hasChunk).toBe(true);\n        logger.debug(`🎯 Found feature chunk: ${feature}`);\n      }\n    });\n  });\n\n  describe('Module Preloading', () => {\n    it('should preload critical chunks in HTML', () => {\n      const criticalChunks = [\n        'react-core',\n        'react-dom',\n        'crisis',\n        'network'\n      ];\n      \n      for (const chunk of criticalChunks) {\n        const _hasPreload = manifestContent.includes(`modulepreload`) && \n                          manifestContent.includes(chunk);\n        expect(_hasPreload).toBe(true);\n        logger.debug(`⚡ Found preload for: ${chunk}`);\n      }\n    });\n\n    it('should NOT preload heavy lazy chunks', () => {\n      const _lazyChunks = [\n        'charts-chartjs', // Should be lazy loaded\n        'ai-features',    // Should be lazy loaded\n        'professional'    // Should be lazy loaded\n      ];\n      \n      // These might be preloaded, but shouldn't be in the critical path\n      logger.debug('📊 Bundle preload analysis completed');\n    });\n  });\n\n  describe('Performance Budget Compliance', () => {\n    it('should meet overall performance budget', () => {\n      const totalInitialSize = Object.entries(_bundleStats)\n        .filter(([_name]) => \n          // Calculate initial bundle size (critical path only)\n          _name.includes('index-') ||\n          _name.includes('react-core') ||\n          _name.includes('react-dom') ||\n          _name.includes('crisis') ||\n          _name.includes('network')\n        )\n        .reduce((total, [, size]) => total + size, 0);\n      \n      const budgetMB = 1; // 1MB initial bundle budget\n      expect(_totalInitialSize).toBeLessThan(budgetMB * 1024 * 1024);\n      \n      logger.debug(`💰 Initial bundle size: ${(totalInitialSize / 1024 / 1024).toFixed(2)}MB (Budget: ${budgetMB}MB)`);\n    });\n\n    it('should have reasonable total bundle size', () => {\n      const totalSize = Object.values(_bundleStats).reduce((sum, size) => sum + size, 0);\n      const maxTotalMB = 3; // 3MB total budget\n      \n      expect(_totalSize).toBeLessThan(maxTotalMB * 1024 * 1024);\n      \n      logger.debug(`📊 Total bundle size: ${(totalSize / 1024 / 1024).toFixed(2)}MB (Budget: ${maxTotalMB}MB)`);\n    });\n  });\n\n  describe('Chunk Loading Strategy', () => {\n    it('should have proper chunk naming for cache busting', () => {\n      for (const [_name] of Object.entries(_bundleStats)) {\n        // Should have hash in filename for cache busting\n        expect(_name).toMatch(/-[a-zA-Z0-9]{8,}\\.js$/);\n      }\n    });\n\n    it('should optimize for critical rendering path', () => {\n      // Crisis components should be prioritized\n      const crisisBundle = Object.keys(_bundleStats).find(_name => _name.includes('crisis'));\n      const aiBundle = Object.keys(_bundleStats).find(_name => _name.includes('ai-features'));\n      \n      if (crisisBundle && aiBundle) {\n        // Crisis bundle should be smaller than AI features (_optimization)\n        expect(bundleStats[crisisBundle]).toBeLessThan(bundleStats[aiBundle]);\n        logger.debug(`🎯 Crisis prioritization validated`);\n      }\n    });\n  });\n\n  describe('Bundle Analysis Summary', () => {\n    it('should provide bundle optimization summary', () => {\n      logger.debug('\\n📊 BUNDLE OPTIMIZATION SUMMARY:');\n      logger.debug('================================================');\n      \n      const totalSize = Object.values(_bundleStats).reduce((sum, size) => sum + size, 0);\n      const chunkCount = Object.keys(_bundleStats).length;\n      const avgChunkSize = totalSize / chunkCount;\n      \n      logger.debug(`📦 Total chunks: ${chunkCount}`);\n      logger.debug(`📏 Total size: ${(totalSize / 1024 / 1024).toFixed(2)}MB`);\n      logger.debug(`📊 Average chunk size: ${(avgChunkSize / 1024).toFixed(2)}KB`);\n      \n      // Largest chunks\n      const sortedBundles = Object.entries(_bundleStats)\n        .sort(([,a], [,b]) => b - a)\n        .slice(0, 5);\n      \n      logger.debug('\\n🔝 Largest bundles:');\n      for (const [name, size] of sortedBundles) {\n        logger.debug(`   ${_name}: ${(size / 1024).toFixed(2)}KB`);\n      }\n      \n      // Critical path analysis\n      const criticalSize = Object.entries(_bundleStats)\n        .filter(([name]) => \n          name.includes('index-') ||\n          name.includes('react-core') ||\n          name.includes('crisis')\n        )\n        .reduce((sum, [, size]) => sum + size, 0);\n      \n      logger.debug(`\\n⚡ Critical path size: ${(criticalSize / 1024).toFixed(2)}KB`);\n      logger.debug('================================================\\n');\n      \n      // This test always passes - it's for reporting\n      expect(true).toBe(true);\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\performance\\crisis-performance.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: '>' expected.","line":35,"column":25}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Performance Benchmarks for Crisis Response\n * Ensures the platform meets critical performance requirements\n * during mental health emergencies\n */\n\nimport { describe, it, expect, beforeEach, afterEach } from 'vitest';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { logger } from '../../utils/logger';\nimport CrisisButton from '../../components/crisis/CrisisButton';\nimport MoodTracker from '../../components/wellness/MoodTracker';\n\n// Performance thresholds (in milliseconds)\nconst PERFORMANCE_THRESHOLDS = {\n  CRISIS_RESPONSE: 200,      // Maximum time for crisis button response\n  API_RESPONSE: 100,          // Maximum time for critical API calls\n  RENDER_TIME: 50,            // Maximum initial render time\n  INTERACTION_DELAY: 100,     // Maximum delay for user interactions\n  MEMORY_LIMIT: 50 * 1024 * 1024, // 50MB memory limit\n  BUNDLE_SIZE: 500 * 1024,    // 500KB bundle size limit\n};\n\n// Test wrapper\nconst TestWrapper = ({ children }: { children: React.ReactNode }) => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: { retry: false },\n      mutations: { retry: false }\n    }\n  });\n  \n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  );\n};\n\n// Performance measurement utilities\nclass PerformanceMonitor {\n  private marks: Map<string, number> = new Map();\n  private measures: Map<string, number> = new Map();\n\n  mark(name: string): void {\n    this.marks.set(name, performance.now());\n  }\n\n  measure(name: string, startMark: string, endMark?: string): number {\n    const start = this.marks.get(startMark);\n    const end = endMark ? this.marks.get(endMark) : performance.now();\n    \n    if (!start) throw new Error(`Start mark ${startMark} not found`);\n    if (endMark && !this.marks.get(endMark)) throw new Error(`End mark ${endMark} not found`);\n    \n    const duration = (end || performance.now()) - start;\n    this.measures.set(name, duration);\n    return duration;\n  }\n\n  getMeasure(name: string): number | undefined {\n    return this.measures.get(_name);\n  }\n\n  getAllMeasures(): Record<string, number> {\n    return Object.fromEntries(this.measures);\n  }\n\n  reset(): void {\n    this.marks.clear();\n    this.measures.clear();\n  }\n}\n\ndescribe('Crisis Response Performance', () => {\n  let monitor: PerformanceMonitor;\n\n  beforeEach(() => {\n    monitor = new PerformanceMonitor();\n  });\n\n  afterEach(() => {\n    monitor.reset();\n  });\n\n  describe('Crisis Button Performance', () => {\n    it('should respond within 200ms threshold', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <CrisisButton />\n        </TestWrapper>\n      );\n      \n      const button = screen.getByRole('button', { name: /crisis help/i });\n      \n      monitor.mark('crisis-start');\n      await user.click(_button);\n      \n      await waitFor(() => {\n        expect(screen.getByText(/crisis resources/i)).toBeInTheDocument();\n      });\n      \n      const responseTime = monitor.measure('crisis-response', 'crisis-start');\n      \n      expect(responseTime).toBeLessThan(PERFORMANCE_THRESHOLDS.CRISIS_RESPONSE);\n      \n      // Log for monitoring\n      logger.debug(`Crisis response time: ${responseTime.toFixed(2)}ms`);\n    });\n\n    it('should render crisis button quickly', () => {\n      monitor.mark('render-start');\n      \n      render(\n        <TestWrapper>\n          <CrisisButton />\n        </TestWrapper>\n      );\n      \n      const renderTime = monitor.measure('render-time', 'render-start');\n      \n      expect(renderTime).toBeLessThan(PERFORMANCE_THRESHOLDS.RENDER_TIME);\n      \n      logger.debug(`Crisis button render time: ${renderTime.toFixed(2)}ms`);\n    });\n\n    it('should handle rapid crisis button clicks efficiently', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <CrisisButton />\n        </TestWrapper>\n      );\n      \n      const button = screen.getByRole('button', { name: /crisis help/i });\n      \n      monitor.mark('rapid-clicks-start');\n      \n      // Simulate panic clicking (10 rapid clicks)\n      for (let i = 0; i < 10; i++) {\n        await user.click(_button);\n      }\n      \n      const totalTime = monitor.measure('rapid-clicks', 'rapid-clicks-start');\n      const averageTime = totalTime / 10;\n      \n      // Should handle rapid clicks without performance degradation\n      expect(averageTime).toBeLessThan(PERFORMANCE_THRESHOLDS.INTERACTION_DELAY);\n      \n      logger.debug(`Average time per click: ${averageTime.toFixed(2)}ms`);\n    });\n  });\n\n  describe('API Response Performance', () => {\n    it('crisis API should respond quickly', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <CrisisButton />\n        </TestWrapper>\n      );\n      \n      const button = screen.getByRole('button', { name: /crisis help/i });\n      \n      monitor.mark('api-start');\n      await user.click(_button);\n      \n      await waitFor(() => {\n        expect(screen.getByText('988')).toBeInTheDocument();\n      });\n      \n      const apiTime = monitor.measure('api-response', 'api-start');\n      \n      expect(apiTime).toBeLessThan(PERFORMANCE_THRESHOLDS.API_RESPONSE * 2); // Allow some overhead\n      \n      logger.debug(`Crisis API response time: ${apiTime.toFixed(2)}ms`);\n    });\n\n    it('should cache crisis resources for instant access', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <CrisisButton />\n        </TestWrapper>\n      );\n      \n      const button = screen.getByRole('button', { name: /crisis help/i });\n      \n      // First click - cold cache\n      monitor.mark('cold-start');\n      await user.click(_button);\n      await waitFor(() => screen.getByText('988'));\n      const coldTime = monitor.measure('cold-response', 'cold-start');\n      \n      // Close modal\n      const closeButton = screen.getByRole('button', { name: /close/i });\n      await user.click(_closeButton);\n      \n      // Second click - warm cache\n      monitor.mark('warm-start');\n      await user.click(_button);\n      await waitFor(() => screen.getByText('988'));\n      const warmTime = monitor.measure('warm-response', 'warm-start');\n      \n      // Cached response should be significantly faster\n      expect(warmTime).toBeLessThan(coldTime * 0.5);\n      \n      logger.debug(`Cold cache: ${coldTime.toFixed(2)}ms, Warm cache: ${warmTime.toFixed(2)}ms`);\n    });\n  });\n\n  describe('Memory Performance', () => {\n    it('should not leak memory during crisis interactions', async () => {\n      const user = userEvent.setup();\n      \n      // Get initial memory (if available)\n      const initialMemory = (performance as unknown).memory?.usedJSHeapSize || 0;\n      \n      render(\n        <TestWrapper>\n          <CrisisButton />\n        </TestWrapper>\n      );\n      \n      const button = screen.getByRole('button', { name: /crisis help/i });\n      \n      // Perform multiple open/close cycles\n      for (let i = 0; i < 5; i++) {\n        await user.click(_button);\n        await waitFor(() => screen.getByText('988'));\n        \n        const closeButton = screen.getByRole('button', { name: /close/i });\n        await user.click(_closeButton);\n        await waitFor(() => expect(screen.queryByText('988')).not.toBeInTheDocument());\n      }\n      \n      // Force garbage collection if available\n      if (global.gc) {\n        global.gc();\n      }\n      \n      // Check memory after interactions\n      const finalMemory = (performance as unknown).memory?.usedJSHeapSize || 0;\n      const memoryIncrease = finalMemory - initialMemory;\n      \n      // Memory increase should be minimal\n      if (initialMemory > 0) {\n        expect(_memoryIncrease).toBeLessThan(5 * 1024 * 1024); // Less than 5MB increase\n        logger.debug(`Memory increase: ${(memoryIncrease / 1024 / 1024).toFixed(2)}MB`);\n      }\n    });\n\n    it('should clean up event listeners properly', async () => {\n      const user = userEvent.setup();\n      \n      const { unmount } = render(\n        <TestWrapper>\n          <CrisisButton />\n        </TestWrapper>\n      );\n      \n      const button = screen.getByRole('button', { name: /crisis help/i });\n      await user.click(_button);\n      \n      // Get initial listener count\n      const getListenerCount = () => {\n        const events = (window as unknown).getEventListeners?.(_document) || {};\n        return Object.values(_events).reduce((sum: number, arr: unknown) => sum + arr.length, 0);\n      };\n      \n      const initialListeners = getListenerCount();\n      \n      // Unmount component\n      unmount();\n      \n      // Check that listeners were removed\n      const finalListeners = getListenerCount();\n      \n      if (initialListeners > 0) {\n        expect(_finalListeners).toBeLessThanOrEqual(_initialListeners);\n      }\n    });\n  });\n\n  describe('Rendering Performance', () => {\n    it('mood tracker should render efficiently', () => {\n      monitor.mark('mood-render-start');\n      \n      render(\n        <TestWrapper>\n          <MoodTracker showHistory={false} />\n        </TestWrapper>\n      );\n      \n      const renderTime = monitor.measure('mood-render', 'mood-render-start');\n      \n      expect(renderTime).toBeLessThan(PERFORMANCE_THRESHOLDS.RENDER_TIME * 2);\n      \n      logger.debug(`Mood tracker render time: ${renderTime.toFixed(2)}ms`);\n    });\n\n    it('should efficiently update mood display', async () => {\n      render(\n        <TestWrapper>\n          <MoodTracker />\n        </TestWrapper>\n      );\n      \n      const slider = screen.getByRole('slider');\n      \n      monitor.mark('mood-update-start');\n      \n      // Change mood value\n      fireEvent.change(slider, { target: { value: '8' } });\n      \n      await waitFor(() => {\n        expect(screen.getByText(/feeling good/i)).toBeInTheDocument();\n      });\n      \n      const updateTime = monitor.measure('mood-update', 'mood-update-start');\n      \n      expect(updateTime).toBeLessThan(PERFORMANCE_THRESHOLDS.INTERACTION_DELAY);\n      \n      logger.debug(`Mood update time: ${updateTime.toFixed(2)}ms`);\n    });\n\n    it('should lazy load non-critical components', async () => {\n      const { rerender } = render(\n        <TestWrapper>\n          <MoodTracker showHistory={false} />\n        </TestWrapper>\n      );\n      \n      // Initial render without history\n      const initialComponents = screen.queryByTestId('mood-history-chart');\n      expect(_initialComponents).not.toBeInTheDocument();\n      \n      // Re-render with history\n      monitor.mark('lazy-load-start');\n      \n      rerender(\n        <TestWrapper>\n          <MoodTracker showHistory={true} />\n        </TestWrapper>\n      );\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('mood-history-chart')).toBeInTheDocument();\n      });\n      \n      const lazyLoadTime = monitor.measure('lazy-load', 'lazy-load-start');\n      \n      // Lazy loading should be reasonably fast\n      expect(lazyLoadTime).toBeLessThan(PERFORMANCE_THRESHOLDS.RENDER_TIME * 4);\n      \n      logger.debug(`Lazy load time: ${lazyLoadTime.toFixed(2)}ms`);\n    });\n  });\n\n  describe('Network Performance', () => {\n    it('should handle slow network gracefully', async () => {\n      const user = userEvent.setup();\n      \n      // Simulate slow network\n      const slowFetch = vi.fn().mockImplementation(() => \n        new Promise(resolve => setTimeout(() => resolve({\n          ok: true,\n          json: async () => ({ hotlines: [{ name: '988', number: '988' }] })\n        }), 1000))\n      );\n      \n      global.fetch = slowFetch;\n      \n      render(\n        <TestWrapper>\n          <CrisisButton />\n        </TestWrapper>\n      );\n      \n      const button = screen.getByRole('button', { name: /crisis help/i });\n      \n      monitor.mark('slow-network-start');\n      await user.click(_button);\n      \n      // Should show loading state immediately\n      expect(screen.getByText(/connecting to crisis support/i)).toBeInTheDocument();\n      \n      const loadingTime = monitor.measure('loading-shown', 'slow-network-start');\n      expect(loadingTime).toBeLessThan(50); // Loading state should appear quickly\n      \n      logger.debug(`Loading state appeared in: ${loadingTime.toFixed(2)}ms`);\n    });\n\n    it('should prioritize critical resources', async () => {\n      const fetchOrder: string[] = [];\n      \n      const trackingFetch = vi.fn().mockImplementation((url: string) => {\n        fetchOrder.push(_url);\n        return Promise.resolve({\n          ok: true,\n          json: async () => ({})\n        });\n      });\n      \n      global.fetch = trackingFetch;\n      \n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <CrisisButton />\n        </TestWrapper>\n      );\n      \n      await user.click(screen.getByRole('button', { name: /crisis help/i }));\n      \n      // Crisis resources should be fetched first\n      expect(fetchOrder[0]).toContain('crisis');\n      \n      logger.debug('Resource fetch order:', fetchOrder);\n    });\n  });\n\n  describe('Bundle Size and Loading', () => {\n    it('should have acceptable Time to Interactive (_TTI)', async () => {\n      monitor.mark('tti-start');\n      \n      render(\n        <TestWrapper>\n          <CrisisButton />\n          <MoodTracker />\n        </TestWrapper>\n      );\n      \n      // Wait for all components to be interactive\n      await waitFor(() => {\n        const button = screen.getByRole('button', { name: /crisis help/i });\n        const slider = screen.getByRole('slider');\n        \n        expect(_button).toBeEnabled();\n        expect(_slider).toBeEnabled();\n      });\n      \n      const ttiTime = monitor.measure('tti', 'tti-start');\n      \n      // TTI should be under 3 seconds for good UX\n      expect(ttiTime).toBeLessThan(3000);\n      \n      logger.debug(`Time to Interactive: ${ttiTime.toFixed(2)}ms`);\n    });\n\n    it('should efficiently batch DOM updates', async () => {\n      let updateCount = 0;\n      \n      // Monitor DOM mutations\n      const observer = new MutationObserver(() => {\n        updateCount++;\n      });\n      \n      const { container } = render(\n        <TestWrapper>\n          <MoodTracker />\n        </TestWrapper>\n      );\n      \n      observer.observe(container, { \n        childList: true, \n        subtree: true,\n        attributes: true \n      });\n      \n      const slider = screen.getByRole('slider');\n      \n      // Rapid mood changes\n      for (let i = 1; i <= 10; i++) {\n        fireEvent.change(slider, { target: { value: i.toString() } });\n      }\n      \n      // Wait for updates to settle\n      await new Promise(resolve => setTimeout(resolve, 100));\n      \n      observer.disconnect();\n      \n      // Updates should be batched efficiently\n      expect(updateCount).toBeLessThan(50); // Should batch updates\n      \n      logger.debug(`DOM updates for 10 changes: ${updateCount}`);\n    });\n  });\n\n  describe('Performance Summary', () => {\n    it('should generate performance report', async () => {\n      const user = userEvent.setup();\n      const performanceMetrics: Record<string, number> = {};\n      \n      // Test complete user flow\n      monitor.mark('flow-start');\n      \n      render(\n        <TestWrapper>\n          <CrisisButton />\n          <MoodTracker />\n        </TestWrapper>\n      );\n      \n      performanceMetrics.initialRender = monitor.measure('initial-render', 'flow-start');\n      \n      // Test crisis button\n      monitor.mark('crisis-test-start');\n      const crisisButton = screen.getByRole('button', { name: /crisis help/i });\n      await user.click(_crisisButton);\n      await waitFor(() => screen.getByText('988'));\n      performanceMetrics.crisisResponse = monitor.measure('crisis-test', 'crisis-test-start');\n      \n      // Close modal\n      await user.click(screen.getByRole('button', { name: /close/i }));\n      \n      // Test mood tracker\n      monitor.mark('mood-test-start');\n      const slider = screen.getByRole('slider');\n      fireEvent.change(slider, { target: { value: '7' } });\n      await user.click(screen.getByRole('button', { name: /log mood/i }));\n      performanceMetrics.moodLogging = monitor.measure('mood-test', 'mood-test-start');\n      \n      // Overall flow time\n      performanceMetrics.totalFlow = monitor.measure('total-flow', 'flow-start');\n      \n      // Generate report\n      logger.debug('\\n=== Performance Report ===');\n      logger.debug(`Initial Render: ${performanceMetrics.initialRender.toFixed(2)}ms`);\n      logger.debug(`Crisis Response: ${performanceMetrics.crisisResponse.toFixed(2)}ms`);\n      logger.debug(`Mood Logging: ${performanceMetrics.moodLogging.toFixed(2)}ms`);\n      logger.debug(`Total Flow: ${performanceMetrics.totalFlow.toFixed(2)}ms`);\n      logger.debug('========================\\n');\n      \n      // Assert critical metrics\n      expect(performanceMetrics.crisisResponse).toBeLessThan(PERFORMANCE_THRESHOLDS.CRISIS_RESPONSE);\n      expect(performanceMetrics.initialRender).toBeLessThan(PERFORMANCE_THRESHOLDS.RENDER_TIME * 3);\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\performance\\load-performance.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: '>' expected.","line":56,"column":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Performance and Load Testing Suite\n// Ensures the mental health platform meets performance requirements under various conditions\n\nimport { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { performance } from 'perf_hooks';\n\n// Performance thresholds\nconst PERFORMANCE_THRESHOLDS = {\n  CRISIS_RESPONSE: 200,        // Max 200ms for crisis features\n  PAGE_LOAD: 3000,             // Max 3s for initial page load\n  INTERACTION: 100,            // Max 100ms for user interactions\n  API_RESPONSE: 1000,          // Max 1s for API responses\n  SEARCH: 500,                 // Max 500ms for search results\n  NAVIGATION: 300,             // Max 300ms for page navigation\n  MEMORY_LIMIT: 50 * 1024 * 1024, // 50MB memory limit\n  FPS_TARGET: 60,              // Target 60 FPS for animations\n};\n\n// Helper to measure performance\nconst measurePerformance = async (operation: () => Promise<void> | void): Promise<number> => {\n  const start = performance.now();\n  await operation();\n  return performance.now() - start;\n};\n\n// Helper to simulate network conditions\nconst simulateNetwork = (type: 'fast' | 'slow' | '3g' | 'offline') => {\n  const conditions = {\n    fast: { latency: 20, bandwidth: 10000 },\n    slow: { latency: 500, bandwidth: 100 },\n    '3g': { latency: 100, bandwidth: 1500 },\n    offline: { latency: Infinity, bandwidth: 0 }\n  };\n  \n  const config = conditions[type];\n  \n  // Mock fetch with network simulation\n  global.fetch = vi.fn((_url) => {\n    return new Promise((_resolve) => {\n      setTimeout(() => {\n        resolve({\n          ok: type !== 'offline',\n          json: () => Promise.resolve({}),\n          text: () => Promise.resolve(''),\n        } as Response);\n      }, config.latency);\n    });\n  });\n};\n\ndescribe('Performance Testing', () => {\n  \n  describe('Critical Response Times', () => {\n    it('should display crisis intervention UI within 200ms', async () => {\n      render(<App />);\n      \n      const duration = await measurePerformance(async () => {\n        testUtils.triggerCrisis();\n        await screen.findByRole('button', { name: /988/i });\n      });\n      \n      expect(_duration).toBeLessThan(PERFORMANCE_THRESHOLDS.CRISIS_RESPONSE);\n    });\n    \n    it('should load safety plan within 200ms', async () => {\n      localStorage.setItem('safety_plan', JSON.stringify({\n        warningSignals: ['Feeling hopeless'],\n        copingStrategies: ['Deep breathing'],\n        contacts: ['Mom: 555-0101']\n      }));\n      \n      render(<App />);\n      \n      const duration = await measurePerformance(async () => {\n        testUtils.triggerCrisis();\n        await screen.findByTestId('safety-plan');\n      });\n      \n      expect(_duration).toBeLessThan(PERFORMANCE_THRESHOLDS.CRISIS_RESPONSE);\n    });\n    \n    it('should connect to crisis counselor quickly', async () => {\n      render(<App />);\n      testUtils.triggerCrisis();\n      \n      const chatButton = await screen.findByRole('button', { name: /chat.*counselor/i });\n      \n      const duration = await measurePerformance(async () => {\n        fireEvent.click(_chatButton);\n        await screen.findByText(/connecting/i);\n      });\n      \n      expect(_duration).toBeLessThan(500); // Initial connection UI should be immediate\n    });\n  });\n  \n  describe('Page Load Performance', () => {\n    it('should complete initial page load within 3 seconds', async () => {\n      const duration = await measurePerformance(async () => {\n        render(<App />);\n        await screen.findByRole('navigation');\n        await screen.findByRole('main');\n      });\n      \n      expect(_duration).toBeLessThan(PERFORMANCE_THRESHOLDS.PAGE_LOAD);\n    });\n    \n    it('should progressively load non-critical content', async () => {\n      const { container } = render(<App />);\n      \n      // Critical content should load immediately\n      const criticalLoadTime = await measurePerformance(async () => {\n        await screen.findByRole('navigation');\n        await screen.findByRole('button', { name: /crisis.*help/i });\n      });\n      \n      expect(_criticalLoadTime).toBeLessThan(1000);\n      \n      // Non-critical content can load later\n      const nonCriticalLoadTime = await measurePerformance(async () => {\n        await screen.findByTestId('wellness-insights');\n        await screen.findByTestId('community-feed');\n      });\n      \n      // Non-critical should load after critical\n      expect(_nonCriticalLoadTime).toBeGreaterThan(_criticalLoadTime);\n    });\n    \n    it('should implement code splitting effectively', async () => {\n      const { container } = render(<App />);\n      \n      // Check initial bundle size\n      const scripts = Array.from(document.querySelectorAll('script'));\n      const _initialScripts = scripts.filter(s => s.src && !s.src.includes('chunk'));\n      \n      // Navigate to feature that should be code-split\n      const therapyLink = await screen.findByRole('link', { name: /therapy/i });\n      fireEvent.click(_therapyLink);\n      \n      await waitFor(() => {\n        const newScripts = Array.from(document.querySelectorAll('script'));\n        const chunkScripts = newScripts.filter(s => s.src && s.src.includes('chunk'));\n        \n        // Should have loaded additional chunks\n        expect(chunkScripts.length).toBeGreaterThan(0);\n      });\n    });\n  });\n  \n  describe('User Interaction Performance', () => {\n    it('should respond to button clicks within 100ms', async () => {\n      render(<App />);\n      \n      const buttons = await screen.findAllByRole('button');\n      \n      for (const button of buttons.slice(0, 5)) { // Test first 5 buttons\n        const duration = await measurePerformance(() => {\n          fireEvent.click(_button);\n        });\n        \n        expect(_duration).toBeLessThan(PERFORMANCE_THRESHOLDS.INTERACTION);\n      }\n    });\n    \n    it('should handle form input without lag', async () => {\n      render(<App />);\n      \n      const input = await screen.findByRole('textbox', { name: /search/i });\n      \n      const duration = await measurePerformance(async () => {\n        for (let i = 0; i < 10; i++) {\n          fireEvent.change(input, { target: { value: `test${i}` } });\n        }\n      });\n      \n      // Average time per keystroke\n      const avgTime = duration / 10;\n      expect(_avgTime).toBeLessThan(50); // Should handle at least 20 keystrokes per second\n    });\n    \n    it('should debounce search appropriately', async () => {\n      render(<App />);\n      \n      const searchInput = await screen.findByRole('searchbox');\n      const apiCalls: number[] = [];\n      \n      // Mock API to track calls\n      global.fetch = vi.fn(() => {\n        apiCalls.push(Date.now());\n        return Promise.resolve({\n          ok: true,\n          json: () => Promise.resolve([])\n        } as Response);\n      });\n      \n      // Type quickly\n      for (let i = 0; i < 5; i++) {\n        fireEvent.change(searchInput, { target: { value: `query${i}` } });\n        await new Promise(resolve => setTimeout(resolve, 50));\n      }\n      \n      // Wait for debounce\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Should have made limited API calls due to debouncing\n      expect(apiCalls.length).toBeLessThanOrEqual(2);\n    });\n  });\n  \n  describe('Memory Performance', () => {\n    it('should not leak memory during navigation', async () => {\n      if (!global.gc) {\n        console.warn('Garbage collection not available, skipping memory test');\n        return;\n      }\n      \n      const { rerender } = render(<App />);\n      \n      // Force garbage collection and measure initial memory\n      global.gc();\n      const initialMemory = performance.memory?.usedJSHeapSize || 0;\n      \n      // Navigate through pages multiple times\n      for (let i = 0; i < 10; i++) {\n        const links = await screen.findAllByRole('link');\n        fireEvent.click(links[i % links.length]);\n        await new Promise(resolve => setTimeout(resolve, 100));\n        rerender(<App />);\n      }\n      \n      // Force garbage collection and measure final memory\n      global.gc();\n      const finalMemory = performance.memory?.usedJSHeapSize || 0;\n      \n      // Memory increase should be minimal\n      const memoryIncrease = finalMemory - initialMemory;\n      expect(_memoryIncrease).toBeLessThan(5 * 1024 * 1024); // Less than 5MB increase\n    });\n    \n    it('should efficiently handle large datasets', async () => {\n      // Create large dataset\n      const moodEntries = Array.from({ length: 1000 }, (_, i) => ({\n        id: i,\n        date: new Date(Date.now() - i * 86400000),\n        mood: Math.floor(Math.random() * 10) + 1,\n        notes: `Entry ${i}`\n      }));\n      \n      localStorage.setItem('mood_history', JSON.stringify(_moodEntries));\n      \n      const duration = await measurePerformance(async () => {\n        render(<App />);\n        const historyButton = await screen.findByRole('button', { name: /mood.*history/i });\n        fireEvent.click(_historyButton);\n        await screen.findByTestId('mood-history-list');\n      });\n      \n      expect(_duration).toBeLessThan(1000); // Should handle 1000 entries in under 1 second\n      \n      // Check if virtualization is used\n      const visibleItems = screen.getAllByTestId(/mood-entry-/);\n      expect(visibleItems.length).toBeLessThan(100); // Should virtualize long lists\n    });\n    \n    it('should clean up event listeners properly', async () => {\n      const { unmount } = render(<App />);\n      \n      // Count initial event listeners\n      const getEventListenerCount = () => {\n        const events = ['click', 'scroll', 'resize', 'keydown'];\n        return events.reduce((count, event) => {\n          const listeners = window.getEventListeners?.(window, event) || [];\n          return count + listeners.length;\n        }, 0);\n      };\n      \n      const initialCount = getEventListenerCount();\n      \n      // Interact with the app\n      const buttons = await screen.findAllByRole('button');\n      buttons.forEach(button => fireEvent.click(_button));\n      \n      // Unmount\n      unmount();\n      \n      // Check that listeners were cleaned up\n      const finalCount = getEventListenerCount();\n      expect(_finalCount).toBeLessThanOrEqual(_initialCount);\n    });\n  });\n  \n  describe('Network Performance', () => {\n    it('should handle slow network gracefully', async () => {\n      simulateNetwork('slow');\n      \n      render(<App />);\n      \n      // Should show loading states\n      expect(screen.getByTestId('loading-skeleton')).toBeInTheDocument();\n      \n      // Critical features should still be available\n      expect(screen.getByRole('button', { name: /crisis.*help/i })).toBeInTheDocument();\n      \n      // Should eventually load\n      await waitFor(() => {\n        expect(screen.queryByTestId('loading-skeleton')).not.toBeInTheDocument();\n      }, { timeout: 5000 });\n    });\n    \n    it('should implement effective caching', async () => {\n      let fetchCount = 0;\n      global.fetch = vi.fn(() => {\n        fetchCount++;\n        return Promise.resolve({\n          ok: true,\n          json: () => Promise.resolve({ data: 'test' })\n        } as Response);\n      });\n      \n      const { rerender } = render(<App />);\n      \n      // Wait for initial data fetch\n      await waitFor(() => expect(_fetchCount).toBeGreaterThan(0));\n      const initialFetchCount = fetchCount;\n      \n      // Rerender (simulate navigation back)\n      rerender(<App />);\n      \n      // Should use cached data instead of fetching again\n      await new Promise(resolve => setTimeout(resolve, 100));\n      expect(_fetchCount).toBe(_initialFetchCount);\n    });\n    \n    it('should batch API requests efficiently', async () => {\n      const apiCalls: string[] = [];\n      \n      global.fetch = vi.fn((url: string) => {\n        apiCalls.push(_url);\n        return Promise.resolve({\n          ok: true,\n          json: () => Promise.resolve({})\n        } as Response);\n      });\n      \n      render(<App />);\n      \n      // Trigger multiple data needs\n      const wellnessButton = await screen.findByRole('button', { name: /wellness/i });\n      const moodButton = await screen.findByRole('button', { name: /mood/i });\n      const journalButton = await screen.findByRole('button', { name: /journal/i });\n      \n      fireEvent.click(_wellnessButton);\n      fireEvent.click(_moodButton);\n      fireEvent.click(_journalButton);\n      \n      await waitFor(() => {\n        // Should batch requests instead of making many individual calls\n        const batchedCalls = apiCalls.filter(url => url.includes('batch'));\n        expect(batchedCalls.length).toBeGreaterThan(0);\n      });\n    });\n  });\n  \n  describe('Animation Performance', () => {\n    it('should maintain 60 FPS during animations', async () => {\n      const { container } = render(<App />);\n      \n      // Find animated elements\n      const animatedElements = container.querySelectorAll('[data-animated], .transition');\n      \n      const frameRates: number[] = [];\n      let lastTime = performance.now();\n      let frameCount = 0;\n      \n      const measureFPS = () => {\n        frameCount++;\n        const currentTime = performance.now();\n        const delta = currentTime - lastTime;\n        \n        if (delta >= 1000) {\n          frameRates.push(_frameCount);\n          frameCount = 0;\n          lastTime = currentTime;\n        }\n        \n        if (frameRates.length < 3) {\n          requestAnimationFrame(_measureFPS);\n        }\n      };\n      \n      // Trigger animations\n      animatedElements.forEach(el => {\n        el.classList.add('animating');\n      });\n      \n      requestAnimationFrame(_measureFPS);\n      \n      // Wait for measurements\n      await new Promise(resolve => setTimeout(resolve, 3500));\n      \n      // Average FPS should be close to 60\n      const avgFPS = frameRates.reduce((a, b) => a + b, 0) / frameRates.length;\n      expect(_avgFPS).toBeGreaterThan(50); // Allow some variance\n    });\n    \n    it('should use CSS transforms for animations', async () => {\n      const { container } = render(<App />);\n      \n      const animatedElements = container.querySelectorAll('[data-animated], .transition');\n      \n      animatedElements.forEach(element => {\n        const styles = window.getComputedStyle(_element);\n        const transition = styles.transition;\n        \n        if (transition && transition !== 'none') {\n          // Should animate transform or opacity (GPU-accelerated)\n          expect(_transition).toMatch(/transform|opacity/);\n          \n          // Should not animate properties that cause reflow\n          expect(_transition).not.toMatch(/width|height|padding|margin/);\n        }\n      });\n    });\n  });\n  \n  describe('Load Testing', () => {\n    it('should handle multiple concurrent users', async () => {\n      const userSimulations = Array.from({ length: 10 }, async (_, i) => {\n        const { container } = render(<App key={i} />);\n        \n        // Simulate user actions\n        const buttons = container.querySelectorAll('button');\n        buttons.forEach(button => fireEvent.click(_button));\n        \n        return container;\n      });\n      \n      const start = performance.now();\n      const containers = await Promise.all(_userSimulations);\n      const duration = performance.now() - start;\n      \n      // Should handle 10 concurrent users efficiently\n      expect(_duration).toBeLessThan(5000);\n      \n      // All instances should render correctly\n      containers.forEach(container => {\n        expect(container.querySelector('[role=\"main\"]')).toBeInTheDocument();\n      });\n    });\n    \n    it('should handle rapid user interactions', async () => {\n      render(<App />);\n      \n      const moodButton = await screen.findByRole('button', { name: /track.*mood/i });\n      \n      const duration = await measurePerformance(async () => {\n        // Simulate rapid clicking (stress test)\n        for (let i = 0; i < 50; i++) {\n          fireEvent.click(_moodButton);\n          await new Promise(resolve => setTimeout(resolve, 10));\n        }\n      });\n      \n      // Should handle rapid interactions without crashing\n      expect(_duration).toBeLessThan(2000);\n      \n      // App should still be responsive\n      expect(screen.getByRole('main')).toBeInTheDocument();\n    });\n    \n    it('should handle large number of DOM elements efficiently', async () => {\n      // Create scenario with many elements\n      const largeDataset = Array.from({ length: 500 }, (_, i) => ({\n        id: i,\n        title: `Item ${i}`,\n        content: `Content for item ${i}`\n      }));\n      \n      localStorage.setItem('community_posts', JSON.stringify(_largeDataset));\n      \n      const duration = await measurePerformance(async () => {\n        render(<App />);\n        const communityLink = await screen.findByRole('link', { name: /community/i });\n        fireEvent.click(_communityLink);\n        await screen.findByTestId('community-feed');\n      });\n      \n      expect(_duration).toBeLessThan(2000);\n      \n      // Check that virtualization or pagination is used\n      const visiblePosts = screen.getAllByTestId(/post-/);\n      expect(visiblePosts.length).toBeLessThan(50); // Should not render all 500 at once\n    });\n  });\n  \n  describe('Real-time Features Performance', () => {\n    it('should handle real-time chat efficiently', async () => {\n      render(<App />);\n      \n      // Open chat\n      const chatButton = await screen.findByRole('button', { name: /chat/i });\n      fireEvent.click(_chatButton);\n      \n      const chatInput = await screen.findByRole('textbox', { name: /message/i });\n      \n      // Simulate rapid messages\n      const messages: number[] = [];\n      \n      for (let i = 0; i < 20; i++) {\n        const start = performance.now();\n        fireEvent.change(chatInput, { target: { value: `Message ${i}` } });\n        fireEvent.submit(chatInput.closest('form')!);\n        messages.push(performance.now() - start);\n        \n        await new Promise(resolve => setTimeout(resolve, 50));\n      }\n      \n      // Average message handling time\n      const avgTime = messages.reduce((a, b) => a + b) / messages.length;\n      expect(_avgTime).toBeLessThan(100);\n    });\n    \n    it('should handle WebSocket reconnection efficiently', async () => {\n      const mockWebSocket = {\n        send: vi.fn(),\n        close: vi.fn(),\n        addEventListener: vi.fn(),\n        removeEventListener: vi.fn(),\n        readyState: WebSocket.OPEN\n      };\n      \n      global.WebSocket = vi.fn(() => mockWebSocket) as unknown;\n      \n      render(<App />);\n      \n      // Simulate disconnection\n      mockWebSocket.readyState = WebSocket.CLOSED;\n      const disconnectEvent = new Event('close');\n      mockWebSocket.addEventListener.mock.calls\n        .filter(([event]) => event === 'close')\n        .forEach(([, handler]) => handler(_disconnectEvent));\n      \n      // Should attempt reconnection\n      await waitFor(() => {\n        expect(global.WebSocket).toHaveBeenCalledTimes(2); // Initial + reconnect\n      });\n    });\n  });\n  \n  describe('Bundle Size and Loading', () => {\n    it('should have optimized bundle sizes', () => {\n      // Check main bundle size\n      const scripts = Array.from(document.querySelectorAll('script[src]'));\n      \n      scripts.forEach(script => {\n        // Mock checking file size\n        const src = script.getAttribute('src');\n        if (src?.includes('main')) {\n          // Main bundle should be under 200KB\n          expect(script.getAttribute('data-size')).toBeLessThan(200 * 1024);\n        }\n        if (src?.includes('vendor')) {\n          // Vendor bundle should be under 500KB\n          expect(script.getAttribute('data-size')).toBeLessThan(500 * 1024);\n        }\n      });\n    });\n    \n    it('should lazy load images', async () => {\n      const { container } = render(<App />);\n      \n      const images = container.querySelectorAll('img');\n      \n      images.forEach(img => {\n        // Should have lazy loading attribute\n        expect(img.getAttribute('loading')).toBe('lazy');\n        \n        // Should use appropriate image formats\n        const src = img.getAttribute('src');\n        expect(_src).toMatch(/\\.(webp|jpg|png|svg)$/);\n      });\n    });\n  });\n  \n  describe('Performance Monitoring', () => {\n    it('should track and report performance metrics', async () => {\n      const metrics: unknown[] = [];\n      \n      // Mock performance observer\n      global.PerformanceObserver = vi.fn().mockImplementation((_callback) => ({\n        observe: vi.fn(() => {\n          // Simulate performance entries\n          callback({\n            getEntries: () => [\n              { name: 'FCP', value: 1200 },\n              { name: 'LCP', value: 2100 },\n              { name: 'FID', value: 50 },\n              { name: 'CLS', value: 0.05 }\n            ]\n          });\n        }),\n        disconnect: vi.fn()\n      }));\n      \n      render(<App />);\n      \n      await waitFor(() => {\n        // Should initialize performance monitoring\n        expect(global.PerformanceObserver).toHaveBeenCalled();\n      });\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\performance\\performance.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'time' is defined but never used. Allowed unused args must match /^_/u.","line":322,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":322,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'b' is defined but never used. Allowed unused args must match /^_/u.","line":388,"column":56,"nodeType":null,"messageId":"unusedVar","endLine":388,"endColumn":57}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Comprehensive Performance Testing Suite\nimport { describe, it, expect, beforeAll, afterAll } from 'vitest';\nimport { performance } from 'perf_hooks';\nimport puppeteer, { Browser, Page } from 'puppeteer';\n\n// Performance thresholds\nconst THRESHOLDS = {\n  CRISIS_RESPONSE: 200, // ms\n  PAGE_LOAD: 3000, // ms\n  API_RESPONSE: 100, // ms\n  FIRST_CONTENTFUL_PAINT: 1500, // ms\n  TIME_TO_INTERACTIVE: 3500, // ms\n  LARGEST_CONTENTFUL_PAINT: 2500, // ms\n  CUMULATIVE_LAYOUT_SHIFT: 0.1,\n  FIRST_INPUT_DELAY: 100, // ms\n  BUNDLE_SIZE_LIMIT: 500000, // 500KB\n};\n\ndescribe('Performance Testing Suite', () => {\n  let browser: Browser;\n  let page: Page;\n\n  beforeAll(async () => {\n    browser = await puppeteer.launch({\n      headless: true,\n      args: ['--no-sandbox', '--disable-setuid-sandbox'],\n    });\n    page = await browser.newPage();\n    \n    // Enable performance metrics collection\n    await page.evaluateOnNewDocument(() => {\n      window.__PERFORMANCE_MARKS__ = [];\n      const originalMark = performance.mark.bind(performance);\n      performance.mark = function(name: string) {\n        window.__PERFORMANCE_MARKS__.push({ name, _time: performance.now() });\n        return originalMark(_name);\n      };\n    });\n  });\n\n  afterAll(async () => {\n    await browser.close();\n  });\n\n  describe('Core Web Vitals', () => {\n    it('should meet Largest Contentful Paint (_LCP) threshold', async () => {\n      await page.goto('http://localhost:5173', { waitUntil: 'networkidle0' });\n      \n      const _lcp = await page.evaluate(() => {\n        return new Promise<number>((resolve) => {\n          new PerformanceObserver((list) => {\n            const entries = list.getEntries();\n            const lastEntry = entries[entries.length - 1] as unknown;\n            resolve(lastEntry.renderTime || lastEntry._loadTime);\n          }).observe({ entryTypes: ['largest-contentful-paint'] });\n        });\n      });\n\n      expect(_lcp).toBeLessThan(THRESHOLDS.LARGEST_CONTENTFUL_PAINT);\n    });\n\n    it('should meet First Input Delay (_FID) threshold', async () => {\n      await page.goto('http://localhost:5173', { waitUntil: 'networkidle0' });\n      \n      // Simulate user interaction\n      const startTime = await page.evaluate(() => performance.now());\n      await page.click('button');\n      const endTime = await page.evaluate(() => performance.now());\n      \n      const _fid = endTime - startTime;\n      expect(_fid).toBeLessThan(THRESHOLDS.FIRST_INPUT_DELAY);\n    });\n\n    it('should meet Cumulative Layout Shift (_CLS) threshold', async () => {\n      await page.goto('http://localhost:5173', { waitUntil: 'networkidle0' });\n      \n      const _cls = await page.evaluate(() => {\n        return new Promise<number>((resolve) => {\n          let _clsValue = 0;\n          new PerformanceObserver((list) => {\n            for (const entry of list.getEntries()) {\n              if (!(entry as unknown).hadRecentInput) {\n                _clsValue += (entry as unknown).value;\n              }\n            }\n            resolve(_clsValue);\n          }).observe({ entryTypes: ['layout-shift'] });\n          \n          // Trigger some interactions that might cause layout shifts\n          setTimeout(() => {\n            window.scrollTo(0, 100);\n            setTimeout(() => resolve(_clsValue), 1000);\n          }, 1000);\n        });\n      });\n\n      expect(_cls).toBeLessThan(THRESHOLDS.CUMULATIVE_LAYOUT_SHIFT);\n    });\n\n    it('should meet First Contentful Paint (_FCP) threshold', async () => {\n      const startTime = Date.now();\n      await page.goto('http://localhost:5173');\n      \n      await page.waitForSelector('[data-testid=\"app-ready\"]');\n      const _fcp = Date.now() - startTime;\n      \n      expect(_fcp).toBeLessThan(THRESHOLDS.FIRST_CONTENTFUL_PAINT);\n    });\n\n    it('should meet Time to Interactive (_TTI) threshold', async () => {\n      const startTime = Date.now();\n      await page.goto('http://localhost:5173');\n      \n      // Wait for page to be fully interactive\n      await page.evaluate(() => {\n        return new Promise((resolve) => {\n          if (document.readyState === 'complete') {\n            resolve(true);\n          } else {\n            window.addEventListener('load', () => resolve(true));\n          }\n        });\n      });\n      \n      const _tti = Date.now() - startTime;\n      expect(_tti).toBeLessThan(THRESHOLDS.TIME_TO_INTERACTIVE);\n    });\n  });\n\n  describe('Critical Path Performance', () => {\n    it('should respond to crisis button within 200ms', async () => {\n      await page.goto('http://localhost:5173');\n      await page.waitForSelector('[data-testid=\"crisis-button\"]');\n      \n      const _responseTime = await page.evaluate(() => {\n        return new Promise<number>((resolve) => {\n          const button = document.querySelector('[data-testid=\"crisis-button\"]') as HTMLElement;\n          const startTime = performance.now();\n          \n          button.click();\n          \n// @ts-expect-error - MutationObserver is a global API\n          const observer = new MutationObserver(() => {\n            const _modal = document.querySelector('[data-testid=\"crisis-_modal\"]');\n            if (_modal) {\n              resolve(performance.now() - startTime);\n              observer.disconnect();\n            }\n          });\n          \n          observer.observe(document.body, { childList: true, subtree: true });\n        });\n      });\n\n      expect(_responseTime).toBeLessThan(THRESHOLDS.CRISIS_RESPONSE);\n    });\n\n    it('should load dashboard within performance budget', async () => {\n      const startTime = Date.now();\n      await page.goto('http://localhost:5173/dashboard');\n      await page.waitForSelector('[data-testid=\"dashboard-loaded\"]');\n      \n      const _loadTime = Date.now() - startTime;\n      expect(_loadTime).toBeLessThan(THRESHOLDS.PAGE_LOAD);\n    });\n\n    it('should maintain 60fps during animations', async () => {\n      await page.goto('http://localhost:5173');\n      \n      const _fps = await page.evaluate(() => {\n        return new Promise<number>((resolve) => {\n          let _frames = 0;\n          const startTime = performance.now();\n          \n          function _measureFPS() {\n            _frames++;\n            const currentTime = performance.now();\n            const elapsed = currentTime - startTime;\n            \n            if (elapsed >= 1000) {\n              resolve(_frames);\n            } else {\n              requestAnimationFrame(_measureFPS);\n            }\n          }\n          \n          // Trigger animation\n          const _element = document.querySelector('[data-testid=\"animated-element\"]') as HTMLElement;\n          if (_element) {\n            _element.style.animation = 'pulse 1s infinite';\n          }\n          \n          requestAnimationFrame(_measureFPS);\n        });\n      });\n\n      expect(_fps).toBeGreaterThanOrEqual(55); // Allow slight variance from 60fps\n    });\n  });\n\n  describe('Memory Management', () => {\n    it('should not have memory leaks during navigation', async () => {\n      const getMemoryUsage = () => page.evaluate(() => {\n        return (performance as unknown).memory ? (performance as unknown).memory.usedJSHeapSize : 0;\n      });\n\n      const initialMemory = await getMemoryUsage();\n      \n      // Navigate through multiple pages\n      for (let i = 0; i < 10; i++) {\n        await page.goto('http://localhost:5173/dashboard');\n        await page.goto('http://localhost:5173/wellness');\n        await page.goto('http://localhost:5173/community');\n      }\n      \n      // Force garbage collection if available\n      await page.evaluate(() => {\n        if ((global as unknown).gc) {\n          (global as unknown).gc();\n        }\n      });\n      \n      const finalMemory = await getMemoryUsage();\n      const _memoryIncrease = finalMemory - initialMemory;\n      \n      // Memory should not increase by more than 10MB\n      expect(_memoryIncrease).toBeLessThan(10 * 1024 * 1024);\n    });\n\n    it('should properly clean up event listeners', async () => {\n      await page.goto('http://localhost:5173');\n      \n      const _listenerCount = await page.evaluate(() => {\n        const getEventListeners = (_element: unknown) => {\n          const _listeners = (window as unknown).getEventListeners?.(_element) || {};\n          return Object.values(_listeners).flat().length;\n        };\n        \n        // Get initial count\n        const initialCount = getEventListeners(_window) + getEventListeners(_document);\n        \n        // Trigger component mount/unmount cycle\n        const button = document.querySelector('[data-testid=\"toggle-component\"]') as HTMLElement;\n        if (button) {\n          button.click(); // Mount\n          setTimeout(() => button.click(), 100); // Unmount\n        }\n        \n        // Return difference after cleanup\n        return new Promise<number>((resolve) => {\n          setTimeout(() => {\n            const finalCount = getEventListeners(_window) + getEventListeners(_document);\n            resolve(finalCount - initialCount);\n          }, 200);\n        });\n      });\n\n      expect(_listenerCount).toBeLessThanOrEqual(0);\n    });\n  });\n\n  describe('Network Performance', () => {\n    it('should implement effective caching strategy', async () => {\n      // First load\n      await page.goto('http://localhost:5173');\n      \n      const firstLoadMetrics = await page.evaluate(() => {\n        const resources = performance.getEntriesByType('resource') as PerformanceResourceTiming[];\n        return resources.map(r => ({\n          name: r.name,\n          duration: r.duration,\n          size: r.transferSize,\n        }));\n      });\n      \n      // Second load (should use cache)\n      await page.reload();\n      \n      const secondLoadMetrics = await page.evaluate(() => {\n        const resources = performance.getEntriesByType('resource') as PerformanceResourceTiming[];\n        return resources.map(r => ({\n          name: r.name,\n          duration: r.duration,\n          size: r.transferSize,\n        }));\n      });\n      \n      // Calculate cache hit rate\n      const cacheHits = secondLoadMetrics.filter((r, i) => \n        r.size === 0 || r.size < (firstLoadMetrics[i]?.size || 0) * 0.1\n      ).length;\n      \n      const _cacheHitRate = cacheHits / secondLoadMetrics.length;\n      expect(_cacheHitRate).toBeGreaterThan(0.7); // 70% cache hit rate\n    });\n\n    it('should minimize API response times', async () => {\n      await page.goto('http://localhost:5173');\n      \n      const apiTimes = await page.evaluate(() => {\n        return new Promise<number[]>((resolve) => {\n          const times: number[] = [];\n          \n          // Intercept fetch\n          const originalFetch = window.fetch;\n          window.fetch = async (...args) => {\n            const startTime = performance.now();\n            const response = await originalFetch(...args);\n            times.push(performance.now() - startTime);\n            return response;\n          };\n          \n          // Trigger some API calls\n          Promise.all([\n            fetch('/api/user/profile'),\n            fetch('/api/wellness/data'),\n            fetch('/api/community/groups'),\n          ]).then(() => resolve(_times));\n        });\n      });\n\n      apiTimes.forEach(time => {\n        expect(_time).toBeLessThan(THRESHOLDS.API_RESPONSE);\n      });\n    });\n\n    it('should implement request batching for efficiency', async () => {\n      await page.goto('http://localhost:5173');\n      \n      const _requestCount = await page.evaluate(() => {\n        return new Promise<number>((resolve) => {\n          let _count = 0;\n          \n          // Monitor network requests\n          const observer = new PerformanceObserver((list) => {\n            _count += list.getEntries().filter(e => \n              e.name.includes('/api/')\n            ).length;\n          });\n          observer.observe({ entryTypes: ['resource'] });\n          \n          // Trigger multiple data requirements\n          const buttons = document.querySelectorAll('[data-action]');\n          buttons.forEach(b => (b as HTMLElement).click());\n          \n          setTimeout(() => resolve(_count), 1000);\n        });\n      });\n\n      // Should batch requests instead of making many individual calls\n      expect(_requestCount).toBeLessThan(5);\n    });\n  });\n\n  describe('Bundle Size Optimization', () => {\n    it('should keep JavaScript bundle under size limit', async () => {\n      await page.goto('http://localhost:5173');\n      \n      const _bundleSize = await page.evaluate(() => {\n        const scripts = performance.getEntriesByType('resource')\n          .filter(r => r.name.endsWith('.js')) as PerformanceResourceTiming[];\n        \n        return scripts.reduce((total, script) => total + script.transferSize, 0);\n      });\n\n      expect(_bundleSize).toBeLessThan(THRESHOLDS.BUNDLE_SIZE_LIMIT);\n    });\n\n    it('should implement code splitting effectively', async () => {\n      await page.goto('http://localhost:5173');\n      \n      const initialBundles = await page.evaluate(() => {\n        return performance.getEntriesByType('resource')\n          .filter(r => r.name.includes('.js'))\n          .map(r => r.name);\n      });\n      \n      // Navigate to a different route\n      await page.goto('http://localhost:5173/professionals');\n      \n      const afterNavigationBundles = await page.evaluate(() => {\n        return performance.getEntriesByType('resource')\n          .filter(r => r.name.includes('.js'))\n          .map(r => r.name);\n      });\n      \n      // Should have loaded additional chunks\n      const newBundles = afterNavigationBundles.filter(b => !initialBundles.includes(_b));\n      expect(newBundles.length).toBeGreaterThan(0);\n    });\n\n    it('should optimize image loading', async () => {\n      await page.goto('http://localhost:5173');\n      \n      const imageMetrics = await page.evaluate(() => {\n        const _images = document.querySelectorAll('img');\n        return Array.from(_images).map(img => ({\n          src: img.src,\n          loading: img.loading,\n          srcset: img.srcset,\n          sizes: img.sizes,\n          format: img.src.split('.').pop(),\n        }));\n      });\n\n      imageMetrics.forEach(img => {\n        // Images should use lazy loading where appropriate\n        if (!img.src.includes('hero') && !img.src.includes('logo')) {\n          expect(img.loading).toBe('lazy');\n        }\n        \n        // Should use modern image formats\n        expect(['webp', 'avif', 'jpg', 'png', 'svg']).toContain(img.format);\n        \n        // Should provide responsive images\n        if (!img.src.includes('icon')) {\n          expect(img.srcset || img.sizes).toBeTruthy();\n        }\n      });\n    });\n  });\n\n  describe('Database Query Performance', () => {\n    it('should execute queries within performance budget', async () => {\n      const queryTimes = await page.evaluate(() => {\n        return fetch('/api/test/query-performance')\n          .then(r => r.json())\n          .then(data => data.queryTimes);\n      });\n\n      queryTimes.forEach((_time: number) => {\n        expect(_time).toBeLessThan(50); // 50ms per query\n      });\n    });\n\n    it('should implement efficient pagination', async () => {\n      await page.goto('http://localhost:5173/community');\n      \n      const _loadTime = await page.evaluate(() => {\n        return new Promise<number>((resolve) => {\n          const startTime = performance.now();\n          \n          // Load paginated content\n          fetch('/api/community/posts?page=1&limit=20')\n            .then(() => resolve(performance.now() - startTime));\n        });\n      });\n\n      expect(_loadTime).toBeLessThan(200);\n    });\n  });\n\n  describe('Real User Monitoring Simulation', () => {\n    it('should perform well under various network conditions', async () => {\n      const conditions = [\n        { name: '3G', downloadThroughput: 1.6 * 1024 * 1024 / 8, uploadThroughput: 750 * 1024 / 8, latency: 150 },\n        { name: '4G', downloadThroughput: 4 * 1024 * 1024 / 8, uploadThroughput: 3 * 1024 * 1024 / 8, latency: 50 },\n      ];\n\n      for (const condition of conditions) {\n        // Simulate network condition\n        await page.emulateNetworkConditions({\n          downloadThroughput: condition.downloadThroughput,\n          uploadThroughput: condition.uploadThroughput,\n          latency: condition.latency,\n          offline: false,\n        });\n\n        const startTime = Date.now();\n        await page.goto('http://localhost:5173');\n        await page.waitForSelector('[data-testid=\"app-ready\"]');\n        const _loadTime = Date.now() - startTime;\n\n        // Adjust threshold based on network condition\n        const _adjustedThreshold = condition.name === '3G' ? THRESHOLDS.PAGE_LOAD * 2 : THRESHOLDS.PAGE_LOAD;\n        expect(_loadTime).toBeLessThan(_adjustedThreshold);\n      }\n    });\n\n    it('should handle concurrent users efficiently', async () => {\n      const userCount = 50;\n      const browsers: Browser[] = [];\n      const pages: Page[] = [];\n\n      // Create multiple browser instances\n      for (let i = 0; i < userCount; i++) {\n        const browser = await puppeteer.launch({ headless: true });\n        const page = await browser.newPage();\n        browsers.push(_browser);\n        pages.push(page);\n      }\n\n      // Simulate concurrent usage\n      const loadTimes = await Promise.all(\n        pages.map(async (page) => {\n          const startTime = Date.now();\n          await page.goto('http://localhost:5173');\n          await page.waitForSelector('[data-testid=\"app-ready\"]');\n          return Date.now() - startTime;\n        })\n      );\n\n      // Calculate statistics\n      const _avgLoadTime = loadTimes.reduce((a, b) => a + b, 0) / loadTimes.length;\n      const _maxLoadTime = Math.max(...loadTimes);\n\n      expect(_avgLoadTime).toBeLessThan(THRESHOLDS.PAGE_LOAD);\n      expect(_maxLoadTime).toBeLessThan(THRESHOLDS.PAGE_LOAD * 1.5);\n\n      // Cleanup\n      await Promise.all(browsers.map(b => b.close()));\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\reports\\test-reporter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\scripts\\run-all-tests.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":347,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":347,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * Comprehensive Test Runner for CoreV4 Mental Health Platform\n * Executes all test suites and generates comprehensive reports\n */\n\nimport { exec, _execSync } from 'child_process';\nimport { promises as fs } from 'fs';\nimport _path from 'path';\nimport chalk from 'chalk';\nimport { logger } from '../utils/logger';\n\n// Test suite configurations\nconst TEST_SUITES = {\n  unit: {\n    name: 'Unit Tests',\n    command: 'npm run test:unit',\n    critical: true,\n  },\n  crisis: {\n    name: 'Crisis Intervention Tests',\n    command: 'npm run test:crisis',\n    critical: true,\n  },\n  accessibility: {\n    name: 'Accessibility Tests (WCAG 2.1 AA)',\n    command: 'npm run test:accessibility',\n    critical: true,\n  },\n  performance: {\n    name: 'Performance & Load Tests',\n    command: 'npm run test:performance',\n    critical: true,\n  },\n  security: {\n    name: 'Security & Privacy Tests',\n    command: 'npm run test:security',\n    critical: true,\n  },\n  integration: {\n    name: 'Integration Tests',\n    command: 'npm run test:integration',\n    critical: false,\n  },\n  e2e: {\n    name: 'End-to-End Tests',\n    command: 'npm run test:e2e',\n    critical: false,\n  },\n  lighthouse: {\n    name: 'Lighthouse Performance Audit',\n    command: 'npm run lighthouse:ci',\n    critical: false,\n  },\n};\n\n// Test result storage\ninterface TestResult {\n  suite: string;\n  passed: boolean;\n  duration: number;\n  output?: string;\n  error?: string;\n}\n\nconst results: TestResult[] = [];\n\n// Helper functions\nfunction log(message: string, type: 'info' | 'success' | 'error' | 'warning' = 'info') {\n  const timestamp = new Date().toISOString();\n  const colors = {\n    info: chalk.blue,\n    success: chalk.green,\n    error: chalk.red,\n    warning: chalk.yellow,\n  };\n  \n  logger.info(`[${timestamp}] ${colors[type](_message)}`);\n}\n\nasync function ensureDirectories() {\n  const dirs = [\n    'test-results',\n    'test-results/coverage',\n    'test-results/reports',\n    'test-results/screenshots',\n    'test-results/videos',\n  ];\n  \n  for (const dir of dirs) {\n    await fs.mkdir(dir, { recursive: true });\n  }\n}\n\nasync function runTest(suite: string, config: typeof TEST_SUITES[keyof typeof TEST_SUITES]): Promise<TestResult> {\n  const startTime = Date.now();\n  log(`Running ${config.name}...`, 'info');\n  \n  return new Promise((resolve) => {\n    exec(config.command, { maxBuffer: 10 * 1024 * 1024 }, (error, stdout, stderr) => {\n      const duration = Date.now() - startTime;\n      const passed = !error;\n      \n      if (_passed) {\n        log(`✓ ${config.name} passed in ${(duration / 1000).toFixed(2)}s`, 'success');\n      } else {\n        log(`✗ ${config.name} failed after ${(duration / 1000).toFixed(2)}s`, 'error');\n        if (config.critical) {\n          log('This is a critical test suite!', 'error');\n        }\n      }\n      \n      resolve({\n        suite,\n        passed,\n        duration,\n        output: stdout,\n        error: stderr || error?.message,\n      });\n    });\n  });\n}\n\nasync function checkCrisisResponseTime() {\n  log('Validating crisis response time requirements...', 'info');\n  \n  try {\n    const _perfResults = await fs.readFile('test-results/performance-metrics.json', 'utf-8');\n    const metrics = JSON.parse(_perfResults);\n    \n    if (metrics.crisisResponseTime > 200) {\n      log(`Crisis response time ${metrics.crisisResponseTime}ms exceeds 200ms threshold!`, 'error');\n      return false;\n    }\n    \n    log(`Crisis response time: ${metrics.crisisResponseTime}ms ✓`, 'success');\n    return true;\n  } catch {\n    log('Could not validate crisis response time', 'warning');\n    return true;\n  }\n}\n\nasync function generateReport() {\n  log('Generating comprehensive test report...', 'info');\n  \n  const report = {\n    timestamp: new Date().toISOString(),\n    totalSuites: results.length,\n    passed: results.filter(r => r.passed).length,\n    failed: results.filter(r => !r.passed).length,\n    totalDuration: results.reduce((sum, r) => sum + r.duration, 0),\n    results,\n    criticalFailures: results.filter(r => !r.passed && TEST_SUITES[r.suite as keyof typeof TEST_SUITES].critical),\n  };\n  \n  // Generate HTML report\n  const htmlReport = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>CoreV4 Test Report - ${report.timestamp}</title>\n  <style>\n    body {\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;\n      line-height: 1.6;\n      color: #333;\n      max-width: 1200px;\n      margin: 0 auto;\n      padding: 20px;\n      background: #f5f5f5;\n    }\n    h1 {\n      color: #2563eb;\n      border-bottom: 3px solid #2563eb;\n      padding-bottom: 10px;\n    }\n    .summary {\n      background: white;\n      padding: 20px;\n      border-radius: 8px;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      margin-bottom: 20px;\n    }\n    .metric {\n      display: inline-block;\n      margin: 10px 20px 10px 0;\n    }\n    .metric-value {\n      font-size: 2em;\n      font-weight: bold;\n      color: #2563eb;\n    }\n    .metric-label {\n      color: #666;\n      font-size: 0.9em;\n    }\n    .passed { color: #10b981; }\n    .failed { color: #ef4444; }\n    .warning { color: #f59e0b; }\n    .test-suite {\n      background: white;\n      padding: 15px;\n      margin: 10px 0;\n      border-radius: 8px;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      border-left: 4px solid #ccc;\n    }\n    .test-suite.passed {\n      border-left-color: #10b981;\n    }\n    .test-suite.failed {\n      border-left-color: #ef4444;\n    }\n    .test-suite.critical {\n      background: #fef2f2;\n    }\n    .duration {\n      float: right;\n      color: #666;\n    }\n    .critical-badge {\n      background: #ef4444;\n      color: white;\n      padding: 2px 8px;\n      border-radius: 4px;\n      font-size: 0.8em;\n      margin-left: 10px;\n    }\n    .footer {\n      margin-top: 40px;\n      padding-top: 20px;\n      border-top: 1px solid #ddd;\n      text-align: center;\n      color: #666;\n    }\n  </style>\n</head>\n<body>\n  <h1>CoreV4 Mental Health Platform - Test Report</h1>\n  \n  <div class=\"summary\">\n    <h2>Test Summary</h2>\n    <div class=\"metrics\">\n      <div class=\"metric\">\n        <div class=\"metric-value ${report.passed === report.totalSuites ? 'passed' : 'failed'}\">\n          ${report.passed}/${report.totalSuites}\n        </div>\n        <div class=\"metric-label\">Tests Passed</div>\n      </div>\n      <div class=\"metric\">\n        <div class=\"metric-value\">${(report.totalDuration / 1000).toFixed(2)}s</div>\n        <div class=\"metric-label\">Total Duration</div>\n      </div>\n      <div class=\"metric\">\n        <div class=\"metric-value ${report.criticalFailures.length > 0 ? 'failed' : 'passed'}\">\n          ${report.criticalFailures.length}\n        </div>\n        <div class=\"metric-label\">Critical Failures</div>\n      </div>\n    </div>\n  </div>\n  \n  <h2>Test Results</h2>\n  ${results.map(result => `\n    <div class=\"test-suite ${result.passed ? 'passed' : 'failed'} ${!result.passed && TEST_SUITES[result.suite as keyof typeof TEST_SUITES].critical ? 'critical' : ''}\">\n      <strong>${TEST_SUITES[result.suite as keyof typeof TEST_SUITES].name}</strong>\n      ${!result.passed && TEST_SUITES[result.suite as keyof typeof TEST_SUITES].critical ? '<span class=\"critical-badge\">CRITICAL</span>' : ''}\n      <span class=\"duration\">${(result.duration / 1000).toFixed(2)}s</span>\n      <div style=\"clear: both;\"></div>\n      ${result.error ? `<pre style=\"color: #ef4444; margin-top: 10px;\">${result.error}</pre>` : ''}\n    </div>\n  `).join('')}\n  \n  <div class=\"footer\">\n    <p>Generated on ${new Date(report.timestamp).toLocaleString()}</p>\n    <p>CoreV4 Mental Health Platform - Quality Assurance Team</p>\n  </div>\n</body>\n</html>\n  `;\n  \n  await fs.writeFile('test-results/report.html', htmlReport);\n  await fs.writeFile('test-results/report.json', JSON.stringify(report, null, 2));\n  \n  log(`Report generated: test-results/report.html`, 'success');\n}\n\nasync function main() {\n  logger.info(chalk.bold.blue('\\n🧪 CoreV4 Mental Health Platform - Comprehensive Test Suite\\n'));\n  \n  try {\n    // Ensure test directories exist\n    await ensureDirectories();\n    \n    // Run all test suites\n    for (const [suite, config] of Object.entries(_TEST_SUITES)) {\n      const result = await runTest(suite, config);\n      results.push(result);\n      \n      // Stop on critical failure if in CI\n      if (!result.passed && config.critical && process.env.CI) {\n        log('Critical test failed in CI, stopping test run', 'error');\n        break;\n      }\n    }\n    \n    // Special validation for crisis response time\n    const crisisResponseValid = await checkCrisisResponseTime();\n    if (!crisisResponseValid) {\n      results.push({\n        suite: 'crisis-response-validation',\n        passed: false,\n        duration: 0,\n        error: 'Crisis response time exceeds 200ms threshold',\n      });\n    }\n    \n    // Generate comprehensive report\n    await generateReport();\n    \n    // Summary\n    logger.info(chalk.bold.blue('\\n📊 Test Summary\\n'));\n    logger.info(`Total Suites: ${results.length}`);\n    logger.info(`Passed: ${chalk.green(results.filter(r => r.passed).length)}`);\n    logger.info(`Failed: ${chalk.red(results.filter(r => !r.passed).length)}`);\n    \n    const criticalFailures = results.filter(r => !r.passed && TEST_SUITES[r.suite as keyof typeof TEST_SUITES]?.critical);\n    if (criticalFailures.length > 0) {\n      logger.info(chalk.bold.red(`\\n⚠️  ${criticalFailures.length} CRITICAL FAILURES DETECTED:`));\n      criticalFailures.forEach(failure => {\n        logger.info(chalk.red(`  - ${TEST_SUITES[failure.suite as keyof typeof TEST_SUITES].name}`));\n      });\n      process.exit(1);\n    } else if (results.some(r => !r.passed)) {\n      logger.info(chalk.yellow('\\n⚠️  Some tests failed, but no critical failures'));\n      process.exit(0);\n    } else {\n      logger.info(chalk.bold.green('\\n✅ All tests passed successfully!'));\n      logger.info(chalk.green('The CoreV4 Mental Health Platform is ready for deployment.'));\n      process.exit(0);\n    }\n    \n  } catch (_error) {\n    logger.error(chalk.red('Fatal undefined during test execution:'), undefined);\n    process.exit(1);\n  }\n}\n\n// Run if executed directly\nif (require.main === module) {\n  main();\n}\n\nexport { main as runAllTests };","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\security\\security.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\test\\setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\types\\ai-insights.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\types\\dashboard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\types\\emergency.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\types\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\types\\websocket-events.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\bundleOptimization\\lazyLoading.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\console\\consoleStyles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\console\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\crisis.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1013,1016],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1013,1016],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":146,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3867,3870],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3867,3870],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":183,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":183,"endColumn":18},{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":185,"column":39,"nodeType":"Literal","messageId":"unexpected","endLine":185,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5391,5394],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5391,5394],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":291,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":291,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":301,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":301,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":315,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":315,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":325,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":325,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":405,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":405,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":412,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":412,"endColumn":20}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Unified Crisis Utilities\r\n * Centralized crisis detection, handling, and logging functionality\r\n */\r\n\r\nimport { \r\n  CrisisLevel, \r\n  CRISIS_KEYWORDS, \r\n  CRISIS_LEVELS, \r\n  EMERGENCY_CONTACTS, \r\n  CRISIS_STORAGE_KEYS,\r\n  CRISIS_EVENTS,\r\n  EmergencyContact,\r\n  CrisisLevelConfig\r\n} from '../constants/crisis';\r\n\r\nimport { _secureStorage } from '../services/security/SecureLocalStorage';\r\nimport { logger } from './logger';\n\r\n// Re-export types\r\nexport type { CrisisLevel, EmergencyContact, CrisisLevelConfig };\r\n\r\nexport interface CrisisAssessment {\r\n  id: string;\r\n  timestamp: string;\r\n  level: CrisisLevel;\r\n  confidence: number;\r\n  triggers: string[];\r\n  text?: string;\r\n  context?: {\r\n    location?: GeolocationCoordinates;\r\n    timeOfDay?: string;\r\n    userAgent?: string;\r\n    isOnline?: boolean;\r\n  };\r\n}\r\n\r\nexport interface CrisisInteraction {\r\n  id: string;\r\n  timestamp: string;\r\n  action: string;\r\n  contact?: string;\r\n  level: CrisisLevel;\r\n  successful: boolean;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Detect crisis level from text input using keyword analysis\r\n */\r\nexport function detectCrisisLevel(text: string): CrisisAssessment {\r\n  const normalizedText = text.toLowerCase().trim();\r\n  const words = normalizedText.split(/\\s+/);\r\n  \r\n  let criticalMatches = 0;\r\n  let highMatches = 0;\r\n  let moderateMatches = 0;\r\n  let lowMatches = 0;\r\n  const triggers: string[] = [];\r\n\r\n  // Count _keyword matches\r\n  CRISIS_KEYWORDS.critical.forEach(_keyword => {\r\n    if (normalizedText.includes(_keyword)) {\r\n      criticalMatches++;\r\n      triggers.push(_keyword);\r\n    }\r\n  });\r\n\r\n  CRISIS_KEYWORDS.high.forEach(_keyword => {\r\n    if (normalizedText.includes(_keyword)) {\r\n      highMatches++;\r\n      triggers.push(_keyword);\r\n    }\r\n  });\r\n\r\n  CRISIS_KEYWORDS.moderate.forEach(_keyword => {\r\n    if (normalizedText.includes(_keyword)) {\r\n      moderateMatches++;\r\n      triggers.push(_keyword);\r\n    }\r\n  });\r\n\r\n  CRISIS_KEYWORDS.low.forEach(_keyword => {\r\n    if (normalizedText.includes(_keyword)) {\r\n      lowMatches++;\r\n      triggers.push(_keyword);\r\n    }\r\n  });\r\n\r\n  // Determine crisis level and confidence\r\n  let level: CrisisLevel = 'safe';\r\n  let confidence = 0;\r\n\r\n  if (criticalMatches > 0) {\r\n    level = 'critical';\r\n    confidence = Math.min(0.95, 0.7 + (criticalMatches * 0.1));\r\n  } else if (highMatches >= 2 || (highMatches >= 1 && moderateMatches >= 2)) {\r\n    level = 'high';\r\n    confidence = Math.min(0.85, 0.6 + (highMatches * 0.1) + (moderateMatches * 0.05));\r\n  } else if (highMatches >= 1 || moderateMatches >= 2) {\r\n    level = 'moderate';\r\n    confidence = Math.min(0.75, 0.4 + (highMatches * 0.15) + (moderateMatches * 0.1));\r\n  } else if (moderateMatches >= 1 || lowMatches >= 3) {\r\n    level = 'low';\r\n    confidence = Math.min(0.65, 0.3 + (moderateMatches * 0.1) + (lowMatches * 0.05));\r\n  }\r\n\r\n  // Adjust confidence based on text length and context\r\n  if (words.length < 3) {\r\n    confidence *= 0.7; // Reduce confidence for very short texts\r\n  }\r\n  if (words.length > 50) {\r\n    confidence *= 1.1; // Increase confidence for longer texts\r\n  }\r\n\r\n  const assessment: CrisisAssessment = {\r\n    id: generateId(),\r\n    timestamp: new Date().toISOString(),\r\n    level,\r\n    confidence,\r\n    triggers,\r\n    text: normalizedText,\r\n    context: {\r\n      timeOfDay: new Date().toTimeString().slice(0, 5),\r\n      isOnline: navigator.onLine\r\n    }\r\n  };\r\n\r\n  // Store assessment for trend analysis\r\n  storeCrisisAssessment(_assessment);\r\n\r\n  // Emit crisis level change event\r\n  window.dispatchEvent(new CustomEvent(CRISIS_EVENTS.levelChanged, {\r\n    detail: _assessment\r\n  }));\r\n\r\n  return assessment;\r\n}\r\n\r\n/**\r\n * Handle emergency contact interaction with location sharing\r\n */\r\nexport async function handleEmergencyCall(\r\n  contactId: string, \r\n  location?: GeolocationCoordinates,\r\n  context?: Record<string, any>\r\n): Promise<CrisisInteraction> {\r\n  const contact = EMERGENCY_CONTACTS.find(c => c.id === contactId);\r\n  if (!contact) {\r\n    throw new Error(`Emergency contact not found: ${contactId}`);\r\n  }\r\n\r\n  const interaction: CrisisInteraction = {\r\n    id: generateId(),\r\n    timestamp: new Date().toISOString(),\r\n    action: 'emergency_call',\r\n    contact: contact.id,\r\n    level: 'high', // Assume high level for emergency calls\r\n    successful: false,\r\n    metadata: {\r\n      contactName: contact.name,\r\n      contactNumber: contact.number,\r\n      location: location ? {\r\n        lat: location.latitude,\r\n        lng: location.longitude,\r\n        accuracy: location.accuracy\r\n      } : null,\r\n      isOnline: navigator.onLine,\r\n      ...context\r\n    }\r\n  };\r\n\r\n  try {\r\n    // Attempt to make the call/contact\r\n    window.location.href = contact.contact;\r\n    interaction.successful = true;\r\n\r\n    // Emit action taken event\r\n    window.dispatchEvent(new CustomEvent(CRISIS_EVENTS.actionTaken, {\r\n      detail: interaction\r\n    }));\r\n\r\n  } catch (_error) {\r\n    logger.error('Failed to initiate emergency contact:');\r\n    interaction.metadata!.undefined = false ? '[Error details unavailable]' : 'Unknown undefined';\r\n  }\r\n\r\n  // Store interaction for offline sync\r\n  await storeCrisisInteraction(interaction);\r\n\r\n  return interaction;\r\n}\r\n\r\n/**\r\n * Log crisis interaction to IndexedDB for offline sync\r\n */\r\nexport async function logCrisisInteraction(\r\n  action: string, \r\n  level: CrisisLevel,\r\n  metadata?: Record<string, any>\r\n): Promise<CrisisInteraction> {\r\n  const interaction: CrisisInteraction = {\r\n    id: generateId(),\r\n    timestamp: new Date().toISOString(),\r\n    action,\r\n    level,\r\n    successful: true,\r\n    metadata: {\r\n      userAgent: navigator.userAgent,\r\n      isOnline: navigator.onLine,\r\n      ...metadata\r\n    }\r\n  };\r\n\r\n  await storeCrisisInteraction(interaction);\r\n\r\n  // Emit action taken event\r\n  window.dispatchEvent(new CustomEvent(CRISIS_EVENTS.actionTaken, {\r\n    detail: interaction\r\n  }));\r\n\r\n  return interaction;\r\n}\r\n\r\n/**\r\n * Get location for emergency services\r\n */\r\nexport function getEmergencyLocation(): Promise<GeolocationCoordinates> {\r\n  return new Promise((resolve, reject) => {\r\n    if (!('geolocation' in navigator)) {\r\n      reject(new Error('Geolocation not supported'));\r\n      return;\r\n    }\r\n\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => resolve(position.coords),\r\n      (_error) => reject(_error),\r\n      {\r\n        enableHighAccuracy: true,\r\n        timeout: 10000,\r\n        maximumAge: 300000 // Cache for 5 minutes\r\n      }\r\n    );\r\n  });\r\n}\r\n\r\n/**\r\n * Get crisis level configuration\r\n */\r\nexport function getCrisisLevelConfig(level: CrisisLevel): CrisisLevelConfig {\r\n  return CRISIS_LEVELS[level];\r\n}\r\n\r\n/**\r\n * Check if crisis level should auto-escalate\r\n */\r\nexport function shouldAutoEscalate(level: CrisisLevel): boolean {\r\n  return CRISIS_LEVELS[level].autoEscalate;\r\n}\r\n\r\n/**\r\n * Get response time limit for crisis level\r\n */\r\nexport function getResponseTimeLimit(level: CrisisLevel): number {\r\n  return CRISIS_LEVELS[level].maxResponseTime;\r\n}\r\n\r\n/**\r\n * Get appropriate emergency contacts for crisis level\r\n */\r\nexport function getRecommendedContacts(level: CrisisLevel): EmergencyContact[] {\r\n  const _config = CRISIS_LEVELS[level];\r\n  \r\n  if (level === 'critical') {\r\n    return EMERGENCY_CONTACTS.filter(c => c.priority <= 2);\r\n  } else if (level === 'high') {\r\n    return EMERGENCY_CONTACTS.filter(c => c.priority <= 3);\r\n  } else {\r\n    return EMERGENCY_CONTACTS;\r\n  }\r\n}\r\n\r\n/**\r\n * Store crisis assessment in IndexedDB\r\n */\r\nasync function storeCrisisAssessment(_assessment: CrisisAssessment): Promise<void> {\r\n  try {\r\n    const db = await openCrisisDB();\r\n    const tx = db.transaction('assessments', 'readwrite');\r\n    await tx.objectStore('assessments').add(_assessment);\r\n  } catch (_error) {\r\n    logger.error('Failed to store crisis _assessment:');\r\n    // Fallback to localStorage\r\n    try {\r\n      const _stored = localStorage.getItem(CRISIS_STORAGE_KEYS.lastAssessment) || '[]';\r\n      const assessments = JSON.parse(_stored);\r\n      assessments.push(_assessment);\r\n      // Keep only last 50 assessments\r\n      const _trimmed = assessments.slice(-50);\r\n      localStorage.setItem(CRISIS_STORAGE_KEYS.lastAssessment, JSON.stringify(_trimmed));\r\n    } catch (_error) {\n    logger.error('Failed to store _assessment in localStorage:', fallbackError);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Store crisis interaction in IndexedDB\r\n */\r\nasync function storeCrisisInteraction(interaction: CrisisInteraction): Promise<void> {\r\n  try {\r\n    const db = await openCrisisDB();\r\n    const tx = db.transaction('interactions', 'readwrite');\r\n    await tx.objectStore('interactions').add(interaction);\r\n  } catch (_error) {\r\n    logger.error('Failed to store crisis interaction:');\r\n    // Fallback to localStorage\r\n    try {\r\n      const _stored = localStorage.getItem(CRISIS_STORAGE_KEYS.interactions) || '[]';\r\n      const interactions = JSON.parse(_stored);\r\n      interactions.push(interaction);\r\n      // Keep only last 100 interactions\r\n      const _trimmed = interactions.slice(-100);\r\n      localStorage.setItem(CRISIS_STORAGE_KEYS.interactions, JSON.stringify(_trimmed));\r\n    } catch (_error) {\n    logger.error('Failed to store interaction in localStorage:', fallbackError);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Open IndexedDB for crisis data\r\n */\r\nfunction openCrisisDB(): Promise<IDBDatabase> {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open('CrisisDB', 1);\r\n    \r\n    request.onerror = () => reject(request.error);\r\n    request.onsuccess = () => resolve(request.result);\r\n    \r\n    request.onupgradeneeded = (event) => {\r\n      const db = (event.target as IDBOpenDBRequest).result;\r\n      \r\n      // Create assessments store\r\n      if (!db.objectStoreNames.contains('assessments')) {\r\n        const assessmentStore = db.createObjectStore('assessments', { \r\n          keyPath: 'id' \r\n        });\r\n        assessmentStore.createIndex('timestamp', 'timestamp');\r\n        assessmentStore.createIndex('level', 'level');\r\n      }\r\n      \r\n      // Create interactions store\r\n      if (!db.objectStoreNames.contains('interactions')) {\r\n        const interactionStore = db.createObjectStore('interactions', { \r\n          keyPath: 'id' \r\n        });\r\n        interactionStore.createIndex('timestamp', 'timestamp');\r\n        interactionStore.createIndex('action', 'action');\r\n        interactionStore.createIndex('level', 'level');\r\n      }\r\n      \r\n      // Create safety plans store\r\n      if (!db.objectStoreNames.contains('safetyPlans')) {\r\n        db.createObjectStore('safetyPlans', { \r\n          keyPath: 'id' \r\n        });\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\n/**\r\n * Generate unique ID for crisis records\r\n */\r\nfunction generateId(): string {\r\n  return `crisis_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\r\n}\r\n\r\n/**\r\n * Get recent crisis assessments\r\n */\r\nexport async function getRecentAssessments(limit: number = 10): Promise<CrisisAssessment[]> {\r\n  try {\r\n    const db = await openCrisisDB();\r\n    const tx = db.transaction('assessments', 'readonly');\r\n    const store = tx.objectStore('assessments');\r\n    const index = store.index('timestamp');\r\n    \r\n    const assessments: CrisisAssessment[] = [];\r\n    const request = index.openCursor(null, 'prev'); // Most recent first\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = (event) => {\r\n        const cursor = (event.target as IDBRequest).result;\r\n        if (cursor && assessments.length < limit) {\r\n          assessments.push(cursor.value);\r\n          cursor.continue();\r\n        } else {\r\n          resolve(_assessments);\r\n        }\r\n      };\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  } catch (_error) {\r\n    logger.error('Failed to get recent assessments:');\r\n    // Fallback to localStorage\r\n    try {\r\n      const _stored = localStorage.getItem(CRISIS_STORAGE_KEYS.lastAssessment) || '[]';\r\n      const assessments = JSON.parse(_stored);\r\n      return assessments.slice(-limit).reverse();\r\n    } catch (_error) {\n    logger.error('Failed to get assessments from localStorage:', fallbackError);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get crisis trend analysis\r\n */\r\nexport async function getCrisisTrends(days: number = 7): Promise<{\r\n  averageLevel: number;\r\n  trendDirection: 'improving' | 'stable' | 'worsening';\r\n  totalAssessments: number;\r\n  criticalIncidents: number;\r\n}> {\r\n  const assessments = await getRecentAssessments(100);\r\n  const cutoffDate = new Date();\r\n  cutoffDate.setDate(cutoffDate.getDate() - days);\r\n  \r\n  const recentAssessments = assessments.filter(a => \r\n    new Date(a.timestamp) > cutoffDate\r\n  );\r\n  \r\n  if (recentAssessments.length === 0) {\r\n    return {\r\n      averageLevel: 1,\r\n      trendDirection: 'stable',\r\n      totalAssessments: 0,\r\n      criticalIncidents: 0\r\n    };\r\n  }\r\n\r\n  // Convert levels to numbers for analysis\r\n  const levelToNumber = {\r\n    safe: 1,\r\n    low: 2,\r\n    moderate: 3,\r\n    high: 4,\r\n    critical: 5\r\n  };\r\n\r\n  const levelNumbers = recentAssessments.map(a => levelToNumber[a.level]);\r\n  const averageLevel = levelNumbers.reduce((sum, level) => sum + level, 0) / levelNumbers.length;\r\n  \r\n  // Calculate trend (compare first half to second half)\r\n  const midpoint = Math.floor(levelNumbers.length / 2);\r\n  const firstHalf = levelNumbers.slice(0, midpoint);\r\n  const secondHalf = levelNumbers.slice(_midpoint);\r\n  \r\n  const firstAvg = firstHalf.reduce((sum, level) => sum + level, 0) / firstHalf.length;\r\n  const secondAvg = secondHalf.reduce((sum, level) => sum + level, 0) / secondHalf.length;\r\n  \r\n  let trendDirection: 'improving' | 'stable' | 'worsening';\r\n  const difference = secondAvg - firstAvg;\r\n  \r\n  if (difference > 0.3) {\r\n    trendDirection = 'worsening';\r\n  } else if (difference < -0.3) {\r\n    trendDirection = 'improving';\r\n  } else {\r\n    trendDirection = 'stable';\r\n  }\r\n\r\n  const criticalIncidents = recentAssessments.filter(a => \r\n    a.level === 'critical' || a.level === 'high'\r\n  ).length;\r\n\r\n  return {\r\n    averageLevel,\r\n    trendDirection,\r\n    totalAssessments: recentAssessments.length,\r\n    criticalIncidents\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\logger.ts","messages":[],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":127,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":127,"endColumn":24,"suggestions":[{"fix":{"range":[4071,4138],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":133,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":133,"endColumn":24,"suggestions":[{"fix":{"range":[4296,4366],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\mobile\\consoleHapticFeedback.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\mobile\\consoleMobilePerformance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\mobile\\touchOptimization.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":430,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":430,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":445,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":445,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":535,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":535,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17075,17078],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17075,17078],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '../logger';\n\n/**\r\n * Mobile Touch Optimization Utilities\r\n * Provides enhanced touch interactions, gestures, and mobile-specific optimizations\r\n */\r\n\r\n// Touch event interfaces for better type safety\r\ninterface TouchPoint {\r\n  id: number;\r\n  x: number;\r\n  y: number;\r\n  timestamp: number;\r\n}\r\n\r\ninterface TouchGesture {\r\n  type: 'tap' | 'doubleTap' | 'longPress' | 'swipe' | 'pinch' | 'rotate';\r\n  startTime: number;\r\n  duration: number;\r\n  distance?: number;\r\n  direction?: 'up' | 'down' | 'left' | 'right';\r\n  scale?: number;\r\n  rotation?: number;\r\n  velocity?: number;\r\n  points: TouchPoint[];\r\n}\r\n\r\ninterface TouchOptimizationOptions {\r\n  enableFastClick?: boolean;\r\n  enableSwipeGestures?: boolean;\r\n  enablePinchZoom?: boolean;\r\n  enableRotation?: boolean;\r\n  enableVibration?: boolean;\r\n  doubleTapDelay?: number;\r\n  longPressDelay?: number;\r\n  swipeThreshold?: number;\r\n  pinchThreshold?: number;\r\n  rotationThreshold?: number;\r\n}\r\n\r\nclass TouchOptimizationManager {\r\n  private options: Required<TouchOptimizationOptions>;\r\n  private activeGestures: Map<string, TouchGesture> = new Map();\r\n  private touchHistory: TouchPoint[][] = [];\r\n  private lastTap: { x: number; y: number; timestamp: number } | null = null;\r\n  private longPressTimer: number | null = null;\r\n  private gestureListeners: Map<string, Set<(gesture: TouchGesture) => void>> = new Map();\r\n  private element: HTMLElement;\r\n  private rafId: number | null = null;\r\n\r\n  private readonly defaultOptions: Required<TouchOptimizationOptions> = {\r\n    enableFastClick: true,\r\n    enableSwipeGestures: true,\r\n    enablePinchZoom: true,\r\n    enableRotation: true,\r\n    enableVibration: true,\r\n    doubleTapDelay: 300,\r\n    longPressDelay: 500,\r\n    swipeThreshold: 50,\r\n    pinchThreshold: 1.2,\r\n    rotationThreshold: 15,\r\n  };\r\n\r\n  constructor(element: HTMLElement, options: TouchOptimizationOptions = {}) {\r\n    this.element = element;\r\n    this.options = { ...this.defaultOptions, ...options };\r\n    this.initializeEventListeners();\r\n    this.initializeMobileOptimizations();\r\n  }\r\n\r\n  private initializeEventListeners(): void {\r\n    // Use passive listeners for better performance\r\n    this.element.addEventListener('touchstart', this.handleTouchStart.bind(_this), { passive: true });\r\n    this.element.addEventListener('touchmove', this.handleTouchMove.bind(_this), { passive: false });\r\n    this.element.addEventListener('touchend', this.handleTouchEnd.bind(_this), { passive: true });\r\n    this.element.addEventListener('touchcancel', this.handleTouchCancel.bind(_this), { passive: true });\r\n\r\n    // Prevent default touch behaviors that interfere with custom gestures\r\n    this.element.addEventListener('gesturestart', this.preventDefault, { passive: false });\r\n    this.element.addEventListener('gesturechange', this.preventDefault, { passive: false });\r\n    this.element.addEventListener('gestureend', this.preventDefault, { passive: false });\r\n  }\r\n\r\n  private initializeMobileOptimizations(): void {\r\n    // Optimize touch targets for accessibility\r\n    this.optimizeTouchTargets();\r\n    \r\n    // Enable hardware acceleration for smooth animations\r\n    this.enableHardwareAcceleration();\r\n    \r\n    // Optimize scrolling performance\r\n    this.optimizeScrolling();\r\n    \r\n    // Implement iOS momentum scrolling fix\r\n    this.implementMomentumScrolling();\r\n    \r\n    // Add visual touch feedback\r\n    this.addTouchFeedback();\r\n  }\r\n\r\n  private handleTouchStart(event: TouchEvent): void {\r\n    const touches = Array.from(event.touches);\r\n    const timestamp = performance.now();\r\n\r\n    // Store touch history for gesture recognition\r\n    const _touchPoints: TouchPoint[] = touches.map((touch, _index) => ({\r\n      id: touch.identifier,\r\n      x: touch.clientX,\r\n      y: touch.clientY,\r\n      timestamp,\r\n    }));\r\n\r\n    this.touchHistory.push(_touchPoints);\r\n\r\n    // Handle single touch\r\n    if (touches.length === 1 && touches[0]) {\r\n      const touch = touches[0];\r\n      this.handleSingleTouchStart(touch, timestamp);\r\n    }\r\n\r\n    // Handle multi-touch gestures\r\n    if (touches.length === 2) {\r\n      this.handleMultiTouchStart(touches, timestamp);\r\n    }\r\n\r\n    // Limit touch history to prevent memory leaks\r\n    if (this.touchHistory.length > 10) {\r\n      this.touchHistory.shift();\r\n    }\r\n  }\r\n\r\n  private handleSingleTouchStart(touch: Touch, timestamp: number): void {\r\n    // Setup long press detection\r\n    if (this.longPressTimer) {\r\n      clearTimeout(this.longPressTimer);\r\n    }\r\n\r\n    this.longPressTimer = window.setTimeout(() => {\r\n      this.triggerGesture({\r\n        type: 'longPress',\r\n        startTime: timestamp,\r\n        duration: this.options.longPressDelay,\r\n        points: [{\r\n          id: touch.identifier,\r\n          x: touch.clientX,\r\n          y: touch.clientY,\r\n          timestamp,\r\n        }],\r\n      });\r\n\r\n      // Provide haptic feedback for long press\r\n      if (this.options.enableVibration) {\r\n        this.vibrate([50]);\r\n      }\r\n    }, this.options.longPressDelay);\r\n  }\r\n\r\n  private handleMultiTouchStart(touches: Touch[], timestamp: number): void {\r\n    if (touches.length === 2 && touches[0] && touches[1]) {\r\n      // Initialize pinch/zoom gesture\r\n      const _distance = this.calculateDistance(touches[0], touches[1]);\r\n      const _angle = this.calculateAngle(touches[0], touches[1]);\r\n      \r\n      const gesture: TouchGesture = {\r\n        type: 'pinch',\r\n        startTime: timestamp,\r\n        duration: 0,\r\n        scale: 1,\r\n        rotation: 0,\r\n        points: touches.map((touch) => ({\r\n          id: touch.identifier,\r\n          x: touch.clientX,\r\n          y: touch.clientY,\r\n          timestamp,\r\n        })),\r\n      };\r\n\r\n      this.activeGestures.set('pinch', gesture);\r\n    }\r\n  }\r\n\r\n  private handleTouchMove(event: TouchEvent): void {\r\n    const touches = Array.from(event.touches);\r\n    const timestamp = performance.now();\r\n\r\n    // Cancel long press if touch moves too much\r\n    if (this.longPressTimer && touches.length === 1 && touches[0]) {\r\n      const initialTouch = this.touchHistory[0]?.[0];\r\n      if (initialTouch) {\r\n        const distance = this.calculateDistance(\r\n          { clientX: initialTouch.x, clientY: initialTouch.y } as Touch,\r\n          touches[0]\r\n        );\r\n        \r\n        if (distance > 10) {\r\n          clearTimeout(this.longPressTimer);\r\n          this.longPressTimer = null;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Handle single touch move (potential swipe)\r\n    if (touches.length === 1 && touches[0]) {\r\n      this.handleSwipeGesture(touches[0], timestamp);\r\n    }\r\n\r\n    // Handle multi-touch move (pinch/zoom/rotate)\r\n    if (touches.length === 2) {\r\n      this.handleMultiTouchMove(touches, timestamp);\r\n    }\r\n\r\n    // Prevent default behavior for custom gestures\r\n    if (touches.length > 1) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  private handleSwipeGesture(touch: Touch, timestamp: number): void {\r\n    if (!this.options.enableSwipeGestures) return;\r\n\r\n    const initialTouch = this.touchHistory[0]?.[0];\r\n    if (!initialTouch) return;\r\n\r\n    const deltaX = touch.clientX - initialTouch.x;\r\n    const deltaY = touch.clientY - initialTouch.y;\r\n    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\r\n    const duration = timestamp - initialTouch.timestamp;\r\n\r\n    // Only trigger swipe if distance exceeds threshold\r\n    if (distance > this.options.swipeThreshold && duration < 1000) {\r\n      const velocity = distance / duration;\r\n      let direction: 'up' | 'down' | 'left' | 'right';\r\n\r\n      if (Math.abs(_deltaX) > Math.abs(_deltaY)) {\r\n        direction = deltaX > 0 ? 'right' : 'left';\r\n      } else {\r\n        direction = deltaY > 0 ? 'down' : 'up';\r\n      }\r\n\r\n      // Use RAF for smooth gesture handling\r\n      if (this.rafId) {\r\n        cancelAnimationFrame(this.rafId);\r\n      }\r\n\r\n      this.rafId = requestAnimationFrame(() => {\r\n        this.triggerGesture({\r\n          type: 'swipe',\r\n          startTime: initialTouch.timestamp,\r\n          duration,\r\n          distance,\r\n          direction,\r\n          velocity,\r\n          points: [initialTouch, {\r\n            id: touch.identifier,\r\n            x: touch.clientX,\r\n            y: touch.clientY,\r\n            timestamp,\r\n          }],\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  private handleMultiTouchMove(touches: Touch[], timestamp: number): void {\r\n    if (!this.options.enablePinchZoom && !this.options.enableRotation) return;\r\n\r\n    const pinchGesture = this.activeGestures.get('pinch');\r\n    if (!pinchGesture || touches.length !== 2 || !touches[0] || !touches[1]) return;\r\n\r\n    const currentDistance = this.calculateDistance(touches[0], touches[1]);\r\n    const currentAngle = this.calculateAngle(touches[0], touches[1]);\r\n    \r\n    const point0 = pinchGesture.points[0];\r\n    const point1 = pinchGesture.points[1];\r\n    if (!point0 || !point1) return;\r\n    \r\n    const initialDistance = this.calculateDistance(\r\n      { clientX: point0.x, clientY: point0.y } as Touch,\r\n      { clientX: point1.x, clientY: point1.y } as Touch\r\n    );\r\n    \r\n    const initialAngle = this.calculateAngle(\r\n      { clientX: point0.x, clientY: point0.y } as Touch,\r\n      { clientX: point1.x, clientY: point1.y } as Touch\r\n    );\r\n\r\n    const scale = currentDistance / initialDistance;\r\n    const rotation = currentAngle - initialAngle;\r\n\r\n    // Update gesture data\r\n    pinchGesture.scale = scale;\r\n    pinchGesture.rotation = rotation;\r\n    pinchGesture.duration = timestamp - pinchGesture.startTime;\r\n\r\n    // Trigger pinch gesture if scale threshold is exceeded\r\n    if (this.options.enablePinchZoom && Math.abs(scale - 1) > (this.options.pinchThreshold - 1)) {\r\n      this.triggerGesture({ ...pinchGesture });\r\n    }\r\n\r\n    // Trigger rotation gesture if rotation threshold is exceeded\r\n    if (this.options.enableRotation && Math.abs(_rotation) > this.options.rotationThreshold) {\r\n      this.triggerGesture({ ...pinchGesture, type: 'rotate' });\r\n    }\r\n  }\r\n\r\n  private handleTouchEnd(event: TouchEvent): void {\r\n    const touches = Array.from(event.touches);\r\n    const timestamp = performance.now();\r\n\r\n    // Clear long press timer\r\n    if (this.longPressTimer) {\r\n      clearTimeout(this.longPressTimer);\r\n      this.longPressTimer = null;\r\n    }\r\n\r\n    // Handle tap gestures\r\n    if (touches.length === 0 && event.changedTouches.length === 1 && event.changedTouches[0]) {\r\n      this.handleTapGesture(event.changedTouches[0], timestamp);\r\n    }\r\n\r\n    // Clean up multi-touch gestures\r\n    if (touches.length < 2) {\r\n      this.activeGestures.delete('pinch');\r\n    }\r\n  }\r\n\r\n  private handleTapGesture(touch: Touch, timestamp: number): void {\r\n    const initialTouch = this.touchHistory[0]?.[0];\r\n    if (!initialTouch) return;\r\n\r\n    const distance = this.calculateDistance(\r\n      { clientX: initialTouch.x, clientY: initialTouch.y } as Touch,\r\n      touch\r\n    );\r\n    \r\n    const duration = timestamp - initialTouch.timestamp;\r\n\r\n    // Only register as tap if movement is minimal and duration is short\r\n    if (distance < 10 && duration < 1000) {\r\n      // Check for double tap\r\n      if (this.lastTap && \r\n          timestamp - this.lastTap.timestamp < this.options.doubleTapDelay &&\r\n          this.calculateDistance(\r\n            { clientX: this.lastTap.x, clientY: this.lastTap.y } as Touch,\r\n            touch\r\n          ) < 50) {\r\n        \r\n        this.triggerGesture({\r\n          type: 'doubleTap',\r\n          startTime: this.lastTap.timestamp,\r\n          duration: timestamp - this.lastTap.timestamp,\r\n          points: [\r\n            { id: 0, x: this.lastTap.x, y: this.lastTap.y, timestamp: this.lastTap.timestamp },\r\n            { id: touch.identifier, x: touch.clientX, y: touch.clientY, timestamp },\r\n          ],\r\n        });\r\n\r\n        this.lastTap = null;\r\n      } else {\r\n        // Single tap\r\n        this.triggerGesture({\r\n          type: 'tap',\r\n          startTime: initialTouch.timestamp,\r\n          duration,\r\n          points: [initialTouch, {\r\n            id: touch.identifier,\r\n            x: touch.clientX,\r\n            y: touch.clientY,\r\n            timestamp,\r\n          }],\r\n        });\r\n\r\n        this.lastTap = {\r\n          x: touch.clientX,\r\n          y: touch.clientY,\r\n          timestamp,\r\n        };\r\n      }\r\n\r\n      // Provide haptic feedback for taps\r\n      if (this.options.enableVibration) {\r\n        this.vibrate([25]);\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleTouchCancel(): void {\r\n    // Clean up all active gestures\r\n    this.activeGestures.clear();\r\n    \r\n    if (this.longPressTimer) {\r\n      clearTimeout(this.longPressTimer);\r\n      this.longPressTimer = null;\r\n    }\r\n\r\n    if (this.rafId) {\r\n      cancelAnimationFrame(this.rafId);\r\n      this.rafId = null;\r\n    }\r\n  }\r\n\r\n  private calculateDistance(touch1: Touch, touch2: Touch): number {\r\n    const dx = touch1.clientX - touch2.clientX;\r\n    const dy = touch1.clientY - touch2.clientY;\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n  }\r\n\r\n  private calculateAngle(touch1: Touch, touch2: Touch): number {\r\n    return Math.atan2(touch2.clientY - touch1.clientY, touch2.clientX - touch1.clientX) * 180 / Math.PI;\r\n  }\r\n\r\n  private triggerGesture(gesture: TouchGesture): void {\r\n    const listeners = this.gestureListeners.get(gesture.type);\r\n    if (listeners) {\r\n      listeners.forEach(_callback => {\r\n        try {\r\n          _callback(_gesture);\r\n        } catch (error) {\r\n          logger.error(`Error in gesture listener for ${gesture.type}:`, error);\r\n        }\r\n      });\r\n    }\r\n\r\n    // Also trigger generic gesture listener\r\n    const genericListeners = this.gestureListeners.get('*');\r\n    if (genericListeners) {\r\n      genericListeners.forEach(_callback => {\r\n        try {\r\n          _callback(_gesture);\r\n        } catch (_error) {\r\n          logger.error('Error in generic gesture listener:');\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private preventDefault(event: Event): void {\r\n    event.preventDefault();\r\n  }\r\n\r\n  private vibrate(_pattern: number | number[]): void {\r\n    if ('vibrate' in navigator) {\r\n      try {\r\n        navigator.vibrate(_pattern);\r\n      } catch (_error) {\n    logger.warn('Vibration not supported or failed:');\r\n      }\r\n    }\r\n  }\r\n\r\n  private optimizeTouchTargets(): void {\r\n    // Ensure minimum touch target size for accessibility\r\n    const minTouchTarget = 44; // 44px minimum as per WCAG guidelines\r\n    \r\n    const clickableElements = this.element.querySelectorAll(\r\n      'button, a, input, select, textarea, [role=\"button\"], [tabindex]'\r\n    );\r\n\r\n    clickableElements.forEach((element) => {\r\n      const rect = element.getBoundingClientRect();\r\n      if (rect.width < minTouchTarget || rect.height < minTouchTarget) {\r\n        (element as HTMLElement).style.minWidth = `${minTouchTarget}px`;\r\n        (element as HTMLElement).style.minHeight = `${minTouchTarget}px`;\r\n      }\r\n    });\r\n  }\r\n\r\n  private enableHardwareAcceleration(): void {\r\n    // Enable hardware acceleration for smooth animations\r\n    this.element.style.transform = 'translateZ(0)';\r\n    this.element.style.backfaceVisibility = 'hidden';\r\n    this.element.style.perspective = '1000px';\r\n  }\r\n\r\n  private optimizeScrolling(): void {\r\n    // Enable smooth scrolling and optimize scroll performance\r\n    this.element.style.scrollBehavior = 'smooth';\r\n    (this.element.style as unknown).webkitOverflowScrolling = 'touch';\r\n    \r\n    // Optimize scroll handling\r\n    this.element.addEventListener('scroll', this.throttleScroll(this.handleScroll.bind(_this), 16), { passive: true });\r\n  }\r\n\r\n  private implementMomentumScrolling(): void {\r\n    // Fix iOS momentum scrolling issues\r\n    if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {\r\n      (this.element.style as unknown).webkitOverflowScrolling = 'touch';\r\n      (this.element.style as unknown).overflowScrolling = 'touch';\r\n    }\r\n  }\r\n\r\n  private addTouchFeedback(): void {\r\n    // Add visual feedback for touch interactions\r\n    const style = document.createElement('style');\r\n    style.textContent = `\r\n      .touch-feedback {\r\n        position: relative;\r\n        overflow: hidden;\r\n      }\r\n      \r\n      .touch-feedback::before {\r\n        content: '';\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        background: radial-gradient(circle, rgba(255,255,255,0.3) 0%, transparent 70%);\r\n        transform: scale(0);\r\n        transition: transform 0.3s ease-out;\r\n        pointer-events: none;\r\n      }\r\n      \r\n      .touch-feedback.active::before {\r\n        transform: scale(1);\r\n      }\r\n      \r\n      .touch-feedback:active {\r\n        transform: scale(0.98);\r\n        transition: transform 0.1s ease-out;\r\n      }\r\n    `;\r\n    document.head.appendChild(style);\r\n\r\n    // Apply touch feedback to interactive elements\r\n    const interactiveElements = this.element.querySelectorAll(\r\n      'button, a, [role=\"button\"], .touch-target'\r\n    );\r\n\r\n    interactiveElements.forEach((element) => {\r\n      element.classList.add('touch-feedback');\r\n    });\r\n  }\r\n\r\n  private throttleScroll<T extends (...args: unknown[]) => any>(func: T, delay: number): T {\r\n    let timeoutId: number | null = null;\r\n    let lastExecTime = 0;\r\n    \r\n    return ((...args: Parameters<T>) => {\r\n      const currentTime = Date.now();\r\n      \r\n      if (currentTime - lastExecTime > delay) {\r\n        func(...args);\r\n        lastExecTime = currentTime;\r\n      } else {\r\n        if (timeoutId) {\r\n          clearTimeout(timeoutId);\r\n        }\r\n        \r\n        timeoutId = window.setTimeout(() => {\r\n          func(...args);\r\n          lastExecTime = Date.now();\r\n        }, delay);\r\n      }\r\n    }) as T;\r\n  }\r\n\r\n  private handleScroll(): void {\r\n    // Optimize scroll performance by reducing expensive operations during scroll\r\n    document.documentElement.classList.add('is-scrolling');\r\n    \r\n    // Remove class after scrolling stops\r\n    clearTimeout(this.scrollTimeout);\r\n    this.scrollTimeout = window.setTimeout(() => {\r\n      document.documentElement.classList.remove('is-scrolling');\r\n    }, 150);\r\n  }\r\n\r\n  private scrollTimeout: number = 0;\r\n\r\n  // Public API methods\r\n  public on(_gestureType: string, _callback: (gesture: TouchGesture) => void): void {\r\n    if (!this.gestureListeners.has(_gestureType)) {\r\n      this.gestureListeners.set(_gestureType, new Set());\r\n    }\r\n    this.gestureListeners.get(_gestureType)!.add(_callback);\r\n  }\r\n\r\n  public off(_gestureType: string, _callback: (gesture: TouchGesture) => void): void {\r\n    const listeners = this.gestureListeners.get(_gestureType);\r\n    if (listeners) {\r\n      listeners.delete(_callback);\r\n    }\r\n  }\r\n\r\n  public destroy(): void {\r\n    // Clean up event listeners\r\n    this.element.removeEventListener('touchstart', this.handleTouchStart);\r\n    this.element.removeEventListener('touchmove', this.handleTouchMove);\r\n    this.element.removeEventListener('touchend', this.handleTouchEnd);\r\n    this.element.removeEventListener('touchcancel', this.handleTouchCancel);\r\n    \r\n    // Clear timers\r\n    if (this.longPressTimer) {\r\n      clearTimeout(this.longPressTimer);\r\n    }\r\n    \r\n    if (this.rafId) {\r\n      cancelAnimationFrame(this.rafId);\r\n    }\r\n    \r\n    if (this.scrollTimeout) {\r\n      clearTimeout(this.scrollTimeout);\r\n    }\r\n    \r\n    // Clear data structures\r\n    this.activeGestures.clear();\r\n    this.gestureListeners.clear();\r\n    this.touchHistory = [];\r\n    this.lastTap = null;\r\n  }\r\n}\r\n\r\n// Export factory function for easy initialization\r\nexport function initializeTouchOptimization(\r\n  element: HTMLElement, \r\n  options?: TouchOptimizationOptions\r\n): TouchOptimizationManager {\r\n  return new TouchOptimizationManager(element, options);\r\n}\r\n\r\n// Export types\r\nexport type { TouchGesture, TouchOptimizationOptions, TouchPoint };\r\nexport { TouchOptimizationManager };\r\n\r\n// Additional mobile optimization utilities\r\nexport const _MobileOptimizationUtils = {\r\n  // Prevent zoom on double-tap\r\n  preventDoubleTapZoom(element: HTMLElement): void {\r\n    element.addEventListener('touchend', (event) => {\r\n      const touch = event.changedTouches[0];\r\n      if (!touch?.target) return;\r\n      const element = touch.target as HTMLElement;\r\n      \r\n      // Prevent zoom on form inputs\r\n      if (['INPUT', 'TEXTAREA', 'SELECT'].includes(element.tagName)) {\r\n        event.preventDefault();\r\n      }\r\n    });\r\n  },\r\n\r\n  // Optimize input focus for iOS\r\n  optimizeIOSInputFocus(): void {\r\n    if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {\r\n      const inputs = document.querySelectorAll('input, textarea');\r\n      \r\n      inputs.forEach((input) => {\r\n        input.addEventListener('focus', () => {\r\n          // Prevent viewport zoom on input focus\r\n          const viewport = document.querySelector('meta[name=\"viewport\"]');\r\n          if (viewport) {\r\n            const currentContent = viewport.getAttribute('content') || '';\r\n            viewport.setAttribute('content', `${currentContent  }, user-scalable=no`);\r\n            \r\n            // Restore after blur\r\n            input.addEventListener('blur', () => {\r\n              viewport.setAttribute('content', currentContent);\r\n            }, { once: true });\r\n          }\r\n        });\r\n      });\r\n    }\r\n  },\r\n\r\n  // Add safe area padding for notched devices\r\n  addSafeAreaSupport(): void {\r\n    const style = document.createElement('style');\r\n    style.textContent = `\r\n      .safe-area-top {\r\n        padding-top: env(safe-area-inset-top);\r\n      }\r\n      \r\n      .safe-area-bottom {\r\n        padding-bottom: env(safe-area-inset-bottom);\r\n      }\r\n      \r\n      .safe-area-left {\r\n        padding-left: env(safe-area-inset-left);\r\n      }\r\n      \r\n      .safe-area-right {\r\n        padding-right: env(safe-area-inset-right);\r\n      }\r\n      \r\n      .safe-area-all {\r\n        padding: \r\n          env(safe-area-inset-top) \r\n          env(safe-area-inset-right) \r\n          env(safe-area-inset-bottom) \r\n          env(safe-area-inset-left);\r\n      }\r\n    `;\r\n    document.head.appendChild(style);\r\n  },\r\n\r\n  // Enable performance optimizations for mobile\r\n  enableMobilePerformanceMode(): void {\r\n    // Reduce motion for better performance\r\n    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {\r\n      document.documentElement.classList.add('reduce-motion');\r\n    }\r\n\r\n    // Add CSS for performance optimizations\r\n    const style = document.createElement('style');\r\n    style.textContent = `\r\n      .reduce-motion * {\r\n        animation-duration: 0.01ms !important;\r\n        animation-iteration-count: 1 !important;\r\n        transition-duration: 0.01ms !important;\r\n      }\r\n      \r\n      .performance-mode .not-critical {\r\n        display: none;\r\n      }\r\n      \r\n      .performance-mode img:not(.critical) {\r\n        visibility: hidden;\r\n      }\r\n    `;\r\n    document.head.appendChild(style);\r\n  }\r\n};","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\performance\\MemoryLeakPrevention.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":191,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":191,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":205,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5540,5543],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5540,5543],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":306,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":306,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7980,7983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7980,7983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-this-alias","severity":2,"message":"Unexpected aliasing of 'this' to local variable.","line":382,"column":5,"nodeType":"Identifier","messageId":"thisAssignment","endLine":382,"endColumn":13},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'cleanupManager.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'cleanupManager.current' to a variable inside the effect, and use that variable in the cleanup function.","line":502,"column":22,"nodeType":"Identifier","endLine":502,"endColumn":29}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Memory Leak Prevention Utilities for CoreV4\n * Provides automatic cleanup, weak references, and memory monitoring\n */\n\nimport { useRef, useEffect } from 'react';\nimport { performanceMonitor } from './performanceMonitor';\nimport { logger } from '../logger';\n\n/**\n * WeakMap-based cache for preventing memory leaks\n */\nexport class WeakCache<K extends object, V> {\n  private cache = new WeakMap<K, V>();\n  private refCount = new WeakMap<K, number>();\n  \n  set(key: K, value: V): void {\n    this.cache.set(key, value);\n    this.refCount.set(key, (this.refCount.get(key) || 0) + 1);\n  }\n  \n  get(key: K): V | undefined {\n    return this.cache.get(key);\n  }\n  \n  has(key: K): boolean {\n    return this.cache.has(key);\n  }\n  \n  delete(key: K): boolean {\n    this.refCount.delete(key);\n    return this.cache.delete(key);\n  }\n  \n  getRefCount(key: K): number {\n    return this.refCount.get(key) || 0;\n  }\n}\n\n/**\n * Automatic cleanup manager for subscriptions and timers\n */\nexport class CleanupManager {\n  private cleanupFunctions: Set<() => void> = new Set();\n  private intervals: Set<number> = new Set();\n  private timeouts: Set<number> = new Set();\n  private animationFrames: Set<number> = new Set();\n// @ts-expect-error - MutationObserver is a global API\n  private observers: Set<MutationObserver | IntersectionObserver | ResizeObserver> = new Set();\n  private eventListeners: Map<EventTarget, Map<string, EventListener>> = new Map();\n  private abortControllers: Set<AbortController> = new Set();\n  \n  /**\n   * Register a cleanup function\n   */\n  register(cleanup: () => void): void {\n    this.cleanupFunctions.add(cleanup);\n  }\n  \n  /**\n   * Create a managed interval\n   */\n  setInterval(callback: () => void, delay: number): number {\n    const id = window.setInterval(callback, delay);\n    this.intervals.add(id);\n    return id;\n  }\n  \n  /**\n   * Create a managed timeout\n   */\n  setTimeout(callback: () => void, delay: number): number {\n    const id = window.setTimeout(() => {\n      callback();\n      this.timeouts.delete(id);\n    }, delay);\n    this.timeouts.add(id);\n    return id;\n  }\n  \n  /**\n   * Create a managed animation frame\n   */\n  requestAnimationFrame(callback: FrameRequestCallback): number {\n    const id = window.requestAnimationFrame((_time) => {\n      callback(_time);\n      this.animationFrames.delete(id);\n    });\n    this.animationFrames.add(id);\n    return id;\n  }\n  \n  /**\n   * Add a managed event listener\n   */\n  addEventListener(\n    target: EventTarget,\n    type: string,\n    listener: EventListener,\n    options?: AddEventListenerOptions\n  ): void {\n    target.addEventListener(type, listener, options);\n    \n    if (!this.eventListeners.has(_target)) {\n      this.eventListeners.set(target, new Map());\n    }\n    this.eventListeners.get(_target)!.set(type, listener);\n  }\n  \n  /**\n   * Create a managed observer\n// @ts-expect-error - MutationObserver is a global API\n// @ts-expect-error - MutationObserver is a global API\n   */\n  createMutationObserver(callback: MutationCallback): MutationObserver {\n    const observer = new MutationObserver(callback);\n    this.observers.add(_observer);\n    return observer;\n  }\n  \n  /**\n   * Create a managed intersection observer\n   */\n// @ts-expect-error - IntersectionObserver is a global API\n// @ts-expect-error - IntersectionObserver is a global API\n  createIntersectionObserver(\n    callback: IntersectionObserverCallback,\n    options?: IntersectionObserverInit\n  ): IntersectionObserver {\n    const observer = new IntersectionObserver(callback, options);\n    this.observers.add(_observer);\n    return observer;\n// @ts-expect-error - ResizeObserver is a global API\n// @ts-expect-error - ResizeObserver is a global API\n  }\n  \n  /**\n   * Create a managed resize observer\n   */\n  createResizeObserver(callback: ResizeObserverCallback): ResizeObserver {\n    const observer = new ResizeObserver(callback);\n    this.observers.add(_observer);\n    return observer;\n  }\n  \n  /**\n   * Create a managed abort controller\n   */\n  createAbortController(): AbortController {\n    const controller = new AbortController();\n    this.abortControllers.add(_controller);\n    return controller;\n  }\n  \n  /**\n   * Clean up all managed resources\n   */\n  cleanup(): void {\n    // Clear intervals\n    this.intervals.forEach(id => clearInterval(id));\n    this.intervals.clear();\n    \n    // Clear timeouts\n    this.timeouts.forEach(id => clearTimeout(id));\n    this.timeouts.clear();\n    \n    // Cancel animation frames\n    this.animationFrames.forEach(id => cancelAnimationFrame(id));\n    this.animationFrames.clear();\n    \n    // Disconnect observers\n    this.observers.forEach(observer => observer.disconnect());\n    this.observers.clear();\n    \n    // Remove event listeners\n    this.eventListeners.forEach((listeners, target) => {\n      listeners.forEach((listener, type) => {\n        target.removeEventListener(type, listener);\n      });\n    });\n    this.eventListeners.clear();\n    \n    // Abort fetch requests\n    this.abortControllers.forEach(controller => controller.abort());\n    this.abortControllers.clear();\n    \n    // Execute cleanup functions\n    this.cleanupFunctions.forEach(cleanup => {\n      try {\n        cleanup();\n      } catch (_error) {\n        logger.error('Cleanup function error: ');\n      }\n    });\n    this.cleanupFunctions.clear();\n    \n    // Record cleanup\n    performanceMonitor.recordMetric('memory_cleanup', this.cleanupFunctions.size);\n  }\n}\n\n/**\n * Memory-efficient event emitter\n */\nexport class MemoryEfficientEventEmitter<T extends Record<string, any>> {\n  private listeners = new Map<keyof T, Set<(data: unknown) => void>>();\n  private maxListeners = 10;\n  \n  on<K extends keyof T>(event: K, listener: (data: T[K]) => void): () => void {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, new Set());\n    }\n    \n    const eventListeners = this.listeners.get(event)!;\n    \n    // Warn if too many listeners (potential leak)\n    if (eventListeners.size >= this.maxListeners) {\n      logger.warn(`[Memory] Possible memory leak: ${String(event)} has ${eventListeners.size} listeners`);\n      performanceMonitor.recordMetric('potential_memory_leak', eventListeners.size, {\n        event: String(event)\n      });\n    }\n    \n    eventListeners.add(listener);\n    \n    // Return cleanup function\n    return () => {\n      eventListeners.delete(listener);\n      if (eventListeners.size === 0) {\n        this.listeners.delete(event);\n      }\n    };\n  }\n  \n  emit<K extends keyof T>(event: K, data: T[K]): void {\n    const eventListeners = this.listeners.get(event);\n    if (eventListeners) {\n      eventListeners.forEach(listener => {\n        try {\n          listener(data);\n        } catch (error) {\n          logger.error(`Error in event listener for ${String(event)}:`, error);\n        }\n      });\n    }\n  }\n  \n  removeAllListeners(event?: keyof T): void {\n    if (event) {\n      this.listeners.delete(event);\n    } else {\n      this.listeners.clear();\n    }\n  }\n  \n  listenerCount(event: keyof T): number {\n    return this.listeners.get(event)?.size || 0;\n  }\n}\n\n/**\n * Object pool for reusing objects and reducing garbage collection\n */\nexport class ObjectPool<T> {\n  private pool: T[] = [];\n  private maxSize: number;\n  private createFn: () => T;\n  private resetFn: (_obj: T) => void;\n  \n  constructor(\n    createFn: () => T,\n    resetFn: (_obj: T) => void,\n    maxSize: number = 100\n  ) {\n    this.createFn = createFn;\n    this.resetFn = resetFn;\n    this.maxSize = maxSize;\n  }\n  \n  acquire(): T {\n    if (this.pool.length > 0) {\n      return this.pool.pop()!;\n    }\n    return this.createFn();\n  }\n  \n  release(_obj: T): void {\n    if (this.pool.length < this.maxSize) {\n      this.resetFn(_obj);\n      this.pool.push(_obj);\n    }\n  }\n  \n  clear(): void {\n    this.pool = [];\n  }\n  \n  get size(): number {\n    return this.pool.length;\n  }\n}\n\n/**\n * Debounced function with automatic cleanup\n */\nexport function createDebouncedFunction<T extends (...args: unknown[]) => any>(\n  fn: T,\n  delay: number,\n  options: { leading?: boolean; trailing?: boolean; maxWait?: number } = {}\n): T & { cancel: () => void; flush: () => void } {\n  let timeoutId: number | null = null;\n  let lastCallTime: number | null = null;\n  let lastInvokeTime = 0;\n  let lastArgs: unknown[] | null = null;\n  let lastThis: unknown = null;\n  let result: unknown;\n  \n  const { leading = false, trailing = true, maxWait } = options;\n  \n  function invokeFunc(_time: number) {\n    const args = lastArgs;\n    const thisArg = lastThis;\n    \n    lastArgs = null;\n    lastThis = null;\n    lastInvokeTime = _time;\n    result = fn.apply(thisArg, args!);\n    return result;\n  }\n  \n  function leadingEdge(_time: number) {\n    lastInvokeTime = _time;\n    timeoutId = window.setTimeout(timerExpired, delay);\n    return leading ? invokeFunc(_time) : result;\n  }\n  \n  function timerExpired() {\n    const _time = Date.now();\n    if (shouldInvoke(_time)) {\n      return trailingEdge(_time);\n    }\n    timeoutId = window.setTimeout(timerExpired, remainingWait(_time));\n  }\n  \n  function trailingEdge(_time: number) {\n    timeoutId = null;\n    if (trailing && lastArgs) {\n      return invokeFunc(_time);\n    }\n    lastArgs = null;\n    lastThis = null;\n    return result;\n  }\n  \n  function shouldInvoke(_time: number) {\n    const timeSinceLastCall = lastCallTime ? _time - lastCallTime : 0;\n    const timeSinceLastInvoke = _time - lastInvokeTime;\n    \n    return (\n      lastCallTime === null ||\n      timeSinceLastCall >= delay ||\n      timeSinceLastCall < 0 ||\n      (maxWait !== undefined && timeSinceLastInvoke >= maxWait)\n    );\n  }\n  \n  function remainingWait(_time: number) {\n    const timeSinceLastCall = lastCallTime ? _time - lastCallTime : 0;\n    const timeSinceLastInvoke = _time - lastInvokeTime;\n    const timeWaiting = delay - timeSinceLastCall;\n    \n    return maxWait !== undefined\n      ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n  \n  function debounced(this: unknown, ...args: unknown[]) {\n    const _time = Date.now();\n    const _isInvoking = shouldInvoke(_time);\n    \n    lastArgs = args;\n    lastThis = this;\n    lastCallTime = _time;\n    \n    if (_isInvoking) {\n      if (timeoutId === null) {\n        return leadingEdge(_time);\n      }\n      if (maxWait !== undefined) {\n        timeoutId = window.setTimeout(timerExpired, delay);\n        return invokeFunc(_time);\n      }\n    }\n    \n    if (timeoutId === null) {\n      timeoutId = window.setTimeout(timerExpired, delay);\n    }\n    \n    return result;\n  }\n  \n  debounced.cancel = function() {\n    if (timeoutId !== null) {\n      clearTimeout(_timeoutId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = null;\n    lastCallTime = null;\n    lastThis = null;\n    timeoutId = null;\n  };\n  \n  debounced.flush = function() {\n    return timeoutId === null ? result : trailingEdge(Date.now());\n  };\n  \n  return debounced as T & { cancel: () => void; flush: () => void };\n}\n// @ts-expect-error - IntersectionObserver is a global API\n\n/**\n * Memory-efficient image loader with automatic cleanup\n */\nexport class ImageLoader {\n  private cache = new Map<string, HTMLImageElement>();\n  private loading = new Map<string, Promise<HTMLImageElement>>();\n  private observers = new WeakMap<HTMLImageElement, IntersectionObserver>();\n  \n  async load(src: string): Promise<HTMLImageElement> {\n    // Check cache\n    if (this.cache.has(src)) {\n      return this.cache.get(src)!;\n    }\n    \n    // Check if already loading\n    if (this.loading.has(src)) {\n      return this.loading.get(src)!;\n    }\n    \n    // Start loading\n    const loadPromise = new Promise<HTMLImageElement>((resolve, reject) => {\n      const img = new Image();\n      \n      img.onload = () => {\n        this.cache.set(src, img);\n        this.loading.delete(src);\n        resolve(img);\n      };\n      \n      img.onerror = () => {\n        this.loading.delete(src);\n        reject(new Error(`Failed to load image: ${src}`));\n      };\n      \n// @ts-expect-error - IntersectionObserver is a global API\n      img.src = src;\n    });\n    \n    this.loading.set(src, loadPromise);\n    return loadPromise;\n  }\n  \n  lazyLoad(element: HTMLImageElement, src: string): void {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            this.load(src).then(img => {\n              element.src = img.src;\n              observer.disconnect();\n              this.observers.delete(_element);\n            });\n          }\n        });\n      },\n      { rootMargin: '50px' }\n    );\n    \n    observer.observe(_element);\n    this.observers.set(element, observer);\n  }\n  \n  clear(): void {\n    this.cache.clear();\n    this.loading.clear();\n  }\n  \n  remove(src: string): void {\n    this.cache.delete(src);\n    this.loading.delete(src);\n  }\n}\n\n/**\n * React hook for automatic cleanup\n */\nexport function useCleanup() {\n  const cleanupManager = useRef(new CleanupManager());\n  \n  useEffect(() => {\n    return () => {\n      cleanupManager.current.cleanup();\n    };\n  }, []);\n  \n  return cleanupManager.current;\n}\n\n// Export singleton instances\nexport const globalCleanupManager = new CleanupManager();\nexport const globalImageLoader = new ImageLoader();\n\n// Automatic cleanup on page unload\nif (typeof window !== 'undefined') {\n  window.addEventListener('beforeunload', () => {\n    globalCleanupManager.cleanup();\n    globalImageLoader.clear();\n  });\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\performance\\concurrentFeatures.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":22,"column":13,"nodeType":"Identifier","messageId":"namedExport","endLine":22,"endColumn":27},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":32,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":32,"endColumn":41},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":54,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":54,"endColumn":44},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":71,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":71,"endColumn":30},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":156,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":156,"endColumn":32},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":221,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":221,"endColumn":30},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":251,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":251,"endColumn":31},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":261,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":261,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isPending' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":267,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":267,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","line":279,"column":6,"nodeType":"Identifier","endLine":279,"endColumn":10},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has missing dependencies: 'computation' and 'priority'. Either include them or remove the dependency array. If 'computation' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":279,"column":6,"nodeType":"Identifier","endLine":279,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [computation, priority]","fix":{"range":[7591,7595],"text":"[computation, priority]"}}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":329,"column":23,"nodeType":"Identifier","messageId":"namedExport","endLine":329,"endColumn":32}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * React 18/19 Concurrent Features Utilities\n * Leverages advanced React features for optimal performance in mental health app\n */\n\nimport React, {\n  Suspense,\n  startTransition,\n  useDeferredValue,\n  useTransition,\n  lazy,\n  memo,\n  useCallback,\n  _useMemo,\n  ComponentType,\n  ReactNode,\n} from 'react';\n\n/**\n * Priority levels for updates in mental health context\n */\nexport enum UpdatePriority {\n  CRISIS = 'crisis',        // Immediate - crisis intervention\n  HIGH = 'high',           // User interactions\n  MEDIUM = 'medium',       // Data updates\n  LOW = 'low',            // Analytics, background tasks\n}\n\n/**\n * Custom hook for managing transitions with priority\n */\nexport function usePrioritizedTransition(priority: UpdatePriority = UpdatePriority.MEDIUM) {\n  const [isPending, startTransition] = useTransition();\n  \n  const prioritizedTransition = useCallback((callback: () => void) => {\n    if (priority === UpdatePriority.CRISIS) {\n      // Crisis updates run immediately\n      callback();\n    } else if (priority === UpdatePriority.HIGH) {\n      // High priority updates with minimal delay\n      requestAnimationFrame(() => callback());\n    } else {\n      // Lower priority updates use transition\n      startTransition(() => callback());\n    }\n  }, [priority]);\n\n  return [isPending, prioritizedTransition] as const;\n}\n\n/**\n * Deferred value with custom delay based on priority\n */\nexport function usePrioritizedDeferredValue<T>(\n  value: T,\n  priority: UpdatePriority = UpdatePriority.MEDIUM\n): T {\n  const deferred = useDeferredValue(_value);\n  \n  // For crisis priority, return immediate value\n  if (priority === UpdatePriority.CRISIS) {\n    return value;\n  }\n  \n  return deferred;\n}\n\n/**\n * Loading fallback components for Suspense boundaries\n */\nexport const LoadingFallbacks = {\n  FullPage: () => (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-purple-50\">\n      <div className=\"text-center\">\n        <div className=\"animate-spin rounded-full h-16 w-16 border-4 border-blue-600 border-t-transparent mx-auto mb-4\"></div>\n        <p className=\"text-gray-600\">Loading your wellness journey...</p>\n      </div>\n    </div>\n  ),\n  \n  Component: () => (\n    <div className=\"flex items-center justify-center p-8\">\n      <div className=\"animate-spin rounded-full h-12 w-12 border-3 border-blue-600 border-t-transparent\"></div>\n    </div>\n  ),\n  \n  Inline: () => (\n    <span className=\"inline-flex items-center\">\n      <span className=\"animate-spin rounded-full h-4 w-4 border-2 border-blue-600 border-t-transparent mr-2\"></span>\n      Loading...\n    </span>\n  ),\n  \n  Skeleton: ({ lines = 3, className = '' }: { lines?: number; className?: string }) => (\n    <div className={`animate-pulse ${className}`}>\n      {Array.from({ length: lines }).map((_, i) => (\n        <div key={i} className=\"h-4 bg-gray-200 rounded mb-2\" style={{ width: `${100 - i * 10}%` }}></div>\n      ))}\n    </div>\n  ),\n  \n  Chart: () => (\n    <div className=\"h-64 bg-gray-100 rounded-lg animate-pulse flex items-center justify-center\">\n      <svg className=\"w-12 h-12 text-gray-300\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n      </svg>\n    </div>\n  ),\n  \n  List: ({ items = 5 }: { items?: number }) => (\n    <div className=\"space-y-4\">\n      {Array.from({ length: items }).map((_, i) => (\n        <div key={i} className=\"bg-white rounded-lg p-4 shadow-sm animate-pulse\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"h-10 w-10 bg-gray-200 rounded-full\"></div>\n            <div className=\"flex-1\">\n              <div className=\"h-4 bg-gray-200 rounded w-1/4 mb-2\"></div>\n              <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  ),\n};\n\n/**\n * Enhanced Suspense wrapper with error boundary\n */\ninterface SuspenseWrapperProps {\n  fallback?: ReactNode;\n  children: ReactNode;\n  priority?: UpdatePriority;\n}\n\nexport function SuspenseWrapper({ \n  fallback = <LoadingFallbacks.Component />, \n  children,\n  priority = UpdatePriority.MEDIUM \n}: SuspenseWrapperProps) {\n  // For crisis priority, render immediately without suspense\n  if (priority === UpdatePriority.CRISIS) {\n    return <>{children}</>;\n  }\n\n  return (\n    <Suspense fallback={fallback}>\n      {children}\n    </Suspense>\n  );\n}\n\n/**\n * Lazy loading with preload support\n */\nexport function lazyWithPreload<T extends ComponentType<unknown>>(\n  importFn: () => Promise<{ default: T }>\n) {\n  let preloadPromise: Promise<{ default: T }> | null = null;\n  \n  const LazyComponent = lazy(() => {\n    if (_preloadPromise) {\n      return preloadPromise;\n    }\n    return importFn();\n  });\n  \n  // Add preload method\n  (LazyComponent as unknown).preload = () => {\n    if (!preloadPromise) {\n      preloadPromise = importFn();\n    }\n    return preloadPromise;\n  };\n  \n  return LazyComponent;\n}\n\n/**\n * Progressive enhancement wrapper for heavy components\n */\ninterface ProgressiveEnhancementProps {\n  children: ReactNode;\n  placeholder?: ReactNode;\n  delay?: number;\n  priority?: UpdatePriority;\n}\n\nexport function ProgressiveEnhancement({\n  children,\n  placeholder = <LoadingFallbacks.Skeleton />,\n  delay = 0,\n  priority = UpdatePriority.LOW,\n}: ProgressiveEnhancementProps) {\n  const [isReady, setIsReady] = React.useState(priority === UpdatePriority.CRISIS);\n  \n  React.useEffect(() => {\n    if (priority === UpdatePriority.CRISIS) {\n      return;\n    }\n    \n    const _timer = setTimeout(() => {\n      startTransition(() => {\n        setIsReady(true);\n      });\n    }, delay);\n    \n    return () => clearTimeout(_timer);\n  }, [delay, priority]);\n  \n  if (!isReady) {\n    return <>{placeholder}</>;\n  }\n  \n  return <>{children}</>;\n}\n\n/**\n * Optimized memo wrapper with custom comparison\n */\nexport function optimizedMemo<P extends object>(\n  Component: React.ComponentType<P>,\n  propsAreEqual?: (prevProps: P, nextProps: P) => boolean\n) {\n  return memo(Component, propsAreEqual || shallowEqual);\n}\n\n/**\n * Shallow equality check for props\n */\nfunction shallowEqual<T extends object>(prevProps: T, nextProps: T): boolean {\n  const prevKeys = Object.keys(_prevProps);\n  const nextKeys = Object.keys(_nextProps);\n  \n  if (prevKeys.length !== nextKeys.length) {\n    return false;\n  }\n  \n  for (const key of prevKeys) {\n    if (prevProps[key as keyof T] !== nextProps[key as keyof T]) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n/**\n * Batch updates for performance\n */\nexport function batchedUpdates(callback: () => void) {\n  // React 18+ automatically batches updates, but we can still use this for explicit control\n  startTransition(() => {\n    callback();\n  });\n}\n\n/**\n * Hook for managing heavy computations\n */\nexport function useHeavyComputation<T>(\n  computation: () => T,\n  deps: React.DependencyList,\n  priority: UpdatePriority = UpdatePriority.LOW\n): T | undefined {\n  const [result, setResult] = React.useState<T>();\n  const [isPending, startTransition] = useTransition();\n  \n  React.useEffect(() => {\n    if (priority === UpdatePriority.CRISIS) {\n      // Immediate computation for crisis\n      setResult(computation());\n    } else {\n      // Deferred computation for non-critical\n      startTransition(() => {\n        setResult(computation());\n      });\n    }\n  }, deps);\n  \n  return result;\n}\n\n/**\n * Intersection Observer with Suspense integration\n */\nexport function LazyLoad({ \n  children, \n  rootMargin = '50px',\n  fallback = <LoadingFallbacks.Component />\n}: {\n  children: ReactNode;\n  rootMargin?: string;\n  fallback?: ReactNode;\n}) {\n  const [isInView, setIsInView] = React.useState(false);\n  const ref = React.useRef<HTMLDivElement>(null);\n  \n  React.useEffect(() => {\n// @ts-expect-error - IntersectionObserver is a global API\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry?.isIntersecting) {\n          startTransition(() => {\n            setIsInView(true);\n          });\n        }\n      },\n      { rootMargin }\n    );\n    \n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n    \n    return () => observer.disconnect();\n  }, [rootMargin]);\n  \n  return (\n    <div ref={ref}>\n      {isInView ? children : fallback}\n    </div>\n  );\n}\n\n/**\n * Time slicing for expensive operations\n */\nexport async function timeSlice<T>(\n  items: T[],\n  processor: (item: T) => void,\n  chunkSize = 10,\n  delay = 0\n) {\n  for (let i = 0; i < items.length; i += chunkSize) {\n    const chunk = items.slice(i, i + chunkSize);\n    \n    await new Promise(resolve => {\n      startTransition(() => {\n        chunk.forEach(_processor);\n        setTimeout(resolve, delay);\n      });\n    });\n  }\n}\n\n// UpdatePriority is already exported as an enum (both type and value)","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\performance\\gamingOptimizations.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1990,1993],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1990,1993],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2097,2100],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2097,2100],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3219,3222],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3219,3222],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3828,3831],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3828,3831],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":291,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":291,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9836,9839],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9836,9839],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":344,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11846,11849],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11846,11849],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":370,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":370,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12724,12727],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12724,12727],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":565,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":565,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18846,18849],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18846,18849],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Gaming-Grade Performance Optimizations\r\n * Implements console-quality 60fps optimizations for the mental health platform\r\n */\r\n\r\nimport { performanceMonitor } from './performanceMonitor';\r\nimport { logger } from '../logger';\r\n\r\ninterface GamePerformanceConfig {\r\n  targetFPS: number;\r\n  enableGPUAcceleration: boolean;\r\n  enableMemoryOptimization: boolean;\r\n  enableNetworkOptimization: boolean;\r\n  prioritizeCrisisFeatures: boolean;\r\n  adaptiveQuality: boolean;\r\n}\r\n\r\ninterface PerformanceMetrics {\r\n  fps: number;\r\n  memoryUsage: number;\r\n  frameTime: number;\r\n  renderTime: number;\r\n  lastFrameTimestamp: number;\r\n}\r\n\r\nclass GamePerformanceOptimizer {\r\n  private config: GamePerformanceConfig;\r\n  private metrics: PerformanceMetrics;\r\n  private rafId: number | null = null;\r\n  private frameHistory: number[] = [];\r\n  private lastOptimizationCheck: number = 0;\r\n  private performanceLevel: 'high' | 'medium' | 'low' = 'high';\r\n  private observers: Map<string, PerformanceObserver> = new Map();\r\n  \r\n  constructor() {\r\n    this.config = {\r\n      targetFPS: 60,\r\n      enableGPUAcceleration: true,\r\n      enableMemoryOptimization: true,\r\n      enableNetworkOptimization: true,\r\n      prioritizeCrisisFeatures: true,\r\n      adaptiveQuality: true,\r\n    };\r\n    \r\n    this.metrics = {\r\n      fps: 60,\r\n      memoryUsage: 0,\r\n      frameTime: 16.67, // 60fps = 16.67ms per frame\r\n      renderTime: 0,\r\n      lastFrameTimestamp: performance.now(),\r\n    };\r\n    \r\n    this.initialize();\r\n  }\r\n  \r\n  private initialize(): void {\r\n    this.detectDeviceCapabilities();\r\n    this.setupPerformanceMonitoring();\r\n    this.enableGPUOptimizations();\r\n    this.optimizeNetworking();\r\n    this.startFrameRateMonitoring();\r\n    this.setupMemoryManagement();\r\n    this.enableConsoleOptimizations();\r\n    \r\n    logger.info(`Initialized with ${this.performanceLevel} performance profile`, 'GamingOptimizations');\r\n  }\r\n  \r\n  private detectDeviceCapabilities(): void {\r\n    const memory = (navigator as any).deviceMemory;\r\n    const cores = navigator.hardwareConcurrency;\r\n    const connection = (navigator as any).connection;\r\n    \r\n    // Determine performance level based on device capabilities\r\n    if (memory <= 4 || cores <= 2 || connection?.effectiveType === '2g') {\r\n      this.performanceLevel = 'low';\r\n      this.config.targetFPS = 30;\r\n      this.config.enableGPUAcceleration = false;\r\n    } else if (memory <= 8 || cores <= 4 || connection?.effectiveType === '3g') {\r\n      this.performanceLevel = 'medium';\r\n      this.config.targetFPS = 45;\r\n    } else {\r\n      this.performanceLevel = 'high';\r\n      this.config.targetFPS = 60;\r\n    }\r\n    \r\n    performanceMonitor.recordMetric('device_performance_level', 1, {\r\n      level: this.performanceLevel,\r\n      memory,\r\n      cores,\r\n      networkType: connection?.effectiveType\r\n    });\r\n  }\r\n  \r\n  private setupPerformanceMonitoring(): void {\r\n    // Long task monitoring for detecting blocking operations\r\n    if ('PerformanceObserver' in window && PerformanceObserver.supportedEntryTypes?.includes('longtask')) {\r\n      const longTaskObserver = new PerformanceObserver((list) => {\r\n        for (const entry of list.getEntries()) {\r\n          const longTask = entry as any;\r\n          if (longTask.duration > 16.67) { // Longer than one frame at 60fps\r\n            this.handleLongTask(longTask);\r\n          }\r\n        }\r\n      });\r\n      \r\n      longTaskObserver.observe({ entryTypes: ['longtask'] });\r\n      this.observers.set('longtask', longTaskObserver);\r\n    }\r\n    \r\n    // Layout shift monitoring\r\n    if ('PerformanceObserver' in window && PerformanceObserver.supportedEntryTypes?.includes('layout-shift')) {\r\n      const layoutShiftObserver = new PerformanceObserver((list) => {\r\n        for (const entry of list.getEntries()) {\r\n          const layoutShift = entry as any;\r\n          if (layoutShift.value > 0.1) { // Significant layout shift\r\n            this.optimizeLayoutStability();\r\n          }\r\n        }\r\n      });\r\n      \r\n      layoutShiftObserver.observe({ entryTypes: ['layout-shift'] });\r\n      this.observers.set('layout-shift', layoutShiftObserver);\r\n    }\r\n    \r\n    // Resource timing for bundle optimization\r\n    if ('PerformanceObserver' in window && PerformanceObserver.supportedEntryTypes?.includes('resource')) {\r\n      const resourceObserver = new PerformanceObserver((list) => {\r\n        for (const entry of list.getEntries()) {\r\n          this.analyzeResourceTiming(entry as PerformanceResourceTiming);\r\n        }\r\n      });\r\n      \r\n      resourceObserver.observe({ entryTypes: ['resource'] });\r\n      this.observers.set('resource', resourceObserver);\r\n    }\r\n  }\r\n  \r\n  private enableGPUOptimizations(): void {\r\n    if (!this.config.enableGPUAcceleration) return;\r\n    \r\n    // Apply GPU acceleration to critical elements\r\n    const applyGPUAcceleration = () => {\r\n      const criticalElements = [\r\n        '[data-console-group]',\r\n        '[role=\"navigation\"]',\r\n        '.console-focusable',\r\n        '.animate-',\r\n        '[data-testid*=\"crisis\"]'\r\n      ];\r\n      \r\n      criticalElements.forEach(selector => {\r\n        document.querySelectorAll(selector).forEach(element => {\r\n          const el = element as HTMLElement;\r\n          el.style.transform = 'translate3d(0, 0, 0)';\r\n          el.style.backfaceVisibility = 'hidden';\r\n          el.style.perspective = '1000px';\r\n          el.style.willChange = 'transform, opacity';\r\n        });\r\n      });\r\n    };\r\n    \r\n    // Apply GPU acceleration after DOM is ready and on route changes\r\n    if (document.readyState === 'complete') {\r\n      applyGPUAcceleration();\r\n    } else {\r\n      window.addEventListener('load', applyGPUAcceleration);\r\n    }\r\n    \r\n    // Apply on navigation changes\r\n    window.addEventListener('popstate', () => {\r\n      setTimeout(applyGPUAcceleration, 100);\r\n    });\r\n    \r\n    // Monitor for new elements\r\n// @ts-expect-error - MutationObserver is a global API\r\n    const observer = new MutationObserver((mutations) => {\r\n      let _shouldOptimize = false;\r\n      mutations.forEach(mutation => {\r\n        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\r\n          _shouldOptimize = true;\r\n        }\r\n      });\r\n      \r\n// @ts-expect-error - requestIdleCallback is a global API\r\n      if (_shouldOptimize) {\r\n        requestIdleCallback(applyGPUAcceleration, { timeout: 1000 });\r\n      }\r\n    });\r\n    \r\n    observer.observe(document.body, { \r\n      childList: true, \r\n      subtree: true \r\n    });\r\n  }\r\n  \r\n  private startFrameRateMonitoring(): void {\r\n    let frameCount = 0;\r\n    let lastTime = performance.now();\r\n    \r\n    const _measureFrame = (timestamp: number) => {\r\n      frameCount++;\r\n      const deltaTime = timestamp - this.metrics.lastFrameTimestamp;\r\n      this.metrics.frameTime = deltaTime;\r\n      this.metrics.lastFrameTimestamp = timestamp;\r\n      \r\n      // Calculate FPS every second\r\n      if (timestamp - lastTime >= 1000) {\r\n        const fps = Math.round((frameCount * 1000) / (timestamp - lastTime));\r\n        this.metrics.fps = fps;\r\n        this.frameHistory.push(fps);\r\n        \r\n        // Keep only last 10 seconds of history\r\n        if (this.frameHistory.length > 10) {\r\n          this.frameHistory.shift();\r\n        }\r\n        \r\n        // Adaptive quality based on performance\r\n        if (this.config.adaptiveQuality) {\r\n          this.adaptQualityBasedOnPerformance(fps);\r\n        }\r\n        \r\n        frameCount = 0;\r\n        lastTime = timestamp;\r\n        \r\n        performanceMonitor.recordMetric('gaming_fps', fps, {\r\n          frameTime: this.metrics.frameTime,\r\n          performanceLevel: this.performanceLevel\r\n        });\r\n      }\r\n      \r\n      this.rafId = requestAnimationFrame(_measureFrame);\r\n    };\r\n    \r\n    this.rafId = requestAnimationFrame(_measureFrame);\r\n  }\r\n  \r\n  private adaptQualityBasedOnPerformance(_currentFPS: number): void {\r\n    const now = Date.now();\r\n    if (now - this.lastOptimizationCheck < 2000) return; // Check every 2 seconds\r\n    \r\n    this.lastOptimizationCheck = now;\r\n    \r\n    const avgFPS = this.frameHistory.reduce((a, b) => a + b, 0) / this.frameHistory.length;\r\n    \r\n    if (avgFPS < this.config.targetFPS * 0.8) {\r\n      // Performance is poor, reduce quality\r\n      this.reduceQuality();\r\n    } else if (avgFPS > this.config.targetFPS * 0.95 && this.performanceLevel !== 'high') {\r\n      // Performance is good, can increase quality\r\n      this.increaseQuality();\r\n    }\r\n  }\r\n  \r\n  private reduceQuality(): void {\r\n    logger.info('Reducing quality due to low FPS', 'GamingOptimizations');\r\n    \r\n    // Disable expensive animations\r\n    document.documentElement.classList.add('performance-mode');\r\n    \r\n    // Reduce animation durations\r\n    document.documentElement.style.setProperty('--animation-duration', '0.1s');\r\n    \r\n    // Disable blur effects\r\n    document.querySelectorAll('[style*=\"backdrop-filter\"], [class*=\"backdrop-blur\"]').forEach(el => {\r\n      (el as HTMLElement).style.backdropFilter = 'none';\r\n    });\r\n    \r\n    // Simplify shadows\r\n    document.documentElement.style.setProperty('--box-shadow-intensity', '0.5');\r\n    \r\n    performanceMonitor.recordMetric('quality_reduced', 1, {\r\n      reason: 'low_fps',\r\n      currentFPS: this.metrics.fps\r\n    });\r\n  }\r\n  \r\n  private increaseQuality(): void {\r\n    logger.info('Increasing quality due to good FPS', 'GamingOptimizations');\r\n    \r\n    // Re-enable animations gradually\r\n    document.documentElement.classList.remove('performance-mode');\r\n    document.documentElement.style.removeProperty('--animation-duration');\r\n    document.documentElement.style.removeProperty('--box-shadow-intensity');\r\n    \r\n    performanceMonitor.recordMetric('quality_increased', 1, {\r\n      reason: 'good_fps',\r\n      currentFPS: this.metrics.fps\r\n    });\r\n  }\r\n  \r\n  private handleLongTask(task: any): void {\r\n    logger.warn(`[Gaming Performance] Long task detected: ${task.duration}ms`);\r\n    \r\n    // If we're in crisis mode, this is critical\r\n    const inCrisisMode = window.location.pathname.includes('crisis') || \r\n                        document.querySelector('[data-crisis-active=\"true\"]');\r\n    \r\n    if (inCrisisMode && task.duration > 50) {\r\n      // Emergency performance mode for crisis features\r\n      document.documentElement.classList.add('performance-emergency');\r\n      setTimeout(() => {\r\n        document.documentElement.classList.remove('performance-emergency');\r\n      }, 5000);\r\n    }\r\n    \r\n    performanceMonitor.recordMetric('long_task', task.duration, {\r\n      inCrisisMode,\r\n      taskName: task.name,\r\n      startTime: task.startTime\r\n    });\r\n  }\r\n  \r\n  private optimizeLayoutStability(): void {\r\n    logger.info('Optimizing layout stability', 'GamingOptimizations');\r\n    \r\n    // Add contain properties to isolate layouts\r\n    document.querySelectorAll('.console-focusable, [data-console-group]').forEach(el => {\r\n      (el as HTMLElement).style.contain = 'layout style paint';\r\n    });\r\n    \r\n    performanceMonitor.recordMetric('layout_optimized', 1);\r\n  }\r\n  \r\n  private analyzeResourceTiming(entry: PerformanceResourceTiming): void {\r\n    const isCritical = entry.name.includes('crisis') || \r\n                      entry.name.includes('emergency') || \r\n                      entry.name.includes('console');\r\n    \r\n    if (isCritical && entry.duration > 200) {\r\n      logger.warn(`[Gaming Performance] Critical resource slow: ${entry.name}`);\r\n      performanceMonitor.recordMetric('critical_resource_slow', entry.duration, {\r\n        resourceName: entry.name,\r\n        size: entry.encodedBodySize\r\n      });\r\n    }\r\n  }\r\n  \r\n  private setupMemoryManagement(): void {\r\n    if (!this.config.enableMemoryOptimization) return;\r\n    \r\n    // Monitor memory usage\r\n    const checkMemory = () => {\r\n      if ('memory' in performance) {\r\n        const memory = (performance as any).memory;\r\n        const usedMB = memory.usedJSHeapSize / 1048576;\r\n        this.metrics.memoryUsage = usedMB;\r\n        \r\n        if (usedMB > 100) { // Over 100MB\r\n          this.triggerGarbageCollection();\r\n        }\r\n        \r\n        performanceMonitor.recordMetric('memory_usage_gaming', usedMB, {\r\n          total: memory.totalJSHeapSize / 1048576,\r\n          limit: memory.jsHeapSizeLimit / 1048576\r\n        });\r\n      }\r\n    };\r\n    \r\n    setInterval(checkMemory, 5000);\r\n    \r\n    // Clean up unused event listeners and observers\r\n    this.setupCleanupScheduler();\r\n  }\r\n  \r\n  private triggerGarbageCollection(): void {\r\n    logger.info('Triggering garbage collection optimizations', 'GamingOptimizations');\r\n    \r\n    // Force garbage collection if available (development only)\r\n    if ('gc' in window && process.env.NODE_ENV === 'development') {\r\n      (window as any).gc();\r\n    }\r\n    \r\n    // Clean up performance entries\r\n    if ('clearResourceTimings' in performance) {\r\n      performance.clearResourceTimings();\r\n    }\r\n    \r\n    // Clear old performance marks and measures\r\n    performance.clearMarks();\r\n    performance.clearMeasures();\r\n    \r\n    performanceMonitor.recordMetric('gc_triggered', 1, {\r\n      memoryUsage: this.metrics.memoryUsage\r\n    });\r\n  }\r\n  \r\n  private setupCleanupScheduler(): void {\r\n    // Clean up stale DOM references and event listeners\r\n    setInterval(() => {\r\n      // Remove stale event listeners from removed elements\r\n      document.querySelectorAll('[data-cleanup-scheduled]').forEach(el => {\r\n        if (!document.body.contains(el)) {\r\n          el.remove();\r\n        }\r\n      });\r\n      \r\n      // Clean up intersection observers for elements no longer in viewport\r\n      if ('IntersectionObserver' in window) {\r\n        // This would be implemented based on specific observer usage\r\n      }\r\n    }, 30000); // Every 30 seconds\r\n  }\r\n  \r\n  private optimizeNetworking(): void {\r\n    if (!this.config.enableNetworkOptimization) return;\r\n    \r\n    // Preconnect to critical domains\r\n    const criticalDomains = [\r\n      'https://fonts.googleapis.com',\r\n      'https://fonts.gstatic.com',\r\n    ];\r\n    \r\n    criticalDomains.forEach(domain => {\r\n      const link = document.createElement('link');\r\n      link.rel = 'preconnect';\r\n      link.href = domain;\r\n      link.crossOrigin = 'anonymous';\r\n      document.head.appendChild(link);\r\n    });\r\n    \r\n    // Optimize resource hints for critical resources\r\n    this.setupResourceHints();\r\n  }\r\n  \r\n  private setupResourceHints(): void {\r\n    // Prefetch likely next pages based on user behavior\r\n    const prefetchCandidates = [\r\n      '/wellness',\r\n      '/crisis',\r\n      '/community'\r\n    ];\r\n    \r\n    prefetchCandidates.forEach(path => {\r\n      if (window.location.pathname !== path) {\r\n        const link = document.createElement('link');\r\n        link.rel = 'prefetch';\r\n        link.href = path;\r\n        document.head.appendChild(link);\r\n      }\r\n    });\r\n  }\r\n  \r\n  private enableConsoleOptimizations(): void {\r\n    // Optimize console navigation for 60fps\r\n    document.addEventListener('keydown', this.optimizeKeyboardInput.bind(this), { \r\n      passive: true \r\n    });\r\n    \r\n    // Optimize mouse interactions\r\n    document.addEventListener('mousemove', this.throttleMouseMove.bind(this), { \r\n      passive: true \r\n    });\r\n    \r\n    // Optimize scroll performance\r\n    document.addEventListener('scroll', this.optimizeScrolling.bind(this), { \r\n      passive: true \r\n    });\r\n  }\r\n  \r\n  private optimizeKeyboardInput = (() => {\r\n    let lastInputTime = 0;\r\n    return (event: KeyboardEvent) => {\r\n      const now = performance.now();\r\n      const timeSinceLastInput = now - lastInputTime;\r\n      \r\n      // Throttle rapid key inputs to maintain 60fps\r\n      if (timeSinceLastInput < 16.67) {\r\n        event.preventDefault();\r\n        return;\r\n      }\r\n      \r\n      lastInputTime = now;\r\n    };\r\n  })();\r\n  \r\n  private throttleMouseMove = (() => {\r\n    let lastMoveTime = 0;\r\n    return (_event: MouseEvent) => {\r\n      const now = performance.now();\r\n      const timeSinceLastMove = now - lastMoveTime;\r\n      \r\n      // Throttle mouse events to 60fps\r\n      if (timeSinceLastMove < 16.67) {\r\n        return;\r\n      }\r\n      \r\n      lastMoveTime = now;\r\n      \r\n      // Update console navigation state efficiently\r\n      document.documentElement.classList.add('console-navigation-mouse');\r\n      document.documentElement.classList.remove('console-navigation-keyboard', 'console-navigation-gamepad');\r\n    };\r\n  })();\r\n  \r\n  private optimizeScrolling = (() => {\r\n    let scrollTimeout: number;\r\n    return () => {\r\n      // Use passive scrolling for better performance\r\n      clearTimeout(scrollTimeout);\r\n      scrollTimeout = window.setTimeout(() => {\r\n        // Trigger any scroll-dependent optimizations\r\n        this.updateVisibleElements();\r\n      }, 100);\r\n    };\r\n  })();\r\n  \r\n  private updateVisibleElements(): void {\r\n    // Optimize rendering of off-screen elements\r\n    const viewportHeight = window.innerHeight;\r\n    const buffer = 200; // 200px buffer for smooth scrolling\r\n    \r\n    document.querySelectorAll('.console-focusable').forEach(el => {\r\n      const rect = el.getBoundingClientRect();\r\n      const isVisible = rect.top < viewportHeight + buffer && rect.bottom > -buffer;\r\n      \r\n      if (isVisible) {\r\n        (el as HTMLElement).style.visibility = 'visible';\r\n      } else {\r\n        (el as HTMLElement).style.visibility = 'hidden';\r\n      }\r\n    });\r\n  }\r\n  \r\n  // Public API\r\n  public getMetrics(): PerformanceMetrics {\r\n    return { ...this.metrics };\r\n  }\r\n  \r\n  public getConfig(): GamePerformanceConfig {\r\n    return { ...this.config };\r\n  }\r\n  \r\n  public setConfig(newConfig: Partial<GamePerformanceConfig>): void {\r\n    this.config = { ...this.config, ...newConfig };\r\n    logger.info('Configuration updated', 'GamingOptimizations', newConfig);\r\n  }\r\n  \r\n  public enableCrisisMode(): void {\r\n    logger.crisis('Crisis mode enabled - maximum performance', 'high', 'GamingOptimizations');\r\n    \r\n    // Highest priority for crisis features\r\n    document.documentElement.classList.add('crisis-performance-mode');\r\n    \r\n    // Disable all non-essential animations\r\n    document.documentElement.style.setProperty('--animation-duration', '0s');\r\n    \r\n    // Force highest performance mode\r\n    this.performanceLevel = 'high';\r\n    this.config.targetFPS = 60;\r\n    \r\n    performanceMonitor.recordMetric('crisis_mode_enabled', 1);\r\n  }\r\n  \r\n  public disableCrisisMode(): void {\r\n    logger.info('Crisis mode disabled - restoring normal performance', 'GamingOptimizations');\r\n    \r\n    document.documentElement.classList.remove('crisis-performance-mode');\r\n    document.documentElement.style.removeProperty('--animation-duration');\r\n    \r\n    this.detectDeviceCapabilities(); // Restore appropriate performance level\r\n    \r\n    performanceMonitor.recordMetric('crisis_mode_disabled', 1);\r\n  }\r\n  \r\n  public generatePerformanceReport(): Record<string, any> {\r\n    const avgFPS = this.frameHistory.reduce((a, b) => a + b, 0) / this.frameHistory.length || 0;\r\n    \r\n    return {\r\n      averageFPS: Math.round(avgFPS),\r\n      currentFPS: this.metrics.fps,\r\n      frameTime: this.metrics.frameTime,\r\n      memoryUsage: this.metrics.memoryUsage,\r\n      performanceLevel: this.performanceLevel,\r\n      targetFPS: this.config.targetFPS,\r\n      optimizationsActive: {\r\n        gpuAcceleration: this.config.enableGPUAcceleration,\r\n        memoryOptimization: this.config.enableMemoryOptimization,\r\n        networkOptimization: this.config.enableNetworkOptimization,\r\n        adaptiveQuality: this.config.adaptiveQuality\r\n      },\r\n      frameHistory: [...this.frameHistory]\r\n    };\r\n  }\r\n  \r\n  public destroy(): void {\r\n    if (this.rafId) {\r\n      cancelAnimationFrame(this.rafId);\r\n    }\r\n    \r\n    // Clean up observers\r\n    this.observers.forEach(observer => observer.disconnect());\r\n    this.observers.clear();\r\n    \r\n    logger.info('Performance optimizer destroyed', 'GamingOptimizations');\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const gamePerformanceOptimizer = new GamePerformanceOptimizer();\r\n\r\n// React hook for accessing gaming performance features\r\nexport function useGamePerformance() {\r\n  return {\r\n    getMetrics: gamePerformanceOptimizer.getMetrics.bind(gamePerformanceOptimizer),\r\n    getConfig: gamePerformanceOptimizer.getConfig.bind(gamePerformanceOptimizer),\r\n    setConfig: gamePerformanceOptimizer.setConfig.bind(gamePerformanceOptimizer),\r\n    enableCrisisMode: gamePerformanceOptimizer.enableCrisisMode.bind(gamePerformanceOptimizer),\r\n    disableCrisisMode: gamePerformanceOptimizer.disableCrisisMode.bind(gamePerformanceOptimizer),\r\n    generateReport: gamePerformanceOptimizer.generatePerformanceReport.bind(gamePerformanceOptimizer)\r\n  };\r\n}\r\n\r\n// Initialize on import\r\nexport function initializeGamingPerformance(): void {\r\n  logger.info('Gaming-grade optimizations initialized', 'GamingOptimizations');\r\n}","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\performance\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'memoryMonitor' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'frameRateMonitor' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Performance Optimization Integration\n * Central export point for all performance utilities and components\n */\n\n// Import for internal use\nimport {\n  performanceMonitor,\n  memoryMonitor,\n  frameRateMonitor,\n} from './performanceMonitor';\n\nimport {\n  UpdatePriority,\n} from './concurrentFeatures';\n\nimport {\n  resourceManager,\n  imageLoader,\n  memoryLeakDetector,\n} from './memoryManagement';\nimport { logger } from '../logger';\n\n// Performance monitoring\nexport {\n  performanceMonitor,\n  memoryMonitor,\n  frameRateMonitor,\n  PERFORMANCE_THRESHOLDS,\n} from './performanceMonitor';\n\n// React 18/19 concurrent features\nexport {\n  UpdatePriority,\n  usePrioritizedTransition,\n  usePrioritizedDeferredValue,\n  LoadingFallbacks,\n  SuspenseWrapper,\n  lazyWithPreload,\n  ProgressiveEnhancement,\n  optimizedMemo,\n  batchedUpdates,\n  useHeavyComputation,\n  LazyLoad,\n  timeSlice,\n} from './concurrentFeatures';\n\n// Memory management\nexport {\n  resourceManager,\n  useResourceCleanup,\n  useEventListenerCleanup,\n  useTimerCleanup,\n  useIntervalCleanup,\n  imageLoader,\n  ImageLoader,\n  debounceWithCleanup,\n  throttleWithCleanup,\n  memoryLeakDetector,\n  MemoryLeakDetector,\n  WeakCache,\n} from './memoryManagement';\n\n// Performance components\nexport { VirtualizedList, VirtualizedPostItem, VirtualizedTextArea } from '../../components/performance/VirtualizedList';\nexport { OptimizedChart, MoodChart } from '../../components/performance/OptimizedChart';\nexport { OptimizedCrisisIntervention } from '../../components/performance/OptimizedCrisisIntervention';\n\n/**\n * Initialize all performance optimizations\n */\nexport function initializePerformanceOptimizations() {\n  // Start monitoring in production\n  if (import.meta.env.PROD) {\n    // Initialize performance monitoring\n    performanceMonitor.measureStart('app-initialization');\n    \n    // Set up frame rate monitoring callback (if fps < 30)\n    let lastTime = performance.now();\n    const _monitorFPS = () => {\n      const now = performance.now();\n      const fps = 1000 / (now - lastTime);\n      lastTime = now;\n      if (fps < 30) {\n        logger.warn(`Low frame rate detected: ${fps} FPS`);\n      }\n      requestAnimationFrame(_monitorFPS);\n    };\n    requestAnimationFrame(_monitorFPS);\n    \n    // Start memory leak detection\n    setInterval(() => {\n      memoryLeakDetector.takeSnapshot();\n      if (memoryLeakDetector.detectLeak()) {\n        logger.error('Memory leak detected!', memoryLeakDetector.getReport());\n      }\n    }, 60000); // Check every minute\n  }\n  \n  // Preload critical resources\n  preloadCriticalResources();\n  \n  // Set up performance budget monitoring\n  setupPerformanceBudget();\n  \n  // Service worker registration is handled in main.tsx to avoid conflicts\n}\n\n/**\n * Preload critical resources for mental health app\n */\nfunction preloadCriticalResources() {\n  // Preload crisis resources\n  const crisisResources = [\n    '/crisis-support.svg',\n    '/emergency.svg',\n    '/breathing-exercise.mp3',\n  ];\n  \n  crisisResources.forEach(src => {\n    if (src.endsWith('.svg') || src.endsWith('.png') || src.endsWith('.jpg')) {\n      imageLoader.preload([src]);\n    } else if (src.endsWith('.mp3')) {\n      const audio = new Audio();\n      audio.preload = 'auto';\n      audio.src = src;\n    }\n  });\n  \n  // Preconnect to critical domains\n  const domains = [\n    'https://988lifeline.org',\n    import.meta.env.VITE_API_URL,\n  ];\n  \n  domains.forEach(_url => {\n    if (_url) {\n      const link = document.createElement('link');\n      link.rel = 'preconnect';\n      link.href = new URL(_url).origin;\n      document.head.appendChild(_link);\n    }\n  });\n}\n\n/**\n * Set up performance budget monitoring\n */\nfunction setupPerformanceBudget() {\n  const budgets = {\n    js: 500 * 1024, // 500KB JavaScript\n    css: 100 * 1024, // 100KB CSS\n    images: 2 * 1024 * 1024, // 2MB images\n    total: 3 * 1024 * 1024, // 3MB total\n  };\n  \n  // Monitor resource sizes\n  if ('PerformanceObserver' in window) {\n    try {\n      const resourceObserver = new PerformanceObserver((list) => {\n        let jsSize = 0;\n        let cssSize = 0;\n        let imageSize = 0;\n        \n        for (const entry of list.getEntries()) {\n          if (entry.entryType === 'resource') {\n            const resource = entry as PerformanceResourceTiming;\n            const size = resource.transferSize || 0;\n            \n            if (resource.name.includes('.js')) {\n              jsSize += size;\n            } else if (resource.name.includes('.css')) {\n              cssSize += size;\n            } else if (resource.name.match(/\\.(jpg|jpeg|png|gif|svg|webp)/i)) {\n              imageSize += size;\n            }\n          }\n        }\n        \n        // Check against budgets\n        if (jsSize > budgets.js) {\n          logger.warn(`JavaScript budget exceeded: ${(jsSize / 1024).toFixed(2)}KB > ${(budgets.js / 1024).toFixed(2)}KB`);\n        }\n        if (cssSize > budgets.css) {\n          logger.warn(`CSS budget exceeded: ${(cssSize / 1024).toFixed(2)}KB > ${(budgets.css / 1024).toFixed(2)}KB`);\n        }\n        if (imageSize > budgets.images) {\n          logger.warn(`Image budget exceeded: ${(imageSize / 1024 / 1024).toFixed(2)}MB > ${(budgets.images / 1024 / 1024).toFixed(2)}MB`);\n        }\n      });\n      \n      resourceObserver.observe({ entryTypes: ['resource'] });\n    } catch {\n      logger.warn('Resource timing not supported');\n    }\n  }\n}\n\n/**\n * Performance optimization presets for different scenarios\n */\nexport const _PerformancePresets = {\n  // For crisis intervention - maximum performance\n  crisis: {\n    priority: UpdatePriority.CRISIS,\n    animations: false,\n    transitions: false,\n    virtualization: false,\n    webWorkers: false,\n  },\n  \n  // For data visualization - balanced\n  charts: {\n    priority: UpdatePriority.MEDIUM,\n    animations: true,\n    transitions: true,\n    virtualization: false,\n    webWorkers: true,\n  },\n  \n  // For community lists - optimized for large datasets\n  lists: {\n    priority: UpdatePriority.LOW,\n    animations: true,\n    transitions: true,\n    virtualization: true,\n    webWorkers: false,\n  },\n  \n  // For wellness tracking - smooth experience\n  wellness: {\n    priority: UpdatePriority.HIGH,\n    animations: true,\n    transitions: true,\n    virtualization: false,\n    webWorkers: true,\n  },\n};\n\n/**\n * Get performance report\n */\nexport function getPerformanceReport() {\n  const metrics = performanceMonitor.getMetrics();\n  const resources = resourceManager.getStats();\n  const images = imageLoader.getStats();\n  const memory = memoryLeakDetector.getReport();\n  const fps = 60; // Default FPS assumption, could be enhanced with actual monitoring\n  \n  return {\n    webVitals: metrics,\n    resources,\n    images,\n    memory,\n    fps,\n    timestamp: Date.now(),\n  };\n}\n\n// Type exports removed - types not available from these modules","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\performance\\memoryManagement.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'timersRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'timersRef.current' to a variable inside the effect, and use that variable in the cleanup function.","line":246,"column":17,"nodeType":"Identifier","endLine":246,"endColumn":24},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'intervalsRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'intervalsRef.current' to a variable inside the effect, and use that variable in the cleanup function.","line":273,"column":20,"nodeType":"Identifier","endLine":273,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":365,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":365,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9242,9245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9242,9245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":395,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":395,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9867,9870],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9867,9870],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Memory Management and Cleanup Utilities\n * Prevents memory leaks and optimizes resource usage in mental health app\n */\n\nimport { RefObject, useEffect, useRef } from 'react';\n\n/**\n * WeakMap-based cache for component data\n */\nexport class WeakCache<K extends object, V> {\n  private cache = new WeakMap<K, V>();\n  \n  set(key: K, value: V): void {\n    this.cache.set(key, value);\n  }\n  \n  get(key: K): V | undefined {\n    return this.cache.get(key);\n  }\n  \n  has(key: K): boolean {\n    return this.cache.has(key);\n  }\n  \n  delete(key: K): boolean {\n    return this.cache.delete(key);\n  }\n}\n\n/**\n * Resource cleanup manager\n */\nclass ResourceManager {\n  private cleanupFunctions: Map<string, () => void> = new Map();\n  private timers: Map<string, number> = new Map();\n  private intervals: Map<string, number> = new Map();\n// @ts-expect-error - IntersectionObserver is a global API\n  private observers: Map<string, IntersectionObserver | MutationObserver | ResizeObserver> = new Map();\n  private eventListeners: Map<string, { element: EventTarget; event: string; handler: EventListener }[]> = new Map();\n  \n  /**\n   * Register a cleanup function\n   */\n  registerCleanup(id: string, cleanup: () => void): void {\n    this.cleanupFunctions.set(id, cleanup);\n  }\n  \n  /**\n   * Register a timer for automatic cleanup\n   */\n  registerTimer(id: string, timerId: number): void {\n    // Clear existing timer if any\n    if (this.timers.has(id)) {\n      clearTimeout(this.timers.get(id)!);\n    }\n    this.timers.set(id, timerId);\n  }\n  \n  /**\n   * Register an interval for automatic cleanup\n   */\n  registerInterval(id: string, intervalId: number): void {\n    // Clear existing interval if any\n    if (this.intervals.has(id)) {\n      clearInterval(this.intervals.get(id)!);\n    }\n    this.intervals.set(id, intervalId);\n  }\n  \n  /**\n   * Register an observer for automatic cleanup\n// @ts-expect-error - IntersectionObserver is a global API\n   */\n  registerObserver(id: string, observer: IntersectionObserver | MutationObserver | ResizeObserver): void {\n    // Disconnect existing observer if any\n    if (this.observers.has(id)) {\n      this.observers.get(id)!.disconnect();\n    }\n    this.observers.set(id, observer);\n  }\n  \n  /**\n   * Register event listener for automatic cleanup\n   */\n  registerEventListener(id: string, element: EventTarget, event: string, handler: EventListener): void {\n    if (!this.eventListeners.has(id)) {\n      this.eventListeners.set(id, []);\n    }\n    this.eventListeners.get(id)!.push({ element, event, handler });\n    element.addEventListener(event, handler);\n  }\n  \n  /**\n   * Clean up specific resource\n   */\n  cleanup(id: string): void {\n    // Run cleanup function\n    const cleanupFn = this.cleanupFunctions.get(id);\n    if (_cleanupFn) {\n      cleanupFn();\n      this.cleanupFunctions.delete(id);\n    }\n    \n    // Clear timer\n    const timer = this.timers.get(id);\n    if (timer) {\n      clearTimeout(timer);\n      this.timers.delete(id);\n    }\n    \n    // Clear interval\n    const interval = this.intervals.get(id);\n    if (interval) {\n      clearInterval(interval);\n      this.intervals.delete(id);\n    }\n    \n    // Disconnect observer\n    const observer = this.observers.get(id);\n    if (observer) {\n      observer.disconnect();\n      this.observers.delete(id);\n    }\n    \n    // Remove event listeners\n    const listeners = this.eventListeners.get(id);\n    if (listeners) {\n      listeners.forEach(({ element, event, handler }) => {\n        element.removeEventListener(event, handler);\n      });\n      this.eventListeners.delete(id);\n    }\n  }\n  \n  /**\n   * Clean up all resources\n   */\n  cleanupAll(): void {\n    // Run all cleanup functions\n    this.cleanupFunctions.forEach(cleanup => cleanup());\n    this.cleanupFunctions.clear();\n    \n    // Clear all timers\n    this.timers.forEach(timer => clearTimeout(timer));\n    this.timers.clear();\n    \n    // Clear all intervals\n    this.intervals.forEach(interval => clearInterval(interval));\n    this.intervals.clear();\n    \n    // Disconnect all observers\n    this.observers.forEach(observer => observer.disconnect());\n    this.observers.clear();\n    \n    // Remove all event listeners\n    this.eventListeners.forEach(listeners => {\n      listeners.forEach(({ element, event, handler }) => {\n        element.removeEventListener(event, handler);\n      });\n    });\n    this.eventListeners.clear();\n  }\n  \n  /**\n   * Get resource stats\n   */\n  getStats() {\n    return {\n      cleanupFunctions: this.cleanupFunctions.size,\n      timers: this.timers.size,\n      intervals: this.intervals.size,\n      observers: this.observers.size,\n      eventListeners: this.eventListeners.size,\n    };\n  }\n}\n\n// Global resource manager instance\nexport const resourceManager = new ResourceManager();\n\n/**\n * Hook for automatic resource cleanup\n */\nexport function useResourceCleanup(componentId: string) {\n  useEffect(() => {\n    return () => {\n      resourceManager.cleanup(componentId);\n    };\n  }, [componentId]);\n  \n  return {\n    registerCleanup: (cleanup: () => void) => resourceManager.registerCleanup(componentId, cleanup),\n    registerTimer: (timerId: number) => resourceManager.registerTimer(componentId, timerId),\n    registerInterval: (intervalId: number) => resourceManager.registerInterval(componentId, intervalId),\n    registerObserver: (observer: unknown) => resourceManager.registerObserver(componentId, observer),\n    registerEventListener: (element: EventTarget, event: string, handler: EventListener) => \n      resourceManager.registerEventListener(componentId, element, event, handler),\n  };\n}\n\n/**\n * Hook for cleaning up DOM event listeners\n */\nexport function useEventListenerCleanup(\n  ref: RefObject<HTMLElement>,\n  event: string,\n  handler: EventListener,\n  options?: AddEventListenerOptions\n) {\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n    \n    element.addEventListener(event, handler, options);\n    \n    return () => {\n      element.removeEventListener(event, handler, options);\n    };\n  }, [ref, event, handler, options]);\n}\n\n/**\n * Hook for cleaning up timers\n */\nexport function useTimerCleanup() {\n  const timersRef = useRef<Set<number>>(new Set());\n  \n  const setTimeout = (callback: () => void, delay: number): number => {\n    const id = window.setTimeout(() => {\n      timersRef.current.delete(id);\n      callback();\n    }, delay);\n    timersRef.current.add(id);\n    return id;\n  };\n  \n  const clearTimeout = (id: number) => {\n    window.clearTimeout(id);\n    timersRef.current.delete(id);\n  };\n  \n  useEffect(() => {\n    return () => {\n      timersRef.current.forEach(id => window.clearTimeout(id));\n      timersRef.current.clear();\n    };\n  }, []);\n  \n  return { setTimeout, clearTimeout };\n}\n\n/**\n * Hook for cleaning up intervals\n */\nexport function useIntervalCleanup() {\n  const intervalsRef = useRef<Set<number>>(new Set());\n  \n  const setInterval = (callback: () => void, delay: number): number => {\n    const id = window.setInterval(callback, delay);\n    intervalsRef.current.add(id);\n    return id;\n  };\n  \n  const clearInterval = (id: number) => {\n    window.clearInterval(id);\n    intervalsRef.current.delete(id);\n  };\n  \n  useEffect(() => {\n    return () => {\n      intervalsRef.current.forEach(id => window.clearInterval(id));\n      intervalsRef.current.clear();\n    };\n  }, []);\n  \n  return { setInterval, clearInterval };\n}\n\n/**\n * Memory-efficient image loader with cleanup\n */\nexport class ImageLoader {\n  private cache = new Map<string, HTMLImageElement>();\n  private loading = new Map<string, Promise<HTMLImageElement>>();\n  \n  async load(src: string): Promise<HTMLImageElement> {\n    // Return cached image\n    if (this.cache.has(src)) {\n      return this.cache.get(src)!;\n    }\n    \n    // Return existing loading promise\n    if (this.loading.has(src)) {\n      return this.loading.get(src)!;\n    }\n    \n    // Start new load\n    const loadPromise = new Promise<HTMLImageElement>((resolve, reject) => {\n      const img = new Image();\n      \n      img.onload = () => {\n        this.cache.set(src, img);\n        this.loading.delete(src);\n        resolve(img);\n      };\n      \n      img.onerror = () => {\n        this.loading.delete(src);\n        reject(new Error(`Failed to load image: ${src}`));\n      };\n      \n      img.src = src;\n    });\n    \n    this.loading.set(src, loadPromise);\n    return loadPromise;\n  }\n  \n  /**\n   * Preload multiple images\n   */\n  async preload(srcs: string[]): Promise<void> {\n    await Promise.all(srcs.map(src => this.load(src).catch(() => {})));\n  }\n  \n  /**\n   * Clear image from cache\n   */\n  clear(src: string): void {\n    const img = this.cache.get(src);\n    if (img) {\n      img.src = ''; // Clear image source\n      this.cache.delete(src);\n    }\n  }\n  \n  /**\n   * Clear all cached images\n   */\n  clearAll(): void {\n    this.cache.forEach(img => {\n      img.src = ''; // Clear image source\n    });\n    this.cache.clear();\n    this.loading.clear();\n  }\n  \n  /**\n   * Get cache stats\n   */\n  getStats() {\n    return {\n      cached: this.cache.size,\n      loading: this.loading.size,\n    };\n  }\n}\n\nexport const _imageLoader = new ImageLoader();\n\n/**\n * Debounce with cleanup\n */\nexport function debounceWithCleanup<T extends (...args: unknown[]) => any>(\n  func: T,\n  delay: number\n): T & { cancel: () => void } {\n  let timeoutId: number | null = null;\n  \n  const debounced = ((...args: Parameters<T>) => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    \n    timeoutId = window.setTimeout(() => {\n      func(...args);\n      timeoutId = null;\n    }, delay);\n  }) as T;\n  \n  (debounced as unknown).cancel = () => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n      timeoutId = null;\n    }\n  };\n  \n  return debounced as T & { cancel: () => void };\n}\n\n/**\n * Throttle with cleanup\n */\nexport function throttleWithCleanup<T extends (...args: unknown[]) => any>(\n  func: T,\n  limit: number\n): T & { cancel: () => void } {\n  let inThrottle = false;\n  let lastArgs: Parameters<T> | null = null;\n  let timeoutId: number | null = null;\n  \n  const throttled = ((...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = true;\n      \n      timeoutId = window.setTimeout(() => {\n        inThrottle = false;\n        if (_lastArgs) {\n          throttled(...lastArgs);\n          lastArgs = null;\n        }\n      }, limit);\n    } else {\n      lastArgs = args;\n    }\n  }) as T;\n  \n  (throttled as unknown).cancel = () => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n      timeoutId = null;\n    }\n    inThrottle = false;\n    lastArgs = null;\n  };\n  \n  return throttled as T & { cancel: () => void };\n}\n\n/**\n * Memory leak detector\n */\nexport class MemoryLeakDetector {\n  private snapshots: unknown[] = [];\n  private maxSnapshots = 10;\n  \n  takeSnapshot(): void {\n    if ('memory' in performance) {\n      const memory = (performance as unknown).memory;\n      this.snapshots.push({\n        timestamp: Date.now(),\n        usedJSHeapSize: memory.usedJSHeapSize,\n        totalJSHeapSize: memory.totalJSHeapSize,\n        jsHeapSizeLimit: memory.jsHeapSizeLimit,\n      });\n      \n      // Keep only recent snapshots\n      if (this.snapshots.length > this.maxSnapshots) {\n        this.snapshots.shift();\n      }\n    }\n  }\n  \n  detectLeak(): boolean {\n    if (this.snapshots.length < 3) return false;\n    \n    // Check if memory is consistently _increasing\n    let _increasing = true;\n    for (let i = 1; i < this.snapshots.length; i++) {\n      if (this.snapshots[i].usedJSHeapSize <= this.snapshots[i - 1].usedJSHeapSize) {\n        _increasing = false;\n        break;\n      }\n    }\n    \n    if (_increasing) {\n      const firstSnapshot = this.snapshots[0];\n      const lastSnapshot = this.snapshots[this.snapshots.length - 1];\n      const increase = lastSnapshot.usedJSHeapSize - firstSnapshot.usedJSHeapSize;\n      const timeElapsed = lastSnapshot.timestamp - firstSnapshot.timestamp;\n      \n      // Leak detected if memory increased by more than 10MB in 1 minute\n      if (increase > 10 * 1024 * 1024 && timeElapsed < 60000) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n  \n  getReport() {\n    return {\n      snapshots: this.snapshots,\n      hasLeak: this.detectLeak(),\n      currentMemory: this.snapshots[this.snapshots.length - 1],\n    };\n  }\n  \n  clear(): void {\n    this.snapshots = [];\n  }\n}\n\nexport const _memoryLeakDetector = new MemoryLeakDetector();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\performance\\performanceMonitor.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1672,1675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1672,1675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4036,4039],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4036,4039],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":172,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6004,6007],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6004,6007],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":447,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":447,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15591,15594],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15591,15594],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":467,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":467,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16300,16303],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16300,16303],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":467,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":467,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16333,16336],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16333,16336],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":467,"column":107,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":467,"endColumn":110,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16369,16372],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16369,16372],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":499,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":499,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17356,17359],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17356,17359],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":580,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":580,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19674,19677],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19674,19677],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":630,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":630,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20922,20925],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20922,20925],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":710,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":710,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":732,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":732,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23853,23856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23853,23856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":733,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":733,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23894,23897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23894,23897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Comprehensive Performance Monitoring System for CoreV4\n * Tracks critical metrics including crisis response times, Core Web Vitals, and custom metrics\n */\n\nimport { onCLS, onFCP, onFID, onLCP, onTTFB, type Metric } from 'web-vitals';\nimport { logger } from '../logger';\n\n// Performance thresholds for mental health app\nconst PERFORMANCE_THRESHOLDS = {\n  // Critical crisis response times\n  CRISIS_PAGE_LOAD: 200, // ms - Crisis pages must load in <200ms\n  CRISIS_HOTLINE_ACCESS: 50, // ms - 988 access must be <50ms\n  SAFETY_PLAN_ACCESS: 100, // ms - Safety plan must load in <100ms\n  EMERGENCY_CONTACT_DISPLAY: 50, // ms - Emergency contacts must show in <50ms\n  CRISIS_CHAT_CONNECTION: 500, // ms - Crisis chat must connect in <500ms\n  \n  // Core Web Vitals targets\n  LCP: 2500, // Largest Contentful Paint\n  FID: 100, // First Input Delay\n  CLS: 0.1, // Cumulative Layout Shift\n  FCP: 1800, // First Contentful Paint\n  TTFB: 600, // Time to First Byte\n  TTI: 3500, // Time to Interactive\n  \n  // Mental health specific metrics\n  MOOD_LOG_RESPONSE: 200, // ms\n  DASHBOARD_WIDGET_LOAD: 300, // ms per widget\n  THERAPY_SESSION_LOAD: 500, // ms\n  COMMUNITY_POST_LOAD: 400, // ms\n  PROFESSIONAL_SEARCH: 600, // ms\n  \n  // Memory thresholds\n  MAX_MEMORY_MB: 150, // Maximum memory usage in MB\n  MEMORY_WARNING_MB: 100, // Warning threshold\n  \n  // Bundle size limits (_KB)\n  CRITICAL_BUNDLE_SIZE: 300, // Crisis features bundle\n  MAIN_BUNDLE_SIZE: 500, // Main app bundle\n  VENDOR_BUNDLE_SIZE: 800, // Vendor dependencies\n};\n\n// Performance metrics storage\ninterface PerformanceMetric {\n  name: string;\n  value: number;\n  timestamp: number;\n  context?: Record<string, any>;\n}\n\nclass PerformanceMonitor {\n  private metrics: Map<string, PerformanceMetric[]> = new Map();\n  private observers: Map<string, PerformanceObserver> = new Map();\n  private reportQueue: PerformanceMetric[] = [];\n  private reportTimer: number | null = null;\n  private sessionId: string;\n  private userId: string | null = null;\n  private isLowEndDevice: boolean = false;\n  private networkType: string = 'unknown';\n  \n  constructor() {\n    this.sessionId = this.generateSessionId();\n    this.detectDeviceCapabilities();\n    this.detectNetworkType();\n    this.initializeWebVitals();\n    this.initializePerformanceObservers();\n    this.initializeMemoryMonitoring();\n    this.initializeCrisisMetrics();\n  }\n  \n  /**\n   * Initialize Core Web Vitals monitoring\n   */\n  private initializeWebVitals(): void {\n    // Largest Contentful Paint\n    onLCP((metric: Metric) => this.handleWebVital('LCP', metric));\n    \n    // First Input Delay\n    onFID((metric: Metric) => this.handleWebVital('FID', metric));\n    \n    // Cumulative Layout Shift\n    onCLS((metric: Metric) => this.handleWebVital('CLS', metric));\n    \n    // First Contentful Paint\n    onFCP((metric: Metric) => this.handleWebVital('FCP', metric));\n    \n    // Time to First Byte\n    onTTFB((metric: Metric) => this.handleWebVital('TTFB', metric));\n  }\n  \n  /**\n   * Handle Web Vital metrics\n   */\n  private handleWebVital(name: string, metric: Metric): void {\n    const threshold = PERFORMANCE_THRESHOLDS[name as keyof typeof PERFORMANCE_THRESHOLDS];\n    const isGood = metric.value <= threshold;\n    \n    this.recordMetric(name, metric.value, {\n      rating: metric.rating,\n      isGood,\n      threshold,\n      delta: metric.delta,\n      navigationType: metric.navigationType,\n    });\n    \n    // Alert if critical metrics exceed thresholds\n    if (!isGood && ['LCP', 'FID'].includes(name)) {\n      this.alertPerformanceIssue(name, metric.value, threshold);\n    }\n  }\n  \n  /**\n   * Initialize Performance Observers for detailed monitoring\n   */\n  private initializePerformanceObservers(): void {\n    // Long Task Observer - detect blocking tasks\n    if ('PerformanceObserver' in window && PerformanceObserver.supportedEntryTypes?.includes('longtask')) {\n      const longTaskObserver = new PerformanceObserver((list) => {\n        for (const entry of list.getEntries()) {\n          const longTask = entry as any; // PerformanceLongTaskTiming not in all TypeScript versions\n          this.recordMetric('long_task', longTask.duration, {\n            name: longTask.name,\n            startTime: longTask.startTime,\n            attribution: longTask.attribution,\n          });\n          \n          // Alert if long task blocks crisis features\n          if (longTask.duration > 50 && this.isInCrisisFlow()) {\n            this.alertPerformanceIssue('long_task_in_crisis', longTask.duration, 50);\n          }\n        }\n      });\n      \n      longTaskObserver.observe({ entryTypes: ['longtask'] });\n      this.observers.set('longtask', longTaskObserver);\n    }\n    \n    // Navigation timing\n    if ('PerformanceObserver' in window && PerformanceObserver.supportedEntryTypes?.includes('navigation')) {\n      const navObserver = new PerformanceObserver((list) => {\n        for (const entry of list.getEntries()) {\n          const navEntry = entry as PerformanceNavigationTiming;\n          this.recordNavigationMetrics(navEntry);\n        }\n      });\n      \n      navObserver.observe({ entryTypes: ['navigation'] });\n      this.observers.set('navigation', navObserver);\n    }\n    \n    // Resource timing for bundle monitoring\n    if ('PerformanceObserver' in window && PerformanceObserver.supportedEntryTypes?.includes('resource')) {\n      const resourceObserver = new PerformanceObserver((list) => {\n        for (const entry of list.getEntries()) {\n          const resourceEntry = entry as PerformanceResourceTiming;\n          this.analyzeResourceLoading(resourceEntry);\n        }\n      });\n      \n      resourceObserver.observe({ entryTypes: ['resource'] });\n      this.observers.set('resource', resourceObserver);\n    }\n  }\n  \n  /**\n   * Initialize memory monitoring for leak detection\n   */\n  private initializeMemoryMonitoring(): void {\n    if ('memory' in performance) {\n      // Monitor memory usage every 10 seconds\n      setInterval(() => {\n        const memory = (performance as any).memory;\n        const usedMemoryMB = memory.usedJSHeapSize / 1048576;\n        const totalMemoryMB = memory.totalJSHeapSize / 1048576;\n        const limitMemoryMB = memory.jsHeapSizeLimit / 1048576;\n        \n        this.recordMetric('memory_usage', usedMemoryMB, {\n          total: totalMemoryMB,\n          limit: limitMemoryMB,\n          percentage: (usedMemoryMB / limitMemoryMB) * 100,\n        });\n        \n        // Detect potential memory leaks\n        if (usedMemoryMB > PERFORMANCE_THRESHOLDS.MAX_MEMORY_MB) {\n          this.alertMemoryIssue(usedMemoryMB);\n        }\n        \n        // Track memory growth rate\n        this.detectMemoryLeaks(usedMemoryMB);\n      }, 10000);\n    }\n  }\n  \n  /**\n   * Initialize crisis-specific performance metrics\n   */\n  private initializeCrisisMetrics(): void {\n    // Monitor crisis button response time\n    this.measureCrisisButtonPerformance();\n    \n    // Monitor 988 hotline access speed\n    this.measure988AccessTime();\n    \n    // Monitor safety plan loading\n    this.measureSafetyPlanAccess();\n    \n    // Monitor emergency contacts display\n    this.measureEmergencyContactsDisplay();\n  }\n  \n  /**\n   * Measure crisis button click to modal display time\n   */\n  private measureCrisisButtonPerformance(): void {\n    // Override crisis button click handler to measure performance\n    document.addEventListener('click', (event) => {\n      const target = event.target as HTMLElement;\n      if (target.closest('[aria-label*=\"Crisis\"]')) {\n        performance.mark('crisis_button_clicked');\n        \n        // Use MutationObserver to detect when modal appears\n// @ts-expect-error - MutationObserver is a global API\n        const observer = new MutationObserver((mutations) => {\n          for (const mutation of mutations) {\n            if (mutation.type === 'childList') {\n              const modal = document.querySelector('[role=\"dialog\"][aria-labelledby*=\"crisis\"]');\n              if (modal) {\n                performance.mark('crisis_modal_displayed');\n                performance.measure('crisis_response_time', 'crisis_button_clicked', 'crisis_modal_displayed');\n                \n                const measure = performance.getEntriesByName('crisis_response_time')[0];\n                if (!measure) continue;\n                this.recordMetric('crisis_response_time', measure.duration, {\n                  timestamp: Date.now(),\n                  userAgent: navigator.userAgent,\n                });\n                \n                // Alert if response time exceeds threshold\n                if (measure?.duration && measure.duration > PERFORMANCE_THRESHOLDS.CRISIS_PAGE_LOAD) {\n                  this.alertCriticalPerformanceIssue('crisis_response_slow', measure.duration);\n                }\n                \n                observer.disconnect();\n                break;\n              }\n            }\n          }\n        });\n        \n        observer.observe(document.body, { childList: true, subtree: true });\n        \n        // Cleanup observer after 5 seconds\n        setTimeout(() => observer.disconnect(), 5000);\n      }\n    });\n  }\n  \n  /**\n   * Measure 988 hotline access time\n   */\n  private measure988AccessTime(): void {\n    // Monitor tel:988 link clicks\n    document.addEventListener('click', (event) => {\n      const target = event.target as HTMLElement;\n      const telLink = target.closest('a[href^=\"tel:988\"]');\n      \n      if (telLink) {\n        const clickTime = performance.now();\n        this.recordMetric('988_access_time', clickTime, {\n          immediate: clickTime < PERFORMANCE_THRESHOLDS.CRISIS_HOTLINE_ACCESS,\n        });\n      }\n    });\n  }\n  \n  /**\n   * Measure safety plan access time\n   */\n  private measureSafetyPlanAccess(): void {\n    // Monitor safety plan component loading\n    const measureSafetyPlan = (startMark: string) => {\n      performance.mark(startMark);\n      \n      const checkSafetyPlan = () => {\n        const safetyPlanElement = document.querySelector('[data-testid=\"safety-plan\"]');\n        if (safetyPlanElement) {\n          performance.mark('safety_plan_loaded');\n          performance.measure('safety_plan_load_time', startMark, 'safety_plan_loaded');\n          \n          const measure = performance.getEntriesByName('safety_plan_load_time')[0];\n          if (!measure) return;\n          this.recordMetric('safety_plan_access', measure.duration, {\n            withinThreshold: measure.duration < PERFORMANCE_THRESHOLDS.SAFETY_PLAN_ACCESS,\n          });\n        } else {\n          requestAnimationFrame(checkSafetyPlan);\n        }\n      };\n      \n      checkSafetyPlan();\n    };\n    \n    // Hook into router navigation to safety plan\n    window.addEventListener('popstate', () => {\n      if (window.location.pathname.includes('safety-plan')) {\n        measureSafetyPlan('safety_plan_navigation_start');\n      }\n    });\n  }\n  \n  /**\n   * Measure emergency contacts display time\n   */\n  private measureEmergencyContactsDisplay(): void {\n    const measureContacts = () => {\n      performance.mark('emergency_contacts_start');\n      \n      const checkContacts = () => {\n        const contactsElement = document.querySelector('[data-testid=\"emergency-contacts\"]');\n        if (contactsElement && contactsElement.children.length > 0) {\n          performance.mark('emergency_contacts_displayed');\n          performance.measure('emergency_contacts_time', 'emergency_contacts_start', 'emergency_contacts_displayed');\n          \n          const measure = performance.getEntriesByName('emergency_contacts_time')[0];\n          if (!measure) return;\n          this.recordMetric('emergency_contacts_display', measure.duration, {\n            count: contactsElement.children.length,\n            fast: measure.duration < PERFORMANCE_THRESHOLDS.EMERGENCY_CONTACT_DISPLAY,\n          });\n        }\n      };\n      \n      // Check periodically\n      const interval = setInterval(() => {\n        checkContacts();\n        if (document.querySelector('[data-testid=\"emergency-contacts\"]')) {\n          clearInterval(interval);\n        }\n      }, 100);\n      \n      // Stop checking after 5 seconds\n      setTimeout(() => clearInterval(interval), 5000);\n    };\n    \n    // Monitor emergency contacts section\n    document.addEventListener('click', (event) => {\n      const target = event.target as HTMLElement;\n      if (target.textContent?.includes('Emergency Contacts')) {\n        measureContacts();\n      }\n    });\n  }\n  \n  /**\n   * Record navigation timing metrics\n   */\n  private recordNavigationMetrics(entry: PerformanceNavigationTiming): void {\n    const metrics = {\n      dns: entry.domainLookupEnd - entry.domainLookupStart,\n      tcp: entry.connectEnd - entry.connectStart,\n      ttfb: entry.responseStart - entry.requestStart,\n      download: entry.responseEnd - entry.responseStart,\n      domInteractive: entry.domInteractive - entry.fetchStart,\n      domComplete: entry.domComplete - entry.fetchStart,\n      loadComplete: entry.loadEventEnd - entry.fetchStart,\n    };\n    \n    this.recordMetric('navigation_timing', metrics.loadComplete, metrics);\n    \n    // Check if page load is too slow\n    if (metrics.loadComplete > 3000) {\n      this.alertPerformanceIssue('slow_page_load', metrics.loadComplete, 3000);\n    }\n  }\n  \n  /**\n   * Analyze resource loading for bundle optimization\n   */\n  private analyzeResourceLoading(entry: PerformanceResourceTiming): void {\n    const isJavaScript = entry.name.endsWith('.js');\n    const isCSS = entry.name.endsWith('.css');\n    const isCriticalResource = entry.name.includes('crisis') || entry.name.includes('emergency');\n    \n    if (isJavaScript || isCSS) {\n      const loadTime = entry.responseEnd - entry.startTime;\n      const size = entry.encodedBodySize;\n      \n      this.recordMetric('resource_load', loadTime, {\n        name: entry.name,\n        type: isJavaScript ? 'js' : 'css',\n        size: size / 1024, // KB\n        critical: isCriticalResource,\n        cached: entry.transferSize === 0,\n      });\n      \n      // Alert if critical resources are slow\n      if (isCriticalResource && loadTime > 200) {\n        this.alertCriticalPerformanceIssue('slow_critical_resource', loadTime);\n      }\n      \n      // Alert if bundles are too large\n      if (isJavaScript && size > PERFORMANCE_THRESHOLDS.CRITICAL_BUNDLE_SIZE * 1024) {\n        this.alertBundleSizeIssue(entry.name, size / 1024);\n      }\n    }\n  }\n  \n  /**\n   * Detect potential memory leaks\n   */\n  private memoryHistory: number[] = [];\n  private detectMemoryLeaks(currentMemoryMB: number): void {\n    this.memoryHistory.push(currentMemoryMB);\n    \n    // Keep only last 6 measurements (1 minute of data)\n    if (this.memoryHistory.length > 6) {\n      this.memoryHistory.shift();\n    }\n    \n    // Check for consistent memory growth\n    if (this.memoryHistory.length === 6) {\n      let isGrowing = true;\n      for (let i = 1; i < this.memoryHistory.length; i++) {\n        const current = this.memoryHistory[i];\n        const previous = this.memoryHistory[i - 1];\n        if (current != null && previous != null && current <= previous) {\n          isGrowing = false;\n          break;\n        }\n      }\n      \n      if (isGrowing) {\n        const recent = this.memoryHistory[5];\n        const initial = this.memoryHistory[0];\n        if (recent == null || initial == null) return;\n        const growthRate = recent - initial;\n        this.alertMemoryLeak(growthRate);\n      }\n    }\n  }\n  \n  /**\n   * Detect device capabilities for optimization decisions\n   */\n  private detectDeviceCapabilities(): void {\n    // Check for low-end device indicators\n    const memory = (navigator as any).deviceMemory;\n    const cpuCores = navigator.hardwareConcurrency;\n    \n    this.isLowEndDevice = (\n      (memory && memory <= 4) || // 4GB RAM or less\n      (cpuCores && cpuCores <= 2) || // 2 cores or less\n      /Android.*(Mobile|Tablet).*Chrome\\/[.0-9]* (?!Mobile)/i.test(navigator.userAgent) || // Older Android\n      /iPhone OS [6-9]_/i.test(navigator.userAgent) // Older iPhone\n    );\n    \n    if (this.isLowEndDevice) {\n      logger.info('Low-end device detected, enabling optimizations', 'PerformanceMonitor');\n      this.enableLowEndOptimizations();\n    }\n  }\n  \n  /**\n   * Detect network type for adaptive loading\n   */\n  private detectNetworkType(): void {\n    const connection = (navigator as any).connection || (navigator as any).mozConnection || (navigator as any).webkitConnection;\n    \n    if (connection) {\n      this.networkType = connection.effectiveType || 'unknown';\n      \n      // Monitor network changes\n      connection.addEventListener('change', () => {\n        this.networkType = connection.effectiveType || 'unknown';\n        this.recordMetric('network_change', 0, {\n          type: this.networkType,\n          downlink: connection.downlink,\n          rtt: connection.rtt,\n        });\n      });\n    }\n  }\n  \n  /**\n   * Enable optimizations for low-end devices\n   */\n  private enableLowEndOptimizations(): void {\n    // Reduce animation complexity\n    document.documentElement.classList.add('reduce-motion');\n    \n    // Disable non-critical features\n    localStorage.setItem('performance_mode', 'low');\n    \n    // Reduce image quality\n    document.documentElement.style.setProperty('--image-quality', 'low');\n    \n    // Record optimization activation\n    this.recordMetric('low_end_optimizations', 1, {\n      memory: (navigator as any).deviceMemory,\n      cores: navigator.hardwareConcurrency,\n    });\n  }\n  \n  /**\n   * Check if user is in crisis flow\n   */\n  private isInCrisisFlow(): boolean {\n    return (\n      window.location.pathname.includes('crisis') ||\n      document.querySelector('[role=\"dialog\"][aria-labelledby*=\"crisis\"]') !== null ||\n      document.querySelector('[data-crisis-active=\"true\"]') !== null\n    );\n  }\n  \n  /**\n   * Alert for performance issues\n   */\n  private alertPerformanceIssue(metric: string, value: number, threshold: number): void {\n    logger.warn(`[Performance] ${metric} exceeded threshold: ${value}ms (threshold: ${threshold}ms)`);\n    \n    // Send to analytics\n    this.reportMetric({\n      name: 'performance_issue',\n      value,\n      timestamp: Date.now(),\n      context: {\n        metric,\n        threshold,\n        severity: 'warning',\n      },\n    });\n  }\n  \n  /**\n   * Alert for critical performance issues (crisis features)\n   */\n  private alertCriticalPerformanceIssue(metric: string, value: number): void {\n    logger.error(`[Performance Critical] ${metric}: ${value}ms - Crisis feature performance degraded!`);\n    \n    // Immediately report critical issues\n    this.reportMetric({\n      name: 'critical_performance_issue',\n      value,\n      timestamp: Date.now(),\n      context: {\n        metric,\n        severity: 'critical',\n        inCrisisFlow: this.isInCrisisFlow(),\n      },\n    });\n    \n    // Trigger immediate optimizations\n    this.triggerEmergencyOptimizations();\n  }\n  \n  /**\n   * Trigger emergency optimizations for critical performance issues\n   */\n  private triggerEmergencyOptimizations(): void {\n    // Pause non-critical operations\n    document.documentElement.classList.add('crisis-performance-mode');\n    \n    // Stop animations\n    document.documentElement.style.setProperty('--animation-duration', '0');\n    \n    // Defer non-critical network requests\n    window.dispatchEvent(new CustomEvent('performance:emergency'));\n    \n    logger.warn('Emergency performance optimizations activated', 'PerformanceMonitor');\n  }\n  \n  /**\n   * Alert for memory issues\n   */\n  private alertMemoryIssue(memoryMB: number): void {\n    logger.warn(`[Memory] High memory usage: ${memoryMB.toFixed(2)}MB`);\n    \n    // Trigger garbage collection hint\n    if ('gc' in window) {\n      (window as any).gc();\n    }\n    \n    // Report memory issue\n    this.reportMetric({\n      name: 'memory_warning',\n      value: memoryMB,\n      timestamp: Date.now(),\n      context: {\n        threshold: PERFORMANCE_THRESHOLDS.MAX_MEMORY_MB,\n      },\n    });\n  }\n  \n  /**\n   * Alert for potential memory leak\n   */\n  private alertMemoryLeak(growthRateMB: number): void {\n    logger.error(`[Memory] Potential memory leak detected! Growth rate: ${growthRateMB.toFixed(2)}MB/minute`);\n    \n    this.reportMetric({\n      name: 'memory_leak_detected',\n      value: growthRateMB,\n      timestamp: Date.now(),\n      context: {\n        history: this.memoryHistory,\n      },\n    });\n  }\n  \n  /**\n   * Alert for bundle size issues\n   */\n  private alertBundleSizeIssue(bundleName: string, sizeKB: number): void {\n    logger.warn(`[Bundle] Large bundle detected: ${bundleName} (${sizeKB.toFixed(2)}KB)`);\n    \n    this.reportMetric({\n      name: 'bundle_size_warning',\n      value: sizeKB,\n      timestamp: Date.now(),\n      context: {\n        bundle: bundleName,\n        threshold: PERFORMANCE_THRESHOLDS.CRITICAL_BUNDLE_SIZE,\n      },\n    });\n  }\n  \n  /**\n   * Record a performance metric\n   */\n  public recordMetric(name: string, value: number, context?: Record<string, any>): void {\n    const metric: PerformanceMetric = {\n      name,\n      value,\n      timestamp: Date.now(),\n      context: {\n        ...context,\n        sessionId: this.sessionId,\n        userId: this.userId,\n        isLowEndDevice: this.isLowEndDevice,\n        networkType: this.networkType,\n        url: window.location.pathname,\n      },\n    };\n    \n    // Store metric\n    if (!this.metrics.has(name)) {\n      this.metrics.set(name, []);\n    }\n    this.metrics.get(name)!.push(metric);\n    \n    // Add to report queue\n    this.reportQueue.push(metric);\n    \n    // Schedule batch reporting\n    this.scheduleReport();\n  }\n  \n  /**\n   * Report metric to analytics service\n   */\n  private reportMetric(metric: PerformanceMetric): void {\n    // Immediate reporting for critical metrics\n    if (metric.context?.severity === 'critical') {\n      this.sendMetrics([metric]);\n    } else {\n      this.reportQueue.push(metric);\n      this.scheduleReport();\n    }\n  }\n  \n  /**\n   * Schedule batch reporting of metrics\n   */\n  private scheduleReport(): void {\n    if (this.reportTimer) return;\n    \n    this.reportTimer = window.setTimeout(() => {\n      this.sendMetrics(this.reportQueue);\n      this.reportQueue = [];\n      this.reportTimer = null;\n    }, 5000); // Batch report every 5 seconds\n  }\n  \n  /**\n   * Send metrics to analytics service\n   */\n  private async sendMetrics(metrics: PerformanceMetric[]): Promise<void> {\n    // DISABLED: No external API calls - only local storage in production\n    if (metrics.length === 0) return;\n    \n    try {\n      // Production: Store locally only, no network calls\n      if (process.env.NODE_ENV === 'production') {\n        try {\n          const storedMetrics = localStorage.getItem('performance_metrics') || '[]';\n          const existingMetrics = JSON.parse(storedMetrics);\n          const updatedMetrics = [...existingMetrics, ...metrics].slice(-100);\n          localStorage.setItem('performance_metrics', JSON.stringify(updatedMetrics));\n          logger.debug('Metrics stored locally', 'PerformanceMonitor', { count: metrics.length });\n        } catch (localError) {\n          logger.debug('LocalStorage unavailable', 'PerformanceMonitor', { error: localError });\n        }\n        return; // Exit early - no network calls\n      }\n      \n      // Development: Console logging only\n      if (process.env.NODE_ENV === 'development') {\n        logger.info('Performance Metrics', 'PerformanceMonitor', metrics);\n      }\n    } catch (_error) {\n      logger.error('[Performance] Failed to process metrics:');\n    }\n  }\n  \n  /**\n   * Generate session ID\n   */\n  private generateSessionId(): string {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n  \n  /**\n   * Set user ID for metric tracking\n   */\n  public setUserId(userId: string): void {\n    this.userId = userId;\n  }\n  \n  /**\n   * Get performance summary\n   */\n  public getPerformanceSummary(): Record<string, any> {\n    const summary: Record<string, any> = {};\n    \n    for (const [name, metrics] of this.metrics.entries()) {\n      const values = metrics.map(m => m.value);\n      summary[name] = {\n        count: values.length,\n        min: Math.min(...values),\n        max: Math.max(...values),\n        avg: values.reduce((a, b) => a + b, 0) / values.length,\n        latest: values[values.length - 1],\n      };\n    }\n    \n    return summary;\n  }\n  \n  /**\n   * Clean up observers and timers\n   */\n  public destroy(): void {\n    // Clean up observers\n    for (const observer of this.observers.values()) {\n      observer.disconnect();\n    }\n    this.observers.clear();\n    \n    // Clear timers\n    if (this.reportTimer) {\n      clearTimeout(this.reportTimer);\n    }\n    \n    // Send remaining metrics\n    this.sendMetrics(this.reportQueue);\n  }\n\n  /**\n   * Get performance metrics for analysis\n   */\n  public getMetrics(): Map<string, PerformanceMetric[]> {\n    return new Map(this.metrics);\n  }\n\n  /**\n   * Start performance measurement\n   */\n  public measureStart(label: string): void {\n    performance.mark(`${label}-start`);\n  }\n\n  /**\n   * End performance measurement\n   */\n  public measureEnd(label: string): number | undefined {\n    const endMark = `${label}-end`;\n    const startMark = `${label}-start`;\n    \n    try {\n      performance.mark(endMark);\n      performance.measure(label, startMark, endMark);\n      \n      const measure = performance.getEntriesByName(label, 'measure')[0];\n      if (measure) {\n        this.recordMetric(label, measure.duration);\n        return measure.duration;\n      }\n    } catch (error) {\n    logger.warn(`Failed to measure ${label}:`, error);\n    }\n    \n    return undefined;\n  }\n\n  /**\n   * Cleanup method for compatibility\n   */\n  public cleanup(): void {\n    this.destroy();\n  }\n}\n\n// Export singleton instance\nexport const performanceMonitor = new PerformanceMonitor();\n\n// Export additional instances for compatibility\nexport const _memoryMonitor = performanceMonitor;\nexport const _frameRateMonitor = performanceMonitor;\n\n// Export class for direct instantiation if needed\nexport { PerformanceMonitor };\n\n// Export types\nexport type { PerformanceMetric };\nexport { PERFORMANCE_THRESHOLDS };","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\pwa\\pwaManager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":152,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":152,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":179,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":179,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":208,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":208,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":271,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":271,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":403,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":403,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":478,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":478,"endColumn":20}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '../utils/logger';\n/**\r\n * Progressive Web App (_PWA) Management System\r\n * Coordinates all PWA features including offline support, push notifications, and app installation\r\n */\r\n\r\nimport { pushNotifications } from '../../services/pushNotifications';\r\nimport { initCrisisDB, precacheCrisisResources } from '../../service-worker/crisis-offline';\r\nimport { performanceMonitor } from '../performance/performanceMonitor';\r\nimport { ComponentPreloader, initializeBundleOptimization } from '../bundleOptimization/lazyLoading';\r\n\r\ninterface PWAInstallEvent extends Event {\r\n  prompt(): Promise<void>;\r\n  userChoice: Promise<{ outcome: 'accepted' | 'dismissed' }>;\r\n}\r\n\r\ninterface PWACapabilities {\r\n  isInstallable: boolean;\r\n  isInstalled: boolean;\r\n  supportsNotifications: boolean;\r\n  supportsOffline: boolean;\r\n  supportsPushMessages: boolean;\r\n  supportsBackgroundSync: boolean;\r\n  deviceType: 'mobile' | 'tablet' | 'desktop';\r\n  connectionType: string;\r\n  isLowEndDevice: boolean;\r\n}\r\n\r\nexport class PWAManager {\r\n  private static instance: PWAManager;\r\n  private installPrompt: PWAInstallEvent | null = null;\r\n  private capabilities: PWACapabilities | null = null;\r\n  private isInitialized = false;\r\n\r\n  private constructor() {}\r\n\r\n  static getInstance(): PWAManager {\r\n    if (!PWAManager.instance) {\r\n      PWAManager.instance = new PWAManager();\r\n    }\r\n    return PWAManager.instance;\r\n  }\r\n\r\n  /**\r\n   * Initialize PWA features\r\n   */\r\n  async initialize(): Promise<void> {\r\n    if (this.isInitialized) return;\r\n\r\n    try {\r\n      performanceMonitor.measureStart('pwa_initialization');\r\n\r\n      // Detect PWA capabilities\r\n      this.capabilities = await this.detectCapabilities();\r\n      \r\n      // Initialize core PWA features\r\n      await this.initializeServiceWorker();\r\n      await this.initializePushNotifications();\r\n      await this.initializeOfflineSupport();\r\n      await this.setupInstallPrompt();\r\n      await this.initializePerformanceOptimizations();\r\n      \r\n      // Setup event listeners\r\n      this.setupEventListeners();\r\n      \r\n      this.isInitialized = true;\r\n      \r\n      const initTime = performanceMonitor.measureEnd('pwa_initialization');\r\n      logger.info(`PWA _initialized successfully in ${initTime?.toFixed(2)}ms`);\r\n      \r\n    } catch (error) {\r\n      logger.error('Failed to initialize PWA:');\r\n      performanceMonitor.recordMetric('pwa_init_error', 1, { undefined: String(_undefined) });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detect PWA capabilities\r\n   */\r\n  private async detectCapabilities(): Promise<PWACapabilities> {\r\n    const _userAgent = navigator._userAgent.toLowerCase();\r\n    const connection = (navigator as unknown).connection || {};\r\n    \r\n    // Device type detection\r\n    let deviceType: 'mobile' | 'tablet' | 'desktop' = 'desktop';\r\n    if (/mobile|phone|android|iphone/.test(_userAgent)) {\r\n      deviceType = 'mobile';\r\n    } else if (/tablet|ipad/.test(_userAgent)) {\r\n      deviceType = 'tablet';\r\n    }\r\n\r\n    // Low-end device detection\r\n    const deviceMemory = (navigator as unknown).deviceMemory || 4;\r\n    const hardwareConcurrency = navigator.hardwareConcurrency || 4;\r\n    const isLowEndDevice = deviceMemory <= 2 || hardwareConcurrency <= 2;\r\n\r\n    const capabilities: PWACapabilities = {\r\n      isInstallable: false, // Will be updated when beforeinstallprompt fires\r\n      isInstalled: window.matchMedia('(display-mode: standalone)').matches || \r\n                   (window.navigator as unknown).standalone === true,\r\n      supportsNotifications: 'Notification' in window && 'serviceWorker' in navigator,\r\n      supportsOffline: 'serviceWorker' in navigator && 'caches' in window,\r\n      supportsPushMessages: 'PushManager' in window,\r\n      supportsBackgroundSync: 'serviceWorker' in navigator && 'sync' in window.ServiceWorkerRegistration.prototype,\r\n      deviceType,\r\n      connectionType: connection.effectiveType || 'unknown',\r\n      isLowEndDevice,\r\n    };\r\n\r\n    performanceMonitor.recordMetric('pwa_capabilities_detected', 1, capabilities);\r\n    return capabilities;\r\n  }\r\n\r\n  /**\r\n   * Initialize Service Worker\r\n   */\r\n  private async initializeServiceWorker(): Promise<void> {\r\n    if (!('serviceWorker' in navigator)) {\r\n      logger.warn('Service Worker not supported');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const registration = await navigator.serviceWorker.register('/service-worker.js', {\r\n        scope: '/',\r\n        updateViaCache: 'none'\r\n      });\r\n\r\n      logger.info('Service Worker registered:', registration.scope);\r\n\r\n      // Handle updates\r\n      registration.addEventListener('updatefound', () => {\r\n        const newWorker = registration.installing;\r\n        if (newWorker) {\r\n          newWorker.addEventListener('statechange', () => {\r\n            if (newWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // New service worker available\r\n                this.showUpdateAvailable();\r\n              }\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      // Listen for service worker messages\r\n      navigator.serviceWorker.addEventListener('message', this.handleServiceWorkerMessage.bind(_this));\r\n\r\n      performanceMonitor.recordMetric('service_worker_registered', 1);\r\n\r\n    } catch (_error) {\r\n      logger.error('Service Worker registration failed:');\r\n      performanceMonitor.recordMetric('service_worker_error', 1, { undefined: String(_undefined) });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize push notifications\r\n   */\r\n  private async initializePushNotifications(): Promise<void> {\r\n    if (!this.capabilities?.supportsNotifications) {\r\n      logger.warn('Push notifications not supported');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const _initialized = await pushNotifications.init();\r\n      if (_initialized) {\r\n        logger.info('Push notifications _initialized');\r\n        \r\n        // Schedule wellness reminders based on device _type\r\n        if (this.capabilities.deviceType === 'mobile') {\r\n          await this.scheduleMobileNotifications();\r\n        }\r\n        \r\n        performanceMonitor.recordMetric('push_notifications_initialized', 1);\r\n      }\r\n    } catch (_error) {\r\n      logger.error('Push notifications initialization failed:');\r\n      performanceMonitor.recordMetric('push_notifications_error', 1, { undefined: String(_undefined) });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize offline support\r\n   */\r\n  private async initializeOfflineSupport(): Promise<void> {\r\n    if (!this.capabilities?.supportsOffline) {\r\n      logger.warn('Offline support not available');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Initialize crisis database\r\n      await initCrisisDB();\r\n      \r\n      // Precache critical resources\r\n      await precacheCrisisResources();\r\n      \r\n      // Setup offline event handlers\r\n      window.addEventListener('online', this.handleOnline.bind(_this));\r\n      window.addEventListener('offline', this.handleOffline.bind(_this));\r\n      \r\n      logger.info('Offline support _initialized');\r\n      performanceMonitor.recordMetric('offline_support_initialized', 1);\r\n      \r\n    } catch (_error) {\r\n      logger.error('Offline support initialization failed:');\r\n      performanceMonitor.recordMetric('offline_support_error', 1, { undefined: String(_undefined) });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup app install prompt\r\n   */\r\n  private async setupInstallPrompt(): Promise<void> {\r\n    window.addEventListener('beforeinstallprompt', (event: Event) => {\r\n      event.preventDefault();\r\n      this.installPrompt = event as PWAInstallEvent;\r\n      \r\n      if (this.capabilities) {\r\n        this.capabilities.isInstallable = true;\r\n      }\r\n      \r\n      // Dispatch custom event for UI components\r\n      window.dispatchEvent(new CustomEvent('pwa:installable', {\r\n        detail: { canInstall: true }\r\n      }));\r\n      \r\n      performanceMonitor.recordMetric('install_prompt_available', 1);\r\n    });\r\n\r\n    // Handle app installation\r\n    window.addEventListener('appinstalled', () => {\r\n      if (this.capabilities) {\r\n        this.capabilities.isInstalled = true;\r\n      }\r\n      \r\n      this.installPrompt = null;\r\n      \r\n      // Show welcome notification\r\n      if (pushNotifications.isEnabled()) {\r\n        pushNotifications.showWelcomeNotification();\r\n      }\r\n      \r\n      window.dispatchEvent(new CustomEvent('pwa:installed'));\r\n      performanceMonitor.recordMetric('app_installed', 1);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize performance optimizations\r\n   */\r\n  private async initializePerformanceOptimizations(): Promise<void> {\r\n    try {\r\n      // Initialize bundle optimization\r\n      initializeBundleOptimization();\r\n      \r\n      // Adjust optimizations based on device capabilities\r\n      if (this.capabilities?.isLowEndDevice) {\r\n        await this.enableLowEndDeviceOptimizations();\r\n      }\r\n      \r\n      if (this.capabilities?.connectionType === 'slow-2g' || this.capabilities?.connectionType === '2g') {\r\n        await this.enableSlowConnectionOptimizations();\r\n      }\r\n      \r\n      performanceMonitor.recordMetric('performance_optimizations_initialized', 1);\r\n      \r\n    } catch (_error) {\r\n      logger.error('Performance optimizations failed:');\r\n      performanceMonitor.recordMetric('performance_optimizations_error', 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup event listeners\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Visibility change handler for background/foreground transitions\r\n    document.addEventListener('visibilitychange', () => {\r\n      if (document.visibilityState === 'visible') {\r\n        this.handleAppForeground();\r\n      } else {\r\n        this.handleAppBackground();\r\n      }\r\n    });\r\n\r\n    // Network status changes\r\n    window.addEventListener('online', () => {\r\n      window.dispatchEvent(new CustomEvent('pwa:online'));\r\n    });\r\n\r\n    window.addEventListener('offline', () => {\r\n      window.dispatchEvent(new CustomEvent('pwa:offline'));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handle app coming to foreground\r\n   */\r\n  private handleAppForeground(): void {\r\n    performanceMonitor.recordMetric('app_foreground', 1);\r\n    \r\n    // Sync offline data if online\r\n    if (navigator.onLine) {\r\n      this.syncOfflineData();\r\n    }\r\n    \r\n    // Update push notification permissions\r\n    if (pushNotifications.getPermissionStatus() === 'granted') {\r\n      // Schedule any pending notifications\r\n      this.schedulePendingNotifications();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle app going to background\r\n   */\r\n  private handleAppBackground(): void {\r\n    performanceMonitor.recordMetric('app_background', 1);\r\n    \r\n    // Clean up unnecessary resources\r\n    this.cleanupResources();\r\n  }\r\n\r\n  /**\r\n   * Handle online event\r\n   */\r\n  private handleOnline(): void {\r\n    logger.info('App came online');\r\n    \r\n    // Sync offline data\r\n    this.syncOfflineData();\r\n    \r\n    // Preload components if needed\r\n    ComponentPreloader.preloadDuringIdle();\r\n    \r\n    window.dispatchEvent(new CustomEvent('pwa:sync-start'));\r\n  }\r\n\r\n  /**\r\n   * Handle offline event\r\n   */\r\n  private handleOffline(): void {\r\n    logger.info('App went offline');\r\n    \r\n    // Show offline indicator\r\n    window.dispatchEvent(new CustomEvent('pwa:offline-mode', {\r\n      detail: { message: 'Working offline - Crisis resources remain available' }\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Handle service worker messages\r\n   */\r\n  private handleServiceWorkerMessage(event: MessageEvent): void {\r\n    const { _type, data } = event.data;\r\n    \r\n    switch (_type) {\r\n      case 'SYNC_COMPLETE':\r\n        window.dispatchEvent(new CustomEvent('pwa:sync-complete', { detail: data }));\r\n        break;\r\n        \r\n      case 'CACHE_UPDATED':\r\n        logger.info('Cache updated:', data);\r\n        break;\r\n        \r\n      case 'NOTIFICATION_CLICKED':\r\n        this.handleNotificationClick(data);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle notification clicks\r\n   */\r\n  private handleNotificationClick(data: unknown): void {\r\n    // Forward to push notification service\r\n    pushNotifications.handleNotificationClick(data.action, data.data);\r\n  }\r\n\r\n  /**\r\n   * Install the app\r\n   */\r\n  async installApp(): Promise<boolean> {\r\n    if (!this.installPrompt) {\r\n      logger.warn('No install prompt available');\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      await this.installPrompt.prompt();\r\n      const choice = await this.installPrompt.userChoice;\r\n      \r\n      performanceMonitor.recordMetric('install_prompt_result', 1, {\r\n        outcome: choice.outcome\r\n      });\r\n      \r\n      return choice.outcome === 'accepted';\r\n      \r\n    } catch (_error) {\r\n      logger.error('Install failed:');\r\n      performanceMonitor.recordMetric('install_error', 1, { undefined: String(_undefined) });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show update available notification\r\n   */\r\n  private showUpdateAvailable(): void {\r\n    window.dispatchEvent(new CustomEvent('pwa:update-available', {\r\n      detail: {\r\n        message: 'A new version is available. Refresh to update.',\r\n        action: () => window.location.reload()\r\n      }\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Schedule mobile-specific notifications\r\n   */\r\n  private async scheduleMobileNotifications(): Promise<void> {\r\n    // Morning wellness check-in\r\n    await pushNotifications.scheduleWellnessReminder({\r\n      id: 'morning-checkin',\r\n      _type: 'check-in',\r\n      title: 'Morning Wellness Check',\r\n      body: 'How are you feeling this morning?',\r\n      time: '09:00',\r\n      days: [1, 2, 3, 4, 5, 6, 7], // Every day\r\n      enabled: true\r\n    });\r\n\r\n    // Evening reflection\r\n    await pushNotifications.scheduleWellnessReminder({\r\n      id: 'evening-reflection',\r\n      _type: 'check-in',\r\n      title: 'Evening Reflection',\r\n      body: 'Take a moment to reflect on your day',\r\n      time: '20:00',\r\n      days: [1, 2, 3, 4, 5, 6, 7], // Every day\r\n      enabled: true\r\n    });\r\n\r\n    // Midday breathing break\r\n    await pushNotifications.scheduleWellnessReminder({\r\n      id: 'midday-breathing',\r\n      _type: 'mindfulness',\r\n      title: 'Mindfulness Break',\r\n      body: 'Take 2 minutes for a breathing exercise',\r\n      time: '14:00',\r\n      days: [1, 2, 3, 4, 5], // Weekdays only\r\n      enabled: true\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Schedule pending notifications\r\n   */\r\n  private async schedulePendingNotifications(): Promise<void> {\r\n    // Implementation depends on your notification scheduling system\r\n    logger.info('Scheduling pending notifications...');\r\n  }\r\n\r\n  /**\r\n   * Sync offline data\r\n   */\r\n  private async syncOfflineData(): Promise<void> {\r\n    try {\r\n      // Trigger background sync via service worker\r\n      const registration = await navigator.serviceWorker.ready;\r\n      if ('sync' in registration) {\r\n        await (registration as unknown).sync.register('sync-data');\r\n      }\r\n    } catch (_error) {\r\n      logger.error('Background sync failed:');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enable low-end device optimizations\r\n   */\r\n  private async enableLowEndDeviceOptimizations(): Promise<void> {\r\n    logger.info('Enabling low-end device optimizations...');\r\n    \r\n    // Reduce animation complexity\r\n    document.documentElement.classList.add('low-end-device');\r\n    \r\n    // Disable non-essential features\r\n    localStorage.setItem('performance_mode', 'low');\r\n    \r\n    // Reduce image quality\r\n    document.documentElement.style.setProperty('--image-quality', '0.8');\r\n    \r\n    // Limit concurrent network requests\r\n    // This would be implemented in your API layer\r\n  }\r\n\r\n  /**\r\n   * Enable slow connection optimizations\r\n   */\r\n  private async enableSlowConnectionOptimizations(): Promise<void> {\r\n    logger.info('Enabling slow connection optimizations...');\r\n    \r\n    // Reduce data usage\r\n    document.documentElement.classList.add('slow-connection');\r\n    \r\n    // Disable auto-loading media\r\n    localStorage.setItem('autoload_media', 'false');\r\n    \r\n    // Implement aggressive caching\r\n    // This would be handled by the service worker\r\n  }\r\n\r\n  /**\r\n   * Clean up resources when app goes to background\r\n   */\r\n  private cleanupResources(): void {\r\n    // Clear unused caches\r\n    if ('caches' in window) {\r\n      caches.keys().then(cacheNames => {\r\n        return Promise.all(\r\n          cacheNames\r\n            .filter(_cacheName => _cacheName.includes('temp'))\r\n            .map(_cacheName => caches.delete(_cacheName))\r\n        );\r\n      });\r\n    }\r\n    \r\n    // Clear performance data older than 1 hour\r\n    performanceMonitor.cleanup?.();\r\n  }\r\n\r\n  /**\r\n   * Get PWA capabilities\r\n   */\r\n  getCapabilities(): PWACapabilities | null {\r\n    return this.capabilities;\r\n  }\r\n\r\n  /**\r\n   * Check if app is installable\r\n   */\r\n  isInstallable(): boolean {\r\n    return this.capabilities?.isInstallable ?? false;\r\n  }\r\n\r\n  /**\r\n   * Check if app is installed\r\n   */\r\n  isInstalled(): boolean {\r\n    return this.capabilities?.isInstalled ?? false;\r\n  }\r\n\r\n  /**\r\n   * Get installation prompt\r\n   */\r\n  getInstallPrompt(): PWAInstallEvent | null {\r\n    return this.installPrompt;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const pwaManager = PWAManager.getInstance();\r\n\r\n// Convenience function for initialization\r\nexport async function initializePWA(): Promise<void> {\r\n  await pwaManager.initialize();\r\n}\r\n\r\n// Export types\r\nexport type { PWACapabilities, PWAInstallEvent };","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\responsiveTest.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":219,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":219,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Responsive Design Testing Utilities\n * Helps verify dashboard works across all device sizes\n */\n\nexport interface DeviceProfile {\n  name: string;\n  width: number;\n  height: number;\n  deviceScaleFactor: number;\n  userAgent: string;\n  touch: boolean;\n  mobile: boolean;\n}\n\n// Common device profiles for testing\nexport const DEVICE_PROFILES: DeviceProfile[] = [\n  // Mobile Devices\n  {\n    name: 'iPhone SE',\n    width: 375,\n    height: 667,\n    deviceScaleFactor: 2,\n    userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X)',\n    touch: true,\n    mobile: true\n  },\n  {\n    name: 'iPhone 12 Pro',\n    width: 390,\n    height: 844,\n    deviceScaleFactor: 3,\n    userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X)',\n    touch: true,\n    mobile: true\n  },\n  {\n    name: 'iPhone 14 Pro Max',\n    width: 430,\n    height: 932,\n    deviceScaleFactor: 3,\n    userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X)',\n    touch: true,\n    mobile: true\n  },\n  {\n    name: 'Samsung Galaxy S21',\n    width: 384,\n    height: 854,\n    deviceScaleFactor: 2.625,\n    userAgent: 'Mozilla/5.0 (Linux; Android 12; Samsung Galaxy S21)',\n    touch: true,\n    mobile: true\n  },\n  {\n    name: 'Pixel 5',\n    width: 393,\n    height: 851,\n    deviceScaleFactor: 2.625,\n    userAgent: 'Mozilla/5.0 (Linux; Android 11; Pixel 5)',\n    touch: true,\n    mobile: true\n  },\n  \n  // Tablets\n  {\n    name: 'iPad Mini',\n    width: 768,\n    height: 1024,\n    deviceScaleFactor: 2,\n    userAgent: 'Mozilla/5.0 (iPad; CPU OS 15_0 like Mac OS X)',\n    touch: true,\n    mobile: false\n  },\n  {\n    name: 'iPad Air',\n    width: 820,\n    height: 1180,\n    deviceScaleFactor: 2,\n    userAgent: 'Mozilla/5.0 (iPad; CPU OS 15_0 like Mac OS X)',\n    touch: true,\n    mobile: false\n  },\n  {\n    name: 'iPad Pro 11\"',\n    width: 834,\n    height: 1194,\n    deviceScaleFactor: 2,\n    userAgent: 'Mozilla/5.0 (iPad; CPU OS 15_0 like Mac OS X)',\n    touch: true,\n    mobile: false\n  },\n  {\n    name: 'iPad Pro 12.9\"',\n    width: 1024,\n    height: 1366,\n    deviceScaleFactor: 2,\n    userAgent: 'Mozilla/5.0 (iPad; CPU OS 15_0 like Mac OS X)',\n    touch: true,\n    mobile: false\n  },\n  \n  // Desktop\n  {\n    name: 'Desktop HD',\n    width: 1920,\n    height: 1080,\n    deviceScaleFactor: 1,\n    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',\n    touch: false,\n    mobile: false\n  },\n  {\n    name: 'Desktop FHD',\n    width: 1366,\n    height: 768,\n    deviceScaleFactor: 1,\n    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',\n    touch: false,\n    mobile: false\n  },\n  {\n    name: 'MacBook Pro 13\"',\n    width: 1440,\n    height: 900,\n    deviceScaleFactor: 2,\n    userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)',\n    touch: false,\n    mobile: false\n  },\n  {\n    name: 'MacBook Pro 16\"',\n    width: 1728,\n    height: 1117,\n    deviceScaleFactor: 2,\n    userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)',\n    touch: false,\n    mobile: false\n  }\n];\n\n// Breakpoint definitions\nexport const BREAKPOINTS = {\n  xs: 0,     // Extra small devices (portrait phones)\n  sm: 640,   // Small devices (landscape phones)\n  md: 768,   // Medium devices (_tablets)\n  lg: 1024,  // Large devices (_desktops)\n  xl: 1280,  // Extra large devices (large desktops)\n  '2xl': 1536 // 2X large devices (larger desktops)\n} as const;\n\n// Get current breakpoint\nexport function getCurrentBreakpoint(): keyof typeof BREAKPOINTS {\n  const width = window.innerWidth;\n  \n  if (width >= BREAKPOINTS['2xl']) return '2xl';\n  if (width >= BREAKPOINTS.xl) return 'xl';\n  if (width >= BREAKPOINTS.lg) return 'lg';\n  if (width >= BREAKPOINTS.md) return 'md';\n  if (width >= BREAKPOINTS.sm) return 'sm';\n  return 'xs';\n}\n\n// Check if current device is mobile\nexport function isMobileDevice(): boolean {\n  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n}\n\n// Check if current device supports touch\nexport function isTouchDevice(): boolean {\n  return 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n}\n\n// Get device orientation\nexport function getDeviceOrientation(): 'portrait' | 'landscape' {\n  return window.innerHeight > window.innerWidth ? 'portrait' : 'landscape';\n}\n\n// Test responsive layout\nexport class ResponsiveLayoutTester {\n  private originalWidth: number;\n  private originalHeight: number;\n  private testResults: Map<string, TestResult> = new Map();\n\n  constructor() {\n    this.originalWidth = window.innerWidth;\n    this.originalHeight = window.innerHeight;\n  }\n\n  // Test all device profiles\n  async testAllDevices(testFn: (device: DeviceProfile) => Promise<boolean>): Promise<TestReport> {\n    const results: TestResult[] = [];\n\n    for (const device of DEVICE_PROFILES) {\n      const result = await this.testDevice(device, testFn);\n      results.push(result);\n      this.testResults.set(device.name, result);\n    }\n\n    return this.generateReport(results);\n  }\n\n  // Test specific device\n  async testDevice(\n    device: DeviceProfile, \n    testFn: (device: DeviceProfile) => Promise<boolean>\n  ): Promise<TestResult> {\n    const startTime = performance.now();\n    \n    // Simulate device viewport\n    this.setViewport(device.width, device.height);\n    \n    // Run test\n    let passed = false;\n    let error: Error | undefined;\n    \n    try {\n      passed = await testFn(_device);\n    } catch (_error) {\n      error = e as Error;\n      passed = false;\n    }\n    \n    const duration = performance.now() - startTime;\n    \n    // Reset viewport\n    this.resetViewport();\n    \n    return {\n      device: device.name,\n      passed,\n      duration,\n      error: error?.message,\n      timestamp: new Date()\n    };\n  }\n\n  // Set viewport size (for testing only)\n  private setViewport(width: number, height: number) {\n    // This would typically be done with a testing framework like Playwright or Cypress\n    // For development, we can use CSS to simulate different viewports\n    document.documentElement.style.setProperty('--test-viewport-width', `${width}px`);\n    document.documentElement.style.setProperty('--test-viewport-height', `${height}px`);\n  }\n\n  // Reset viewport\n  private resetViewport() {\n    document.documentElement.style.removeProperty('--test-viewport-width');\n    document.documentElement.style.removeProperty('--test-viewport-height');\n  }\n\n  // Generate test report\n  private generateReport(results: TestResult[]): TestReport {\n    const passed = results.filter(r => r.passed).length;\n    const failed = results.filter(r => !r.passed).length;\n    const totalDuration = results.reduce((sum, r) => sum + r.duration, 0);\n\n    return {\n      summary: {\n        total: results.length,\n        passed,\n        failed,\n        passRate: (passed / results.length) * 100,\n        averageDuration: totalDuration / results.length\n      },\n      results,\n      generatedAt: new Date(),\n      recommendations: this.generateRecommendations(results)\n    };\n  }\n\n  // Generate recommendations based on test results\n  private generateRecommendations(results: TestResult[]): string[] {\n    const recommendations: string[] = [];\n    const failedDevices = results.filter(r => !r.passed);\n\n    if (failedDevices.length > 0) {\n      const mobileFailures = failedDevices.filter(r => \n        DEVICE_PROFILES.find(d => d.name === r.device)?.mobile\n      );\n      \n      if (mobileFailures.length > 0) {\n        recommendations.push('Mobile responsiveness needs improvement');\n      }\n\n      const tabletFailures = failedDevices.filter(r => {\n        const device = DEVICE_PROFILES.find(d => d.name === r.device);\n        return device && !device.mobile && device.touch;\n      });\n      \n      if (tabletFailures.length > 0) {\n        recommendations.push('Tablet layout optimization required');\n      }\n    }\n\n    const slowTests = results.filter(r => r.duration > 1000);\n    if (slowTests.length > 0) {\n      recommendations.push('Performance optimization needed for some viewports');\n    }\n\n    return recommendations;\n  }\n}\n\n// Test result interfaces\ninterface TestResult {\n  device: string;\n  passed: boolean;\n  duration: number;\n  error?: string;\n  timestamp: Date;\n}\n\ninterface TestReport {\n  summary: {\n    total: number;\n    passed: number;\n    failed: number;\n    passRate: number;\n    averageDuration: number;\n  };\n  results: TestResult[];\n  generatedAt: Date;\n  recommendations: string[];\n}\n\n// CSS Media Query validator\nexport function validateMediaQueries(): MediaQueryValidation[] {\n  const validations: MediaQueryValidation[] = [];\n  \n  // Check common breakpoints\n  for (const [name, minWidth] of Object.entries(_BREAKPOINTS)) {\n    const query = `(min-width: ${minWidth}px)`;\n    const matches = window.matchMedia(_query).matches;\n    \n    validations.push({\n      breakpoint: name,\n      query,\n      matches,\n      currentWidth: window.innerWidth\n    });\n  }\n  \n  // Check orientation\n  validations.push({\n    breakpoint: 'orientation',\n    query: '(orientation: portrait)',\n    matches: window.matchMedia('(orientation: portrait)').matches,\n    currentWidth: window.innerWidth\n  });\n  \n  // Check touch capability\n  validations.push({\n    breakpoint: 'touch',\n    query: '(hover: none)',\n    matches: window.matchMedia('(hover: none)').matches,\n    currentWidth: window.innerWidth\n  });\n  \n  return validations;\n}\n\ninterface MediaQueryValidation {\n  breakpoint: string;\n  query: string;\n  matches: boolean;\n  currentWidth: number;\n}\n\n// Accessibility viewport testing\nexport function testAccessibilityAtBreakpoint(breakpoint: keyof typeof BREAKPOINTS): AccessibilityTest {\n  const tests: AccessibilityCheck[] = [];\n  \n  // Check font sizes\n  const minFontSize = 14; // Minimum recommended font size\n  const bodyFontSize = parseFloat(\n    window.getComputedStyle(document.body).fontSize\n  );\n  \n  tests.push({\n    name: 'Font Size',\n    passed: bodyFontSize >= minFontSize,\n    message: `Body font size is ${bodyFontSize}px (min: ${minFontSize}px)`\n  });\n  \n  // Check touch target sizes\n  const minTouchTarget = 44; // Minimum touch target size in pixels\n  const buttons = document.querySelectorAll('button');\n  let touchTargetsPassed = true;\n  \n  buttons.forEach(button => {\n    const rect = button.getBoundingClientRect();\n    if (rect.width < minTouchTarget || rect.height < minTouchTarget) {\n      touchTargetsPassed = false;\n    }\n  });\n  \n  tests.push({\n    name: 'Touch Targets',\n    passed: touchTargetsPassed,\n    message: touchTargetsPassed \n      ? 'All touch targets meet minimum size' \n      : 'Some touch targets are too small'\n  });\n  \n  // Check contrast ratios\n  tests.push({\n    name: 'Color Contrast',\n    passed: true, // Would need more complex checking\n    message: 'Manual verification required'\n  });\n  \n  // Check viewport zoom\n  const viewportMeta = document.querySelector('meta[name=\"viewport\"]');\n  const allowsZoom = !viewportMeta?.getAttribute('content')?.includes('user-scalable=no');\n  \n  tests.push({\n    name: 'Viewport Zoom',\n    passed: allowsZoom,\n    message: allowsZoom ? 'Zoom is enabled' : 'Zoom is disabled'\n  });\n  \n  return {\n    breakpoint,\n    timestamp: new Date(),\n    tests,\n    passed: tests.every(t => t.passed)\n  };\n}\n\ninterface AccessibilityCheck {\n  name: string;\n  passed: boolean;\n  message: string;\n}\n\ninterface AccessibilityTest {\n  breakpoint: string;\n  timestamp: Date;\n  tests: AccessibilityCheck[];\n  passed: boolean;\n}\n\n// Export test runner for use in components\nexport const _responsiveTester = new ResponsiveLayoutTester();","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\runtimeGuards.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":21,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[818,821],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[818,821],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":38,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":102,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":130,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":130,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":182,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":182,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":193,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":193,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":204,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":204,"endColumn":24}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '../utils/logger';\n/**\n * Runtime Guards - Defensive Programming Patterns\n * Prevents common runtime errors and lexical declaration issues\n */\n\n// Safe variable accessor to prevent undefined access\nexport function safeAccess<T>(obj: unknown, path: string, defaultValue?: T): T | undefined {\n  try {\n    const keys = path.split('.');\n    let result = obj;\n    \n    for (const key of keys) {\n      if (result == null || typeof result !== 'object') {\n        return defaultValue;\n      }\n      result = result[key];\n    }\n    \n    return result !== undefined ? result : defaultValue;\n  } catch (_error) {\n    logger.warn('Safe access failed:', path, e);\n    return defaultValue;\n  }\n}\n\n// Safe function caller to prevent call stack issues\nexport function safeCall<T extends (...args: unknown[]) => any>(\n  fn: T | undefined | null,\n  defaultValue?: ReturnType<T>,\n  ...args: Parameters<T>\n): ReturnType<T> | undefined {\n  try {\n    if (typeof fn === 'function') {\n      return fn(...args);\n    }\n    return defaultValue;\n  } catch (_error) {\n    logger.error('Safe call failed:', e);\n    return defaultValue;\n  }\n}\n\n// Guard against temporal dead zone violations\nexport function initializeVariable<T>(\n  getter: () => T,\n  defaultValue: T,\n  varName?: string\n): T {\n  try {\n    const result = getter();\n    return result !== undefined ? result : defaultValue;\n  } catch {\n    if (e instanceof ReferenceError && e.message.includes('before initialization')) {\n      logger.warn(`Temporal dead zone detected for ${varName || 'variable'}, using default:`, defaultValue);\n      return defaultValue;\n    }\n    throw e; // Re-throw other errors\n  }\n}\n\n// Safe module loader to prevent circular dependency issues\nexport function safeImport<T>(\n  importPromise: Promise<T>,\n  fallback: T\n): Promise<T> {\n  return importPromise.catch((error) => {\n    logger.error('Module import failed, using fallback:', error);\n    return fallback;\n  });\n}\n\n// Global error handler setup\nexport function setupRuntimeGuards() {\n  // Prevent unhandled errors from crashing the app\n  window.addEventListener('error', (event) => {\n    logger.error('🚨 Runtime Error Caught:', {\n      message: event.message,\n      filename: event.filename,\n      lineno: event.lineno,\n      colno: event.colno,\n      error: event.error,\n      timestamp: new Date().toISOString()\n    });\n    \n    // Log to storage for analysis\n    try {\n      const errorLog = JSON.parse(localStorage.getItem('runtime_errors') || '[]');\n      errorLog.push({\n        type: 'script_error',\n        message: event.message,\n        filename: event.filename,\n        lineno: event.lineno,\n        colno: event.colno,\n        stack: event.error?.stack,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Keep only last 50 errors\n      const _recentErrors = errorLog.slice(-50);\n      localStorage.setItem('runtime_errors', JSON.stringify(_recentErrors));\n    } catch (_error) {\n      logger.warn('Failed to log runtime error: ', e);\n    }\n    \n    // Don't prevent default error handling\n    return false;\n  });\n  \n  // Prevent unhandled promise rejections\n  window.addEventListener('unhandledrejection', (event) => {\n    logger.error('🚨 Unhandled Promise Rejection:', {\n      reason: event.reason,\n      promise: event.promise,\n      timestamp: new Date().toISOString()\n    });\n    \n    // Log promise rejections\n    try {\n      const rejectionLog = JSON.parse(localStorage.getItem('promise_rejections') || '[]');\n      rejectionLog.push({\n        reason: event.reason?.toString(),\n        stack: event.reason?.stack,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Keep only last 30 rejections\n      const _recentRejections = rejectionLog.slice(-30);\n      localStorage.setItem('promise_rejections', JSON.stringify(_recentRejections));\n    } catch (_error) {\n    logger.warn('Failed to log promise rejection:', e);\n    }\n    \n    // Prevent the rejection from being logged to console\n    event.preventDefault();\n  });\n  \n  logger.info('✅ Runtime guards initialized');\n}\n\n// Memory leak prevention\nexport class MemoryLeakGuard {\n  private static instance: MemoryLeakGuard;\n  private observers: Set<unknown> = new Set();\n  private timers: Set<unknown> = new Set();\n  private listeners: Map<EventTarget, Map<string, EventListener>> = new Map();\n  \n  static getInstance(): MemoryLeakGuard {\n    if (!MemoryLeakGuard.instance) {\n      MemoryLeakGuard.instance = new MemoryLeakGuard();\n    }\n    return MemoryLeakGuard.instance;\n  }\n  \n  // Track observers for cleanup\n  trackObserver(observer: unknown) {\n    this.observers.add(_observer);\n    return observer;\n  }\n  \n  // Track timers for cleanup\n  trackTimer(_timerId: unknown) {\n    this.timers.add(_timerId);\n    return _timerId;\n  }\n  \n  // Track event listeners for cleanup\n  trackListener(element: EventTarget, event: string, listener: EventListener) {\n    if (!this.listeners.has(_element)) {\n      this.listeners.set(element, new Map());\n    }\n    this.listeners.get(_element)!.set(event, listener);\n  }\n  \n  // Clean up all tracked resources\n  cleanup() {\n    // Disconnect observers\n    this.observers.forEach(observer => {\n      try {\n        if (observer.disconnect) observer.disconnect();\n        if (observer.unobserve) observer.unobserve();\n      } catch (_error) {\n    logger.warn('Failed to disconnect observer:', e);\n      }\n    });\n    this.observers.clear();\n    \n    // Clear timers\n    this.timers.forEach(_timerId => {\n      try {\n        clearTimeout(_timerId);\n        clearInterval(_timerId);\n      } catch (_error) {\n    logger.warn('Failed to clear timer:', e);\n      }\n    });\n    this.timers.clear();\n    \n    // Remove event listeners\n    this.listeners.forEach((events, element) => {\n      events.forEach((listener, event) => {\n        try {\n          element.removeEventListener(event, listener);\n        } catch (_error) {\n    logger.warn('Failed to remove event listener:', e);\n        }\n      });\n    });\n    this.listeners.clear();\n  }\n}\n\n// Performance monitoring guard\nexport class PerformanceGuard {\n  private static metrics: Map<string, number> = new Map();\n  \n  static startMeasurement(name: string) {\n    this.metrics.set(name, performance.now());\n  }\n  \n  static endMeasurement(name: string, warnThreshold = 1000) {\n    const start = this.metrics.get(name);\n    if (_start) {\n      const duration = performance.now() - start;\n      this.metrics.delete(name);\n      \n      if (duration > warnThreshold) {\n        logger.warn(`⚠️ Performance warning: ${name} took ${duration.toFixed(2)}ms`);\n      }\n      \n      return duration;\n    }\n    return 0;\n  }\n}\n\n// Initialize guards when module loads\nif (typeof window !== 'undefined') {\n  setupRuntimeGuards();\n}\n\nexport default {\n  safeAccess,\n  safeCall,\n  initializeVariable,\n  safeImport,\n  setupRuntimeGuards,\n  MemoryLeakGuard,\n  PerformanceGuard\n};","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\utils\\supportiveLanguage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\src\\workers\\chartProcessor.worker.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[904,907],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[904,907],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1773,1776],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1773,1776],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2427,2430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2427,2430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3356,3359],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3356,3359],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":163,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":163,"endColumn":49,"suggestions":[{"messageId":"addBrackets","fix":{"range":[4443,4548],"text":"{ const week = this.getWeekNumber(date);\n          key = `${date.getFullYear()}-W${week}`;\n          break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":190,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5312,5315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5312,5315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":324,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":324,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9303,9306],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9303,9306],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":336,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":336,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9796,9799],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9796,9799],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":336,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":336,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9810,9813],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9810,9813],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference lib=\"webworker\" />\n/**\n * Web Worker for Heavy Chart Calculations\n * Offloads intensive data processing from main thread\n */\n\n// @ts-expect-error - DedicatedWorkerGlobalScope is a global API\ndeclare const self: DedicatedWorkerGlobalScope;\n\ninterface ChartDataPoint {\n  date: string;\n  value: number;\n  label?: string;\n  metadata?: unknown;\n}\n\ninterface ProcessingRequest {\n  type: 'PROCESS_MOOD_DATA' | 'AGGREGATE_WELLNESS' | 'CALCULATE_TRENDS' | 'SAMPLE_DATA';\n  data: ChartDataPoint[];\n  options?: {\n    interval?: 'day' | 'week' | 'month';\n    smoothing?: boolean;\n    sampling?: number;\n    trendLine?: boolean;\n  };\n}\n\ninterface ProcessingResponse {\n  type: string;\n  result: unknown;\n  processingTime: number;\n}\n\n// Utility functions for data processing\nconst dataProcessors = {\n  /**\n   * Process mood data for visualization\n   */\n  processMoodData(data: ChartDataPoint[], options: any = {}) {\n    const startTime = performance.now();\n    \n    // Group by interval\n    const grouped = this.groupByInterval(data, options.interval || 'day');\n    \n    // Calculate averages\n    const averaged = Object.entries(grouped).map(([date, points]) => ({\n      date,\n      value: points.reduce((sum, p) => sum + p.value, 0) / points.length,\n      count: points.length,\n      min: Math.min(...points.map(p => p.value)),\n      max: Math.max(...points.map(p => p.value)),\n    }));\n    \n    // Apply smoothing if requested\n    const result = options.smoothing \n      ? this.applySmoothing(averaged, 3)\n      : averaged;\n    \n    return {\n      processed: result,\n      stats: this.calculateStats(data),\n      processingTime: performance.now() - startTime,\n    };\n  },\n\n  /**\n   * Aggregate wellness metrics\n   */\n  aggregateWellness(data: ChartDataPoint[], _options: any = {}) {\n    const startTime = performance.now();\n    \n    // Calculate rolling averages\n    const rollingAvg = this.calculateRollingAverage(data, 7);\n    \n    // Identify patterns\n    const patterns = this.identifyPatterns(data);\n    \n    // Calculate wellness score\n    const wellnessScore = this.calculateWellnessScore(data);\n    \n    return {\n      aggregated: rollingAvg,\n      patterns,\n      wellnessScore,\n      insights: this.generateInsights(patterns, wellnessScore),\n      processingTime: performance.now() - startTime,\n    };\n  },\n\n  /**\n   * Calculate trend lines and predictions\n   */\n  calculateTrends(data: ChartDataPoint[], _options: any = {}) {\n    const startTime = performance.now();\n    \n    // Linear regression for trend line\n    const trendLine = this.linearRegression(data);\n    \n    // Calculate moving averages\n    const movingAvg = {\n      short: this.calculateMovingAverage(data, 7),\n      medium: this.calculateMovingAverage(data, 30),\n      long: this.calculateMovingAverage(data, 90),\n    };\n    \n    // Detect trend direction\n    const trendDirection = this.detectTrendDirection(trendLine);\n    \n    // Simple prediction (next 7 days)\n    const predictions = this.generatePredictions(trendLine, 7);\n    \n    return {\n      trendLine,\n      movingAverages: movingAvg,\n      direction: trendDirection,\n      predictions,\n      confidence: this.calculateConfidence(data, trendLine),\n      processingTime: performance.now() - startTime,\n    };\n  },\n\n  /**\n   * Sample large datasets for performance\n   */\n  sampleData(data: ChartDataPoint[], options: any = {}) {\n    const targetSize = options.sampling || 100;\n    \n    if (data.length <= targetSize) {\n      return data;\n    }\n    \n    const step = Math.ceil(data.length / targetSize);\n    const sampled: ChartDataPoint[] = [];\n    \n    for (let i = 0; i < data.length; i += step) {\n      // Take average of points in step range\n      const slice = data.slice(i, Math.min(i + step, data.length));\n      const avgValue = slice.reduce((sum, p) => sum + p.value, 0) / slice.length;\n      \n      const middlePoint = slice[Math.floor(slice.length / 2)];\n      if (!middlePoint) continue;\n      \n      sampled.push({\n        date: middlePoint.date,\n        value: avgValue,\n        metadata: { sampled: true, originalCount: slice.length },\n      });\n    }\n    \n    return sampled;\n  },\n\n  // Helper functions\n  groupByInterval(data: ChartDataPoint[], interval: string) {\n    const grouped: { [key: string]: ChartDataPoint[] } = {};\n    \n    data.forEach(point => {\n      const date = new Date(point.date);\n      let key: string;\n      \n      switch (interval) {\n        case 'week':\n          const week = this.getWeekNumber(date);\n          key = `${date.getFullYear()}-W${week}`;\n          break;\n        case 'month':\n          key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n          break;\n        default: // day\n          key = date.toISOString().split('T')[0] || date.toISOString();\n      }\n      \n      if (!grouped[key]) {\n        grouped[key] = [];\n      }\n      grouped[key]!.push(point);\n    });\n    \n    return grouped;\n  },\n\n  getWeekNumber(date: Date): number {\n    const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n    const dayNum = d.getUTCDay() || 7;\n    d.setUTCDate(d.getUTCDate() + 4 - dayNum);\n    const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));\n    return Math.ceil((((d.getTime() - yearStart.getTime()) / 86400000) + 1) / 7);\n  },\n\n  applySmoothing(data: any[], windowSize: number) {\n    const smoothed = [];\n    \n    for (let i = 0; i < data.length; i++) {\n      const start = Math.max(0, i - Math.floor(windowSize / 2));\n      const end = Math.min(data.length, i + Math.ceil(windowSize / 2));\n      const window = data.slice(start, end);\n      \n      const avgValue = window.reduce((sum, p) => sum + p.value, 0) / window.length;\n      \n      smoothed.push({\n        ...data[i],\n        value: avgValue,\n        smoothed: true,\n      });\n    }\n    \n    return smoothed;\n  },\n\n  calculateStats(data: ChartDataPoint[]) {\n    const values = data.map(p => p.value);\n    const sum = values.reduce((a, b) => a + b, 0);\n    const mean = sum / values.length;\n    \n    const sortedValues = [...values].sort((a, b) => a - b);\n    const median = sortedValues[Math.floor(sortedValues.length / 2)];\n    \n    const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;\n    const stdDev = Math.sqrt(variance);\n    \n    return {\n      mean,\n      median,\n      min: Math.min(...values),\n      max: Math.max(...values),\n      stdDev,\n      count: values.length,\n    };\n  },\n\n  calculateRollingAverage(data: ChartDataPoint[], windowSize: number) {\n    const result = [];\n    \n    for (let i = 0; i < data.length; i++) {\n      const start = Math.max(0, i - windowSize + 1);\n      const window = data.slice(start, i + 1);\n      const avg = window.reduce((sum, p) => sum + p.value, 0) / window.length;\n      \n      result.push({\n        ...data[i],\n        rollingAvg: avg,\n      });\n    }\n    \n    return result;\n  },\n\n  identifyPatterns(data: ChartDataPoint[]) {\n    const patterns = {\n      weeklyPattern: this.findWeeklyPattern(data),\n      monthlyPattern: this.findMonthlyPattern(data),\n      peaks: this.findPeaks(data),\n      troughs: this.findTroughs(data),\n    };\n    \n    return patterns;\n  },\n\n  findWeeklyPattern(data: ChartDataPoint[]) {\n    const dayAverages: { [key: number]: number[] } = {};\n    \n    data.forEach(point => {\n      const day = new Date(point.date).getDay();\n      if (!dayAverages[day]) {\n        dayAverages[day] = [];\n      }\n      dayAverages[day].push(point.value);\n    });\n    \n    const pattern = Object.entries(dayAverages).map(([day, values]) => ({\n      day: parseInt(day),\n      average: values.reduce((sum, v) => sum + v, 0) / values.length,\n    }));\n    \n    return pattern;\n  },\n\n  findMonthlyPattern(data: ChartDataPoint[]) {\n    const monthAverages: { [key: number]: number[] } = {};\n    \n    data.forEach(point => {\n      const month = new Date(point.date).getMonth();\n      if (!monthAverages[month]) {\n        monthAverages[month] = [];\n      }\n      monthAverages[month].push(point.value);\n    });\n    \n    const pattern = Object.entries(monthAverages).map(([month, values]) => ({\n      month: parseInt(month),\n      average: values.reduce((sum, v) => sum + v, 0) / values.length,\n    }));\n    \n    return pattern;\n  },\n\n  findPeaks(data: ChartDataPoint[], threshold = 0.8) {\n    const values = data.map(p => p.value);\n    const max = Math.max(...values);\n    const peakThreshold = max * threshold;\n    \n    return data.filter(p => p.value >= peakThreshold);\n  },\n\n  findTroughs(data: ChartDataPoint[], threshold = 0.2) {\n    const values = data.map(p => p.value);\n    const max = Math.max(...values);\n    const troughThreshold = max * threshold;\n    \n    return data.filter(p => p.value <= troughThreshold);\n  },\n\n  calculateWellnessScore(data: ChartDataPoint[]) {\n    const recentData = data.slice(-30); // Last 30 days\n    const avgMood = recentData.reduce((sum, p) => sum + p.value, 0) / recentData.length;\n    const consistency = 1 - (this.calculateStats(recentData).stdDev / 10);\n    const trend = this.detectTrendDirection(this.linearRegression(recentData));\n    \n    const trendScore = trend === 'improving' ? 1.2 : trend === 'declining' ? 0.8 : 1;\n    \n    return Math.min(100, Math.max(0, (avgMood * 10 * consistency * trendScore)));\n  },\n\n  generateInsights(patterns: any, wellnessScore: number) {\n    const insights = [];\n    \n    if (wellnessScore > 70) {\n      insights.push('Your overall wellness is excellent. Keep up the great work!');\n    } else if (wellnessScore > 50) {\n      insights.push('Your wellness is good, with room for improvement.');\n    } else {\n      insights.push('Your wellness score suggests you might benefit from additional support.');\n    }\n    \n    // Weekly pattern insights\n    const bestDay = patterns.weeklyPattern.reduce((best: any, current: any) => \n      current.average > best.average ? current : best\n    );\n    insights.push(`You tend to feel best on ${this.getDayName(bestDay.day)}s.`);\n    \n    return insights;\n  },\n\n  getDayName(day: number): string {\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    return days[day] || 'Unknown';\n  },\n\n  linearRegression(data: ChartDataPoint[]) {\n    const n = data.length;\n    let sumX = 0, sumY = 0, sumXY = 0, sumX2 = 0;\n    \n    data.forEach((point, i) => {\n      sumX += i;\n      sumY += point.value;\n      sumXY += i * point.value;\n      sumX2 += i * i;\n    });\n    \n    const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\n    const intercept = (sumY - slope * sumX) / n;\n    \n    return { slope, intercept };\n  },\n\n  calculateMovingAverage(data: ChartDataPoint[], period: number) {\n    const result = [];\n    \n    for (let i = period - 1; i < data.length; i++) {\n      const slice = data.slice(i - period + 1, i + 1);\n      const avg = slice.reduce((sum, p) => sum + p.value, 0) / period;\n      \n      const dataPoint = data[i];\n      if (!dataPoint) continue;\n      \n      result.push({\n        date: dataPoint.date,\n        value: avg,\n      });\n    }\n    \n    return result;\n  },\n\n  detectTrendDirection(regression: { slope: number; intercept: number }) {\n    if (regression.slope > 0.1) return 'improving';\n    if (regression.slope < -0.1) return 'declining';\n    return 'stable';\n  },\n\n  generatePredictions(regression: { slope: number; intercept: number }, days: number) {\n    const predictions = [];\n    const today = new Date();\n    \n    for (let i = 1; i <= days; i++) {\n      const futureDate = new Date(today);\n      futureDate.setDate(today.getDate() + i);\n      \n      const predictedValue = regression.intercept + regression.slope * i;\n      \n      predictions.push({\n        date: futureDate.toISOString(),\n        value: Math.max(0, Math.min(10, predictedValue)), // Clamp between 0-10\n        isPrediction: true,\n      });\n    }\n    \n    return predictions;\n  },\n\n  calculateConfidence(data: ChartDataPoint[], regression: { slope: number; intercept: number }) {\n    // Calculate R-squared\n    const yMean = data.reduce((sum, p) => sum + p.value, 0) / data.length;\n    let ssRes = 0, ssTot = 0;\n    \n    data.forEach((point, i) => {\n      const predicted = regression.intercept + regression.slope * i;\n      ssRes += Math.pow(point.value - predicted, 2);\n      ssTot += Math.pow(point.value - yMean, 2);\n    });\n    \n    const rSquared = 1 - (ssRes / ssTot);\n    return Math.max(0, Math.min(1, rSquared));\n  },\n};\n\n// Message handler\nself.addEventListener('message', (event: MessageEvent<ProcessingRequest>) => {\n  const { type, data, options } = event.data;\n  const startTime = performance.now();\n  \n  let result: unknown;\n  \n  try {\n    switch (type) {\n      case 'PROCESS_MOOD_DATA':\n        result = dataProcessors.processMoodData(data, options);\n        break;\n      \n      case 'AGGREGATE_WELLNESS':\n        result = dataProcessors.aggregateWellness(data, options);\n        break;\n      \n      case 'CALCULATE_TRENDS':\n        result = dataProcessors.calculateTrends(data, options);\n        break;\n      \n      case 'SAMPLE_DATA':\n        result = dataProcessors.sampleData(data, options);\n        break;\n      \n      default:\n        throw new Error(`Unknown processing type: ${type}`);\n    }\n    \n    const response: ProcessingResponse = {\n      type,\n      result,\n      processingTime: performance.now() - startTime,\n    };\n    \n    self.postMessage(response);\n  } catch (error) {\n    self.postMessage({\n      type: 'ERROR',\n      error: error instanceof Error ? error.message : 'Processing error',\n      processingTime: performance.now() - startTime,\n    });\n  }\n});\n\n// Export for TypeScript\nexport {};","usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\test-results\\assets\\index-D_ryMEPs.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\tests\\setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"H:\\Astral Core\\CoreV4\\vite.config.optimized.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
